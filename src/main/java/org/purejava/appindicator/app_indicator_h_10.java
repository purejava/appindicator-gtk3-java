// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_10 extends app_indicator_h_11 {

    app_indicator_h_10() {
        // Should not be called directly
    }
    private static final int PANGO_SCRIPT_INVALID_CODE = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_INVALID_CODE = -1
     * }
     */
    public static int PANGO_SCRIPT_INVALID_CODE() {
        return PANGO_SCRIPT_INVALID_CODE;
    }
    private static final int PANGO_SCRIPT_COMMON = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_COMMON = 0
     * }
     */
    public static int PANGO_SCRIPT_COMMON() {
        return PANGO_SCRIPT_COMMON;
    }
    private static final int PANGO_SCRIPT_INHERITED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_INHERITED = 1
     * }
     */
    public static int PANGO_SCRIPT_INHERITED() {
        return PANGO_SCRIPT_INHERITED;
    }
    private static final int PANGO_SCRIPT_ARABIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_ARABIC = 2
     * }
     */
    public static int PANGO_SCRIPT_ARABIC() {
        return PANGO_SCRIPT_ARABIC;
    }
    private static final int PANGO_SCRIPT_ARMENIAN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_ARMENIAN = 3
     * }
     */
    public static int PANGO_SCRIPT_ARMENIAN() {
        return PANGO_SCRIPT_ARMENIAN;
    }
    private static final int PANGO_SCRIPT_BENGALI = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_BENGALI = 4
     * }
     */
    public static int PANGO_SCRIPT_BENGALI() {
        return PANGO_SCRIPT_BENGALI;
    }
    private static final int PANGO_SCRIPT_BOPOMOFO = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_BOPOMOFO = 5
     * }
     */
    public static int PANGO_SCRIPT_BOPOMOFO() {
        return PANGO_SCRIPT_BOPOMOFO;
    }
    private static final int PANGO_SCRIPT_CHEROKEE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_CHEROKEE = 6
     * }
     */
    public static int PANGO_SCRIPT_CHEROKEE() {
        return PANGO_SCRIPT_CHEROKEE;
    }
    private static final int PANGO_SCRIPT_COPTIC = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_COPTIC = 7
     * }
     */
    public static int PANGO_SCRIPT_COPTIC() {
        return PANGO_SCRIPT_COPTIC;
    }
    private static final int PANGO_SCRIPT_CYRILLIC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_CYRILLIC = 8
     * }
     */
    public static int PANGO_SCRIPT_CYRILLIC() {
        return PANGO_SCRIPT_CYRILLIC;
    }
    private static final int PANGO_SCRIPT_DESERET = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_DESERET = 9
     * }
     */
    public static int PANGO_SCRIPT_DESERET() {
        return PANGO_SCRIPT_DESERET;
    }
    private static final int PANGO_SCRIPT_DEVANAGARI = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_DEVANAGARI = 10
     * }
     */
    public static int PANGO_SCRIPT_DEVANAGARI() {
        return PANGO_SCRIPT_DEVANAGARI;
    }
    private static final int PANGO_SCRIPT_ETHIOPIC = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_ETHIOPIC = 11
     * }
     */
    public static int PANGO_SCRIPT_ETHIOPIC() {
        return PANGO_SCRIPT_ETHIOPIC;
    }
    private static final int PANGO_SCRIPT_GEORGIAN = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_GEORGIAN = 12
     * }
     */
    public static int PANGO_SCRIPT_GEORGIAN() {
        return PANGO_SCRIPT_GEORGIAN;
    }
    private static final int PANGO_SCRIPT_GOTHIC = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_GOTHIC = 13
     * }
     */
    public static int PANGO_SCRIPT_GOTHIC() {
        return PANGO_SCRIPT_GOTHIC;
    }
    private static final int PANGO_SCRIPT_GREEK = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_GREEK = 14
     * }
     */
    public static int PANGO_SCRIPT_GREEK() {
        return PANGO_SCRIPT_GREEK;
    }
    private static final int PANGO_SCRIPT_GUJARATI = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_GUJARATI = 15
     * }
     */
    public static int PANGO_SCRIPT_GUJARATI() {
        return PANGO_SCRIPT_GUJARATI;
    }
    private static final int PANGO_SCRIPT_GURMUKHI = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_GURMUKHI = 16
     * }
     */
    public static int PANGO_SCRIPT_GURMUKHI() {
        return PANGO_SCRIPT_GURMUKHI;
    }
    private static final int PANGO_SCRIPT_HAN = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_HAN = 17
     * }
     */
    public static int PANGO_SCRIPT_HAN() {
        return PANGO_SCRIPT_HAN;
    }
    private static final int PANGO_SCRIPT_HANGUL = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_HANGUL = 18
     * }
     */
    public static int PANGO_SCRIPT_HANGUL() {
        return PANGO_SCRIPT_HANGUL;
    }
    private static final int PANGO_SCRIPT_HEBREW = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_HEBREW = 19
     * }
     */
    public static int PANGO_SCRIPT_HEBREW() {
        return PANGO_SCRIPT_HEBREW;
    }
    private static final int PANGO_SCRIPT_HIRAGANA = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_HIRAGANA = 20
     * }
     */
    public static int PANGO_SCRIPT_HIRAGANA() {
        return PANGO_SCRIPT_HIRAGANA;
    }
    private static final int PANGO_SCRIPT_KANNADA = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_KANNADA = 21
     * }
     */
    public static int PANGO_SCRIPT_KANNADA() {
        return PANGO_SCRIPT_KANNADA;
    }
    private static final int PANGO_SCRIPT_KATAKANA = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_KATAKANA = 22
     * }
     */
    public static int PANGO_SCRIPT_KATAKANA() {
        return PANGO_SCRIPT_KATAKANA;
    }
    private static final int PANGO_SCRIPT_KHMER = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_KHMER = 23
     * }
     */
    public static int PANGO_SCRIPT_KHMER() {
        return PANGO_SCRIPT_KHMER;
    }
    private static final int PANGO_SCRIPT_LAO = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_LAO = 24
     * }
     */
    public static int PANGO_SCRIPT_LAO() {
        return PANGO_SCRIPT_LAO;
    }
    private static final int PANGO_SCRIPT_LATIN = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_LATIN = 25
     * }
     */
    public static int PANGO_SCRIPT_LATIN() {
        return PANGO_SCRIPT_LATIN;
    }
    private static final int PANGO_SCRIPT_MALAYALAM = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MALAYALAM = 26
     * }
     */
    public static int PANGO_SCRIPT_MALAYALAM() {
        return PANGO_SCRIPT_MALAYALAM;
    }
    private static final int PANGO_SCRIPT_MONGOLIAN = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MONGOLIAN = 27
     * }
     */
    public static int PANGO_SCRIPT_MONGOLIAN() {
        return PANGO_SCRIPT_MONGOLIAN;
    }
    private static final int PANGO_SCRIPT_MYANMAR = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MYANMAR = 28
     * }
     */
    public static int PANGO_SCRIPT_MYANMAR() {
        return PANGO_SCRIPT_MYANMAR;
    }
    private static final int PANGO_SCRIPT_OGHAM = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_OGHAM = 29
     * }
     */
    public static int PANGO_SCRIPT_OGHAM() {
        return PANGO_SCRIPT_OGHAM;
    }
    private static final int PANGO_SCRIPT_OLD_ITALIC = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_OLD_ITALIC = 30
     * }
     */
    public static int PANGO_SCRIPT_OLD_ITALIC() {
        return PANGO_SCRIPT_OLD_ITALIC;
    }
    private static final int PANGO_SCRIPT_ORIYA = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_ORIYA = 31
     * }
     */
    public static int PANGO_SCRIPT_ORIYA() {
        return PANGO_SCRIPT_ORIYA;
    }
    private static final int PANGO_SCRIPT_RUNIC = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_RUNIC = 32
     * }
     */
    public static int PANGO_SCRIPT_RUNIC() {
        return PANGO_SCRIPT_RUNIC;
    }
    private static final int PANGO_SCRIPT_SINHALA = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_SINHALA = 33
     * }
     */
    public static int PANGO_SCRIPT_SINHALA() {
        return PANGO_SCRIPT_SINHALA;
    }
    private static final int PANGO_SCRIPT_SYRIAC = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_SYRIAC = 34
     * }
     */
    public static int PANGO_SCRIPT_SYRIAC() {
        return PANGO_SCRIPT_SYRIAC;
    }
    private static final int PANGO_SCRIPT_TAMIL = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_TAMIL = 35
     * }
     */
    public static int PANGO_SCRIPT_TAMIL() {
        return PANGO_SCRIPT_TAMIL;
    }
    private static final int PANGO_SCRIPT_TELUGU = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_TELUGU = 36
     * }
     */
    public static int PANGO_SCRIPT_TELUGU() {
        return PANGO_SCRIPT_TELUGU;
    }
    private static final int PANGO_SCRIPT_THAANA = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_THAANA = 37
     * }
     */
    public static int PANGO_SCRIPT_THAANA() {
        return PANGO_SCRIPT_THAANA;
    }
    private static final int PANGO_SCRIPT_THAI = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_THAI = 38
     * }
     */
    public static int PANGO_SCRIPT_THAI() {
        return PANGO_SCRIPT_THAI;
    }
    private static final int PANGO_SCRIPT_TIBETAN = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_TIBETAN = 39
     * }
     */
    public static int PANGO_SCRIPT_TIBETAN() {
        return PANGO_SCRIPT_TIBETAN;
    }
    private static final int PANGO_SCRIPT_CANADIAN_ABORIGINAL = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_CANADIAN_ABORIGINAL = 40
     * }
     */
    public static int PANGO_SCRIPT_CANADIAN_ABORIGINAL() {
        return PANGO_SCRIPT_CANADIAN_ABORIGINAL;
    }
    private static final int PANGO_SCRIPT_YI = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_YI = 41
     * }
     */
    public static int PANGO_SCRIPT_YI() {
        return PANGO_SCRIPT_YI;
    }
    private static final int PANGO_SCRIPT_TAGALOG = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_TAGALOG = 42
     * }
     */
    public static int PANGO_SCRIPT_TAGALOG() {
        return PANGO_SCRIPT_TAGALOG;
    }
    private static final int PANGO_SCRIPT_HANUNOO = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_HANUNOO = 43
     * }
     */
    public static int PANGO_SCRIPT_HANUNOO() {
        return PANGO_SCRIPT_HANUNOO;
    }
    private static final int PANGO_SCRIPT_BUHID = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_BUHID = 44
     * }
     */
    public static int PANGO_SCRIPT_BUHID() {
        return PANGO_SCRIPT_BUHID;
    }
    private static final int PANGO_SCRIPT_TAGBANWA = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_TAGBANWA = 45
     * }
     */
    public static int PANGO_SCRIPT_TAGBANWA() {
        return PANGO_SCRIPT_TAGBANWA;
    }
    private static final int PANGO_SCRIPT_BRAILLE = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_BRAILLE = 46
     * }
     */
    public static int PANGO_SCRIPT_BRAILLE() {
        return PANGO_SCRIPT_BRAILLE;
    }
    private static final int PANGO_SCRIPT_CYPRIOT = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_CYPRIOT = 47
     * }
     */
    public static int PANGO_SCRIPT_CYPRIOT() {
        return PANGO_SCRIPT_CYPRIOT;
    }
    private static final int PANGO_SCRIPT_LIMBU = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_LIMBU = 48
     * }
     */
    public static int PANGO_SCRIPT_LIMBU() {
        return PANGO_SCRIPT_LIMBU;
    }
    private static final int PANGO_SCRIPT_OSMANYA = (int)49L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_OSMANYA = 49
     * }
     */
    public static int PANGO_SCRIPT_OSMANYA() {
        return PANGO_SCRIPT_OSMANYA;
    }
    private static final int PANGO_SCRIPT_SHAVIAN = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_SHAVIAN = 50
     * }
     */
    public static int PANGO_SCRIPT_SHAVIAN() {
        return PANGO_SCRIPT_SHAVIAN;
    }
    private static final int PANGO_SCRIPT_LINEAR_B = (int)51L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_LINEAR_B = 51
     * }
     */
    public static int PANGO_SCRIPT_LINEAR_B() {
        return PANGO_SCRIPT_LINEAR_B;
    }
    private static final int PANGO_SCRIPT_TAI_LE = (int)52L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_TAI_LE = 52
     * }
     */
    public static int PANGO_SCRIPT_TAI_LE() {
        return PANGO_SCRIPT_TAI_LE;
    }
    private static final int PANGO_SCRIPT_UGARITIC = (int)53L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_UGARITIC = 53
     * }
     */
    public static int PANGO_SCRIPT_UGARITIC() {
        return PANGO_SCRIPT_UGARITIC;
    }
    private static final int PANGO_SCRIPT_NEW_TAI_LUE = (int)54L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_NEW_TAI_LUE = 54
     * }
     */
    public static int PANGO_SCRIPT_NEW_TAI_LUE() {
        return PANGO_SCRIPT_NEW_TAI_LUE;
    }
    private static final int PANGO_SCRIPT_BUGINESE = (int)55L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_BUGINESE = 55
     * }
     */
    public static int PANGO_SCRIPT_BUGINESE() {
        return PANGO_SCRIPT_BUGINESE;
    }
    private static final int PANGO_SCRIPT_GLAGOLITIC = (int)56L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_GLAGOLITIC = 56
     * }
     */
    public static int PANGO_SCRIPT_GLAGOLITIC() {
        return PANGO_SCRIPT_GLAGOLITIC;
    }
    private static final int PANGO_SCRIPT_TIFINAGH = (int)57L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_TIFINAGH = 57
     * }
     */
    public static int PANGO_SCRIPT_TIFINAGH() {
        return PANGO_SCRIPT_TIFINAGH;
    }
    private static final int PANGO_SCRIPT_SYLOTI_NAGRI = (int)58L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_SYLOTI_NAGRI = 58
     * }
     */
    public static int PANGO_SCRIPT_SYLOTI_NAGRI() {
        return PANGO_SCRIPT_SYLOTI_NAGRI;
    }
    private static final int PANGO_SCRIPT_OLD_PERSIAN = (int)59L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_OLD_PERSIAN = 59
     * }
     */
    public static int PANGO_SCRIPT_OLD_PERSIAN() {
        return PANGO_SCRIPT_OLD_PERSIAN;
    }
    private static final int PANGO_SCRIPT_KHAROSHTHI = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_KHAROSHTHI = 60
     * }
     */
    public static int PANGO_SCRIPT_KHAROSHTHI() {
        return PANGO_SCRIPT_KHAROSHTHI;
    }
    private static final int PANGO_SCRIPT_UNKNOWN = (int)61L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_UNKNOWN = 61
     * }
     */
    public static int PANGO_SCRIPT_UNKNOWN() {
        return PANGO_SCRIPT_UNKNOWN;
    }
    private static final int PANGO_SCRIPT_BALINESE = (int)62L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_BALINESE = 62
     * }
     */
    public static int PANGO_SCRIPT_BALINESE() {
        return PANGO_SCRIPT_BALINESE;
    }
    private static final int PANGO_SCRIPT_CUNEIFORM = (int)63L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_CUNEIFORM = 63
     * }
     */
    public static int PANGO_SCRIPT_CUNEIFORM() {
        return PANGO_SCRIPT_CUNEIFORM;
    }
    private static final int PANGO_SCRIPT_PHOENICIAN = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_PHOENICIAN = 64
     * }
     */
    public static int PANGO_SCRIPT_PHOENICIAN() {
        return PANGO_SCRIPT_PHOENICIAN;
    }
    private static final int PANGO_SCRIPT_PHAGS_PA = (int)65L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_PHAGS_PA = 65
     * }
     */
    public static int PANGO_SCRIPT_PHAGS_PA() {
        return PANGO_SCRIPT_PHAGS_PA;
    }
    private static final int PANGO_SCRIPT_NKO = (int)66L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_NKO = 66
     * }
     */
    public static int PANGO_SCRIPT_NKO() {
        return PANGO_SCRIPT_NKO;
    }
    private static final int PANGO_SCRIPT_KAYAH_LI = (int)67L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_KAYAH_LI = 67
     * }
     */
    public static int PANGO_SCRIPT_KAYAH_LI() {
        return PANGO_SCRIPT_KAYAH_LI;
    }
    private static final int PANGO_SCRIPT_LEPCHA = (int)68L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_LEPCHA = 68
     * }
     */
    public static int PANGO_SCRIPT_LEPCHA() {
        return PANGO_SCRIPT_LEPCHA;
    }
    private static final int PANGO_SCRIPT_REJANG = (int)69L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_REJANG = 69
     * }
     */
    public static int PANGO_SCRIPT_REJANG() {
        return PANGO_SCRIPT_REJANG;
    }
    private static final int PANGO_SCRIPT_SUNDANESE = (int)70L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_SUNDANESE = 70
     * }
     */
    public static int PANGO_SCRIPT_SUNDANESE() {
        return PANGO_SCRIPT_SUNDANESE;
    }
    private static final int PANGO_SCRIPT_SAURASHTRA = (int)71L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_SAURASHTRA = 71
     * }
     */
    public static int PANGO_SCRIPT_SAURASHTRA() {
        return PANGO_SCRIPT_SAURASHTRA;
    }
    private static final int PANGO_SCRIPT_CHAM = (int)72L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_CHAM = 72
     * }
     */
    public static int PANGO_SCRIPT_CHAM() {
        return PANGO_SCRIPT_CHAM;
    }
    private static final int PANGO_SCRIPT_OL_CHIKI = (int)73L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_OL_CHIKI = 73
     * }
     */
    public static int PANGO_SCRIPT_OL_CHIKI() {
        return PANGO_SCRIPT_OL_CHIKI;
    }
    private static final int PANGO_SCRIPT_VAI = (int)74L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_VAI = 74
     * }
     */
    public static int PANGO_SCRIPT_VAI() {
        return PANGO_SCRIPT_VAI;
    }
    private static final int PANGO_SCRIPT_CARIAN = (int)75L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_CARIAN = 75
     * }
     */
    public static int PANGO_SCRIPT_CARIAN() {
        return PANGO_SCRIPT_CARIAN;
    }
    private static final int PANGO_SCRIPT_LYCIAN = (int)76L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_LYCIAN = 76
     * }
     */
    public static int PANGO_SCRIPT_LYCIAN() {
        return PANGO_SCRIPT_LYCIAN;
    }
    private static final int PANGO_SCRIPT_LYDIAN = (int)77L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_LYDIAN = 77
     * }
     */
    public static int PANGO_SCRIPT_LYDIAN() {
        return PANGO_SCRIPT_LYDIAN;
    }
    private static final int PANGO_SCRIPT_BATAK = (int)78L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_BATAK = 78
     * }
     */
    public static int PANGO_SCRIPT_BATAK() {
        return PANGO_SCRIPT_BATAK;
    }
    private static final int PANGO_SCRIPT_BRAHMI = (int)79L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_BRAHMI = 79
     * }
     */
    public static int PANGO_SCRIPT_BRAHMI() {
        return PANGO_SCRIPT_BRAHMI;
    }
    private static final int PANGO_SCRIPT_MANDAIC = (int)80L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MANDAIC = 80
     * }
     */
    public static int PANGO_SCRIPT_MANDAIC() {
        return PANGO_SCRIPT_MANDAIC;
    }
    private static final int PANGO_SCRIPT_CHAKMA = (int)81L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_CHAKMA = 81
     * }
     */
    public static int PANGO_SCRIPT_CHAKMA() {
        return PANGO_SCRIPT_CHAKMA;
    }
    private static final int PANGO_SCRIPT_MEROITIC_CURSIVE = (int)82L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MEROITIC_CURSIVE = 82
     * }
     */
    public static int PANGO_SCRIPT_MEROITIC_CURSIVE() {
        return PANGO_SCRIPT_MEROITIC_CURSIVE;
    }
    private static final int PANGO_SCRIPT_MEROITIC_HIEROGLYPHS = (int)83L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MEROITIC_HIEROGLYPHS = 83
     * }
     */
    public static int PANGO_SCRIPT_MEROITIC_HIEROGLYPHS() {
        return PANGO_SCRIPT_MEROITIC_HIEROGLYPHS;
    }
    private static final int PANGO_SCRIPT_MIAO = (int)84L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MIAO = 84
     * }
     */
    public static int PANGO_SCRIPT_MIAO() {
        return PANGO_SCRIPT_MIAO;
    }
    private static final int PANGO_SCRIPT_SHARADA = (int)85L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_SHARADA = 85
     * }
     */
    public static int PANGO_SCRIPT_SHARADA() {
        return PANGO_SCRIPT_SHARADA;
    }
    private static final int PANGO_SCRIPT_SORA_SOMPENG = (int)86L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_SORA_SOMPENG = 86
     * }
     */
    public static int PANGO_SCRIPT_SORA_SOMPENG() {
        return PANGO_SCRIPT_SORA_SOMPENG;
    }
    private static final int PANGO_SCRIPT_TAKRI = (int)87L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_TAKRI = 87
     * }
     */
    public static int PANGO_SCRIPT_TAKRI() {
        return PANGO_SCRIPT_TAKRI;
    }
    private static final int PANGO_SCRIPT_BASSA_VAH = (int)88L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_BASSA_VAH = 88
     * }
     */
    public static int PANGO_SCRIPT_BASSA_VAH() {
        return PANGO_SCRIPT_BASSA_VAH;
    }
    private static final int PANGO_SCRIPT_CAUCASIAN_ALBANIAN = (int)89L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_CAUCASIAN_ALBANIAN = 89
     * }
     */
    public static int PANGO_SCRIPT_CAUCASIAN_ALBANIAN() {
        return PANGO_SCRIPT_CAUCASIAN_ALBANIAN;
    }
    private static final int PANGO_SCRIPT_DUPLOYAN = (int)90L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_DUPLOYAN = 90
     * }
     */
    public static int PANGO_SCRIPT_DUPLOYAN() {
        return PANGO_SCRIPT_DUPLOYAN;
    }
    private static final int PANGO_SCRIPT_ELBASAN = (int)91L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_ELBASAN = 91
     * }
     */
    public static int PANGO_SCRIPT_ELBASAN() {
        return PANGO_SCRIPT_ELBASAN;
    }
    private static final int PANGO_SCRIPT_GRANTHA = (int)92L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_GRANTHA = 92
     * }
     */
    public static int PANGO_SCRIPT_GRANTHA() {
        return PANGO_SCRIPT_GRANTHA;
    }
    private static final int PANGO_SCRIPT_KHOJKI = (int)93L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_KHOJKI = 93
     * }
     */
    public static int PANGO_SCRIPT_KHOJKI() {
        return PANGO_SCRIPT_KHOJKI;
    }
    private static final int PANGO_SCRIPT_KHUDAWADI = (int)94L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_KHUDAWADI = 94
     * }
     */
    public static int PANGO_SCRIPT_KHUDAWADI() {
        return PANGO_SCRIPT_KHUDAWADI;
    }
    private static final int PANGO_SCRIPT_LINEAR_A = (int)95L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_LINEAR_A = 95
     * }
     */
    public static int PANGO_SCRIPT_LINEAR_A() {
        return PANGO_SCRIPT_LINEAR_A;
    }
    private static final int PANGO_SCRIPT_MAHAJANI = (int)96L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MAHAJANI = 96
     * }
     */
    public static int PANGO_SCRIPT_MAHAJANI() {
        return PANGO_SCRIPT_MAHAJANI;
    }
    private static final int PANGO_SCRIPT_MANICHAEAN = (int)97L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MANICHAEAN = 97
     * }
     */
    public static int PANGO_SCRIPT_MANICHAEAN() {
        return PANGO_SCRIPT_MANICHAEAN;
    }
    private static final int PANGO_SCRIPT_MENDE_KIKAKUI = (int)98L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MENDE_KIKAKUI = 98
     * }
     */
    public static int PANGO_SCRIPT_MENDE_KIKAKUI() {
        return PANGO_SCRIPT_MENDE_KIKAKUI;
    }
    private static final int PANGO_SCRIPT_MODI = (int)99L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MODI = 99
     * }
     */
    public static int PANGO_SCRIPT_MODI() {
        return PANGO_SCRIPT_MODI;
    }
    private static final int PANGO_SCRIPT_MRO = (int)100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MRO = 100
     * }
     */
    public static int PANGO_SCRIPT_MRO() {
        return PANGO_SCRIPT_MRO;
    }
    private static final int PANGO_SCRIPT_NABATAEAN = (int)101L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_NABATAEAN = 101
     * }
     */
    public static int PANGO_SCRIPT_NABATAEAN() {
        return PANGO_SCRIPT_NABATAEAN;
    }
    private static final int PANGO_SCRIPT_OLD_NORTH_ARABIAN = (int)102L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_OLD_NORTH_ARABIAN = 102
     * }
     */
    public static int PANGO_SCRIPT_OLD_NORTH_ARABIAN() {
        return PANGO_SCRIPT_OLD_NORTH_ARABIAN;
    }
    private static final int PANGO_SCRIPT_OLD_PERMIC = (int)103L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_OLD_PERMIC = 103
     * }
     */
    public static int PANGO_SCRIPT_OLD_PERMIC() {
        return PANGO_SCRIPT_OLD_PERMIC;
    }
    private static final int PANGO_SCRIPT_PAHAWH_HMONG = (int)104L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_PAHAWH_HMONG = 104
     * }
     */
    public static int PANGO_SCRIPT_PAHAWH_HMONG() {
        return PANGO_SCRIPT_PAHAWH_HMONG;
    }
    private static final int PANGO_SCRIPT_PALMYRENE = (int)105L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_PALMYRENE = 105
     * }
     */
    public static int PANGO_SCRIPT_PALMYRENE() {
        return PANGO_SCRIPT_PALMYRENE;
    }
    private static final int PANGO_SCRIPT_PAU_CIN_HAU = (int)106L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_PAU_CIN_HAU = 106
     * }
     */
    public static int PANGO_SCRIPT_PAU_CIN_HAU() {
        return PANGO_SCRIPT_PAU_CIN_HAU;
    }
    private static final int PANGO_SCRIPT_PSALTER_PAHLAVI = (int)107L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_PSALTER_PAHLAVI = 107
     * }
     */
    public static int PANGO_SCRIPT_PSALTER_PAHLAVI() {
        return PANGO_SCRIPT_PSALTER_PAHLAVI;
    }
    private static final int PANGO_SCRIPT_SIDDHAM = (int)108L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_SIDDHAM = 108
     * }
     */
    public static int PANGO_SCRIPT_SIDDHAM() {
        return PANGO_SCRIPT_SIDDHAM;
    }
    private static final int PANGO_SCRIPT_TIRHUTA = (int)109L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_TIRHUTA = 109
     * }
     */
    public static int PANGO_SCRIPT_TIRHUTA() {
        return PANGO_SCRIPT_TIRHUTA;
    }
    private static final int PANGO_SCRIPT_WARANG_CITI = (int)110L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_WARANG_CITI = 110
     * }
     */
    public static int PANGO_SCRIPT_WARANG_CITI() {
        return PANGO_SCRIPT_WARANG_CITI;
    }
    private static final int PANGO_SCRIPT_AHOM = (int)111L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_AHOM = 111
     * }
     */
    public static int PANGO_SCRIPT_AHOM() {
        return PANGO_SCRIPT_AHOM;
    }
    private static final int PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS = (int)112L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS = 112
     * }
     */
    public static int PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS() {
        return PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS;
    }
    private static final int PANGO_SCRIPT_HATRAN = (int)113L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_HATRAN = 113
     * }
     */
    public static int PANGO_SCRIPT_HATRAN() {
        return PANGO_SCRIPT_HATRAN;
    }
    private static final int PANGO_SCRIPT_MULTANI = (int)114L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_MULTANI = 114
     * }
     */
    public static int PANGO_SCRIPT_MULTANI() {
        return PANGO_SCRIPT_MULTANI;
    }
    private static final int PANGO_SCRIPT_OLD_HUNGARIAN = (int)115L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_OLD_HUNGARIAN = 115
     * }
     */
    public static int PANGO_SCRIPT_OLD_HUNGARIAN() {
        return PANGO_SCRIPT_OLD_HUNGARIAN;
    }
    private static final int PANGO_SCRIPT_SIGNWRITING = (int)116L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SCRIPT_SIGNWRITING = 116
     * }
     */
    public static int PANGO_SCRIPT_SIGNWRITING() {
        return PANGO_SCRIPT_SIGNWRITING;
    }

    private static class pango_script_for_unichar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_script_for_unichar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoScript pango_script_for_unichar(gunichar ch)
     * }
     */
    public static FunctionDescriptor pango_script_for_unichar$descriptor() {
        return pango_script_for_unichar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoScript pango_script_for_unichar(gunichar ch)
     * }
     */
    public static MethodHandle pango_script_for_unichar$handle() {
        return pango_script_for_unichar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoScript pango_script_for_unichar(gunichar ch)
     * }
     */
    public static int pango_script_for_unichar(int ch) {
        var mh$ = pango_script_for_unichar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_script_for_unichar", ch);
            }
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_script_iter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_script_iter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_script_iter_get_type()
     * }
     */
    public static FunctionDescriptor pango_script_iter_get_type$descriptor() {
        return pango_script_iter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_script_iter_get_type()
     * }
     */
    public static MethodHandle pango_script_iter_get_type$handle() {
        return pango_script_iter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_script_iter_get_type()
     * }
     */
    public static long pango_script_iter_get_type() {
        var mh$ = pango_script_iter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_script_iter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_script_iter_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_script_iter_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoScriptIter *pango_script_iter_new(const char *text, int length)
     * }
     */
    public static FunctionDescriptor pango_script_iter_new$descriptor() {
        return pango_script_iter_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoScriptIter *pango_script_iter_new(const char *text, int length)
     * }
     */
    public static MethodHandle pango_script_iter_new$handle() {
        return pango_script_iter_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoScriptIter *pango_script_iter_new(const char *text, int length)
     * }
     */
    public static MemorySegment pango_script_iter_new(MemorySegment text, int length) {
        var mh$ = pango_script_iter_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_script_iter_new", text, length);
            }
            return (MemorySegment)mh$.invokeExact(text, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_script_iter_get_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_script_iter_get_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_script_iter_get_range(PangoScriptIter *iter, const char **start, const char **end, PangoScript *script)
     * }
     */
    public static FunctionDescriptor pango_script_iter_get_range$descriptor() {
        return pango_script_iter_get_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_script_iter_get_range(PangoScriptIter *iter, const char **start, const char **end, PangoScript *script)
     * }
     */
    public static MethodHandle pango_script_iter_get_range$handle() {
        return pango_script_iter_get_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_script_iter_get_range(PangoScriptIter *iter, const char **start, const char **end, PangoScript *script)
     * }
     */
    public static void pango_script_iter_get_range(MemorySegment iter, MemorySegment start, MemorySegment end, MemorySegment script) {
        var mh$ = pango_script_iter_get_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_script_iter_get_range", iter, start, end, script);
            }
            mh$.invokeExact(iter, start, end, script);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_script_iter_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_script_iter_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_script_iter_next(PangoScriptIter *iter)
     * }
     */
    public static FunctionDescriptor pango_script_iter_next$descriptor() {
        return pango_script_iter_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_script_iter_next(PangoScriptIter *iter)
     * }
     */
    public static MethodHandle pango_script_iter_next$handle() {
        return pango_script_iter_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_script_iter_next(PangoScriptIter *iter)
     * }
     */
    public static int pango_script_iter_next(MemorySegment iter) {
        var mh$ = pango_script_iter_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_script_iter_next", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_script_iter_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_script_iter_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_script_iter_free(PangoScriptIter *iter)
     * }
     */
    public static FunctionDescriptor pango_script_iter_free$descriptor() {
        return pango_script_iter_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_script_iter_free(PangoScriptIter *iter)
     * }
     */
    public static MethodHandle pango_script_iter_free$handle() {
        return pango_script_iter_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_script_iter_free(PangoScriptIter *iter)
     * }
     */
    public static void pango_script_iter_free(MemorySegment iter) {
        var mh$ = pango_script_iter_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_script_iter_free", iter);
            }
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_language_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_language_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_language_get_type()
     * }
     */
    public static FunctionDescriptor pango_language_get_type$descriptor() {
        return pango_language_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_language_get_type()
     * }
     */
    public static MethodHandle pango_language_get_type$handle() {
        return pango_language_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_language_get_type()
     * }
     */
    public static long pango_language_get_type() {
        var mh$ = pango_language_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_language_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_language_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_language_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLanguage *pango_language_get_default()
     * }
     */
    public static FunctionDescriptor pango_language_get_default$descriptor() {
        return pango_language_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLanguage *pango_language_get_default()
     * }
     */
    public static MethodHandle pango_language_get_default$handle() {
        return pango_language_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLanguage *pango_language_get_default()
     * }
     */
    public static MemorySegment pango_language_get_default() {
        var mh$ = pango_language_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_language_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_language_get_preferred {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_language_get_preferred"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLanguage **pango_language_get_preferred()
     * }
     */
    public static FunctionDescriptor pango_language_get_preferred$descriptor() {
        return pango_language_get_preferred.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLanguage **pango_language_get_preferred()
     * }
     */
    public static MethodHandle pango_language_get_preferred$handle() {
        return pango_language_get_preferred.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLanguage **pango_language_get_preferred()
     * }
     */
    public static MemorySegment pango_language_get_preferred() {
        var mh$ = pango_language_get_preferred.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_language_get_preferred");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_language_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_language_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLanguage *pango_language_from_string(const char *language)
     * }
     */
    public static FunctionDescriptor pango_language_from_string$descriptor() {
        return pango_language_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLanguage *pango_language_from_string(const char *language)
     * }
     */
    public static MethodHandle pango_language_from_string$handle() {
        return pango_language_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLanguage *pango_language_from_string(const char *language)
     * }
     */
    public static MemorySegment pango_language_from_string(MemorySegment language) {
        var mh$ = pango_language_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_language_from_string", language);
            }
            return (MemorySegment)mh$.invokeExact(language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_language_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_language_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *pango_language_to_string(PangoLanguage *language)
     * }
     */
    public static FunctionDescriptor pango_language_to_string$descriptor() {
        return pango_language_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *pango_language_to_string(PangoLanguage *language)
     * }
     */
    public static MethodHandle pango_language_to_string$handle() {
        return pango_language_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *pango_language_to_string(PangoLanguage *language)
     * }
     */
    public static MemorySegment pango_language_to_string(MemorySegment language) {
        var mh$ = pango_language_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_language_to_string", language);
            }
            return (MemorySegment)mh$.invokeExact(language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_language_get_sample_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_language_get_sample_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *pango_language_get_sample_string(PangoLanguage *language)
     * }
     */
    public static FunctionDescriptor pango_language_get_sample_string$descriptor() {
        return pango_language_get_sample_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *pango_language_get_sample_string(PangoLanguage *language)
     * }
     */
    public static MethodHandle pango_language_get_sample_string$handle() {
        return pango_language_get_sample_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *pango_language_get_sample_string(PangoLanguage *language)
     * }
     */
    public static MemorySegment pango_language_get_sample_string(MemorySegment language) {
        var mh$ = pango_language_get_sample_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_language_get_sample_string", language);
            }
            return (MemorySegment)mh$.invokeExact(language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_language_matches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_language_matches"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_language_matches(PangoLanguage *language, const char *range_list)
     * }
     */
    public static FunctionDescriptor pango_language_matches$descriptor() {
        return pango_language_matches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_language_matches(PangoLanguage *language, const char *range_list)
     * }
     */
    public static MethodHandle pango_language_matches$handle() {
        return pango_language_matches.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_language_matches(PangoLanguage *language, const char *range_list)
     * }
     */
    public static int pango_language_matches(MemorySegment language, MemorySegment range_list) {
        var mh$ = pango_language_matches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_language_matches", language, range_list);
            }
            return (int)mh$.invokeExact(language, range_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_language_includes_script {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_language_includes_script"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_language_includes_script(PangoLanguage *language, PangoScript script)
     * }
     */
    public static FunctionDescriptor pango_language_includes_script$descriptor() {
        return pango_language_includes_script.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_language_includes_script(PangoLanguage *language, PangoScript script)
     * }
     */
    public static MethodHandle pango_language_includes_script$handle() {
        return pango_language_includes_script.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_language_includes_script(PangoLanguage *language, PangoScript script)
     * }
     */
    public static int pango_language_includes_script(MemorySegment language, int script) {
        var mh$ = pango_language_includes_script.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_language_includes_script", language, script);
            }
            return (int)mh$.invokeExact(language, script);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_language_get_scripts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_language_get_scripts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const PangoScript *pango_language_get_scripts(PangoLanguage *language, int *num_scripts)
     * }
     */
    public static FunctionDescriptor pango_language_get_scripts$descriptor() {
        return pango_language_get_scripts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const PangoScript *pango_language_get_scripts(PangoLanguage *language, int *num_scripts)
     * }
     */
    public static MethodHandle pango_language_get_scripts$handle() {
        return pango_language_get_scripts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const PangoScript *pango_language_get_scripts(PangoLanguage *language, int *num_scripts)
     * }
     */
    public static MemorySegment pango_language_get_scripts(MemorySegment language, MemorySegment num_scripts) {
        var mh$ = pango_language_get_scripts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_language_get_scripts", language, num_scripts);
            }
            return (MemorySegment)mh$.invokeExact(language, num_scripts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_script_get_sample_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_script_get_sample_language"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLanguage *pango_script_get_sample_language(PangoScript script)
     * }
     */
    public static FunctionDescriptor pango_script_get_sample_language$descriptor() {
        return pango_script_get_sample_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLanguage *pango_script_get_sample_language(PangoScript script)
     * }
     */
    public static MethodHandle pango_script_get_sample_language$handle() {
        return pango_script_get_sample_language.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLanguage *pango_script_get_sample_language(PangoScript script)
     * }
     */
    public static MemorySegment pango_script_get_sample_language(int script) {
        var mh$ = pango_script_get_sample_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_script_get_sample_language", script);
            }
            return (MemorySegment)mh$.invokeExact(script);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_gravity_to_rotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_gravity_to_rotation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double pango_gravity_to_rotation(PangoGravity gravity)
     * }
     */
    public static FunctionDescriptor pango_gravity_to_rotation$descriptor() {
        return pango_gravity_to_rotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double pango_gravity_to_rotation(PangoGravity gravity)
     * }
     */
    public static MethodHandle pango_gravity_to_rotation$handle() {
        return pango_gravity_to_rotation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double pango_gravity_to_rotation(PangoGravity gravity)
     * }
     */
    public static double pango_gravity_to_rotation(int gravity) {
        var mh$ = pango_gravity_to_rotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_gravity_to_rotation", gravity);
            }
            return (double)mh$.invokeExact(gravity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_gravity_get_for_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_gravity_get_for_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGravity pango_gravity_get_for_matrix(const PangoMatrix *matrix)
     * }
     */
    public static FunctionDescriptor pango_gravity_get_for_matrix$descriptor() {
        return pango_gravity_get_for_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGravity pango_gravity_get_for_matrix(const PangoMatrix *matrix)
     * }
     */
    public static MethodHandle pango_gravity_get_for_matrix$handle() {
        return pango_gravity_get_for_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGravity pango_gravity_get_for_matrix(const PangoMatrix *matrix)
     * }
     */
    public static int pango_gravity_get_for_matrix(MemorySegment matrix) {
        var mh$ = pango_gravity_get_for_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_gravity_get_for_matrix", matrix);
            }
            return (int)mh$.invokeExact(matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_gravity_get_for_script {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_gravity_get_for_script"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGravity pango_gravity_get_for_script(PangoScript script, PangoGravity base_gravity, PangoGravityHint hint)
     * }
     */
    public static FunctionDescriptor pango_gravity_get_for_script$descriptor() {
        return pango_gravity_get_for_script.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGravity pango_gravity_get_for_script(PangoScript script, PangoGravity base_gravity, PangoGravityHint hint)
     * }
     */
    public static MethodHandle pango_gravity_get_for_script$handle() {
        return pango_gravity_get_for_script.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGravity pango_gravity_get_for_script(PangoScript script, PangoGravity base_gravity, PangoGravityHint hint)
     * }
     */
    public static int pango_gravity_get_for_script(int script, int base_gravity, int hint) {
        var mh$ = pango_gravity_get_for_script.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_gravity_get_for_script", script, base_gravity, hint);
            }
            return (int)mh$.invokeExact(script, base_gravity, hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_gravity_get_for_script_and_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_gravity_get_for_script_and_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGravity pango_gravity_get_for_script_and_width(PangoScript script, gboolean wide, PangoGravity base_gravity, PangoGravityHint hint)
     * }
     */
    public static FunctionDescriptor pango_gravity_get_for_script_and_width$descriptor() {
        return pango_gravity_get_for_script_and_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGravity pango_gravity_get_for_script_and_width(PangoScript script, gboolean wide, PangoGravity base_gravity, PangoGravityHint hint)
     * }
     */
    public static MethodHandle pango_gravity_get_for_script_and_width$handle() {
        return pango_gravity_get_for_script_and_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGravity pango_gravity_get_for_script_and_width(PangoScript script, gboolean wide, PangoGravity base_gravity, PangoGravityHint hint)
     * }
     */
    public static int pango_gravity_get_for_script_and_width(int script, int wide, int base_gravity, int hint) {
        var mh$ = pango_gravity_get_for_script_and_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_gravity_get_for_script_and_width", script, wide, base_gravity, hint);
            }
            return (int)mh$.invokeExact(script, wide, base_gravity, hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_DIRECTION_LTR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_DIRECTION_LTR = 0
     * }
     */
    public static int PANGO_DIRECTION_LTR() {
        return PANGO_DIRECTION_LTR;
    }
    private static final int PANGO_DIRECTION_RTL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_DIRECTION_RTL = 1
     * }
     */
    public static int PANGO_DIRECTION_RTL() {
        return PANGO_DIRECTION_RTL;
    }
    private static final int PANGO_DIRECTION_TTB_LTR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_DIRECTION_TTB_LTR = 2
     * }
     */
    public static int PANGO_DIRECTION_TTB_LTR() {
        return PANGO_DIRECTION_TTB_LTR;
    }
    private static final int PANGO_DIRECTION_TTB_RTL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_DIRECTION_TTB_RTL = 3
     * }
     */
    public static int PANGO_DIRECTION_TTB_RTL() {
        return PANGO_DIRECTION_TTB_RTL;
    }
    private static final int PANGO_DIRECTION_WEAK_LTR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_DIRECTION_WEAK_LTR = 4
     * }
     */
    public static int PANGO_DIRECTION_WEAK_LTR() {
        return PANGO_DIRECTION_WEAK_LTR;
    }
    private static final int PANGO_DIRECTION_WEAK_RTL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_DIRECTION_WEAK_RTL = 5
     * }
     */
    public static int PANGO_DIRECTION_WEAK_RTL() {
        return PANGO_DIRECTION_WEAK_RTL;
    }
    private static final int PANGO_DIRECTION_NEUTRAL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_DIRECTION_NEUTRAL = 6
     * }
     */
    public static int PANGO_DIRECTION_NEUTRAL() {
        return PANGO_DIRECTION_NEUTRAL;
    }
    private static final int PANGO_BIDI_TYPE_L = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_L = 0
     * }
     */
    public static int PANGO_BIDI_TYPE_L() {
        return PANGO_BIDI_TYPE_L;
    }
    private static final int PANGO_BIDI_TYPE_LRE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_LRE = 1
     * }
     */
    public static int PANGO_BIDI_TYPE_LRE() {
        return PANGO_BIDI_TYPE_LRE;
    }
    private static final int PANGO_BIDI_TYPE_LRO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_LRO = 2
     * }
     */
    public static int PANGO_BIDI_TYPE_LRO() {
        return PANGO_BIDI_TYPE_LRO;
    }
    private static final int PANGO_BIDI_TYPE_R = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_R = 3
     * }
     */
    public static int PANGO_BIDI_TYPE_R() {
        return PANGO_BIDI_TYPE_R;
    }
    private static final int PANGO_BIDI_TYPE_AL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_AL = 4
     * }
     */
    public static int PANGO_BIDI_TYPE_AL() {
        return PANGO_BIDI_TYPE_AL;
    }
    private static final int PANGO_BIDI_TYPE_RLE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_RLE = 5
     * }
     */
    public static int PANGO_BIDI_TYPE_RLE() {
        return PANGO_BIDI_TYPE_RLE;
    }
    private static final int PANGO_BIDI_TYPE_RLO = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_RLO = 6
     * }
     */
    public static int PANGO_BIDI_TYPE_RLO() {
        return PANGO_BIDI_TYPE_RLO;
    }
    private static final int PANGO_BIDI_TYPE_PDF = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_PDF = 7
     * }
     */
    public static int PANGO_BIDI_TYPE_PDF() {
        return PANGO_BIDI_TYPE_PDF;
    }
    private static final int PANGO_BIDI_TYPE_EN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_EN = 8
     * }
     */
    public static int PANGO_BIDI_TYPE_EN() {
        return PANGO_BIDI_TYPE_EN;
    }
    private static final int PANGO_BIDI_TYPE_ES = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_ES = 9
     * }
     */
    public static int PANGO_BIDI_TYPE_ES() {
        return PANGO_BIDI_TYPE_ES;
    }
    private static final int PANGO_BIDI_TYPE_ET = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_ET = 10
     * }
     */
    public static int PANGO_BIDI_TYPE_ET() {
        return PANGO_BIDI_TYPE_ET;
    }
    private static final int PANGO_BIDI_TYPE_AN = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_AN = 11
     * }
     */
    public static int PANGO_BIDI_TYPE_AN() {
        return PANGO_BIDI_TYPE_AN;
    }
    private static final int PANGO_BIDI_TYPE_CS = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_CS = 12
     * }
     */
    public static int PANGO_BIDI_TYPE_CS() {
        return PANGO_BIDI_TYPE_CS;
    }
    private static final int PANGO_BIDI_TYPE_NSM = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_NSM = 13
     * }
     */
    public static int PANGO_BIDI_TYPE_NSM() {
        return PANGO_BIDI_TYPE_NSM;
    }
    private static final int PANGO_BIDI_TYPE_BN = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_BN = 14
     * }
     */
    public static int PANGO_BIDI_TYPE_BN() {
        return PANGO_BIDI_TYPE_BN;
    }
    private static final int PANGO_BIDI_TYPE_B = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_B = 15
     * }
     */
    public static int PANGO_BIDI_TYPE_B() {
        return PANGO_BIDI_TYPE_B;
    }
    private static final int PANGO_BIDI_TYPE_S = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_S = 16
     * }
     */
    public static int PANGO_BIDI_TYPE_S() {
        return PANGO_BIDI_TYPE_S;
    }
    private static final int PANGO_BIDI_TYPE_WS = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_WS = 17
     * }
     */
    public static int PANGO_BIDI_TYPE_WS() {
        return PANGO_BIDI_TYPE_WS;
    }
    private static final int PANGO_BIDI_TYPE_ON = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_ON = 18
     * }
     */
    public static int PANGO_BIDI_TYPE_ON() {
        return PANGO_BIDI_TYPE_ON;
    }
    private static final int PANGO_BIDI_TYPE_LRI = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_LRI = 19
     * }
     */
    public static int PANGO_BIDI_TYPE_LRI() {
        return PANGO_BIDI_TYPE_LRI;
    }
    private static final int PANGO_BIDI_TYPE_RLI = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_RLI = 20
     * }
     */
    public static int PANGO_BIDI_TYPE_RLI() {
        return PANGO_BIDI_TYPE_RLI;
    }
    private static final int PANGO_BIDI_TYPE_FSI = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_FSI = 21
     * }
     */
    public static int PANGO_BIDI_TYPE_FSI() {
        return PANGO_BIDI_TYPE_FSI;
    }
    private static final int PANGO_BIDI_TYPE_PDI = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BIDI_TYPE_PDI = 22
     * }
     */
    public static int PANGO_BIDI_TYPE_PDI() {
        return PANGO_BIDI_TYPE_PDI;
    }

    private static class pango_bidi_type_for_unichar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_bidi_type_for_unichar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoBidiType pango_bidi_type_for_unichar(gunichar ch)
     * }
     */
    public static FunctionDescriptor pango_bidi_type_for_unichar$descriptor() {
        return pango_bidi_type_for_unichar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoBidiType pango_bidi_type_for_unichar(gunichar ch)
     * }
     */
    public static MethodHandle pango_bidi_type_for_unichar$handle() {
        return pango_bidi_type_for_unichar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoBidiType pango_bidi_type_for_unichar(gunichar ch)
     * }
     */
    public static int pango_bidi_type_for_unichar(int ch) {
        var mh$ = pango_bidi_type_for_unichar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_bidi_type_for_unichar", ch);
            }
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_unichar_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_unichar_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoDirection pango_unichar_direction(gunichar ch)
     * }
     */
    public static FunctionDescriptor pango_unichar_direction$descriptor() {
        return pango_unichar_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoDirection pango_unichar_direction(gunichar ch)
     * }
     */
    public static MethodHandle pango_unichar_direction$handle() {
        return pango_unichar_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoDirection pango_unichar_direction(gunichar ch)
     * }
     */
    public static int pango_unichar_direction(int ch) {
        var mh$ = pango_unichar_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_unichar_direction", ch);
            }
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_find_base_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_find_base_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoDirection pango_find_base_dir(const gchar *text, gint length)
     * }
     */
    public static FunctionDescriptor pango_find_base_dir$descriptor() {
        return pango_find_base_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoDirection pango_find_base_dir(const gchar *text, gint length)
     * }
     */
    public static MethodHandle pango_find_base_dir$handle() {
        return pango_find_base_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoDirection pango_find_base_dir(const gchar *text, gint length)
     * }
     */
    public static int pango_find_base_dir(MemorySegment text, int length) {
        var mh$ = pango_find_base_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_find_base_dir", text, length);
            }
            return (int)mh$.invokeExact(text, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_get_mirror_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_get_mirror_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_get_mirror_char(gunichar ch, gunichar *mirrored_ch)
     * }
     */
    public static FunctionDescriptor pango_get_mirror_char$descriptor() {
        return pango_get_mirror_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_get_mirror_char(gunichar ch, gunichar *mirrored_ch)
     * }
     */
    public static MethodHandle pango_get_mirror_char$handle() {
        return pango_get_mirror_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_get_mirror_char(gunichar ch, gunichar *mirrored_ch)
     * }
     */
    public static int pango_get_mirror_char(int ch, MemorySegment mirrored_ch) {
        var mh$ = pango_get_mirror_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_get_mirror_char", ch, mirrored_ch);
            }
            return (int)mh$.invokeExact(ch, mirrored_ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_STYLE_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STYLE_NORMAL = 0
     * }
     */
    public static int PANGO_STYLE_NORMAL() {
        return PANGO_STYLE_NORMAL;
    }
    private static final int PANGO_STYLE_OBLIQUE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STYLE_OBLIQUE = 1
     * }
     */
    public static int PANGO_STYLE_OBLIQUE() {
        return PANGO_STYLE_OBLIQUE;
    }
    private static final int PANGO_STYLE_ITALIC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STYLE_ITALIC = 2
     * }
     */
    public static int PANGO_STYLE_ITALIC() {
        return PANGO_STYLE_ITALIC;
    }
    private static final int PANGO_VARIANT_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_VARIANT_NORMAL = 0
     * }
     */
    public static int PANGO_VARIANT_NORMAL() {
        return PANGO_VARIANT_NORMAL;
    }
    private static final int PANGO_VARIANT_SMALL_CAPS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_VARIANT_SMALL_CAPS = 1
     * }
     */
    public static int PANGO_VARIANT_SMALL_CAPS() {
        return PANGO_VARIANT_SMALL_CAPS;
    }
    private static final int PANGO_VARIANT_ALL_SMALL_CAPS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_VARIANT_ALL_SMALL_CAPS = 2
     * }
     */
    public static int PANGO_VARIANT_ALL_SMALL_CAPS() {
        return PANGO_VARIANT_ALL_SMALL_CAPS;
    }
    private static final int PANGO_VARIANT_PETITE_CAPS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_VARIANT_PETITE_CAPS = 3
     * }
     */
    public static int PANGO_VARIANT_PETITE_CAPS() {
        return PANGO_VARIANT_PETITE_CAPS;
    }
    private static final int PANGO_VARIANT_ALL_PETITE_CAPS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_VARIANT_ALL_PETITE_CAPS = 4
     * }
     */
    public static int PANGO_VARIANT_ALL_PETITE_CAPS() {
        return PANGO_VARIANT_ALL_PETITE_CAPS;
    }
    private static final int PANGO_VARIANT_UNICASE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_VARIANT_UNICASE = 5
     * }
     */
    public static int PANGO_VARIANT_UNICASE() {
        return PANGO_VARIANT_UNICASE;
    }
    private static final int PANGO_VARIANT_TITLE_CAPS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_VARIANT_TITLE_CAPS = 6
     * }
     */
    public static int PANGO_VARIANT_TITLE_CAPS() {
        return PANGO_VARIANT_TITLE_CAPS;
    }
    private static final int PANGO_WEIGHT_THIN = (int)100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_THIN = 100
     * }
     */
    public static int PANGO_WEIGHT_THIN() {
        return PANGO_WEIGHT_THIN;
    }
    private static final int PANGO_WEIGHT_ULTRALIGHT = (int)200L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_ULTRALIGHT = 200
     * }
     */
    public static int PANGO_WEIGHT_ULTRALIGHT() {
        return PANGO_WEIGHT_ULTRALIGHT;
    }
    private static final int PANGO_WEIGHT_LIGHT = (int)300L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_LIGHT = 300
     * }
     */
    public static int PANGO_WEIGHT_LIGHT() {
        return PANGO_WEIGHT_LIGHT;
    }
    private static final int PANGO_WEIGHT_SEMILIGHT = (int)350L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_SEMILIGHT = 350
     * }
     */
    public static int PANGO_WEIGHT_SEMILIGHT() {
        return PANGO_WEIGHT_SEMILIGHT;
    }
    private static final int PANGO_WEIGHT_BOOK = (int)380L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_BOOK = 380
     * }
     */
    public static int PANGO_WEIGHT_BOOK() {
        return PANGO_WEIGHT_BOOK;
    }
    private static final int PANGO_WEIGHT_NORMAL = (int)400L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_NORMAL = 400
     * }
     */
    public static int PANGO_WEIGHT_NORMAL() {
        return PANGO_WEIGHT_NORMAL;
    }
    private static final int PANGO_WEIGHT_MEDIUM = (int)500L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_MEDIUM = 500
     * }
     */
    public static int PANGO_WEIGHT_MEDIUM() {
        return PANGO_WEIGHT_MEDIUM;
    }
    private static final int PANGO_WEIGHT_SEMIBOLD = (int)600L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_SEMIBOLD = 600
     * }
     */
    public static int PANGO_WEIGHT_SEMIBOLD() {
        return PANGO_WEIGHT_SEMIBOLD;
    }
    private static final int PANGO_WEIGHT_BOLD = (int)700L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_BOLD = 700
     * }
     */
    public static int PANGO_WEIGHT_BOLD() {
        return PANGO_WEIGHT_BOLD;
    }
    private static final int PANGO_WEIGHT_ULTRABOLD = (int)800L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_ULTRABOLD = 800
     * }
     */
    public static int PANGO_WEIGHT_ULTRABOLD() {
        return PANGO_WEIGHT_ULTRABOLD;
    }
    private static final int PANGO_WEIGHT_HEAVY = (int)900L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_HEAVY = 900
     * }
     */
    public static int PANGO_WEIGHT_HEAVY() {
        return PANGO_WEIGHT_HEAVY;
    }
    private static final int PANGO_WEIGHT_ULTRAHEAVY = (int)1000L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WEIGHT_ULTRAHEAVY = 1000
     * }
     */
    public static int PANGO_WEIGHT_ULTRAHEAVY() {
        return PANGO_WEIGHT_ULTRAHEAVY;
    }
    private static final int PANGO_STRETCH_ULTRA_CONDENSED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STRETCH_ULTRA_CONDENSED = 0
     * }
     */
    public static int PANGO_STRETCH_ULTRA_CONDENSED() {
        return PANGO_STRETCH_ULTRA_CONDENSED;
    }
    private static final int PANGO_STRETCH_EXTRA_CONDENSED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STRETCH_EXTRA_CONDENSED = 1
     * }
     */
    public static int PANGO_STRETCH_EXTRA_CONDENSED() {
        return PANGO_STRETCH_EXTRA_CONDENSED;
    }
    private static final int PANGO_STRETCH_CONDENSED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STRETCH_CONDENSED = 2
     * }
     */
    public static int PANGO_STRETCH_CONDENSED() {
        return PANGO_STRETCH_CONDENSED;
    }
    private static final int PANGO_STRETCH_SEMI_CONDENSED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STRETCH_SEMI_CONDENSED = 3
     * }
     */
    public static int PANGO_STRETCH_SEMI_CONDENSED() {
        return PANGO_STRETCH_SEMI_CONDENSED;
    }
    private static final int PANGO_STRETCH_NORMAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STRETCH_NORMAL = 4
     * }
     */
    public static int PANGO_STRETCH_NORMAL() {
        return PANGO_STRETCH_NORMAL;
    }
    private static final int PANGO_STRETCH_SEMI_EXPANDED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STRETCH_SEMI_EXPANDED = 5
     * }
     */
    public static int PANGO_STRETCH_SEMI_EXPANDED() {
        return PANGO_STRETCH_SEMI_EXPANDED;
    }
    private static final int PANGO_STRETCH_EXPANDED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STRETCH_EXPANDED = 6
     * }
     */
    public static int PANGO_STRETCH_EXPANDED() {
        return PANGO_STRETCH_EXPANDED;
    }
    private static final int PANGO_STRETCH_EXTRA_EXPANDED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STRETCH_EXTRA_EXPANDED = 7
     * }
     */
    public static int PANGO_STRETCH_EXTRA_EXPANDED() {
        return PANGO_STRETCH_EXTRA_EXPANDED;
    }
    private static final int PANGO_STRETCH_ULTRA_EXPANDED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_STRETCH_ULTRA_EXPANDED = 8
     * }
     */
    public static int PANGO_STRETCH_ULTRA_EXPANDED() {
        return PANGO_STRETCH_ULTRA_EXPANDED;
    }
    private static final int PANGO_FONT_MASK_FAMILY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_MASK_FAMILY = 1
     * }
     */
    public static int PANGO_FONT_MASK_FAMILY() {
        return PANGO_FONT_MASK_FAMILY;
    }
    private static final int PANGO_FONT_MASK_STYLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_MASK_STYLE = 2
     * }
     */
    public static int PANGO_FONT_MASK_STYLE() {
        return PANGO_FONT_MASK_STYLE;
    }
    private static final int PANGO_FONT_MASK_VARIANT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_MASK_VARIANT = 4
     * }
     */
    public static int PANGO_FONT_MASK_VARIANT() {
        return PANGO_FONT_MASK_VARIANT;
    }
    private static final int PANGO_FONT_MASK_WEIGHT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_MASK_WEIGHT = 8
     * }
     */
    public static int PANGO_FONT_MASK_WEIGHT() {
        return PANGO_FONT_MASK_WEIGHT;
    }
    private static final int PANGO_FONT_MASK_STRETCH = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_MASK_STRETCH = 16
     * }
     */
    public static int PANGO_FONT_MASK_STRETCH() {
        return PANGO_FONT_MASK_STRETCH;
    }
    private static final int PANGO_FONT_MASK_SIZE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_MASK_SIZE = 32
     * }
     */
    public static int PANGO_FONT_MASK_SIZE() {
        return PANGO_FONT_MASK_SIZE;
    }
    private static final int PANGO_FONT_MASK_GRAVITY = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_MASK_GRAVITY = 64
     * }
     */
    public static int PANGO_FONT_MASK_GRAVITY() {
        return PANGO_FONT_MASK_GRAVITY;
    }
    private static final int PANGO_FONT_MASK_VARIATIONS = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_MASK_VARIATIONS = 128
     * }
     */
    public static int PANGO_FONT_MASK_VARIATIONS() {
        return PANGO_FONT_MASK_VARIATIONS;
    }

    private static class pango_font_description_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_font_description_get_type()
     * }
     */
    public static FunctionDescriptor pango_font_description_get_type$descriptor() {
        return pango_font_description_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_font_description_get_type()
     * }
     */
    public static MethodHandle pango_font_description_get_type$handle() {
        return pango_font_description_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_font_description_get_type()
     * }
     */
    public static long pango_font_description_get_type() {
        var mh$ = pango_font_description_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_new()
     * }
     */
    public static FunctionDescriptor pango_font_description_new$descriptor() {
        return pango_font_description_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_new()
     * }
     */
    public static MethodHandle pango_font_description_new$handle() {
        return pango_font_description_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_new()
     * }
     */
    public static MemorySegment pango_font_description_new() {
        var mh$ = pango_font_description_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_copy(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_copy$descriptor() {
        return pango_font_description_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_copy(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_copy$handle() {
        return pango_font_description_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_copy(const PangoFontDescription *desc)
     * }
     */
    public static MemorySegment pango_font_description_copy(MemorySegment desc) {
        var mh$ = pango_font_description_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_copy", desc);
            }
            return (MemorySegment)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_copy_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_copy_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_copy_static(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_copy_static$descriptor() {
        return pango_font_description_copy_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_copy_static(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_copy_static$handle() {
        return pango_font_description_copy_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_copy_static(const PangoFontDescription *desc)
     * }
     */
    public static MemorySegment pango_font_description_copy_static(MemorySegment desc) {
        var mh$ = pango_font_description_copy_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_copy_static", desc);
            }
            return (MemorySegment)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint pango_font_description_hash(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_hash$descriptor() {
        return pango_font_description_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint pango_font_description_hash(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_hash$handle() {
        return pango_font_description_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint pango_font_description_hash(const PangoFontDescription *desc)
     * }
     */
    public static int pango_font_description_hash(MemorySegment desc) {
        var mh$ = pango_font_description_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_hash", desc);
            }
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_font_description_equal(const PangoFontDescription *desc1, const PangoFontDescription *desc2)
     * }
     */
    public static FunctionDescriptor pango_font_description_equal$descriptor() {
        return pango_font_description_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_font_description_equal(const PangoFontDescription *desc1, const PangoFontDescription *desc2)
     * }
     */
    public static MethodHandle pango_font_description_equal$handle() {
        return pango_font_description_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_font_description_equal(const PangoFontDescription *desc1, const PangoFontDescription *desc2)
     * }
     */
    public static int pango_font_description_equal(MemorySegment desc1, MemorySegment desc2) {
        var mh$ = pango_font_description_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_equal", desc1, desc2);
            }
            return (int)mh$.invokeExact(desc1, desc2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_free(PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_free$descriptor() {
        return pango_font_description_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_free(PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_free$handle() {
        return pango_font_description_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_free(PangoFontDescription *desc)
     * }
     */
    public static void pango_font_description_free(MemorySegment desc) {
        var mh$ = pango_font_description_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_free", desc);
            }
            mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_descriptions_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_descriptions_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_descriptions_free(PangoFontDescription **descs, int n_descs)
     * }
     */
    public static FunctionDescriptor pango_font_descriptions_free$descriptor() {
        return pango_font_descriptions_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_descriptions_free(PangoFontDescription **descs, int n_descs)
     * }
     */
    public static MethodHandle pango_font_descriptions_free$handle() {
        return pango_font_descriptions_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_descriptions_free(PangoFontDescription **descs, int n_descs)
     * }
     */
    public static void pango_font_descriptions_free(MemorySegment descs, int n_descs) {
        var mh$ = pango_font_descriptions_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_descriptions_free", descs, n_descs);
            }
            mh$.invokeExact(descs, n_descs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_family(PangoFontDescription *desc, const char *family)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_family$descriptor() {
        return pango_font_description_set_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_family(PangoFontDescription *desc, const char *family)
     * }
     */
    public static MethodHandle pango_font_description_set_family$handle() {
        return pango_font_description_set_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_family(PangoFontDescription *desc, const char *family)
     * }
     */
    public static void pango_font_description_set_family(MemorySegment desc, MemorySegment family) {
        var mh$ = pango_font_description_set_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_family", desc, family);
            }
            mh$.invokeExact(desc, family);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_family_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_family_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_family_static(PangoFontDescription *desc, const char *family)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_family_static$descriptor() {
        return pango_font_description_set_family_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_family_static(PangoFontDescription *desc, const char *family)
     * }
     */
    public static MethodHandle pango_font_description_set_family_static$handle() {
        return pango_font_description_set_family_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_family_static(PangoFontDescription *desc, const char *family)
     * }
     */
    public static void pango_font_description_set_family_static(MemorySegment desc, MemorySegment family) {
        var mh$ = pango_font_description_set_family_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_family_static", desc, family);
            }
            mh$.invokeExact(desc, family);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_get_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *pango_font_description_get_family(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_get_family$descriptor() {
        return pango_font_description_get_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *pango_font_description_get_family(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_get_family$handle() {
        return pango_font_description_get_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *pango_font_description_get_family(const PangoFontDescription *desc)
     * }
     */
    public static MemorySegment pango_font_description_get_family(MemorySegment desc) {
        var mh$ = pango_font_description_get_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_family", desc);
            }
            return (MemorySegment)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_style(PangoFontDescription *desc, PangoStyle style)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_style$descriptor() {
        return pango_font_description_set_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_style(PangoFontDescription *desc, PangoStyle style)
     * }
     */
    public static MethodHandle pango_font_description_set_style$handle() {
        return pango_font_description_set_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_style(PangoFontDescription *desc, PangoStyle style)
     * }
     */
    public static void pango_font_description_set_style(MemorySegment desc, int style) {
        var mh$ = pango_font_description_set_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_style", desc, style);
            }
            mh$.invokeExact(desc, style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_get_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoStyle pango_font_description_get_style(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_get_style$descriptor() {
        return pango_font_description_get_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoStyle pango_font_description_get_style(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_get_style$handle() {
        return pango_font_description_get_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoStyle pango_font_description_get_style(const PangoFontDescription *desc)
     * }
     */
    public static int pango_font_description_get_style(MemorySegment desc) {
        var mh$ = pango_font_description_get_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_style", desc);
            }
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_variant(PangoFontDescription *desc, PangoVariant variant)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_variant$descriptor() {
        return pango_font_description_set_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_variant(PangoFontDescription *desc, PangoVariant variant)
     * }
     */
    public static MethodHandle pango_font_description_set_variant$handle() {
        return pango_font_description_set_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_variant(PangoFontDescription *desc, PangoVariant variant)
     * }
     */
    public static void pango_font_description_set_variant(MemorySegment desc, int variant) {
        var mh$ = pango_font_description_set_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_variant", desc, variant);
            }
            mh$.invokeExact(desc, variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_get_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoVariant pango_font_description_get_variant(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_get_variant$descriptor() {
        return pango_font_description_get_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoVariant pango_font_description_get_variant(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_get_variant$handle() {
        return pango_font_description_get_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoVariant pango_font_description_get_variant(const PangoFontDescription *desc)
     * }
     */
    public static int pango_font_description_get_variant(MemorySegment desc) {
        var mh$ = pango_font_description_get_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_variant", desc);
            }
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_weight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_weight"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_weight(PangoFontDescription *desc, PangoWeight weight)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_weight$descriptor() {
        return pango_font_description_set_weight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_weight(PangoFontDescription *desc, PangoWeight weight)
     * }
     */
    public static MethodHandle pango_font_description_set_weight$handle() {
        return pango_font_description_set_weight.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_weight(PangoFontDescription *desc, PangoWeight weight)
     * }
     */
    public static void pango_font_description_set_weight(MemorySegment desc, int weight) {
        var mh$ = pango_font_description_set_weight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_weight", desc, weight);
            }
            mh$.invokeExact(desc, weight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_get_weight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_weight"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoWeight pango_font_description_get_weight(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_get_weight$descriptor() {
        return pango_font_description_get_weight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoWeight pango_font_description_get_weight(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_get_weight$handle() {
        return pango_font_description_get_weight.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoWeight pango_font_description_get_weight(const PangoFontDescription *desc)
     * }
     */
    public static int pango_font_description_get_weight(MemorySegment desc) {
        var mh$ = pango_font_description_get_weight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_weight", desc);
            }
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_stretch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_stretch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_stretch(PangoFontDescription *desc, PangoStretch stretch)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_stretch$descriptor() {
        return pango_font_description_set_stretch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_stretch(PangoFontDescription *desc, PangoStretch stretch)
     * }
     */
    public static MethodHandle pango_font_description_set_stretch$handle() {
        return pango_font_description_set_stretch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_stretch(PangoFontDescription *desc, PangoStretch stretch)
     * }
     */
    public static void pango_font_description_set_stretch(MemorySegment desc, int stretch) {
        var mh$ = pango_font_description_set_stretch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_stretch", desc, stretch);
            }
            mh$.invokeExact(desc, stretch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_get_stretch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_stretch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoStretch pango_font_description_get_stretch(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_get_stretch$descriptor() {
        return pango_font_description_get_stretch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoStretch pango_font_description_get_stretch(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_get_stretch$handle() {
        return pango_font_description_get_stretch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoStretch pango_font_description_get_stretch(const PangoFontDescription *desc)
     * }
     */
    public static int pango_font_description_get_stretch(MemorySegment desc) {
        var mh$ = pango_font_description_get_stretch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_stretch", desc);
            }
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_size(PangoFontDescription *desc, gint size)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_size$descriptor() {
        return pango_font_description_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_size(PangoFontDescription *desc, gint size)
     * }
     */
    public static MethodHandle pango_font_description_set_size$handle() {
        return pango_font_description_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_size(PangoFontDescription *desc, gint size)
     * }
     */
    public static void pango_font_description_set_size(MemorySegment desc, int size) {
        var mh$ = pango_font_description_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_size", desc, size);
            }
            mh$.invokeExact(desc, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint pango_font_description_get_size(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_get_size$descriptor() {
        return pango_font_description_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint pango_font_description_get_size(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_get_size$handle() {
        return pango_font_description_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint pango_font_description_get_size(const PangoFontDescription *desc)
     * }
     */
    public static int pango_font_description_get_size(MemorySegment desc) {
        var mh$ = pango_font_description_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_size", desc);
            }
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_absolute_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_absolute_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_absolute_size(PangoFontDescription *desc, double size)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_absolute_size$descriptor() {
        return pango_font_description_set_absolute_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_absolute_size(PangoFontDescription *desc, double size)
     * }
     */
    public static MethodHandle pango_font_description_set_absolute_size$handle() {
        return pango_font_description_set_absolute_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_absolute_size(PangoFontDescription *desc, double size)
     * }
     */
    public static void pango_font_description_set_absolute_size(MemorySegment desc, double size) {
        var mh$ = pango_font_description_set_absolute_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_absolute_size", desc, size);
            }
            mh$.invokeExact(desc, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_get_size_is_absolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_size_is_absolute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_font_description_get_size_is_absolute(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_get_size_is_absolute$descriptor() {
        return pango_font_description_get_size_is_absolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_font_description_get_size_is_absolute(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_get_size_is_absolute$handle() {
        return pango_font_description_get_size_is_absolute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_font_description_get_size_is_absolute(const PangoFontDescription *desc)
     * }
     */
    public static int pango_font_description_get_size_is_absolute(MemorySegment desc) {
        var mh$ = pango_font_description_get_size_is_absolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_size_is_absolute", desc);
            }
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_gravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_gravity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_gravity(PangoFontDescription *desc, PangoGravity gravity)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_gravity$descriptor() {
        return pango_font_description_set_gravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_gravity(PangoFontDescription *desc, PangoGravity gravity)
     * }
     */
    public static MethodHandle pango_font_description_set_gravity$handle() {
        return pango_font_description_set_gravity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_gravity(PangoFontDescription *desc, PangoGravity gravity)
     * }
     */
    public static void pango_font_description_set_gravity(MemorySegment desc, int gravity) {
        var mh$ = pango_font_description_set_gravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_gravity", desc, gravity);
            }
            mh$.invokeExact(desc, gravity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_get_gravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_gravity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGravity pango_font_description_get_gravity(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_get_gravity$descriptor() {
        return pango_font_description_get_gravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGravity pango_font_description_get_gravity(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_get_gravity$handle() {
        return pango_font_description_get_gravity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGravity pango_font_description_get_gravity(const PangoFontDescription *desc)
     * }
     */
    public static int pango_font_description_get_gravity(MemorySegment desc) {
        var mh$ = pango_font_description_get_gravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_gravity", desc);
            }
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_variations_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_variations_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_variations_static(PangoFontDescription *desc, const char *variations)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_variations_static$descriptor() {
        return pango_font_description_set_variations_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_variations_static(PangoFontDescription *desc, const char *variations)
     * }
     */
    public static MethodHandle pango_font_description_set_variations_static$handle() {
        return pango_font_description_set_variations_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_variations_static(PangoFontDescription *desc, const char *variations)
     * }
     */
    public static void pango_font_description_set_variations_static(MemorySegment desc, MemorySegment variations) {
        var mh$ = pango_font_description_set_variations_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_variations_static", desc, variations);
            }
            mh$.invokeExact(desc, variations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_set_variations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_set_variations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_variations(PangoFontDescription *desc, const char *variations)
     * }
     */
    public static FunctionDescriptor pango_font_description_set_variations$descriptor() {
        return pango_font_description_set_variations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_set_variations(PangoFontDescription *desc, const char *variations)
     * }
     */
    public static MethodHandle pango_font_description_set_variations$handle() {
        return pango_font_description_set_variations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_set_variations(PangoFontDescription *desc, const char *variations)
     * }
     */
    public static void pango_font_description_set_variations(MemorySegment desc, MemorySegment variations) {
        var mh$ = pango_font_description_set_variations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_set_variations", desc, variations);
            }
            mh$.invokeExact(desc, variations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_get_variations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_variations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *pango_font_description_get_variations(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_get_variations$descriptor() {
        return pango_font_description_get_variations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *pango_font_description_get_variations(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_get_variations$handle() {
        return pango_font_description_get_variations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *pango_font_description_get_variations(const PangoFontDescription *desc)
     * }
     */
    public static MemorySegment pango_font_description_get_variations(MemorySegment desc) {
        var mh$ = pango_font_description_get_variations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_variations", desc);
            }
            return (MemorySegment)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_get_set_fields {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_get_set_fields"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMask pango_font_description_get_set_fields(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_get_set_fields$descriptor() {
        return pango_font_description_get_set_fields.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMask pango_font_description_get_set_fields(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_get_set_fields$handle() {
        return pango_font_description_get_set_fields.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMask pango_font_description_get_set_fields(const PangoFontDescription *desc)
     * }
     */
    public static int pango_font_description_get_set_fields(MemorySegment desc) {
        var mh$ = pango_font_description_get_set_fields.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_get_set_fields", desc);
            }
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_unset_fields {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_unset_fields"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_unset_fields(PangoFontDescription *desc, PangoFontMask to_unset)
     * }
     */
    public static FunctionDescriptor pango_font_description_unset_fields$descriptor() {
        return pango_font_description_unset_fields.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_unset_fields(PangoFontDescription *desc, PangoFontMask to_unset)
     * }
     */
    public static MethodHandle pango_font_description_unset_fields$handle() {
        return pango_font_description_unset_fields.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_unset_fields(PangoFontDescription *desc, PangoFontMask to_unset)
     * }
     */
    public static void pango_font_description_unset_fields(MemorySegment desc, int to_unset) {
        var mh$ = pango_font_description_unset_fields.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_unset_fields", desc, to_unset);
            }
            mh$.invokeExact(desc, to_unset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_merge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_merge"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_merge(PangoFontDescription *desc, const PangoFontDescription *desc_to_merge, gboolean replace_existing)
     * }
     */
    public static FunctionDescriptor pango_font_description_merge$descriptor() {
        return pango_font_description_merge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_merge(PangoFontDescription *desc, const PangoFontDescription *desc_to_merge, gboolean replace_existing)
     * }
     */
    public static MethodHandle pango_font_description_merge$handle() {
        return pango_font_description_merge.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_merge(PangoFontDescription *desc, const PangoFontDescription *desc_to_merge, gboolean replace_existing)
     * }
     */
    public static void pango_font_description_merge(MemorySegment desc, MemorySegment desc_to_merge, int replace_existing) {
        var mh$ = pango_font_description_merge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_merge", desc, desc_to_merge, replace_existing);
            }
            mh$.invokeExact(desc, desc_to_merge, replace_existing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_merge_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_merge_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_description_merge_static(PangoFontDescription *desc, const PangoFontDescription *desc_to_merge, gboolean replace_existing)
     * }
     */
    public static FunctionDescriptor pango_font_description_merge_static$descriptor() {
        return pango_font_description_merge_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_description_merge_static(PangoFontDescription *desc, const PangoFontDescription *desc_to_merge, gboolean replace_existing)
     * }
     */
    public static MethodHandle pango_font_description_merge_static$handle() {
        return pango_font_description_merge_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_description_merge_static(PangoFontDescription *desc, const PangoFontDescription *desc_to_merge, gboolean replace_existing)
     * }
     */
    public static void pango_font_description_merge_static(MemorySegment desc, MemorySegment desc_to_merge, int replace_existing) {
        var mh$ = pango_font_description_merge_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_merge_static", desc, desc_to_merge, replace_existing);
            }
            mh$.invokeExact(desc, desc_to_merge, replace_existing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_better_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_better_match"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_font_description_better_match(const PangoFontDescription *desc, const PangoFontDescription *old_match, const PangoFontDescription *new_match)
     * }
     */
    public static FunctionDescriptor pango_font_description_better_match$descriptor() {
        return pango_font_description_better_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_font_description_better_match(const PangoFontDescription *desc, const PangoFontDescription *old_match, const PangoFontDescription *new_match)
     * }
     */
    public static MethodHandle pango_font_description_better_match$handle() {
        return pango_font_description_better_match.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_font_description_better_match(const PangoFontDescription *desc, const PangoFontDescription *old_match, const PangoFontDescription *new_match)
     * }
     */
    public static int pango_font_description_better_match(MemorySegment desc, MemorySegment old_match, MemorySegment new_match) {
        var mh$ = pango_font_description_better_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_better_match", desc, old_match, new_match);
            }
            return (int)mh$.invokeExact(desc, old_match, new_match);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_from_string(const char *str)
     * }
     */
    public static FunctionDescriptor pango_font_description_from_string$descriptor() {
        return pango_font_description_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_from_string(const char *str)
     * }
     */
    public static MethodHandle pango_font_description_from_string$handle() {
        return pango_font_description_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_description_from_string(const char *str)
     * }
     */
    public static MemorySegment pango_font_description_from_string(MemorySegment str) {
        var mh$ = pango_font_description_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_from_string", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *pango_font_description_to_string(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_to_string$descriptor() {
        return pango_font_description_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *pango_font_description_to_string(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_to_string$handle() {
        return pango_font_description_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *pango_font_description_to_string(const PangoFontDescription *desc)
     * }
     */
    public static MemorySegment pango_font_description_to_string(MemorySegment desc) {
        var mh$ = pango_font_description_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_to_string", desc);
            }
            return (MemorySegment)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_description_to_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_description_to_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *pango_font_description_to_filename(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_description_to_filename$descriptor() {
        return pango_font_description_to_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *pango_font_description_to_filename(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_description_to_filename$handle() {
        return pango_font_description_to_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *pango_font_description_to_filename(const PangoFontDescription *desc)
     * }
     */
    public static MemorySegment pango_font_description_to_filename(MemorySegment desc) {
        var mh$ = pango_font_description_to_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_description_to_filename", desc);
            }
            return (MemorySegment)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_font_metrics_get_type()
     * }
     */
    public static FunctionDescriptor pango_font_metrics_get_type$descriptor() {
        return pango_font_metrics_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_font_metrics_get_type()
     * }
     */
    public static MethodHandle pango_font_metrics_get_type$handle() {
        return pango_font_metrics_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_font_metrics_get_type()
     * }
     */
    public static long pango_font_metrics_get_type() {
        var mh$ = pango_font_metrics_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_font_metrics_ref(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_ref$descriptor() {
        return pango_font_metrics_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_font_metrics_ref(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_ref$handle() {
        return pango_font_metrics_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_font_metrics_ref(PangoFontMetrics *metrics)
     * }
     */
    public static MemorySegment pango_font_metrics_ref(MemorySegment metrics) {
        var mh$ = pango_font_metrics_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_ref", metrics);
            }
            return (MemorySegment)mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_metrics_unref(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_unref$descriptor() {
        return pango_font_metrics_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_metrics_unref(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_unref$handle() {
        return pango_font_metrics_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_metrics_unref(PangoFontMetrics *metrics)
     * }
     */
    public static void pango_font_metrics_unref(MemorySegment metrics) {
        var mh$ = pango_font_metrics_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_unref", metrics);
            }
            mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_get_ascent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_get_ascent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_ascent(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_get_ascent$descriptor() {
        return pango_font_metrics_get_ascent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_ascent(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_get_ascent$handle() {
        return pango_font_metrics_get_ascent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_ascent(PangoFontMetrics *metrics)
     * }
     */
    public static int pango_font_metrics_get_ascent(MemorySegment metrics) {
        var mh$ = pango_font_metrics_get_ascent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_get_ascent", metrics);
            }
            return (int)mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_get_descent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_get_descent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_descent(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_get_descent$descriptor() {
        return pango_font_metrics_get_descent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_descent(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_get_descent$handle() {
        return pango_font_metrics_get_descent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_descent(PangoFontMetrics *metrics)
     * }
     */
    public static int pango_font_metrics_get_descent(MemorySegment metrics) {
        var mh$ = pango_font_metrics_get_descent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_get_descent", metrics);
            }
            return (int)mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_height(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_get_height$descriptor() {
        return pango_font_metrics_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_height(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_get_height$handle() {
        return pango_font_metrics_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_height(PangoFontMetrics *metrics)
     * }
     */
    public static int pango_font_metrics_get_height(MemorySegment metrics) {
        var mh$ = pango_font_metrics_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_get_height", metrics);
            }
            return (int)mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_get_approximate_char_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_get_approximate_char_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_approximate_char_width(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_get_approximate_char_width$descriptor() {
        return pango_font_metrics_get_approximate_char_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_approximate_char_width(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_get_approximate_char_width$handle() {
        return pango_font_metrics_get_approximate_char_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_approximate_char_width(PangoFontMetrics *metrics)
     * }
     */
    public static int pango_font_metrics_get_approximate_char_width(MemorySegment metrics) {
        var mh$ = pango_font_metrics_get_approximate_char_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_get_approximate_char_width", metrics);
            }
            return (int)mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_get_approximate_digit_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_get_approximate_digit_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_approximate_digit_width(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_get_approximate_digit_width$descriptor() {
        return pango_font_metrics_get_approximate_digit_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_approximate_digit_width(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_get_approximate_digit_width$handle() {
        return pango_font_metrics_get_approximate_digit_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_approximate_digit_width(PangoFontMetrics *metrics)
     * }
     */
    public static int pango_font_metrics_get_approximate_digit_width(MemorySegment metrics) {
        var mh$ = pango_font_metrics_get_approximate_digit_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_get_approximate_digit_width", metrics);
            }
            return (int)mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_get_underline_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_get_underline_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_underline_position(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_get_underline_position$descriptor() {
        return pango_font_metrics_get_underline_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_underline_position(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_get_underline_position$handle() {
        return pango_font_metrics_get_underline_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_underline_position(PangoFontMetrics *metrics)
     * }
     */
    public static int pango_font_metrics_get_underline_position(MemorySegment metrics) {
        var mh$ = pango_font_metrics_get_underline_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_get_underline_position", metrics);
            }
            return (int)mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_get_underline_thickness {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_get_underline_thickness"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_underline_thickness(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_get_underline_thickness$descriptor() {
        return pango_font_metrics_get_underline_thickness.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_underline_thickness(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_get_underline_thickness$handle() {
        return pango_font_metrics_get_underline_thickness.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_underline_thickness(PangoFontMetrics *metrics)
     * }
     */
    public static int pango_font_metrics_get_underline_thickness(MemorySegment metrics) {
        var mh$ = pango_font_metrics_get_underline_thickness.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_get_underline_thickness", metrics);
            }
            return (int)mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_get_strikethrough_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_get_strikethrough_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_strikethrough_position(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_get_strikethrough_position$descriptor() {
        return pango_font_metrics_get_strikethrough_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_strikethrough_position(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_get_strikethrough_position$handle() {
        return pango_font_metrics_get_strikethrough_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_strikethrough_position(PangoFontMetrics *metrics)
     * }
     */
    public static int pango_font_metrics_get_strikethrough_position(MemorySegment metrics) {
        var mh$ = pango_font_metrics_get_strikethrough_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_get_strikethrough_position", metrics);
            }
            return (int)mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_metrics_get_strikethrough_thickness {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_metrics_get_strikethrough_thickness"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_strikethrough_thickness(PangoFontMetrics *metrics)
     * }
     */
    public static FunctionDescriptor pango_font_metrics_get_strikethrough_thickness$descriptor() {
        return pango_font_metrics_get_strikethrough_thickness.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_strikethrough_thickness(PangoFontMetrics *metrics)
     * }
     */
    public static MethodHandle pango_font_metrics_get_strikethrough_thickness$handle() {
        return pango_font_metrics_get_strikethrough_thickness.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_font_metrics_get_strikethrough_thickness(PangoFontMetrics *metrics)
     * }
     */
    public static int pango_font_metrics_get_strikethrough_thickness(MemorySegment metrics) {
        var mh$ = pango_font_metrics_get_strikethrough_thickness.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_metrics_get_strikethrough_thickness", metrics);
            }
            return (int)mh$.invokeExact(metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_family_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_family_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_font_family_get_type()
     * }
     */
    public static FunctionDescriptor pango_font_family_get_type$descriptor() {
        return pango_font_family_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_font_family_get_type()
     * }
     */
    public static MethodHandle pango_font_family_get_type$handle() {
        return pango_font_family_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_font_family_get_type()
     * }
     */
    public static long pango_font_family_get_type() {
        var mh$ = pango_font_family_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_family_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_family_list_faces {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_family_list_faces"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_family_list_faces(PangoFontFamily *family, PangoFontFace ***faces, int *n_faces)
     * }
     */
    public static FunctionDescriptor pango_font_family_list_faces$descriptor() {
        return pango_font_family_list_faces.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_family_list_faces(PangoFontFamily *family, PangoFontFace ***faces, int *n_faces)
     * }
     */
    public static MethodHandle pango_font_family_list_faces$handle() {
        return pango_font_family_list_faces.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_family_list_faces(PangoFontFamily *family, PangoFontFace ***faces, int *n_faces)
     * }
     */
    public static void pango_font_family_list_faces(MemorySegment family, MemorySegment faces, MemorySegment n_faces) {
        var mh$ = pango_font_family_list_faces.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_family_list_faces", family, faces, n_faces);
            }
            mh$.invokeExact(family, faces, n_faces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_family_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_family_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *pango_font_family_get_name(PangoFontFamily *family)
     * }
     */
    public static FunctionDescriptor pango_font_family_get_name$descriptor() {
        return pango_font_family_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *pango_font_family_get_name(PangoFontFamily *family)
     * }
     */
    public static MethodHandle pango_font_family_get_name$handle() {
        return pango_font_family_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *pango_font_family_get_name(PangoFontFamily *family)
     * }
     */
    public static MemorySegment pango_font_family_get_name(MemorySegment family) {
        var mh$ = pango_font_family_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_family_get_name", family);
            }
            return (MemorySegment)mh$.invokeExact(family);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_family_is_monospace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_family_is_monospace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_font_family_is_monospace(PangoFontFamily *family)
     * }
     */
    public static FunctionDescriptor pango_font_family_is_monospace$descriptor() {
        return pango_font_family_is_monospace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_font_family_is_monospace(PangoFontFamily *family)
     * }
     */
    public static MethodHandle pango_font_family_is_monospace$handle() {
        return pango_font_family_is_monospace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_font_family_is_monospace(PangoFontFamily *family)
     * }
     */
    public static int pango_font_family_is_monospace(MemorySegment family) {
        var mh$ = pango_font_family_is_monospace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_family_is_monospace", family);
            }
            return (int)mh$.invokeExact(family);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_family_is_variable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_family_is_variable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_font_family_is_variable(PangoFontFamily *family)
     * }
     */
    public static FunctionDescriptor pango_font_family_is_variable$descriptor() {
        return pango_font_family_is_variable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_font_family_is_variable(PangoFontFamily *family)
     * }
     */
    public static MethodHandle pango_font_family_is_variable$handle() {
        return pango_font_family_is_variable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_font_family_is_variable(PangoFontFamily *family)
     * }
     */
    public static int pango_font_family_is_variable(MemorySegment family) {
        var mh$ = pango_font_family_is_variable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_family_is_variable", family);
            }
            return (int)mh$.invokeExact(family);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_family_get_face {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_family_get_face"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontFace *pango_font_family_get_face(PangoFontFamily *family, const char *name)
     * }
     */
    public static FunctionDescriptor pango_font_family_get_face$descriptor() {
        return pango_font_family_get_face.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontFace *pango_font_family_get_face(PangoFontFamily *family, const char *name)
     * }
     */
    public static MethodHandle pango_font_family_get_face$handle() {
        return pango_font_family_get_face.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontFace *pango_font_family_get_face(PangoFontFamily *family, const char *name)
     * }
     */
    public static MemorySegment pango_font_family_get_face(MemorySegment family, MemorySegment name) {
        var mh$ = pango_font_family_get_face.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_family_get_face", family, name);
            }
            return (MemorySegment)mh$.invokeExact(family, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_face_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_face_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_font_face_get_type()
     * }
     */
    public static FunctionDescriptor pango_font_face_get_type$descriptor() {
        return pango_font_face_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_font_face_get_type()
     * }
     */
    public static MethodHandle pango_font_face_get_type$handle() {
        return pango_font_face_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_font_face_get_type()
     * }
     */
    public static long pango_font_face_get_type() {
        var mh$ = pango_font_face_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_face_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_face_describe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_face_describe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_face_describe(PangoFontFace *face)
     * }
     */
    public static FunctionDescriptor pango_font_face_describe$descriptor() {
        return pango_font_face_describe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_face_describe(PangoFontFace *face)
     * }
     */
    public static MethodHandle pango_font_face_describe$handle() {
        return pango_font_face_describe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_face_describe(PangoFontFace *face)
     * }
     */
    public static MemorySegment pango_font_face_describe(MemorySegment face) {
        var mh$ = pango_font_face_describe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_face_describe", face);
            }
            return (MemorySegment)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_face_get_face_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_face_get_face_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *pango_font_face_get_face_name(PangoFontFace *face)
     * }
     */
    public static FunctionDescriptor pango_font_face_get_face_name$descriptor() {
        return pango_font_face_get_face_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *pango_font_face_get_face_name(PangoFontFace *face)
     * }
     */
    public static MethodHandle pango_font_face_get_face_name$handle() {
        return pango_font_face_get_face_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *pango_font_face_get_face_name(PangoFontFace *face)
     * }
     */
    public static MemorySegment pango_font_face_get_face_name(MemorySegment face) {
        var mh$ = pango_font_face_get_face_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_face_get_face_name", face);
            }
            return (MemorySegment)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_face_list_sizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_face_list_sizes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_face_list_sizes(PangoFontFace *face, int **sizes, int *n_sizes)
     * }
     */
    public static FunctionDescriptor pango_font_face_list_sizes$descriptor() {
        return pango_font_face_list_sizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_face_list_sizes(PangoFontFace *face, int **sizes, int *n_sizes)
     * }
     */
    public static MethodHandle pango_font_face_list_sizes$handle() {
        return pango_font_face_list_sizes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_face_list_sizes(PangoFontFace *face, int **sizes, int *n_sizes)
     * }
     */
    public static void pango_font_face_list_sizes(MemorySegment face, MemorySegment sizes, MemorySegment n_sizes) {
        var mh$ = pango_font_face_list_sizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_face_list_sizes", face, sizes, n_sizes);
            }
            mh$.invokeExact(face, sizes, n_sizes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_face_is_synthesized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_face_is_synthesized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_font_face_is_synthesized(PangoFontFace *face)
     * }
     */
    public static FunctionDescriptor pango_font_face_is_synthesized$descriptor() {
        return pango_font_face_is_synthesized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_font_face_is_synthesized(PangoFontFace *face)
     * }
     */
    public static MethodHandle pango_font_face_is_synthesized$handle() {
        return pango_font_face_is_synthesized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_font_face_is_synthesized(PangoFontFace *face)
     * }
     */
    public static int pango_font_face_is_synthesized(MemorySegment face) {
        var mh$ = pango_font_face_is_synthesized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_face_is_synthesized", face);
            }
            return (int)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_face_get_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_face_get_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontFamily *pango_font_face_get_family(PangoFontFace *face)
     * }
     */
    public static FunctionDescriptor pango_font_face_get_family$descriptor() {
        return pango_font_face_get_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontFamily *pango_font_face_get_family(PangoFontFace *face)
     * }
     */
    public static MethodHandle pango_font_face_get_family$handle() {
        return pango_font_face_get_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontFamily *pango_font_face_get_family(PangoFontFace *face)
     * }
     */
    public static MemorySegment pango_font_face_get_family(MemorySegment face) {
        var mh$ = pango_font_face_get_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_face_get_family", face);
            }
            return (MemorySegment)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_font_get_type()
     * }
     */
    public static FunctionDescriptor pango_font_get_type$descriptor() {
        return pango_font_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_font_get_type()
     * }
     */
    public static MethodHandle pango_font_get_type$handle() {
        return pango_font_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_font_get_type()
     * }
     */
    public static long pango_font_get_type() {
        var mh$ = pango_font_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_describe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_describe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_describe(PangoFont *font)
     * }
     */
    public static FunctionDescriptor pango_font_describe$descriptor() {
        return pango_font_describe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_describe(PangoFont *font)
     * }
     */
    public static MethodHandle pango_font_describe$handle() {
        return pango_font_describe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_describe(PangoFont *font)
     * }
     */
    public static MemorySegment pango_font_describe(MemorySegment font) {
        var mh$ = pango_font_describe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_describe", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_describe_with_absolute_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_describe_with_absolute_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_describe_with_absolute_size(PangoFont *font)
     * }
     */
    public static FunctionDescriptor pango_font_describe_with_absolute_size$descriptor() {
        return pango_font_describe_with_absolute_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_describe_with_absolute_size(PangoFont *font)
     * }
     */
    public static MethodHandle pango_font_describe_with_absolute_size$handle() {
        return pango_font_describe_with_absolute_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_font_describe_with_absolute_size(PangoFont *font)
     * }
     */
    public static MemorySegment pango_font_describe_with_absolute_size(MemorySegment font) {
        var mh$ = pango_font_describe_with_absolute_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_describe_with_absolute_size", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_get_coverage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_get_coverage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoCoverage *pango_font_get_coverage(PangoFont *font, PangoLanguage *language)
     * }
     */
    public static FunctionDescriptor pango_font_get_coverage$descriptor() {
        return pango_font_get_coverage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoCoverage *pango_font_get_coverage(PangoFont *font, PangoLanguage *language)
     * }
     */
    public static MethodHandle pango_font_get_coverage$handle() {
        return pango_font_get_coverage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoCoverage *pango_font_get_coverage(PangoFont *font, PangoLanguage *language)
     * }
     */
    public static MemorySegment pango_font_get_coverage(MemorySegment font, MemorySegment language) {
        var mh$ = pango_font_get_coverage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_get_coverage", font, language);
            }
            return (MemorySegment)mh$.invokeExact(font, language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_find_shaper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_find_shaper"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoEngineShape *pango_font_find_shaper(PangoFont *font, PangoLanguage *language, guint32 ch)
     * }
     */
    public static FunctionDescriptor pango_font_find_shaper$descriptor() {
        return pango_font_find_shaper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoEngineShape *pango_font_find_shaper(PangoFont *font, PangoLanguage *language, guint32 ch)
     * }
     */
    public static MethodHandle pango_font_find_shaper$handle() {
        return pango_font_find_shaper.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoEngineShape *pango_font_find_shaper(PangoFont *font, PangoLanguage *language, guint32 ch)
     * }
     */
    public static MemorySegment pango_font_find_shaper(MemorySegment font, MemorySegment language, int ch) {
        var mh$ = pango_font_find_shaper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_find_shaper", font, language, ch);
            }
            return (MemorySegment)mh$.invokeExact(font, language, ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_get_metrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_get_metrics"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_font_get_metrics(PangoFont *font, PangoLanguage *language)
     * }
     */
    public static FunctionDescriptor pango_font_get_metrics$descriptor() {
        return pango_font_get_metrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_font_get_metrics(PangoFont *font, PangoLanguage *language)
     * }
     */
    public static MethodHandle pango_font_get_metrics$handle() {
        return pango_font_get_metrics.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_font_get_metrics(PangoFont *font, PangoLanguage *language)
     * }
     */
    public static MemorySegment pango_font_get_metrics(MemorySegment font, MemorySegment language) {
        var mh$ = pango_font_get_metrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_get_metrics", font, language);
            }
            return (MemorySegment)mh$.invokeExact(font, language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_get_glyph_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_get_glyph_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_get_glyph_extents(PangoFont *font, PangoGlyph glyph, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_font_get_glyph_extents$descriptor() {
        return pango_font_get_glyph_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_get_glyph_extents(PangoFont *font, PangoGlyph glyph, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_font_get_glyph_extents$handle() {
        return pango_font_get_glyph_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_get_glyph_extents(PangoFont *font, PangoGlyph glyph, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_font_get_glyph_extents(MemorySegment font, int glyph, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_font_get_glyph_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_get_glyph_extents", font, glyph, ink_rect, logical_rect);
            }
            mh$.invokeExact(font, glyph, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_get_font_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_get_font_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMap *pango_font_get_font_map(PangoFont *font)
     * }
     */
    public static FunctionDescriptor pango_font_get_font_map$descriptor() {
        return pango_font_get_font_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMap *pango_font_get_font_map(PangoFont *font)
     * }
     */
    public static MethodHandle pango_font_get_font_map$handle() {
        return pango_font_get_font_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMap *pango_font_get_font_map(PangoFont *font)
     * }
     */
    public static MemorySegment pango_font_get_font_map(MemorySegment font) {
        var mh$ = pango_font_get_font_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_get_font_map", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_get_face {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_get_face"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontFace *pango_font_get_face(PangoFont *font)
     * }
     */
    public static FunctionDescriptor pango_font_get_face$descriptor() {
        return pango_font_get_face.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontFace *pango_font_get_face(PangoFont *font)
     * }
     */
    public static MethodHandle pango_font_get_face$handle() {
        return pango_font_get_face.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontFace *pango_font_get_face(PangoFont *font)
     * }
     */
    public static MemorySegment pango_font_get_face(MemorySegment font) {
        var mh$ = pango_font_get_face.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_get_face", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_has_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_has_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_font_has_char(PangoFont *font, gunichar wc)
     * }
     */
    public static FunctionDescriptor pango_font_has_char$descriptor() {
        return pango_font_has_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_font_has_char(PangoFont *font, gunichar wc)
     * }
     */
    public static MethodHandle pango_font_has_char$handle() {
        return pango_font_has_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_font_has_char(PangoFont *font, gunichar wc)
     * }
     */
    public static int pango_font_has_char(MemorySegment font, int wc) {
        var mh$ = pango_font_has_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_has_char", font, wc);
            }
            return (int)mh$.invokeExact(font, wc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_get_features {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_get_features"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_get_features(PangoFont *font, hb_feature_t *features, guint len, guint *num_features)
     * }
     */
    public static FunctionDescriptor pango_font_get_features$descriptor() {
        return pango_font_get_features.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_get_features(PangoFont *font, hb_feature_t *features, guint len, guint *num_features)
     * }
     */
    public static MethodHandle pango_font_get_features$handle() {
        return pango_font_get_features.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_get_features(PangoFont *font, hb_feature_t *features, guint len, guint *num_features)
     * }
     */
    public static void pango_font_get_features(MemorySegment font, MemorySegment features, int len, MemorySegment num_features) {
        var mh$ = pango_font_get_features.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_get_features", font, features, len, num_features);
            }
            mh$.invokeExact(font, features, len, num_features);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_get_hb_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_get_hb_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_font_t *pango_font_get_hb_font(PangoFont *font)
     * }
     */
    public static FunctionDescriptor pango_font_get_hb_font$descriptor() {
        return pango_font_get_hb_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_font_t *pango_font_get_hb_font(PangoFont *font)
     * }
     */
    public static MethodHandle pango_font_get_hb_font$handle() {
        return pango_font_get_hb_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_font_t *pango_font_get_hb_font(PangoFont *font)
     * }
     */
    public static MemorySegment pango_font_get_hb_font(MemorySegment font) {
        var mh$ = pango_font_get_hb_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_get_hb_font", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_get_languages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_get_languages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLanguage **pango_font_get_languages(PangoFont *font)
     * }
     */
    public static FunctionDescriptor pango_font_get_languages$descriptor() {
        return pango_font_get_languages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLanguage **pango_font_get_languages(PangoFont *font)
     * }
     */
    public static MethodHandle pango_font_get_languages$handle() {
        return pango_font_get_languages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLanguage **pango_font_get_languages(PangoFont *font)
     * }
     */
    public static MemorySegment pango_font_get_languages(MemorySegment font) {
        var mh$ = pango_font_get_languages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_get_languages", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_serialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_serialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *pango_font_serialize(PangoFont *font)
     * }
     */
    public static FunctionDescriptor pango_font_serialize$descriptor() {
        return pango_font_serialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *pango_font_serialize(PangoFont *font)
     * }
     */
    public static MethodHandle pango_font_serialize$handle() {
        return pango_font_serialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *pango_font_serialize(PangoFont *font)
     * }
     */
    public static MemorySegment pango_font_serialize(MemorySegment font) {
        var mh$ = pango_font_serialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_serialize", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_deserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_deserialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFont *pango_font_deserialize(PangoContext *context, GBytes *bytes, GError **error)
     * }
     */
    public static FunctionDescriptor pango_font_deserialize$descriptor() {
        return pango_font_deserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFont *pango_font_deserialize(PangoContext *context, GBytes *bytes, GError **error)
     * }
     */
    public static MethodHandle pango_font_deserialize$handle() {
        return pango_font_deserialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFont *pango_font_deserialize(PangoContext *context, GBytes *bytes, GError **error)
     * }
     */
    public static MemorySegment pango_font_deserialize(MemorySegment context, MemorySegment bytes, MemorySegment error) {
        var mh$ = pango_font_deserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_deserialize", context, bytes, error);
            }
            return (MemorySegment)mh$.invokeExact(context, bytes, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef PangoFontFamily *PangoFontFamily_autoptr
     * }
     */
    public static final AddressLayout PangoFontFamily_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoFontFamily_listautoptr
     * }
     */
    public static final AddressLayout PangoFontFamily_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoFontFamily_slistautoptr
     * }
     */
    public static final AddressLayout PangoFontFamily_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoFontFamily_queueautoptr
     * }
     */
    public static final AddressLayout PangoFontFamily_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PangoFontFace *PangoFontFace_autoptr
     * }
     */
    public static final AddressLayout PangoFontFace_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoFontFace_listautoptr
     * }
     */
    public static final AddressLayout PangoFontFace_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoFontFace_slistautoptr
     * }
     */
    public static final AddressLayout PangoFontFace_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoFontFace_queueautoptr
     * }
     */
    public static final AddressLayout PangoFontFace_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PangoFont *PangoFont_autoptr
     * }
     */
    public static final AddressLayout PangoFont_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoFont_listautoptr
     * }
     */
    public static final AddressLayout PangoFont_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoFont_slistautoptr
     * }
     */
    public static final AddressLayout PangoFont_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoFont_queueautoptr
     * }
     */
    public static final AddressLayout PangoFont_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PangoFontDescription *PangoFontDescription_autoptr
     * }
     */
    public static final AddressLayout PangoFontDescription_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoFontDescription_listautoptr
     * }
     */
    public static final AddressLayout PangoFontDescription_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoFontDescription_slistautoptr
     * }
     */
    public static final AddressLayout PangoFontDescription_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoFontDescription_queueautoptr
     * }
     */
    public static final AddressLayout PangoFontDescription_queueautoptr = app_indicator_h.C_POINTER;

    private static class pango_color_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_color_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_color_get_type()
     * }
     */
    public static FunctionDescriptor pango_color_get_type$descriptor() {
        return pango_color_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_color_get_type()
     * }
     */
    public static MethodHandle pango_color_get_type$handle() {
        return pango_color_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_color_get_type()
     * }
     */
    public static long pango_color_get_type() {
        var mh$ = pango_color_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_color_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_color_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_color_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoColor *pango_color_copy(const PangoColor *src)
     * }
     */
    public static FunctionDescriptor pango_color_copy$descriptor() {
        return pango_color_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoColor *pango_color_copy(const PangoColor *src)
     * }
     */
    public static MethodHandle pango_color_copy$handle() {
        return pango_color_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoColor *pango_color_copy(const PangoColor *src)
     * }
     */
    public static MemorySegment pango_color_copy(MemorySegment src) {
        var mh$ = pango_color_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_color_copy", src);
            }
            return (MemorySegment)mh$.invokeExact(src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_color_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_color_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_color_free(PangoColor *color)
     * }
     */
    public static FunctionDescriptor pango_color_free$descriptor() {
        return pango_color_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_color_free(PangoColor *color)
     * }
     */
    public static MethodHandle pango_color_free$handle() {
        return pango_color_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_color_free(PangoColor *color)
     * }
     */
    public static void pango_color_free(MemorySegment color) {
        var mh$ = pango_color_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_color_free", color);
            }
            mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_color_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_color_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_color_parse(PangoColor *color, const char *spec)
     * }
     */
    public static FunctionDescriptor pango_color_parse$descriptor() {
        return pango_color_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_color_parse(PangoColor *color, const char *spec)
     * }
     */
    public static MethodHandle pango_color_parse$handle() {
        return pango_color_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_color_parse(PangoColor *color, const char *spec)
     * }
     */
    public static int pango_color_parse(MemorySegment color, MemorySegment spec) {
        var mh$ = pango_color_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_color_parse", color, spec);
            }
            return (int)mh$.invokeExact(color, spec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_color_parse_with_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_color_parse_with_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_color_parse_with_alpha(PangoColor *color, guint16 *alpha, const char *spec)
     * }
     */
    public static FunctionDescriptor pango_color_parse_with_alpha$descriptor() {
        return pango_color_parse_with_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_color_parse_with_alpha(PangoColor *color, guint16 *alpha, const char *spec)
     * }
     */
    public static MethodHandle pango_color_parse_with_alpha$handle() {
        return pango_color_parse_with_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_color_parse_with_alpha(PangoColor *color, guint16 *alpha, const char *spec)
     * }
     */
    public static int pango_color_parse_with_alpha(MemorySegment color, MemorySegment alpha, MemorySegment spec) {
        var mh$ = pango_color_parse_with_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_color_parse_with_alpha", color, alpha, spec);
            }
            return (int)mh$.invokeExact(color, alpha, spec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_color_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_color_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *pango_color_to_string(const PangoColor *color)
     * }
     */
    public static FunctionDescriptor pango_color_to_string$descriptor() {
        return pango_color_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *pango_color_to_string(const PangoColor *color)
     * }
     */
    public static MethodHandle pango_color_to_string$handle() {
        return pango_color_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *pango_color_to_string(const PangoColor *color)
     * }
     */
    public static MemorySegment pango_color_to_string(MemorySegment color) {
        var mh$ = pango_color_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_color_to_string", color);
            }
            return (MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_ATTR_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_INVALID = 0
     * }
     */
    public static int PANGO_ATTR_INVALID() {
        return PANGO_ATTR_INVALID;
    }
    private static final int PANGO_ATTR_LANGUAGE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_LANGUAGE = 1
     * }
     */
    public static int PANGO_ATTR_LANGUAGE() {
        return PANGO_ATTR_LANGUAGE;
    }
    private static final int PANGO_ATTR_FAMILY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_FAMILY = 2
     * }
     */
    public static int PANGO_ATTR_FAMILY() {
        return PANGO_ATTR_FAMILY;
    }
    private static final int PANGO_ATTR_STYLE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_STYLE = 3
     * }
     */
    public static int PANGO_ATTR_STYLE() {
        return PANGO_ATTR_STYLE;
    }
    private static final int PANGO_ATTR_WEIGHT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_WEIGHT = 4
     * }
     */
    public static int PANGO_ATTR_WEIGHT() {
        return PANGO_ATTR_WEIGHT;
    }
    private static final int PANGO_ATTR_VARIANT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_VARIANT = 5
     * }
     */
    public static int PANGO_ATTR_VARIANT() {
        return PANGO_ATTR_VARIANT;
    }
    private static final int PANGO_ATTR_STRETCH = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_STRETCH = 6
     * }
     */
    public static int PANGO_ATTR_STRETCH() {
        return PANGO_ATTR_STRETCH;
    }
    private static final int PANGO_ATTR_SIZE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_SIZE = 7
     * }
     */
    public static int PANGO_ATTR_SIZE() {
        return PANGO_ATTR_SIZE;
    }
    private static final int PANGO_ATTR_FONT_DESC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_FONT_DESC = 8
     * }
     */
    public static int PANGO_ATTR_FONT_DESC() {
        return PANGO_ATTR_FONT_DESC;
    }
    private static final int PANGO_ATTR_FOREGROUND = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_FOREGROUND = 9
     * }
     */
    public static int PANGO_ATTR_FOREGROUND() {
        return PANGO_ATTR_FOREGROUND;
    }
    private static final int PANGO_ATTR_BACKGROUND = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_BACKGROUND = 10
     * }
     */
    public static int PANGO_ATTR_BACKGROUND() {
        return PANGO_ATTR_BACKGROUND;
    }
    private static final int PANGO_ATTR_UNDERLINE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_UNDERLINE = 11
     * }
     */
    public static int PANGO_ATTR_UNDERLINE() {
        return PANGO_ATTR_UNDERLINE;
    }
    private static final int PANGO_ATTR_STRIKETHROUGH = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_STRIKETHROUGH = 12
     * }
     */
    public static int PANGO_ATTR_STRIKETHROUGH() {
        return PANGO_ATTR_STRIKETHROUGH;
    }
    private static final int PANGO_ATTR_RISE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_RISE = 13
     * }
     */
    public static int PANGO_ATTR_RISE() {
        return PANGO_ATTR_RISE;
    }
    private static final int PANGO_ATTR_SHAPE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_SHAPE = 14
     * }
     */
    public static int PANGO_ATTR_SHAPE() {
        return PANGO_ATTR_SHAPE;
    }
    private static final int PANGO_ATTR_SCALE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_SCALE = 15
     * }
     */
    public static int PANGO_ATTR_SCALE() {
        return PANGO_ATTR_SCALE;
    }
    private static final int PANGO_ATTR_FALLBACK = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_FALLBACK = 16
     * }
     */
    public static int PANGO_ATTR_FALLBACK() {
        return PANGO_ATTR_FALLBACK;
    }
    private static final int PANGO_ATTR_LETTER_SPACING = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_LETTER_SPACING = 17
     * }
     */
    public static int PANGO_ATTR_LETTER_SPACING() {
        return PANGO_ATTR_LETTER_SPACING;
    }
    private static final int PANGO_ATTR_UNDERLINE_COLOR = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_UNDERLINE_COLOR = 18
     * }
     */
    public static int PANGO_ATTR_UNDERLINE_COLOR() {
        return PANGO_ATTR_UNDERLINE_COLOR;
    }
    private static final int PANGO_ATTR_STRIKETHROUGH_COLOR = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_STRIKETHROUGH_COLOR = 19
     * }
     */
    public static int PANGO_ATTR_STRIKETHROUGH_COLOR() {
        return PANGO_ATTR_STRIKETHROUGH_COLOR;
    }
    private static final int PANGO_ATTR_ABSOLUTE_SIZE = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_ABSOLUTE_SIZE = 20
     * }
     */
    public static int PANGO_ATTR_ABSOLUTE_SIZE() {
        return PANGO_ATTR_ABSOLUTE_SIZE;
    }
    private static final int PANGO_ATTR_GRAVITY = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_GRAVITY = 21
     * }
     */
    public static int PANGO_ATTR_GRAVITY() {
        return PANGO_ATTR_GRAVITY;
    }
    private static final int PANGO_ATTR_GRAVITY_HINT = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_GRAVITY_HINT = 22
     * }
     */
    public static int PANGO_ATTR_GRAVITY_HINT() {
        return PANGO_ATTR_GRAVITY_HINT;
    }
    private static final int PANGO_ATTR_FONT_FEATURES = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_FONT_FEATURES = 23
     * }
     */
    public static int PANGO_ATTR_FONT_FEATURES() {
        return PANGO_ATTR_FONT_FEATURES;
    }
    private static final int PANGO_ATTR_FOREGROUND_ALPHA = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_FOREGROUND_ALPHA = 24
     * }
     */
    public static int PANGO_ATTR_FOREGROUND_ALPHA() {
        return PANGO_ATTR_FOREGROUND_ALPHA;
    }
    private static final int PANGO_ATTR_BACKGROUND_ALPHA = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_BACKGROUND_ALPHA = 25
     * }
     */
    public static int PANGO_ATTR_BACKGROUND_ALPHA() {
        return PANGO_ATTR_BACKGROUND_ALPHA;
    }
    private static final int PANGO_ATTR_ALLOW_BREAKS = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_ALLOW_BREAKS = 26
     * }
     */
    public static int PANGO_ATTR_ALLOW_BREAKS() {
        return PANGO_ATTR_ALLOW_BREAKS;
    }
    private static final int PANGO_ATTR_SHOW = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_SHOW = 27
     * }
     */
    public static int PANGO_ATTR_SHOW() {
        return PANGO_ATTR_SHOW;
    }
    private static final int PANGO_ATTR_INSERT_HYPHENS = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_INSERT_HYPHENS = 28
     * }
     */
    public static int PANGO_ATTR_INSERT_HYPHENS() {
        return PANGO_ATTR_INSERT_HYPHENS;
    }
    private static final int PANGO_ATTR_OVERLINE = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_OVERLINE = 29
     * }
     */
    public static int PANGO_ATTR_OVERLINE() {
        return PANGO_ATTR_OVERLINE;
    }
    private static final int PANGO_ATTR_OVERLINE_COLOR = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_OVERLINE_COLOR = 30
     * }
     */
    public static int PANGO_ATTR_OVERLINE_COLOR() {
        return PANGO_ATTR_OVERLINE_COLOR;
    }
    private static final int PANGO_ATTR_LINE_HEIGHT = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_LINE_HEIGHT = 31
     * }
     */
    public static int PANGO_ATTR_LINE_HEIGHT() {
        return PANGO_ATTR_LINE_HEIGHT;
    }
    private static final int PANGO_ATTR_ABSOLUTE_LINE_HEIGHT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_ABSOLUTE_LINE_HEIGHT = 32
     * }
     */
    public static int PANGO_ATTR_ABSOLUTE_LINE_HEIGHT() {
        return PANGO_ATTR_ABSOLUTE_LINE_HEIGHT;
    }
    private static final int PANGO_ATTR_TEXT_TRANSFORM = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_TEXT_TRANSFORM = 33
     * }
     */
    public static int PANGO_ATTR_TEXT_TRANSFORM() {
        return PANGO_ATTR_TEXT_TRANSFORM;
    }
    private static final int PANGO_ATTR_WORD = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_WORD = 34
     * }
     */
    public static int PANGO_ATTR_WORD() {
        return PANGO_ATTR_WORD;
    }
    private static final int PANGO_ATTR_SENTENCE = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_SENTENCE = 35
     * }
     */
    public static int PANGO_ATTR_SENTENCE() {
        return PANGO_ATTR_SENTENCE;
    }
    private static final int PANGO_ATTR_BASELINE_SHIFT = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_BASELINE_SHIFT = 36
     * }
     */
    public static int PANGO_ATTR_BASELINE_SHIFT() {
        return PANGO_ATTR_BASELINE_SHIFT;
    }
    private static final int PANGO_ATTR_FONT_SCALE = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ATTR_FONT_SCALE = 37
     * }
     */
    public static int PANGO_ATTR_FONT_SCALE() {
        return PANGO_ATTR_FONT_SCALE;
    }
    private static final int PANGO_UNDERLINE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_UNDERLINE_NONE = 0
     * }
     */
    public static int PANGO_UNDERLINE_NONE() {
        return PANGO_UNDERLINE_NONE;
    }
    private static final int PANGO_UNDERLINE_SINGLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_UNDERLINE_SINGLE = 1
     * }
     */
    public static int PANGO_UNDERLINE_SINGLE() {
        return PANGO_UNDERLINE_SINGLE;
    }
    private static final int PANGO_UNDERLINE_DOUBLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_UNDERLINE_DOUBLE = 2
     * }
     */
    public static int PANGO_UNDERLINE_DOUBLE() {
        return PANGO_UNDERLINE_DOUBLE;
    }
    private static final int PANGO_UNDERLINE_LOW = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_UNDERLINE_LOW = 3
     * }
     */
    public static int PANGO_UNDERLINE_LOW() {
        return PANGO_UNDERLINE_LOW;
    }
    private static final int PANGO_UNDERLINE_ERROR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_UNDERLINE_ERROR = 4
     * }
     */
    public static int PANGO_UNDERLINE_ERROR() {
        return PANGO_UNDERLINE_ERROR;
    }
    private static final int PANGO_UNDERLINE_SINGLE_LINE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_UNDERLINE_SINGLE_LINE = 5
     * }
     */
    public static int PANGO_UNDERLINE_SINGLE_LINE() {
        return PANGO_UNDERLINE_SINGLE_LINE;
    }
    private static final int PANGO_UNDERLINE_DOUBLE_LINE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_UNDERLINE_DOUBLE_LINE = 6
     * }
     */
    public static int PANGO_UNDERLINE_DOUBLE_LINE() {
        return PANGO_UNDERLINE_DOUBLE_LINE;
    }
    private static final int PANGO_UNDERLINE_ERROR_LINE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_UNDERLINE_ERROR_LINE = 7
     * }
     */
    public static int PANGO_UNDERLINE_ERROR_LINE() {
        return PANGO_UNDERLINE_ERROR_LINE;
    }
    private static final int PANGO_OVERLINE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_OVERLINE_NONE = 0
     * }
     */
    public static int PANGO_OVERLINE_NONE() {
        return PANGO_OVERLINE_NONE;
    }
    private static final int PANGO_OVERLINE_SINGLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_OVERLINE_SINGLE = 1
     * }
     */
    public static int PANGO_OVERLINE_SINGLE() {
        return PANGO_OVERLINE_SINGLE;
    }
    private static final int PANGO_SHOW_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SHOW_NONE = 0
     * }
     */
    public static int PANGO_SHOW_NONE() {
        return PANGO_SHOW_NONE;
    }
    private static final int PANGO_SHOW_SPACES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SHOW_SPACES = 1
     * }
     */
    public static int PANGO_SHOW_SPACES() {
        return PANGO_SHOW_SPACES;
    }
    private static final int PANGO_SHOW_LINE_BREAKS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SHOW_LINE_BREAKS = 2
     * }
     */
    public static int PANGO_SHOW_LINE_BREAKS() {
        return PANGO_SHOW_LINE_BREAKS;
    }
    private static final int PANGO_SHOW_IGNORABLES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SHOW_IGNORABLES = 4
     * }
     */
    public static int PANGO_SHOW_IGNORABLES() {
        return PANGO_SHOW_IGNORABLES;
    }
    private static final int PANGO_TEXT_TRANSFORM_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_TEXT_TRANSFORM_NONE = 0
     * }
     */
    public static int PANGO_TEXT_TRANSFORM_NONE() {
        return PANGO_TEXT_TRANSFORM_NONE;
    }
    private static final int PANGO_TEXT_TRANSFORM_LOWERCASE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_TEXT_TRANSFORM_LOWERCASE = 1
     * }
     */
    public static int PANGO_TEXT_TRANSFORM_LOWERCASE() {
        return PANGO_TEXT_TRANSFORM_LOWERCASE;
    }
    private static final int PANGO_TEXT_TRANSFORM_UPPERCASE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_TEXT_TRANSFORM_UPPERCASE = 2
     * }
     */
    public static int PANGO_TEXT_TRANSFORM_UPPERCASE() {
        return PANGO_TEXT_TRANSFORM_UPPERCASE;
    }
    private static final int PANGO_TEXT_TRANSFORM_CAPITALIZE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_TEXT_TRANSFORM_CAPITALIZE = 3
     * }
     */
    public static int PANGO_TEXT_TRANSFORM_CAPITALIZE() {
        return PANGO_TEXT_TRANSFORM_CAPITALIZE;
    }
    private static final int PANGO_BASELINE_SHIFT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BASELINE_SHIFT_NONE = 0
     * }
     */
    public static int PANGO_BASELINE_SHIFT_NONE() {
        return PANGO_BASELINE_SHIFT_NONE;
    }
    private static final int PANGO_BASELINE_SHIFT_SUPERSCRIPT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BASELINE_SHIFT_SUPERSCRIPT = 1
     * }
     */
    public static int PANGO_BASELINE_SHIFT_SUPERSCRIPT() {
        return PANGO_BASELINE_SHIFT_SUPERSCRIPT;
    }
    private static final int PANGO_BASELINE_SHIFT_SUBSCRIPT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_BASELINE_SHIFT_SUBSCRIPT = 2
     * }
     */
    public static int PANGO_BASELINE_SHIFT_SUBSCRIPT() {
        return PANGO_BASELINE_SHIFT_SUBSCRIPT;
    }
    private static final int PANGO_FONT_SCALE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_SCALE_NONE = 0
     * }
     */
    public static int PANGO_FONT_SCALE_NONE() {
        return PANGO_FONT_SCALE_NONE;
    }
    private static final int PANGO_FONT_SCALE_SUPERSCRIPT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_SCALE_SUPERSCRIPT = 1
     * }
     */
    public static int PANGO_FONT_SCALE_SUPERSCRIPT() {
        return PANGO_FONT_SCALE_SUPERSCRIPT;
    }
    private static final int PANGO_FONT_SCALE_SUBSCRIPT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_SCALE_SUBSCRIPT = 2
     * }
     */
    public static int PANGO_FONT_SCALE_SUBSCRIPT() {
        return PANGO_FONT_SCALE_SUBSCRIPT;
    }
    private static final int PANGO_FONT_SCALE_SMALL_CAPS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_FONT_SCALE_SMALL_CAPS = 3
     * }
     */
    public static int PANGO_FONT_SCALE_SMALL_CAPS() {
        return PANGO_FONT_SCALE_SMALL_CAPS;
    }

    private static class pango_attribute_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_attribute_get_type()
     * }
     */
    public static FunctionDescriptor pango_attribute_get_type$descriptor() {
        return pango_attribute_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_attribute_get_type()
     * }
     */
    public static MethodHandle pango_attribute_get_type$handle() {
        return pango_attribute_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_attribute_get_type()
     * }
     */
    public static long pango_attribute_get_type() {
        var mh$ = pango_attribute_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_type_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_type_register"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrType pango_attr_type_register(const char *name)
     * }
     */
    public static FunctionDescriptor pango_attr_type_register$descriptor() {
        return pango_attr_type_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrType pango_attr_type_register(const char *name)
     * }
     */
    public static MethodHandle pango_attr_type_register$handle() {
        return pango_attr_type_register.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrType pango_attr_type_register(const char *name)
     * }
     */
    public static int pango_attr_type_register(MemorySegment name) {
        var mh$ = pango_attr_type_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_type_register", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_type_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_type_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *pango_attr_type_get_name(PangoAttrType type)
     * }
     */
    public static FunctionDescriptor pango_attr_type_get_name$descriptor() {
        return pango_attr_type_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *pango_attr_type_get_name(PangoAttrType type)
     * }
     */
    public static MethodHandle pango_attr_type_get_name$handle() {
        return pango_attr_type_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *pango_attr_type_get_name(PangoAttrType type)
     * }
     */
    public static MemorySegment pango_attr_type_get_name(int type) {
        var mh$ = pango_attr_type_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_type_get_name", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attribute_init(PangoAttribute *attr, const PangoAttrClass *klass)
     * }
     */
    public static FunctionDescriptor pango_attribute_init$descriptor() {
        return pango_attribute_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attribute_init(PangoAttribute *attr, const PangoAttrClass *klass)
     * }
     */
    public static MethodHandle pango_attribute_init$handle() {
        return pango_attribute_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attribute_init(PangoAttribute *attr, const PangoAttrClass *klass)
     * }
     */
    public static void pango_attribute_init(MemorySegment attr, MemorySegment klass) {
        var mh$ = pango_attribute_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_init", attr, klass);
            }
            mh$.invokeExact(attr, klass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attribute_copy(const PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_copy$descriptor() {
        return pango_attribute_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attribute_copy(const PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_copy$handle() {
        return pango_attribute_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attribute_copy(const PangoAttribute *attr)
     * }
     */
    public static MemorySegment pango_attribute_copy(MemorySegment attr) {
        var mh$ = pango_attribute_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_copy", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attribute_destroy(PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_destroy$descriptor() {
        return pango_attribute_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attribute_destroy(PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_destroy$handle() {
        return pango_attribute_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attribute_destroy(PangoAttribute *attr)
     * }
     */
    public static void pango_attribute_destroy(MemorySegment attr) {
        var mh$ = pango_attribute_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_destroy", attr);
            }
            mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_attribute_equal(const PangoAttribute *attr1, const PangoAttribute *attr2)
     * }
     */
    public static FunctionDescriptor pango_attribute_equal$descriptor() {
        return pango_attribute_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_attribute_equal(const PangoAttribute *attr1, const PangoAttribute *attr2)
     * }
     */
    public static MethodHandle pango_attribute_equal$handle() {
        return pango_attribute_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_attribute_equal(const PangoAttribute *attr1, const PangoAttribute *attr2)
     * }
     */
    public static int pango_attribute_equal(MemorySegment attr1, MemorySegment attr2) {
        var mh$ = pango_attribute_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_equal", attr1, attr2);
            }
            return (int)mh$.invokeExact(attr1, attr2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_language_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_language_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_language_new(PangoLanguage *language)
     * }
     */
    public static FunctionDescriptor pango_attr_language_new$descriptor() {
        return pango_attr_language_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_language_new(PangoLanguage *language)
     * }
     */
    public static MethodHandle pango_attr_language_new$handle() {
        return pango_attr_language_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_language_new(PangoLanguage *language)
     * }
     */
    public static MemorySegment pango_attr_language_new(MemorySegment language) {
        var mh$ = pango_attr_language_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_language_new", language);
            }
            return (MemorySegment)mh$.invokeExact(language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_family_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_family_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_family_new(const char *family)
     * }
     */
    public static FunctionDescriptor pango_attr_family_new$descriptor() {
        return pango_attr_family_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_family_new(const char *family)
     * }
     */
    public static MethodHandle pango_attr_family_new$handle() {
        return pango_attr_family_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_family_new(const char *family)
     * }
     */
    public static MemorySegment pango_attr_family_new(MemorySegment family) {
        var mh$ = pango_attr_family_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_family_new", family);
            }
            return (MemorySegment)mh$.invokeExact(family);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_foreground_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_foreground_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_foreground_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static FunctionDescriptor pango_attr_foreground_new$descriptor() {
        return pango_attr_foreground_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_foreground_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static MethodHandle pango_attr_foreground_new$handle() {
        return pango_attr_foreground_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_foreground_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static MemorySegment pango_attr_foreground_new(short red, short green, short blue) {
        var mh$ = pango_attr_foreground_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_foreground_new", red, green, blue);
            }
            return (MemorySegment)mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_background_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_background_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_background_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static FunctionDescriptor pango_attr_background_new$descriptor() {
        return pango_attr_background_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_background_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static MethodHandle pango_attr_background_new$handle() {
        return pango_attr_background_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_background_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static MemorySegment pango_attr_background_new(short red, short green, short blue) {
        var mh$ = pango_attr_background_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_background_new", red, green, blue);
            }
            return (MemorySegment)mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_size_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_size_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_size_new(int size)
     * }
     */
    public static FunctionDescriptor pango_attr_size_new$descriptor() {
        return pango_attr_size_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_size_new(int size)
     * }
     */
    public static MethodHandle pango_attr_size_new$handle() {
        return pango_attr_size_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_size_new(int size)
     * }
     */
    public static MemorySegment pango_attr_size_new(int size) {
        var mh$ = pango_attr_size_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_size_new", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_size_new_absolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_size_new_absolute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_size_new_absolute(int size)
     * }
     */
    public static FunctionDescriptor pango_attr_size_new_absolute$descriptor() {
        return pango_attr_size_new_absolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_size_new_absolute(int size)
     * }
     */
    public static MethodHandle pango_attr_size_new_absolute$handle() {
        return pango_attr_size_new_absolute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_size_new_absolute(int size)
     * }
     */
    public static MemorySegment pango_attr_size_new_absolute(int size) {
        var mh$ = pango_attr_size_new_absolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_size_new_absolute", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_style_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_style_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_style_new(PangoStyle style)
     * }
     */
    public static FunctionDescriptor pango_attr_style_new$descriptor() {
        return pango_attr_style_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_style_new(PangoStyle style)
     * }
     */
    public static MethodHandle pango_attr_style_new$handle() {
        return pango_attr_style_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_style_new(PangoStyle style)
     * }
     */
    public static MemorySegment pango_attr_style_new(int style) {
        var mh$ = pango_attr_style_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_style_new", style);
            }
            return (MemorySegment)mh$.invokeExact(style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_weight_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_weight_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_weight_new(PangoWeight weight)
     * }
     */
    public static FunctionDescriptor pango_attr_weight_new$descriptor() {
        return pango_attr_weight_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_weight_new(PangoWeight weight)
     * }
     */
    public static MethodHandle pango_attr_weight_new$handle() {
        return pango_attr_weight_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_weight_new(PangoWeight weight)
     * }
     */
    public static MemorySegment pango_attr_weight_new(int weight) {
        var mh$ = pango_attr_weight_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_weight_new", weight);
            }
            return (MemorySegment)mh$.invokeExact(weight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_variant_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_variant_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_variant_new(PangoVariant variant)
     * }
     */
    public static FunctionDescriptor pango_attr_variant_new$descriptor() {
        return pango_attr_variant_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_variant_new(PangoVariant variant)
     * }
     */
    public static MethodHandle pango_attr_variant_new$handle() {
        return pango_attr_variant_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_variant_new(PangoVariant variant)
     * }
     */
    public static MemorySegment pango_attr_variant_new(int variant) {
        var mh$ = pango_attr_variant_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_variant_new", variant);
            }
            return (MemorySegment)mh$.invokeExact(variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_stretch_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_stretch_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_stretch_new(PangoStretch stretch)
     * }
     */
    public static FunctionDescriptor pango_attr_stretch_new$descriptor() {
        return pango_attr_stretch_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_stretch_new(PangoStretch stretch)
     * }
     */
    public static MethodHandle pango_attr_stretch_new$handle() {
        return pango_attr_stretch_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_stretch_new(PangoStretch stretch)
     * }
     */
    public static MemorySegment pango_attr_stretch_new(int stretch) {
        var mh$ = pango_attr_stretch_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_stretch_new", stretch);
            }
            return (MemorySegment)mh$.invokeExact(stretch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_font_desc_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_font_desc_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_font_desc_new(const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_attr_font_desc_new$descriptor() {
        return pango_attr_font_desc_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_font_desc_new(const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_attr_font_desc_new$handle() {
        return pango_attr_font_desc_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_font_desc_new(const PangoFontDescription *desc)
     * }
     */
    public static MemorySegment pango_attr_font_desc_new(MemorySegment desc) {
        var mh$ = pango_attr_font_desc_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_font_desc_new", desc);
            }
            return (MemorySegment)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_underline_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_underline_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_underline_new(PangoUnderline underline)
     * }
     */
    public static FunctionDescriptor pango_attr_underline_new$descriptor() {
        return pango_attr_underline_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_underline_new(PangoUnderline underline)
     * }
     */
    public static MethodHandle pango_attr_underline_new$handle() {
        return pango_attr_underline_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_underline_new(PangoUnderline underline)
     * }
     */
    public static MemorySegment pango_attr_underline_new(int underline) {
        var mh$ = pango_attr_underline_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_underline_new", underline);
            }
            return (MemorySegment)mh$.invokeExact(underline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_underline_color_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_underline_color_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_underline_color_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static FunctionDescriptor pango_attr_underline_color_new$descriptor() {
        return pango_attr_underline_color_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_underline_color_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static MethodHandle pango_attr_underline_color_new$handle() {
        return pango_attr_underline_color_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_underline_color_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static MemorySegment pango_attr_underline_color_new(short red, short green, short blue) {
        var mh$ = pango_attr_underline_color_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_underline_color_new", red, green, blue);
            }
            return (MemorySegment)mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_strikethrough_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_strikethrough_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_strikethrough_new(gboolean strikethrough)
     * }
     */
    public static FunctionDescriptor pango_attr_strikethrough_new$descriptor() {
        return pango_attr_strikethrough_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_strikethrough_new(gboolean strikethrough)
     * }
     */
    public static MethodHandle pango_attr_strikethrough_new$handle() {
        return pango_attr_strikethrough_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_strikethrough_new(gboolean strikethrough)
     * }
     */
    public static MemorySegment pango_attr_strikethrough_new(int strikethrough) {
        var mh$ = pango_attr_strikethrough_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_strikethrough_new", strikethrough);
            }
            return (MemorySegment)mh$.invokeExact(strikethrough);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_strikethrough_color_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_strikethrough_color_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_strikethrough_color_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static FunctionDescriptor pango_attr_strikethrough_color_new$descriptor() {
        return pango_attr_strikethrough_color_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_strikethrough_color_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static MethodHandle pango_attr_strikethrough_color_new$handle() {
        return pango_attr_strikethrough_color_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_strikethrough_color_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static MemorySegment pango_attr_strikethrough_color_new(short red, short green, short blue) {
        var mh$ = pango_attr_strikethrough_color_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_strikethrough_color_new", red, green, blue);
            }
            return (MemorySegment)mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_rise_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_rise_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_rise_new(int rise)
     * }
     */
    public static FunctionDescriptor pango_attr_rise_new$descriptor() {
        return pango_attr_rise_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_rise_new(int rise)
     * }
     */
    public static MethodHandle pango_attr_rise_new$handle() {
        return pango_attr_rise_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_rise_new(int rise)
     * }
     */
    public static MemorySegment pango_attr_rise_new(int rise) {
        var mh$ = pango_attr_rise_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_rise_new", rise);
            }
            return (MemorySegment)mh$.invokeExact(rise);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_baseline_shift_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_baseline_shift_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_baseline_shift_new(int shift)
     * }
     */
    public static FunctionDescriptor pango_attr_baseline_shift_new$descriptor() {
        return pango_attr_baseline_shift_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_baseline_shift_new(int shift)
     * }
     */
    public static MethodHandle pango_attr_baseline_shift_new$handle() {
        return pango_attr_baseline_shift_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_baseline_shift_new(int shift)
     * }
     */
    public static MemorySegment pango_attr_baseline_shift_new(int shift) {
        var mh$ = pango_attr_baseline_shift_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_baseline_shift_new", shift);
            }
            return (MemorySegment)mh$.invokeExact(shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_font_scale_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_font_scale_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_font_scale_new(PangoFontScale scale)
     * }
     */
    public static FunctionDescriptor pango_attr_font_scale_new$descriptor() {
        return pango_attr_font_scale_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_font_scale_new(PangoFontScale scale)
     * }
     */
    public static MethodHandle pango_attr_font_scale_new$handle() {
        return pango_attr_font_scale_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_font_scale_new(PangoFontScale scale)
     * }
     */
    public static MemorySegment pango_attr_font_scale_new(int scale) {
        var mh$ = pango_attr_font_scale_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_font_scale_new", scale);
            }
            return (MemorySegment)mh$.invokeExact(scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_scale_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_scale_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_scale_new(double scale_factor)
     * }
     */
    public static FunctionDescriptor pango_attr_scale_new$descriptor() {
        return pango_attr_scale_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_scale_new(double scale_factor)
     * }
     */
    public static MethodHandle pango_attr_scale_new$handle() {
        return pango_attr_scale_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_scale_new(double scale_factor)
     * }
     */
    public static MemorySegment pango_attr_scale_new(double scale_factor) {
        var mh$ = pango_attr_scale_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_scale_new", scale_factor);
            }
            return (MemorySegment)mh$.invokeExact(scale_factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_fallback_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_fallback_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_fallback_new(gboolean enable_fallback)
     * }
     */
    public static FunctionDescriptor pango_attr_fallback_new$descriptor() {
        return pango_attr_fallback_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_fallback_new(gboolean enable_fallback)
     * }
     */
    public static MethodHandle pango_attr_fallback_new$handle() {
        return pango_attr_fallback_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_fallback_new(gboolean enable_fallback)
     * }
     */
    public static MemorySegment pango_attr_fallback_new(int enable_fallback) {
        var mh$ = pango_attr_fallback_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_fallback_new", enable_fallback);
            }
            return (MemorySegment)mh$.invokeExact(enable_fallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_letter_spacing_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_letter_spacing_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_letter_spacing_new(int letter_spacing)
     * }
     */
    public static FunctionDescriptor pango_attr_letter_spacing_new$descriptor() {
        return pango_attr_letter_spacing_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_letter_spacing_new(int letter_spacing)
     * }
     */
    public static MethodHandle pango_attr_letter_spacing_new$handle() {
        return pango_attr_letter_spacing_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_letter_spacing_new(int letter_spacing)
     * }
     */
    public static MemorySegment pango_attr_letter_spacing_new(int letter_spacing) {
        var mh$ = pango_attr_letter_spacing_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_letter_spacing_new", letter_spacing);
            }
            return (MemorySegment)mh$.invokeExact(letter_spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_shape_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_shape_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_shape_new(const PangoRectangle *ink_rect, const PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_attr_shape_new$descriptor() {
        return pango_attr_shape_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_shape_new(const PangoRectangle *ink_rect, const PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_attr_shape_new$handle() {
        return pango_attr_shape_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_shape_new(const PangoRectangle *ink_rect, const PangoRectangle *logical_rect)
     * }
     */
    public static MemorySegment pango_attr_shape_new(MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_attr_shape_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_shape_new", ink_rect, logical_rect);
            }
            return (MemorySegment)mh$.invokeExact(ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_shape_new_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_shape_new_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_shape_new_with_data(const PangoRectangle *ink_rect, const PangoRectangle *logical_rect, gpointer data, PangoAttrDataCopyFunc copy_func, GDestroyNotify destroy_func)
     * }
     */
    public static FunctionDescriptor pango_attr_shape_new_with_data$descriptor() {
        return pango_attr_shape_new_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_shape_new_with_data(const PangoRectangle *ink_rect, const PangoRectangle *logical_rect, gpointer data, PangoAttrDataCopyFunc copy_func, GDestroyNotify destroy_func)
     * }
     */
    public static MethodHandle pango_attr_shape_new_with_data$handle() {
        return pango_attr_shape_new_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_shape_new_with_data(const PangoRectangle *ink_rect, const PangoRectangle *logical_rect, gpointer data, PangoAttrDataCopyFunc copy_func, GDestroyNotify destroy_func)
     * }
     */
    public static MemorySegment pango_attr_shape_new_with_data(MemorySegment ink_rect, MemorySegment logical_rect, MemorySegment data, MemorySegment copy_func, MemorySegment destroy_func) {
        var mh$ = pango_attr_shape_new_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_shape_new_with_data", ink_rect, logical_rect, data, copy_func, destroy_func);
            }
            return (MemorySegment)mh$.invokeExact(ink_rect, logical_rect, data, copy_func, destroy_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_gravity_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_gravity_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_gravity_new(PangoGravity gravity)
     * }
     */
    public static FunctionDescriptor pango_attr_gravity_new$descriptor() {
        return pango_attr_gravity_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_gravity_new(PangoGravity gravity)
     * }
     */
    public static MethodHandle pango_attr_gravity_new$handle() {
        return pango_attr_gravity_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_gravity_new(PangoGravity gravity)
     * }
     */
    public static MemorySegment pango_attr_gravity_new(int gravity) {
        var mh$ = pango_attr_gravity_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_gravity_new", gravity);
            }
            return (MemorySegment)mh$.invokeExact(gravity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_gravity_hint_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_gravity_hint_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_gravity_hint_new(PangoGravityHint hint)
     * }
     */
    public static FunctionDescriptor pango_attr_gravity_hint_new$descriptor() {
        return pango_attr_gravity_hint_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_gravity_hint_new(PangoGravityHint hint)
     * }
     */
    public static MethodHandle pango_attr_gravity_hint_new$handle() {
        return pango_attr_gravity_hint_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_gravity_hint_new(PangoGravityHint hint)
     * }
     */
    public static MemorySegment pango_attr_gravity_hint_new(int hint) {
        var mh$ = pango_attr_gravity_hint_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_gravity_hint_new", hint);
            }
            return (MemorySegment)mh$.invokeExact(hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_font_features_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_font_features_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_font_features_new(const char *features)
     * }
     */
    public static FunctionDescriptor pango_attr_font_features_new$descriptor() {
        return pango_attr_font_features_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_font_features_new(const char *features)
     * }
     */
    public static MethodHandle pango_attr_font_features_new$handle() {
        return pango_attr_font_features_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_font_features_new(const char *features)
     * }
     */
    public static MemorySegment pango_attr_font_features_new(MemorySegment features) {
        var mh$ = pango_attr_font_features_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_font_features_new", features);
            }
            return (MemorySegment)mh$.invokeExact(features);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_foreground_alpha_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_foreground_alpha_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_foreground_alpha_new(guint16 alpha)
     * }
     */
    public static FunctionDescriptor pango_attr_foreground_alpha_new$descriptor() {
        return pango_attr_foreground_alpha_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_foreground_alpha_new(guint16 alpha)
     * }
     */
    public static MethodHandle pango_attr_foreground_alpha_new$handle() {
        return pango_attr_foreground_alpha_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_foreground_alpha_new(guint16 alpha)
     * }
     */
    public static MemorySegment pango_attr_foreground_alpha_new(short alpha) {
        var mh$ = pango_attr_foreground_alpha_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_foreground_alpha_new", alpha);
            }
            return (MemorySegment)mh$.invokeExact(alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_background_alpha_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_background_alpha_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_background_alpha_new(guint16 alpha)
     * }
     */
    public static FunctionDescriptor pango_attr_background_alpha_new$descriptor() {
        return pango_attr_background_alpha_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_background_alpha_new(guint16 alpha)
     * }
     */
    public static MethodHandle pango_attr_background_alpha_new$handle() {
        return pango_attr_background_alpha_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_background_alpha_new(guint16 alpha)
     * }
     */
    public static MemorySegment pango_attr_background_alpha_new(short alpha) {
        var mh$ = pango_attr_background_alpha_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_background_alpha_new", alpha);
            }
            return (MemorySegment)mh$.invokeExact(alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_allow_breaks_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_allow_breaks_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_allow_breaks_new(gboolean allow_breaks)
     * }
     */
    public static FunctionDescriptor pango_attr_allow_breaks_new$descriptor() {
        return pango_attr_allow_breaks_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_allow_breaks_new(gboolean allow_breaks)
     * }
     */
    public static MethodHandle pango_attr_allow_breaks_new$handle() {
        return pango_attr_allow_breaks_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_allow_breaks_new(gboolean allow_breaks)
     * }
     */
    public static MemorySegment pango_attr_allow_breaks_new(int allow_breaks) {
        var mh$ = pango_attr_allow_breaks_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_allow_breaks_new", allow_breaks);
            }
            return (MemorySegment)mh$.invokeExact(allow_breaks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_word_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_word_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_word_new()
     * }
     */
    public static FunctionDescriptor pango_attr_word_new$descriptor() {
        return pango_attr_word_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_word_new()
     * }
     */
    public static MethodHandle pango_attr_word_new$handle() {
        return pango_attr_word_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_word_new()
     * }
     */
    public static MemorySegment pango_attr_word_new() {
        var mh$ = pango_attr_word_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_word_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_sentence_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_sentence_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_sentence_new()
     * }
     */
    public static FunctionDescriptor pango_attr_sentence_new$descriptor() {
        return pango_attr_sentence_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_sentence_new()
     * }
     */
    public static MethodHandle pango_attr_sentence_new$handle() {
        return pango_attr_sentence_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_sentence_new()
     * }
     */
    public static MemorySegment pango_attr_sentence_new() {
        var mh$ = pango_attr_sentence_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_sentence_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_insert_hyphens_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_insert_hyphens_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_insert_hyphens_new(gboolean insert_hyphens)
     * }
     */
    public static FunctionDescriptor pango_attr_insert_hyphens_new$descriptor() {
        return pango_attr_insert_hyphens_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_insert_hyphens_new(gboolean insert_hyphens)
     * }
     */
    public static MethodHandle pango_attr_insert_hyphens_new$handle() {
        return pango_attr_insert_hyphens_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_insert_hyphens_new(gboolean insert_hyphens)
     * }
     */
    public static MemorySegment pango_attr_insert_hyphens_new(int insert_hyphens) {
        var mh$ = pango_attr_insert_hyphens_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_insert_hyphens_new", insert_hyphens);
            }
            return (MemorySegment)mh$.invokeExact(insert_hyphens);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_overline_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_overline_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_overline_new(PangoOverline overline)
     * }
     */
    public static FunctionDescriptor pango_attr_overline_new$descriptor() {
        return pango_attr_overline_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_overline_new(PangoOverline overline)
     * }
     */
    public static MethodHandle pango_attr_overline_new$handle() {
        return pango_attr_overline_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_overline_new(PangoOverline overline)
     * }
     */
    public static MemorySegment pango_attr_overline_new(int overline) {
        var mh$ = pango_attr_overline_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_overline_new", overline);
            }
            return (MemorySegment)mh$.invokeExact(overline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_overline_color_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_overline_color_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_overline_color_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static FunctionDescriptor pango_attr_overline_color_new$descriptor() {
        return pango_attr_overline_color_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_overline_color_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static MethodHandle pango_attr_overline_color_new$handle() {
        return pango_attr_overline_color_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_overline_color_new(guint16 red, guint16 green, guint16 blue)
     * }
     */
    public static MemorySegment pango_attr_overline_color_new(short red, short green, short blue) {
        var mh$ = pango_attr_overline_color_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_overline_color_new", red, green, blue);
            }
            return (MemorySegment)mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_show_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_show_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_show_new(PangoShowFlags flags)
     * }
     */
    public static FunctionDescriptor pango_attr_show_new$descriptor() {
        return pango_attr_show_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_show_new(PangoShowFlags flags)
     * }
     */
    public static MethodHandle pango_attr_show_new$handle() {
        return pango_attr_show_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_show_new(PangoShowFlags flags)
     * }
     */
    public static MemorySegment pango_attr_show_new(int flags) {
        var mh$ = pango_attr_show_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_show_new", flags);
            }
            return (MemorySegment)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_line_height_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_line_height_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_line_height_new(double factor)
     * }
     */
    public static FunctionDescriptor pango_attr_line_height_new$descriptor() {
        return pango_attr_line_height_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_line_height_new(double factor)
     * }
     */
    public static MethodHandle pango_attr_line_height_new$handle() {
        return pango_attr_line_height_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_line_height_new(double factor)
     * }
     */
    public static MemorySegment pango_attr_line_height_new(double factor) {
        var mh$ = pango_attr_line_height_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_line_height_new", factor);
            }
            return (MemorySegment)mh$.invokeExact(factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_line_height_new_absolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_line_height_new_absolute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_line_height_new_absolute(int height)
     * }
     */
    public static FunctionDescriptor pango_attr_line_height_new_absolute$descriptor() {
        return pango_attr_line_height_new_absolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_line_height_new_absolute(int height)
     * }
     */
    public static MethodHandle pango_attr_line_height_new_absolute$handle() {
        return pango_attr_line_height_new_absolute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_line_height_new_absolute(int height)
     * }
     */
    public static MemorySegment pango_attr_line_height_new_absolute(int height) {
        var mh$ = pango_attr_line_height_new_absolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_line_height_new_absolute", height);
            }
            return (MemorySegment)mh$.invokeExact(height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_text_transform_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_text_transform_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_text_transform_new(PangoTextTransform transform)
     * }
     */
    public static FunctionDescriptor pango_attr_text_transform_new$descriptor() {
        return pango_attr_text_transform_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_text_transform_new(PangoTextTransform transform)
     * }
     */
    public static MethodHandle pango_attr_text_transform_new$handle() {
        return pango_attr_text_transform_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_text_transform_new(PangoTextTransform transform)
     * }
     */
    public static MemorySegment pango_attr_text_transform_new(int transform) {
        var mh$ = pango_attr_text_transform_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_text_transform_new", transform);
            }
            return (MemorySegment)mh$.invokeExact(transform);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_as_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_as_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrString *pango_attribute_as_string(PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_as_string$descriptor() {
        return pango_attribute_as_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrString *pango_attribute_as_string(PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_as_string$handle() {
        return pango_attribute_as_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrString *pango_attribute_as_string(PangoAttribute *attr)
     * }
     */
    public static MemorySegment pango_attribute_as_string(MemorySegment attr) {
        var mh$ = pango_attribute_as_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_as_string", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_as_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_as_language"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrLanguage *pango_attribute_as_language(PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_as_language$descriptor() {
        return pango_attribute_as_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrLanguage *pango_attribute_as_language(PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_as_language$handle() {
        return pango_attribute_as_language.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrLanguage *pango_attribute_as_language(PangoAttribute *attr)
     * }
     */
    public static MemorySegment pango_attribute_as_language(MemorySegment attr) {
        var mh$ = pango_attribute_as_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_as_language", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_as_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_as_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrInt *pango_attribute_as_int(PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_as_int$descriptor() {
        return pango_attribute_as_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrInt *pango_attribute_as_int(PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_as_int$handle() {
        return pango_attribute_as_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrInt *pango_attribute_as_int(PangoAttribute *attr)
     * }
     */
    public static MemorySegment pango_attribute_as_int(MemorySegment attr) {
        var mh$ = pango_attribute_as_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_as_int", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_as_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_as_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrSize *pango_attribute_as_size(PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_as_size$descriptor() {
        return pango_attribute_as_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrSize *pango_attribute_as_size(PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_as_size$handle() {
        return pango_attribute_as_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrSize *pango_attribute_as_size(PangoAttribute *attr)
     * }
     */
    public static MemorySegment pango_attribute_as_size(MemorySegment attr) {
        var mh$ = pango_attribute_as_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_as_size", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_as_float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_as_float"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrFloat *pango_attribute_as_float(PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_as_float$descriptor() {
        return pango_attribute_as_float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrFloat *pango_attribute_as_float(PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_as_float$handle() {
        return pango_attribute_as_float.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrFloat *pango_attribute_as_float(PangoAttribute *attr)
     * }
     */
    public static MemorySegment pango_attribute_as_float(MemorySegment attr) {
        var mh$ = pango_attribute_as_float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_as_float", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_as_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_as_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrColor *pango_attribute_as_color(PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_as_color$descriptor() {
        return pango_attribute_as_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrColor *pango_attribute_as_color(PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_as_color$handle() {
        return pango_attribute_as_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrColor *pango_attribute_as_color(PangoAttribute *attr)
     * }
     */
    public static MemorySegment pango_attribute_as_color(MemorySegment attr) {
        var mh$ = pango_attribute_as_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_as_color", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_as_font_desc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_as_font_desc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrFontDesc *pango_attribute_as_font_desc(PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_as_font_desc$descriptor() {
        return pango_attribute_as_font_desc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrFontDesc *pango_attribute_as_font_desc(PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_as_font_desc$handle() {
        return pango_attribute_as_font_desc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrFontDesc *pango_attribute_as_font_desc(PangoAttribute *attr)
     * }
     */
    public static MemorySegment pango_attribute_as_font_desc(MemorySegment attr) {
        var mh$ = pango_attribute_as_font_desc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_as_font_desc", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_as_shape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_as_shape"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrShape *pango_attribute_as_shape(PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_as_shape$descriptor() {
        return pango_attribute_as_shape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrShape *pango_attribute_as_shape(PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_as_shape$handle() {
        return pango_attribute_as_shape.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrShape *pango_attribute_as_shape(PangoAttribute *attr)
     * }
     */
    public static MemorySegment pango_attribute_as_shape(MemorySegment attr) {
        var mh$ = pango_attribute_as_shape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_as_shape", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attribute_as_font_features {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attribute_as_font_features"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrFontFeatures *pango_attribute_as_font_features(PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attribute_as_font_features$descriptor() {
        return pango_attribute_as_font_features.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrFontFeatures *pango_attribute_as_font_features(PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attribute_as_font_features$handle() {
        return pango_attribute_as_font_features.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrFontFeatures *pango_attribute_as_font_features(PangoAttribute *attr)
     * }
     */
    public static MemorySegment pango_attribute_as_font_features(MemorySegment attr) {
        var mh$ = pango_attribute_as_font_features.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attribute_as_font_features", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_attr_list_get_type()
     * }
     */
    public static FunctionDescriptor pango_attr_list_get_type$descriptor() {
        return pango_attr_list_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_attr_list_get_type()
     * }
     */
    public static MethodHandle pango_attr_list_get_type$handle() {
        return pango_attr_list_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_attr_list_get_type()
     * }
     */
    public static long pango_attr_list_get_type() {
        var mh$ = pango_attr_list_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_new()
     * }
     */
    public static FunctionDescriptor pango_attr_list_new$descriptor() {
        return pango_attr_list_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_new()
     * }
     */
    public static MethodHandle pango_attr_list_new$handle() {
        return pango_attr_list_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_new()
     * }
     */
    public static MemorySegment pango_attr_list_new() {
        var mh$ = pango_attr_list_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_ref(PangoAttrList *list)
     * }
     */
    public static FunctionDescriptor pango_attr_list_ref$descriptor() {
        return pango_attr_list_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_ref(PangoAttrList *list)
     * }
     */
    public static MethodHandle pango_attr_list_ref$handle() {
        return pango_attr_list_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_ref(PangoAttrList *list)
     * }
     */
    public static MemorySegment pango_attr_list_ref(MemorySegment list) {
        var mh$ = pango_attr_list_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_ref", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attr_list_unref(PangoAttrList *list)
     * }
     */
    public static FunctionDescriptor pango_attr_list_unref$descriptor() {
        return pango_attr_list_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attr_list_unref(PangoAttrList *list)
     * }
     */
    public static MethodHandle pango_attr_list_unref$handle() {
        return pango_attr_list_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attr_list_unref(PangoAttrList *list)
     * }
     */
    public static void pango_attr_list_unref(MemorySegment list) {
        var mh$ = pango_attr_list_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_unref", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_copy(PangoAttrList *list)
     * }
     */
    public static FunctionDescriptor pango_attr_list_copy$descriptor() {
        return pango_attr_list_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_copy(PangoAttrList *list)
     * }
     */
    public static MethodHandle pango_attr_list_copy$handle() {
        return pango_attr_list_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_copy(PangoAttrList *list)
     * }
     */
    public static MemorySegment pango_attr_list_copy(MemorySegment list) {
        var mh$ = pango_attr_list_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_copy", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attr_list_insert(PangoAttrList *list, PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attr_list_insert$descriptor() {
        return pango_attr_list_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attr_list_insert(PangoAttrList *list, PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attr_list_insert$handle() {
        return pango_attr_list_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attr_list_insert(PangoAttrList *list, PangoAttribute *attr)
     * }
     */
    public static void pango_attr_list_insert(MemorySegment list, MemorySegment attr) {
        var mh$ = pango_attr_list_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_insert", list, attr);
            }
            mh$.invokeExact(list, attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_insert_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_insert_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attr_list_insert_before(PangoAttrList *list, PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attr_list_insert_before$descriptor() {
        return pango_attr_list_insert_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attr_list_insert_before(PangoAttrList *list, PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attr_list_insert_before$handle() {
        return pango_attr_list_insert_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attr_list_insert_before(PangoAttrList *list, PangoAttribute *attr)
     * }
     */
    public static void pango_attr_list_insert_before(MemorySegment list, MemorySegment attr) {
        var mh$ = pango_attr_list_insert_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_insert_before", list, attr);
            }
            mh$.invokeExact(list, attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_change"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attr_list_change(PangoAttrList *list, PangoAttribute *attr)
     * }
     */
    public static FunctionDescriptor pango_attr_list_change$descriptor() {
        return pango_attr_list_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attr_list_change(PangoAttrList *list, PangoAttribute *attr)
     * }
     */
    public static MethodHandle pango_attr_list_change$handle() {
        return pango_attr_list_change.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attr_list_change(PangoAttrList *list, PangoAttribute *attr)
     * }
     */
    public static void pango_attr_list_change(MemorySegment list, MemorySegment attr) {
        var mh$ = pango_attr_list_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_change", list, attr);
            }
            mh$.invokeExact(list, attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_splice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_splice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attr_list_splice(PangoAttrList *list, PangoAttrList *other, int pos, int len)
     * }
     */
    public static FunctionDescriptor pango_attr_list_splice$descriptor() {
        return pango_attr_list_splice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attr_list_splice(PangoAttrList *list, PangoAttrList *other, int pos, int len)
     * }
     */
    public static MethodHandle pango_attr_list_splice$handle() {
        return pango_attr_list_splice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attr_list_splice(PangoAttrList *list, PangoAttrList *other, int pos, int len)
     * }
     */
    public static void pango_attr_list_splice(MemorySegment list, MemorySegment other, int pos, int len) {
        var mh$ = pango_attr_list_splice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_splice", list, other, pos, len);
            }
            mh$.invokeExact(list, other, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_update"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attr_list_update(PangoAttrList *list, int pos, int remove, int add)
     * }
     */
    public static FunctionDescriptor pango_attr_list_update$descriptor() {
        return pango_attr_list_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attr_list_update(PangoAttrList *list, int pos, int remove, int add)
     * }
     */
    public static MethodHandle pango_attr_list_update$handle() {
        return pango_attr_list_update.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attr_list_update(PangoAttrList *list, int pos, int remove, int add)
     * }
     */
    public static void pango_attr_list_update(MemorySegment list, int pos, int remove, int add) {
        var mh$ = pango_attr_list_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_update", list, pos, remove, add);
            }
            mh$.invokeExact(list, pos, remove, add);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_filter(PangoAttrList *list, PangoAttrFilterFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor pango_attr_list_filter$descriptor() {
        return pango_attr_list_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_filter(PangoAttrList *list, PangoAttrFilterFunc func, gpointer data)
     * }
     */
    public static MethodHandle pango_attr_list_filter$handle() {
        return pango_attr_list_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_filter(PangoAttrList *list, PangoAttrFilterFunc func, gpointer data)
     * }
     */
    public static MemorySegment pango_attr_list_filter(MemorySegment list, MemorySegment func, MemorySegment data) {
        var mh$ = pango_attr_list_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_filter", list, func, data);
            }
            return (MemorySegment)mh$.invokeExact(list, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_get_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_get_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *pango_attr_list_get_attributes(PangoAttrList *list)
     * }
     */
    public static FunctionDescriptor pango_attr_list_get_attributes$descriptor() {
        return pango_attr_list_get_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *pango_attr_list_get_attributes(PangoAttrList *list)
     * }
     */
    public static MethodHandle pango_attr_list_get_attributes$handle() {
        return pango_attr_list_get_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *pango_attr_list_get_attributes(PangoAttrList *list)
     * }
     */
    public static MemorySegment pango_attr_list_get_attributes(MemorySegment list) {
        var mh$ = pango_attr_list_get_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_get_attributes", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_attr_list_equal(PangoAttrList *list, PangoAttrList *other_list)
     * }
     */
    public static FunctionDescriptor pango_attr_list_equal$descriptor() {
        return pango_attr_list_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_attr_list_equal(PangoAttrList *list, PangoAttrList *other_list)
     * }
     */
    public static MethodHandle pango_attr_list_equal$handle() {
        return pango_attr_list_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_attr_list_equal(PangoAttrList *list, PangoAttrList *other_list)
     * }
     */
    public static int pango_attr_list_equal(MemorySegment list, MemorySegment other_list) {
        var mh$ = pango_attr_list_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_equal", list, other_list);
            }
            return (int)mh$.invokeExact(list, other_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *pango_attr_list_to_string(PangoAttrList *list)
     * }
     */
    public static FunctionDescriptor pango_attr_list_to_string$descriptor() {
        return pango_attr_list_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *pango_attr_list_to_string(PangoAttrList *list)
     * }
     */
    public static MethodHandle pango_attr_list_to_string$handle() {
        return pango_attr_list_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *pango_attr_list_to_string(PangoAttrList *list)
     * }
     */
    public static MemorySegment pango_attr_list_to_string(MemorySegment list) {
        var mh$ = pango_attr_list_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_to_string", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_from_string(const char *text)
     * }
     */
    public static FunctionDescriptor pango_attr_list_from_string$descriptor() {
        return pango_attr_list_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_from_string(const char *text)
     * }
     */
    public static MethodHandle pango_attr_list_from_string$handle() {
        return pango_attr_list_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrList *pango_attr_list_from_string(const char *text)
     * }
     */
    public static MemorySegment pango_attr_list_from_string(MemorySegment text) {
        var mh$ = pango_attr_list_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_from_string", text);
            }
            return (MemorySegment)mh$.invokeExact(text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_iterator_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_iterator_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_attr_iterator_get_type()
     * }
     */
    public static FunctionDescriptor pango_attr_iterator_get_type$descriptor() {
        return pango_attr_iterator_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_attr_iterator_get_type()
     * }
     */
    public static MethodHandle pango_attr_iterator_get_type$handle() {
        return pango_attr_iterator_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_attr_iterator_get_type()
     * }
     */
    public static long pango_attr_iterator_get_type() {
        var mh$ = pango_attr_iterator_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_iterator_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_list_get_iterator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_list_get_iterator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrIterator *pango_attr_list_get_iterator(PangoAttrList *list)
     * }
     */
    public static FunctionDescriptor pango_attr_list_get_iterator$descriptor() {
        return pango_attr_list_get_iterator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrIterator *pango_attr_list_get_iterator(PangoAttrList *list)
     * }
     */
    public static MethodHandle pango_attr_list_get_iterator$handle() {
        return pango_attr_list_get_iterator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrIterator *pango_attr_list_get_iterator(PangoAttrList *list)
     * }
     */
    public static MemorySegment pango_attr_list_get_iterator(MemorySegment list) {
        var mh$ = pango_attr_list_get_iterator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_list_get_iterator", list);
            }
            return (MemorySegment)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_iterator_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_iterator_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attr_iterator_range(PangoAttrIterator *iterator, int *start, int *end)
     * }
     */
    public static FunctionDescriptor pango_attr_iterator_range$descriptor() {
        return pango_attr_iterator_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attr_iterator_range(PangoAttrIterator *iterator, int *start, int *end)
     * }
     */
    public static MethodHandle pango_attr_iterator_range$handle() {
        return pango_attr_iterator_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attr_iterator_range(PangoAttrIterator *iterator, int *start, int *end)
     * }
     */
    public static void pango_attr_iterator_range(MemorySegment iterator, MemorySegment start, MemorySegment end) {
        var mh$ = pango_attr_iterator_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_iterator_range", iterator, start, end);
            }
            mh$.invokeExact(iterator, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_iterator_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_iterator_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_attr_iterator_next(PangoAttrIterator *iterator)
     * }
     */
    public static FunctionDescriptor pango_attr_iterator_next$descriptor() {
        return pango_attr_iterator_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_attr_iterator_next(PangoAttrIterator *iterator)
     * }
     */
    public static MethodHandle pango_attr_iterator_next$handle() {
        return pango_attr_iterator_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_attr_iterator_next(PangoAttrIterator *iterator)
     * }
     */
    public static int pango_attr_iterator_next(MemorySegment iterator) {
        var mh$ = pango_attr_iterator_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_iterator_next", iterator);
            }
            return (int)mh$.invokeExact(iterator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_iterator_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_iterator_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrIterator *pango_attr_iterator_copy(PangoAttrIterator *iterator)
     * }
     */
    public static FunctionDescriptor pango_attr_iterator_copy$descriptor() {
        return pango_attr_iterator_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrIterator *pango_attr_iterator_copy(PangoAttrIterator *iterator)
     * }
     */
    public static MethodHandle pango_attr_iterator_copy$handle() {
        return pango_attr_iterator_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrIterator *pango_attr_iterator_copy(PangoAttrIterator *iterator)
     * }
     */
    public static MemorySegment pango_attr_iterator_copy(MemorySegment iterator) {
        var mh$ = pango_attr_iterator_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_iterator_copy", iterator);
            }
            return (MemorySegment)mh$.invokeExact(iterator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_iterator_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_iterator_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attr_iterator_destroy(PangoAttrIterator *iterator)
     * }
     */
    public static FunctionDescriptor pango_attr_iterator_destroy$descriptor() {
        return pango_attr_iterator_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attr_iterator_destroy(PangoAttrIterator *iterator)
     * }
     */
    public static MethodHandle pango_attr_iterator_destroy$handle() {
        return pango_attr_iterator_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attr_iterator_destroy(PangoAttrIterator *iterator)
     * }
     */
    public static void pango_attr_iterator_destroy(MemorySegment iterator) {
        var mh$ = pango_attr_iterator_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_iterator_destroy", iterator);
            }
            mh$.invokeExact(iterator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_iterator_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_iterator_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_iterator_get(PangoAttrIterator *iterator, PangoAttrType type)
     * }
     */
    public static FunctionDescriptor pango_attr_iterator_get$descriptor() {
        return pango_attr_iterator_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_iterator_get(PangoAttrIterator *iterator, PangoAttrType type)
     * }
     */
    public static MethodHandle pango_attr_iterator_get$handle() {
        return pango_attr_iterator_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttribute *pango_attr_iterator_get(PangoAttrIterator *iterator, PangoAttrType type)
     * }
     */
    public static MemorySegment pango_attr_iterator_get(MemorySegment iterator, int type) {
        var mh$ = pango_attr_iterator_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_iterator_get", iterator, type);
            }
            return (MemorySegment)mh$.invokeExact(iterator, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_iterator_get_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_iterator_get_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attr_iterator_get_font(PangoAttrIterator *iterator, PangoFontDescription *desc, PangoLanguage **language, GSList **extra_attrs)
     * }
     */
    public static FunctionDescriptor pango_attr_iterator_get_font$descriptor() {
        return pango_attr_iterator_get_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attr_iterator_get_font(PangoAttrIterator *iterator, PangoFontDescription *desc, PangoLanguage **language, GSList **extra_attrs)
     * }
     */
    public static MethodHandle pango_attr_iterator_get_font$handle() {
        return pango_attr_iterator_get_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attr_iterator_get_font(PangoAttrIterator *iterator, PangoFontDescription *desc, PangoLanguage **language, GSList **extra_attrs)
     * }
     */
    public static void pango_attr_iterator_get_font(MemorySegment iterator, MemorySegment desc, MemorySegment language, MemorySegment extra_attrs) {
        var mh$ = pango_attr_iterator_get_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_iterator_get_font", iterator, desc, language, extra_attrs);
            }
            mh$.invokeExact(iterator, desc, language, extra_attrs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_iterator_get_attrs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_iterator_get_attrs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *pango_attr_iterator_get_attrs(PangoAttrIterator *iterator)
     * }
     */
    public static FunctionDescriptor pango_attr_iterator_get_attrs$descriptor() {
        return pango_attr_iterator_get_attrs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *pango_attr_iterator_get_attrs(PangoAttrIterator *iterator)
     * }
     */
    public static MethodHandle pango_attr_iterator_get_attrs$handle() {
        return pango_attr_iterator_get_attrs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *pango_attr_iterator_get_attrs(PangoAttrIterator *iterator)
     * }
     */
    public static MemorySegment pango_attr_iterator_get_attrs(MemorySegment iterator) {
        var mh$ = pango_attr_iterator_get_attrs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_iterator_get_attrs", iterator);
            }
            return (MemorySegment)mh$.invokeExact(iterator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef PangoAttribute *PangoAttribute_autoptr
     * }
     */
    public static final AddressLayout PangoAttribute_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoAttribute_listautoptr
     * }
     */
    public static final AddressLayout PangoAttribute_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoAttribute_slistautoptr
     * }
     */
    public static final AddressLayout PangoAttribute_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoAttribute_queueautoptr
     * }
     */
    public static final AddressLayout PangoAttribute_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PangoAttrList *PangoAttrList_autoptr
     * }
     */
    public static final AddressLayout PangoAttrList_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoAttrList_listautoptr
     * }
     */
    public static final AddressLayout PangoAttrList_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoAttrList_slistautoptr
     * }
     */
    public static final AddressLayout PangoAttrList_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoAttrList_queueautoptr
     * }
     */
    public static final AddressLayout PangoAttrList_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PangoAttrIterator *PangoAttrIterator_autoptr
     * }
     */
    public static final AddressLayout PangoAttrIterator_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoAttrIterator_listautoptr
     * }
     */
    public static final AddressLayout PangoAttrIterator_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoAttrIterator_slistautoptr
     * }
     */
    public static final AddressLayout PangoAttrIterator_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoAttrIterator_queueautoptr
     * }
     */
    public static final AddressLayout PangoAttrIterator_queueautoptr = app_indicator_h.C_POINTER;

    private static class pango_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_item_get_type()
     * }
     */
    public static FunctionDescriptor pango_item_get_type$descriptor() {
        return pango_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_item_get_type()
     * }
     */
    public static MethodHandle pango_item_get_type$handle() {
        return pango_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_item_get_type()
     * }
     */
    public static long pango_item_get_type() {
        var mh$ = pango_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_item_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoItem *pango_item_new()
     * }
     */
    public static FunctionDescriptor pango_item_new$descriptor() {
        return pango_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoItem *pango_item_new()
     * }
     */
    public static MethodHandle pango_item_new$handle() {
        return pango_item_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoItem *pango_item_new()
     * }
     */
    public static MemorySegment pango_item_new() {
        var mh$ = pango_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_item_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_item_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_item_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoItem *pango_item_copy(PangoItem *item)
     * }
     */
    public static FunctionDescriptor pango_item_copy$descriptor() {
        return pango_item_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoItem *pango_item_copy(PangoItem *item)
     * }
     */
    public static MethodHandle pango_item_copy$handle() {
        return pango_item_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoItem *pango_item_copy(PangoItem *item)
     * }
     */
    public static MemorySegment pango_item_copy(MemorySegment item) {
        var mh$ = pango_item_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_item_copy", item);
            }
            return (MemorySegment)mh$.invokeExact(item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_item_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_item_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_item_free(PangoItem *item)
     * }
     */
    public static FunctionDescriptor pango_item_free$descriptor() {
        return pango_item_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_item_free(PangoItem *item)
     * }
     */
    public static MethodHandle pango_item_free$handle() {
        return pango_item_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_item_free(PangoItem *item)
     * }
     */
    public static void pango_item_free(MemorySegment item) {
        var mh$ = pango_item_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_item_free", item);
            }
            mh$.invokeExact(item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_item_split {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_item_split"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoItem *pango_item_split(PangoItem *orig, int split_index, int split_offset)
     * }
     */
    public static FunctionDescriptor pango_item_split$descriptor() {
        return pango_item_split.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoItem *pango_item_split(PangoItem *orig, int split_index, int split_offset)
     * }
     */
    public static MethodHandle pango_item_split$handle() {
        return pango_item_split.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoItem *pango_item_split(PangoItem *orig, int split_index, int split_offset)
     * }
     */
    public static MemorySegment pango_item_split(MemorySegment orig, int split_index, int split_offset) {
        var mh$ = pango_item_split.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_item_split", orig, split_index, split_offset);
            }
            return (MemorySegment)mh$.invokeExact(orig, split_index, split_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_item_apply_attrs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_item_apply_attrs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_item_apply_attrs(PangoItem *item, PangoAttrIterator *iter)
     * }
     */
    public static FunctionDescriptor pango_item_apply_attrs$descriptor() {
        return pango_item_apply_attrs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_item_apply_attrs(PangoItem *item, PangoAttrIterator *iter)
     * }
     */
    public static MethodHandle pango_item_apply_attrs$handle() {
        return pango_item_apply_attrs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_item_apply_attrs(PangoItem *item, PangoAttrIterator *iter)
     * }
     */
    public static void pango_item_apply_attrs(MemorySegment item, MemorySegment iter) {
        var mh$ = pango_item_apply_attrs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_item_apply_attrs", item, iter);
            }
            mh$.invokeExact(item, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_reorder_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_reorder_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *pango_reorder_items(GList *items)
     * }
     */
    public static FunctionDescriptor pango_reorder_items$descriptor() {
        return pango_reorder_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *pango_reorder_items(GList *items)
     * }
     */
    public static MethodHandle pango_reorder_items$handle() {
        return pango_reorder_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *pango_reorder_items(GList *items)
     * }
     */
    public static MemorySegment pango_reorder_items(MemorySegment items) {
        var mh$ = pango_reorder_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_reorder_items", items);
            }
            return (MemorySegment)mh$.invokeExact(items);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_itemize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_itemize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *pango_itemize(PangoContext *context, const char *text, int start_index, int length, PangoAttrList *attrs, PangoAttrIterator *cached_iter)
     * }
     */
    public static FunctionDescriptor pango_itemize$descriptor() {
        return pango_itemize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *pango_itemize(PangoContext *context, const char *text, int start_index, int length, PangoAttrList *attrs, PangoAttrIterator *cached_iter)
     * }
     */
    public static MethodHandle pango_itemize$handle() {
        return pango_itemize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *pango_itemize(PangoContext *context, const char *text, int start_index, int length, PangoAttrList *attrs, PangoAttrIterator *cached_iter)
     * }
     */
    public static MemorySegment pango_itemize(MemorySegment context, MemorySegment text, int start_index, int length, MemorySegment attrs, MemorySegment cached_iter) {
        var mh$ = pango_itemize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_itemize", context, text, start_index, length, attrs, cached_iter);
            }
            return (MemorySegment)mh$.invokeExact(context, text, start_index, length, attrs, cached_iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_itemize_with_base_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_itemize_with_base_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *pango_itemize_with_base_dir(PangoContext *context, PangoDirection base_dir, const char *text, int start_index, int length, PangoAttrList *attrs, PangoAttrIterator *cached_iter)
     * }
     */
    public static FunctionDescriptor pango_itemize_with_base_dir$descriptor() {
        return pango_itemize_with_base_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *pango_itemize_with_base_dir(PangoContext *context, PangoDirection base_dir, const char *text, int start_index, int length, PangoAttrList *attrs, PangoAttrIterator *cached_iter)
     * }
     */
    public static MethodHandle pango_itemize_with_base_dir$handle() {
        return pango_itemize_with_base_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *pango_itemize_with_base_dir(PangoContext *context, PangoDirection base_dir, const char *text, int start_index, int length, PangoAttrList *attrs, PangoAttrIterator *cached_iter)
     * }
     */
    public static MemorySegment pango_itemize_with_base_dir(MemorySegment context, int base_dir, MemorySegment text, int start_index, int length, MemorySegment attrs, MemorySegment cached_iter) {
        var mh$ = pango_itemize_with_base_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_itemize_with_base_dir", context, base_dir, text, start_index, length, attrs, cached_iter);
            }
            return (MemorySegment)mh$.invokeExact(context, base_dir, text, start_index, length, attrs, cached_iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_break {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_break"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_break(const char *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static FunctionDescriptor pango_break$descriptor() {
        return pango_break.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_break(const char *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static MethodHandle pango_break$handle() {
        return pango_break.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_break(const char *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static void pango_break(MemorySegment text, int length, MemorySegment analysis, MemorySegment attrs, int attrs_len) {
        var mh$ = pango_break.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_break", text, length, analysis, attrs, attrs_len);
            }
            mh$.invokeExact(text, length, analysis, attrs, attrs_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_get_log_attrs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_get_log_attrs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_get_log_attrs(const char *text, int length, int level, PangoLanguage *language, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static FunctionDescriptor pango_get_log_attrs$descriptor() {
        return pango_get_log_attrs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_get_log_attrs(const char *text, int length, int level, PangoLanguage *language, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static MethodHandle pango_get_log_attrs$handle() {
        return pango_get_log_attrs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_get_log_attrs(const char *text, int length, int level, PangoLanguage *language, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static void pango_get_log_attrs(MemorySegment text, int length, int level, MemorySegment language, MemorySegment attrs, int attrs_len) {
        var mh$ = pango_get_log_attrs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_get_log_attrs", text, length, level, language, attrs, attrs_len);
            }
            mh$.invokeExact(text, length, level, language, attrs, attrs_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_default_break {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_default_break"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_default_break(const char *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static FunctionDescriptor pango_default_break$descriptor() {
        return pango_default_break.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_default_break(const char *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static MethodHandle pango_default_break$handle() {
        return pango_default_break.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_default_break(const char *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static void pango_default_break(MemorySegment text, int length, MemorySegment analysis, MemorySegment attrs, int attrs_len) {
        var mh$ = pango_default_break.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_default_break", text, length, analysis, attrs, attrs_len);
            }
            mh$.invokeExact(text, length, analysis, attrs, attrs_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tailor_break {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tailor_break"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_tailor_break(const char *text, int length, PangoAnalysis *analysis, int offset, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static FunctionDescriptor pango_tailor_break$descriptor() {
        return pango_tailor_break.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_tailor_break(const char *text, int length, PangoAnalysis *analysis, int offset, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static MethodHandle pango_tailor_break$handle() {
        return pango_tailor_break.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_tailor_break(const char *text, int length, PangoAnalysis *analysis, int offset, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static void pango_tailor_break(MemorySegment text, int length, MemorySegment analysis, int offset, MemorySegment attrs, int attrs_len) {
        var mh$ = pango_tailor_break.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tailor_break", text, length, analysis, offset, attrs, attrs_len);
            }
            mh$.invokeExact(text, length, analysis, offset, attrs, attrs_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_break {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_break"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_attr_break(const char *text, int length, PangoAttrList *attr_list, int offset, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static FunctionDescriptor pango_attr_break$descriptor() {
        return pango_attr_break.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_attr_break(const char *text, int length, PangoAttrList *attr_list, int offset, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static MethodHandle pango_attr_break$handle() {
        return pango_attr_break.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_attr_break(const char *text, int length, PangoAttrList *attr_list, int offset, PangoLogAttr *attrs, int attrs_len)
     * }
     */
    public static void pango_attr_break(MemorySegment text, int length, MemorySegment attr_list, int offset, MemorySegment attrs, int attrs_len) {
        var mh$ = pango_attr_break.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_break", text, length, attr_list, offset, attrs, attrs_len);
            }
            mh$.invokeExact(text, length, attr_list, offset, attrs, attrs_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_fontset_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_fontset_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_fontset_get_type()
     * }
     */
    public static FunctionDescriptor pango_fontset_get_type$descriptor() {
        return pango_fontset_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_fontset_get_type()
     * }
     */
    public static MethodHandle pango_fontset_get_type$handle() {
        return pango_fontset_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_fontset_get_type()
     * }
     */
    public static long pango_fontset_get_type() {
        var mh$ = pango_fontset_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_fontset_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_fontset_get_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_fontset_get_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFont *pango_fontset_get_font(PangoFontset *fontset, guint wc)
     * }
     */
    public static FunctionDescriptor pango_fontset_get_font$descriptor() {
        return pango_fontset_get_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFont *pango_fontset_get_font(PangoFontset *fontset, guint wc)
     * }
     */
    public static MethodHandle pango_fontset_get_font$handle() {
        return pango_fontset_get_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFont *pango_fontset_get_font(PangoFontset *fontset, guint wc)
     * }
     */
    public static MemorySegment pango_fontset_get_font(MemorySegment fontset, int wc) {
        var mh$ = pango_fontset_get_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_fontset_get_font", fontset, wc);
            }
            return (MemorySegment)mh$.invokeExact(fontset, wc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_fontset_get_metrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_fontset_get_metrics"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_fontset_get_metrics(PangoFontset *fontset)
     * }
     */
    public static FunctionDescriptor pango_fontset_get_metrics$descriptor() {
        return pango_fontset_get_metrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_fontset_get_metrics(PangoFontset *fontset)
     * }
     */
    public static MethodHandle pango_fontset_get_metrics$handle() {
        return pango_fontset_get_metrics.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_fontset_get_metrics(PangoFontset *fontset)
     * }
     */
    public static MemorySegment pango_fontset_get_metrics(MemorySegment fontset) {
        var mh$ = pango_fontset_get_metrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_fontset_get_metrics", fontset);
            }
            return (MemorySegment)mh$.invokeExact(fontset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_fontset_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_fontset_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_fontset_foreach(PangoFontset *fontset, PangoFontsetForeachFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor pango_fontset_foreach$descriptor() {
        return pango_fontset_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_fontset_foreach(PangoFontset *fontset, PangoFontsetForeachFunc func, gpointer data)
     * }
     */
    public static MethodHandle pango_fontset_foreach$handle() {
        return pango_fontset_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_fontset_foreach(PangoFontset *fontset, PangoFontsetForeachFunc func, gpointer data)
     * }
     */
    public static void pango_fontset_foreach(MemorySegment fontset, MemorySegment func, MemorySegment data) {
        var mh$ = pango_fontset_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_fontset_foreach", fontset, func, data);
            }
            mh$.invokeExact(fontset, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_map_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_map_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_font_map_get_type()
     * }
     */
    public static FunctionDescriptor pango_font_map_get_type$descriptor() {
        return pango_font_map_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_font_map_get_type()
     * }
     */
    public static MethodHandle pango_font_map_get_type$handle() {
        return pango_font_map_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_font_map_get_type()
     * }
     */
    public static long pango_font_map_get_type() {
        var mh$ = pango_font_map_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_map_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_map_create_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_map_create_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *pango_font_map_create_context(PangoFontMap *fontmap)
     * }
     */
    public static FunctionDescriptor pango_font_map_create_context$descriptor() {
        return pango_font_map_create_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *pango_font_map_create_context(PangoFontMap *fontmap)
     * }
     */
    public static MethodHandle pango_font_map_create_context$handle() {
        return pango_font_map_create_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *pango_font_map_create_context(PangoFontMap *fontmap)
     * }
     */
    public static MemorySegment pango_font_map_create_context(MemorySegment fontmap) {
        var mh$ = pango_font_map_create_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_map_create_context", fontmap);
            }
            return (MemorySegment)mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_map_load_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_map_load_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFont *pango_font_map_load_font(PangoFontMap *fontmap, PangoContext *context, const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_font_map_load_font$descriptor() {
        return pango_font_map_load_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFont *pango_font_map_load_font(PangoFontMap *fontmap, PangoContext *context, const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_font_map_load_font$handle() {
        return pango_font_map_load_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFont *pango_font_map_load_font(PangoFontMap *fontmap, PangoContext *context, const PangoFontDescription *desc)
     * }
     */
    public static MemorySegment pango_font_map_load_font(MemorySegment fontmap, MemorySegment context, MemorySegment desc) {
        var mh$ = pango_font_map_load_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_map_load_font", fontmap, context, desc);
            }
            return (MemorySegment)mh$.invokeExact(fontmap, context, desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_map_load_fontset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_map_load_fontset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontset *pango_font_map_load_fontset(PangoFontMap *fontmap, PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language)
     * }
     */
    public static FunctionDescriptor pango_font_map_load_fontset$descriptor() {
        return pango_font_map_load_fontset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontset *pango_font_map_load_fontset(PangoFontMap *fontmap, PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language)
     * }
     */
    public static MethodHandle pango_font_map_load_fontset$handle() {
        return pango_font_map_load_fontset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontset *pango_font_map_load_fontset(PangoFontMap *fontmap, PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language)
     * }
     */
    public static MemorySegment pango_font_map_load_fontset(MemorySegment fontmap, MemorySegment context, MemorySegment desc, MemorySegment language) {
        var mh$ = pango_font_map_load_fontset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_map_load_fontset", fontmap, context, desc, language);
            }
            return (MemorySegment)mh$.invokeExact(fontmap, context, desc, language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_map_list_families {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_map_list_families"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_map_list_families(PangoFontMap *fontmap, PangoFontFamily ***families, int *n_families)
     * }
     */
    public static FunctionDescriptor pango_font_map_list_families$descriptor() {
        return pango_font_map_list_families.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_map_list_families(PangoFontMap *fontmap, PangoFontFamily ***families, int *n_families)
     * }
     */
    public static MethodHandle pango_font_map_list_families$handle() {
        return pango_font_map_list_families.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_map_list_families(PangoFontMap *fontmap, PangoFontFamily ***families, int *n_families)
     * }
     */
    public static void pango_font_map_list_families(MemorySegment fontmap, MemorySegment families, MemorySegment n_families) {
        var mh$ = pango_font_map_list_families.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_map_list_families", fontmap, families, n_families);
            }
            mh$.invokeExact(fontmap, families, n_families);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_map_get_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_map_get_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint pango_font_map_get_serial(PangoFontMap *fontmap)
     * }
     */
    public static FunctionDescriptor pango_font_map_get_serial$descriptor() {
        return pango_font_map_get_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint pango_font_map_get_serial(PangoFontMap *fontmap)
     * }
     */
    public static MethodHandle pango_font_map_get_serial$handle() {
        return pango_font_map_get_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint pango_font_map_get_serial(PangoFontMap *fontmap)
     * }
     */
    public static int pango_font_map_get_serial(MemorySegment fontmap) {
        var mh$ = pango_font_map_get_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_map_get_serial", fontmap);
            }
            return (int)mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_map_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_map_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_font_map_changed(PangoFontMap *fontmap)
     * }
     */
    public static FunctionDescriptor pango_font_map_changed$descriptor() {
        return pango_font_map_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_font_map_changed(PangoFontMap *fontmap)
     * }
     */
    public static MethodHandle pango_font_map_changed$handle() {
        return pango_font_map_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_font_map_changed(PangoFontMap *fontmap)
     * }
     */
    public static void pango_font_map_changed(MemorySegment fontmap) {
        var mh$ = pango_font_map_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_map_changed", fontmap);
            }
            mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_map_get_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_map_get_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontFamily *pango_font_map_get_family(PangoFontMap *fontmap, const char *name)
     * }
     */
    public static FunctionDescriptor pango_font_map_get_family$descriptor() {
        return pango_font_map_get_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontFamily *pango_font_map_get_family(PangoFontMap *fontmap, const char *name)
     * }
     */
    public static MethodHandle pango_font_map_get_family$handle() {
        return pango_font_map_get_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontFamily *pango_font_map_get_family(PangoFontMap *fontmap, const char *name)
     * }
     */
    public static MemorySegment pango_font_map_get_family(MemorySegment fontmap, MemorySegment name) {
        var mh$ = pango_font_map_get_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_map_get_family", fontmap, name);
            }
            return (MemorySegment)mh$.invokeExact(fontmap, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_map_reload_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_map_reload_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFont *pango_font_map_reload_font(PangoFontMap *fontmap, PangoFont *font, double scale, PangoContext *context, const char *variations)
     * }
     */
    public static FunctionDescriptor pango_font_map_reload_font$descriptor() {
        return pango_font_map_reload_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFont *pango_font_map_reload_font(PangoFontMap *fontmap, PangoFont *font, double scale, PangoContext *context, const char *variations)
     * }
     */
    public static MethodHandle pango_font_map_reload_font$handle() {
        return pango_font_map_reload_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFont *pango_font_map_reload_font(PangoFontMap *fontmap, PangoFont *font, double scale, PangoContext *context, const char *variations)
     * }
     */
    public static MemorySegment pango_font_map_reload_font(MemorySegment fontmap, MemorySegment font, double scale, MemorySegment context, MemorySegment variations) {
        var mh$ = pango_font_map_reload_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_map_reload_font", fontmap, font, scale, context, variations);
            }
            return (MemorySegment)mh$.invokeExact(fontmap, font, scale, context, variations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef PangoFontMap *PangoFontMap_autoptr
     * }
     */
    public static final AddressLayout PangoFontMap_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoFontMap_listautoptr
     * }
     */
    public static final AddressLayout PangoFontMap_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoFontMap_slistautoptr
     * }
     */
    public static final AddressLayout PangoFontMap_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoFontMap_queueautoptr
     * }
     */
    public static final AddressLayout PangoFontMap_queueautoptr = app_indicator_h.C_POINTER;

    private static class pango_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_context_get_type()
     * }
     */
    public static FunctionDescriptor pango_context_get_type$descriptor() {
        return pango_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_context_get_type()
     * }
     */
    public static MethodHandle pango_context_get_type$handle() {
        return pango_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_context_get_type()
     * }
     */
    public static long pango_context_get_type() {
        var mh$ = pango_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *pango_context_new()
     * }
     */
    public static FunctionDescriptor pango_context_new$descriptor() {
        return pango_context_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *pango_context_new()
     * }
     */
    public static MethodHandle pango_context_new$handle() {
        return pango_context_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *pango_context_new()
     * }
     */
    public static MemorySegment pango_context_new() {
        var mh$ = pango_context_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_context_changed(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_changed$descriptor() {
        return pango_context_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_context_changed(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_changed$handle() {
        return pango_context_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_context_changed(PangoContext *context)
     * }
     */
    public static void pango_context_changed(MemorySegment context) {
        var mh$ = pango_context_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_changed", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_set_font_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_set_font_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_context_set_font_map(PangoContext *context, PangoFontMap *font_map)
     * }
     */
    public static FunctionDescriptor pango_context_set_font_map$descriptor() {
        return pango_context_set_font_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_context_set_font_map(PangoContext *context, PangoFontMap *font_map)
     * }
     */
    public static MethodHandle pango_context_set_font_map$handle() {
        return pango_context_set_font_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_context_set_font_map(PangoContext *context, PangoFontMap *font_map)
     * }
     */
    public static void pango_context_set_font_map(MemorySegment context, MemorySegment font_map) {
        var mh$ = pango_context_set_font_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_set_font_map", context, font_map);
            }
            mh$.invokeExact(context, font_map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_font_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_font_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMap *pango_context_get_font_map(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_get_font_map$descriptor() {
        return pango_context_get_font_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMap *pango_context_get_font_map(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_get_font_map$handle() {
        return pango_context_get_font_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMap *pango_context_get_font_map(PangoContext *context)
     * }
     */
    public static MemorySegment pango_context_get_font_map(MemorySegment context) {
        var mh$ = pango_context_get_font_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_font_map", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint pango_context_get_serial(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_get_serial$descriptor() {
        return pango_context_get_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint pango_context_get_serial(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_get_serial$handle() {
        return pango_context_get_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint pango_context_get_serial(PangoContext *context)
     * }
     */
    public static int pango_context_get_serial(MemorySegment context) {
        var mh$ = pango_context_get_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_serial", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_list_families {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_list_families"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_context_list_families(PangoContext *context, PangoFontFamily ***families, int *n_families)
     * }
     */
    public static FunctionDescriptor pango_context_list_families$descriptor() {
        return pango_context_list_families.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_context_list_families(PangoContext *context, PangoFontFamily ***families, int *n_families)
     * }
     */
    public static MethodHandle pango_context_list_families$handle() {
        return pango_context_list_families.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_context_list_families(PangoContext *context, PangoFontFamily ***families, int *n_families)
     * }
     */
    public static void pango_context_list_families(MemorySegment context, MemorySegment families, MemorySegment n_families) {
        var mh$ = pango_context_list_families.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_list_families", context, families, n_families);
            }
            mh$.invokeExact(context, families, n_families);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_load_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_load_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFont *pango_context_load_font(PangoContext *context, const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_context_load_font$descriptor() {
        return pango_context_load_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFont *pango_context_load_font(PangoContext *context, const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_context_load_font$handle() {
        return pango_context_load_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFont *pango_context_load_font(PangoContext *context, const PangoFontDescription *desc)
     * }
     */
    public static MemorySegment pango_context_load_font(MemorySegment context, MemorySegment desc) {
        var mh$ = pango_context_load_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_load_font", context, desc);
            }
            return (MemorySegment)mh$.invokeExact(context, desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_load_fontset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_load_fontset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontset *pango_context_load_fontset(PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language)
     * }
     */
    public static FunctionDescriptor pango_context_load_fontset$descriptor() {
        return pango_context_load_fontset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontset *pango_context_load_fontset(PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language)
     * }
     */
    public static MethodHandle pango_context_load_fontset$handle() {
        return pango_context_load_fontset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontset *pango_context_load_fontset(PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language)
     * }
     */
    public static MemorySegment pango_context_load_fontset(MemorySegment context, MemorySegment desc, MemorySegment language) {
        var mh$ = pango_context_load_fontset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_load_fontset", context, desc, language);
            }
            return (MemorySegment)mh$.invokeExact(context, desc, language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_metrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_metrics"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_context_get_metrics(PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language)
     * }
     */
    public static FunctionDescriptor pango_context_get_metrics$descriptor() {
        return pango_context_get_metrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_context_get_metrics(PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language)
     * }
     */
    public static MethodHandle pango_context_get_metrics$handle() {
        return pango_context_get_metrics.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMetrics *pango_context_get_metrics(PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language)
     * }
     */
    public static MemorySegment pango_context_get_metrics(MemorySegment context, MemorySegment desc, MemorySegment language) {
        var mh$ = pango_context_get_metrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_metrics", context, desc, language);
            }
            return (MemorySegment)mh$.invokeExact(context, desc, language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_set_font_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_set_font_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_context_set_font_description(PangoContext *context, const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_context_set_font_description$descriptor() {
        return pango_context_set_font_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_context_set_font_description(PangoContext *context, const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_context_set_font_description$handle() {
        return pango_context_set_font_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_context_set_font_description(PangoContext *context, const PangoFontDescription *desc)
     * }
     */
    public static void pango_context_set_font_description(MemorySegment context, MemorySegment desc) {
        var mh$ = pango_context_set_font_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_set_font_description", context, desc);
            }
            mh$.invokeExact(context, desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_font_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_font_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_context_get_font_description(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_get_font_description$descriptor() {
        return pango_context_get_font_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_context_get_font_description(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_get_font_description$handle() {
        return pango_context_get_font_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontDescription *pango_context_get_font_description(PangoContext *context)
     * }
     */
    public static MemorySegment pango_context_get_font_description(MemorySegment context) {
        var mh$ = pango_context_get_font_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_font_description", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_language"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLanguage *pango_context_get_language(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_get_language$descriptor() {
        return pango_context_get_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLanguage *pango_context_get_language(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_get_language$handle() {
        return pango_context_get_language.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLanguage *pango_context_get_language(PangoContext *context)
     * }
     */
    public static MemorySegment pango_context_get_language(MemorySegment context) {
        var mh$ = pango_context_get_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_language", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_set_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_set_language"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_context_set_language(PangoContext *context, PangoLanguage *language)
     * }
     */
    public static FunctionDescriptor pango_context_set_language$descriptor() {
        return pango_context_set_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_context_set_language(PangoContext *context, PangoLanguage *language)
     * }
     */
    public static MethodHandle pango_context_set_language$handle() {
        return pango_context_set_language.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_context_set_language(PangoContext *context, PangoLanguage *language)
     * }
     */
    public static void pango_context_set_language(MemorySegment context, MemorySegment language) {
        var mh$ = pango_context_set_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_set_language", context, language);
            }
            mh$.invokeExact(context, language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_set_base_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_set_base_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_context_set_base_dir(PangoContext *context, PangoDirection direction)
     * }
     */
    public static FunctionDescriptor pango_context_set_base_dir$descriptor() {
        return pango_context_set_base_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_context_set_base_dir(PangoContext *context, PangoDirection direction)
     * }
     */
    public static MethodHandle pango_context_set_base_dir$handle() {
        return pango_context_set_base_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_context_set_base_dir(PangoContext *context, PangoDirection direction)
     * }
     */
    public static void pango_context_set_base_dir(MemorySegment context, int direction) {
        var mh$ = pango_context_set_base_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_set_base_dir", context, direction);
            }
            mh$.invokeExact(context, direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_base_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_base_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoDirection pango_context_get_base_dir(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_get_base_dir$descriptor() {
        return pango_context_get_base_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoDirection pango_context_get_base_dir(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_get_base_dir$handle() {
        return pango_context_get_base_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoDirection pango_context_get_base_dir(PangoContext *context)
     * }
     */
    public static int pango_context_get_base_dir(MemorySegment context) {
        var mh$ = pango_context_get_base_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_base_dir", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_set_base_gravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_set_base_gravity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_context_set_base_gravity(PangoContext *context, PangoGravity gravity)
     * }
     */
    public static FunctionDescriptor pango_context_set_base_gravity$descriptor() {
        return pango_context_set_base_gravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_context_set_base_gravity(PangoContext *context, PangoGravity gravity)
     * }
     */
    public static MethodHandle pango_context_set_base_gravity$handle() {
        return pango_context_set_base_gravity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_context_set_base_gravity(PangoContext *context, PangoGravity gravity)
     * }
     */
    public static void pango_context_set_base_gravity(MemorySegment context, int gravity) {
        var mh$ = pango_context_set_base_gravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_set_base_gravity", context, gravity);
            }
            mh$.invokeExact(context, gravity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_base_gravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_base_gravity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGravity pango_context_get_base_gravity(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_get_base_gravity$descriptor() {
        return pango_context_get_base_gravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGravity pango_context_get_base_gravity(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_get_base_gravity$handle() {
        return pango_context_get_base_gravity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGravity pango_context_get_base_gravity(PangoContext *context)
     * }
     */
    public static int pango_context_get_base_gravity(MemorySegment context) {
        var mh$ = pango_context_get_base_gravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_base_gravity", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_gravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_gravity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGravity pango_context_get_gravity(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_get_gravity$descriptor() {
        return pango_context_get_gravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGravity pango_context_get_gravity(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_get_gravity$handle() {
        return pango_context_get_gravity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGravity pango_context_get_gravity(PangoContext *context)
     * }
     */
    public static int pango_context_get_gravity(MemorySegment context) {
        var mh$ = pango_context_get_gravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_gravity", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_set_gravity_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_set_gravity_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_context_set_gravity_hint(PangoContext *context, PangoGravityHint hint)
     * }
     */
    public static FunctionDescriptor pango_context_set_gravity_hint$descriptor() {
        return pango_context_set_gravity_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_context_set_gravity_hint(PangoContext *context, PangoGravityHint hint)
     * }
     */
    public static MethodHandle pango_context_set_gravity_hint$handle() {
        return pango_context_set_gravity_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_context_set_gravity_hint(PangoContext *context, PangoGravityHint hint)
     * }
     */
    public static void pango_context_set_gravity_hint(MemorySegment context, int hint) {
        var mh$ = pango_context_set_gravity_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_set_gravity_hint", context, hint);
            }
            mh$.invokeExact(context, hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_gravity_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_gravity_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGravityHint pango_context_get_gravity_hint(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_get_gravity_hint$descriptor() {
        return pango_context_get_gravity_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGravityHint pango_context_get_gravity_hint(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_get_gravity_hint$handle() {
        return pango_context_get_gravity_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGravityHint pango_context_get_gravity_hint(PangoContext *context)
     * }
     */
    public static int pango_context_get_gravity_hint(MemorySegment context) {
        var mh$ = pango_context_get_gravity_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_gravity_hint", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_set_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_set_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_context_set_matrix(PangoContext *context, const PangoMatrix *matrix)
     * }
     */
    public static FunctionDescriptor pango_context_set_matrix$descriptor() {
        return pango_context_set_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_context_set_matrix(PangoContext *context, const PangoMatrix *matrix)
     * }
     */
    public static MethodHandle pango_context_set_matrix$handle() {
        return pango_context_set_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_context_set_matrix(PangoContext *context, const PangoMatrix *matrix)
     * }
     */
    public static void pango_context_set_matrix(MemorySegment context, MemorySegment matrix) {
        var mh$ = pango_context_set_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_set_matrix", context, matrix);
            }
            mh$.invokeExact(context, matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const PangoMatrix *pango_context_get_matrix(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_get_matrix$descriptor() {
        return pango_context_get_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const PangoMatrix *pango_context_get_matrix(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_get_matrix$handle() {
        return pango_context_get_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const PangoMatrix *pango_context_get_matrix(PangoContext *context)
     * }
     */
    public static MemorySegment pango_context_get_matrix(MemorySegment context) {
        var mh$ = pango_context_get_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_matrix", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_set_round_glyph_positions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_set_round_glyph_positions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_context_set_round_glyph_positions(PangoContext *context, gboolean round_positions)
     * }
     */
    public static FunctionDescriptor pango_context_set_round_glyph_positions$descriptor() {
        return pango_context_set_round_glyph_positions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_context_set_round_glyph_positions(PangoContext *context, gboolean round_positions)
     * }
     */
    public static MethodHandle pango_context_set_round_glyph_positions$handle() {
        return pango_context_set_round_glyph_positions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_context_set_round_glyph_positions(PangoContext *context, gboolean round_positions)
     * }
     */
    public static void pango_context_set_round_glyph_positions(MemorySegment context, int round_positions) {
        var mh$ = pango_context_set_round_glyph_positions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_set_round_glyph_positions", context, round_positions);
            }
            mh$.invokeExact(context, round_positions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_context_get_round_glyph_positions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_context_get_round_glyph_positions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_context_get_round_glyph_positions(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_context_get_round_glyph_positions$descriptor() {
        return pango_context_get_round_glyph_positions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_context_get_round_glyph_positions(PangoContext *context)
     * }
     */
    public static MethodHandle pango_context_get_round_glyph_positions$handle() {
        return pango_context_get_round_glyph_positions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_context_get_round_glyph_positions(PangoContext *context)
     * }
     */
    public static int pango_context_get_round_glyph_positions(MemorySegment context) {
        var mh$ = pango_context_get_round_glyph_positions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_context_get_round_glyph_positions", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef gint32 PangoGlyphUnit
     * }
     */
    public static final OfInt PangoGlyphUnit = app_indicator_h.C_INT;

    private static class pango_glyph_string_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_glyph_string_get_type()
     * }
     */
    public static FunctionDescriptor pango_glyph_string_get_type$descriptor() {
        return pango_glyph_string_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_glyph_string_get_type()
     * }
     */
    public static MethodHandle pango_glyph_string_get_type$handle() {
        return pango_glyph_string_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_glyph_string_get_type()
     * }
     */
    public static long pango_glyph_string_get_type() {
        var mh$ = pango_glyph_string_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGlyphString *pango_glyph_string_new()
     * }
     */
    public static FunctionDescriptor pango_glyph_string_new$descriptor() {
        return pango_glyph_string_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGlyphString *pango_glyph_string_new()
     * }
     */
    public static MethodHandle pango_glyph_string_new$handle() {
        return pango_glyph_string_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGlyphString *pango_glyph_string_new()
     * }
     */
    public static MemorySegment pango_glyph_string_new() {
        var mh$ = pango_glyph_string_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_set_size(PangoGlyphString *string, int new_len)
     * }
     */
    public static FunctionDescriptor pango_glyph_string_set_size$descriptor() {
        return pango_glyph_string_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_set_size(PangoGlyphString *string, int new_len)
     * }
     */
    public static MethodHandle pango_glyph_string_set_size$handle() {
        return pango_glyph_string_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_string_set_size(PangoGlyphString *string, int new_len)
     * }
     */
    public static void pango_glyph_string_set_size(MemorySegment string, int new_len) {
        var mh$ = pango_glyph_string_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_set_size", string, new_len);
            }
            mh$.invokeExact(string, new_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGlyphString *pango_glyph_string_copy(PangoGlyphString *string)
     * }
     */
    public static FunctionDescriptor pango_glyph_string_copy$descriptor() {
        return pango_glyph_string_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGlyphString *pango_glyph_string_copy(PangoGlyphString *string)
     * }
     */
    public static MethodHandle pango_glyph_string_copy$handle() {
        return pango_glyph_string_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGlyphString *pango_glyph_string_copy(PangoGlyphString *string)
     * }
     */
    public static MemorySegment pango_glyph_string_copy(MemorySegment string) {
        var mh$ = pango_glyph_string_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_copy", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_free(PangoGlyphString *string)
     * }
     */
    public static FunctionDescriptor pango_glyph_string_free$descriptor() {
        return pango_glyph_string_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_free(PangoGlyphString *string)
     * }
     */
    public static MethodHandle pango_glyph_string_free$handle() {
        return pango_glyph_string_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_string_free(PangoGlyphString *string)
     * }
     */
    public static void pango_glyph_string_free(MemorySegment string) {
        var mh$ = pango_glyph_string_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_free", string);
            }
            mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_extents(PangoGlyphString *glyphs, PangoFont *font, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_glyph_string_extents$descriptor() {
        return pango_glyph_string_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_extents(PangoGlyphString *glyphs, PangoFont *font, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_glyph_string_extents$handle() {
        return pango_glyph_string_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_string_extents(PangoGlyphString *glyphs, PangoFont *font, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_glyph_string_extents(MemorySegment glyphs, MemorySegment font, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_glyph_string_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_extents", glyphs, font, ink_rect, logical_rect);
            }
            mh$.invokeExact(glyphs, font, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_glyph_string_get_width(PangoGlyphString *glyphs)
     * }
     */
    public static FunctionDescriptor pango_glyph_string_get_width$descriptor() {
        return pango_glyph_string_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_glyph_string_get_width(PangoGlyphString *glyphs)
     * }
     */
    public static MethodHandle pango_glyph_string_get_width$handle() {
        return pango_glyph_string_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_glyph_string_get_width(PangoGlyphString *glyphs)
     * }
     */
    public static int pango_glyph_string_get_width(MemorySegment glyphs) {
        var mh$ = pango_glyph_string_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_get_width", glyphs);
            }
            return (int)mh$.invokeExact(glyphs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_extents_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_extents_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_extents_range(PangoGlyphString *glyphs, int start, int end, PangoFont *font, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_glyph_string_extents_range$descriptor() {
        return pango_glyph_string_extents_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_extents_range(PangoGlyphString *glyphs, int start, int end, PangoFont *font, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_glyph_string_extents_range$handle() {
        return pango_glyph_string_extents_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_string_extents_range(PangoGlyphString *glyphs, int start, int end, PangoFont *font, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_glyph_string_extents_range(MemorySegment glyphs, int start, int end, MemorySegment font, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_glyph_string_extents_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_extents_range", glyphs, start, end, font, ink_rect, logical_rect);
            }
            mh$.invokeExact(glyphs, start, end, font, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_get_logical_widths {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_get_logical_widths"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_get_logical_widths(PangoGlyphString *glyphs, const char *text, int length, int embedding_level, int *logical_widths)
     * }
     */
    public static FunctionDescriptor pango_glyph_string_get_logical_widths$descriptor() {
        return pango_glyph_string_get_logical_widths.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_get_logical_widths(PangoGlyphString *glyphs, const char *text, int length, int embedding_level, int *logical_widths)
     * }
     */
    public static MethodHandle pango_glyph_string_get_logical_widths$handle() {
        return pango_glyph_string_get_logical_widths.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_string_get_logical_widths(PangoGlyphString *glyphs, const char *text, int length, int embedding_level, int *logical_widths)
     * }
     */
    public static void pango_glyph_string_get_logical_widths(MemorySegment glyphs, MemorySegment text, int length, int embedding_level, MemorySegment logical_widths) {
        var mh$ = pango_glyph_string_get_logical_widths.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_get_logical_widths", glyphs, text, length, embedding_level, logical_widths);
            }
            mh$.invokeExact(glyphs, text, length, embedding_level, logical_widths);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_index_to_x {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_index_to_x"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_index_to_x(PangoGlyphString *glyphs, const char *text, int length, PangoAnalysis *analysis, int index_, gboolean trailing, int *x_pos)
     * }
     */
    public static FunctionDescriptor pango_glyph_string_index_to_x$descriptor() {
        return pango_glyph_string_index_to_x.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_index_to_x(PangoGlyphString *glyphs, const char *text, int length, PangoAnalysis *analysis, int index_, gboolean trailing, int *x_pos)
     * }
     */
    public static MethodHandle pango_glyph_string_index_to_x$handle() {
        return pango_glyph_string_index_to_x.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_string_index_to_x(PangoGlyphString *glyphs, const char *text, int length, PangoAnalysis *analysis, int index_, gboolean trailing, int *x_pos)
     * }
     */
    public static void pango_glyph_string_index_to_x(MemorySegment glyphs, MemorySegment text, int length, MemorySegment analysis, int index_, int trailing, MemorySegment x_pos) {
        var mh$ = pango_glyph_string_index_to_x.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_index_to_x", glyphs, text, length, analysis, index_, trailing, x_pos);
            }
            mh$.invokeExact(glyphs, text, length, analysis, index_, trailing, x_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_x_to_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_x_to_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_x_to_index(PangoGlyphString *glyphs, const char *text, int length, PangoAnalysis *analysis, int x_pos, int *index_, int *trailing)
     * }
     */
    public static FunctionDescriptor pango_glyph_string_x_to_index$descriptor() {
        return pango_glyph_string_x_to_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_x_to_index(PangoGlyphString *glyphs, const char *text, int length, PangoAnalysis *analysis, int x_pos, int *index_, int *trailing)
     * }
     */
    public static MethodHandle pango_glyph_string_x_to_index$handle() {
        return pango_glyph_string_x_to_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_string_x_to_index(PangoGlyphString *glyphs, const char *text, int length, PangoAnalysis *analysis, int x_pos, int *index_, int *trailing)
     * }
     */
    public static void pango_glyph_string_x_to_index(MemorySegment glyphs, MemorySegment text, int length, MemorySegment analysis, int x_pos, MemorySegment index_, MemorySegment trailing) {
        var mh$ = pango_glyph_string_x_to_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_x_to_index", glyphs, text, length, analysis, x_pos, index_, trailing);
            }
            mh$.invokeExact(glyphs, text, length, analysis, x_pos, index_, trailing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_string_index_to_x_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_string_index_to_x_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_index_to_x_full(PangoGlyphString *glyphs, const char *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int index_, gboolean trailing, int *x_pos)
     * }
     */
    public static FunctionDescriptor pango_glyph_string_index_to_x_full$descriptor() {
        return pango_glyph_string_index_to_x_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_string_index_to_x_full(PangoGlyphString *glyphs, const char *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int index_, gboolean trailing, int *x_pos)
     * }
     */
    public static MethodHandle pango_glyph_string_index_to_x_full$handle() {
        return pango_glyph_string_index_to_x_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_string_index_to_x_full(PangoGlyphString *glyphs, const char *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int index_, gboolean trailing, int *x_pos)
     * }
     */
    public static void pango_glyph_string_index_to_x_full(MemorySegment glyphs, MemorySegment text, int length, MemorySegment analysis, MemorySegment attrs, int index_, int trailing, MemorySegment x_pos) {
        var mh$ = pango_glyph_string_index_to_x_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_string_index_to_x_full", glyphs, text, length, analysis, attrs, index_, trailing, x_pos);
            }
            mh$.invokeExact(glyphs, text, length, analysis, attrs, index_, trailing, x_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_SHAPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SHAPE_NONE = 0
     * }
     */
    public static int PANGO_SHAPE_NONE() {
        return PANGO_SHAPE_NONE;
    }
    private static final int PANGO_SHAPE_ROUND_POSITIONS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_SHAPE_ROUND_POSITIONS = 1
     * }
     */
    public static int PANGO_SHAPE_ROUND_POSITIONS() {
        return PANGO_SHAPE_ROUND_POSITIONS;
    }

    private static class pango_shape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_shape"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_shape(const char *text, int length, const PangoAnalysis *analysis, PangoGlyphString *glyphs)
     * }
     */
    public static FunctionDescriptor pango_shape$descriptor() {
        return pango_shape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_shape(const char *text, int length, const PangoAnalysis *analysis, PangoGlyphString *glyphs)
     * }
     */
    public static MethodHandle pango_shape$handle() {
        return pango_shape.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_shape(const char *text, int length, const PangoAnalysis *analysis, PangoGlyphString *glyphs)
     * }
     */
    public static void pango_shape(MemorySegment text, int length, MemorySegment analysis, MemorySegment glyphs) {
        var mh$ = pango_shape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_shape", text, length, analysis, glyphs);
            }
            mh$.invokeExact(text, length, analysis, glyphs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_shape_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_shape_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_shape_full(const char *item_text, int item_length, const char *paragraph_text, int paragraph_length, const PangoAnalysis *analysis, PangoGlyphString *glyphs)
     * }
     */
    public static FunctionDescriptor pango_shape_full$descriptor() {
        return pango_shape_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_shape_full(const char *item_text, int item_length, const char *paragraph_text, int paragraph_length, const PangoAnalysis *analysis, PangoGlyphString *glyphs)
     * }
     */
    public static MethodHandle pango_shape_full$handle() {
        return pango_shape_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_shape_full(const char *item_text, int item_length, const char *paragraph_text, int paragraph_length, const PangoAnalysis *analysis, PangoGlyphString *glyphs)
     * }
     */
    public static void pango_shape_full(MemorySegment item_text, int item_length, MemorySegment paragraph_text, int paragraph_length, MemorySegment analysis, MemorySegment glyphs) {
        var mh$ = pango_shape_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_shape_full", item_text, item_length, paragraph_text, paragraph_length, analysis, glyphs);
            }
            mh$.invokeExact(item_text, item_length, paragraph_text, paragraph_length, analysis, glyphs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_shape_with_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_shape_with_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_shape_with_flags(const char *item_text, int item_length, const char *paragraph_text, int paragraph_length, const PangoAnalysis *analysis, PangoGlyphString *glyphs, PangoShapeFlags flags)
     * }
     */
    public static FunctionDescriptor pango_shape_with_flags$descriptor() {
        return pango_shape_with_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_shape_with_flags(const char *item_text, int item_length, const char *paragraph_text, int paragraph_length, const PangoAnalysis *analysis, PangoGlyphString *glyphs, PangoShapeFlags flags)
     * }
     */
    public static MethodHandle pango_shape_with_flags$handle() {
        return pango_shape_with_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_shape_with_flags(const char *item_text, int item_length, const char *paragraph_text, int paragraph_length, const PangoAnalysis *analysis, PangoGlyphString *glyphs, PangoShapeFlags flags)
     * }
     */
    public static void pango_shape_with_flags(MemorySegment item_text, int item_length, MemorySegment paragraph_text, int paragraph_length, MemorySegment analysis, MemorySegment glyphs, int flags) {
        var mh$ = pango_shape_with_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_shape_with_flags", item_text, item_length, paragraph_text, paragraph_length, analysis, glyphs, flags);
            }
            mh$.invokeExact(item_text, item_length, paragraph_text, paragraph_length, analysis, glyphs, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_shape_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_shape_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_shape_item(PangoItem *item, const char *paragraph_text, int paragraph_length, PangoLogAttr *log_attrs, PangoGlyphString *glyphs, PangoShapeFlags flags)
     * }
     */
    public static FunctionDescriptor pango_shape_item$descriptor() {
        return pango_shape_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_shape_item(PangoItem *item, const char *paragraph_text, int paragraph_length, PangoLogAttr *log_attrs, PangoGlyphString *glyphs, PangoShapeFlags flags)
     * }
     */
    public static MethodHandle pango_shape_item$handle() {
        return pango_shape_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_shape_item(PangoItem *item, const char *paragraph_text, int paragraph_length, PangoLogAttr *log_attrs, PangoGlyphString *glyphs, PangoShapeFlags flags)
     * }
     */
    public static void pango_shape_item(MemorySegment item, MemorySegment paragraph_text, int paragraph_length, MemorySegment log_attrs, MemorySegment glyphs, int flags) {
        var mh$ = pango_shape_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_shape_item", item, paragraph_text, paragraph_length, log_attrs, glyphs, flags);
            }
            mh$.invokeExact(item, paragraph_text, paragraph_length, log_attrs, glyphs, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_engine_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_engine_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_engine_get_type()
     * }
     */
    public static FunctionDescriptor pango_engine_get_type$descriptor() {
        return pango_engine_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_engine_get_type()
     * }
     */
    public static MethodHandle pango_engine_get_type$handle() {
        return pango_engine_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_engine_get_type()
     * }
     */
    public static long pango_engine_get_type() {
        var mh$ = pango_engine_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_engine_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_engine_lang_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_engine_lang_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_engine_lang_get_type()
     * }
     */
    public static FunctionDescriptor pango_engine_lang_get_type$descriptor() {
        return pango_engine_lang_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_engine_lang_get_type()
     * }
     */
    public static MethodHandle pango_engine_lang_get_type$handle() {
        return pango_engine_lang_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_engine_lang_get_type()
     * }
     */
    public static long pango_engine_lang_get_type() {
        var mh$ = pango_engine_lang_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_engine_lang_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_engine_shape_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_engine_shape_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_engine_shape_get_type()
     * }
     */
    public static FunctionDescriptor pango_engine_shape_get_type$descriptor() {
        return pango_engine_shape_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_engine_shape_get_type()
     * }
     */
    public static MethodHandle pango_engine_shape_get_type$handle() {
        return pango_engine_shape_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_engine_shape_get_type()
     * }
     */
    public static long pango_engine_shape_get_type() {
        var mh$ = pango_engine_shape_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_engine_shape_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class script_engine_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("script_engine_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void script_engine_list(PangoEngineInfo **engines, int *n_engines)
     * }
     */
    public static FunctionDescriptor script_engine_list$descriptor() {
        return script_engine_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void script_engine_list(PangoEngineInfo **engines, int *n_engines)
     * }
     */
    public static MethodHandle script_engine_list$handle() {
        return script_engine_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void script_engine_list(PangoEngineInfo **engines, int *n_engines)
     * }
     */
    public static void script_engine_list(MemorySegment engines, MemorySegment n_engines) {
        var mh$ = script_engine_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("script_engine_list", engines, n_engines);
            }
            mh$.invokeExact(engines, n_engines);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class script_engine_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("script_engine_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void script_engine_init(GTypeModule *module)
     * }
     */
    public static FunctionDescriptor script_engine_init$descriptor() {
        return script_engine_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void script_engine_init(GTypeModule *module)
     * }
     */
    public static MethodHandle script_engine_init$handle() {
        return script_engine_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void script_engine_init(GTypeModule *module)
     * }
     */
    public static void script_engine_init(MemorySegment module) {
        var mh$ = script_engine_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("script_engine_init", module);
            }
            mh$.invokeExact(module);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class script_engine_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("script_engine_exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void script_engine_exit()
     * }
     */
    public static FunctionDescriptor script_engine_exit$descriptor() {
        return script_engine_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void script_engine_exit()
     * }
     */
    public static MethodHandle script_engine_exit$handle() {
        return script_engine_exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void script_engine_exit()
     * }
     */
    public static void script_engine_exit() {
        var mh$ = script_engine_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("script_engine_exit");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class script_engine_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("script_engine_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoEngine *script_engine_create(const char *id)
     * }
     */
    public static FunctionDescriptor script_engine_create$descriptor() {
        return script_engine_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoEngine *script_engine_create(const char *id)
     * }
     */
    public static MethodHandle script_engine_create$handle() {
        return script_engine_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoEngine *script_engine_create(const char *id)
     * }
     */
    public static MemorySegment script_engine_create(MemorySegment id) {
        var mh$ = script_engine_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("script_engine_create", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_attr_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_attr_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_attr_type_get_type()
     * }
     */
    public static FunctionDescriptor pango_attr_type_get_type$descriptor() {
        return pango_attr_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_attr_type_get_type()
     * }
     */
    public static MethodHandle pango_attr_type_get_type$handle() {
        return pango_attr_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_attr_type_get_type()
     * }
     */
    public static long pango_attr_type_get_type() {
        var mh$ = pango_attr_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_attr_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_underline_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_underline_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_underline_get_type()
     * }
     */
    public static FunctionDescriptor pango_underline_get_type$descriptor() {
        return pango_underline_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_underline_get_type()
     * }
     */
    public static MethodHandle pango_underline_get_type$handle() {
        return pango_underline_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_underline_get_type()
     * }
     */
    public static long pango_underline_get_type() {
        var mh$ = pango_underline_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_underline_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_overline_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_overline_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_overline_get_type()
     * }
     */
    public static FunctionDescriptor pango_overline_get_type$descriptor() {
        return pango_overline_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_overline_get_type()
     * }
     */
    public static MethodHandle pango_overline_get_type$handle() {
        return pango_overline_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_overline_get_type()
     * }
     */
    public static long pango_overline_get_type() {
        var mh$ = pango_overline_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_overline_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_show_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_show_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_show_flags_get_type()
     * }
     */
    public static FunctionDescriptor pango_show_flags_get_type$descriptor() {
        return pango_show_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_show_flags_get_type()
     * }
     */
    public static MethodHandle pango_show_flags_get_type$handle() {
        return pango_show_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_show_flags_get_type()
     * }
     */
    public static long pango_show_flags_get_type() {
        var mh$ = pango_show_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_show_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_text_transform_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_text_transform_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_text_transform_get_type()
     * }
     */
    public static FunctionDescriptor pango_text_transform_get_type$descriptor() {
        return pango_text_transform_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_text_transform_get_type()
     * }
     */
    public static MethodHandle pango_text_transform_get_type$handle() {
        return pango_text_transform_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_text_transform_get_type()
     * }
     */
    public static long pango_text_transform_get_type() {
        var mh$ = pango_text_transform_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_text_transform_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_baseline_shift_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_baseline_shift_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_baseline_shift_get_type()
     * }
     */
    public static FunctionDescriptor pango_baseline_shift_get_type$descriptor() {
        return pango_baseline_shift_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_baseline_shift_get_type()
     * }
     */
    public static MethodHandle pango_baseline_shift_get_type$handle() {
        return pango_baseline_shift_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_baseline_shift_get_type()
     * }
     */
    public static long pango_baseline_shift_get_type() {
        var mh$ = pango_baseline_shift_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_baseline_shift_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_scale_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_scale_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_font_scale_get_type()
     * }
     */
    public static FunctionDescriptor pango_font_scale_get_type$descriptor() {
        return pango_font_scale_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_font_scale_get_type()
     * }
     */
    public static MethodHandle pango_font_scale_get_type$handle() {
        return pango_font_scale_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_font_scale_get_type()
     * }
     */
    public static long pango_font_scale_get_type() {
        var mh$ = pango_font_scale_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_scale_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_bidi_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_bidi_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_bidi_type_get_type()
     * }
     */
    public static FunctionDescriptor pango_bidi_type_get_type$descriptor() {
        return pango_bidi_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_bidi_type_get_type()
     * }
     */
    public static MethodHandle pango_bidi_type_get_type$handle() {
        return pango_bidi_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_bidi_type_get_type()
     * }
     */
    public static long pango_bidi_type_get_type() {
        var mh$ = pango_bidi_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_bidi_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_coverage_level_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_level_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_coverage_level_get_type()
     * }
     */
    public static FunctionDescriptor pango_coverage_level_get_type$descriptor() {
        return pango_coverage_level_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_coverage_level_get_type()
     * }
     */
    public static MethodHandle pango_coverage_level_get_type$handle() {
        return pango_coverage_level_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_coverage_level_get_type()
     * }
     */
    public static long pango_coverage_level_get_type() {
        var mh$ = pango_coverage_level_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_level_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_direction_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_direction_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_direction_get_type()
     * }
     */
    public static FunctionDescriptor pango_direction_get_type$descriptor() {
        return pango_direction_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_direction_get_type()
     * }
     */
    public static MethodHandle pango_direction_get_type$handle() {
        return pango_direction_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_direction_get_type()
     * }
     */
    public static long pango_direction_get_type() {
        var mh$ = pango_direction_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_direction_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_style_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_style_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_style_get_type()
     * }
     */
    public static FunctionDescriptor pango_style_get_type$descriptor() {
        return pango_style_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_style_get_type()
     * }
     */
    public static MethodHandle pango_style_get_type$handle() {
        return pango_style_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_style_get_type()
     * }
     */
    public static long pango_style_get_type() {
        var mh$ = pango_style_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_style_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_variant_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_variant_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_variant_get_type()
     * }
     */
    public static FunctionDescriptor pango_variant_get_type$descriptor() {
        return pango_variant_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_variant_get_type()
     * }
     */
    public static MethodHandle pango_variant_get_type$handle() {
        return pango_variant_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_variant_get_type()
     * }
     */
    public static long pango_variant_get_type() {
        var mh$ = pango_variant_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_variant_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_weight_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_weight_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_weight_get_type()
     * }
     */
    public static FunctionDescriptor pango_weight_get_type$descriptor() {
        return pango_weight_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_weight_get_type()
     * }
     */
    public static MethodHandle pango_weight_get_type$handle() {
        return pango_weight_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_weight_get_type()
     * }
     */
    public static long pango_weight_get_type() {
        var mh$ = pango_weight_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_weight_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_stretch_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_stretch_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_stretch_get_type()
     * }
     */
    public static FunctionDescriptor pango_stretch_get_type$descriptor() {
        return pango_stretch_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_stretch_get_type()
     * }
     */
    public static MethodHandle pango_stretch_get_type$handle() {
        return pango_stretch_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_stretch_get_type()
     * }
     */
    public static long pango_stretch_get_type() {
        var mh$ = pango_stretch_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_stretch_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_font_mask_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_font_mask_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_font_mask_get_type()
     * }
     */
    public static FunctionDescriptor pango_font_mask_get_type$descriptor() {
        return pango_font_mask_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_font_mask_get_type()
     * }
     */
    public static MethodHandle pango_font_mask_get_type$handle() {
        return pango_font_mask_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_font_mask_get_type()
     * }
     */
    public static long pango_font_mask_get_type() {
        var mh$ = pango_font_mask_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_font_mask_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_shape_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_shape_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_shape_flags_get_type()
     * }
     */
    public static FunctionDescriptor pango_shape_flags_get_type$descriptor() {
        return pango_shape_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_shape_flags_get_type()
     * }
     */
    public static MethodHandle pango_shape_flags_get_type$handle() {
        return pango_shape_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_shape_flags_get_type()
     * }
     */
    public static long pango_shape_flags_get_type() {
        var mh$ = pango_shape_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_shape_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_gravity_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_gravity_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_gravity_get_type()
     * }
     */
    public static FunctionDescriptor pango_gravity_get_type$descriptor() {
        return pango_gravity_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_gravity_get_type()
     * }
     */
    public static MethodHandle pango_gravity_get_type$handle() {
        return pango_gravity_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_gravity_get_type()
     * }
     */
    public static long pango_gravity_get_type() {
        var mh$ = pango_gravity_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_gravity_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_gravity_hint_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_gravity_hint_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_gravity_hint_get_type()
     * }
     */
    public static FunctionDescriptor pango_gravity_hint_get_type$descriptor() {
        return pango_gravity_hint_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_gravity_hint_get_type()
     * }
     */
    public static MethodHandle pango_gravity_hint_get_type$handle() {
        return pango_gravity_hint_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_gravity_hint_get_type()
     * }
     */
    public static long pango_gravity_hint_get_type() {
        var mh$ = pango_gravity_hint_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_gravity_hint_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_alignment_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_alignment_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_alignment_get_type()
     * }
     */
    public static FunctionDescriptor pango_alignment_get_type$descriptor() {
        return pango_alignment_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_alignment_get_type()
     * }
     */
    public static MethodHandle pango_alignment_get_type$handle() {
        return pango_alignment_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_alignment_get_type()
     * }
     */
    public static long pango_alignment_get_type() {
        var mh$ = pango_alignment_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_alignment_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_wrap_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_wrap_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_wrap_mode_get_type()
     * }
     */
    public static FunctionDescriptor pango_wrap_mode_get_type$descriptor() {
        return pango_wrap_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_wrap_mode_get_type()
     * }
     */
    public static MethodHandle pango_wrap_mode_get_type$handle() {
        return pango_wrap_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_wrap_mode_get_type()
     * }
     */
    public static long pango_wrap_mode_get_type() {
        var mh$ = pango_wrap_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_wrap_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_ellipsize_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_ellipsize_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_ellipsize_mode_get_type()
     * }
     */
    public static FunctionDescriptor pango_ellipsize_mode_get_type$descriptor() {
        return pango_ellipsize_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_ellipsize_mode_get_type()
     * }
     */
    public static MethodHandle pango_ellipsize_mode_get_type$handle() {
        return pango_ellipsize_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_ellipsize_mode_get_type()
     * }
     */
    public static long pango_ellipsize_mode_get_type() {
        var mh$ = pango_ellipsize_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_ellipsize_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_serialize_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_serialize_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_layout_serialize_flags_get_type()
     * }
     */
    public static FunctionDescriptor pango_layout_serialize_flags_get_type$descriptor() {
        return pango_layout_serialize_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_layout_serialize_flags_get_type()
     * }
     */
    public static MethodHandle pango_layout_serialize_flags_get_type$handle() {
        return pango_layout_serialize_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_layout_serialize_flags_get_type()
     * }
     */
    public static long pango_layout_serialize_flags_get_type() {
        var mh$ = pango_layout_serialize_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_serialize_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_deserialize_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_deserialize_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_layout_deserialize_error_get_type()
     * }
     */
    public static FunctionDescriptor pango_layout_deserialize_error_get_type$descriptor() {
        return pango_layout_deserialize_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_layout_deserialize_error_get_type()
     * }
     */
    public static MethodHandle pango_layout_deserialize_error_get_type$handle() {
        return pango_layout_deserialize_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_layout_deserialize_error_get_type()
     * }
     */
    public static long pango_layout_deserialize_error_get_type() {
        var mh$ = pango_layout_deserialize_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_deserialize_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_deserialize_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_deserialize_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_layout_deserialize_flags_get_type()
     * }
     */
    public static FunctionDescriptor pango_layout_deserialize_flags_get_type$descriptor() {
        return pango_layout_deserialize_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_layout_deserialize_flags_get_type()
     * }
     */
    public static MethodHandle pango_layout_deserialize_flags_get_type$handle() {
        return pango_layout_deserialize_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_layout_deserialize_flags_get_type()
     * }
     */
    public static long pango_layout_deserialize_flags_get_type() {
        var mh$ = pango_layout_deserialize_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_deserialize_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_render_part_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_render_part_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_render_part_get_type()
     * }
     */
    public static FunctionDescriptor pango_render_part_get_type$descriptor() {
        return pango_render_part_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_render_part_get_type()
     * }
     */
    public static MethodHandle pango_render_part_get_type$handle() {
        return pango_render_part_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_render_part_get_type()
     * }
     */
    public static long pango_render_part_get_type() {
        var mh$ = pango_render_part_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_render_part_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_script_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_script_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_script_get_type()
     * }
     */
    public static FunctionDescriptor pango_script_get_type$descriptor() {
        return pango_script_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_script_get_type()
     * }
     */
    public static MethodHandle pango_script_get_type$handle() {
        return pango_script_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_script_get_type()
     * }
     */
    public static long pango_script_get_type() {
        var mh$ = pango_script_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_script_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_align_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_align_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_tab_align_get_type()
     * }
     */
    public static FunctionDescriptor pango_tab_align_get_type$descriptor() {
        return pango_tab_align_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_tab_align_get_type()
     * }
     */
    public static MethodHandle pango_tab_align_get_type$handle() {
        return pango_tab_align_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_tab_align_get_type()
     * }
     */
    public static long pango_tab_align_get_type() {
        var mh$ = pango_tab_align_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_align_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_fontset_simple_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_fontset_simple_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_fontset_simple_get_type()
     * }
     */
    public static FunctionDescriptor pango_fontset_simple_get_type$descriptor() {
        return pango_fontset_simple_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_fontset_simple_get_type()
     * }
     */
    public static MethodHandle pango_fontset_simple_get_type$handle() {
        return pango_fontset_simple_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_fontset_simple_get_type()
     * }
     */
    public static long pango_fontset_simple_get_type() {
        var mh$ = pango_fontset_simple_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_fontset_simple_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_fontset_simple_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_fontset_simple_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontsetSimple *pango_fontset_simple_new(PangoLanguage *language)
     * }
     */
    public static FunctionDescriptor pango_fontset_simple_new$descriptor() {
        return pango_fontset_simple_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontsetSimple *pango_fontset_simple_new(PangoLanguage *language)
     * }
     */
    public static MethodHandle pango_fontset_simple_new$handle() {
        return pango_fontset_simple_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontsetSimple *pango_fontset_simple_new(PangoLanguage *language)
     * }
     */
    public static MemorySegment pango_fontset_simple_new(MemorySegment language) {
        var mh$ = pango_fontset_simple_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_fontset_simple_new", language);
            }
            return (MemorySegment)mh$.invokeExact(language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_fontset_simple_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_fontset_simple_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_fontset_simple_append(PangoFontsetSimple *fontset, PangoFont *font)
     * }
     */
    public static FunctionDescriptor pango_fontset_simple_append$descriptor() {
        return pango_fontset_simple_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_fontset_simple_append(PangoFontsetSimple *fontset, PangoFont *font)
     * }
     */
    public static MethodHandle pango_fontset_simple_append$handle() {
        return pango_fontset_simple_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_fontset_simple_append(PangoFontsetSimple *fontset, PangoFont *font)
     * }
     */
    public static void pango_fontset_simple_append(MemorySegment fontset, MemorySegment font) {
        var mh$ = pango_fontset_simple_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_fontset_simple_append", fontset, font);
            }
            mh$.invokeExact(fontset, font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_fontset_simple_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_fontset_simple_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_fontset_simple_size(PangoFontsetSimple *fontset)
     * }
     */
    public static FunctionDescriptor pango_fontset_simple_size$descriptor() {
        return pango_fontset_simple_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_fontset_simple_size(PangoFontsetSimple *fontset)
     * }
     */
    public static MethodHandle pango_fontset_simple_size$handle() {
        return pango_fontset_simple_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_fontset_simple_size(PangoFontsetSimple *fontset)
     * }
     */
    public static int pango_fontset_simple_size(MemorySegment fontset) {
        var mh$ = pango_fontset_simple_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_fontset_simple_size", fontset);
            }
            return (int)mh$.invokeExact(fontset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_glyph_item_get_type()
     * }
     */
    public static FunctionDescriptor pango_glyph_item_get_type$descriptor() {
        return pango_glyph_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_glyph_item_get_type()
     * }
     */
    public static MethodHandle pango_glyph_item_get_type$handle() {
        return pango_glyph_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_glyph_item_get_type()
     * }
     */
    public static long pango_glyph_item_get_type() {
        var mh$ = pango_glyph_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_split {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_split"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGlyphItem *pango_glyph_item_split(PangoGlyphItem *orig, const char *text, int split_index)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_split$descriptor() {
        return pango_glyph_item_split.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGlyphItem *pango_glyph_item_split(PangoGlyphItem *orig, const char *text, int split_index)
     * }
     */
    public static MethodHandle pango_glyph_item_split$handle() {
        return pango_glyph_item_split.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGlyphItem *pango_glyph_item_split(PangoGlyphItem *orig, const char *text, int split_index)
     * }
     */
    public static MemorySegment pango_glyph_item_split(MemorySegment orig, MemorySegment text, int split_index) {
        var mh$ = pango_glyph_item_split.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_split", orig, text, split_index);
            }
            return (MemorySegment)mh$.invokeExact(orig, text, split_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGlyphItem *pango_glyph_item_copy(PangoGlyphItem *orig)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_copy$descriptor() {
        return pango_glyph_item_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGlyphItem *pango_glyph_item_copy(PangoGlyphItem *orig)
     * }
     */
    public static MethodHandle pango_glyph_item_copy$handle() {
        return pango_glyph_item_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGlyphItem *pango_glyph_item_copy(PangoGlyphItem *orig)
     * }
     */
    public static MemorySegment pango_glyph_item_copy(MemorySegment orig) {
        var mh$ = pango_glyph_item_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_copy", orig);
            }
            return (MemorySegment)mh$.invokeExact(orig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_item_free(PangoGlyphItem *glyph_item)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_free$descriptor() {
        return pango_glyph_item_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_item_free(PangoGlyphItem *glyph_item)
     * }
     */
    public static MethodHandle pango_glyph_item_free$handle() {
        return pango_glyph_item_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_item_free(PangoGlyphItem *glyph_item)
     * }
     */
    public static void pango_glyph_item_free(MemorySegment glyph_item) {
        var mh$ = pango_glyph_item_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_free", glyph_item);
            }
            mh$.invokeExact(glyph_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_apply_attrs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_apply_attrs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *pango_glyph_item_apply_attrs(PangoGlyphItem *glyph_item, const char *text, PangoAttrList *list)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_apply_attrs$descriptor() {
        return pango_glyph_item_apply_attrs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *pango_glyph_item_apply_attrs(PangoGlyphItem *glyph_item, const char *text, PangoAttrList *list)
     * }
     */
    public static MethodHandle pango_glyph_item_apply_attrs$handle() {
        return pango_glyph_item_apply_attrs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *pango_glyph_item_apply_attrs(PangoGlyphItem *glyph_item, const char *text, PangoAttrList *list)
     * }
     */
    public static MemorySegment pango_glyph_item_apply_attrs(MemorySegment glyph_item, MemorySegment text, MemorySegment list) {
        var mh$ = pango_glyph_item_apply_attrs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_apply_attrs", glyph_item, text, list);
            }
            return (MemorySegment)mh$.invokeExact(glyph_item, text, list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_letter_space {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_letter_space"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_item_letter_space(PangoGlyphItem *glyph_item, const char *text, PangoLogAttr *log_attrs, int letter_spacing)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_letter_space$descriptor() {
        return pango_glyph_item_letter_space.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_item_letter_space(PangoGlyphItem *glyph_item, const char *text, PangoLogAttr *log_attrs, int letter_spacing)
     * }
     */
    public static MethodHandle pango_glyph_item_letter_space$handle() {
        return pango_glyph_item_letter_space.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_item_letter_space(PangoGlyphItem *glyph_item, const char *text, PangoLogAttr *log_attrs, int letter_spacing)
     * }
     */
    public static void pango_glyph_item_letter_space(MemorySegment glyph_item, MemorySegment text, MemorySegment log_attrs, int letter_spacing) {
        var mh$ = pango_glyph_item_letter_space.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_letter_space", glyph_item, text, log_attrs, letter_spacing);
            }
            mh$.invokeExact(glyph_item, text, log_attrs, letter_spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_get_logical_widths {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_get_logical_widths"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_item_get_logical_widths(PangoGlyphItem *glyph_item, const char *text, int *logical_widths)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_get_logical_widths$descriptor() {
        return pango_glyph_item_get_logical_widths.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_item_get_logical_widths(PangoGlyphItem *glyph_item, const char *text, int *logical_widths)
     * }
     */
    public static MethodHandle pango_glyph_item_get_logical_widths$handle() {
        return pango_glyph_item_get_logical_widths.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_item_get_logical_widths(PangoGlyphItem *glyph_item, const char *text, int *logical_widths)
     * }
     */
    public static void pango_glyph_item_get_logical_widths(MemorySegment glyph_item, MemorySegment text, MemorySegment logical_widths) {
        var mh$ = pango_glyph_item_get_logical_widths.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_get_logical_widths", glyph_item, text, logical_widths);
            }
            mh$.invokeExact(glyph_item, text, logical_widths);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_iter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_iter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_glyph_item_iter_get_type()
     * }
     */
    public static FunctionDescriptor pango_glyph_item_iter_get_type$descriptor() {
        return pango_glyph_item_iter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_glyph_item_iter_get_type()
     * }
     */
    public static MethodHandle pango_glyph_item_iter_get_type$handle() {
        return pango_glyph_item_iter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_glyph_item_iter_get_type()
     * }
     */
    public static long pango_glyph_item_iter_get_type() {
        var mh$ = pango_glyph_item_iter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_iter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_iter_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_iter_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoGlyphItemIter *pango_glyph_item_iter_copy(PangoGlyphItemIter *orig)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_iter_copy$descriptor() {
        return pango_glyph_item_iter_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoGlyphItemIter *pango_glyph_item_iter_copy(PangoGlyphItemIter *orig)
     * }
     */
    public static MethodHandle pango_glyph_item_iter_copy$handle() {
        return pango_glyph_item_iter_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoGlyphItemIter *pango_glyph_item_iter_copy(PangoGlyphItemIter *orig)
     * }
     */
    public static MemorySegment pango_glyph_item_iter_copy(MemorySegment orig) {
        var mh$ = pango_glyph_item_iter_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_iter_copy", orig);
            }
            return (MemorySegment)mh$.invokeExact(orig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_iter_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_iter_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_glyph_item_iter_free(PangoGlyphItemIter *iter)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_iter_free$descriptor() {
        return pango_glyph_item_iter_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_glyph_item_iter_free(PangoGlyphItemIter *iter)
     * }
     */
    public static MethodHandle pango_glyph_item_iter_free$handle() {
        return pango_glyph_item_iter_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_glyph_item_iter_free(PangoGlyphItemIter *iter)
     * }
     */
    public static void pango_glyph_item_iter_free(MemorySegment iter) {
        var mh$ = pango_glyph_item_iter_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_iter_free", iter);
            }
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_iter_init_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_iter_init_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_init_start(PangoGlyphItemIter *iter, PangoGlyphItem *glyph_item, const char *text)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_iter_init_start$descriptor() {
        return pango_glyph_item_iter_init_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_init_start(PangoGlyphItemIter *iter, PangoGlyphItem *glyph_item, const char *text)
     * }
     */
    public static MethodHandle pango_glyph_item_iter_init_start$handle() {
        return pango_glyph_item_iter_init_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_init_start(PangoGlyphItemIter *iter, PangoGlyphItem *glyph_item, const char *text)
     * }
     */
    public static int pango_glyph_item_iter_init_start(MemorySegment iter, MemorySegment glyph_item, MemorySegment text) {
        var mh$ = pango_glyph_item_iter_init_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_iter_init_start", iter, glyph_item, text);
            }
            return (int)mh$.invokeExact(iter, glyph_item, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_iter_init_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_iter_init_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_init_end(PangoGlyphItemIter *iter, PangoGlyphItem *glyph_item, const char *text)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_iter_init_end$descriptor() {
        return pango_glyph_item_iter_init_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_init_end(PangoGlyphItemIter *iter, PangoGlyphItem *glyph_item, const char *text)
     * }
     */
    public static MethodHandle pango_glyph_item_iter_init_end$handle() {
        return pango_glyph_item_iter_init_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_init_end(PangoGlyphItemIter *iter, PangoGlyphItem *glyph_item, const char *text)
     * }
     */
    public static int pango_glyph_item_iter_init_end(MemorySegment iter, MemorySegment glyph_item, MemorySegment text) {
        var mh$ = pango_glyph_item_iter_init_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_iter_init_end", iter, glyph_item, text);
            }
            return (int)mh$.invokeExact(iter, glyph_item, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_iter_next_cluster {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_iter_next_cluster"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_next_cluster(PangoGlyphItemIter *iter)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_iter_next_cluster$descriptor() {
        return pango_glyph_item_iter_next_cluster.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_next_cluster(PangoGlyphItemIter *iter)
     * }
     */
    public static MethodHandle pango_glyph_item_iter_next_cluster$handle() {
        return pango_glyph_item_iter_next_cluster.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_next_cluster(PangoGlyphItemIter *iter)
     * }
     */
    public static int pango_glyph_item_iter_next_cluster(MemorySegment iter) {
        var mh$ = pango_glyph_item_iter_next_cluster.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_iter_next_cluster", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_glyph_item_iter_prev_cluster {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_glyph_item_iter_prev_cluster"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_prev_cluster(PangoGlyphItemIter *iter)
     * }
     */
    public static FunctionDescriptor pango_glyph_item_iter_prev_cluster$descriptor() {
        return pango_glyph_item_iter_prev_cluster.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_prev_cluster(PangoGlyphItemIter *iter)
     * }
     */
    public static MethodHandle pango_glyph_item_iter_prev_cluster$handle() {
        return pango_glyph_item_iter_prev_cluster.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_glyph_item_iter_prev_cluster(PangoGlyphItemIter *iter)
     * }
     */
    public static int pango_glyph_item_iter_prev_cluster(MemorySegment iter) {
        var mh$ = pango_glyph_item_iter_prev_cluster.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_glyph_item_iter_prev_cluster", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_TAB_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_TAB_LEFT = 0
     * }
     */
    public static int PANGO_TAB_LEFT() {
        return PANGO_TAB_LEFT;
    }
    private static final int PANGO_TAB_RIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_TAB_RIGHT = 1
     * }
     */
    public static int PANGO_TAB_RIGHT() {
        return PANGO_TAB_RIGHT;
    }
    private static final int PANGO_TAB_CENTER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_TAB_CENTER = 2
     * }
     */
    public static int PANGO_TAB_CENTER() {
        return PANGO_TAB_CENTER;
    }
    private static final int PANGO_TAB_DECIMAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_TAB_DECIMAL = 3
     * }
     */
    public static int PANGO_TAB_DECIMAL() {
        return PANGO_TAB_DECIMAL;
    }

    private static class pango_tab_array_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoTabArray *pango_tab_array_new(gint initial_size, gboolean positions_in_pixels)
     * }
     */
    public static FunctionDescriptor pango_tab_array_new$descriptor() {
        return pango_tab_array_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoTabArray *pango_tab_array_new(gint initial_size, gboolean positions_in_pixels)
     * }
     */
    public static MethodHandle pango_tab_array_new$handle() {
        return pango_tab_array_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoTabArray *pango_tab_array_new(gint initial_size, gboolean positions_in_pixels)
     * }
     */
    public static MemorySegment pango_tab_array_new(int initial_size, int positions_in_pixels) {
        var mh$ = pango_tab_array_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_new", initial_size, positions_in_pixels);
            }
            return (MemorySegment)mh$.invokeExact(initial_size, positions_in_pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern PangoTabArray *pango_tab_array_new_with_positions(gint size, gboolean positions_in_pixels, PangoTabAlign first_alignment, gint first_position, ...)
     * }
     */
    public static class pango_tab_array_new_with_positions {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("pango_tab_array_new_with_positions");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private pango_tab_array_new_with_positions(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern PangoTabArray *pango_tab_array_new_with_positions(gint size, gboolean positions_in_pixels, PangoTabAlign first_alignment, gint first_position, ...)
         * }
         */
        public static pango_tab_array_new_with_positions makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new pango_tab_array_new_with_positions(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int size, int positions_in_pixels, int first_alignment, int first_position, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("pango_tab_array_new_with_positions", size, positions_in_pixels, first_alignment, first_position, x4);
                }
                return (MemorySegment)spreader.invokeExact(size, positions_in_pixels, first_alignment, first_position, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class pango_tab_array_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_tab_array_get_type()
     * }
     */
    public static FunctionDescriptor pango_tab_array_get_type$descriptor() {
        return pango_tab_array_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_tab_array_get_type()
     * }
     */
    public static MethodHandle pango_tab_array_get_type$handle() {
        return pango_tab_array_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_tab_array_get_type()
     * }
     */
    public static long pango_tab_array_get_type() {
        var mh$ = pango_tab_array_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoTabArray *pango_tab_array_copy(PangoTabArray *src)
     * }
     */
    public static FunctionDescriptor pango_tab_array_copy$descriptor() {
        return pango_tab_array_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoTabArray *pango_tab_array_copy(PangoTabArray *src)
     * }
     */
    public static MethodHandle pango_tab_array_copy$handle() {
        return pango_tab_array_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoTabArray *pango_tab_array_copy(PangoTabArray *src)
     * }
     */
    public static MemorySegment pango_tab_array_copy(MemorySegment src) {
        var mh$ = pango_tab_array_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_copy", src);
            }
            return (MemorySegment)mh$.invokeExact(src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_tab_array_free(PangoTabArray *tab_array)
     * }
     */
    public static FunctionDescriptor pango_tab_array_free$descriptor() {
        return pango_tab_array_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_tab_array_free(PangoTabArray *tab_array)
     * }
     */
    public static MethodHandle pango_tab_array_free$handle() {
        return pango_tab_array_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_tab_array_free(PangoTabArray *tab_array)
     * }
     */
    public static void pango_tab_array_free(MemorySegment tab_array) {
        var mh$ = pango_tab_array_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_free", tab_array);
            }
            mh$.invokeExact(tab_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint pango_tab_array_get_size(PangoTabArray *tab_array)
     * }
     */
    public static FunctionDescriptor pango_tab_array_get_size$descriptor() {
        return pango_tab_array_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint pango_tab_array_get_size(PangoTabArray *tab_array)
     * }
     */
    public static MethodHandle pango_tab_array_get_size$handle() {
        return pango_tab_array_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint pango_tab_array_get_size(PangoTabArray *tab_array)
     * }
     */
    public static int pango_tab_array_get_size(MemorySegment tab_array) {
        var mh$ = pango_tab_array_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_get_size", tab_array);
            }
            return (int)mh$.invokeExact(tab_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_resize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_tab_array_resize(PangoTabArray *tab_array, gint new_size)
     * }
     */
    public static FunctionDescriptor pango_tab_array_resize$descriptor() {
        return pango_tab_array_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_tab_array_resize(PangoTabArray *tab_array, gint new_size)
     * }
     */
    public static MethodHandle pango_tab_array_resize$handle() {
        return pango_tab_array_resize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_tab_array_resize(PangoTabArray *tab_array, gint new_size)
     * }
     */
    public static void pango_tab_array_resize(MemorySegment tab_array, int new_size) {
        var mh$ = pango_tab_array_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_resize", tab_array, new_size);
            }
            mh$.invokeExact(tab_array, new_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_set_tab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_set_tab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_tab_array_set_tab(PangoTabArray *tab_array, gint tab_index, PangoTabAlign alignment, gint location)
     * }
     */
    public static FunctionDescriptor pango_tab_array_set_tab$descriptor() {
        return pango_tab_array_set_tab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_tab_array_set_tab(PangoTabArray *tab_array, gint tab_index, PangoTabAlign alignment, gint location)
     * }
     */
    public static MethodHandle pango_tab_array_set_tab$handle() {
        return pango_tab_array_set_tab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_tab_array_set_tab(PangoTabArray *tab_array, gint tab_index, PangoTabAlign alignment, gint location)
     * }
     */
    public static void pango_tab_array_set_tab(MemorySegment tab_array, int tab_index, int alignment, int location) {
        var mh$ = pango_tab_array_set_tab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_set_tab", tab_array, tab_index, alignment, location);
            }
            mh$.invokeExact(tab_array, tab_index, alignment, location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_get_tab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_get_tab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_tab_array_get_tab(PangoTabArray *tab_array, gint tab_index, PangoTabAlign *alignment, gint *location)
     * }
     */
    public static FunctionDescriptor pango_tab_array_get_tab$descriptor() {
        return pango_tab_array_get_tab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_tab_array_get_tab(PangoTabArray *tab_array, gint tab_index, PangoTabAlign *alignment, gint *location)
     * }
     */
    public static MethodHandle pango_tab_array_get_tab$handle() {
        return pango_tab_array_get_tab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_tab_array_get_tab(PangoTabArray *tab_array, gint tab_index, PangoTabAlign *alignment, gint *location)
     * }
     */
    public static void pango_tab_array_get_tab(MemorySegment tab_array, int tab_index, MemorySegment alignment, MemorySegment location) {
        var mh$ = pango_tab_array_get_tab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_get_tab", tab_array, tab_index, alignment, location);
            }
            mh$.invokeExact(tab_array, tab_index, alignment, location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_get_tabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_get_tabs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_tab_array_get_tabs(PangoTabArray *tab_array, PangoTabAlign **alignments, gint **locations)
     * }
     */
    public static FunctionDescriptor pango_tab_array_get_tabs$descriptor() {
        return pango_tab_array_get_tabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_tab_array_get_tabs(PangoTabArray *tab_array, PangoTabAlign **alignments, gint **locations)
     * }
     */
    public static MethodHandle pango_tab_array_get_tabs$handle() {
        return pango_tab_array_get_tabs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_tab_array_get_tabs(PangoTabArray *tab_array, PangoTabAlign **alignments, gint **locations)
     * }
     */
    public static void pango_tab_array_get_tabs(MemorySegment tab_array, MemorySegment alignments, MemorySegment locations) {
        var mh$ = pango_tab_array_get_tabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_get_tabs", tab_array, alignments, locations);
            }
            mh$.invokeExact(tab_array, alignments, locations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_get_positions_in_pixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_get_positions_in_pixels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_tab_array_get_positions_in_pixels(PangoTabArray *tab_array)
     * }
     */
    public static FunctionDescriptor pango_tab_array_get_positions_in_pixels$descriptor() {
        return pango_tab_array_get_positions_in_pixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_tab_array_get_positions_in_pixels(PangoTabArray *tab_array)
     * }
     */
    public static MethodHandle pango_tab_array_get_positions_in_pixels$handle() {
        return pango_tab_array_get_positions_in_pixels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_tab_array_get_positions_in_pixels(PangoTabArray *tab_array)
     * }
     */
    public static int pango_tab_array_get_positions_in_pixels(MemorySegment tab_array) {
        var mh$ = pango_tab_array_get_positions_in_pixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_get_positions_in_pixels", tab_array);
            }
            return (int)mh$.invokeExact(tab_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_set_positions_in_pixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_set_positions_in_pixels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_tab_array_set_positions_in_pixels(PangoTabArray *tab_array, gboolean positions_in_pixels)
     * }
     */
    public static FunctionDescriptor pango_tab_array_set_positions_in_pixels$descriptor() {
        return pango_tab_array_set_positions_in_pixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_tab_array_set_positions_in_pixels(PangoTabArray *tab_array, gboolean positions_in_pixels)
     * }
     */
    public static MethodHandle pango_tab_array_set_positions_in_pixels$handle() {
        return pango_tab_array_set_positions_in_pixels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_tab_array_set_positions_in_pixels(PangoTabArray *tab_array, gboolean positions_in_pixels)
     * }
     */
    public static void pango_tab_array_set_positions_in_pixels(MemorySegment tab_array, int positions_in_pixels) {
        var mh$ = pango_tab_array_set_positions_in_pixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_set_positions_in_pixels", tab_array, positions_in_pixels);
            }
            mh$.invokeExact(tab_array, positions_in_pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *pango_tab_array_to_string(PangoTabArray *tab_array)
     * }
     */
    public static FunctionDescriptor pango_tab_array_to_string$descriptor() {
        return pango_tab_array_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *pango_tab_array_to_string(PangoTabArray *tab_array)
     * }
     */
    public static MethodHandle pango_tab_array_to_string$handle() {
        return pango_tab_array_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *pango_tab_array_to_string(PangoTabArray *tab_array)
     * }
     */
    public static MemorySegment pango_tab_array_to_string(MemorySegment tab_array) {
        var mh$ = pango_tab_array_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_to_string", tab_array);
            }
            return (MemorySegment)mh$.invokeExact(tab_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoTabArray *pango_tab_array_from_string(const char *text)
     * }
     */
    public static FunctionDescriptor pango_tab_array_from_string$descriptor() {
        return pango_tab_array_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoTabArray *pango_tab_array_from_string(const char *text)
     * }
     */
    public static MethodHandle pango_tab_array_from_string$handle() {
        return pango_tab_array_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoTabArray *pango_tab_array_from_string(const char *text)
     * }
     */
    public static MemorySegment pango_tab_array_from_string(MemorySegment text) {
        var mh$ = pango_tab_array_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_from_string", text);
            }
            return (MemorySegment)mh$.invokeExact(text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_set_decimal_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_set_decimal_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_tab_array_set_decimal_point(PangoTabArray *tab_array, int tab_index, gunichar decimal_point)
     * }
     */
    public static FunctionDescriptor pango_tab_array_set_decimal_point$descriptor() {
        return pango_tab_array_set_decimal_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_tab_array_set_decimal_point(PangoTabArray *tab_array, int tab_index, gunichar decimal_point)
     * }
     */
    public static MethodHandle pango_tab_array_set_decimal_point$handle() {
        return pango_tab_array_set_decimal_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_tab_array_set_decimal_point(PangoTabArray *tab_array, int tab_index, gunichar decimal_point)
     * }
     */
    public static void pango_tab_array_set_decimal_point(MemorySegment tab_array, int tab_index, int decimal_point) {
        var mh$ = pango_tab_array_set_decimal_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_set_decimal_point", tab_array, tab_index, decimal_point);
            }
            mh$.invokeExact(tab_array, tab_index, decimal_point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_get_decimal_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_get_decimal_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar pango_tab_array_get_decimal_point(PangoTabArray *tab_array, int tab_index)
     * }
     */
    public static FunctionDescriptor pango_tab_array_get_decimal_point$descriptor() {
        return pango_tab_array_get_decimal_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar pango_tab_array_get_decimal_point(PangoTabArray *tab_array, int tab_index)
     * }
     */
    public static MethodHandle pango_tab_array_get_decimal_point$handle() {
        return pango_tab_array_get_decimal_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar pango_tab_array_get_decimal_point(PangoTabArray *tab_array, int tab_index)
     * }
     */
    public static int pango_tab_array_get_decimal_point(MemorySegment tab_array, int tab_index) {
        var mh$ = pango_tab_array_get_decimal_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_get_decimal_point", tab_array, tab_index);
            }
            return (int)mh$.invokeExact(tab_array, tab_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_tab_array_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_tab_array_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_tab_array_sort(PangoTabArray *tab_array)
     * }
     */
    public static FunctionDescriptor pango_tab_array_sort$descriptor() {
        return pango_tab_array_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_tab_array_sort(PangoTabArray *tab_array)
     * }
     */
    public static MethodHandle pango_tab_array_sort$handle() {
        return pango_tab_array_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_tab_array_sort(PangoTabArray *tab_array)
     * }
     */
    public static void pango_tab_array_sort(MemorySegment tab_array) {
        var mh$ = pango_tab_array_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_tab_array_sort", tab_array);
            }
            mh$.invokeExact(tab_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef PangoTabArray *PangoTabArray_autoptr
     * }
     */
    public static final AddressLayout PangoTabArray_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoTabArray_listautoptr
     * }
     */
    public static final AddressLayout PangoTabArray_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoTabArray_slistautoptr
     * }
     */
    public static final AddressLayout PangoTabArray_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoTabArray_queueautoptr
     * }
     */
    public static final AddressLayout PangoTabArray_queueautoptr = app_indicator_h.C_POINTER;
    private static final int PANGO_ALIGN_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ALIGN_LEFT = 0
     * }
     */
    public static int PANGO_ALIGN_LEFT() {
        return PANGO_ALIGN_LEFT;
    }
    private static final int PANGO_ALIGN_CENTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ALIGN_CENTER = 1
     * }
     */
    public static int PANGO_ALIGN_CENTER() {
        return PANGO_ALIGN_CENTER;
    }
    private static final int PANGO_ALIGN_RIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ALIGN_RIGHT = 2
     * }
     */
    public static int PANGO_ALIGN_RIGHT() {
        return PANGO_ALIGN_RIGHT;
    }
    private static final int PANGO_WRAP_WORD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WRAP_WORD = 0
     * }
     */
    public static int PANGO_WRAP_WORD() {
        return PANGO_WRAP_WORD;
    }
    private static final int PANGO_WRAP_CHAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WRAP_CHAR = 1
     * }
     */
    public static int PANGO_WRAP_CHAR() {
        return PANGO_WRAP_CHAR;
    }
    private static final int PANGO_WRAP_WORD_CHAR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_WRAP_WORD_CHAR = 2
     * }
     */
    public static int PANGO_WRAP_WORD_CHAR() {
        return PANGO_WRAP_WORD_CHAR;
    }
    private static final int PANGO_ELLIPSIZE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ELLIPSIZE_NONE = 0
     * }
     */
    public static int PANGO_ELLIPSIZE_NONE() {
        return PANGO_ELLIPSIZE_NONE;
    }
    private static final int PANGO_ELLIPSIZE_START = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ELLIPSIZE_START = 1
     * }
     */
    public static int PANGO_ELLIPSIZE_START() {
        return PANGO_ELLIPSIZE_START;
    }
    private static final int PANGO_ELLIPSIZE_MIDDLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ELLIPSIZE_MIDDLE = 2
     * }
     */
    public static int PANGO_ELLIPSIZE_MIDDLE() {
        return PANGO_ELLIPSIZE_MIDDLE;
    }
    private static final int PANGO_ELLIPSIZE_END = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_ELLIPSIZE_END = 3
     * }
     */
    public static int PANGO_ELLIPSIZE_END() {
        return PANGO_ELLIPSIZE_END;
    }

    private static class pango_layout_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_layout_get_type()
     * }
     */
    public static FunctionDescriptor pango_layout_get_type$descriptor() {
        return pango_layout_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_layout_get_type()
     * }
     */
    public static MethodHandle pango_layout_get_type$handle() {
        return pango_layout_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_layout_get_type()
     * }
     */
    public static long pango_layout_get_type() {
        var mh$ = pango_layout_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_new(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_layout_new$descriptor() {
        return pango_layout_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_new(PangoContext *context)
     * }
     */
    public static MethodHandle pango_layout_new$handle() {
        return pango_layout_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_new(PangoContext *context)
     * }
     */
    public static MemorySegment pango_layout_new(MemorySegment context) {
        var mh$ = pango_layout_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_new", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_copy(PangoLayout *src)
     * }
     */
    public static FunctionDescriptor pango_layout_copy$descriptor() {
        return pango_layout_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_copy(PangoLayout *src)
     * }
     */
    public static MethodHandle pango_layout_copy$handle() {
        return pango_layout_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_copy(PangoLayout *src)
     * }
     */
    public static MemorySegment pango_layout_copy(MemorySegment src) {
        var mh$ = pango_layout_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_copy", src);
            }
            return (MemorySegment)mh$.invokeExact(src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *pango_layout_get_context(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_context$descriptor() {
        return pango_layout_get_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *pango_layout_get_context(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_context$handle() {
        return pango_layout_get_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *pango_layout_get_context(PangoLayout *layout)
     * }
     */
    public static MemorySegment pango_layout_get_context(MemorySegment layout) {
        var mh$ = pango_layout_get_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_context", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_attributes(PangoLayout *layout, PangoAttrList *attrs)
     * }
     */
    public static FunctionDescriptor pango_layout_set_attributes$descriptor() {
        return pango_layout_set_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_attributes(PangoLayout *layout, PangoAttrList *attrs)
     * }
     */
    public static MethodHandle pango_layout_set_attributes$handle() {
        return pango_layout_set_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_attributes(PangoLayout *layout, PangoAttrList *attrs)
     * }
     */
    public static void pango_layout_set_attributes(MemorySegment layout, MemorySegment attrs) {
        var mh$ = pango_layout_set_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_attributes", layout, attrs);
            }
            mh$.invokeExact(layout, attrs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_layout_get_attributes(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_attributes$descriptor() {
        return pango_layout_get_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrList *pango_layout_get_attributes(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_attributes$handle() {
        return pango_layout_get_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrList *pango_layout_get_attributes(PangoLayout *layout)
     * }
     */
    public static MemorySegment pango_layout_get_attributes(MemorySegment layout) {
        var mh$ = pango_layout_get_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_attributes", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_text(PangoLayout *layout, const char *text, int length)
     * }
     */
    public static FunctionDescriptor pango_layout_set_text$descriptor() {
        return pango_layout_set_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_text(PangoLayout *layout, const char *text, int length)
     * }
     */
    public static MethodHandle pango_layout_set_text$handle() {
        return pango_layout_set_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_text(PangoLayout *layout, const char *text, int length)
     * }
     */
    public static void pango_layout_set_text(MemorySegment layout, MemorySegment text, int length) {
        var mh$ = pango_layout_set_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_text", layout, text, length);
            }
            mh$.invokeExact(layout, text, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *pango_layout_get_text(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_text$descriptor() {
        return pango_layout_get_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *pango_layout_get_text(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_text$handle() {
        return pango_layout_get_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *pango_layout_get_text(PangoLayout *layout)
     * }
     */
    public static MemorySegment pango_layout_get_text(MemorySegment layout) {
        var mh$ = pango_layout_get_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_text", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_character_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_character_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint pango_layout_get_character_count(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_character_count$descriptor() {
        return pango_layout_get_character_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint pango_layout_get_character_count(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_character_count$handle() {
        return pango_layout_get_character_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint pango_layout_get_character_count(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_character_count(MemorySegment layout) {
        var mh$ = pango_layout_get_character_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_character_count", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_markup(PangoLayout *layout, const char *markup, int length)
     * }
     */
    public static FunctionDescriptor pango_layout_set_markup$descriptor() {
        return pango_layout_set_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_markup(PangoLayout *layout, const char *markup, int length)
     * }
     */
    public static MethodHandle pango_layout_set_markup$handle() {
        return pango_layout_set_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_markup(PangoLayout *layout, const char *markup, int length)
     * }
     */
    public static void pango_layout_set_markup(MemorySegment layout, MemorySegment markup, int length) {
        var mh$ = pango_layout_set_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_markup", layout, markup, length);
            }
            mh$.invokeExact(layout, markup, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_markup_with_accel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_markup_with_accel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_markup_with_accel(PangoLayout *layout, const char *markup, int length, gunichar accel_marker, gunichar *accel_char)
     * }
     */
    public static FunctionDescriptor pango_layout_set_markup_with_accel$descriptor() {
        return pango_layout_set_markup_with_accel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_markup_with_accel(PangoLayout *layout, const char *markup, int length, gunichar accel_marker, gunichar *accel_char)
     * }
     */
    public static MethodHandle pango_layout_set_markup_with_accel$handle() {
        return pango_layout_set_markup_with_accel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_markup_with_accel(PangoLayout *layout, const char *markup, int length, gunichar accel_marker, gunichar *accel_char)
     * }
     */
    public static void pango_layout_set_markup_with_accel(MemorySegment layout, MemorySegment markup, int length, int accel_marker, MemorySegment accel_char) {
        var mh$ = pango_layout_set_markup_with_accel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_markup_with_accel", layout, markup, length, accel_marker, accel_char);
            }
            mh$.invokeExact(layout, markup, length, accel_marker, accel_char);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_font_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_font_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_font_description(PangoLayout *layout, const PangoFontDescription *desc)
     * }
     */
    public static FunctionDescriptor pango_layout_set_font_description$descriptor() {
        return pango_layout_set_font_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_font_description(PangoLayout *layout, const PangoFontDescription *desc)
     * }
     */
    public static MethodHandle pango_layout_set_font_description$handle() {
        return pango_layout_set_font_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_font_description(PangoLayout *layout, const PangoFontDescription *desc)
     * }
     */
    public static void pango_layout_set_font_description(MemorySegment layout, MemorySegment desc) {
        var mh$ = pango_layout_set_font_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_font_description", layout, desc);
            }
            mh$.invokeExact(layout, desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_font_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_font_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const PangoFontDescription *pango_layout_get_font_description(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_font_description$descriptor() {
        return pango_layout_get_font_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const PangoFontDescription *pango_layout_get_font_description(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_font_description$handle() {
        return pango_layout_get_font_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const PangoFontDescription *pango_layout_get_font_description(PangoLayout *layout)
     * }
     */
    public static MemorySegment pango_layout_get_font_description(MemorySegment layout) {
        var mh$ = pango_layout_get_font_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_font_description", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_width(PangoLayout *layout, int width)
     * }
     */
    public static FunctionDescriptor pango_layout_set_width$descriptor() {
        return pango_layout_set_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_width(PangoLayout *layout, int width)
     * }
     */
    public static MethodHandle pango_layout_set_width$handle() {
        return pango_layout_set_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_width(PangoLayout *layout, int width)
     * }
     */
    public static void pango_layout_set_width(MemorySegment layout, int width) {
        var mh$ = pango_layout_set_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_width", layout, width);
            }
            mh$.invokeExact(layout, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_get_width(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_width$descriptor() {
        return pango_layout_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_get_width(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_width$handle() {
        return pango_layout_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_get_width(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_width(MemorySegment layout) {
        var mh$ = pango_layout_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_width", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_height(PangoLayout *layout, int height)
     * }
     */
    public static FunctionDescriptor pango_layout_set_height$descriptor() {
        return pango_layout_set_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_height(PangoLayout *layout, int height)
     * }
     */
    public static MethodHandle pango_layout_set_height$handle() {
        return pango_layout_set_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_height(PangoLayout *layout, int height)
     * }
     */
    public static void pango_layout_set_height(MemorySegment layout, int height) {
        var mh$ = pango_layout_set_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_height", layout, height);
            }
            mh$.invokeExact(layout, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_get_height(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_height$descriptor() {
        return pango_layout_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_get_height(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_height$handle() {
        return pango_layout_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_get_height(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_height(MemorySegment layout) {
        var mh$ = pango_layout_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_height", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_wrap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_wrap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_wrap(PangoLayout *layout, PangoWrapMode wrap)
     * }
     */
    public static FunctionDescriptor pango_layout_set_wrap$descriptor() {
        return pango_layout_set_wrap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_wrap(PangoLayout *layout, PangoWrapMode wrap)
     * }
     */
    public static MethodHandle pango_layout_set_wrap$handle() {
        return pango_layout_set_wrap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_wrap(PangoLayout *layout, PangoWrapMode wrap)
     * }
     */
    public static void pango_layout_set_wrap(MemorySegment layout, int wrap) {
        var mh$ = pango_layout_set_wrap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_wrap", layout, wrap);
            }
            mh$.invokeExact(layout, wrap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_wrap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_wrap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoWrapMode pango_layout_get_wrap(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_wrap$descriptor() {
        return pango_layout_get_wrap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoWrapMode pango_layout_get_wrap(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_wrap$handle() {
        return pango_layout_get_wrap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoWrapMode pango_layout_get_wrap(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_wrap(MemorySegment layout) {
        var mh$ = pango_layout_get_wrap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_wrap", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_is_wrapped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_is_wrapped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_is_wrapped(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_is_wrapped$descriptor() {
        return pango_layout_is_wrapped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_is_wrapped(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_is_wrapped$handle() {
        return pango_layout_is_wrapped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_is_wrapped(PangoLayout *layout)
     * }
     */
    public static int pango_layout_is_wrapped(MemorySegment layout) {
        var mh$ = pango_layout_is_wrapped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_is_wrapped", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_indent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_indent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_indent(PangoLayout *layout, int indent)
     * }
     */
    public static FunctionDescriptor pango_layout_set_indent$descriptor() {
        return pango_layout_set_indent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_indent(PangoLayout *layout, int indent)
     * }
     */
    public static MethodHandle pango_layout_set_indent$handle() {
        return pango_layout_set_indent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_indent(PangoLayout *layout, int indent)
     * }
     */
    public static void pango_layout_set_indent(MemorySegment layout, int indent) {
        var mh$ = pango_layout_set_indent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_indent", layout, indent);
            }
            mh$.invokeExact(layout, indent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_indent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_indent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_get_indent(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_indent$descriptor() {
        return pango_layout_get_indent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_get_indent(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_indent$handle() {
        return pango_layout_get_indent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_get_indent(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_indent(MemorySegment layout) {
        var mh$ = pango_layout_get_indent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_indent", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_spacing(PangoLayout *layout, int spacing)
     * }
     */
    public static FunctionDescriptor pango_layout_set_spacing$descriptor() {
        return pango_layout_set_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_spacing(PangoLayout *layout, int spacing)
     * }
     */
    public static MethodHandle pango_layout_set_spacing$handle() {
        return pango_layout_set_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_spacing(PangoLayout *layout, int spacing)
     * }
     */
    public static void pango_layout_set_spacing(MemorySegment layout, int spacing) {
        var mh$ = pango_layout_set_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_spacing", layout, spacing);
            }
            mh$.invokeExact(layout, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_get_spacing(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_spacing$descriptor() {
        return pango_layout_get_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_get_spacing(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_spacing$handle() {
        return pango_layout_get_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_get_spacing(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_spacing(MemorySegment layout) {
        var mh$ = pango_layout_get_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_spacing", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_line_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_line_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_line_spacing(PangoLayout *layout, float factor)
     * }
     */
    public static FunctionDescriptor pango_layout_set_line_spacing$descriptor() {
        return pango_layout_set_line_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_line_spacing(PangoLayout *layout, float factor)
     * }
     */
    public static MethodHandle pango_layout_set_line_spacing$handle() {
        return pango_layout_set_line_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_line_spacing(PangoLayout *layout, float factor)
     * }
     */
    public static void pango_layout_set_line_spacing(MemorySegment layout, float factor) {
        var mh$ = pango_layout_set_line_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_line_spacing", layout, factor);
            }
            mh$.invokeExact(layout, factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_line_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_line_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float pango_layout_get_line_spacing(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_line_spacing$descriptor() {
        return pango_layout_get_line_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float pango_layout_get_line_spacing(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_line_spacing$handle() {
        return pango_layout_get_line_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern float pango_layout_get_line_spacing(PangoLayout *layout)
     * }
     */
    public static float pango_layout_get_line_spacing(MemorySegment layout) {
        var mh$ = pango_layout_get_line_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_line_spacing", layout);
            }
            return (float)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_justify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_justify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_justify(PangoLayout *layout, gboolean justify)
     * }
     */
    public static FunctionDescriptor pango_layout_set_justify$descriptor() {
        return pango_layout_set_justify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_justify(PangoLayout *layout, gboolean justify)
     * }
     */
    public static MethodHandle pango_layout_set_justify$handle() {
        return pango_layout_set_justify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_justify(PangoLayout *layout, gboolean justify)
     * }
     */
    public static void pango_layout_set_justify(MemorySegment layout, int justify) {
        var mh$ = pango_layout_set_justify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_justify", layout, justify);
            }
            mh$.invokeExact(layout, justify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_justify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_justify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_justify(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_justify$descriptor() {
        return pango_layout_get_justify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_justify(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_justify$handle() {
        return pango_layout_get_justify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_justify(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_justify(MemorySegment layout) {
        var mh$ = pango_layout_get_justify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_justify", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_justify_last_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_justify_last_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_justify_last_line(PangoLayout *layout, gboolean justify)
     * }
     */
    public static FunctionDescriptor pango_layout_set_justify_last_line$descriptor() {
        return pango_layout_set_justify_last_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_justify_last_line(PangoLayout *layout, gboolean justify)
     * }
     */
    public static MethodHandle pango_layout_set_justify_last_line$handle() {
        return pango_layout_set_justify_last_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_justify_last_line(PangoLayout *layout, gboolean justify)
     * }
     */
    public static void pango_layout_set_justify_last_line(MemorySegment layout, int justify) {
        var mh$ = pango_layout_set_justify_last_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_justify_last_line", layout, justify);
            }
            mh$.invokeExact(layout, justify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_justify_last_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_justify_last_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_justify_last_line(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_justify_last_line$descriptor() {
        return pango_layout_get_justify_last_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_justify_last_line(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_justify_last_line$handle() {
        return pango_layout_get_justify_last_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_justify_last_line(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_justify_last_line(MemorySegment layout) {
        var mh$ = pango_layout_get_justify_last_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_justify_last_line", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_auto_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_auto_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_auto_dir(PangoLayout *layout, gboolean auto_dir)
     * }
     */
    public static FunctionDescriptor pango_layout_set_auto_dir$descriptor() {
        return pango_layout_set_auto_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_auto_dir(PangoLayout *layout, gboolean auto_dir)
     * }
     */
    public static MethodHandle pango_layout_set_auto_dir$handle() {
        return pango_layout_set_auto_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_auto_dir(PangoLayout *layout, gboolean auto_dir)
     * }
     */
    public static void pango_layout_set_auto_dir(MemorySegment layout, int auto_dir) {
        var mh$ = pango_layout_set_auto_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_auto_dir", layout, auto_dir);
            }
            mh$.invokeExact(layout, auto_dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_auto_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_auto_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_auto_dir(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_auto_dir$descriptor() {
        return pango_layout_get_auto_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_auto_dir(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_auto_dir$handle() {
        return pango_layout_get_auto_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_auto_dir(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_auto_dir(MemorySegment layout) {
        var mh$ = pango_layout_get_auto_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_auto_dir", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_alignment(PangoLayout *layout, PangoAlignment alignment)
     * }
     */
    public static FunctionDescriptor pango_layout_set_alignment$descriptor() {
        return pango_layout_set_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_alignment(PangoLayout *layout, PangoAlignment alignment)
     * }
     */
    public static MethodHandle pango_layout_set_alignment$handle() {
        return pango_layout_set_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_alignment(PangoLayout *layout, PangoAlignment alignment)
     * }
     */
    public static void pango_layout_set_alignment(MemorySegment layout, int alignment) {
        var mh$ = pango_layout_set_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_alignment", layout, alignment);
            }
            mh$.invokeExact(layout, alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAlignment pango_layout_get_alignment(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_alignment$descriptor() {
        return pango_layout_get_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAlignment pango_layout_get_alignment(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_alignment$handle() {
        return pango_layout_get_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAlignment pango_layout_get_alignment(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_alignment(MemorySegment layout) {
        var mh$ = pango_layout_get_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_alignment", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_tabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_tabs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_tabs(PangoLayout *layout, PangoTabArray *tabs)
     * }
     */
    public static FunctionDescriptor pango_layout_set_tabs$descriptor() {
        return pango_layout_set_tabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_tabs(PangoLayout *layout, PangoTabArray *tabs)
     * }
     */
    public static MethodHandle pango_layout_set_tabs$handle() {
        return pango_layout_set_tabs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_tabs(PangoLayout *layout, PangoTabArray *tabs)
     * }
     */
    public static void pango_layout_set_tabs(MemorySegment layout, MemorySegment tabs) {
        var mh$ = pango_layout_set_tabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_tabs", layout, tabs);
            }
            mh$.invokeExact(layout, tabs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_tabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_tabs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoTabArray *pango_layout_get_tabs(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_tabs$descriptor() {
        return pango_layout_get_tabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoTabArray *pango_layout_get_tabs(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_tabs$handle() {
        return pango_layout_get_tabs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoTabArray *pango_layout_get_tabs(PangoLayout *layout)
     * }
     */
    public static MemorySegment pango_layout_get_tabs(MemorySegment layout) {
        var mh$ = pango_layout_get_tabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_tabs", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_single_paragraph_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_single_paragraph_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_single_paragraph_mode(PangoLayout *layout, gboolean setting)
     * }
     */
    public static FunctionDescriptor pango_layout_set_single_paragraph_mode$descriptor() {
        return pango_layout_set_single_paragraph_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_single_paragraph_mode(PangoLayout *layout, gboolean setting)
     * }
     */
    public static MethodHandle pango_layout_set_single_paragraph_mode$handle() {
        return pango_layout_set_single_paragraph_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_single_paragraph_mode(PangoLayout *layout, gboolean setting)
     * }
     */
    public static void pango_layout_set_single_paragraph_mode(MemorySegment layout, int setting) {
        var mh$ = pango_layout_set_single_paragraph_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_single_paragraph_mode", layout, setting);
            }
            mh$.invokeExact(layout, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_single_paragraph_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_single_paragraph_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_single_paragraph_mode(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_single_paragraph_mode$descriptor() {
        return pango_layout_get_single_paragraph_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_single_paragraph_mode(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_single_paragraph_mode$handle() {
        return pango_layout_get_single_paragraph_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_get_single_paragraph_mode(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_single_paragraph_mode(MemorySegment layout) {
        var mh$ = pango_layout_get_single_paragraph_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_single_paragraph_mode", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_set_ellipsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_set_ellipsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_set_ellipsize(PangoLayout *layout, PangoEllipsizeMode ellipsize)
     * }
     */
    public static FunctionDescriptor pango_layout_set_ellipsize$descriptor() {
        return pango_layout_set_ellipsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_set_ellipsize(PangoLayout *layout, PangoEllipsizeMode ellipsize)
     * }
     */
    public static MethodHandle pango_layout_set_ellipsize$handle() {
        return pango_layout_set_ellipsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_set_ellipsize(PangoLayout *layout, PangoEllipsizeMode ellipsize)
     * }
     */
    public static void pango_layout_set_ellipsize(MemorySegment layout, int ellipsize) {
        var mh$ = pango_layout_set_ellipsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_set_ellipsize", layout, ellipsize);
            }
            mh$.invokeExact(layout, ellipsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_ellipsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_ellipsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode pango_layout_get_ellipsize(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_ellipsize$descriptor() {
        return pango_layout_get_ellipsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoEllipsizeMode pango_layout_get_ellipsize(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_ellipsize$handle() {
        return pango_layout_get_ellipsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoEllipsizeMode pango_layout_get_ellipsize(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_ellipsize(MemorySegment layout) {
        var mh$ = pango_layout_get_ellipsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_ellipsize", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_is_ellipsized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_is_ellipsized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_is_ellipsized(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_is_ellipsized$descriptor() {
        return pango_layout_is_ellipsized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_is_ellipsized(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_is_ellipsized$handle() {
        return pango_layout_is_ellipsized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_is_ellipsized(PangoLayout *layout)
     * }
     */
    public static int pango_layout_is_ellipsized(MemorySegment layout) {
        var mh$ = pango_layout_is_ellipsized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_is_ellipsized", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_unknown_glyphs_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_unknown_glyphs_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_get_unknown_glyphs_count(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_unknown_glyphs_count$descriptor() {
        return pango_layout_get_unknown_glyphs_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_get_unknown_glyphs_count(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_unknown_glyphs_count$handle() {
        return pango_layout_get_unknown_glyphs_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_get_unknown_glyphs_count(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_unknown_glyphs_count(MemorySegment layout) {
        var mh$ = pango_layout_get_unknown_glyphs_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_unknown_glyphs_count", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoDirection pango_layout_get_direction(PangoLayout *layout, int index)
     * }
     */
    public static FunctionDescriptor pango_layout_get_direction$descriptor() {
        return pango_layout_get_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoDirection pango_layout_get_direction(PangoLayout *layout, int index)
     * }
     */
    public static MethodHandle pango_layout_get_direction$handle() {
        return pango_layout_get_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoDirection pango_layout_get_direction(PangoLayout *layout, int index)
     * }
     */
    public static int pango_layout_get_direction(MemorySegment layout, int index) {
        var mh$ = pango_layout_get_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_direction", layout, index);
            }
            return (int)mh$.invokeExact(layout, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_context_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_context_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_context_changed(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_context_changed$descriptor() {
        return pango_layout_context_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_context_changed(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_context_changed$handle() {
        return pango_layout_context_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_context_changed(PangoLayout *layout)
     * }
     */
    public static void pango_layout_context_changed(MemorySegment layout) {
        var mh$ = pango_layout_context_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_context_changed", layout);
            }
            mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint pango_layout_get_serial(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_serial$descriptor() {
        return pango_layout_get_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint pango_layout_get_serial(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_serial$handle() {
        return pango_layout_get_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint pango_layout_get_serial(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_serial(MemorySegment layout) {
        var mh$ = pango_layout_get_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_serial", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_log_attrs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_log_attrs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_get_log_attrs(PangoLayout *layout, PangoLogAttr **attrs, gint *n_attrs)
     * }
     */
    public static FunctionDescriptor pango_layout_get_log_attrs$descriptor() {
        return pango_layout_get_log_attrs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_get_log_attrs(PangoLayout *layout, PangoLogAttr **attrs, gint *n_attrs)
     * }
     */
    public static MethodHandle pango_layout_get_log_attrs$handle() {
        return pango_layout_get_log_attrs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_get_log_attrs(PangoLayout *layout, PangoLogAttr **attrs, gint *n_attrs)
     * }
     */
    public static void pango_layout_get_log_attrs(MemorySegment layout, MemorySegment attrs, MemorySegment n_attrs) {
        var mh$ = pango_layout_get_log_attrs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_log_attrs", layout, attrs, n_attrs);
            }
            mh$.invokeExact(layout, attrs, n_attrs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_log_attrs_readonly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_log_attrs_readonly"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const PangoLogAttr *pango_layout_get_log_attrs_readonly(PangoLayout *layout, gint *n_attrs)
     * }
     */
    public static FunctionDescriptor pango_layout_get_log_attrs_readonly$descriptor() {
        return pango_layout_get_log_attrs_readonly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const PangoLogAttr *pango_layout_get_log_attrs_readonly(PangoLayout *layout, gint *n_attrs)
     * }
     */
    public static MethodHandle pango_layout_get_log_attrs_readonly$handle() {
        return pango_layout_get_log_attrs_readonly.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const PangoLogAttr *pango_layout_get_log_attrs_readonly(PangoLayout *layout, gint *n_attrs)
     * }
     */
    public static MemorySegment pango_layout_get_log_attrs_readonly(MemorySegment layout, MemorySegment n_attrs) {
        var mh$ = pango_layout_get_log_attrs_readonly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_log_attrs_readonly", layout, n_attrs);
            }
            return (MemorySegment)mh$.invokeExact(layout, n_attrs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_index_to_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_index_to_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_index_to_pos(PangoLayout *layout, int index_, PangoRectangle *pos)
     * }
     */
    public static FunctionDescriptor pango_layout_index_to_pos$descriptor() {
        return pango_layout_index_to_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_index_to_pos(PangoLayout *layout, int index_, PangoRectangle *pos)
     * }
     */
    public static MethodHandle pango_layout_index_to_pos$handle() {
        return pango_layout_index_to_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_index_to_pos(PangoLayout *layout, int index_, PangoRectangle *pos)
     * }
     */
    public static void pango_layout_index_to_pos(MemorySegment layout, int index_, MemorySegment pos) {
        var mh$ = pango_layout_index_to_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_index_to_pos", layout, index_, pos);
            }
            mh$.invokeExact(layout, index_, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_index_to_line_x {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_index_to_line_x"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_index_to_line_x(PangoLayout *layout, int index_, gboolean trailing, int *line, int *x_pos)
     * }
     */
    public static FunctionDescriptor pango_layout_index_to_line_x$descriptor() {
        return pango_layout_index_to_line_x.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_index_to_line_x(PangoLayout *layout, int index_, gboolean trailing, int *line, int *x_pos)
     * }
     */
    public static MethodHandle pango_layout_index_to_line_x$handle() {
        return pango_layout_index_to_line_x.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_index_to_line_x(PangoLayout *layout, int index_, gboolean trailing, int *line, int *x_pos)
     * }
     */
    public static void pango_layout_index_to_line_x(MemorySegment layout, int index_, int trailing, MemorySegment line, MemorySegment x_pos) {
        var mh$ = pango_layout_index_to_line_x.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_index_to_line_x", layout, index_, trailing, line, x_pos);
            }
            mh$.invokeExact(layout, index_, trailing, line, x_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_cursor_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_cursor_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_get_cursor_pos(PangoLayout *layout, int index_, PangoRectangle *strong_pos, PangoRectangle *weak_pos)
     * }
     */
    public static FunctionDescriptor pango_layout_get_cursor_pos$descriptor() {
        return pango_layout_get_cursor_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_get_cursor_pos(PangoLayout *layout, int index_, PangoRectangle *strong_pos, PangoRectangle *weak_pos)
     * }
     */
    public static MethodHandle pango_layout_get_cursor_pos$handle() {
        return pango_layout_get_cursor_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_get_cursor_pos(PangoLayout *layout, int index_, PangoRectangle *strong_pos, PangoRectangle *weak_pos)
     * }
     */
    public static void pango_layout_get_cursor_pos(MemorySegment layout, int index_, MemorySegment strong_pos, MemorySegment weak_pos) {
        var mh$ = pango_layout_get_cursor_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_cursor_pos", layout, index_, strong_pos, weak_pos);
            }
            mh$.invokeExact(layout, index_, strong_pos, weak_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_caret_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_caret_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_get_caret_pos(PangoLayout *layout, int index_, PangoRectangle *strong_pos, PangoRectangle *weak_pos)
     * }
     */
    public static FunctionDescriptor pango_layout_get_caret_pos$descriptor() {
        return pango_layout_get_caret_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_get_caret_pos(PangoLayout *layout, int index_, PangoRectangle *strong_pos, PangoRectangle *weak_pos)
     * }
     */
    public static MethodHandle pango_layout_get_caret_pos$handle() {
        return pango_layout_get_caret_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_get_caret_pos(PangoLayout *layout, int index_, PangoRectangle *strong_pos, PangoRectangle *weak_pos)
     * }
     */
    public static void pango_layout_get_caret_pos(MemorySegment layout, int index_, MemorySegment strong_pos, MemorySegment weak_pos) {
        var mh$ = pango_layout_get_caret_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_caret_pos", layout, index_, strong_pos, weak_pos);
            }
            mh$.invokeExact(layout, index_, strong_pos, weak_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_move_cursor_visually {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_move_cursor_visually"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_move_cursor_visually(PangoLayout *layout, gboolean strong, int old_index, int old_trailing, int direction, int *new_index, int *new_trailing)
     * }
     */
    public static FunctionDescriptor pango_layout_move_cursor_visually$descriptor() {
        return pango_layout_move_cursor_visually.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_move_cursor_visually(PangoLayout *layout, gboolean strong, int old_index, int old_trailing, int direction, int *new_index, int *new_trailing)
     * }
     */
    public static MethodHandle pango_layout_move_cursor_visually$handle() {
        return pango_layout_move_cursor_visually.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_move_cursor_visually(PangoLayout *layout, gboolean strong, int old_index, int old_trailing, int direction, int *new_index, int *new_trailing)
     * }
     */
    public static void pango_layout_move_cursor_visually(MemorySegment layout, int strong, int old_index, int old_trailing, int direction, MemorySegment new_index, MemorySegment new_trailing) {
        var mh$ = pango_layout_move_cursor_visually.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_move_cursor_visually", layout, strong, old_index, old_trailing, direction, new_index, new_trailing);
            }
            mh$.invokeExact(layout, strong, old_index, old_trailing, direction, new_index, new_trailing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_xy_to_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_xy_to_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_xy_to_index(PangoLayout *layout, int x, int y, int *index_, int *trailing)
     * }
     */
    public static FunctionDescriptor pango_layout_xy_to_index$descriptor() {
        return pango_layout_xy_to_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_xy_to_index(PangoLayout *layout, int x, int y, int *index_, int *trailing)
     * }
     */
    public static MethodHandle pango_layout_xy_to_index$handle() {
        return pango_layout_xy_to_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_xy_to_index(PangoLayout *layout, int x, int y, int *index_, int *trailing)
     * }
     */
    public static int pango_layout_xy_to_index(MemorySegment layout, int x, int y, MemorySegment index_, MemorySegment trailing) {
        var mh$ = pango_layout_xy_to_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_xy_to_index", layout, x, y, index_, trailing);
            }
            return (int)mh$.invokeExact(layout, x, y, index_, trailing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_get_extents(PangoLayout *layout, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_layout_get_extents$descriptor() {
        return pango_layout_get_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_get_extents(PangoLayout *layout, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_layout_get_extents$handle() {
        return pango_layout_get_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_get_extents(PangoLayout *layout, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_layout_get_extents(MemorySegment layout, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_layout_get_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_extents", layout, ink_rect, logical_rect);
            }
            mh$.invokeExact(layout, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_pixel_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_pixel_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_get_pixel_extents(PangoLayout *layout, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_layout_get_pixel_extents$descriptor() {
        return pango_layout_get_pixel_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_get_pixel_extents(PangoLayout *layout, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_layout_get_pixel_extents$handle() {
        return pango_layout_get_pixel_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_get_pixel_extents(PangoLayout *layout, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_layout_get_pixel_extents(MemorySegment layout, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_layout_get_pixel_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_pixel_extents", layout, ink_rect, logical_rect);
            }
            mh$.invokeExact(layout, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_get_size(PangoLayout *layout, int *width, int *height)
     * }
     */
    public static FunctionDescriptor pango_layout_get_size$descriptor() {
        return pango_layout_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_get_size(PangoLayout *layout, int *width, int *height)
     * }
     */
    public static MethodHandle pango_layout_get_size$handle() {
        return pango_layout_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_get_size(PangoLayout *layout, int *width, int *height)
     * }
     */
    public static void pango_layout_get_size(MemorySegment layout, MemorySegment width, MemorySegment height) {
        var mh$ = pango_layout_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_size", layout, width, height);
            }
            mh$.invokeExact(layout, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_pixel_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_pixel_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_get_pixel_size(PangoLayout *layout, int *width, int *height)
     * }
     */
    public static FunctionDescriptor pango_layout_get_pixel_size$descriptor() {
        return pango_layout_get_pixel_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_get_pixel_size(PangoLayout *layout, int *width, int *height)
     * }
     */
    public static MethodHandle pango_layout_get_pixel_size$handle() {
        return pango_layout_get_pixel_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_get_pixel_size(PangoLayout *layout, int *width, int *height)
     * }
     */
    public static void pango_layout_get_pixel_size(MemorySegment layout, MemorySegment width, MemorySegment height) {
        var mh$ = pango_layout_get_pixel_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_pixel_size", layout, width, height);
            }
            mh$.invokeExact(layout, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_baseline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_baseline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_get_baseline(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_baseline$descriptor() {
        return pango_layout_get_baseline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_get_baseline(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_baseline$handle() {
        return pango_layout_get_baseline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_get_baseline(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_baseline(MemorySegment layout) {
        var mh$ = pango_layout_get_baseline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_baseline", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_line_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_line_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_get_line_count(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_line_count$descriptor() {
        return pango_layout_get_line_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_get_line_count(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_line_count$handle() {
        return pango_layout_get_line_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_get_line_count(PangoLayout *layout)
     * }
     */
    public static int pango_layout_get_line_count(MemorySegment layout) {
        var mh$ = pango_layout_get_line_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_line_count", layout);
            }
            return (int)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_get_line(PangoLayout *layout, int line)
     * }
     */
    public static FunctionDescriptor pango_layout_get_line$descriptor() {
        return pango_layout_get_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_get_line(PangoLayout *layout, int line)
     * }
     */
    public static MethodHandle pango_layout_get_line$handle() {
        return pango_layout_get_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_get_line(PangoLayout *layout, int line)
     * }
     */
    public static MemorySegment pango_layout_get_line(MemorySegment layout, int line) {
        var mh$ = pango_layout_get_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_line", layout, line);
            }
            return (MemorySegment)mh$.invokeExact(layout, line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_line_readonly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_line_readonly"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_get_line_readonly(PangoLayout *layout, int line)
     * }
     */
    public static FunctionDescriptor pango_layout_get_line_readonly$descriptor() {
        return pango_layout_get_line_readonly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_get_line_readonly(PangoLayout *layout, int line)
     * }
     */
    public static MethodHandle pango_layout_get_line_readonly$handle() {
        return pango_layout_get_line_readonly.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_get_line_readonly(PangoLayout *layout, int line)
     * }
     */
    public static MemorySegment pango_layout_get_line_readonly(MemorySegment layout, int line) {
        var mh$ = pango_layout_get_line_readonly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_line_readonly", layout, line);
            }
            return (MemorySegment)mh$.invokeExact(layout, line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *pango_layout_get_lines(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_lines$descriptor() {
        return pango_layout_get_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *pango_layout_get_lines(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_lines$handle() {
        return pango_layout_get_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *pango_layout_get_lines(PangoLayout *layout)
     * }
     */
    public static MemorySegment pango_layout_get_lines(MemorySegment layout) {
        var mh$ = pango_layout_get_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_lines", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_lines_readonly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_lines_readonly"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *pango_layout_get_lines_readonly(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_lines_readonly$descriptor() {
        return pango_layout_get_lines_readonly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *pango_layout_get_lines_readonly(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_lines_readonly$handle() {
        return pango_layout_get_lines_readonly.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *pango_layout_get_lines_readonly(PangoLayout *layout)
     * }
     */
    public static MemorySegment pango_layout_get_lines_readonly(MemorySegment layout) {
        var mh$ = pango_layout_get_lines_readonly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_lines_readonly", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_LAYOUT_SERIALIZE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_LAYOUT_SERIALIZE_DEFAULT = 0
     * }
     */
    public static int PANGO_LAYOUT_SERIALIZE_DEFAULT() {
        return PANGO_LAYOUT_SERIALIZE_DEFAULT;
    }
    private static final int PANGO_LAYOUT_SERIALIZE_CONTEXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_LAYOUT_SERIALIZE_CONTEXT = 1
     * }
     */
    public static int PANGO_LAYOUT_SERIALIZE_CONTEXT() {
        return PANGO_LAYOUT_SERIALIZE_CONTEXT;
    }
    private static final int PANGO_LAYOUT_SERIALIZE_OUTPUT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_LAYOUT_SERIALIZE_OUTPUT = 2
     * }
     */
    public static int PANGO_LAYOUT_SERIALIZE_OUTPUT() {
        return PANGO_LAYOUT_SERIALIZE_OUTPUT;
    }

    private static class pango_layout_serialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_serialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *pango_layout_serialize(PangoLayout *layout, PangoLayoutSerializeFlags flags)
     * }
     */
    public static FunctionDescriptor pango_layout_serialize$descriptor() {
        return pango_layout_serialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *pango_layout_serialize(PangoLayout *layout, PangoLayoutSerializeFlags flags)
     * }
     */
    public static MethodHandle pango_layout_serialize$handle() {
        return pango_layout_serialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *pango_layout_serialize(PangoLayout *layout, PangoLayoutSerializeFlags flags)
     * }
     */
    public static MemorySegment pango_layout_serialize(MemorySegment layout, int flags) {
        var mh$ = pango_layout_serialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_serialize", layout, flags);
            }
            return (MemorySegment)mh$.invokeExact(layout, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_write_to_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_write_to_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_write_to_file(PangoLayout *layout, PangoLayoutSerializeFlags flags, const char *filename, GError **error)
     * }
     */
    public static FunctionDescriptor pango_layout_write_to_file$descriptor() {
        return pango_layout_write_to_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_write_to_file(PangoLayout *layout, PangoLayoutSerializeFlags flags, const char *filename, GError **error)
     * }
     */
    public static MethodHandle pango_layout_write_to_file$handle() {
        return pango_layout_write_to_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_write_to_file(PangoLayout *layout, PangoLayoutSerializeFlags flags, const char *filename, GError **error)
     * }
     */
    public static int pango_layout_write_to_file(MemorySegment layout, int flags, MemorySegment filename, MemorySegment error) {
        var mh$ = pango_layout_write_to_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_write_to_file", layout, flags, filename, error);
            }
            return (int)mh$.invokeExact(layout, flags, filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_LAYOUT_DESERIALIZE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_LAYOUT_DESERIALIZE_INVALID = 0
     * }
     */
    public static int PANGO_LAYOUT_DESERIALIZE_INVALID() {
        return PANGO_LAYOUT_DESERIALIZE_INVALID;
    }
    private static final int PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE = 1
     * }
     */
    public static int PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE() {
        return PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE;
    }
    private static final int PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE = 2
     * }
     */
    public static int PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE() {
        return PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE;
    }

    private static class pango_layout_deserialize_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_deserialize_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark pango_layout_deserialize_error_quark()
     * }
     */
    public static FunctionDescriptor pango_layout_deserialize_error_quark$descriptor() {
        return pango_layout_deserialize_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark pango_layout_deserialize_error_quark()
     * }
     */
    public static MethodHandle pango_layout_deserialize_error_quark$handle() {
        return pango_layout_deserialize_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark pango_layout_deserialize_error_quark()
     * }
     */
    public static int pango_layout_deserialize_error_quark() {
        var mh$ = pango_layout_deserialize_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_deserialize_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_LAYOUT_DESERIALIZE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_LAYOUT_DESERIALIZE_DEFAULT = 0
     * }
     */
    public static int PANGO_LAYOUT_DESERIALIZE_DEFAULT() {
        return PANGO_LAYOUT_DESERIALIZE_DEFAULT;
    }
    private static final int PANGO_LAYOUT_DESERIALIZE_CONTEXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_LAYOUT_DESERIALIZE_CONTEXT = 1
     * }
     */
    public static int PANGO_LAYOUT_DESERIALIZE_CONTEXT() {
        return PANGO_LAYOUT_DESERIALIZE_CONTEXT;
    }

    private static class pango_layout_deserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_deserialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_deserialize(PangoContext *context, GBytes *bytes, PangoLayoutDeserializeFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor pango_layout_deserialize$descriptor() {
        return pango_layout_deserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_deserialize(PangoContext *context, GBytes *bytes, PangoLayoutDeserializeFlags flags, GError **error)
     * }
     */
    public static MethodHandle pango_layout_deserialize$handle() {
        return pango_layout_deserialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_deserialize(PangoContext *context, GBytes *bytes, PangoLayoutDeserializeFlags flags, GError **error)
     * }
     */
    public static MemorySegment pango_layout_deserialize(MemorySegment context, MemorySegment bytes, int flags, MemorySegment error) {
        var mh$ = pango_layout_deserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_deserialize", context, bytes, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(context, bytes, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_layout_line_get_type()
     * }
     */
    public static FunctionDescriptor pango_layout_line_get_type$descriptor() {
        return pango_layout_line_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_layout_line_get_type()
     * }
     */
    public static MethodHandle pango_layout_line_get_type$handle() {
        return pango_layout_line_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_layout_line_get_type()
     * }
     */
    public static long pango_layout_line_get_type() {
        var mh$ = pango_layout_line_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_line_ref(PangoLayoutLine *line)
     * }
     */
    public static FunctionDescriptor pango_layout_line_ref$descriptor() {
        return pango_layout_line_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_line_ref(PangoLayoutLine *line)
     * }
     */
    public static MethodHandle pango_layout_line_ref$handle() {
        return pango_layout_line_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_line_ref(PangoLayoutLine *line)
     * }
     */
    public static MemorySegment pango_layout_line_ref(MemorySegment line) {
        var mh$ = pango_layout_line_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_ref", line);
            }
            return (MemorySegment)mh$.invokeExact(line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_line_unref(PangoLayoutLine *line)
     * }
     */
    public static FunctionDescriptor pango_layout_line_unref$descriptor() {
        return pango_layout_line_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_line_unref(PangoLayoutLine *line)
     * }
     */
    public static MethodHandle pango_layout_line_unref$handle() {
        return pango_layout_line_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_line_unref(PangoLayoutLine *line)
     * }
     */
    public static void pango_layout_line_unref(MemorySegment line) {
        var mh$ = pango_layout_line_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_unref", line);
            }
            mh$.invokeExact(line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_get_start_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_get_start_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_line_get_start_index(PangoLayoutLine *line)
     * }
     */
    public static FunctionDescriptor pango_layout_line_get_start_index$descriptor() {
        return pango_layout_line_get_start_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_line_get_start_index(PangoLayoutLine *line)
     * }
     */
    public static MethodHandle pango_layout_line_get_start_index$handle() {
        return pango_layout_line_get_start_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_line_get_start_index(PangoLayoutLine *line)
     * }
     */
    public static int pango_layout_line_get_start_index(MemorySegment line) {
        var mh$ = pango_layout_line_get_start_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_get_start_index", line);
            }
            return (int)mh$.invokeExact(line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_line_get_length(PangoLayoutLine *line)
     * }
     */
    public static FunctionDescriptor pango_layout_line_get_length$descriptor() {
        return pango_layout_line_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_line_get_length(PangoLayoutLine *line)
     * }
     */
    public static MethodHandle pango_layout_line_get_length$handle() {
        return pango_layout_line_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_line_get_length(PangoLayoutLine *line)
     * }
     */
    public static int pango_layout_line_get_length(MemorySegment line) {
        var mh$ = pango_layout_line_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_get_length", line);
            }
            return (int)mh$.invokeExact(line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_is_paragraph_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_is_paragraph_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_line_is_paragraph_start(PangoLayoutLine *line)
     * }
     */
    public static FunctionDescriptor pango_layout_line_is_paragraph_start$descriptor() {
        return pango_layout_line_is_paragraph_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_line_is_paragraph_start(PangoLayoutLine *line)
     * }
     */
    public static MethodHandle pango_layout_line_is_paragraph_start$handle() {
        return pango_layout_line_is_paragraph_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_line_is_paragraph_start(PangoLayoutLine *line)
     * }
     */
    public static int pango_layout_line_is_paragraph_start(MemorySegment line) {
        var mh$ = pango_layout_line_is_paragraph_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_is_paragraph_start", line);
            }
            return (int)mh$.invokeExact(line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_get_resolved_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_get_resolved_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoDirection pango_layout_line_get_resolved_direction(PangoLayoutLine *line)
     * }
     */
    public static FunctionDescriptor pango_layout_line_get_resolved_direction$descriptor() {
        return pango_layout_line_get_resolved_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoDirection pango_layout_line_get_resolved_direction(PangoLayoutLine *line)
     * }
     */
    public static MethodHandle pango_layout_line_get_resolved_direction$handle() {
        return pango_layout_line_get_resolved_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoDirection pango_layout_line_get_resolved_direction(PangoLayoutLine *line)
     * }
     */
    public static int pango_layout_line_get_resolved_direction(MemorySegment line) {
        var mh$ = pango_layout_line_get_resolved_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_get_resolved_direction", line);
            }
            return (int)mh$.invokeExact(line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_x_to_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_x_to_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_line_x_to_index(PangoLayoutLine *line, int x_pos, int *index_, int *trailing)
     * }
     */
    public static FunctionDescriptor pango_layout_line_x_to_index$descriptor() {
        return pango_layout_line_x_to_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_line_x_to_index(PangoLayoutLine *line, int x_pos, int *index_, int *trailing)
     * }
     */
    public static MethodHandle pango_layout_line_x_to_index$handle() {
        return pango_layout_line_x_to_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_line_x_to_index(PangoLayoutLine *line, int x_pos, int *index_, int *trailing)
     * }
     */
    public static int pango_layout_line_x_to_index(MemorySegment line, int x_pos, MemorySegment index_, MemorySegment trailing) {
        var mh$ = pango_layout_line_x_to_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_x_to_index", line, x_pos, index_, trailing);
            }
            return (int)mh$.invokeExact(line, x_pos, index_, trailing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_index_to_x {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_index_to_x"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_line_index_to_x(PangoLayoutLine *line, int index_, gboolean trailing, int *x_pos)
     * }
     */
    public static FunctionDescriptor pango_layout_line_index_to_x$descriptor() {
        return pango_layout_line_index_to_x.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_line_index_to_x(PangoLayoutLine *line, int index_, gboolean trailing, int *x_pos)
     * }
     */
    public static MethodHandle pango_layout_line_index_to_x$handle() {
        return pango_layout_line_index_to_x.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_line_index_to_x(PangoLayoutLine *line, int index_, gboolean trailing, int *x_pos)
     * }
     */
    public static void pango_layout_line_index_to_x(MemorySegment line, int index_, int trailing, MemorySegment x_pos) {
        var mh$ = pango_layout_line_index_to_x.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_index_to_x", line, index_, trailing, x_pos);
            }
            mh$.invokeExact(line, index_, trailing, x_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_get_x_ranges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_get_x_ranges"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_line_get_x_ranges(PangoLayoutLine *line, int start_index, int end_index, int **ranges, int *n_ranges)
     * }
     */
    public static FunctionDescriptor pango_layout_line_get_x_ranges$descriptor() {
        return pango_layout_line_get_x_ranges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_line_get_x_ranges(PangoLayoutLine *line, int start_index, int end_index, int **ranges, int *n_ranges)
     * }
     */
    public static MethodHandle pango_layout_line_get_x_ranges$handle() {
        return pango_layout_line_get_x_ranges.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_line_get_x_ranges(PangoLayoutLine *line, int start_index, int end_index, int **ranges, int *n_ranges)
     * }
     */
    public static void pango_layout_line_get_x_ranges(MemorySegment line, int start_index, int end_index, MemorySegment ranges, MemorySegment n_ranges) {
        var mh$ = pango_layout_line_get_x_ranges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_get_x_ranges", line, start_index, end_index, ranges, n_ranges);
            }
            mh$.invokeExact(line, start_index, end_index, ranges, n_ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_get_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_get_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_line_get_extents(PangoLayoutLine *line, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_layout_line_get_extents$descriptor() {
        return pango_layout_line_get_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_line_get_extents(PangoLayoutLine *line, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_layout_line_get_extents$handle() {
        return pango_layout_line_get_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_line_get_extents(PangoLayoutLine *line, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_layout_line_get_extents(MemorySegment line, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_layout_line_get_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_get_extents", line, ink_rect, logical_rect);
            }
            mh$.invokeExact(line, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_line_get_height(PangoLayoutLine *line, int *height)
     * }
     */
    public static FunctionDescriptor pango_layout_line_get_height$descriptor() {
        return pango_layout_line_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_line_get_height(PangoLayoutLine *line, int *height)
     * }
     */
    public static MethodHandle pango_layout_line_get_height$handle() {
        return pango_layout_line_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_line_get_height(PangoLayoutLine *line, int *height)
     * }
     */
    public static void pango_layout_line_get_height(MemorySegment line, MemorySegment height) {
        var mh$ = pango_layout_line_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_get_height", line, height);
            }
            mh$.invokeExact(line, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_line_get_pixel_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_line_get_pixel_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_line_get_pixel_extents(PangoLayoutLine *layout_line, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_layout_line_get_pixel_extents$descriptor() {
        return pango_layout_line_get_pixel_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_line_get_pixel_extents(PangoLayoutLine *layout_line, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_layout_line_get_pixel_extents$handle() {
        return pango_layout_line_get_pixel_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_line_get_pixel_extents(PangoLayoutLine *layout_line, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_layout_line_get_pixel_extents(MemorySegment layout_line, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_layout_line_get_pixel_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_line_get_pixel_extents", layout_line, ink_rect, logical_rect);
            }
            mh$.invokeExact(layout_line, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_layout_iter_get_type()
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_type$descriptor() {
        return pango_layout_iter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_layout_iter_get_type()
     * }
     */
    public static MethodHandle pango_layout_iter_get_type$handle() {
        return pango_layout_iter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_layout_iter_get_type()
     * }
     */
    public static long pango_layout_iter_get_type() {
        var mh$ = pango_layout_iter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_get_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_get_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayoutIter *pango_layout_get_iter(PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_layout_get_iter$descriptor() {
        return pango_layout_get_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayoutIter *pango_layout_get_iter(PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_layout_get_iter$handle() {
        return pango_layout_get_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayoutIter *pango_layout_get_iter(PangoLayout *layout)
     * }
     */
    public static MemorySegment pango_layout_get_iter(MemorySegment layout) {
        var mh$ = pango_layout_get_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_get_iter", layout);
            }
            return (MemorySegment)mh$.invokeExact(layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayoutIter *pango_layout_iter_copy(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_copy$descriptor() {
        return pango_layout_iter_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayoutIter *pango_layout_iter_copy(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_copy$handle() {
        return pango_layout_iter_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayoutIter *pango_layout_iter_copy(PangoLayoutIter *iter)
     * }
     */
    public static MemorySegment pango_layout_iter_copy(MemorySegment iter) {
        var mh$ = pango_layout_iter_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_copy", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_free(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_free$descriptor() {
        return pango_layout_iter_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_free(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_free$handle() {
        return pango_layout_iter_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_iter_free(PangoLayoutIter *iter)
     * }
     */
    public static void pango_layout_iter_free(MemorySegment iter) {
        var mh$ = pango_layout_iter_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_free", iter);
            }
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_iter_get_index(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_index$descriptor() {
        return pango_layout_iter_get_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_iter_get_index(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_get_index$handle() {
        return pango_layout_iter_get_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_iter_get_index(PangoLayoutIter *iter)
     * }
     */
    public static int pango_layout_iter_get_index(MemorySegment iter) {
        var mh$ = pango_layout_iter_get_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_index", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_run"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayoutRun *pango_layout_iter_get_run(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_run$descriptor() {
        return pango_layout_iter_get_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayoutRun *pango_layout_iter_get_run(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_get_run$handle() {
        return pango_layout_iter_get_run.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayoutRun *pango_layout_iter_get_run(PangoLayoutIter *iter)
     * }
     */
    public static MemorySegment pango_layout_iter_get_run(MemorySegment iter) {
        var mh$ = pango_layout_iter_get_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_run", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_run_readonly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_run_readonly"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayoutRun *pango_layout_iter_get_run_readonly(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_run_readonly$descriptor() {
        return pango_layout_iter_get_run_readonly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayoutRun *pango_layout_iter_get_run_readonly(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_get_run_readonly$handle() {
        return pango_layout_iter_get_run_readonly.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayoutRun *pango_layout_iter_get_run_readonly(PangoLayoutIter *iter)
     * }
     */
    public static MemorySegment pango_layout_iter_get_run_readonly(MemorySegment iter) {
        var mh$ = pango_layout_iter_get_run_readonly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_run_readonly", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_iter_get_line(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_line$descriptor() {
        return pango_layout_iter_get_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_iter_get_line(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_get_line$handle() {
        return pango_layout_iter_get_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_iter_get_line(PangoLayoutIter *iter)
     * }
     */
    public static MemorySegment pango_layout_iter_get_line(MemorySegment iter) {
        var mh$ = pango_layout_iter_get_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_line", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_line_readonly {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_line_readonly"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_iter_get_line_readonly(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_line_readonly$descriptor() {
        return pango_layout_iter_get_line_readonly.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_iter_get_line_readonly(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_get_line_readonly$handle() {
        return pango_layout_iter_get_line_readonly.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_layout_iter_get_line_readonly(PangoLayoutIter *iter)
     * }
     */
    public static MemorySegment pango_layout_iter_get_line_readonly(MemorySegment iter) {
        var mh$ = pango_layout_iter_get_line_readonly.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_line_readonly", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_at_last_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_at_last_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_at_last_line(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_at_last_line$descriptor() {
        return pango_layout_iter_at_last_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_at_last_line(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_at_last_line$handle() {
        return pango_layout_iter_at_last_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_at_last_line(PangoLayoutIter *iter)
     * }
     */
    public static int pango_layout_iter_at_last_line(MemorySegment iter) {
        var mh$ = pango_layout_iter_at_last_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_at_last_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_iter_get_layout(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_layout$descriptor() {
        return pango_layout_iter_get_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_iter_get_layout(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_get_layout$handle() {
        return pango_layout_iter_get_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *pango_layout_iter_get_layout(PangoLayoutIter *iter)
     * }
     */
    public static MemorySegment pango_layout_iter_get_layout(MemorySegment iter) {
        var mh$ = pango_layout_iter_get_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_layout", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_next_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_next_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_char(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_next_char$descriptor() {
        return pango_layout_iter_next_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_char(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_next_char$handle() {
        return pango_layout_iter_next_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_char(PangoLayoutIter *iter)
     * }
     */
    public static int pango_layout_iter_next_char(MemorySegment iter) {
        var mh$ = pango_layout_iter_next_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_next_char", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_next_cluster {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_next_cluster"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_cluster(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_next_cluster$descriptor() {
        return pango_layout_iter_next_cluster.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_cluster(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_next_cluster$handle() {
        return pango_layout_iter_next_cluster.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_cluster(PangoLayoutIter *iter)
     * }
     */
    public static int pango_layout_iter_next_cluster(MemorySegment iter) {
        var mh$ = pango_layout_iter_next_cluster.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_next_cluster", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_next_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_next_run"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_run(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_next_run$descriptor() {
        return pango_layout_iter_next_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_run(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_next_run$handle() {
        return pango_layout_iter_next_run.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_run(PangoLayoutIter *iter)
     * }
     */
    public static int pango_layout_iter_next_run(MemorySegment iter) {
        var mh$ = pango_layout_iter_next_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_next_run", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_next_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_next_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_line(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_next_line$descriptor() {
        return pango_layout_iter_next_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_line(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_next_line$handle() {
        return pango_layout_iter_next_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_layout_iter_next_line(PangoLayoutIter *iter)
     * }
     */
    public static int pango_layout_iter_next_line(MemorySegment iter) {
        var mh$ = pango_layout_iter_next_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_next_line", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_char_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_char_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_char_extents(PangoLayoutIter *iter, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_char_extents$descriptor() {
        return pango_layout_iter_get_char_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_char_extents(PangoLayoutIter *iter, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_layout_iter_get_char_extents$handle() {
        return pango_layout_iter_get_char_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_char_extents(PangoLayoutIter *iter, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_layout_iter_get_char_extents(MemorySegment iter, MemorySegment logical_rect) {
        var mh$ = pango_layout_iter_get_char_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_char_extents", iter, logical_rect);
            }
            mh$.invokeExact(iter, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_cluster_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_cluster_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_cluster_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_cluster_extents$descriptor() {
        return pango_layout_iter_get_cluster_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_cluster_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_layout_iter_get_cluster_extents$handle() {
        return pango_layout_iter_get_cluster_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_cluster_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_layout_iter_get_cluster_extents(MemorySegment iter, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_layout_iter_get_cluster_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_cluster_extents", iter, ink_rect, logical_rect);
            }
            mh$.invokeExact(iter, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_run_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_run_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_run_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_run_extents$descriptor() {
        return pango_layout_iter_get_run_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_run_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_layout_iter_get_run_extents$handle() {
        return pango_layout_iter_get_run_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_run_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_layout_iter_get_run_extents(MemorySegment iter, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_layout_iter_get_run_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_run_extents", iter, ink_rect, logical_rect);
            }
            mh$.invokeExact(iter, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_line_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_line_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_line_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_line_extents$descriptor() {
        return pango_layout_iter_get_line_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_line_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_layout_iter_get_line_extents$handle() {
        return pango_layout_iter_get_line_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_line_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_layout_iter_get_line_extents(MemorySegment iter, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_layout_iter_get_line_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_line_extents", iter, ink_rect, logical_rect);
            }
            mh$.invokeExact(iter, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_line_yrange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_line_yrange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_line_yrange(PangoLayoutIter *iter, int *y0_, int *y1_)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_line_yrange$descriptor() {
        return pango_layout_iter_get_line_yrange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_line_yrange(PangoLayoutIter *iter, int *y0_, int *y1_)
     * }
     */
    public static MethodHandle pango_layout_iter_get_line_yrange$handle() {
        return pango_layout_iter_get_line_yrange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_line_yrange(PangoLayoutIter *iter, int *y0_, int *y1_)
     * }
     */
    public static void pango_layout_iter_get_line_yrange(MemorySegment iter, MemorySegment y0_, MemorySegment y1_) {
        var mh$ = pango_layout_iter_get_line_yrange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_line_yrange", iter, y0_, y1_);
            }
            mh$.invokeExact(iter, y0_, y1_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_layout_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_layout_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_layout_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_layout_extents$descriptor() {
        return pango_layout_iter_get_layout_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_layout_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static MethodHandle pango_layout_iter_get_layout_extents$handle() {
        return pango_layout_iter_get_layout_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_layout_iter_get_layout_extents(PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect)
     * }
     */
    public static void pango_layout_iter_get_layout_extents(MemorySegment iter, MemorySegment ink_rect, MemorySegment logical_rect) {
        var mh$ = pango_layout_iter_get_layout_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_layout_extents", iter, ink_rect, logical_rect);
            }
            mh$.invokeExact(iter, ink_rect, logical_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_baseline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_baseline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_iter_get_baseline(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_baseline$descriptor() {
        return pango_layout_iter_get_baseline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_iter_get_baseline(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_get_baseline$handle() {
        return pango_layout_iter_get_baseline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_iter_get_baseline(PangoLayoutIter *iter)
     * }
     */
    public static int pango_layout_iter_get_baseline(MemorySegment iter) {
        var mh$ = pango_layout_iter_get_baseline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_baseline", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_layout_iter_get_run_baseline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_layout_iter_get_run_baseline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_layout_iter_get_run_baseline(PangoLayoutIter *iter)
     * }
     */
    public static FunctionDescriptor pango_layout_iter_get_run_baseline$descriptor() {
        return pango_layout_iter_get_run_baseline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_layout_iter_get_run_baseline(PangoLayoutIter *iter)
     * }
     */
    public static MethodHandle pango_layout_iter_get_run_baseline$handle() {
        return pango_layout_iter_get_run_baseline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_layout_iter_get_run_baseline(PangoLayoutIter *iter)
     * }
     */
    public static int pango_layout_iter_get_run_baseline(MemorySegment iter) {
        var mh$ = pango_layout_iter_get_run_baseline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_layout_iter_get_run_baseline", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef PangoLayout *PangoLayout_autoptr
     * }
     */
    public static final AddressLayout PangoLayout_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoLayout_listautoptr
     * }
     */
    public static final AddressLayout PangoLayout_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoLayout_slistautoptr
     * }
     */
    public static final AddressLayout PangoLayout_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoLayout_queueautoptr
     * }
     */
    public static final AddressLayout PangoLayout_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PangoLayoutIter *PangoLayoutIter_autoptr
     * }
     */
    public static final AddressLayout PangoLayoutIter_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoLayoutIter_listautoptr
     * }
     */
    public static final AddressLayout PangoLayoutIter_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoLayoutIter_slistautoptr
     * }
     */
    public static final AddressLayout PangoLayoutIter_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoLayoutIter_queueautoptr
     * }
     */
    public static final AddressLayout PangoLayoutIter_queueautoptr = app_indicator_h.C_POINTER;

    private static class pango_markup_parser_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_markup_parser_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMarkupParseContext *pango_markup_parser_new(gunichar accel_marker)
     * }
     */
    public static FunctionDescriptor pango_markup_parser_new$descriptor() {
        return pango_markup_parser_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMarkupParseContext *pango_markup_parser_new(gunichar accel_marker)
     * }
     */
    public static MethodHandle pango_markup_parser_new$handle() {
        return pango_markup_parser_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMarkupParseContext *pango_markup_parser_new(gunichar accel_marker)
     * }
     */
    public static MemorySegment pango_markup_parser_new(int accel_marker) {
        var mh$ = pango_markup_parser_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_markup_parser_new", accel_marker);
            }
            return (MemorySegment)mh$.invokeExact(accel_marker);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_markup_parser_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_markup_parser_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_markup_parser_finish(GMarkupParseContext *context, PangoAttrList **attr_list, char **text, gunichar *accel_char, GError **error)
     * }
     */
    public static FunctionDescriptor pango_markup_parser_finish$descriptor() {
        return pango_markup_parser_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_markup_parser_finish(GMarkupParseContext *context, PangoAttrList **attr_list, char **text, gunichar *accel_char, GError **error)
     * }
     */
    public static MethodHandle pango_markup_parser_finish$handle() {
        return pango_markup_parser_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_markup_parser_finish(GMarkupParseContext *context, PangoAttrList **attr_list, char **text, gunichar *accel_char, GError **error)
     * }
     */
    public static int pango_markup_parser_finish(MemorySegment context, MemorySegment attr_list, MemorySegment text, MemorySegment accel_char, MemorySegment error) {
        var mh$ = pango_markup_parser_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_markup_parser_finish", context, attr_list, text, accel_char, error);
            }
            return (int)mh$.invokeExact(context, attr_list, text, accel_char, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_parse_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_parse_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_markup(const char *markup_text, int length, gunichar accel_marker, PangoAttrList **attr_list, char **text, gunichar *accel_char, GError **error)
     * }
     */
    public static FunctionDescriptor pango_parse_markup$descriptor() {
        return pango_parse_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_markup(const char *markup_text, int length, gunichar accel_marker, PangoAttrList **attr_list, char **text, gunichar *accel_char, GError **error)
     * }
     */
    public static MethodHandle pango_parse_markup$handle() {
        return pango_parse_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_parse_markup(const char *markup_text, int length, gunichar accel_marker, PangoAttrList **attr_list, char **text, gunichar *accel_char, GError **error)
     * }
     */
    public static int pango_parse_markup(MemorySegment markup_text, int length, int accel_marker, MemorySegment attr_list, MemorySegment text, MemorySegment accel_char, MemorySegment error) {
        var mh$ = pango_parse_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_parse_markup", markup_text, length, accel_marker, attr_list, text, accel_char, error);
            }
            return (int)mh$.invokeExact(markup_text, length, accel_marker, attr_list, text, accel_char, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_RENDER_PART_FOREGROUND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_RENDER_PART_FOREGROUND = 0
     * }
     */
    public static int PANGO_RENDER_PART_FOREGROUND() {
        return PANGO_RENDER_PART_FOREGROUND;
    }
    private static final int PANGO_RENDER_PART_BACKGROUND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_RENDER_PART_BACKGROUND = 1
     * }
     */
    public static int PANGO_RENDER_PART_BACKGROUND() {
        return PANGO_RENDER_PART_BACKGROUND;
    }
    private static final int PANGO_RENDER_PART_UNDERLINE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_RENDER_PART_UNDERLINE = 2
     * }
     */
    public static int PANGO_RENDER_PART_UNDERLINE() {
        return PANGO_RENDER_PART_UNDERLINE;
    }
    private static final int PANGO_RENDER_PART_STRIKETHROUGH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_RENDER_PART_STRIKETHROUGH = 3
     * }
     */
    public static int PANGO_RENDER_PART_STRIKETHROUGH() {
        return PANGO_RENDER_PART_STRIKETHROUGH;
    }
    private static final int PANGO_RENDER_PART_OVERLINE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_RENDER_PART_OVERLINE = 4
     * }
     */
    public static int PANGO_RENDER_PART_OVERLINE() {
        return PANGO_RENDER_PART_OVERLINE;
    }

    private static class pango_renderer_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_renderer_get_type()
     * }
     */
    public static FunctionDescriptor pango_renderer_get_type$descriptor() {
        return pango_renderer_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_renderer_get_type()
     * }
     */
    public static MethodHandle pango_renderer_get_type$handle() {
        return pango_renderer_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_renderer_get_type()
     * }
     */
    public static long pango_renderer_get_type() {
        var mh$ = pango_renderer_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_draw_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_draw_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_layout(PangoRenderer *renderer, PangoLayout *layout, int x, int y)
     * }
     */
    public static FunctionDescriptor pango_renderer_draw_layout$descriptor() {
        return pango_renderer_draw_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_layout(PangoRenderer *renderer, PangoLayout *layout, int x, int y)
     * }
     */
    public static MethodHandle pango_renderer_draw_layout$handle() {
        return pango_renderer_draw_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_draw_layout(PangoRenderer *renderer, PangoLayout *layout, int x, int y)
     * }
     */
    public static void pango_renderer_draw_layout(MemorySegment renderer, MemorySegment layout, int x, int y) {
        var mh$ = pango_renderer_draw_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_draw_layout", renderer, layout, x, y);
            }
            mh$.invokeExact(renderer, layout, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_draw_layout_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_draw_layout_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_layout_line(PangoRenderer *renderer, PangoLayoutLine *line, int x, int y)
     * }
     */
    public static FunctionDescriptor pango_renderer_draw_layout_line$descriptor() {
        return pango_renderer_draw_layout_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_layout_line(PangoRenderer *renderer, PangoLayoutLine *line, int x, int y)
     * }
     */
    public static MethodHandle pango_renderer_draw_layout_line$handle() {
        return pango_renderer_draw_layout_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_draw_layout_line(PangoRenderer *renderer, PangoLayoutLine *line, int x, int y)
     * }
     */
    public static void pango_renderer_draw_layout_line(MemorySegment renderer, MemorySegment line, int x, int y) {
        var mh$ = pango_renderer_draw_layout_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_draw_layout_line", renderer, line, x, y);
            }
            mh$.invokeExact(renderer, line, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_draw_glyphs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_draw_glyphs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_glyphs(PangoRenderer *renderer, PangoFont *font, PangoGlyphString *glyphs, int x, int y)
     * }
     */
    public static FunctionDescriptor pango_renderer_draw_glyphs$descriptor() {
        return pango_renderer_draw_glyphs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_glyphs(PangoRenderer *renderer, PangoFont *font, PangoGlyphString *glyphs, int x, int y)
     * }
     */
    public static MethodHandle pango_renderer_draw_glyphs$handle() {
        return pango_renderer_draw_glyphs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_draw_glyphs(PangoRenderer *renderer, PangoFont *font, PangoGlyphString *glyphs, int x, int y)
     * }
     */
    public static void pango_renderer_draw_glyphs(MemorySegment renderer, MemorySegment font, MemorySegment glyphs, int x, int y) {
        var mh$ = pango_renderer_draw_glyphs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_draw_glyphs", renderer, font, glyphs, x, y);
            }
            mh$.invokeExact(renderer, font, glyphs, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_draw_glyph_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_draw_glyph_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_glyph_item(PangoRenderer *renderer, const char *text, PangoGlyphItem *glyph_item, int x, int y)
     * }
     */
    public static FunctionDescriptor pango_renderer_draw_glyph_item$descriptor() {
        return pango_renderer_draw_glyph_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_glyph_item(PangoRenderer *renderer, const char *text, PangoGlyphItem *glyph_item, int x, int y)
     * }
     */
    public static MethodHandle pango_renderer_draw_glyph_item$handle() {
        return pango_renderer_draw_glyph_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_draw_glyph_item(PangoRenderer *renderer, const char *text, PangoGlyphItem *glyph_item, int x, int y)
     * }
     */
    public static void pango_renderer_draw_glyph_item(MemorySegment renderer, MemorySegment text, MemorySegment glyph_item, int x, int y) {
        var mh$ = pango_renderer_draw_glyph_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_draw_glyph_item", renderer, text, glyph_item, x, y);
            }
            mh$.invokeExact(renderer, text, glyph_item, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_draw_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_draw_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_rectangle(PangoRenderer *renderer, PangoRenderPart part, int x, int y, int width, int height)
     * }
     */
    public static FunctionDescriptor pango_renderer_draw_rectangle$descriptor() {
        return pango_renderer_draw_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_rectangle(PangoRenderer *renderer, PangoRenderPart part, int x, int y, int width, int height)
     * }
     */
    public static MethodHandle pango_renderer_draw_rectangle$handle() {
        return pango_renderer_draw_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_draw_rectangle(PangoRenderer *renderer, PangoRenderPart part, int x, int y, int width, int height)
     * }
     */
    public static void pango_renderer_draw_rectangle(MemorySegment renderer, int part, int x, int y, int width, int height) {
        var mh$ = pango_renderer_draw_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_draw_rectangle", renderer, part, x, y, width, height);
            }
            mh$.invokeExact(renderer, part, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_draw_error_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_draw_error_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_error_underline(PangoRenderer *renderer, int x, int y, int width, int height)
     * }
     */
    public static FunctionDescriptor pango_renderer_draw_error_underline$descriptor() {
        return pango_renderer_draw_error_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_error_underline(PangoRenderer *renderer, int x, int y, int width, int height)
     * }
     */
    public static MethodHandle pango_renderer_draw_error_underline$handle() {
        return pango_renderer_draw_error_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_draw_error_underline(PangoRenderer *renderer, int x, int y, int width, int height)
     * }
     */
    public static void pango_renderer_draw_error_underline(MemorySegment renderer, int x, int y, int width, int height) {
        var mh$ = pango_renderer_draw_error_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_draw_error_underline", renderer, x, y, width, height);
            }
            mh$.invokeExact(renderer, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_draw_trapezoid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_draw_trapezoid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_trapezoid(PangoRenderer *renderer, PangoRenderPart part, double y1_, double x11, double x21, double y2, double x12, double x22)
     * }
     */
    public static FunctionDescriptor pango_renderer_draw_trapezoid$descriptor() {
        return pango_renderer_draw_trapezoid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_trapezoid(PangoRenderer *renderer, PangoRenderPart part, double y1_, double x11, double x21, double y2, double x12, double x22)
     * }
     */
    public static MethodHandle pango_renderer_draw_trapezoid$handle() {
        return pango_renderer_draw_trapezoid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_draw_trapezoid(PangoRenderer *renderer, PangoRenderPart part, double y1_, double x11, double x21, double y2, double x12, double x22)
     * }
     */
    public static void pango_renderer_draw_trapezoid(MemorySegment renderer, int part, double y1_, double x11, double x21, double y2, double x12, double x22) {
        var mh$ = pango_renderer_draw_trapezoid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_draw_trapezoid", renderer, part, y1_, x11, x21, y2, x12, x22);
            }
            mh$.invokeExact(renderer, part, y1_, x11, x21, y2, x12, x22);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_draw_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_draw_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_glyph(PangoRenderer *renderer, PangoFont *font, PangoGlyph glyph, double x, double y)
     * }
     */
    public static FunctionDescriptor pango_renderer_draw_glyph$descriptor() {
        return pango_renderer_draw_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_draw_glyph(PangoRenderer *renderer, PangoFont *font, PangoGlyph glyph, double x, double y)
     * }
     */
    public static MethodHandle pango_renderer_draw_glyph$handle() {
        return pango_renderer_draw_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_draw_glyph(PangoRenderer *renderer, PangoFont *font, PangoGlyph glyph, double x, double y)
     * }
     */
    public static void pango_renderer_draw_glyph(MemorySegment renderer, MemorySegment font, int glyph, double x, double y) {
        var mh$ = pango_renderer_draw_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_draw_glyph", renderer, font, glyph, x, y);
            }
            mh$.invokeExact(renderer, font, glyph, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_activate(PangoRenderer *renderer)
     * }
     */
    public static FunctionDescriptor pango_renderer_activate$descriptor() {
        return pango_renderer_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_activate(PangoRenderer *renderer)
     * }
     */
    public static MethodHandle pango_renderer_activate$handle() {
        return pango_renderer_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_activate(PangoRenderer *renderer)
     * }
     */
    public static void pango_renderer_activate(MemorySegment renderer) {
        var mh$ = pango_renderer_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_activate", renderer);
            }
            mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_deactivate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_deactivate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_deactivate(PangoRenderer *renderer)
     * }
     */
    public static FunctionDescriptor pango_renderer_deactivate$descriptor() {
        return pango_renderer_deactivate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_deactivate(PangoRenderer *renderer)
     * }
     */
    public static MethodHandle pango_renderer_deactivate$handle() {
        return pango_renderer_deactivate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_deactivate(PangoRenderer *renderer)
     * }
     */
    public static void pango_renderer_deactivate(MemorySegment renderer) {
        var mh$ = pango_renderer_deactivate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_deactivate", renderer);
            }
            mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_part_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_part_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_part_changed(PangoRenderer *renderer, PangoRenderPart part)
     * }
     */
    public static FunctionDescriptor pango_renderer_part_changed$descriptor() {
        return pango_renderer_part_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_part_changed(PangoRenderer *renderer, PangoRenderPart part)
     * }
     */
    public static MethodHandle pango_renderer_part_changed$handle() {
        return pango_renderer_part_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_part_changed(PangoRenderer *renderer, PangoRenderPart part)
     * }
     */
    public static void pango_renderer_part_changed(MemorySegment renderer, int part) {
        var mh$ = pango_renderer_part_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_part_changed", renderer, part);
            }
            mh$.invokeExact(renderer, part);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_set_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_set_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_set_color(PangoRenderer *renderer, PangoRenderPart part, const PangoColor *color)
     * }
     */
    public static FunctionDescriptor pango_renderer_set_color$descriptor() {
        return pango_renderer_set_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_set_color(PangoRenderer *renderer, PangoRenderPart part, const PangoColor *color)
     * }
     */
    public static MethodHandle pango_renderer_set_color$handle() {
        return pango_renderer_set_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_set_color(PangoRenderer *renderer, PangoRenderPart part, const PangoColor *color)
     * }
     */
    public static void pango_renderer_set_color(MemorySegment renderer, int part, MemorySegment color) {
        var mh$ = pango_renderer_set_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_set_color", renderer, part, color);
            }
            mh$.invokeExact(renderer, part, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_get_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_get_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoColor *pango_renderer_get_color(PangoRenderer *renderer, PangoRenderPart part)
     * }
     */
    public static FunctionDescriptor pango_renderer_get_color$descriptor() {
        return pango_renderer_get_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoColor *pango_renderer_get_color(PangoRenderer *renderer, PangoRenderPart part)
     * }
     */
    public static MethodHandle pango_renderer_get_color$handle() {
        return pango_renderer_get_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoColor *pango_renderer_get_color(PangoRenderer *renderer, PangoRenderPart part)
     * }
     */
    public static MemorySegment pango_renderer_get_color(MemorySegment renderer, int part) {
        var mh$ = pango_renderer_get_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_get_color", renderer, part);
            }
            return (MemorySegment)mh$.invokeExact(renderer, part);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_set_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_set_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_set_alpha(PangoRenderer *renderer, PangoRenderPart part, guint16 alpha)
     * }
     */
    public static FunctionDescriptor pango_renderer_set_alpha$descriptor() {
        return pango_renderer_set_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_set_alpha(PangoRenderer *renderer, PangoRenderPart part, guint16 alpha)
     * }
     */
    public static MethodHandle pango_renderer_set_alpha$handle() {
        return pango_renderer_set_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_set_alpha(PangoRenderer *renderer, PangoRenderPart part, guint16 alpha)
     * }
     */
    public static void pango_renderer_set_alpha(MemorySegment renderer, int part, short alpha) {
        var mh$ = pango_renderer_set_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_set_alpha", renderer, part, alpha);
            }
            mh$.invokeExact(renderer, part, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_get_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_get_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 pango_renderer_get_alpha(PangoRenderer *renderer, PangoRenderPart part)
     * }
     */
    public static FunctionDescriptor pango_renderer_get_alpha$descriptor() {
        return pango_renderer_get_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 pango_renderer_get_alpha(PangoRenderer *renderer, PangoRenderPart part)
     * }
     */
    public static MethodHandle pango_renderer_get_alpha$handle() {
        return pango_renderer_get_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 pango_renderer_get_alpha(PangoRenderer *renderer, PangoRenderPart part)
     * }
     */
    public static short pango_renderer_get_alpha(MemorySegment renderer, int part) {
        var mh$ = pango_renderer_get_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_get_alpha", renderer, part);
            }
            return (short)mh$.invokeExact(renderer, part);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_set_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_set_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_renderer_set_matrix(PangoRenderer *renderer, const PangoMatrix *matrix)
     * }
     */
    public static FunctionDescriptor pango_renderer_set_matrix$descriptor() {
        return pango_renderer_set_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_renderer_set_matrix(PangoRenderer *renderer, const PangoMatrix *matrix)
     * }
     */
    public static MethodHandle pango_renderer_set_matrix$handle() {
        return pango_renderer_set_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_renderer_set_matrix(PangoRenderer *renderer, const PangoMatrix *matrix)
     * }
     */
    public static void pango_renderer_set_matrix(MemorySegment renderer, MemorySegment matrix) {
        var mh$ = pango_renderer_set_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_set_matrix", renderer, matrix);
            }
            mh$.invokeExact(renderer, matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_get_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_get_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const PangoMatrix *pango_renderer_get_matrix(PangoRenderer *renderer)
     * }
     */
    public static FunctionDescriptor pango_renderer_get_matrix$descriptor() {
        return pango_renderer_get_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const PangoMatrix *pango_renderer_get_matrix(PangoRenderer *renderer)
     * }
     */
    public static MethodHandle pango_renderer_get_matrix$handle() {
        return pango_renderer_get_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const PangoMatrix *pango_renderer_get_matrix(PangoRenderer *renderer)
     * }
     */
    public static MemorySegment pango_renderer_get_matrix(MemorySegment renderer) {
        var mh$ = pango_renderer_get_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_get_matrix", renderer);
            }
            return (MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_get_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_get_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_renderer_get_layout(PangoRenderer *renderer)
     * }
     */
    public static FunctionDescriptor pango_renderer_get_layout$descriptor() {
        return pango_renderer_get_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_renderer_get_layout(PangoRenderer *renderer)
     * }
     */
    public static MethodHandle pango_renderer_get_layout$handle() {
        return pango_renderer_get_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *pango_renderer_get_layout(PangoRenderer *renderer)
     * }
     */
    public static MemorySegment pango_renderer_get_layout(MemorySegment renderer) {
        var mh$ = pango_renderer_get_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_get_layout", renderer);
            }
            return (MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_renderer_get_layout_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_renderer_get_layout_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_renderer_get_layout_line(PangoRenderer *renderer)
     * }
     */
    public static FunctionDescriptor pango_renderer_get_layout_line$descriptor() {
        return pango_renderer_get_layout_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_renderer_get_layout_line(PangoRenderer *renderer)
     * }
     */
    public static MethodHandle pango_renderer_get_layout_line$handle() {
        return pango_renderer_get_layout_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayoutLine *pango_renderer_get_layout_line(PangoRenderer *renderer)
     * }
     */
    public static MemorySegment pango_renderer_get_layout_line(MemorySegment renderer) {
        var mh$ = pango_renderer_get_layout_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_renderer_get_layout_line", renderer);
            }
            return (MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class stdin$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("stdin").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static AddressLayout stdin$layout() {
        return stdin$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static MemorySegment stdin$segment() {
        return stdin$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static MemorySegment stdin() {
        return stdin$constants.SEGMENT.get(stdin$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static void stdin(MemorySegment varValue) {
        stdin$constants.SEGMENT.set(stdin$constants.LAYOUT, 0L, varValue);
    }

    private static class stdout$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("stdout").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static AddressLayout stdout$layout() {
        return stdout$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static MemorySegment stdout$segment() {
        return stdout$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static MemorySegment stdout() {
        return stdout$constants.SEGMENT.get(stdout$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static void stdout(MemorySegment varValue) {
        stdout$constants.SEGMENT.set(stdout$constants.LAYOUT, 0L, varValue);
    }

    private static class stderr$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("stderr").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static AddressLayout stderr$layout() {
        return stderr$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static MemorySegment stderr$segment() {
        return stderr$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static MemorySegment stderr() {
        return stderr$constants.SEGMENT.get(stderr$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static void stderr(MemorySegment varValue) {
        stderr$constants.SEGMENT.set(stderr$constants.LAYOUT, 0L, varValue);
    }

    private static class remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static FunctionDescriptor remove$descriptor() {
        return remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static MethodHandle remove$handle() {
        return remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static int remove(MemorySegment __filename) {
        var mh$ = remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remove", __filename);
            }
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("rename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static FunctionDescriptor rename$descriptor() {
        return rename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static MethodHandle rename$handle() {
        return rename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rename", __old, __new);
            }
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class renameat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("renameat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static FunctionDescriptor renameat$descriptor() {
        return renameat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static MethodHandle renameat$handle() {
        return renameat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static int renameat(int __oldfd, MemorySegment __old, int __newfd, MemorySegment __new) {
        var mh$ = renameat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renameat", __oldfd, __old, __newfd, __new);
            }
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fclose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fclose$descriptor() {
        return fclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static MethodHandle fclose$handle() {
        return fclose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static int fclose(MemorySegment __stream) {
        var mh$ = fclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fclose", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("tmpfile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static FunctionDescriptor tmpfile$descriptor() {
        return tmpfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MethodHandle tmpfile$handle() {
        return tmpfile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpfile");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("tmpnam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static FunctionDescriptor tmpnam$descriptor() {
        return tmpnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MethodHandle tmpnam$handle() {
        return tmpnam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("tmpnam_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static FunctionDescriptor tmpnam_r$descriptor() {
        return tmpnam_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MethodHandle tmpnam_r$handle() {
        return tmpnam_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MemorySegment tmpnam_r(MemorySegment __s) {
        var mh$ = tmpnam_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam_r", __s);
            }
            return (MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tempnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("tempnam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static FunctionDescriptor tempnam$descriptor() {
        return tempnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MethodHandle tempnam$handle() {
        return tempnam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __pfx) {
        var mh$ = tempnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tempnam", __dir, __pfx);
            }
            return (MemorySegment)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fflush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fflush$descriptor() {
        return fflush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static MethodHandle fflush$handle() {
        return fflush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static int fflush(MemorySegment __stream) {
        var mh$ = fflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fflush_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fflush_unlocked$descriptor() {
        return fflush_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fflush_unlocked$handle() {
        return fflush_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream) {
        var mh$ = fflush_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fopen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static FunctionDescriptor fopen$descriptor() {
        return fopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MethodHandle fopen$handle() {
        return fopen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __modes) {
        var mh$ = fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopen", __filename, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class freopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("freopen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor freopen$descriptor() {
        return freopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static MethodHandle freopen$handle() {
        return freopen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static MemorySegment freopen(MemorySegment __filename, MemorySegment __modes, MemorySegment __stream) {
        var mh$ = freopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("freopen", __filename, __modes, __stream);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fdopen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static FunctionDescriptor fdopen$descriptor() {
        return fdopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MethodHandle fdopen$handle() {
        return fdopen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MemorySegment fdopen(int __fd, MemorySegment __modes) {
        var mh$ = fdopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdopen", __fd, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmemopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fmemopen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static FunctionDescriptor fmemopen$descriptor() {
        return fmemopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MethodHandle fmemopen$handle() {
        return fmemopen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __s, long __len, MemorySegment __modes) {
        var mh$ = fmemopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmemopen", __s, __len, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class open_memstream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("open_memstream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static FunctionDescriptor open_memstream$descriptor() {
        return open_memstream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MethodHandle open_memstream$handle() {
        return open_memstream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufloc, MemorySegment __sizeloc) {
        var mh$ = open_memstream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("open_memstream", __bufloc, __sizeloc);
            }
            return (MemorySegment)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static FunctionDescriptor setbuf$descriptor() {
        return setbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static MethodHandle setbuf$handle() {
        return setbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static void setbuf(MemorySegment __stream, MemorySegment __buf) {
        var mh$ = setbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuf", __stream, __buf);
            }
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setvbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setvbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static FunctionDescriptor setvbuf$descriptor() {
        return setvbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static MethodHandle setvbuf$handle() {
        return setvbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static int setvbuf(MemorySegment __stream, MemorySegment __buf, int __modes, long __n) {
        var mh$ = setvbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setvbuf", __stream, __buf, __modes, __n);
            }
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setbuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static FunctionDescriptor setbuffer$descriptor() {
        return setbuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static MethodHandle setbuffer$handle() {
        return setbuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static void setbuffer(MemorySegment __stream, MemorySegment __buf, long __size) {
        var mh$ = setbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuffer", __stream, __buf, __size);
            }
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setlinebuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setlinebuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static FunctionDescriptor setlinebuf$descriptor() {
        return setlinebuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static MethodHandle setlinebuf$handle() {
        return setlinebuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static void setlinebuf(MemorySegment __stream) {
        var mh$ = setlinebuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setlinebuf", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int fprintf(FILE *restrict __stream, const char *restrict __format, ...)
     * }
     */
    public static class fprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("fprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int fprintf(FILE *restrict __stream, const char *restrict __format, ...)
         * }
         */
        public static fprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __stream, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fprintf", __stream, __format, x2);
                }
                return (int)spreader.invokeExact(__stream, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int printf(const char *restrict __format, ...)
     * }
     */
    public static class printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int printf(const char *restrict __format, ...)
         * }
         */
        public static printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("printf", __format, x1);
                }
                return (int)spreader.invokeExact(__format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int sprintf(char *restrict __s, const char *restrict __format, ...)
     * }
     */
    public static class sprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("sprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int sprintf(char *restrict __s, const char *restrict __format, ...)
         * }
         */
        public static sprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __s, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sprintf", __s, __format, x2);
                }
                return (int)spreader.invokeExact(__s, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int snprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, ...)
     * }
     */
    public static class snprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int snprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, ...)
         * }
         */
        public static snprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __s, long __maxlen, MemorySegment __format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("snprintf", __s, __maxlen, __format, x3);
                }
                return (int)spreader.invokeExact(__s, __maxlen, __format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int dprintf(int __fd, const char *restrict __fmt, ...)
     * }
     */
    public static class dprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("dprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private dprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int dprintf(int __fd, const char *restrict __fmt, ...)
         * }
         */
        public static dprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new dprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int __fd, MemorySegment __fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("dprintf", __fd, __fmt, x2);
                }
                return (int)spreader.invokeExact(__fd, __fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int fscanf(FILE *restrict __stream, const char *restrict __format, ...)
     * }
     */
    public static class fscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("fscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int fscanf(FILE *restrict __stream, const char *restrict __format, ...)
         * }
         */
        public static fscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __stream, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fscanf", __stream, __format, x2);
                }
                return (int)spreader.invokeExact(__stream, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int scanf(const char *restrict __format, ...)
     * }
     */
    public static class scanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("scanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private scanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int scanf(const char *restrict __format, ...)
         * }
         */
        public static scanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new scanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("scanf", __format, x1);
                }
                return (int)spreader.invokeExact(__format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int sscanf(const char *restrict __s, const char *restrict __format, ...)
     * }
     */
    public static class sscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("sscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int sscanf(const char *restrict __s, const char *restrict __format, ...)
         * }
         */
        public static sscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __s, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sscanf", __s, __format, x2);
                }
                return (int)spreader.invokeExact(__s, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class fgetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fgetc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fgetc$descriptor() {
        return fgetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static MethodHandle fgetc$handle() {
        return fgetc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static int fgetc(MemorySegment __stream) {
        var mh$ = fgetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getc$descriptor() {
        return getc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static MethodHandle getc$handle() {
        return getc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static int getc(MemorySegment __stream) {
        var mh$ = getc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getchar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static FunctionDescriptor getchar$descriptor() {
        return getchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static MethodHandle getchar$handle() {
        return getchar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static int getchar() {
        var mh$ = getchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getc_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getc_unlocked$descriptor() {
        return getc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle getc_unlocked$handle() {
        return getc_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static int getc_unlocked(MemorySegment __stream) {
        var mh$ = getc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getchar_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static FunctionDescriptor getchar_unlocked$descriptor() {
        return getchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static MethodHandle getchar_unlocked$handle() {
        return getchar_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar_unlocked");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fgetc_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fgetc_unlocked$descriptor() {
        return fgetc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fgetc_unlocked$handle() {
        return fgetc_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static int fgetc_unlocked(MemorySegment __stream) {
        var mh$ = fgetc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fputc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor fputc$descriptor() {
        return fputc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle fputc$handle() {
        return fputc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static int fputc(int __c, MemorySegment __stream) {
        var mh$ = fputc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("putc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putc$descriptor() {
        return putc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle putc$handle() {
        return putc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static int putc(int __c, MemorySegment __stream) {
        var mh$ = putc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("putchar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static FunctionDescriptor putchar$descriptor() {
        return putchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static MethodHandle putchar$handle() {
        return putchar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static int putchar(int __c) {
        var mh$ = putchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar", __c);
            }
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fputc_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor fputc_unlocked$descriptor() {
        return fputc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle fputc_unlocked$handle() {
        return fputc_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static int fputc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = fputc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc_unlocked", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("putc_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putc_unlocked$descriptor() {
        return putc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle putc_unlocked$handle() {
        return putc_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static int putc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = putc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc_unlocked", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("putchar_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static FunctionDescriptor putchar_unlocked$descriptor() {
        return putchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static MethodHandle putchar_unlocked$handle() {
        return putchar_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static int putchar_unlocked(int __c) {
        var mh$ = putchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar_unlocked", __c);
            }
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getw$descriptor() {
        return getw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static MethodHandle getw$handle() {
        return getw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static int getw(MemorySegment __stream) {
        var mh$ = getw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getw", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("putw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putw$descriptor() {
        return putw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static MethodHandle putw$handle() {
        return putw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static int putw(int __w, MemorySegment __stream) {
        var mh$ = putw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putw", __w, __stream);
            }
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fgets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fgets$descriptor() {
        return fgets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fgets$handle() {
        return fgets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fgets(MemorySegment __s, int __n, MemorySegment __stream) {
        var mh$ = fgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgets", __s, __n, __stream);
            }
            return (MemorySegment)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__getdelim"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor __getdelim$descriptor() {
        return __getdelim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MethodHandle __getdelim$handle() {
        return __getdelim.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static long __getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = __getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__getdelim", __lineptr, __n, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getdelim"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getdelim$descriptor() {
        return getdelim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getdelim$handle() {
        return getdelim.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static long getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getdelim", __lineptr, __n, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getline$descriptor() {
        return getline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getline$handle() {
        return getline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static long getline(MemorySegment __lineptr, MemorySegment __n, MemorySegment __stream) {
        var mh$ = getline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getline", __lineptr, __n, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fputs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fputs$descriptor() {
        return fputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fputs$handle() {
        return fputs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static int fputs(MemorySegment __s, MemorySegment __stream) {
        var mh$ = fputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputs", __s, __stream);
            }
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class puts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("puts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static FunctionDescriptor puts$descriptor() {
        return puts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static MethodHandle puts$handle() {
        return puts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static int puts(MemorySegment __s) {
        var mh$ = puts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("puts", __s);
            }
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ungetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ungetc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor ungetc$descriptor() {
        return ungetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle ungetc$handle() {
        return ungetc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static int ungetc(int __c, MemorySegment __stream) {
        var mh$ = ungetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ungetc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fread"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread$descriptor() {
        return fread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread$handle() {
        return fread.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fwrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static FunctionDescriptor fwrite$descriptor() {
        return fwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static MethodHandle fwrite$handle() {
        return fwrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __n, MemorySegment __s) {
        var mh$ = fwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite", __ptr, __size, __n, __s);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fread_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread_unlocked$descriptor() {
        return fread_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread_unlocked$handle() {
        return fread_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fread_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread_unlocked", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fwrite_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fwrite_unlocked$descriptor() {
        return fwrite_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fwrite_unlocked$handle() {
        return fwrite_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fwrite_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fwrite_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite_unlocked", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fseek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fseek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static FunctionDescriptor fseek$descriptor() {
        return fseek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static MethodHandle fseek$handle() {
        return fseek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static int fseek(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseek", __stream, __off, __whence);
            }
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ftell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftell$descriptor() {
        return ftell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static MethodHandle ftell$handle() {
        return ftell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static long ftell(MemorySegment __stream) {
        var mh$ = ftell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftell", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("rewind"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static FunctionDescriptor rewind$descriptor() {
        return rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static MethodHandle rewind$handle() {
        return rewind.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static void rewind(MemorySegment __stream) {
        var mh$ = rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rewind", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fseeko {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fseeko"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static FunctionDescriptor fseeko$descriptor() {
        return fseeko.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static MethodHandle fseeko$handle() {
        return fseeko.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static int fseeko(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseeko.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseeko", __stream, __off, __whence);
            }
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftello {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ftello"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftello$descriptor() {
        return ftello.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static MethodHandle ftello$handle() {
        return ftello.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftello", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fgetpos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static FunctionDescriptor fgetpos$descriptor() {
        return fgetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static MethodHandle fgetpos$handle() {
        return fgetpos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static int fgetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fgetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetpos", __stream, __pos);
            }
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fsetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fsetpos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static FunctionDescriptor fsetpos$descriptor() {
        return fsetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static MethodHandle fsetpos$handle() {
        return fsetpos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static int fsetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fsetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fsetpos", __stream, __pos);
            }
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("clearerr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static FunctionDescriptor clearerr$descriptor() {
        return clearerr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static MethodHandle clearerr$handle() {
        return clearerr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static void clearerr(MemorySegment __stream) {
        var mh$ = clearerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("feof"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static FunctionDescriptor feof$descriptor() {
        return feof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static MethodHandle feof$handle() {
        return feof.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static int feof(MemorySegment __stream) {
        var mh$ = feof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ferror"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ferror$descriptor() {
        return ferror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static MethodHandle ferror$handle() {
        return ferror.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static int ferror(MemorySegment __stream) {
        var mh$ = ferror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearerr_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("clearerr_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor clearerr_unlocked$descriptor() {
        return clearerr_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle clearerr_unlocked$handle() {
        return clearerr_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static void clearerr_unlocked(MemorySegment __stream) {
        var mh$ = clearerr_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr_unlocked", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("feof_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor feof_unlocked$descriptor() {
        return feof_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle feof_unlocked$handle() {
        return feof_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static int feof_unlocked(MemorySegment __stream) {
        var mh$ = feof_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ferror_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ferror_unlocked$descriptor() {
        return ferror_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle ferror_unlocked$handle() {
        return ferror_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static int ferror_unlocked(MemorySegment __stream) {
        var mh$ = ferror_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class perror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("perror"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static FunctionDescriptor perror$descriptor() {
        return perror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static MethodHandle perror$handle() {
        return perror.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static void perror(MemorySegment __s) {
        var mh$ = perror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("perror", __s);
            }
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fileno"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fileno$descriptor() {
        return fileno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static MethodHandle fileno$handle() {
        return fileno.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static int fileno(MemorySegment __stream) {
        var mh$ = fileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fileno_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fileno_unlocked$descriptor() {
        return fileno_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fileno_unlocked$handle() {
        return fileno_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static int fileno_unlocked(MemorySegment __stream) {
        var mh$ = fileno_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pclose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static FunctionDescriptor pclose$descriptor() {
        return pclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static MethodHandle pclose$handle() {
        return pclose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static int pclose(MemorySegment __stream) {
        var mh$ = pclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pclose", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class popen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("popen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static FunctionDescriptor popen$descriptor() {
        return popen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MethodHandle popen$handle() {
        return popen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MemorySegment popen(MemorySegment __command, MemorySegment __modes) {
        var mh$ = popen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("popen", __command, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ctermid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ctermid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static FunctionDescriptor ctermid$descriptor() {
        return ctermid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MethodHandle ctermid$handle() {
        return ctermid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MemorySegment ctermid(MemorySegment __s) {
        var mh$ = ctermid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctermid", __s);
            }
            return (MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class flockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("flockfile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor flockfile$descriptor() {
        return flockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static MethodHandle flockfile$handle() {
        return flockfile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static void flockfile(MemorySegment __stream) {
        var mh$ = flockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("flockfile", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftrylockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ftrylockfile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftrylockfile$descriptor() {
        return ftrylockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static MethodHandle ftrylockfile$handle() {
        return ftrylockfile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static int ftrylockfile(MemorySegment __stream) {
        var mh$ = ftrylockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftrylockfile", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class funlockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("funlockfile"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor funlockfile$descriptor() {
        return funlockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static MethodHandle funlockfile$handle() {
        return funlockfile.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static void funlockfile(MemorySegment __stream) {
        var mh$ = funlockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("funlockfile", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __uflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__uflow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static FunctionDescriptor __uflow$descriptor() {
        return __uflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static MethodHandle __uflow$handle() {
        return __uflow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static int __uflow(MemorySegment x0) {
        var mh$ = __uflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__uflow", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __overflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__overflow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static FunctionDescriptor __overflow$descriptor() {
        return __overflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static MethodHandle __overflow$handle() {
        return __overflow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static int __overflow(MemorySegment x0, int x1) {
        var mh$ = __overflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__overflow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_split_file_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_split_file_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **pango_split_file_list(const char *str)
     * }
     */
    public static FunctionDescriptor pango_split_file_list$descriptor() {
        return pango_split_file_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **pango_split_file_list(const char *str)
     * }
     */
    public static MethodHandle pango_split_file_list$handle() {
        return pango_split_file_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **pango_split_file_list(const char *str)
     * }
     */
    public static MemorySegment pango_split_file_list(MemorySegment str) {
        var mh$ = pango_split_file_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_split_file_list", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_trim_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_trim_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *pango_trim_string(const char *str)
     * }
     */
    public static FunctionDescriptor pango_trim_string$descriptor() {
        return pango_trim_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *pango_trim_string(const char *str)
     * }
     */
    public static MethodHandle pango_trim_string$handle() {
        return pango_trim_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *pango_trim_string(const char *str)
     * }
     */
    public static MemorySegment pango_trim_string(MemorySegment str) {
        var mh$ = pango_trim_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_trim_string", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_read_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_read_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint pango_read_line(FILE *stream, GString *str)
     * }
     */
    public static FunctionDescriptor pango_read_line$descriptor() {
        return pango_read_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint pango_read_line(FILE *stream, GString *str)
     * }
     */
    public static MethodHandle pango_read_line$handle() {
        return pango_read_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint pango_read_line(FILE *stream, GString *str)
     * }
     */
    public static int pango_read_line(MemorySegment stream, MemorySegment str) {
        var mh$ = pango_read_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_read_line", stream, str);
            }
            return (int)mh$.invokeExact(stream, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_skip_space {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_skip_space"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_skip_space(const char **pos)
     * }
     */
    public static FunctionDescriptor pango_skip_space$descriptor() {
        return pango_skip_space.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_skip_space(const char **pos)
     * }
     */
    public static MethodHandle pango_skip_space$handle() {
        return pango_skip_space.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_skip_space(const char **pos)
     * }
     */
    public static int pango_skip_space(MemorySegment pos) {
        var mh$ = pango_skip_space.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_skip_space", pos);
            }
            return (int)mh$.invokeExact(pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_scan_word {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_scan_word"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_scan_word(const char **pos, GString *out)
     * }
     */
    public static FunctionDescriptor pango_scan_word$descriptor() {
        return pango_scan_word.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_scan_word(const char **pos, GString *out)
     * }
     */
    public static MethodHandle pango_scan_word$handle() {
        return pango_scan_word.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_scan_word(const char **pos, GString *out)
     * }
     */
    public static int pango_scan_word(MemorySegment pos, MemorySegment out) {
        var mh$ = pango_scan_word.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_scan_word", pos, out);
            }
            return (int)mh$.invokeExact(pos, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_scan_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_scan_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_scan_string(const char **pos, GString *out)
     * }
     */
    public static FunctionDescriptor pango_scan_string$descriptor() {
        return pango_scan_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_scan_string(const char **pos, GString *out)
     * }
     */
    public static MethodHandle pango_scan_string$handle() {
        return pango_scan_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_scan_string(const char **pos, GString *out)
     * }
     */
    public static int pango_scan_string(MemorySegment pos, MemorySegment out) {
        var mh$ = pango_scan_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_scan_string", pos, out);
            }
            return (int)mh$.invokeExact(pos, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_scan_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_scan_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_scan_int(const char **pos, int *out)
     * }
     */
    public static FunctionDescriptor pango_scan_int$descriptor() {
        return pango_scan_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_scan_int(const char **pos, int *out)
     * }
     */
    public static MethodHandle pango_scan_int$handle() {
        return pango_scan_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_scan_int(const char **pos, int *out)
     * }
     */
    public static int pango_scan_int(MemorySegment pos, MemorySegment out) {
        var mh$ = pango_scan_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_scan_int", pos, out);
            }
            return (int)mh$.invokeExact(pos, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_parse_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_parse_enum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_enum(GType type, const char *str, int *value, gboolean warn, char **possible_values)
     * }
     */
    public static FunctionDescriptor pango_parse_enum$descriptor() {
        return pango_parse_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_enum(GType type, const char *str, int *value, gboolean warn, char **possible_values)
     * }
     */
    public static MethodHandle pango_parse_enum$handle() {
        return pango_parse_enum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_parse_enum(GType type, const char *str, int *value, gboolean warn, char **possible_values)
     * }
     */
    public static int pango_parse_enum(long type, MemorySegment str, MemorySegment value, int warn, MemorySegment possible_values) {
        var mh$ = pango_parse_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_parse_enum", type, str, value, warn, possible_values);
            }
            return (int)mh$.invokeExact(type, str, value, warn, possible_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_parse_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_parse_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_style(const char *str, PangoStyle *style, gboolean warn)
     * }
     */
    public static FunctionDescriptor pango_parse_style$descriptor() {
        return pango_parse_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_style(const char *str, PangoStyle *style, gboolean warn)
     * }
     */
    public static MethodHandle pango_parse_style$handle() {
        return pango_parse_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_parse_style(const char *str, PangoStyle *style, gboolean warn)
     * }
     */
    public static int pango_parse_style(MemorySegment str, MemorySegment style, int warn) {
        var mh$ = pango_parse_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_parse_style", str, style, warn);
            }
            return (int)mh$.invokeExact(str, style, warn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_parse_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_parse_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_variant(const char *str, PangoVariant *variant, gboolean warn)
     * }
     */
    public static FunctionDescriptor pango_parse_variant$descriptor() {
        return pango_parse_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_variant(const char *str, PangoVariant *variant, gboolean warn)
     * }
     */
    public static MethodHandle pango_parse_variant$handle() {
        return pango_parse_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_parse_variant(const char *str, PangoVariant *variant, gboolean warn)
     * }
     */
    public static int pango_parse_variant(MemorySegment str, MemorySegment variant, int warn) {
        var mh$ = pango_parse_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_parse_variant", str, variant, warn);
            }
            return (int)mh$.invokeExact(str, variant, warn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_parse_weight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_parse_weight"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_weight(const char *str, PangoWeight *weight, gboolean warn)
     * }
     */
    public static FunctionDescriptor pango_parse_weight$descriptor() {
        return pango_parse_weight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_weight(const char *str, PangoWeight *weight, gboolean warn)
     * }
     */
    public static MethodHandle pango_parse_weight$handle() {
        return pango_parse_weight.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_parse_weight(const char *str, PangoWeight *weight, gboolean warn)
     * }
     */
    public static int pango_parse_weight(MemorySegment str, MemorySegment weight, int warn) {
        var mh$ = pango_parse_weight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_parse_weight", str, weight, warn);
            }
            return (int)mh$.invokeExact(str, weight, warn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_parse_stretch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_parse_stretch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_stretch(const char *str, PangoStretch *stretch, gboolean warn)
     * }
     */
    public static FunctionDescriptor pango_parse_stretch$descriptor() {
        return pango_parse_stretch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_parse_stretch(const char *str, PangoStretch *stretch, gboolean warn)
     * }
     */
    public static MethodHandle pango_parse_stretch$handle() {
        return pango_parse_stretch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_parse_stretch(const char *str, PangoStretch *stretch, gboolean warn)
     * }
     */
    public static int pango_parse_stretch(MemorySegment str, MemorySegment stretch, int warn) {
        var mh$ = pango_parse_stretch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_parse_stretch", str, stretch, warn);
            }
            return (int)mh$.invokeExact(str, stretch, warn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_quantize_line_geometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_quantize_line_geometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_quantize_line_geometry(int *thickness, int *position)
     * }
     */
    public static FunctionDescriptor pango_quantize_line_geometry$descriptor() {
        return pango_quantize_line_geometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_quantize_line_geometry(int *thickness, int *position)
     * }
     */
    public static MethodHandle pango_quantize_line_geometry$handle() {
        return pango_quantize_line_geometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_quantize_line_geometry(int *thickness, int *position)
     * }
     */
    public static void pango_quantize_line_geometry(MemorySegment thickness, MemorySegment position) {
        var mh$ = pango_quantize_line_geometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_quantize_line_geometry", thickness, position);
            }
            mh$.invokeExact(thickness, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_log2vis_get_embedding_levels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_log2vis_get_embedding_levels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint8 *pango_log2vis_get_embedding_levels(const gchar *text, int length, PangoDirection *pbase_dir)
     * }
     */
    public static FunctionDescriptor pango_log2vis_get_embedding_levels$descriptor() {
        return pango_log2vis_get_embedding_levels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint8 *pango_log2vis_get_embedding_levels(const gchar *text, int length, PangoDirection *pbase_dir)
     * }
     */
    public static MethodHandle pango_log2vis_get_embedding_levels$handle() {
        return pango_log2vis_get_embedding_levels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint8 *pango_log2vis_get_embedding_levels(const gchar *text, int length, PangoDirection *pbase_dir)
     * }
     */
    public static MemorySegment pango_log2vis_get_embedding_levels(MemorySegment text, int length, MemorySegment pbase_dir) {
        var mh$ = pango_log2vis_get_embedding_levels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_log2vis_get_embedding_levels", text, length, pbase_dir);
            }
            return (MemorySegment)mh$.invokeExact(text, length, pbase_dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_is_zero_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_is_zero_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean pango_is_zero_width(gunichar ch)
     * }
     */
    public static FunctionDescriptor pango_is_zero_width$descriptor() {
        return pango_is_zero_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean pango_is_zero_width(gunichar ch)
     * }
     */
    public static MethodHandle pango_is_zero_width$handle() {
        return pango_is_zero_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean pango_is_zero_width(gunichar ch)
     * }
     */
    public static int pango_is_zero_width(int ch) {
        var mh$ = pango_is_zero_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_is_zero_width", ch);
            }
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_find_paragraph_boundary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_find_paragraph_boundary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_find_paragraph_boundary(const char *text, int length, int *paragraph_delimiter_index, int *next_paragraph_start)
     * }
     */
    public static FunctionDescriptor pango_find_paragraph_boundary$descriptor() {
        return pango_find_paragraph_boundary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_find_paragraph_boundary(const char *text, int length, int *paragraph_delimiter_index, int *next_paragraph_start)
     * }
     */
    public static MethodHandle pango_find_paragraph_boundary$handle() {
        return pango_find_paragraph_boundary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_find_paragraph_boundary(const char *text, int length, int *paragraph_delimiter_index, int *next_paragraph_start)
     * }
     */
    public static void pango_find_paragraph_boundary(MemorySegment text, int length, MemorySegment paragraph_delimiter_index, MemorySegment next_paragraph_start) {
        var mh$ = pango_find_paragraph_boundary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_find_paragraph_boundary", text, length, paragraph_delimiter_index, next_paragraph_start);
            }
            mh$.invokeExact(text, length, paragraph_delimiter_index, next_paragraph_start);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_version()
     * }
     */
    public static FunctionDescriptor pango_version$descriptor() {
        return pango_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_version()
     * }
     */
    public static MethodHandle pango_version$handle() {
        return pango_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_version()
     * }
     */
    public static int pango_version() {
        var mh$ = pango_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_version");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_version_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_version_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *pango_version_string()
     * }
     */
    public static FunctionDescriptor pango_version_string$descriptor() {
        return pango_version_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *pango_version_string()
     * }
     */
    public static MethodHandle pango_version_string$handle() {
        return pango_version_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *pango_version_string()
     * }
     */
    public static MemorySegment pango_version_string() {
        var mh$ = pango_version_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_version_string");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_version_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_version_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *pango_version_check(int required_major, int required_minor, int required_micro)
     * }
     */
    public static FunctionDescriptor pango_version_check$descriptor() {
        return pango_version_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *pango_version_check(int required_major, int required_minor, int required_micro)
     * }
     */
    public static MethodHandle pango_version_check$handle() {
        return pango_version_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *pango_version_check(int required_major, int required_minor, int required_micro)
     * }
     */
    public static MemorySegment pango_version_check(int required_major, int required_minor, int required_micro) {
        var mh$ = pango_version_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_version_check", required_major, required_minor, required_micro);
            }
            return (MemorySegment)mh$.invokeExact(required_major, required_minor, required_micro);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int cairo_version()
     * }
     */
    public static FunctionDescriptor cairo_version$descriptor() {
        return cairo_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int cairo_version()
     * }
     */
    public static MethodHandle cairo_version$handle() {
        return cairo_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int cairo_version()
     * }
     */
    public static int cairo_version() {
        var mh$ = cairo_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_version");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_version_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_version_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *cairo_version_string()
     * }
     */
    public static FunctionDescriptor cairo_version_string$descriptor() {
        return cairo_version_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *cairo_version_string()
     * }
     */
    public static MethodHandle cairo_version_string$handle() {
        return cairo_version_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *cairo_version_string()
     * }
     */
    public static MemorySegment cairo_version_string() {
        var mh$ = cairo_version_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_version_string");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef int cairo_bool_t
     * }
     */
    public static final OfInt cairo_bool_t = app_indicator_h.C_INT;
    private static final int CAIRO_STATUS_SUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_SUCCESS = 0
     * }
     */
    public static int CAIRO_STATUS_SUCCESS() {
        return CAIRO_STATUS_SUCCESS;
    }
    private static final int CAIRO_STATUS_NO_MEMORY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_NO_MEMORY = 1
     * }
     */
    public static int CAIRO_STATUS_NO_MEMORY() {
        return CAIRO_STATUS_NO_MEMORY;
    }
    private static final int CAIRO_STATUS_INVALID_RESTORE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_RESTORE = 2
     * }
     */
    public static int CAIRO_STATUS_INVALID_RESTORE() {
        return CAIRO_STATUS_INVALID_RESTORE;
    }
    private static final int CAIRO_STATUS_INVALID_POP_GROUP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_POP_GROUP = 3
     * }
     */
    public static int CAIRO_STATUS_INVALID_POP_GROUP() {
        return CAIRO_STATUS_INVALID_POP_GROUP;
    }
    private static final int CAIRO_STATUS_NO_CURRENT_POINT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_NO_CURRENT_POINT = 4
     * }
     */
    public static int CAIRO_STATUS_NO_CURRENT_POINT() {
        return CAIRO_STATUS_NO_CURRENT_POINT;
    }
    private static final int CAIRO_STATUS_INVALID_MATRIX = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_MATRIX = 5
     * }
     */
    public static int CAIRO_STATUS_INVALID_MATRIX() {
        return CAIRO_STATUS_INVALID_MATRIX;
    }
    private static final int CAIRO_STATUS_INVALID_STATUS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_STATUS = 6
     * }
     */
    public static int CAIRO_STATUS_INVALID_STATUS() {
        return CAIRO_STATUS_INVALID_STATUS;
    }
    private static final int CAIRO_STATUS_NULL_POINTER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_NULL_POINTER = 7
     * }
     */
    public static int CAIRO_STATUS_NULL_POINTER() {
        return CAIRO_STATUS_NULL_POINTER;
    }
    private static final int CAIRO_STATUS_INVALID_STRING = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_STRING = 8
     * }
     */
    public static int CAIRO_STATUS_INVALID_STRING() {
        return CAIRO_STATUS_INVALID_STRING;
    }
    private static final int CAIRO_STATUS_INVALID_PATH_DATA = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_PATH_DATA = 9
     * }
     */
    public static int CAIRO_STATUS_INVALID_PATH_DATA() {
        return CAIRO_STATUS_INVALID_PATH_DATA;
    }
    private static final int CAIRO_STATUS_READ_ERROR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_READ_ERROR = 10
     * }
     */
    public static int CAIRO_STATUS_READ_ERROR() {
        return CAIRO_STATUS_READ_ERROR;
    }
    private static final int CAIRO_STATUS_WRITE_ERROR = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_WRITE_ERROR = 11
     * }
     */
    public static int CAIRO_STATUS_WRITE_ERROR() {
        return CAIRO_STATUS_WRITE_ERROR;
    }
    private static final int CAIRO_STATUS_SURFACE_FINISHED = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_SURFACE_FINISHED = 12
     * }
     */
    public static int CAIRO_STATUS_SURFACE_FINISHED() {
        return CAIRO_STATUS_SURFACE_FINISHED;
    }
    private static final int CAIRO_STATUS_SURFACE_TYPE_MISMATCH = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_SURFACE_TYPE_MISMATCH = 13
     * }
     */
    public static int CAIRO_STATUS_SURFACE_TYPE_MISMATCH() {
        return CAIRO_STATUS_SURFACE_TYPE_MISMATCH;
    }
    private static final int CAIRO_STATUS_PATTERN_TYPE_MISMATCH = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_PATTERN_TYPE_MISMATCH = 14
     * }
     */
    public static int CAIRO_STATUS_PATTERN_TYPE_MISMATCH() {
        return CAIRO_STATUS_PATTERN_TYPE_MISMATCH;
    }
    private static final int CAIRO_STATUS_INVALID_CONTENT = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_CONTENT = 15
     * }
     */
    public static int CAIRO_STATUS_INVALID_CONTENT() {
        return CAIRO_STATUS_INVALID_CONTENT;
    }
    private static final int CAIRO_STATUS_INVALID_FORMAT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_FORMAT = 16
     * }
     */
    public static int CAIRO_STATUS_INVALID_FORMAT() {
        return CAIRO_STATUS_INVALID_FORMAT;
    }
    private static final int CAIRO_STATUS_INVALID_VISUAL = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_VISUAL = 17
     * }
     */
    public static int CAIRO_STATUS_INVALID_VISUAL() {
        return CAIRO_STATUS_INVALID_VISUAL;
    }
    private static final int CAIRO_STATUS_FILE_NOT_FOUND = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_FILE_NOT_FOUND = 18
     * }
     */
    public static int CAIRO_STATUS_FILE_NOT_FOUND() {
        return CAIRO_STATUS_FILE_NOT_FOUND;
    }
    private static final int CAIRO_STATUS_INVALID_DASH = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_DASH = 19
     * }
     */
    public static int CAIRO_STATUS_INVALID_DASH() {
        return CAIRO_STATUS_INVALID_DASH;
    }
    private static final int CAIRO_STATUS_INVALID_DSC_COMMENT = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_DSC_COMMENT = 20
     * }
     */
    public static int CAIRO_STATUS_INVALID_DSC_COMMENT() {
        return CAIRO_STATUS_INVALID_DSC_COMMENT;
    }
    private static final int CAIRO_STATUS_INVALID_INDEX = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_INDEX = 21
     * }
     */
    public static int CAIRO_STATUS_INVALID_INDEX() {
        return CAIRO_STATUS_INVALID_INDEX;
    }
    private static final int CAIRO_STATUS_CLIP_NOT_REPRESENTABLE = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_CLIP_NOT_REPRESENTABLE = 22
     * }
     */
    public static int CAIRO_STATUS_CLIP_NOT_REPRESENTABLE() {
        return CAIRO_STATUS_CLIP_NOT_REPRESENTABLE;
    }
    private static final int CAIRO_STATUS_TEMP_FILE_ERROR = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_TEMP_FILE_ERROR = 23
     * }
     */
    public static int CAIRO_STATUS_TEMP_FILE_ERROR() {
        return CAIRO_STATUS_TEMP_FILE_ERROR;
    }
    private static final int CAIRO_STATUS_INVALID_STRIDE = (int)24L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_STRIDE = 24
     * }
     */
    public static int CAIRO_STATUS_INVALID_STRIDE() {
        return CAIRO_STATUS_INVALID_STRIDE;
    }
    private static final int CAIRO_STATUS_FONT_TYPE_MISMATCH = (int)25L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_FONT_TYPE_MISMATCH = 25
     * }
     */
    public static int CAIRO_STATUS_FONT_TYPE_MISMATCH() {
        return CAIRO_STATUS_FONT_TYPE_MISMATCH;
    }
    private static final int CAIRO_STATUS_USER_FONT_IMMUTABLE = (int)26L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_USER_FONT_IMMUTABLE = 26
     * }
     */
    public static int CAIRO_STATUS_USER_FONT_IMMUTABLE() {
        return CAIRO_STATUS_USER_FONT_IMMUTABLE;
    }
    private static final int CAIRO_STATUS_USER_FONT_ERROR = (int)27L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_USER_FONT_ERROR = 27
     * }
     */
    public static int CAIRO_STATUS_USER_FONT_ERROR() {
        return CAIRO_STATUS_USER_FONT_ERROR;
    }
    private static final int CAIRO_STATUS_NEGATIVE_COUNT = (int)28L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_NEGATIVE_COUNT = 28
     * }
     */
    public static int CAIRO_STATUS_NEGATIVE_COUNT() {
        return CAIRO_STATUS_NEGATIVE_COUNT;
    }
    private static final int CAIRO_STATUS_INVALID_CLUSTERS = (int)29L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_CLUSTERS = 29
     * }
     */
    public static int CAIRO_STATUS_INVALID_CLUSTERS() {
        return CAIRO_STATUS_INVALID_CLUSTERS;
    }
    private static final int CAIRO_STATUS_INVALID_SLANT = (int)30L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_SLANT = 30
     * }
     */
    public static int CAIRO_STATUS_INVALID_SLANT() {
        return CAIRO_STATUS_INVALID_SLANT;
    }
    private static final int CAIRO_STATUS_INVALID_WEIGHT = (int)31L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_WEIGHT = 31
     * }
     */
    public static int CAIRO_STATUS_INVALID_WEIGHT() {
        return CAIRO_STATUS_INVALID_WEIGHT;
    }
    private static final int CAIRO_STATUS_INVALID_SIZE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_SIZE = 32
     * }
     */
    public static int CAIRO_STATUS_INVALID_SIZE() {
        return CAIRO_STATUS_INVALID_SIZE;
    }
    private static final int CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED = (int)33L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED = 33
     * }
     */
    public static int CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED() {
        return CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED;
    }
    private static final int CAIRO_STATUS_DEVICE_TYPE_MISMATCH = (int)34L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_DEVICE_TYPE_MISMATCH = 34
     * }
     */
    public static int CAIRO_STATUS_DEVICE_TYPE_MISMATCH() {
        return CAIRO_STATUS_DEVICE_TYPE_MISMATCH;
    }
    private static final int CAIRO_STATUS_DEVICE_ERROR = (int)35L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_DEVICE_ERROR = 35
     * }
     */
    public static int CAIRO_STATUS_DEVICE_ERROR() {
        return CAIRO_STATUS_DEVICE_ERROR;
    }
    private static final int CAIRO_STATUS_INVALID_MESH_CONSTRUCTION = (int)36L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_INVALID_MESH_CONSTRUCTION = 36
     * }
     */
    public static int CAIRO_STATUS_INVALID_MESH_CONSTRUCTION() {
        return CAIRO_STATUS_INVALID_MESH_CONSTRUCTION;
    }
    private static final int CAIRO_STATUS_DEVICE_FINISHED = (int)37L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_DEVICE_FINISHED = 37
     * }
     */
    public static int CAIRO_STATUS_DEVICE_FINISHED() {
        return CAIRO_STATUS_DEVICE_FINISHED;
    }
    private static final int CAIRO_STATUS_JBIG2_GLOBAL_MISSING = (int)38L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_JBIG2_GLOBAL_MISSING = 38
     * }
     */
    public static int CAIRO_STATUS_JBIG2_GLOBAL_MISSING() {
        return CAIRO_STATUS_JBIG2_GLOBAL_MISSING;
    }
    private static final int CAIRO_STATUS_PNG_ERROR = (int)39L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_PNG_ERROR = 39
     * }
     */
    public static int CAIRO_STATUS_PNG_ERROR() {
        return CAIRO_STATUS_PNG_ERROR;
    }
    private static final int CAIRO_STATUS_FREETYPE_ERROR = (int)40L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_FREETYPE_ERROR = 40
     * }
     */
    public static int CAIRO_STATUS_FREETYPE_ERROR() {
        return CAIRO_STATUS_FREETYPE_ERROR;
    }
    private static final int CAIRO_STATUS_WIN32_GDI_ERROR = (int)41L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_WIN32_GDI_ERROR = 41
     * }
     */
    public static int CAIRO_STATUS_WIN32_GDI_ERROR() {
        return CAIRO_STATUS_WIN32_GDI_ERROR;
    }
    private static final int CAIRO_STATUS_TAG_ERROR = (int)42L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_TAG_ERROR = 42
     * }
     */
    public static int CAIRO_STATUS_TAG_ERROR() {
        return CAIRO_STATUS_TAG_ERROR;
    }
    private static final int CAIRO_STATUS_DWRITE_ERROR = (int)43L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_DWRITE_ERROR = 43
     * }
     */
    public static int CAIRO_STATUS_DWRITE_ERROR() {
        return CAIRO_STATUS_DWRITE_ERROR;
    }
    private static final int CAIRO_STATUS_SVG_FONT_ERROR = (int)44L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_SVG_FONT_ERROR = 44
     * }
     */
    public static int CAIRO_STATUS_SVG_FONT_ERROR() {
        return CAIRO_STATUS_SVG_FONT_ERROR;
    }
    private static final int CAIRO_STATUS_LAST_STATUS = (int)45L;
    /**
     * {@snippet lang=c :
     * enum _cairo_status.CAIRO_STATUS_LAST_STATUS = 45
     * }
     */
    public static int CAIRO_STATUS_LAST_STATUS() {
        return CAIRO_STATUS_LAST_STATUS;
    }
    private static final int CAIRO_CONTENT_COLOR = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum _cairo_content.CAIRO_CONTENT_COLOR = 4096
     * }
     */
    public static int CAIRO_CONTENT_COLOR() {
        return CAIRO_CONTENT_COLOR;
    }
    private static final int CAIRO_CONTENT_ALPHA = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum _cairo_content.CAIRO_CONTENT_ALPHA = 8192
     * }
     */
    public static int CAIRO_CONTENT_ALPHA() {
        return CAIRO_CONTENT_ALPHA;
    }
    private static final int CAIRO_CONTENT_COLOR_ALPHA = (int)12288L;
    /**
     * {@snippet lang=c :
     * enum _cairo_content.CAIRO_CONTENT_COLOR_ALPHA = 12288
     * }
     */
    public static int CAIRO_CONTENT_COLOR_ALPHA() {
        return CAIRO_CONTENT_COLOR_ALPHA;
    }
    private static final int CAIRO_FORMAT_INVALID = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_format.CAIRO_FORMAT_INVALID = -1
     * }
     */
    public static int CAIRO_FORMAT_INVALID() {
        return CAIRO_FORMAT_INVALID;
    }
    private static final int CAIRO_FORMAT_ARGB32 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_format.CAIRO_FORMAT_ARGB32 = 0
     * }
     */
    public static int CAIRO_FORMAT_ARGB32() {
        return CAIRO_FORMAT_ARGB32;
    }
    private static final int CAIRO_FORMAT_RGB24 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_format.CAIRO_FORMAT_RGB24 = 1
     * }
     */
    public static int CAIRO_FORMAT_RGB24() {
        return CAIRO_FORMAT_RGB24;
    }
    private static final int CAIRO_FORMAT_A8 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_format.CAIRO_FORMAT_A8 = 2
     * }
     */
    public static int CAIRO_FORMAT_A8() {
        return CAIRO_FORMAT_A8;
    }
    private static final int CAIRO_FORMAT_A1 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_format.CAIRO_FORMAT_A1 = 3
     * }
     */
    public static int CAIRO_FORMAT_A1() {
        return CAIRO_FORMAT_A1;
    }
    private static final int CAIRO_FORMAT_RGB16_565 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_format.CAIRO_FORMAT_RGB16_565 = 4
     * }
     */
    public static int CAIRO_FORMAT_RGB16_565() {
        return CAIRO_FORMAT_RGB16_565;
    }
    private static final int CAIRO_FORMAT_RGB30 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _cairo_format.CAIRO_FORMAT_RGB30 = 5
     * }
     */
    public static int CAIRO_FORMAT_RGB30() {
        return CAIRO_FORMAT_RGB30;
    }
    private static final int CAIRO_FORMAT_RGB96F = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _cairo_format.CAIRO_FORMAT_RGB96F = 6
     * }
     */
    public static int CAIRO_FORMAT_RGB96F() {
        return CAIRO_FORMAT_RGB96F;
    }
    private static final int CAIRO_FORMAT_RGBA128F = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _cairo_format.CAIRO_FORMAT_RGBA128F = 7
     * }
     */
    public static int CAIRO_FORMAT_RGBA128F() {
        return CAIRO_FORMAT_RGBA128F;
    }
    private static final int CAIRO_DITHER_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_dither.CAIRO_DITHER_NONE = 0
     * }
     */
    public static int CAIRO_DITHER_NONE() {
        return CAIRO_DITHER_NONE;
    }
    private static final int CAIRO_DITHER_DEFAULT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_dither.CAIRO_DITHER_DEFAULT = 1
     * }
     */
    public static int CAIRO_DITHER_DEFAULT() {
        return CAIRO_DITHER_DEFAULT;
    }
    private static final int CAIRO_DITHER_FAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_dither.CAIRO_DITHER_FAST = 2
     * }
     */
    public static int CAIRO_DITHER_FAST() {
        return CAIRO_DITHER_FAST;
    }
    private static final int CAIRO_DITHER_GOOD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_dither.CAIRO_DITHER_GOOD = 3
     * }
     */
    public static int CAIRO_DITHER_GOOD() {
        return CAIRO_DITHER_GOOD;
    }
    private static final int CAIRO_DITHER_BEST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_dither.CAIRO_DITHER_BEST = 4
     * }
     */
    public static int CAIRO_DITHER_BEST() {
        return CAIRO_DITHER_BEST;
    }

    private static class cairo_pattern_set_dither {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_set_dither"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_pattern_set_dither(cairo_pattern_t *pattern, cairo_dither_t dither)
     * }
     */
    public static FunctionDescriptor cairo_pattern_set_dither$descriptor() {
        return cairo_pattern_set_dither.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_pattern_set_dither(cairo_pattern_t *pattern, cairo_dither_t dither)
     * }
     */
    public static MethodHandle cairo_pattern_set_dither$handle() {
        return cairo_pattern_set_dither.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_pattern_set_dither(cairo_pattern_t *pattern, cairo_dither_t dither)
     * }
     */
    public static void cairo_pattern_set_dither(MemorySegment pattern, int dither) {
        var mh$ = cairo_pattern_set_dither.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_set_dither", pattern, dither);
            }
            mh$.invokeExact(pattern, dither);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_dither {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_dither"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_dither_t cairo_pattern_get_dither(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_dither$descriptor() {
        return cairo_pattern_get_dither.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_dither_t cairo_pattern_get_dither(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_pattern_get_dither$handle() {
        return cairo_pattern_get_dither.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_dither_t cairo_pattern_get_dither(cairo_pattern_t *pattern)
     * }
     */
    public static int cairo_pattern_get_dither(MemorySegment pattern) {
        var mh$ = cairo_pattern_get_dither.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_dither", pattern);
            }
            return (int)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_t *cairo_create(cairo_surface_t *target)
     * }
     */
    public static FunctionDescriptor cairo_create$descriptor() {
        return cairo_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_t *cairo_create(cairo_surface_t *target)
     * }
     */
    public static MethodHandle cairo_create$handle() {
        return cairo_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_t *cairo_create(cairo_surface_t *target)
     * }
     */
    public static MemorySegment cairo_create(MemorySegment target) {
        var mh$ = cairo_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_create", target);
            }
            return (MemorySegment)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_t *cairo_reference(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_reference$descriptor() {
        return cairo_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_t *cairo_reference(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_reference$handle() {
        return cairo_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_t *cairo_reference(cairo_t *cr)
     * }
     */
    public static MemorySegment cairo_reference(MemorySegment cr) {
        var mh$ = cairo_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_reference", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_destroy(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_destroy$descriptor() {
        return cairo_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_destroy(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_destroy$handle() {
        return cairo_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_destroy(cairo_t *cr)
     * }
     */
    public static void cairo_destroy(MemorySegment cr) {
        var mh$ = cairo_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_destroy", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_reference_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_reference_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int cairo_get_reference_count(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_reference_count$descriptor() {
        return cairo_get_reference_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int cairo_get_reference_count(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_reference_count$handle() {
        return cairo_get_reference_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int cairo_get_reference_count(cairo_t *cr)
     * }
     */
    public static int cairo_get_reference_count(MemorySegment cr) {
        var mh$ = cairo_get_reference_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_reference_count", cr);
            }
            return (int)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *cairo_get_user_data(cairo_t *cr, const cairo_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor cairo_get_user_data$descriptor() {
        return cairo_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *cairo_get_user_data(cairo_t *cr, const cairo_user_data_key_t *key)
     * }
     */
    public static MethodHandle cairo_get_user_data$handle() {
        return cairo_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *cairo_get_user_data(cairo_t *cr, const cairo_user_data_key_t *key)
     * }
     */
    public static MemorySegment cairo_get_user_data(MemorySegment cr, MemorySegment key) {
        var mh$ = cairo_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_user_data", cr, key);
            }
            return (MemorySegment)mh$.invokeExact(cr, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_set_user_data(cairo_t *cr, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor cairo_set_user_data$descriptor() {
        return cairo_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_set_user_data(cairo_t *cr, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static MethodHandle cairo_set_user_data$handle() {
        return cairo_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_set_user_data(cairo_t *cr, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static int cairo_set_user_data(MemorySegment cr, MemorySegment key, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = cairo_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_user_data", cr, key, user_data, destroy);
            }
            return (int)mh$.invokeExact(cr, key, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_save {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_save"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_save(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_save$descriptor() {
        return cairo_save.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_save(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_save$handle() {
        return cairo_save.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_save(cairo_t *cr)
     * }
     */
    public static void cairo_save(MemorySegment cr) {
        var mh$ = cairo_save.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_save", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_restore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_restore"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_restore(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_restore$descriptor() {
        return cairo_restore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_restore(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_restore$handle() {
        return cairo_restore.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_restore(cairo_t *cr)
     * }
     */
    public static void cairo_restore(MemorySegment cr) {
        var mh$ = cairo_restore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_restore", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_push_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_push_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_push_group(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_push_group$descriptor() {
        return cairo_push_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_push_group(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_push_group$handle() {
        return cairo_push_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_push_group(cairo_t *cr)
     * }
     */
    public static void cairo_push_group(MemorySegment cr) {
        var mh$ = cairo_push_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_push_group", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_push_group_with_content {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_push_group_with_content"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_push_group_with_content(cairo_t *cr, cairo_content_t content)
     * }
     */
    public static FunctionDescriptor cairo_push_group_with_content$descriptor() {
        return cairo_push_group_with_content.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_push_group_with_content(cairo_t *cr, cairo_content_t content)
     * }
     */
    public static MethodHandle cairo_push_group_with_content$handle() {
        return cairo_push_group_with_content.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_push_group_with_content(cairo_t *cr, cairo_content_t content)
     * }
     */
    public static void cairo_push_group_with_content(MemorySegment cr, int content) {
        var mh$ = cairo_push_group_with_content.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_push_group_with_content", cr, content);
            }
            mh$.invokeExact(cr, content);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pop_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pop_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pop_group(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_pop_group$descriptor() {
        return cairo_pop_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pop_group(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_pop_group$handle() {
        return cairo_pop_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pop_group(cairo_t *cr)
     * }
     */
    public static MemorySegment cairo_pop_group(MemorySegment cr) {
        var mh$ = cairo_pop_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pop_group", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pop_group_to_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pop_group_to_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_pop_group_to_source(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_pop_group_to_source$descriptor() {
        return cairo_pop_group_to_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_pop_group_to_source(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_pop_group_to_source$handle() {
        return cairo_pop_group_to_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_pop_group_to_source(cairo_t *cr)
     * }
     */
    public static void cairo_pop_group_to_source(MemorySegment cr) {
        var mh$ = cairo_pop_group_to_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pop_group_to_source", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_OPERATOR_CLEAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_CLEAR = 0
     * }
     */
    public static int CAIRO_OPERATOR_CLEAR() {
        return CAIRO_OPERATOR_CLEAR;
    }
    private static final int CAIRO_OPERATOR_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_SOURCE = 1
     * }
     */
    public static int CAIRO_OPERATOR_SOURCE() {
        return CAIRO_OPERATOR_SOURCE;
    }
    private static final int CAIRO_OPERATOR_OVER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_OVER = 2
     * }
     */
    public static int CAIRO_OPERATOR_OVER() {
        return CAIRO_OPERATOR_OVER;
    }
    private static final int CAIRO_OPERATOR_IN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_IN = 3
     * }
     */
    public static int CAIRO_OPERATOR_IN() {
        return CAIRO_OPERATOR_IN;
    }
    private static final int CAIRO_OPERATOR_OUT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_OUT = 4
     * }
     */
    public static int CAIRO_OPERATOR_OUT() {
        return CAIRO_OPERATOR_OUT;
    }
    private static final int CAIRO_OPERATOR_ATOP = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_ATOP = 5
     * }
     */
    public static int CAIRO_OPERATOR_ATOP() {
        return CAIRO_OPERATOR_ATOP;
    }
    private static final int CAIRO_OPERATOR_DEST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_DEST = 6
     * }
     */
    public static int CAIRO_OPERATOR_DEST() {
        return CAIRO_OPERATOR_DEST;
    }
    private static final int CAIRO_OPERATOR_DEST_OVER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_DEST_OVER = 7
     * }
     */
    public static int CAIRO_OPERATOR_DEST_OVER() {
        return CAIRO_OPERATOR_DEST_OVER;
    }
    private static final int CAIRO_OPERATOR_DEST_IN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_DEST_IN = 8
     * }
     */
    public static int CAIRO_OPERATOR_DEST_IN() {
        return CAIRO_OPERATOR_DEST_IN;
    }
    private static final int CAIRO_OPERATOR_DEST_OUT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_DEST_OUT = 9
     * }
     */
    public static int CAIRO_OPERATOR_DEST_OUT() {
        return CAIRO_OPERATOR_DEST_OUT;
    }
    private static final int CAIRO_OPERATOR_DEST_ATOP = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_DEST_ATOP = 10
     * }
     */
    public static int CAIRO_OPERATOR_DEST_ATOP() {
        return CAIRO_OPERATOR_DEST_ATOP;
    }
    private static final int CAIRO_OPERATOR_XOR = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_XOR = 11
     * }
     */
    public static int CAIRO_OPERATOR_XOR() {
        return CAIRO_OPERATOR_XOR;
    }
    private static final int CAIRO_OPERATOR_ADD = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_ADD = 12
     * }
     */
    public static int CAIRO_OPERATOR_ADD() {
        return CAIRO_OPERATOR_ADD;
    }
    private static final int CAIRO_OPERATOR_SATURATE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_SATURATE = 13
     * }
     */
    public static int CAIRO_OPERATOR_SATURATE() {
        return CAIRO_OPERATOR_SATURATE;
    }
    private static final int CAIRO_OPERATOR_MULTIPLY = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_MULTIPLY = 14
     * }
     */
    public static int CAIRO_OPERATOR_MULTIPLY() {
        return CAIRO_OPERATOR_MULTIPLY;
    }
    private static final int CAIRO_OPERATOR_SCREEN = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_SCREEN = 15
     * }
     */
    public static int CAIRO_OPERATOR_SCREEN() {
        return CAIRO_OPERATOR_SCREEN;
    }
    private static final int CAIRO_OPERATOR_OVERLAY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_OVERLAY = 16
     * }
     */
    public static int CAIRO_OPERATOR_OVERLAY() {
        return CAIRO_OPERATOR_OVERLAY;
    }
    private static final int CAIRO_OPERATOR_DARKEN = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_DARKEN = 17
     * }
     */
    public static int CAIRO_OPERATOR_DARKEN() {
        return CAIRO_OPERATOR_DARKEN;
    }
    private static final int CAIRO_OPERATOR_LIGHTEN = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_LIGHTEN = 18
     * }
     */
    public static int CAIRO_OPERATOR_LIGHTEN() {
        return CAIRO_OPERATOR_LIGHTEN;
    }
    private static final int CAIRO_OPERATOR_COLOR_DODGE = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_COLOR_DODGE = 19
     * }
     */
    public static int CAIRO_OPERATOR_COLOR_DODGE() {
        return CAIRO_OPERATOR_COLOR_DODGE;
    }
    private static final int CAIRO_OPERATOR_COLOR_BURN = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_COLOR_BURN = 20
     * }
     */
    public static int CAIRO_OPERATOR_COLOR_BURN() {
        return CAIRO_OPERATOR_COLOR_BURN;
    }
    private static final int CAIRO_OPERATOR_HARD_LIGHT = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_HARD_LIGHT = 21
     * }
     */
    public static int CAIRO_OPERATOR_HARD_LIGHT() {
        return CAIRO_OPERATOR_HARD_LIGHT;
    }
    private static final int CAIRO_OPERATOR_SOFT_LIGHT = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_SOFT_LIGHT = 22
     * }
     */
    public static int CAIRO_OPERATOR_SOFT_LIGHT() {
        return CAIRO_OPERATOR_SOFT_LIGHT;
    }
    private static final int CAIRO_OPERATOR_DIFFERENCE = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_DIFFERENCE = 23
     * }
     */
    public static int CAIRO_OPERATOR_DIFFERENCE() {
        return CAIRO_OPERATOR_DIFFERENCE;
    }
    private static final int CAIRO_OPERATOR_EXCLUSION = (int)24L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_EXCLUSION = 24
     * }
     */
    public static int CAIRO_OPERATOR_EXCLUSION() {
        return CAIRO_OPERATOR_EXCLUSION;
    }
    private static final int CAIRO_OPERATOR_HSL_HUE = (int)25L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_HSL_HUE = 25
     * }
     */
    public static int CAIRO_OPERATOR_HSL_HUE() {
        return CAIRO_OPERATOR_HSL_HUE;
    }
    private static final int CAIRO_OPERATOR_HSL_SATURATION = (int)26L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_HSL_SATURATION = 26
     * }
     */
    public static int CAIRO_OPERATOR_HSL_SATURATION() {
        return CAIRO_OPERATOR_HSL_SATURATION;
    }
    private static final int CAIRO_OPERATOR_HSL_COLOR = (int)27L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_HSL_COLOR = 27
     * }
     */
    public static int CAIRO_OPERATOR_HSL_COLOR() {
        return CAIRO_OPERATOR_HSL_COLOR;
    }
    private static final int CAIRO_OPERATOR_HSL_LUMINOSITY = (int)28L;
    /**
     * {@snippet lang=c :
     * enum _cairo_operator.CAIRO_OPERATOR_HSL_LUMINOSITY = 28
     * }
     */
    public static int CAIRO_OPERATOR_HSL_LUMINOSITY() {
        return CAIRO_OPERATOR_HSL_LUMINOSITY;
    }

    private static class cairo_set_operator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_operator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_operator(cairo_t *cr, cairo_operator_t op)
     * }
     */
    public static FunctionDescriptor cairo_set_operator$descriptor() {
        return cairo_set_operator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_operator(cairo_t *cr, cairo_operator_t op)
     * }
     */
    public static MethodHandle cairo_set_operator$handle() {
        return cairo_set_operator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_operator(cairo_t *cr, cairo_operator_t op)
     * }
     */
    public static void cairo_set_operator(MemorySegment cr, int op) {
        var mh$ = cairo_set_operator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_operator", cr, op);
            }
            mh$.invokeExact(cr, op);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_source(cairo_t *cr, cairo_pattern_t *source)
     * }
     */
    public static FunctionDescriptor cairo_set_source$descriptor() {
        return cairo_set_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_source(cairo_t *cr, cairo_pattern_t *source)
     * }
     */
    public static MethodHandle cairo_set_source$handle() {
        return cairo_set_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_source(cairo_t *cr, cairo_pattern_t *source)
     * }
     */
    public static void cairo_set_source(MemorySegment cr, MemorySegment source) {
        var mh$ = cairo_set_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_source", cr, source);
            }
            mh$.invokeExact(cr, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_source_rgb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_source_rgb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_source_rgb(cairo_t *cr, double red, double green, double blue)
     * }
     */
    public static FunctionDescriptor cairo_set_source_rgb$descriptor() {
        return cairo_set_source_rgb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_source_rgb(cairo_t *cr, double red, double green, double blue)
     * }
     */
    public static MethodHandle cairo_set_source_rgb$handle() {
        return cairo_set_source_rgb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_source_rgb(cairo_t *cr, double red, double green, double blue)
     * }
     */
    public static void cairo_set_source_rgb(MemorySegment cr, double red, double green, double blue) {
        var mh$ = cairo_set_source_rgb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_source_rgb", cr, red, green, blue);
            }
            mh$.invokeExact(cr, red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_source_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_source_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_source_rgba(cairo_t *cr, double red, double green, double blue, double alpha)
     * }
     */
    public static FunctionDescriptor cairo_set_source_rgba$descriptor() {
        return cairo_set_source_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_source_rgba(cairo_t *cr, double red, double green, double blue, double alpha)
     * }
     */
    public static MethodHandle cairo_set_source_rgba$handle() {
        return cairo_set_source_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_source_rgba(cairo_t *cr, double red, double green, double blue, double alpha)
     * }
     */
    public static void cairo_set_source_rgba(MemorySegment cr, double red, double green, double blue, double alpha) {
        var mh$ = cairo_set_source_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_source_rgba", cr, red, green, blue, alpha);
            }
            mh$.invokeExact(cr, red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_source_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_source_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_source_surface(cairo_t *cr, cairo_surface_t *surface, double x, double y)
     * }
     */
    public static FunctionDescriptor cairo_set_source_surface$descriptor() {
        return cairo_set_source_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_source_surface(cairo_t *cr, cairo_surface_t *surface, double x, double y)
     * }
     */
    public static MethodHandle cairo_set_source_surface$handle() {
        return cairo_set_source_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_source_surface(cairo_t *cr, cairo_surface_t *surface, double x, double y)
     * }
     */
    public static void cairo_set_source_surface(MemorySegment cr, MemorySegment surface, double x, double y) {
        var mh$ = cairo_set_source_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_source_surface", cr, surface, x, y);
            }
            mh$.invokeExact(cr, surface, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_tolerance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_tolerance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_tolerance(cairo_t *cr, double tolerance)
     * }
     */
    public static FunctionDescriptor cairo_set_tolerance$descriptor() {
        return cairo_set_tolerance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_tolerance(cairo_t *cr, double tolerance)
     * }
     */
    public static MethodHandle cairo_set_tolerance$handle() {
        return cairo_set_tolerance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_tolerance(cairo_t *cr, double tolerance)
     * }
     */
    public static void cairo_set_tolerance(MemorySegment cr, double tolerance) {
        var mh$ = cairo_set_tolerance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_tolerance", cr, tolerance);
            }
            mh$.invokeExact(cr, tolerance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_ANTIALIAS_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_antialias.CAIRO_ANTIALIAS_DEFAULT = 0
     * }
     */
    public static int CAIRO_ANTIALIAS_DEFAULT() {
        return CAIRO_ANTIALIAS_DEFAULT;
    }
    private static final int CAIRO_ANTIALIAS_NONE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_antialias.CAIRO_ANTIALIAS_NONE = 1
     * }
     */
    public static int CAIRO_ANTIALIAS_NONE() {
        return CAIRO_ANTIALIAS_NONE;
    }
    private static final int CAIRO_ANTIALIAS_GRAY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_antialias.CAIRO_ANTIALIAS_GRAY = 2
     * }
     */
    public static int CAIRO_ANTIALIAS_GRAY() {
        return CAIRO_ANTIALIAS_GRAY;
    }
    private static final int CAIRO_ANTIALIAS_SUBPIXEL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_antialias.CAIRO_ANTIALIAS_SUBPIXEL = 3
     * }
     */
    public static int CAIRO_ANTIALIAS_SUBPIXEL() {
        return CAIRO_ANTIALIAS_SUBPIXEL;
    }
    private static final int CAIRO_ANTIALIAS_FAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_antialias.CAIRO_ANTIALIAS_FAST = 4
     * }
     */
    public static int CAIRO_ANTIALIAS_FAST() {
        return CAIRO_ANTIALIAS_FAST;
    }
    private static final int CAIRO_ANTIALIAS_GOOD = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _cairo_antialias.CAIRO_ANTIALIAS_GOOD = 5
     * }
     */
    public static int CAIRO_ANTIALIAS_GOOD() {
        return CAIRO_ANTIALIAS_GOOD;
    }
    private static final int CAIRO_ANTIALIAS_BEST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _cairo_antialias.CAIRO_ANTIALIAS_BEST = 6
     * }
     */
    public static int CAIRO_ANTIALIAS_BEST() {
        return CAIRO_ANTIALIAS_BEST;
    }

    private static class cairo_set_antialias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_antialias"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_antialias(cairo_t *cr, cairo_antialias_t antialias)
     * }
     */
    public static FunctionDescriptor cairo_set_antialias$descriptor() {
        return cairo_set_antialias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_antialias(cairo_t *cr, cairo_antialias_t antialias)
     * }
     */
    public static MethodHandle cairo_set_antialias$handle() {
        return cairo_set_antialias.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_antialias(cairo_t *cr, cairo_antialias_t antialias)
     * }
     */
    public static void cairo_set_antialias(MemorySegment cr, int antialias) {
        var mh$ = cairo_set_antialias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_antialias", cr, antialias);
            }
            mh$.invokeExact(cr, antialias);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_FILL_RULE_WINDING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_fill_rule.CAIRO_FILL_RULE_WINDING = 0
     * }
     */
    public static int CAIRO_FILL_RULE_WINDING() {
        return CAIRO_FILL_RULE_WINDING;
    }
    private static final int CAIRO_FILL_RULE_EVEN_ODD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_fill_rule.CAIRO_FILL_RULE_EVEN_ODD = 1
     * }
     */
    public static int CAIRO_FILL_RULE_EVEN_ODD() {
        return CAIRO_FILL_RULE_EVEN_ODD;
    }

    private static class cairo_set_fill_rule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_fill_rule"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_fill_rule(cairo_t *cr, cairo_fill_rule_t fill_rule)
     * }
     */
    public static FunctionDescriptor cairo_set_fill_rule$descriptor() {
        return cairo_set_fill_rule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_fill_rule(cairo_t *cr, cairo_fill_rule_t fill_rule)
     * }
     */
    public static MethodHandle cairo_set_fill_rule$handle() {
        return cairo_set_fill_rule.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_fill_rule(cairo_t *cr, cairo_fill_rule_t fill_rule)
     * }
     */
    public static void cairo_set_fill_rule(MemorySegment cr, int fill_rule) {
        var mh$ = cairo_set_fill_rule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_fill_rule", cr, fill_rule);
            }
            mh$.invokeExact(cr, fill_rule);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_line_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_line_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_line_width(cairo_t *cr, double width)
     * }
     */
    public static FunctionDescriptor cairo_set_line_width$descriptor() {
        return cairo_set_line_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_line_width(cairo_t *cr, double width)
     * }
     */
    public static MethodHandle cairo_set_line_width$handle() {
        return cairo_set_line_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_line_width(cairo_t *cr, double width)
     * }
     */
    public static void cairo_set_line_width(MemorySegment cr, double width) {
        var mh$ = cairo_set_line_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_line_width", cr, width);
            }
            mh$.invokeExact(cr, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_hairline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_hairline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_hairline(cairo_t *cr, cairo_bool_t set_hairline)
     * }
     */
    public static FunctionDescriptor cairo_set_hairline$descriptor() {
        return cairo_set_hairline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_hairline(cairo_t *cr, cairo_bool_t set_hairline)
     * }
     */
    public static MethodHandle cairo_set_hairline$handle() {
        return cairo_set_hairline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_hairline(cairo_t *cr, cairo_bool_t set_hairline)
     * }
     */
    public static void cairo_set_hairline(MemorySegment cr, int set_hairline) {
        var mh$ = cairo_set_hairline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_hairline", cr, set_hairline);
            }
            mh$.invokeExact(cr, set_hairline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_LINE_CAP_BUTT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_line_cap.CAIRO_LINE_CAP_BUTT = 0
     * }
     */
    public static int CAIRO_LINE_CAP_BUTT() {
        return CAIRO_LINE_CAP_BUTT;
    }
    private static final int CAIRO_LINE_CAP_ROUND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_line_cap.CAIRO_LINE_CAP_ROUND = 1
     * }
     */
    public static int CAIRO_LINE_CAP_ROUND() {
        return CAIRO_LINE_CAP_ROUND;
    }
    private static final int CAIRO_LINE_CAP_SQUARE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_line_cap.CAIRO_LINE_CAP_SQUARE = 2
     * }
     */
    public static int CAIRO_LINE_CAP_SQUARE() {
        return CAIRO_LINE_CAP_SQUARE;
    }

    private static class cairo_set_line_cap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_line_cap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_line_cap(cairo_t *cr, cairo_line_cap_t line_cap)
     * }
     */
    public static FunctionDescriptor cairo_set_line_cap$descriptor() {
        return cairo_set_line_cap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_line_cap(cairo_t *cr, cairo_line_cap_t line_cap)
     * }
     */
    public static MethodHandle cairo_set_line_cap$handle() {
        return cairo_set_line_cap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_line_cap(cairo_t *cr, cairo_line_cap_t line_cap)
     * }
     */
    public static void cairo_set_line_cap(MemorySegment cr, int line_cap) {
        var mh$ = cairo_set_line_cap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_line_cap", cr, line_cap);
            }
            mh$.invokeExact(cr, line_cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

