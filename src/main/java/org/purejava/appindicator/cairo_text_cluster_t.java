// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct {
 *     int num_bytes;
 *     int num_glyphs;
 * };
 * }
 */
public class cairo_text_cluster_t {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("num_bytes"),
        Constants$root.C_INT$LAYOUT.withName("num_glyphs")
    );
    public static MemoryLayout $LAYOUT() {
        return cairo_text_cluster_t.$struct$LAYOUT;
    }
    static final VarHandle num_bytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_bytes"));
    public static VarHandle num_bytes$VH() {
        return cairo_text_cluster_t.num_bytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int num_bytes;
     * }
     */
    public static int num_bytes$get(MemorySegment seg) {
        return (int)cairo_text_cluster_t.num_bytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int num_bytes;
     * }
     */
    public static void num_bytes$set(MemorySegment seg, int x) {
        cairo_text_cluster_t.num_bytes$VH.set(seg, x);
    }
    public static int num_bytes$get(MemorySegment seg, long index) {
        return (int)cairo_text_cluster_t.num_bytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_bytes$set(MemorySegment seg, long index, int x) {
        cairo_text_cluster_t.num_bytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_glyphs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_glyphs"));
    public static VarHandle num_glyphs$VH() {
        return cairo_text_cluster_t.num_glyphs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int num_glyphs;
     * }
     */
    public static int num_glyphs$get(MemorySegment seg) {
        return (int)cairo_text_cluster_t.num_glyphs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int num_glyphs;
     * }
     */
    public static void num_glyphs$set(MemorySegment seg, int x) {
        cairo_text_cluster_t.num_glyphs$VH.set(seg, x);
    }
    public static int num_glyphs$get(MemorySegment seg, long index) {
        return (int)cairo_text_cluster_t.num_glyphs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_glyphs$set(MemorySegment seg, long index, int x) {
        cairo_text_cluster_t.num_glyphs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


