// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     int num_bytes;
 *     int num_glyphs;
 * }
 * }
 */
public class cairo_text_cluster_t {

    cairo_text_cluster_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_INT.withName("num_bytes"),
        app_indicator_h.C_INT.withName("num_glyphs")
    ).withName("$anon$1194:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt num_bytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_bytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int num_bytes
     * }
     */
    public static final OfInt num_bytes$layout() {
        return num_bytes$LAYOUT;
    }

    private static final long num_bytes$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int num_bytes
     * }
     */
    public static final long num_bytes$offset() {
        return num_bytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int num_bytes
     * }
     */
    public static int num_bytes(MemorySegment struct) {
        return struct.get(num_bytes$LAYOUT, num_bytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int num_bytes
     * }
     */
    public static void num_bytes(MemorySegment struct, int fieldValue) {
        struct.set(num_bytes$LAYOUT, num_bytes$OFFSET, fieldValue);
    }

    private static final OfInt num_glyphs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_glyphs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int num_glyphs
     * }
     */
    public static final OfInt num_glyphs$layout() {
        return num_glyphs$LAYOUT;
    }

    private static final long num_glyphs$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int num_glyphs
     * }
     */
    public static final long num_glyphs$offset() {
        return num_glyphs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int num_glyphs
     * }
     */
    public static int num_glyphs(MemorySegment struct) {
        return struct.get(num_glyphs$LAYOUT, num_glyphs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int num_glyphs
     * }
     */
    public static void num_glyphs(MemorySegment struct, int fieldValue) {
        struct.set(num_glyphs$LAYOUT, num_glyphs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

