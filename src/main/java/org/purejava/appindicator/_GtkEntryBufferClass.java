// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkEntryBufferClass {
 *     struct _GObjectClass parent_class;
 *     void (*inserted_text)(struct _GtkEntryBuffer*,unsigned int,char*,unsigned int);
 *     void (*deleted_text)(struct _GtkEntryBuffer*,unsigned int,unsigned int);
 *     char* (*get_text)(struct _GtkEntryBuffer*,unsigned long*);
 *     unsigned int (*get_length)(struct _GtkEntryBuffer*);
 *     unsigned int (*insert_text)(struct _GtkEntryBuffer*,unsigned int,char*,unsigned int);
 *     unsigned int (*delete_text)(struct _GtkEntryBuffer*,unsigned int,unsigned int);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 * };
 * }
 */
public class _GtkEntryBufferClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2417.const$4;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*inserted_text)(struct _GtkEntryBuffer*,unsigned int,char*,unsigned int);
     * }
     */
    public interface inserted_text {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(inserted_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2417.const$5, fi, constants$1501.const$3, scope);
        }
        static inserted_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$2418.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle inserted_text$VH() {
        return constants$2418.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*inserted_text)(struct _GtkEntryBuffer*,unsigned int,char*,unsigned int);
     * }
     */
    public static MemorySegment inserted_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2418.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*inserted_text)(struct _GtkEntryBuffer*,unsigned int,char*,unsigned int);
     * }
     */
    public static void inserted_text$set(MemorySegment seg, MemorySegment x) {
        constants$2418.const$1.set(seg, x);
    }
    public static MemorySegment inserted_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2418.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void inserted_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2418.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static inserted_text inserted_text(MemorySegment segment, Arena scope) {
        return inserted_text.ofAddress(inserted_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*deleted_text)(struct _GtkEntryBuffer*,unsigned int,unsigned int);
     * }
     */
    public interface deleted_text {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(deleted_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2418.const$2, fi, constants$469.const$2, scope);
        }
        static deleted_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1906.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle deleted_text$VH() {
        return constants$2418.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*deleted_text)(struct _GtkEntryBuffer*,unsigned int,unsigned int);
     * }
     */
    public static MemorySegment deleted_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2418.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*deleted_text)(struct _GtkEntryBuffer*,unsigned int,unsigned int);
     * }
     */
    public static void deleted_text$set(MemorySegment seg, MemorySegment x) {
        constants$2418.const$3.set(seg, x);
    }
    public static MemorySegment deleted_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2418.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void deleted_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2418.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static deleted_text deleted_text(MemorySegment segment, Arena scope) {
        return deleted_text.ofAddress(deleted_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_text)(struct _GtkEntryBuffer*,unsigned long*);
     * }
     */
    public interface get_text {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2418.const$4, fi, constants$5.const$5, scope);
        }
        static get_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_text$VH() {
        return constants$2418.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_text)(struct _GtkEntryBuffer*,unsigned long*);
     * }
     */
    public static MemorySegment get_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2418.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_text)(struct _GtkEntryBuffer*,unsigned long*);
     * }
     */
    public static void get_text$set(MemorySegment seg, MemorySegment x) {
        constants$2418.const$5.set(seg, x);
    }
    public static MemorySegment get_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2418.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2418.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text(MemorySegment segment, Arena scope) {
        return get_text.ofAddress(get_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned int (*get_length)(struct _GtkEntryBuffer*);
     * }
     */
    public interface get_length {

        int apply(java.lang.foreign.MemorySegment key);
        static MemorySegment allocate(get_length fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2419.const$0, fi, constants$10.const$5, scope);
        }
        static get_length ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _key);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_length$VH() {
        return constants$2419.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int (*get_length)(struct _GtkEntryBuffer*);
     * }
     */
    public static MemorySegment get_length$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2419.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int (*get_length)(struct _GtkEntryBuffer*);
     * }
     */
    public static void get_length$set(MemorySegment seg, MemorySegment x) {
        constants$2419.const$1.set(seg, x);
    }
    public static MemorySegment get_length$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2419.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_length$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2419.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_length get_length(MemorySegment segment, Arena scope) {
        return get_length.ofAddress(get_length$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned int (*insert_text)(struct _GtkEntryBuffer*,unsigned int,char*,unsigned int);
     * }
     */
    public interface insert_text {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(insert_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2419.const$2, fi, constants$265.const$2, scope);
        }
        static insert_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$2419.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insert_text$VH() {
        return constants$2419.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int (*insert_text)(struct _GtkEntryBuffer*,unsigned int,char*,unsigned int);
     * }
     */
    public static MemorySegment insert_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2419.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int (*insert_text)(struct _GtkEntryBuffer*,unsigned int,char*,unsigned int);
     * }
     */
    public static void insert_text$set(MemorySegment seg, MemorySegment x) {
        constants$2419.const$4.set(seg, x);
    }
    public static MemorySegment insert_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2419.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2419.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_text insert_text(MemorySegment segment, Arena scope) {
        return insert_text.ofAddress(insert_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned int (*delete_text)(struct _GtkEntryBuffer*,unsigned int,unsigned int);
     * }
     */
    public interface delete_text {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(delete_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2419.const$5, fi, constants$49.const$0, scope);
        }
        static delete_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$247.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle delete_text$VH() {
        return constants$2420.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int (*delete_text)(struct _GtkEntryBuffer*,unsigned int,unsigned int);
     * }
     */
    public static MemorySegment delete_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2420.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int (*delete_text)(struct _GtkEntryBuffer*,unsigned int,unsigned int);
     * }
     */
    public static void delete_text$set(MemorySegment seg, MemorySegment x) {
        constants$2420.const$0.set(seg, x);
    }
    public static MemorySegment delete_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2420.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2420.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_text delete_text(MemorySegment segment, Arena scope) {
        return delete_text.ofAddress(delete_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2420.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2420.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2420.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2420.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2420.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2420.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2420.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2420.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2420.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2420.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2420.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2420.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2420.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2421.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2421.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2421.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2421.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2421.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2421.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2421.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2421.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2421.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2421.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2421.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2421.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved5$VH() {
        return constants$2421.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2421.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$2421.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2421.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2421.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, Arena scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2421.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved6$VH() {
        return constants$2422.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2422.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$2422.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2422.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2422.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, Arena scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2422.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved7$VH() {
        return constants$2422.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2422.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$2422.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2422.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2422.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, Arena scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2422.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved8$VH() {
        return constants$2422.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2422.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$2422.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2422.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2422.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, Arena scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


