// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_8 extends app_indicator_h_9 {

    app_indicator_h_8() {
        // Should not be called directly
    }

    private static class gdk_window_set_functions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_functions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_functions(GdkWindow *window, GdkWMFunction functions)
     * }
     */
    public static FunctionDescriptor gdk_window_set_functions$descriptor() {
        return gdk_window_set_functions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_functions(GdkWindow *window, GdkWMFunction functions)
     * }
     */
    public static MethodHandle gdk_window_set_functions$handle() {
        return gdk_window_set_functions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_functions(GdkWindow *window, GdkWMFunction functions)
     * }
     */
    public static void gdk_window_set_functions(MemorySegment window, int functions) {
        var mh$ = gdk_window_set_functions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_functions", window, functions);
            }
            mh$.invokeExact(window, functions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_create_similar_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_create_similar_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_window_create_similar_surface(GdkWindow *window, cairo_content_t content, int width, int height)
     * }
     */
    public static FunctionDescriptor gdk_window_create_similar_surface$descriptor() {
        return gdk_window_create_similar_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_window_create_similar_surface(GdkWindow *window, cairo_content_t content, int width, int height)
     * }
     */
    public static MethodHandle gdk_window_create_similar_surface$handle() {
        return gdk_window_create_similar_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_window_create_similar_surface(GdkWindow *window, cairo_content_t content, int width, int height)
     * }
     */
    public static MemorySegment gdk_window_create_similar_surface(MemorySegment window, int content, int width, int height) {
        var mh$ = gdk_window_create_similar_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_create_similar_surface", window, content, width, height);
            }
            return (MemorySegment)mh$.invokeExact(window, content, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_create_similar_image_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_create_similar_image_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_window_create_similar_image_surface(GdkWindow *window, cairo_format_t format, int width, int height, int scale)
     * }
     */
    public static FunctionDescriptor gdk_window_create_similar_image_surface$descriptor() {
        return gdk_window_create_similar_image_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_window_create_similar_image_surface(GdkWindow *window, cairo_format_t format, int width, int height, int scale)
     * }
     */
    public static MethodHandle gdk_window_create_similar_image_surface$handle() {
        return gdk_window_create_similar_image_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_window_create_similar_image_surface(GdkWindow *window, cairo_format_t format, int width, int height, int scale)
     * }
     */
    public static MemorySegment gdk_window_create_similar_image_surface(MemorySegment window, int format, int width, int height, int scale) {
        var mh$ = gdk_window_create_similar_image_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_create_similar_image_surface", window, format, width, height, scale);
            }
            return (MemorySegment)mh$.invokeExact(window, format, width, height, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_beep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_beep"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_beep(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_beep$descriptor() {
        return gdk_window_beep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_beep(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_beep$handle() {
        return gdk_window_beep.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_beep(GdkWindow *window)
     * }
     */
    public static void gdk_window_beep(MemorySegment window) {
        var mh$ = gdk_window_beep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_beep", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_iconify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_iconify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_iconify(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_iconify$descriptor() {
        return gdk_window_iconify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_iconify(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_iconify$handle() {
        return gdk_window_iconify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_iconify(GdkWindow *window)
     * }
     */
    public static void gdk_window_iconify(MemorySegment window) {
        var mh$ = gdk_window_iconify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_iconify", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_deiconify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_deiconify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_deiconify(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_deiconify$descriptor() {
        return gdk_window_deiconify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_deiconify(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_deiconify$handle() {
        return gdk_window_deiconify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_deiconify(GdkWindow *window)
     * }
     */
    public static void gdk_window_deiconify(MemorySegment window) {
        var mh$ = gdk_window_deiconify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_deiconify", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_stick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_stick"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_stick(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_stick$descriptor() {
        return gdk_window_stick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_stick(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_stick$handle() {
        return gdk_window_stick.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_stick(GdkWindow *window)
     * }
     */
    public static void gdk_window_stick(MemorySegment window) {
        var mh$ = gdk_window_stick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_stick", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_unstick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_unstick"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_unstick(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_unstick$descriptor() {
        return gdk_window_unstick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_unstick(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_unstick$handle() {
        return gdk_window_unstick.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_unstick(GdkWindow *window)
     * }
     */
    public static void gdk_window_unstick(MemorySegment window) {
        var mh$ = gdk_window_unstick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_unstick", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_maximize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_maximize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_maximize(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_maximize$descriptor() {
        return gdk_window_maximize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_maximize(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_maximize$handle() {
        return gdk_window_maximize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_maximize(GdkWindow *window)
     * }
     */
    public static void gdk_window_maximize(MemorySegment window) {
        var mh$ = gdk_window_maximize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_maximize", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_unmaximize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_unmaximize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_unmaximize(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_unmaximize$descriptor() {
        return gdk_window_unmaximize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_unmaximize(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_unmaximize$handle() {
        return gdk_window_unmaximize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_unmaximize(GdkWindow *window)
     * }
     */
    public static void gdk_window_unmaximize(MemorySegment window) {
        var mh$ = gdk_window_unmaximize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_unmaximize", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_fullscreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_fullscreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_fullscreen(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_fullscreen$descriptor() {
        return gdk_window_fullscreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_fullscreen(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_fullscreen$handle() {
        return gdk_window_fullscreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_fullscreen(GdkWindow *window)
     * }
     */
    public static void gdk_window_fullscreen(MemorySegment window) {
        var mh$ = gdk_window_fullscreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_fullscreen", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_fullscreen_on_monitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_fullscreen_on_monitor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_fullscreen_on_monitor(GdkWindow *window, gint monitor)
     * }
     */
    public static FunctionDescriptor gdk_window_fullscreen_on_monitor$descriptor() {
        return gdk_window_fullscreen_on_monitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_fullscreen_on_monitor(GdkWindow *window, gint monitor)
     * }
     */
    public static MethodHandle gdk_window_fullscreen_on_monitor$handle() {
        return gdk_window_fullscreen_on_monitor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_fullscreen_on_monitor(GdkWindow *window, gint monitor)
     * }
     */
    public static void gdk_window_fullscreen_on_monitor(MemorySegment window, int monitor) {
        var mh$ = gdk_window_fullscreen_on_monitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_fullscreen_on_monitor", window, monitor);
            }
            mh$.invokeExact(window, monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_fullscreen_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_fullscreen_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_fullscreen_mode(GdkWindow *window, GdkFullscreenMode mode)
     * }
     */
    public static FunctionDescriptor gdk_window_set_fullscreen_mode$descriptor() {
        return gdk_window_set_fullscreen_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_fullscreen_mode(GdkWindow *window, GdkFullscreenMode mode)
     * }
     */
    public static MethodHandle gdk_window_set_fullscreen_mode$handle() {
        return gdk_window_set_fullscreen_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_fullscreen_mode(GdkWindow *window, GdkFullscreenMode mode)
     * }
     */
    public static void gdk_window_set_fullscreen_mode(MemorySegment window, int mode) {
        var mh$ = gdk_window_set_fullscreen_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_fullscreen_mode", window, mode);
            }
            mh$.invokeExact(window, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_fullscreen_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_fullscreen_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkFullscreenMode gdk_window_get_fullscreen_mode(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_fullscreen_mode$descriptor() {
        return gdk_window_get_fullscreen_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkFullscreenMode gdk_window_get_fullscreen_mode(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_fullscreen_mode$handle() {
        return gdk_window_get_fullscreen_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkFullscreenMode gdk_window_get_fullscreen_mode(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_fullscreen_mode(MemorySegment window) {
        var mh$ = gdk_window_get_fullscreen_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_fullscreen_mode", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_unfullscreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_unfullscreen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_unfullscreen(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_unfullscreen$descriptor() {
        return gdk_window_unfullscreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_unfullscreen(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_unfullscreen$handle() {
        return gdk_window_unfullscreen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_unfullscreen(GdkWindow *window)
     * }
     */
    public static void gdk_window_unfullscreen(MemorySegment window) {
        var mh$ = gdk_window_unfullscreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_unfullscreen", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_keep_above {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_keep_above"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_keep_above(GdkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gdk_window_set_keep_above$descriptor() {
        return gdk_window_set_keep_above.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_keep_above(GdkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gdk_window_set_keep_above$handle() {
        return gdk_window_set_keep_above.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_keep_above(GdkWindow *window, gboolean setting)
     * }
     */
    public static void gdk_window_set_keep_above(MemorySegment window, int setting) {
        var mh$ = gdk_window_set_keep_above.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_keep_above", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_keep_below {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_keep_below"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_keep_below(GdkWindow *window, gboolean setting)
     * }
     */
    public static FunctionDescriptor gdk_window_set_keep_below$descriptor() {
        return gdk_window_set_keep_below.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_keep_below(GdkWindow *window, gboolean setting)
     * }
     */
    public static MethodHandle gdk_window_set_keep_below$handle() {
        return gdk_window_set_keep_below.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_keep_below(GdkWindow *window, gboolean setting)
     * }
     */
    public static void gdk_window_set_keep_below(MemorySegment window, int setting) {
        var mh$ = gdk_window_set_keep_below.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_keep_below", window, setting);
            }
            mh$.invokeExact(window, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_opacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_opacity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_opacity(GdkWindow *window, gdouble opacity)
     * }
     */
    public static FunctionDescriptor gdk_window_set_opacity$descriptor() {
        return gdk_window_set_opacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_opacity(GdkWindow *window, gdouble opacity)
     * }
     */
    public static MethodHandle gdk_window_set_opacity$handle() {
        return gdk_window_set_opacity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_opacity(GdkWindow *window, gdouble opacity)
     * }
     */
    public static void gdk_window_set_opacity(MemorySegment window, double opacity) {
        var mh$ = gdk_window_set_opacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_opacity", window, opacity);
            }
            mh$.invokeExact(window, opacity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_register_dnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_register_dnd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_register_dnd(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_register_dnd$descriptor() {
        return gdk_window_register_dnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_register_dnd(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_register_dnd$handle() {
        return gdk_window_register_dnd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_register_dnd(GdkWindow *window)
     * }
     */
    public static void gdk_window_register_dnd(MemorySegment window) {
        var mh$ = gdk_window_register_dnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_register_dnd", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_drag_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_drag_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDragProtocol gdk_window_get_drag_protocol(GdkWindow *window, GdkWindow **target)
     * }
     */
    public static FunctionDescriptor gdk_window_get_drag_protocol$descriptor() {
        return gdk_window_get_drag_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDragProtocol gdk_window_get_drag_protocol(GdkWindow *window, GdkWindow **target)
     * }
     */
    public static MethodHandle gdk_window_get_drag_protocol$handle() {
        return gdk_window_get_drag_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDragProtocol gdk_window_get_drag_protocol(GdkWindow *window, GdkWindow **target)
     * }
     */
    public static int gdk_window_get_drag_protocol(MemorySegment window, MemorySegment target) {
        var mh$ = gdk_window_get_drag_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_drag_protocol", window, target);
            }
            return (int)mh$.invokeExact(window, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_begin_resize_drag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_begin_resize_drag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_resize_drag(GdkWindow *window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static FunctionDescriptor gdk_window_begin_resize_drag$descriptor() {
        return gdk_window_begin_resize_drag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_resize_drag(GdkWindow *window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static MethodHandle gdk_window_begin_resize_drag$handle() {
        return gdk_window_begin_resize_drag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_begin_resize_drag(GdkWindow *window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static void gdk_window_begin_resize_drag(MemorySegment window, int edge, int button, int root_x, int root_y, int timestamp) {
        var mh$ = gdk_window_begin_resize_drag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_begin_resize_drag", window, edge, button, root_x, root_y, timestamp);
            }
            mh$.invokeExact(window, edge, button, root_x, root_y, timestamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_begin_resize_drag_for_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_begin_resize_drag_for_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_resize_drag_for_device(GdkWindow *window, GdkWindowEdge edge, GdkDevice *device, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static FunctionDescriptor gdk_window_begin_resize_drag_for_device$descriptor() {
        return gdk_window_begin_resize_drag_for_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_resize_drag_for_device(GdkWindow *window, GdkWindowEdge edge, GdkDevice *device, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static MethodHandle gdk_window_begin_resize_drag_for_device$handle() {
        return gdk_window_begin_resize_drag_for_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_begin_resize_drag_for_device(GdkWindow *window, GdkWindowEdge edge, GdkDevice *device, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static void gdk_window_begin_resize_drag_for_device(MemorySegment window, int edge, MemorySegment device, int button, int root_x, int root_y, int timestamp) {
        var mh$ = gdk_window_begin_resize_drag_for_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_begin_resize_drag_for_device", window, edge, device, button, root_x, root_y, timestamp);
            }
            mh$.invokeExact(window, edge, device, button, root_x, root_y, timestamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_begin_move_drag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_begin_move_drag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_move_drag(GdkWindow *window, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static FunctionDescriptor gdk_window_begin_move_drag$descriptor() {
        return gdk_window_begin_move_drag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_move_drag(GdkWindow *window, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static MethodHandle gdk_window_begin_move_drag$handle() {
        return gdk_window_begin_move_drag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_begin_move_drag(GdkWindow *window, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static void gdk_window_begin_move_drag(MemorySegment window, int button, int root_x, int root_y, int timestamp) {
        var mh$ = gdk_window_begin_move_drag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_begin_move_drag", window, button, root_x, root_y, timestamp);
            }
            mh$.invokeExact(window, button, root_x, root_y, timestamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_begin_move_drag_for_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_begin_move_drag_for_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_move_drag_for_device(GdkWindow *window, GdkDevice *device, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static FunctionDescriptor gdk_window_begin_move_drag_for_device$descriptor() {
        return gdk_window_begin_move_drag_for_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_move_drag_for_device(GdkWindow *window, GdkDevice *device, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static MethodHandle gdk_window_begin_move_drag_for_device$handle() {
        return gdk_window_begin_move_drag_for_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_begin_move_drag_for_device(GdkWindow *window, GdkDevice *device, gint button, gint root_x, gint root_y, guint32 timestamp)
     * }
     */
    public static void gdk_window_begin_move_drag_for_device(MemorySegment window, MemorySegment device, int button, int root_x, int root_y, int timestamp) {
        var mh$ = gdk_window_begin_move_drag_for_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_begin_move_drag_for_device", window, device, button, root_x, root_y, timestamp);
            }
            mh$.invokeExact(window, device, button, root_x, root_y, timestamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_invalidate_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_invalidate_rect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_invalidate_rect(GdkWindow *window, const GdkRectangle *rect, gboolean invalidate_children)
     * }
     */
    public static FunctionDescriptor gdk_window_invalidate_rect$descriptor() {
        return gdk_window_invalidate_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_invalidate_rect(GdkWindow *window, const GdkRectangle *rect, gboolean invalidate_children)
     * }
     */
    public static MethodHandle gdk_window_invalidate_rect$handle() {
        return gdk_window_invalidate_rect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_invalidate_rect(GdkWindow *window, const GdkRectangle *rect, gboolean invalidate_children)
     * }
     */
    public static void gdk_window_invalidate_rect(MemorySegment window, MemorySegment rect, int invalidate_children) {
        var mh$ = gdk_window_invalidate_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_invalidate_rect", window, rect, invalidate_children);
            }
            mh$.invokeExact(window, rect, invalidate_children);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_invalidate_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_invalidate_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_invalidate_region(GdkWindow *window, const cairo_region_t *region, gboolean invalidate_children)
     * }
     */
    public static FunctionDescriptor gdk_window_invalidate_region$descriptor() {
        return gdk_window_invalidate_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_invalidate_region(GdkWindow *window, const cairo_region_t *region, gboolean invalidate_children)
     * }
     */
    public static MethodHandle gdk_window_invalidate_region$handle() {
        return gdk_window_invalidate_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_invalidate_region(GdkWindow *window, const cairo_region_t *region, gboolean invalidate_children)
     * }
     */
    public static void gdk_window_invalidate_region(MemorySegment window, MemorySegment region, int invalidate_children) {
        var mh$ = gdk_window_invalidate_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_invalidate_region", window, region, invalidate_children);
            }
            mh$.invokeExact(window, region, invalidate_children);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_invalidate_maybe_recurse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_invalidate_maybe_recurse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_invalidate_maybe_recurse(GdkWindow *window, const cairo_region_t *region, GdkWindowChildFunc child_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gdk_window_invalidate_maybe_recurse$descriptor() {
        return gdk_window_invalidate_maybe_recurse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_invalidate_maybe_recurse(GdkWindow *window, const cairo_region_t *region, GdkWindowChildFunc child_func, gpointer user_data)
     * }
     */
    public static MethodHandle gdk_window_invalidate_maybe_recurse$handle() {
        return gdk_window_invalidate_maybe_recurse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_invalidate_maybe_recurse(GdkWindow *window, const cairo_region_t *region, GdkWindowChildFunc child_func, gpointer user_data)
     * }
     */
    public static void gdk_window_invalidate_maybe_recurse(MemorySegment window, MemorySegment region, MemorySegment child_func, MemorySegment user_data) {
        var mh$ = gdk_window_invalidate_maybe_recurse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_invalidate_maybe_recurse", window, region, child_func, user_data);
            }
            mh$.invokeExact(window, region, child_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_update_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_update_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_window_get_update_area(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_update_area$descriptor() {
        return gdk_window_get_update_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_window_get_update_area(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_update_area$handle() {
        return gdk_window_get_update_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_window_get_update_area(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_update_area(MemorySegment window) {
        var mh$ = gdk_window_get_update_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_update_area", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_freeze_updates {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_freeze_updates"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_freeze_updates(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_freeze_updates$descriptor() {
        return gdk_window_freeze_updates.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_freeze_updates(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_freeze_updates$handle() {
        return gdk_window_freeze_updates.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_freeze_updates(GdkWindow *window)
     * }
     */
    public static void gdk_window_freeze_updates(MemorySegment window) {
        var mh$ = gdk_window_freeze_updates.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_freeze_updates", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_thaw_updates {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_thaw_updates"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_thaw_updates(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_thaw_updates$descriptor() {
        return gdk_window_thaw_updates.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_thaw_updates(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_thaw_updates$handle() {
        return gdk_window_thaw_updates.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_thaw_updates(GdkWindow *window)
     * }
     */
    public static void gdk_window_thaw_updates(MemorySegment window) {
        var mh$ = gdk_window_thaw_updates.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_thaw_updates", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_freeze_toplevel_updates_libgtk_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_freeze_toplevel_updates_libgtk_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_freeze_toplevel_updates_libgtk_only(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_freeze_toplevel_updates_libgtk_only$descriptor() {
        return gdk_window_freeze_toplevel_updates_libgtk_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_freeze_toplevel_updates_libgtk_only(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_freeze_toplevel_updates_libgtk_only$handle() {
        return gdk_window_freeze_toplevel_updates_libgtk_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_freeze_toplevel_updates_libgtk_only(GdkWindow *window)
     * }
     */
    public static void gdk_window_freeze_toplevel_updates_libgtk_only(MemorySegment window) {
        var mh$ = gdk_window_freeze_toplevel_updates_libgtk_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_freeze_toplevel_updates_libgtk_only", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_thaw_toplevel_updates_libgtk_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_thaw_toplevel_updates_libgtk_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_thaw_toplevel_updates_libgtk_only(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_thaw_toplevel_updates_libgtk_only$descriptor() {
        return gdk_window_thaw_toplevel_updates_libgtk_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_thaw_toplevel_updates_libgtk_only(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_thaw_toplevel_updates_libgtk_only$handle() {
        return gdk_window_thaw_toplevel_updates_libgtk_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_thaw_toplevel_updates_libgtk_only(GdkWindow *window)
     * }
     */
    public static void gdk_window_thaw_toplevel_updates_libgtk_only(MemorySegment window) {
        var mh$ = gdk_window_thaw_toplevel_updates_libgtk_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_thaw_toplevel_updates_libgtk_only", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_process_all_updates {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_process_all_updates"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_process_all_updates()
     * }
     */
    public static FunctionDescriptor gdk_window_process_all_updates$descriptor() {
        return gdk_window_process_all_updates.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_process_all_updates()
     * }
     */
    public static MethodHandle gdk_window_process_all_updates$handle() {
        return gdk_window_process_all_updates.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_process_all_updates()
     * }
     */
    public static void gdk_window_process_all_updates() {
        var mh$ = gdk_window_process_all_updates.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_process_all_updates");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_process_updates {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_process_updates"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_process_updates(GdkWindow *window, gboolean update_children)
     * }
     */
    public static FunctionDescriptor gdk_window_process_updates$descriptor() {
        return gdk_window_process_updates.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_process_updates(GdkWindow *window, gboolean update_children)
     * }
     */
    public static MethodHandle gdk_window_process_updates$handle() {
        return gdk_window_process_updates.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_process_updates(GdkWindow *window, gboolean update_children)
     * }
     */
    public static void gdk_window_process_updates(MemorySegment window, int update_children) {
        var mh$ = gdk_window_process_updates.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_process_updates", window, update_children);
            }
            mh$.invokeExact(window, update_children);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_debug_updates {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_debug_updates"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_debug_updates(gboolean setting)
     * }
     */
    public static FunctionDescriptor gdk_window_set_debug_updates$descriptor() {
        return gdk_window_set_debug_updates.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_debug_updates(gboolean setting)
     * }
     */
    public static MethodHandle gdk_window_set_debug_updates$handle() {
        return gdk_window_set_debug_updates.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_debug_updates(gboolean setting)
     * }
     */
    public static void gdk_window_set_debug_updates(int setting) {
        var mh$ = gdk_window_set_debug_updates.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_debug_updates", setting);
            }
            mh$.invokeExact(setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_constrain_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_constrain_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_constrain_size(GdkGeometry *geometry, GdkWindowHints flags, gint width, gint height, gint *new_width, gint *new_height)
     * }
     */
    public static FunctionDescriptor gdk_window_constrain_size$descriptor() {
        return gdk_window_constrain_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_constrain_size(GdkGeometry *geometry, GdkWindowHints flags, gint width, gint height, gint *new_width, gint *new_height)
     * }
     */
    public static MethodHandle gdk_window_constrain_size$handle() {
        return gdk_window_constrain_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_constrain_size(GdkGeometry *geometry, GdkWindowHints flags, gint width, gint height, gint *new_width, gint *new_height)
     * }
     */
    public static void gdk_window_constrain_size(MemorySegment geometry, int flags, int width, int height, MemorySegment new_width, MemorySegment new_height) {
        var mh$ = gdk_window_constrain_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_constrain_size", geometry, flags, width, height, new_width, new_height);
            }
            mh$.invokeExact(geometry, flags, width, height, new_width, new_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_enable_synchronized_configure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_enable_synchronized_configure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_enable_synchronized_configure(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_enable_synchronized_configure$descriptor() {
        return gdk_window_enable_synchronized_configure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_enable_synchronized_configure(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_enable_synchronized_configure$handle() {
        return gdk_window_enable_synchronized_configure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_enable_synchronized_configure(GdkWindow *window)
     * }
     */
    public static void gdk_window_enable_synchronized_configure(MemorySegment window) {
        var mh$ = gdk_window_enable_synchronized_configure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_enable_synchronized_configure", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_configure_finished {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_configure_finished"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_configure_finished(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_configure_finished$descriptor() {
        return gdk_window_configure_finished.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_configure_finished(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_configure_finished$handle() {
        return gdk_window_configure_finished.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_configure_finished(GdkWindow *window)
     * }
     */
    public static void gdk_window_configure_finished(MemorySegment window) {
        var mh$ = gdk_window_configure_finished.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_configure_finished", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_get_default_root_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_get_default_root_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_get_default_root_window()
     * }
     */
    public static FunctionDescriptor gdk_get_default_root_window$descriptor() {
        return gdk_get_default_root_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_get_default_root_window()
     * }
     */
    public static MethodHandle gdk_get_default_root_window$handle() {
        return gdk_get_default_root_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_get_default_root_window()
     * }
     */
    public static MemorySegment gdk_get_default_root_window() {
        var mh$ = gdk_get_default_root_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_get_default_root_window");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_offscreen_window_get_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_offscreen_window_get_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_offscreen_window_get_surface(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_offscreen_window_get_surface$descriptor() {
        return gdk_offscreen_window_get_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_offscreen_window_get_surface(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_offscreen_window_get_surface$handle() {
        return gdk_offscreen_window_get_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_offscreen_window_get_surface(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_offscreen_window_get_surface(MemorySegment window) {
        var mh$ = gdk_offscreen_window_get_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_offscreen_window_get_surface", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_offscreen_window_set_embedder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_offscreen_window_set_embedder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_offscreen_window_set_embedder(GdkWindow *window, GdkWindow *embedder)
     * }
     */
    public static FunctionDescriptor gdk_offscreen_window_set_embedder$descriptor() {
        return gdk_offscreen_window_set_embedder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_offscreen_window_set_embedder(GdkWindow *window, GdkWindow *embedder)
     * }
     */
    public static MethodHandle gdk_offscreen_window_set_embedder$handle() {
        return gdk_offscreen_window_set_embedder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_offscreen_window_set_embedder(GdkWindow *window, GdkWindow *embedder)
     * }
     */
    public static void gdk_offscreen_window_set_embedder(MemorySegment window, MemorySegment embedder) {
        var mh$ = gdk_offscreen_window_set_embedder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_offscreen_window_set_embedder", window, embedder);
            }
            mh$.invokeExact(window, embedder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_offscreen_window_get_embedder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_offscreen_window_get_embedder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_offscreen_window_get_embedder(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_offscreen_window_get_embedder$descriptor() {
        return gdk_offscreen_window_get_embedder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_offscreen_window_get_embedder(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_offscreen_window_get_embedder$handle() {
        return gdk_offscreen_window_get_embedder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_offscreen_window_get_embedder(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_offscreen_window_get_embedder(MemorySegment window) {
        var mh$ = gdk_offscreen_window_get_embedder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_offscreen_window_get_embedder", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_geometry_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_geometry_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_geometry_changed(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_geometry_changed$descriptor() {
        return gdk_window_geometry_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_geometry_changed(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_geometry_changed$handle() {
        return gdk_window_geometry_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_geometry_changed(GdkWindow *window)
     * }
     */
    public static void gdk_window_geometry_changed(MemorySegment window) {
        var mh$ = gdk_window_geometry_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_geometry_changed", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_support_multidevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_support_multidevice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_support_multidevice(GdkWindow *window, gboolean support_multidevice)
     * }
     */
    public static FunctionDescriptor gdk_window_set_support_multidevice$descriptor() {
        return gdk_window_set_support_multidevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_support_multidevice(GdkWindow *window, gboolean support_multidevice)
     * }
     */
    public static MethodHandle gdk_window_set_support_multidevice$handle() {
        return gdk_window_set_support_multidevice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_support_multidevice(GdkWindow *window, gboolean support_multidevice)
     * }
     */
    public static void gdk_window_set_support_multidevice(MemorySegment window, int support_multidevice) {
        var mh$ = gdk_window_set_support_multidevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_support_multidevice", window, support_multidevice);
            }
            mh$.invokeExact(window, support_multidevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_support_multidevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_support_multidevice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_support_multidevice(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_support_multidevice$descriptor() {
        return gdk_window_get_support_multidevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_support_multidevice(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_support_multidevice$handle() {
        return gdk_window_get_support_multidevice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_support_multidevice(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_support_multidevice(MemorySegment window) {
        var mh$ = gdk_window_get_support_multidevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_support_multidevice", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_frame_clock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_frame_clock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkFrameClock *gdk_window_get_frame_clock(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_frame_clock$descriptor() {
        return gdk_window_get_frame_clock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkFrameClock *gdk_window_get_frame_clock(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_frame_clock$handle() {
        return gdk_window_get_frame_clock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkFrameClock *gdk_window_get_frame_clock(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_frame_clock(MemorySegment window) {
        var mh$ = gdk_window_get_frame_clock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_frame_clock", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_opaque_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_opaque_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_opaque_region(GdkWindow *window, cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor gdk_window_set_opaque_region$descriptor() {
        return gdk_window_set_opaque_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_opaque_region(GdkWindow *window, cairo_region_t *region)
     * }
     */
    public static MethodHandle gdk_window_set_opaque_region$handle() {
        return gdk_window_set_opaque_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_opaque_region(GdkWindow *window, cairo_region_t *region)
     * }
     */
    public static void gdk_window_set_opaque_region(MemorySegment window, MemorySegment region) {
        var mh$ = gdk_window_set_opaque_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_opaque_region", window, region);
            }
            mh$.invokeExact(window, region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_event_compression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_event_compression"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_event_compression(GdkWindow *window, gboolean event_compression)
     * }
     */
    public static FunctionDescriptor gdk_window_set_event_compression$descriptor() {
        return gdk_window_set_event_compression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_event_compression(GdkWindow *window, gboolean event_compression)
     * }
     */
    public static MethodHandle gdk_window_set_event_compression$handle() {
        return gdk_window_set_event_compression.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_event_compression(GdkWindow *window, gboolean event_compression)
     * }
     */
    public static void gdk_window_set_event_compression(MemorySegment window, int event_compression) {
        var mh$ = gdk_window_set_event_compression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_event_compression", window, event_compression);
            }
            mh$.invokeExact(window, event_compression);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_event_compression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_event_compression"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_event_compression(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_event_compression$descriptor() {
        return gdk_window_get_event_compression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_event_compression(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_event_compression$handle() {
        return gdk_window_get_event_compression.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_event_compression(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_event_compression(MemorySegment window) {
        var mh$ = gdk_window_get_event_compression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_event_compression", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_shadow_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_shadow_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_shadow_width(GdkWindow *window, gint left, gint right, gint top, gint bottom)
     * }
     */
    public static FunctionDescriptor gdk_window_set_shadow_width$descriptor() {
        return gdk_window_set_shadow_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_shadow_width(GdkWindow *window, gint left, gint right, gint top, gint bottom)
     * }
     */
    public static MethodHandle gdk_window_set_shadow_width$handle() {
        return gdk_window_set_shadow_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_shadow_width(GdkWindow *window, gint left, gint right, gint top, gint bottom)
     * }
     */
    public static void gdk_window_set_shadow_width(MemorySegment window, int left, int right, int top, int bottom) {
        var mh$ = gdk_window_set_shadow_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_shadow_width", window, left, right, top, bottom);
            }
            mh$.invokeExact(window, left, right, top, bottom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_show_window_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_show_window_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_show_window_menu(GdkWindow *window, GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_window_show_window_menu$descriptor() {
        return gdk_window_show_window_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_show_window_menu(GdkWindow *window, GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_window_show_window_menu$handle() {
        return gdk_window_show_window_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_show_window_menu(GdkWindow *window, GdkEvent *event)
     * }
     */
    public static int gdk_window_show_window_menu(MemorySegment window, MemorySegment event) {
        var mh$ = gdk_window_show_window_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_show_window_menu", window, event);
            }
            return (int)mh$.invokeExact(window, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_create_gl_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_create_gl_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkGLContext *gdk_window_create_gl_context(GdkWindow *window, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_window_create_gl_context$descriptor() {
        return gdk_window_create_gl_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkGLContext *gdk_window_create_gl_context(GdkWindow *window, GError **error)
     * }
     */
    public static MethodHandle gdk_window_create_gl_context$handle() {
        return gdk_window_create_gl_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkGLContext *gdk_window_create_gl_context(GdkWindow *window, GError **error)
     * }
     */
    public static MemorySegment gdk_window_create_gl_context(MemorySegment window, MemorySegment error) {
        var mh$ = gdk_window_create_gl_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_create_gl_context", window, error);
            }
            return (MemorySegment)mh$.invokeExact(window, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_SEAT_CAPABILITY_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SEAT_CAPABILITY_NONE = 0
     * }
     */
    public static int GDK_SEAT_CAPABILITY_NONE() {
        return GDK_SEAT_CAPABILITY_NONE;
    }
    private static final int GDK_SEAT_CAPABILITY_POINTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SEAT_CAPABILITY_POINTER = 1
     * }
     */
    public static int GDK_SEAT_CAPABILITY_POINTER() {
        return GDK_SEAT_CAPABILITY_POINTER;
    }
    private static final int GDK_SEAT_CAPABILITY_TOUCH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SEAT_CAPABILITY_TOUCH = 2
     * }
     */
    public static int GDK_SEAT_CAPABILITY_TOUCH() {
        return GDK_SEAT_CAPABILITY_TOUCH;
    }
    private static final int GDK_SEAT_CAPABILITY_TABLET_STYLUS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SEAT_CAPABILITY_TABLET_STYLUS = 4
     * }
     */
    public static int GDK_SEAT_CAPABILITY_TABLET_STYLUS() {
        return GDK_SEAT_CAPABILITY_TABLET_STYLUS;
    }
    private static final int GDK_SEAT_CAPABILITY_KEYBOARD = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SEAT_CAPABILITY_KEYBOARD = 8
     * }
     */
    public static int GDK_SEAT_CAPABILITY_KEYBOARD() {
        return GDK_SEAT_CAPABILITY_KEYBOARD;
    }
    private static final int GDK_SEAT_CAPABILITY_ALL_POINTING = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SEAT_CAPABILITY_ALL_POINTING = 7
     * }
     */
    public static int GDK_SEAT_CAPABILITY_ALL_POINTING() {
        return GDK_SEAT_CAPABILITY_ALL_POINTING;
    }
    private static final int GDK_SEAT_CAPABILITY_ALL = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SEAT_CAPABILITY_ALL = 15
     * }
     */
    public static int GDK_SEAT_CAPABILITY_ALL() {
        return GDK_SEAT_CAPABILITY_ALL;
    }

    private static class gdk_seat_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_seat_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_seat_get_type()
     * }
     */
    public static FunctionDescriptor gdk_seat_get_type$descriptor() {
        return gdk_seat_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_seat_get_type()
     * }
     */
    public static MethodHandle gdk_seat_get_type$handle() {
        return gdk_seat_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_seat_get_type()
     * }
     */
    public static long gdk_seat_get_type() {
        var mh$ = gdk_seat_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_seat_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_seat_grab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_seat_grab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_seat_grab(GdkSeat *seat, GdkWindow *window, GdkSeatCapabilities capabilities, gboolean owner_events, GdkCursor *cursor, const GdkEvent *event, GdkSeatGrabPrepareFunc prepare_func, gpointer prepare_func_data)
     * }
     */
    public static FunctionDescriptor gdk_seat_grab$descriptor() {
        return gdk_seat_grab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_seat_grab(GdkSeat *seat, GdkWindow *window, GdkSeatCapabilities capabilities, gboolean owner_events, GdkCursor *cursor, const GdkEvent *event, GdkSeatGrabPrepareFunc prepare_func, gpointer prepare_func_data)
     * }
     */
    public static MethodHandle gdk_seat_grab$handle() {
        return gdk_seat_grab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_seat_grab(GdkSeat *seat, GdkWindow *window, GdkSeatCapabilities capabilities, gboolean owner_events, GdkCursor *cursor, const GdkEvent *event, GdkSeatGrabPrepareFunc prepare_func, gpointer prepare_func_data)
     * }
     */
    public static int gdk_seat_grab(MemorySegment seat, MemorySegment window, int capabilities, int owner_events, MemorySegment cursor, MemorySegment event, MemorySegment prepare_func, MemorySegment prepare_func_data) {
        var mh$ = gdk_seat_grab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_seat_grab", seat, window, capabilities, owner_events, cursor, event, prepare_func, prepare_func_data);
            }
            return (int)mh$.invokeExact(seat, window, capabilities, owner_events, cursor, event, prepare_func, prepare_func_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_seat_ungrab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_seat_ungrab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_seat_ungrab(GdkSeat *seat)
     * }
     */
    public static FunctionDescriptor gdk_seat_ungrab$descriptor() {
        return gdk_seat_ungrab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_seat_ungrab(GdkSeat *seat)
     * }
     */
    public static MethodHandle gdk_seat_ungrab$handle() {
        return gdk_seat_ungrab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_seat_ungrab(GdkSeat *seat)
     * }
     */
    public static void gdk_seat_ungrab(MemorySegment seat) {
        var mh$ = gdk_seat_ungrab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_seat_ungrab", seat);
            }
            mh$.invokeExact(seat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_seat_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_seat_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_seat_get_display(GdkSeat *seat)
     * }
     */
    public static FunctionDescriptor gdk_seat_get_display$descriptor() {
        return gdk_seat_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_seat_get_display(GdkSeat *seat)
     * }
     */
    public static MethodHandle gdk_seat_get_display$handle() {
        return gdk_seat_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_seat_get_display(GdkSeat *seat)
     * }
     */
    public static MemorySegment gdk_seat_get_display(MemorySegment seat) {
        var mh$ = gdk_seat_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_seat_get_display", seat);
            }
            return (MemorySegment)mh$.invokeExact(seat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_seat_get_capabilities {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_seat_get_capabilities"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkSeatCapabilities gdk_seat_get_capabilities(GdkSeat *seat)
     * }
     */
    public static FunctionDescriptor gdk_seat_get_capabilities$descriptor() {
        return gdk_seat_get_capabilities.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkSeatCapabilities gdk_seat_get_capabilities(GdkSeat *seat)
     * }
     */
    public static MethodHandle gdk_seat_get_capabilities$handle() {
        return gdk_seat_get_capabilities.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkSeatCapabilities gdk_seat_get_capabilities(GdkSeat *seat)
     * }
     */
    public static int gdk_seat_get_capabilities(MemorySegment seat) {
        var mh$ = gdk_seat_get_capabilities.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_seat_get_capabilities", seat);
            }
            return (int)mh$.invokeExact(seat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_seat_get_slaves {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_seat_get_slaves"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_seat_get_slaves(GdkSeat *seat, GdkSeatCapabilities capabilities)
     * }
     */
    public static FunctionDescriptor gdk_seat_get_slaves$descriptor() {
        return gdk_seat_get_slaves.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_seat_get_slaves(GdkSeat *seat, GdkSeatCapabilities capabilities)
     * }
     */
    public static MethodHandle gdk_seat_get_slaves$handle() {
        return gdk_seat_get_slaves.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_seat_get_slaves(GdkSeat *seat, GdkSeatCapabilities capabilities)
     * }
     */
    public static MemorySegment gdk_seat_get_slaves(MemorySegment seat, int capabilities) {
        var mh$ = gdk_seat_get_slaves.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_seat_get_slaves", seat, capabilities);
            }
            return (MemorySegment)mh$.invokeExact(seat, capabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_seat_get_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_seat_get_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_seat_get_pointer(GdkSeat *seat)
     * }
     */
    public static FunctionDescriptor gdk_seat_get_pointer$descriptor() {
        return gdk_seat_get_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_seat_get_pointer(GdkSeat *seat)
     * }
     */
    public static MethodHandle gdk_seat_get_pointer$handle() {
        return gdk_seat_get_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDevice *gdk_seat_get_pointer(GdkSeat *seat)
     * }
     */
    public static MemorySegment gdk_seat_get_pointer(MemorySegment seat) {
        var mh$ = gdk_seat_get_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_seat_get_pointer", seat);
            }
            return (MemorySegment)mh$.invokeExact(seat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_seat_get_keyboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_seat_get_keyboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_seat_get_keyboard(GdkSeat *seat)
     * }
     */
    public static FunctionDescriptor gdk_seat_get_keyboard$descriptor() {
        return gdk_seat_get_keyboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_seat_get_keyboard(GdkSeat *seat)
     * }
     */
    public static MethodHandle gdk_seat_get_keyboard$handle() {
        return gdk_seat_get_keyboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDevice *gdk_seat_get_keyboard(GdkSeat *seat)
     * }
     */
    public static MemorySegment gdk_seat_get_keyboard(MemorySegment seat) {
        var mh$ = gdk_seat_get_keyboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_seat_get_keyboard", seat);
            }
            return (MemorySegment)mh$.invokeExact(seat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rectangle_intersect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rectangle_intersect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_rectangle_intersect(const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest)
     * }
     */
    public static FunctionDescriptor gdk_rectangle_intersect$descriptor() {
        return gdk_rectangle_intersect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_rectangle_intersect(const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest)
     * }
     */
    public static MethodHandle gdk_rectangle_intersect$handle() {
        return gdk_rectangle_intersect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_rectangle_intersect(const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest)
     * }
     */
    public static int gdk_rectangle_intersect(MemorySegment src1, MemorySegment src2, MemorySegment dest) {
        var mh$ = gdk_rectangle_intersect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rectangle_intersect", src1, src2, dest);
            }
            return (int)mh$.invokeExact(src1, src2, dest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rectangle_union {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rectangle_union"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_rectangle_union(const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest)
     * }
     */
    public static FunctionDescriptor gdk_rectangle_union$descriptor() {
        return gdk_rectangle_union.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_rectangle_union(const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest)
     * }
     */
    public static MethodHandle gdk_rectangle_union$handle() {
        return gdk_rectangle_union.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_rectangle_union(const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest)
     * }
     */
    public static void gdk_rectangle_union(MemorySegment src1, MemorySegment src2, MemorySegment dest) {
        var mh$ = gdk_rectangle_union.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rectangle_union", src1, src2, dest);
            }
            mh$.invokeExact(src1, src2, dest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rectangle_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rectangle_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_rectangle_equal(const GdkRectangle *rect1, const GdkRectangle *rect2)
     * }
     */
    public static FunctionDescriptor gdk_rectangle_equal$descriptor() {
        return gdk_rectangle_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_rectangle_equal(const GdkRectangle *rect1, const GdkRectangle *rect2)
     * }
     */
    public static MethodHandle gdk_rectangle_equal$handle() {
        return gdk_rectangle_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_rectangle_equal(const GdkRectangle *rect1, const GdkRectangle *rect2)
     * }
     */
    public static int gdk_rectangle_equal(MemorySegment rect1, MemorySegment rect2) {
        var mh$ = gdk_rectangle_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rectangle_equal", rect1, rect2);
            }
            return (int)mh$.invokeExact(rect1, rect2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rectangle_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rectangle_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_rectangle_get_type()
     * }
     */
    public static FunctionDescriptor gdk_rectangle_get_type$descriptor() {
        return gdk_rectangle_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_rectangle_get_type()
     * }
     */
    public static MethodHandle gdk_rectangle_get_type$handle() {
        return gdk_rectangle_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_rectangle_get_type()
     * }
     */
    public static long gdk_rectangle_get_type() {
        var mh$ = gdk_rectangle_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rectangle_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_SUBPIXEL_LAYOUT_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SUBPIXEL_LAYOUT_UNKNOWN = 0
     * }
     */
    public static int GDK_SUBPIXEL_LAYOUT_UNKNOWN() {
        return GDK_SUBPIXEL_LAYOUT_UNKNOWN;
    }
    private static final int GDK_SUBPIXEL_LAYOUT_NONE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SUBPIXEL_LAYOUT_NONE = 1
     * }
     */
    public static int GDK_SUBPIXEL_LAYOUT_NONE() {
        return GDK_SUBPIXEL_LAYOUT_NONE;
    }
    private static final int GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB = 2
     * }
     */
    public static int GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB() {
        return GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB;
    }
    private static final int GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR = 3
     * }
     */
    public static int GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR() {
        return GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR;
    }
    private static final int GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB = 4
     * }
     */
    public static int GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB() {
        return GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB;
    }
    private static final int GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR = 5
     * }
     */
    public static int GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR() {
        return GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR;
    }

    private static class gdk_monitor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_monitor_get_type()
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_type$descriptor() {
        return gdk_monitor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_monitor_get_type()
     * }
     */
    public static MethodHandle gdk_monitor_get_type$handle() {
        return gdk_monitor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_monitor_get_type()
     * }
     */
    public static long gdk_monitor_get_type() {
        var mh$ = gdk_monitor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_monitor_get_display(GdkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_display$descriptor() {
        return gdk_monitor_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_monitor_get_display(GdkMonitor *monitor)
     * }
     */
    public static MethodHandle gdk_monitor_get_display$handle() {
        return gdk_monitor_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_monitor_get_display(GdkMonitor *monitor)
     * }
     */
    public static MemorySegment gdk_monitor_get_display(MemorySegment monitor) {
        var mh$ = gdk_monitor_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_display", monitor);
            }
            return (MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_get_geometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_geometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_monitor_get_geometry(GdkMonitor *monitor, GdkRectangle *geometry)
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_geometry$descriptor() {
        return gdk_monitor_get_geometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_monitor_get_geometry(GdkMonitor *monitor, GdkRectangle *geometry)
     * }
     */
    public static MethodHandle gdk_monitor_get_geometry$handle() {
        return gdk_monitor_get_geometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_monitor_get_geometry(GdkMonitor *monitor, GdkRectangle *geometry)
     * }
     */
    public static void gdk_monitor_get_geometry(MemorySegment monitor, MemorySegment geometry) {
        var mh$ = gdk_monitor_get_geometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_geometry", monitor, geometry);
            }
            mh$.invokeExact(monitor, geometry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_get_workarea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_workarea"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_monitor_get_workarea(GdkMonitor *monitor, GdkRectangle *workarea)
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_workarea$descriptor() {
        return gdk_monitor_get_workarea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_monitor_get_workarea(GdkMonitor *monitor, GdkRectangle *workarea)
     * }
     */
    public static MethodHandle gdk_monitor_get_workarea$handle() {
        return gdk_monitor_get_workarea.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_monitor_get_workarea(GdkMonitor *monitor, GdkRectangle *workarea)
     * }
     */
    public static void gdk_monitor_get_workarea(MemorySegment monitor, MemorySegment workarea) {
        var mh$ = gdk_monitor_get_workarea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_workarea", monitor, workarea);
            }
            mh$.invokeExact(monitor, workarea);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_get_width_mm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_width_mm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_monitor_get_width_mm(GdkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_width_mm$descriptor() {
        return gdk_monitor_get_width_mm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_monitor_get_width_mm(GdkMonitor *monitor)
     * }
     */
    public static MethodHandle gdk_monitor_get_width_mm$handle() {
        return gdk_monitor_get_width_mm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_monitor_get_width_mm(GdkMonitor *monitor)
     * }
     */
    public static int gdk_monitor_get_width_mm(MemorySegment monitor) {
        var mh$ = gdk_monitor_get_width_mm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_width_mm", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_get_height_mm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_height_mm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_monitor_get_height_mm(GdkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_height_mm$descriptor() {
        return gdk_monitor_get_height_mm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_monitor_get_height_mm(GdkMonitor *monitor)
     * }
     */
    public static MethodHandle gdk_monitor_get_height_mm$handle() {
        return gdk_monitor_get_height_mm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_monitor_get_height_mm(GdkMonitor *monitor)
     * }
     */
    public static int gdk_monitor_get_height_mm(MemorySegment monitor) {
        var mh$ = gdk_monitor_get_height_mm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_height_mm", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_get_manufacturer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_manufacturer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *gdk_monitor_get_manufacturer(GdkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_manufacturer$descriptor() {
        return gdk_monitor_get_manufacturer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *gdk_monitor_get_manufacturer(GdkMonitor *monitor)
     * }
     */
    public static MethodHandle gdk_monitor_get_manufacturer$handle() {
        return gdk_monitor_get_manufacturer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *gdk_monitor_get_manufacturer(GdkMonitor *monitor)
     * }
     */
    public static MemorySegment gdk_monitor_get_manufacturer(MemorySegment monitor) {
        var mh$ = gdk_monitor_get_manufacturer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_manufacturer", monitor);
            }
            return (MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_get_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *gdk_monitor_get_model(GdkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_model$descriptor() {
        return gdk_monitor_get_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *gdk_monitor_get_model(GdkMonitor *monitor)
     * }
     */
    public static MethodHandle gdk_monitor_get_model$handle() {
        return gdk_monitor_get_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *gdk_monitor_get_model(GdkMonitor *monitor)
     * }
     */
    public static MemorySegment gdk_monitor_get_model(MemorySegment monitor) {
        var mh$ = gdk_monitor_get_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_model", monitor);
            }
            return (MemorySegment)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_get_scale_factor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_scale_factor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_monitor_get_scale_factor(GdkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_scale_factor$descriptor() {
        return gdk_monitor_get_scale_factor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_monitor_get_scale_factor(GdkMonitor *monitor)
     * }
     */
    public static MethodHandle gdk_monitor_get_scale_factor$handle() {
        return gdk_monitor_get_scale_factor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_monitor_get_scale_factor(GdkMonitor *monitor)
     * }
     */
    public static int gdk_monitor_get_scale_factor(MemorySegment monitor) {
        var mh$ = gdk_monitor_get_scale_factor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_scale_factor", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_get_refresh_rate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_refresh_rate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_monitor_get_refresh_rate(GdkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_refresh_rate$descriptor() {
        return gdk_monitor_get_refresh_rate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_monitor_get_refresh_rate(GdkMonitor *monitor)
     * }
     */
    public static MethodHandle gdk_monitor_get_refresh_rate$handle() {
        return gdk_monitor_get_refresh_rate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_monitor_get_refresh_rate(GdkMonitor *monitor)
     * }
     */
    public static int gdk_monitor_get_refresh_rate(MemorySegment monitor) {
        var mh$ = gdk_monitor_get_refresh_rate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_refresh_rate", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_get_subpixel_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_get_subpixel_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkSubpixelLayout gdk_monitor_get_subpixel_layout(GdkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor gdk_monitor_get_subpixel_layout$descriptor() {
        return gdk_monitor_get_subpixel_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkSubpixelLayout gdk_monitor_get_subpixel_layout(GdkMonitor *monitor)
     * }
     */
    public static MethodHandle gdk_monitor_get_subpixel_layout$handle() {
        return gdk_monitor_get_subpixel_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkSubpixelLayout gdk_monitor_get_subpixel_layout(GdkMonitor *monitor)
     * }
     */
    public static int gdk_monitor_get_subpixel_layout(MemorySegment monitor) {
        var mh$ = gdk_monitor_get_subpixel_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_get_subpixel_layout", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_monitor_is_primary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_monitor_is_primary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_monitor_is_primary(GdkMonitor *monitor)
     * }
     */
    public static FunctionDescriptor gdk_monitor_is_primary$descriptor() {
        return gdk_monitor_is_primary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_monitor_is_primary(GdkMonitor *monitor)
     * }
     */
    public static MethodHandle gdk_monitor_is_primary$handle() {
        return gdk_monitor_is_primary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_monitor_is_primary(GdkMonitor *monitor)
     * }
     */
    public static int gdk_monitor_is_primary(MemorySegment monitor) {
        var mh$ = gdk_monitor_is_primary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_monitor_is_primary", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_display_get_type()
     * }
     */
    public static FunctionDescriptor gdk_display_get_type$descriptor() {
        return gdk_display_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_display_get_type()
     * }
     */
    public static MethodHandle gdk_display_get_type$handle() {
        return gdk_display_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_display_get_type()
     * }
     */
    public static long gdk_display_get_type() {
        var mh$ = gdk_display_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_open"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_open(const gchar *display_name)
     * }
     */
    public static FunctionDescriptor gdk_display_open$descriptor() {
        return gdk_display_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_open(const gchar *display_name)
     * }
     */
    public static MethodHandle gdk_display_open$handle() {
        return gdk_display_open.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_open(const gchar *display_name)
     * }
     */
    public static MemorySegment gdk_display_open(MemorySegment display_name) {
        var mh$ = gdk_display_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_open", display_name);
            }
            return (MemorySegment)mh$.invokeExact(display_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gdk_display_get_name(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_name$descriptor() {
        return gdk_display_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gdk_display_get_name(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_name$handle() {
        return gdk_display_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gdk_display_get_name(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_get_name(MemorySegment display) {
        var mh$ = gdk_display_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_name", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_n_screens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_n_screens"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_display_get_n_screens(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_n_screens$descriptor() {
        return gdk_display_get_n_screens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_display_get_n_screens(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_n_screens$handle() {
        return gdk_display_get_n_screens.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_display_get_n_screens(GdkDisplay *display)
     * }
     */
    public static int gdk_display_get_n_screens(MemorySegment display) {
        var mh$ = gdk_display_get_n_screens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_n_screens", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_display_get_screen(GdkDisplay *display, gint screen_num)
     * }
     */
    public static FunctionDescriptor gdk_display_get_screen$descriptor() {
        return gdk_display_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_display_get_screen(GdkDisplay *display, gint screen_num)
     * }
     */
    public static MethodHandle gdk_display_get_screen$handle() {
        return gdk_display_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gdk_display_get_screen(GdkDisplay *display, gint screen_num)
     * }
     */
    public static MemorySegment gdk_display_get_screen(MemorySegment display, int screen_num) {
        var mh$ = gdk_display_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_screen", display, screen_num);
            }
            return (MemorySegment)mh$.invokeExact(display, screen_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_default_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_default_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_display_get_default_screen(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_default_screen$descriptor() {
        return gdk_display_get_default_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_display_get_default_screen(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_default_screen$handle() {
        return gdk_display_get_default_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gdk_display_get_default_screen(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_get_default_screen(MemorySegment display) {
        var mh$ = gdk_display_get_default_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_default_screen", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_pointer_ungrab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_pointer_ungrab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_pointer_ungrab(GdkDisplay *display, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_display_pointer_ungrab$descriptor() {
        return gdk_display_pointer_ungrab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_pointer_ungrab(GdkDisplay *display, guint32 time_)
     * }
     */
    public static MethodHandle gdk_display_pointer_ungrab$handle() {
        return gdk_display_pointer_ungrab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_pointer_ungrab(GdkDisplay *display, guint32 time_)
     * }
     */
    public static void gdk_display_pointer_ungrab(MemorySegment display, int time_) {
        var mh$ = gdk_display_pointer_ungrab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_pointer_ungrab", display, time_);
            }
            mh$.invokeExact(display, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_keyboard_ungrab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_keyboard_ungrab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_keyboard_ungrab(GdkDisplay *display, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_display_keyboard_ungrab$descriptor() {
        return gdk_display_keyboard_ungrab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_keyboard_ungrab(GdkDisplay *display, guint32 time_)
     * }
     */
    public static MethodHandle gdk_display_keyboard_ungrab$handle() {
        return gdk_display_keyboard_ungrab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_keyboard_ungrab(GdkDisplay *display, guint32 time_)
     * }
     */
    public static void gdk_display_keyboard_ungrab(MemorySegment display, int time_) {
        var mh$ = gdk_display_keyboard_ungrab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_keyboard_ungrab", display, time_);
            }
            mh$.invokeExact(display, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_pointer_is_grabbed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_pointer_is_grabbed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_pointer_is_grabbed(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_pointer_is_grabbed$descriptor() {
        return gdk_display_pointer_is_grabbed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_pointer_is_grabbed(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_pointer_is_grabbed$handle() {
        return gdk_display_pointer_is_grabbed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_pointer_is_grabbed(GdkDisplay *display)
     * }
     */
    public static int gdk_display_pointer_is_grabbed(MemorySegment display) {
        var mh$ = gdk_display_pointer_is_grabbed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_pointer_is_grabbed", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_device_is_grabbed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_device_is_grabbed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_device_is_grabbed(GdkDisplay *display, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_display_device_is_grabbed$descriptor() {
        return gdk_display_device_is_grabbed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_device_is_grabbed(GdkDisplay *display, GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_display_device_is_grabbed$handle() {
        return gdk_display_device_is_grabbed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_device_is_grabbed(GdkDisplay *display, GdkDevice *device)
     * }
     */
    public static int gdk_display_device_is_grabbed(MemorySegment display, MemorySegment device) {
        var mh$ = gdk_display_device_is_grabbed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_device_is_grabbed", display, device);
            }
            return (int)mh$.invokeExact(display, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_beep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_beep"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_beep(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_beep$descriptor() {
        return gdk_display_beep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_beep(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_beep$handle() {
        return gdk_display_beep.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_beep(GdkDisplay *display)
     * }
     */
    public static void gdk_display_beep(MemorySegment display) {
        var mh$ = gdk_display_beep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_beep", display);
            }
            mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_sync(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_sync$descriptor() {
        return gdk_display_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_sync(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_sync$handle() {
        return gdk_display_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_sync(GdkDisplay *display)
     * }
     */
    public static void gdk_display_sync(MemorySegment display) {
        var mh$ = gdk_display_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_sync", display);
            }
            mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_flush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_flush(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_flush$descriptor() {
        return gdk_display_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_flush(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_flush$handle() {
        return gdk_display_flush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_flush(GdkDisplay *display)
     * }
     */
    public static void gdk_display_flush(MemorySegment display) {
        var mh$ = gdk_display_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_flush", display);
            }
            mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_close(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_close$descriptor() {
        return gdk_display_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_close(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_close$handle() {
        return gdk_display_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_close(GdkDisplay *display)
     * }
     */
    public static void gdk_display_close(MemorySegment display) {
        var mh$ = gdk_display_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_close", display);
            }
            mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_is_closed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_is_closed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_is_closed(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_is_closed$descriptor() {
        return gdk_display_is_closed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_is_closed(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_is_closed$handle() {
        return gdk_display_is_closed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_is_closed(GdkDisplay *display)
     * }
     */
    public static int gdk_display_is_closed(MemorySegment display) {
        var mh$ = gdk_display_is_closed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_is_closed", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_list_devices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_list_devices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_display_list_devices(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_list_devices$descriptor() {
        return gdk_display_list_devices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_display_list_devices(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_list_devices$handle() {
        return gdk_display_list_devices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_display_list_devices(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_list_devices(MemorySegment display) {
        var mh$ = gdk_display_list_devices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_list_devices", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_display_get_event(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_event$descriptor() {
        return gdk_display_get_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_display_get_event(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_event$handle() {
        return gdk_display_get_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEvent *gdk_display_get_event(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_get_event(MemorySegment display) {
        var mh$ = gdk_display_get_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_event", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_peek_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_peek_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_display_peek_event(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_peek_event$descriptor() {
        return gdk_display_peek_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_display_peek_event(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_peek_event$handle() {
        return gdk_display_peek_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEvent *gdk_display_peek_event(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_peek_event(MemorySegment display) {
        var mh$ = gdk_display_peek_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_peek_event", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_put_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_put_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_put_event(GdkDisplay *display, const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_display_put_event$descriptor() {
        return gdk_display_put_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_put_event(GdkDisplay *display, const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_display_put_event$handle() {
        return gdk_display_put_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_put_event(GdkDisplay *display, const GdkEvent *event)
     * }
     */
    public static void gdk_display_put_event(MemorySegment display, MemorySegment event) {
        var mh$ = gdk_display_put_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_put_event", display, event);
            }
            mh$.invokeExact(display, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_has_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_has_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_has_pending(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_has_pending$descriptor() {
        return gdk_display_has_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_has_pending(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_has_pending$handle() {
        return gdk_display_has_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_has_pending(GdkDisplay *display)
     * }
     */
    public static int gdk_display_has_pending(MemorySegment display) {
        var mh$ = gdk_display_has_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_has_pending", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_set_double_click_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_set_double_click_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_set_double_click_time(GdkDisplay *display, guint msec)
     * }
     */
    public static FunctionDescriptor gdk_display_set_double_click_time$descriptor() {
        return gdk_display_set_double_click_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_set_double_click_time(GdkDisplay *display, guint msec)
     * }
     */
    public static MethodHandle gdk_display_set_double_click_time$handle() {
        return gdk_display_set_double_click_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_set_double_click_time(GdkDisplay *display, guint msec)
     * }
     */
    public static void gdk_display_set_double_click_time(MemorySegment display, int msec) {
        var mh$ = gdk_display_set_double_click_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_set_double_click_time", display, msec);
            }
            mh$.invokeExact(display, msec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_set_double_click_distance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_set_double_click_distance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_set_double_click_distance(GdkDisplay *display, guint distance)
     * }
     */
    public static FunctionDescriptor gdk_display_set_double_click_distance$descriptor() {
        return gdk_display_set_double_click_distance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_set_double_click_distance(GdkDisplay *display, guint distance)
     * }
     */
    public static MethodHandle gdk_display_set_double_click_distance$handle() {
        return gdk_display_set_double_click_distance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_set_double_click_distance(GdkDisplay *display, guint distance)
     * }
     */
    public static void gdk_display_set_double_click_distance(MemorySegment display, int distance) {
        var mh$ = gdk_display_set_double_click_distance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_set_double_click_distance", display, distance);
            }
            mh$.invokeExact(display, distance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_get_default()
     * }
     */
    public static FunctionDescriptor gdk_display_get_default$descriptor() {
        return gdk_display_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_get_default()
     * }
     */
    public static MethodHandle gdk_display_get_default$handle() {
        return gdk_display_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_get_default()
     * }
     */
    public static MemorySegment gdk_display_get_default() {
        var mh$ = gdk_display_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_get_pointer(GdkDisplay *display, GdkScreen **screen, gint *x, gint *y, GdkModifierType *mask)
     * }
     */
    public static FunctionDescriptor gdk_display_get_pointer$descriptor() {
        return gdk_display_get_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_get_pointer(GdkDisplay *display, GdkScreen **screen, gint *x, gint *y, GdkModifierType *mask)
     * }
     */
    public static MethodHandle gdk_display_get_pointer$handle() {
        return gdk_display_get_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_get_pointer(GdkDisplay *display, GdkScreen **screen, gint *x, gint *y, GdkModifierType *mask)
     * }
     */
    public static void gdk_display_get_pointer(MemorySegment display, MemorySegment screen, MemorySegment x, MemorySegment y, MemorySegment mask) {
        var mh$ = gdk_display_get_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_pointer", display, screen, x, y, mask);
            }
            mh$.invokeExact(display, screen, x, y, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_window_at_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_window_at_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_display_get_window_at_pointer(GdkDisplay *display, gint *win_x, gint *win_y)
     * }
     */
    public static FunctionDescriptor gdk_display_get_window_at_pointer$descriptor() {
        return gdk_display_get_window_at_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_display_get_window_at_pointer(GdkDisplay *display, gint *win_x, gint *win_y)
     * }
     */
    public static MethodHandle gdk_display_get_window_at_pointer$handle() {
        return gdk_display_get_window_at_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_display_get_window_at_pointer(GdkDisplay *display, gint *win_x, gint *win_y)
     * }
     */
    public static MemorySegment gdk_display_get_window_at_pointer(MemorySegment display, MemorySegment win_x, MemorySegment win_y) {
        var mh$ = gdk_display_get_window_at_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_window_at_pointer", display, win_x, win_y);
            }
            return (MemorySegment)mh$.invokeExact(display, win_x, win_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_warp_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_warp_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_warp_pointer(GdkDisplay *display, GdkScreen *screen, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gdk_display_warp_pointer$descriptor() {
        return gdk_display_warp_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_warp_pointer(GdkDisplay *display, GdkScreen *screen, gint x, gint y)
     * }
     */
    public static MethodHandle gdk_display_warp_pointer$handle() {
        return gdk_display_warp_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_warp_pointer(GdkDisplay *display, GdkScreen *screen, gint x, gint y)
     * }
     */
    public static void gdk_display_warp_pointer(MemorySegment display, MemorySegment screen, int x, int y) {
        var mh$ = gdk_display_warp_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_warp_pointer", display, screen, x, y);
            }
            mh$.invokeExact(display, screen, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_open_default_libgtk_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_open_default_libgtk_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_open_default_libgtk_only()
     * }
     */
    public static FunctionDescriptor gdk_display_open_default_libgtk_only$descriptor() {
        return gdk_display_open_default_libgtk_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_open_default_libgtk_only()
     * }
     */
    public static MethodHandle gdk_display_open_default_libgtk_only$handle() {
        return gdk_display_open_default_libgtk_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_open_default_libgtk_only()
     * }
     */
    public static MemorySegment gdk_display_open_default_libgtk_only() {
        var mh$ = gdk_display_open_default_libgtk_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_open_default_libgtk_only");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_supports_cursor_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_supports_cursor_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_cursor_alpha(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_supports_cursor_alpha$descriptor() {
        return gdk_display_supports_cursor_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_cursor_alpha(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_supports_cursor_alpha$handle() {
        return gdk_display_supports_cursor_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_cursor_alpha(GdkDisplay *display)
     * }
     */
    public static int gdk_display_supports_cursor_alpha(MemorySegment display) {
        var mh$ = gdk_display_supports_cursor_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_supports_cursor_alpha", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_supports_cursor_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_supports_cursor_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_cursor_color(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_supports_cursor_color$descriptor() {
        return gdk_display_supports_cursor_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_cursor_color(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_supports_cursor_color$handle() {
        return gdk_display_supports_cursor_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_cursor_color(GdkDisplay *display)
     * }
     */
    public static int gdk_display_supports_cursor_color(MemorySegment display) {
        var mh$ = gdk_display_supports_cursor_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_supports_cursor_color", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_default_cursor_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_default_cursor_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_display_get_default_cursor_size(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_default_cursor_size$descriptor() {
        return gdk_display_get_default_cursor_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_display_get_default_cursor_size(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_default_cursor_size$handle() {
        return gdk_display_get_default_cursor_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_display_get_default_cursor_size(GdkDisplay *display)
     * }
     */
    public static int gdk_display_get_default_cursor_size(MemorySegment display) {
        var mh$ = gdk_display_get_default_cursor_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_default_cursor_size", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_maximal_cursor_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_maximal_cursor_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_get_maximal_cursor_size(GdkDisplay *display, guint *width, guint *height)
     * }
     */
    public static FunctionDescriptor gdk_display_get_maximal_cursor_size$descriptor() {
        return gdk_display_get_maximal_cursor_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_get_maximal_cursor_size(GdkDisplay *display, guint *width, guint *height)
     * }
     */
    public static MethodHandle gdk_display_get_maximal_cursor_size$handle() {
        return gdk_display_get_maximal_cursor_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_get_maximal_cursor_size(GdkDisplay *display, guint *width, guint *height)
     * }
     */
    public static void gdk_display_get_maximal_cursor_size(MemorySegment display, MemorySegment width, MemorySegment height) {
        var mh$ = gdk_display_get_maximal_cursor_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_maximal_cursor_size", display, width, height);
            }
            mh$.invokeExact(display, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_default_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_default_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_display_get_default_group(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_default_group$descriptor() {
        return gdk_display_get_default_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_display_get_default_group(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_default_group$handle() {
        return gdk_display_get_default_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_display_get_default_group(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_get_default_group(MemorySegment display) {
        var mh$ = gdk_display_get_default_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_default_group", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_supports_selection_notification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_supports_selection_notification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_selection_notification(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_supports_selection_notification$descriptor() {
        return gdk_display_supports_selection_notification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_selection_notification(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_supports_selection_notification$handle() {
        return gdk_display_supports_selection_notification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_selection_notification(GdkDisplay *display)
     * }
     */
    public static int gdk_display_supports_selection_notification(MemorySegment display) {
        var mh$ = gdk_display_supports_selection_notification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_supports_selection_notification", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_request_selection_notification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_request_selection_notification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_request_selection_notification(GdkDisplay *display, GdkAtom selection)
     * }
     */
    public static FunctionDescriptor gdk_display_request_selection_notification$descriptor() {
        return gdk_display_request_selection_notification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_request_selection_notification(GdkDisplay *display, GdkAtom selection)
     * }
     */
    public static MethodHandle gdk_display_request_selection_notification$handle() {
        return gdk_display_request_selection_notification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_request_selection_notification(GdkDisplay *display, GdkAtom selection)
     * }
     */
    public static int gdk_display_request_selection_notification(MemorySegment display, MemorySegment selection) {
        var mh$ = gdk_display_request_selection_notification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_request_selection_notification", display, selection);
            }
            return (int)mh$.invokeExact(display, selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_supports_clipboard_persistence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_supports_clipboard_persistence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_clipboard_persistence(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_supports_clipboard_persistence$descriptor() {
        return gdk_display_supports_clipboard_persistence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_clipboard_persistence(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_supports_clipboard_persistence$handle() {
        return gdk_display_supports_clipboard_persistence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_clipboard_persistence(GdkDisplay *display)
     * }
     */
    public static int gdk_display_supports_clipboard_persistence(MemorySegment display) {
        var mh$ = gdk_display_supports_clipboard_persistence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_supports_clipboard_persistence", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_store_clipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_store_clipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_store_clipboard(GdkDisplay *display, GdkWindow *clipboard_window, guint32 time_, const GdkAtom *targets, gint n_targets)
     * }
     */
    public static FunctionDescriptor gdk_display_store_clipboard$descriptor() {
        return gdk_display_store_clipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_store_clipboard(GdkDisplay *display, GdkWindow *clipboard_window, guint32 time_, const GdkAtom *targets, gint n_targets)
     * }
     */
    public static MethodHandle gdk_display_store_clipboard$handle() {
        return gdk_display_store_clipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_store_clipboard(GdkDisplay *display, GdkWindow *clipboard_window, guint32 time_, const GdkAtom *targets, gint n_targets)
     * }
     */
    public static void gdk_display_store_clipboard(MemorySegment display, MemorySegment clipboard_window, int time_, MemorySegment targets, int n_targets) {
        var mh$ = gdk_display_store_clipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_store_clipboard", display, clipboard_window, time_, targets, n_targets);
            }
            mh$.invokeExact(display, clipboard_window, time_, targets, n_targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_supports_shapes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_supports_shapes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_shapes(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_supports_shapes$descriptor() {
        return gdk_display_supports_shapes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_shapes(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_supports_shapes$handle() {
        return gdk_display_supports_shapes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_shapes(GdkDisplay *display)
     * }
     */
    public static int gdk_display_supports_shapes(MemorySegment display) {
        var mh$ = gdk_display_supports_shapes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_supports_shapes", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_supports_input_shapes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_supports_input_shapes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_input_shapes(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_supports_input_shapes$descriptor() {
        return gdk_display_supports_input_shapes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_input_shapes(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_supports_input_shapes$handle() {
        return gdk_display_supports_input_shapes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_input_shapes(GdkDisplay *display)
     * }
     */
    public static int gdk_display_supports_input_shapes(MemorySegment display) {
        var mh$ = gdk_display_supports_input_shapes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_supports_input_shapes", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_supports_composite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_supports_composite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_composite(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_supports_composite$descriptor() {
        return gdk_display_supports_composite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_composite(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_supports_composite$handle() {
        return gdk_display_supports_composite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_display_supports_composite(GdkDisplay *display)
     * }
     */
    public static int gdk_display_supports_composite(MemorySegment display) {
        var mh$ = gdk_display_supports_composite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_supports_composite", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_notify_startup_complete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_notify_startup_complete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_notify_startup_complete(GdkDisplay *display, const gchar *startup_id)
     * }
     */
    public static FunctionDescriptor gdk_display_notify_startup_complete$descriptor() {
        return gdk_display_notify_startup_complete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_notify_startup_complete(GdkDisplay *display, const gchar *startup_id)
     * }
     */
    public static MethodHandle gdk_display_notify_startup_complete$handle() {
        return gdk_display_notify_startup_complete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_notify_startup_complete(GdkDisplay *display, const gchar *startup_id)
     * }
     */
    public static void gdk_display_notify_startup_complete(MemorySegment display, MemorySegment startup_id) {
        var mh$ = gdk_display_notify_startup_complete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_notify_startup_complete", display, startup_id);
            }
            mh$.invokeExact(display, startup_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_device_manager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_device_manager"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDeviceManager *gdk_display_get_device_manager(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_device_manager$descriptor() {
        return gdk_display_get_device_manager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDeviceManager *gdk_display_get_device_manager(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_device_manager$handle() {
        return gdk_display_get_device_manager.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDeviceManager *gdk_display_get_device_manager(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_get_device_manager(MemorySegment display) {
        var mh$ = gdk_display_get_device_manager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_device_manager", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_app_launch_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_app_launch_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAppLaunchContext *gdk_display_get_app_launch_context(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_app_launch_context$descriptor() {
        return gdk_display_get_app_launch_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAppLaunchContext *gdk_display_get_app_launch_context(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_app_launch_context$handle() {
        return gdk_display_get_app_launch_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAppLaunchContext *gdk_display_get_app_launch_context(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_get_app_launch_context(MemorySegment display) {
        var mh$ = gdk_display_get_app_launch_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_app_launch_context", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_default_seat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_default_seat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkSeat *gdk_display_get_default_seat(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_default_seat$descriptor() {
        return gdk_display_get_default_seat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkSeat *gdk_display_get_default_seat(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_default_seat$handle() {
        return gdk_display_get_default_seat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkSeat *gdk_display_get_default_seat(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_get_default_seat(MemorySegment display) {
        var mh$ = gdk_display_get_default_seat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_default_seat", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_list_seats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_list_seats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_display_list_seats(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_list_seats$descriptor() {
        return gdk_display_list_seats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_display_list_seats(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_list_seats$handle() {
        return gdk_display_list_seats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_display_list_seats(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_list_seats(MemorySegment display) {
        var mh$ = gdk_display_list_seats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_list_seats", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_n_monitors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_n_monitors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_display_get_n_monitors(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_n_monitors$descriptor() {
        return gdk_display_get_n_monitors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_display_get_n_monitors(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_n_monitors$handle() {
        return gdk_display_get_n_monitors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_display_get_n_monitors(GdkDisplay *display)
     * }
     */
    public static int gdk_display_get_n_monitors(MemorySegment display) {
        var mh$ = gdk_display_get_n_monitors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_n_monitors", display);
            }
            return (int)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_monitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_monitor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_monitor(GdkDisplay *display, int monitor_num)
     * }
     */
    public static FunctionDescriptor gdk_display_get_monitor$descriptor() {
        return gdk_display_get_monitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_monitor(GdkDisplay *display, int monitor_num)
     * }
     */
    public static MethodHandle gdk_display_get_monitor$handle() {
        return gdk_display_get_monitor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_monitor(GdkDisplay *display, int monitor_num)
     * }
     */
    public static MemorySegment gdk_display_get_monitor(MemorySegment display, int monitor_num) {
        var mh$ = gdk_display_get_monitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_monitor", display, monitor_num);
            }
            return (MemorySegment)mh$.invokeExact(display, monitor_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_primary_monitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_primary_monitor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_primary_monitor(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_get_primary_monitor$descriptor() {
        return gdk_display_get_primary_monitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_primary_monitor(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_get_primary_monitor$handle() {
        return gdk_display_get_primary_monitor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_primary_monitor(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_display_get_primary_monitor(MemorySegment display) {
        var mh$ = gdk_display_get_primary_monitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_primary_monitor", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_monitor_at_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_monitor_at_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_monitor_at_point(GdkDisplay *display, int x, int y)
     * }
     */
    public static FunctionDescriptor gdk_display_get_monitor_at_point$descriptor() {
        return gdk_display_get_monitor_at_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_monitor_at_point(GdkDisplay *display, int x, int y)
     * }
     */
    public static MethodHandle gdk_display_get_monitor_at_point$handle() {
        return gdk_display_get_monitor_at_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_monitor_at_point(GdkDisplay *display, int x, int y)
     * }
     */
    public static MemorySegment gdk_display_get_monitor_at_point(MemorySegment display, int x, int y) {
        var mh$ = gdk_display_get_monitor_at_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_monitor_at_point", display, x, y);
            }
            return (MemorySegment)mh$.invokeExact(display, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_get_monitor_at_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_get_monitor_at_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_monitor_at_window(GdkDisplay *display, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_display_get_monitor_at_window$descriptor() {
        return gdk_display_get_monitor_at_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_monitor_at_window(GdkDisplay *display, GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_display_get_monitor_at_window$handle() {
        return gdk_display_get_monitor_at_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkMonitor *gdk_display_get_monitor_at_window(GdkDisplay *display, GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_display_get_monitor_at_window(MemorySegment display, MemorySegment window) {
        var mh$ = gdk_display_get_monitor_at_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_get_monitor_at_window", display, window);
            }
            return (MemorySegment)mh$.invokeExact(display, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_screen_get_type()
     * }
     */
    public static FunctionDescriptor gdk_screen_get_type$descriptor() {
        return gdk_screen_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_screen_get_type()
     * }
     */
    public static MethodHandle gdk_screen_get_type$handle() {
        return gdk_screen_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_screen_get_type()
     * }
     */
    public static long gdk_screen_get_type() {
        var mh$ = gdk_screen_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_system_visual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_system_visual"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_screen_get_system_visual(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_system_visual$descriptor() {
        return gdk_screen_get_system_visual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_screen_get_system_visual(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_system_visual$handle() {
        return gdk_screen_get_system_visual.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisual *gdk_screen_get_system_visual(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_screen_get_system_visual(MemorySegment screen) {
        var mh$ = gdk_screen_get_system_visual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_system_visual", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_rgba_visual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_rgba_visual"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_screen_get_rgba_visual(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_rgba_visual$descriptor() {
        return gdk_screen_get_rgba_visual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_screen_get_rgba_visual(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_rgba_visual$handle() {
        return gdk_screen_get_rgba_visual.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisual *gdk_screen_get_rgba_visual(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_screen_get_rgba_visual(MemorySegment screen) {
        var mh$ = gdk_screen_get_rgba_visual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_rgba_visual", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_is_composited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_is_composited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_screen_is_composited(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_is_composited$descriptor() {
        return gdk_screen_is_composited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_screen_is_composited(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_is_composited$handle() {
        return gdk_screen_is_composited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_screen_is_composited(GdkScreen *screen)
     * }
     */
    public static int gdk_screen_is_composited(MemorySegment screen) {
        var mh$ = gdk_screen_is_composited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_is_composited", screen);
            }
            return (int)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_root_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_root_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_screen_get_root_window(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_root_window$descriptor() {
        return gdk_screen_get_root_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_screen_get_root_window(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_root_window$handle() {
        return gdk_screen_get_root_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_screen_get_root_window(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_screen_get_root_window(MemorySegment screen) {
        var mh$ = gdk_screen_get_root_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_root_window", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_screen_get_display(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_display$descriptor() {
        return gdk_screen_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_screen_get_display(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_display$handle() {
        return gdk_screen_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_screen_get_display(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_screen_get_display(MemorySegment screen) {
        var mh$ = gdk_screen_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_display", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_number {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_number"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_number(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_number$descriptor() {
        return gdk_screen_get_number.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_number(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_number$handle() {
        return gdk_screen_get_number.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_number(GdkScreen *screen)
     * }
     */
    public static int gdk_screen_get_number(MemorySegment screen) {
        var mh$ = gdk_screen_get_number.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_number", screen);
            }
            return (int)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_width(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_width$descriptor() {
        return gdk_screen_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_width(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_width$handle() {
        return gdk_screen_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_width(GdkScreen *screen)
     * }
     */
    public static int gdk_screen_get_width(MemorySegment screen) {
        var mh$ = gdk_screen_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_width", screen);
            }
            return (int)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_height(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_height$descriptor() {
        return gdk_screen_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_height(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_height$handle() {
        return gdk_screen_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_height(GdkScreen *screen)
     * }
     */
    public static int gdk_screen_get_height(MemorySegment screen) {
        var mh$ = gdk_screen_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_height", screen);
            }
            return (int)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_width_mm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_width_mm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_width_mm(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_width_mm$descriptor() {
        return gdk_screen_get_width_mm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_width_mm(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_width_mm$handle() {
        return gdk_screen_get_width_mm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_width_mm(GdkScreen *screen)
     * }
     */
    public static int gdk_screen_get_width_mm(MemorySegment screen) {
        var mh$ = gdk_screen_get_width_mm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_width_mm", screen);
            }
            return (int)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_height_mm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_height_mm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_height_mm(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_height_mm$descriptor() {
        return gdk_screen_get_height_mm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_height_mm(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_height_mm$handle() {
        return gdk_screen_get_height_mm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_height_mm(GdkScreen *screen)
     * }
     */
    public static int gdk_screen_get_height_mm(MemorySegment screen) {
        var mh$ = gdk_screen_get_height_mm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_height_mm", screen);
            }
            return (int)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_list_visuals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_list_visuals"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_screen_list_visuals(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_list_visuals$descriptor() {
        return gdk_screen_list_visuals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_screen_list_visuals(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_list_visuals$handle() {
        return gdk_screen_list_visuals.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_screen_list_visuals(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_screen_list_visuals(MemorySegment screen) {
        var mh$ = gdk_screen_list_visuals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_list_visuals", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_toplevel_windows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_toplevel_windows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_screen_get_toplevel_windows(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_toplevel_windows$descriptor() {
        return gdk_screen_get_toplevel_windows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_screen_get_toplevel_windows(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_toplevel_windows$handle() {
        return gdk_screen_get_toplevel_windows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_screen_get_toplevel_windows(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_screen_get_toplevel_windows(MemorySegment screen) {
        var mh$ = gdk_screen_get_toplevel_windows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_toplevel_windows", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_make_display_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_make_display_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_screen_make_display_name(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_make_display_name$descriptor() {
        return gdk_screen_make_display_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_screen_make_display_name(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_make_display_name$handle() {
        return gdk_screen_make_display_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_screen_make_display_name(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_screen_make_display_name(MemorySegment screen) {
        var mh$ = gdk_screen_make_display_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_make_display_name", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_n_monitors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_n_monitors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_n_monitors(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_n_monitors$descriptor() {
        return gdk_screen_get_n_monitors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_n_monitors(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_n_monitors$handle() {
        return gdk_screen_get_n_monitors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_n_monitors(GdkScreen *screen)
     * }
     */
    public static int gdk_screen_get_n_monitors(MemorySegment screen) {
        var mh$ = gdk_screen_get_n_monitors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_n_monitors", screen);
            }
            return (int)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_primary_monitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_primary_monitor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_primary_monitor(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_primary_monitor$descriptor() {
        return gdk_screen_get_primary_monitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_primary_monitor(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_primary_monitor$handle() {
        return gdk_screen_get_primary_monitor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_primary_monitor(GdkScreen *screen)
     * }
     */
    public static int gdk_screen_get_primary_monitor(MemorySegment screen) {
        var mh$ = gdk_screen_get_primary_monitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_primary_monitor", screen);
            }
            return (int)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_monitor_geometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_monitor_geometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_screen_get_monitor_geometry(GdkScreen *screen, gint monitor_num, GdkRectangle *dest)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_monitor_geometry$descriptor() {
        return gdk_screen_get_monitor_geometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_screen_get_monitor_geometry(GdkScreen *screen, gint monitor_num, GdkRectangle *dest)
     * }
     */
    public static MethodHandle gdk_screen_get_monitor_geometry$handle() {
        return gdk_screen_get_monitor_geometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_screen_get_monitor_geometry(GdkScreen *screen, gint monitor_num, GdkRectangle *dest)
     * }
     */
    public static void gdk_screen_get_monitor_geometry(MemorySegment screen, int monitor_num, MemorySegment dest) {
        var mh$ = gdk_screen_get_monitor_geometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_monitor_geometry", screen, monitor_num, dest);
            }
            mh$.invokeExact(screen, monitor_num, dest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_monitor_workarea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_monitor_workarea"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_screen_get_monitor_workarea(GdkScreen *screen, gint monitor_num, GdkRectangle *dest)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_monitor_workarea$descriptor() {
        return gdk_screen_get_monitor_workarea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_screen_get_monitor_workarea(GdkScreen *screen, gint monitor_num, GdkRectangle *dest)
     * }
     */
    public static MethodHandle gdk_screen_get_monitor_workarea$handle() {
        return gdk_screen_get_monitor_workarea.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_screen_get_monitor_workarea(GdkScreen *screen, gint monitor_num, GdkRectangle *dest)
     * }
     */
    public static void gdk_screen_get_monitor_workarea(MemorySegment screen, int monitor_num, MemorySegment dest) {
        var mh$ = gdk_screen_get_monitor_workarea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_monitor_workarea", screen, monitor_num, dest);
            }
            mh$.invokeExact(screen, monitor_num, dest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_monitor_at_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_monitor_at_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_at_point(GdkScreen *screen, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_monitor_at_point$descriptor() {
        return gdk_screen_get_monitor_at_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_at_point(GdkScreen *screen, gint x, gint y)
     * }
     */
    public static MethodHandle gdk_screen_get_monitor_at_point$handle() {
        return gdk_screen_get_monitor_at_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_at_point(GdkScreen *screen, gint x, gint y)
     * }
     */
    public static int gdk_screen_get_monitor_at_point(MemorySegment screen, int x, int y) {
        var mh$ = gdk_screen_get_monitor_at_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_monitor_at_point", screen, x, y);
            }
            return (int)mh$.invokeExact(screen, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_monitor_at_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_monitor_at_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_at_window(GdkScreen *screen, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_monitor_at_window$descriptor() {
        return gdk_screen_get_monitor_at_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_at_window(GdkScreen *screen, GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_screen_get_monitor_at_window$handle() {
        return gdk_screen_get_monitor_at_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_at_window(GdkScreen *screen, GdkWindow *window)
     * }
     */
    public static int gdk_screen_get_monitor_at_window(MemorySegment screen, MemorySegment window) {
        var mh$ = gdk_screen_get_monitor_at_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_monitor_at_window", screen, window);
            }
            return (int)mh$.invokeExact(screen, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_monitor_width_mm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_monitor_width_mm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_width_mm(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_monitor_width_mm$descriptor() {
        return gdk_screen_get_monitor_width_mm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_width_mm(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static MethodHandle gdk_screen_get_monitor_width_mm$handle() {
        return gdk_screen_get_monitor_width_mm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_width_mm(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static int gdk_screen_get_monitor_width_mm(MemorySegment screen, int monitor_num) {
        var mh$ = gdk_screen_get_monitor_width_mm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_monitor_width_mm", screen, monitor_num);
            }
            return (int)mh$.invokeExact(screen, monitor_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_monitor_height_mm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_monitor_height_mm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_height_mm(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_monitor_height_mm$descriptor() {
        return gdk_screen_get_monitor_height_mm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_height_mm(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static MethodHandle gdk_screen_get_monitor_height_mm$handle() {
        return gdk_screen_get_monitor_height_mm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_height_mm(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static int gdk_screen_get_monitor_height_mm(MemorySegment screen, int monitor_num) {
        var mh$ = gdk_screen_get_monitor_height_mm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_monitor_height_mm", screen, monitor_num);
            }
            return (int)mh$.invokeExact(screen, monitor_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_monitor_plug_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_monitor_plug_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_screen_get_monitor_plug_name(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_monitor_plug_name$descriptor() {
        return gdk_screen_get_monitor_plug_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_screen_get_monitor_plug_name(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static MethodHandle gdk_screen_get_monitor_plug_name$handle() {
        return gdk_screen_get_monitor_plug_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_screen_get_monitor_plug_name(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static MemorySegment gdk_screen_get_monitor_plug_name(MemorySegment screen, int monitor_num) {
        var mh$ = gdk_screen_get_monitor_plug_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_monitor_plug_name", screen, monitor_num);
            }
            return (MemorySegment)mh$.invokeExact(screen, monitor_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_monitor_scale_factor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_monitor_scale_factor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_scale_factor(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_monitor_scale_factor$descriptor() {
        return gdk_screen_get_monitor_scale_factor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_scale_factor(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static MethodHandle gdk_screen_get_monitor_scale_factor$handle() {
        return gdk_screen_get_monitor_scale_factor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_get_monitor_scale_factor(GdkScreen *screen, gint monitor_num)
     * }
     */
    public static int gdk_screen_get_monitor_scale_factor(MemorySegment screen, int monitor_num) {
        var mh$ = gdk_screen_get_monitor_scale_factor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_monitor_scale_factor", screen, monitor_num);
            }
            return (int)mh$.invokeExact(screen, monitor_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_screen_get_default()
     * }
     */
    public static FunctionDescriptor gdk_screen_get_default$descriptor() {
        return gdk_screen_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_screen_get_default()
     * }
     */
    public static MethodHandle gdk_screen_get_default$handle() {
        return gdk_screen_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gdk_screen_get_default()
     * }
     */
    public static MemorySegment gdk_screen_get_default() {
        var mh$ = gdk_screen_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_setting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_setting"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_screen_get_setting(GdkScreen *screen, const gchar *name, GValue *value)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_setting$descriptor() {
        return gdk_screen_get_setting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_screen_get_setting(GdkScreen *screen, const gchar *name, GValue *value)
     * }
     */
    public static MethodHandle gdk_screen_get_setting$handle() {
        return gdk_screen_get_setting.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_screen_get_setting(GdkScreen *screen, const gchar *name, GValue *value)
     * }
     */
    public static int gdk_screen_get_setting(MemorySegment screen, MemorySegment name, MemorySegment value) {
        var mh$ = gdk_screen_get_setting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_setting", screen, name, value);
            }
            return (int)mh$.invokeExact(screen, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_set_font_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_set_font_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_screen_set_font_options(GdkScreen *screen, const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor gdk_screen_set_font_options$descriptor() {
        return gdk_screen_set_font_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_screen_set_font_options(GdkScreen *screen, const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle gdk_screen_set_font_options$handle() {
        return gdk_screen_set_font_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_screen_set_font_options(GdkScreen *screen, const cairo_font_options_t *options)
     * }
     */
    public static void gdk_screen_set_font_options(MemorySegment screen, MemorySegment options) {
        var mh$ = gdk_screen_set_font_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_set_font_options", screen, options);
            }
            mh$.invokeExact(screen, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_font_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_font_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const cairo_font_options_t *gdk_screen_get_font_options(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_font_options$descriptor() {
        return gdk_screen_get_font_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const cairo_font_options_t *gdk_screen_get_font_options(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_font_options$handle() {
        return gdk_screen_get_font_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const cairo_font_options_t *gdk_screen_get_font_options(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_screen_get_font_options(MemorySegment screen) {
        var mh$ = gdk_screen_get_font_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_font_options", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_set_resolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_set_resolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_screen_set_resolution(GdkScreen *screen, gdouble dpi)
     * }
     */
    public static FunctionDescriptor gdk_screen_set_resolution$descriptor() {
        return gdk_screen_set_resolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_screen_set_resolution(GdkScreen *screen, gdouble dpi)
     * }
     */
    public static MethodHandle gdk_screen_set_resolution$handle() {
        return gdk_screen_set_resolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_screen_set_resolution(GdkScreen *screen, gdouble dpi)
     * }
     */
    public static void gdk_screen_set_resolution(MemorySegment screen, double dpi) {
        var mh$ = gdk_screen_set_resolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_set_resolution", screen, dpi);
            }
            mh$.invokeExact(screen, dpi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_resolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_resolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gdk_screen_get_resolution(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_resolution$descriptor() {
        return gdk_screen_get_resolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gdk_screen_get_resolution(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_resolution$handle() {
        return gdk_screen_get_resolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gdk_screen_get_resolution(GdkScreen *screen)
     * }
     */
    public static double gdk_screen_get_resolution(MemorySegment screen) {
        var mh$ = gdk_screen_get_resolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_resolution", screen);
            }
            return (double)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_active_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_active_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_screen_get_active_window(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_active_window$descriptor() {
        return gdk_screen_get_active_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_screen_get_active_window(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_active_window$handle() {
        return gdk_screen_get_active_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_screen_get_active_window(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_screen_get_active_window(MemorySegment screen) {
        var mh$ = gdk_screen_get_active_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_active_window", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_get_window_stack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_get_window_stack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_screen_get_window_stack(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_screen_get_window_stack$descriptor() {
        return gdk_screen_get_window_stack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_screen_get_window_stack(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_screen_get_window_stack$handle() {
        return gdk_screen_get_window_stack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_screen_get_window_stack(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_screen_get_window_stack(MemorySegment screen) {
        var mh$ = gdk_screen_get_window_stack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_get_window_stack", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_app_launch_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_app_launch_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_app_launch_context_get_type()
     * }
     */
    public static FunctionDescriptor gdk_app_launch_context_get_type$descriptor() {
        return gdk_app_launch_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_app_launch_context_get_type()
     * }
     */
    public static MethodHandle gdk_app_launch_context_get_type$handle() {
        return gdk_app_launch_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_app_launch_context_get_type()
     * }
     */
    public static long gdk_app_launch_context_get_type() {
        var mh$ = gdk_app_launch_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_app_launch_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_app_launch_context_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_app_launch_context_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAppLaunchContext *gdk_app_launch_context_new()
     * }
     */
    public static FunctionDescriptor gdk_app_launch_context_new$descriptor() {
        return gdk_app_launch_context_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAppLaunchContext *gdk_app_launch_context_new()
     * }
     */
    public static MethodHandle gdk_app_launch_context_new$handle() {
        return gdk_app_launch_context_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAppLaunchContext *gdk_app_launch_context_new()
     * }
     */
    public static MemorySegment gdk_app_launch_context_new() {
        var mh$ = gdk_app_launch_context_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_app_launch_context_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_app_launch_context_set_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_app_launch_context_set_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_display(GdkAppLaunchContext *context, GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_app_launch_context_set_display$descriptor() {
        return gdk_app_launch_context_set_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_display(GdkAppLaunchContext *context, GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_app_launch_context_set_display$handle() {
        return gdk_app_launch_context_set_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_display(GdkAppLaunchContext *context, GdkDisplay *display)
     * }
     */
    public static void gdk_app_launch_context_set_display(MemorySegment context, MemorySegment display) {
        var mh$ = gdk_app_launch_context_set_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_app_launch_context_set_display", context, display);
            }
            mh$.invokeExact(context, display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_app_launch_context_set_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_app_launch_context_set_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_screen(GdkAppLaunchContext *context, GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_app_launch_context_set_screen$descriptor() {
        return gdk_app_launch_context_set_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_screen(GdkAppLaunchContext *context, GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_app_launch_context_set_screen$handle() {
        return gdk_app_launch_context_set_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_screen(GdkAppLaunchContext *context, GdkScreen *screen)
     * }
     */
    public static void gdk_app_launch_context_set_screen(MemorySegment context, MemorySegment screen) {
        var mh$ = gdk_app_launch_context_set_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_app_launch_context_set_screen", context, screen);
            }
            mh$.invokeExact(context, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_app_launch_context_set_desktop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_app_launch_context_set_desktop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_desktop(GdkAppLaunchContext *context, gint desktop)
     * }
     */
    public static FunctionDescriptor gdk_app_launch_context_set_desktop$descriptor() {
        return gdk_app_launch_context_set_desktop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_desktop(GdkAppLaunchContext *context, gint desktop)
     * }
     */
    public static MethodHandle gdk_app_launch_context_set_desktop$handle() {
        return gdk_app_launch_context_set_desktop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_desktop(GdkAppLaunchContext *context, gint desktop)
     * }
     */
    public static void gdk_app_launch_context_set_desktop(MemorySegment context, int desktop) {
        var mh$ = gdk_app_launch_context_set_desktop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_app_launch_context_set_desktop", context, desktop);
            }
            mh$.invokeExact(context, desktop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_app_launch_context_set_timestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_app_launch_context_set_timestamp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_timestamp(GdkAppLaunchContext *context, guint32 timestamp)
     * }
     */
    public static FunctionDescriptor gdk_app_launch_context_set_timestamp$descriptor() {
        return gdk_app_launch_context_set_timestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_timestamp(GdkAppLaunchContext *context, guint32 timestamp)
     * }
     */
    public static MethodHandle gdk_app_launch_context_set_timestamp$handle() {
        return gdk_app_launch_context_set_timestamp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_timestamp(GdkAppLaunchContext *context, guint32 timestamp)
     * }
     */
    public static void gdk_app_launch_context_set_timestamp(MemorySegment context, int timestamp) {
        var mh$ = gdk_app_launch_context_set_timestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_app_launch_context_set_timestamp", context, timestamp);
            }
            mh$.invokeExact(context, timestamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_app_launch_context_set_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_app_launch_context_set_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_icon(GdkAppLaunchContext *context, GIcon *icon)
     * }
     */
    public static FunctionDescriptor gdk_app_launch_context_set_icon$descriptor() {
        return gdk_app_launch_context_set_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_icon(GdkAppLaunchContext *context, GIcon *icon)
     * }
     */
    public static MethodHandle gdk_app_launch_context_set_icon$handle() {
        return gdk_app_launch_context_set_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_icon(GdkAppLaunchContext *context, GIcon *icon)
     * }
     */
    public static void gdk_app_launch_context_set_icon(MemorySegment context, MemorySegment icon) {
        var mh$ = gdk_app_launch_context_set_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_app_launch_context_set_icon", context, icon);
            }
            mh$.invokeExact(context, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_app_launch_context_set_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_app_launch_context_set_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_icon_name(GdkAppLaunchContext *context, const char *icon_name)
     * }
     */
    public static FunctionDescriptor gdk_app_launch_context_set_icon_name$descriptor() {
        return gdk_app_launch_context_set_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_icon_name(GdkAppLaunchContext *context, const char *icon_name)
     * }
     */
    public static MethodHandle gdk_app_launch_context_set_icon_name$handle() {
        return gdk_app_launch_context_set_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_app_launch_context_set_icon_name(GdkAppLaunchContext *context, const char *icon_name)
     * }
     */
    public static void gdk_app_launch_context_set_icon_name(MemorySegment context, MemorySegment icon_name) {
        var mh$ = gdk_app_launch_context_set_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_app_launch_context_set_icon_name", context, icon_name);
            }
            mh$.invokeExact(context, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_color_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_color_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_color_get_type()
     * }
     */
    public static FunctionDescriptor gdk_color_get_type$descriptor() {
        return gdk_color_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_color_get_type()
     * }
     */
    public static MethodHandle gdk_color_get_type$handle() {
        return gdk_color_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_color_get_type()
     * }
     */
    public static long gdk_color_get_type() {
        var mh$ = gdk_color_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_color_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_color_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_color_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkColor *gdk_color_copy(const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gdk_color_copy$descriptor() {
        return gdk_color_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkColor *gdk_color_copy(const GdkColor *color)
     * }
     */
    public static MethodHandle gdk_color_copy$handle() {
        return gdk_color_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkColor *gdk_color_copy(const GdkColor *color)
     * }
     */
    public static MemorySegment gdk_color_copy(MemorySegment color) {
        var mh$ = gdk_color_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_color_copy", color);
            }
            return (MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_color_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_color_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_color_free(GdkColor *color)
     * }
     */
    public static FunctionDescriptor gdk_color_free$descriptor() {
        return gdk_color_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_color_free(GdkColor *color)
     * }
     */
    public static MethodHandle gdk_color_free$handle() {
        return gdk_color_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_color_free(GdkColor *color)
     * }
     */
    public static void gdk_color_free(MemorySegment color) {
        var mh$ = gdk_color_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_color_free", color);
            }
            mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_color_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_color_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_color_hash(const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gdk_color_hash$descriptor() {
        return gdk_color_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_color_hash(const GdkColor *color)
     * }
     */
    public static MethodHandle gdk_color_hash$handle() {
        return gdk_color_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_color_hash(const GdkColor *color)
     * }
     */
    public static int gdk_color_hash(MemorySegment color) {
        var mh$ = gdk_color_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_color_hash", color);
            }
            return (int)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_color_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_color_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_color_equal(const GdkColor *colora, const GdkColor *colorb)
     * }
     */
    public static FunctionDescriptor gdk_color_equal$descriptor() {
        return gdk_color_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_color_equal(const GdkColor *colora, const GdkColor *colorb)
     * }
     */
    public static MethodHandle gdk_color_equal$handle() {
        return gdk_color_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_color_equal(const GdkColor *colora, const GdkColor *colorb)
     * }
     */
    public static int gdk_color_equal(MemorySegment colora, MemorySegment colorb) {
        var mh$ = gdk_color_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_color_equal", colora, colorb);
            }
            return (int)mh$.invokeExact(colora, colorb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_color_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_color_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_color_parse(const gchar *spec, GdkColor *color)
     * }
     */
    public static FunctionDescriptor gdk_color_parse$descriptor() {
        return gdk_color_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_color_parse(const gchar *spec, GdkColor *color)
     * }
     */
    public static MethodHandle gdk_color_parse$handle() {
        return gdk_color_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_color_parse(const gchar *spec, GdkColor *color)
     * }
     */
    public static int gdk_color_parse(MemorySegment spec, MemorySegment color) {
        var mh$ = gdk_color_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_color_parse", spec, color);
            }
            return (int)mh$.invokeExact(spec, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_color_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_color_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_color_to_string(const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gdk_color_to_string$descriptor() {
        return gdk_color_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_color_to_string(const GdkColor *color)
     * }
     */
    public static MethodHandle gdk_color_to_string$handle() {
        return gdk_color_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_color_to_string(const GdkColor *color)
     * }
     */
    public static MemorySegment gdk_color_to_string(MemorySegment color) {
        var mh$ = gdk_color_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_color_to_string", color);
            }
            return (MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rgba_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rgba_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_rgba_get_type()
     * }
     */
    public static FunctionDescriptor gdk_rgba_get_type$descriptor() {
        return gdk_rgba_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_rgba_get_type()
     * }
     */
    public static MethodHandle gdk_rgba_get_type$handle() {
        return gdk_rgba_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_rgba_get_type()
     * }
     */
    public static long gdk_rgba_get_type() {
        var mh$ = gdk_rgba_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rgba_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rgba_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rgba_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkRGBA *gdk_rgba_copy(const GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gdk_rgba_copy$descriptor() {
        return gdk_rgba_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkRGBA *gdk_rgba_copy(const GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gdk_rgba_copy$handle() {
        return gdk_rgba_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkRGBA *gdk_rgba_copy(const GdkRGBA *rgba)
     * }
     */
    public static MemorySegment gdk_rgba_copy(MemorySegment rgba) {
        var mh$ = gdk_rgba_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rgba_copy", rgba);
            }
            return (MemorySegment)mh$.invokeExact(rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rgba_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rgba_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_rgba_free(GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gdk_rgba_free$descriptor() {
        return gdk_rgba_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_rgba_free(GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gdk_rgba_free$handle() {
        return gdk_rgba_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_rgba_free(GdkRGBA *rgba)
     * }
     */
    public static void gdk_rgba_free(MemorySegment rgba) {
        var mh$ = gdk_rgba_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rgba_free", rgba);
            }
            mh$.invokeExact(rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rgba_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rgba_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_rgba_hash(gconstpointer p)
     * }
     */
    public static FunctionDescriptor gdk_rgba_hash$descriptor() {
        return gdk_rgba_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_rgba_hash(gconstpointer p)
     * }
     */
    public static MethodHandle gdk_rgba_hash$handle() {
        return gdk_rgba_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_rgba_hash(gconstpointer p)
     * }
     */
    public static int gdk_rgba_hash(MemorySegment p) {
        var mh$ = gdk_rgba_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rgba_hash", p);
            }
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rgba_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rgba_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_rgba_equal(gconstpointer p1, gconstpointer p2)
     * }
     */
    public static FunctionDescriptor gdk_rgba_equal$descriptor() {
        return gdk_rgba_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_rgba_equal(gconstpointer p1, gconstpointer p2)
     * }
     */
    public static MethodHandle gdk_rgba_equal$handle() {
        return gdk_rgba_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_rgba_equal(gconstpointer p1, gconstpointer p2)
     * }
     */
    public static int gdk_rgba_equal(MemorySegment p1, MemorySegment p2) {
        var mh$ = gdk_rgba_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rgba_equal", p1, p2);
            }
            return (int)mh$.invokeExact(p1, p2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rgba_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rgba_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_rgba_parse(GdkRGBA *rgba, const gchar *spec)
     * }
     */
    public static FunctionDescriptor gdk_rgba_parse$descriptor() {
        return gdk_rgba_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_rgba_parse(GdkRGBA *rgba, const gchar *spec)
     * }
     */
    public static MethodHandle gdk_rgba_parse$handle() {
        return gdk_rgba_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_rgba_parse(GdkRGBA *rgba, const gchar *spec)
     * }
     */
    public static int gdk_rgba_parse(MemorySegment rgba, MemorySegment spec) {
        var mh$ = gdk_rgba_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rgba_parse", rgba, spec);
            }
            return (int)mh$.invokeExact(rgba, spec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_rgba_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_rgba_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_rgba_to_string(const GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gdk_rgba_to_string$descriptor() {
        return gdk_rgba_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_rgba_to_string(const GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gdk_rgba_to_string$handle() {
        return gdk_rgba_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_rgba_to_string(const GdkRGBA *rgba)
     * }
     */
    public static MemorySegment gdk_rgba_to_string(MemorySegment rgba) {
        var mh$ = gdk_rgba_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_rgba_to_string", rgba);
            }
            return (MemorySegment)mh$.invokeExact(rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_major_version$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("gdk_pixbuf_major_version").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_major_version
     * }
     */
    public static OfInt gdk_pixbuf_major_version$layout() {
        return gdk_pixbuf_major_version$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_major_version
     * }
     */
    public static MemorySegment gdk_pixbuf_major_version$segment() {
        return gdk_pixbuf_major_version$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_major_version
     * }
     */
    public static int gdk_pixbuf_major_version() {
        return gdk_pixbuf_major_version$constants.SEGMENT.get(gdk_pixbuf_major_version$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_major_version
     * }
     */
    public static void gdk_pixbuf_major_version(int varValue) {
        gdk_pixbuf_major_version$constants.SEGMENT.set(gdk_pixbuf_major_version$constants.LAYOUT, 0L, varValue);
    }

    private static class gdk_pixbuf_minor_version$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("gdk_pixbuf_minor_version").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_minor_version
     * }
     */
    public static OfInt gdk_pixbuf_minor_version$layout() {
        return gdk_pixbuf_minor_version$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_minor_version
     * }
     */
    public static MemorySegment gdk_pixbuf_minor_version$segment() {
        return gdk_pixbuf_minor_version$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_minor_version
     * }
     */
    public static int gdk_pixbuf_minor_version() {
        return gdk_pixbuf_minor_version$constants.SEGMENT.get(gdk_pixbuf_minor_version$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_minor_version
     * }
     */
    public static void gdk_pixbuf_minor_version(int varValue) {
        gdk_pixbuf_minor_version$constants.SEGMENT.set(gdk_pixbuf_minor_version$constants.LAYOUT, 0L, varValue);
    }

    private static class gdk_pixbuf_micro_version$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("gdk_pixbuf_micro_version").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_micro_version
     * }
     */
    public static OfInt gdk_pixbuf_micro_version$layout() {
        return gdk_pixbuf_micro_version$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_micro_version
     * }
     */
    public static MemorySegment gdk_pixbuf_micro_version$segment() {
        return gdk_pixbuf_micro_version$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_micro_version
     * }
     */
    public static int gdk_pixbuf_micro_version() {
        return gdk_pixbuf_micro_version$constants.SEGMENT.get(gdk_pixbuf_micro_version$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const guint gdk_pixbuf_micro_version
     * }
     */
    public static void gdk_pixbuf_micro_version(int varValue) {
        gdk_pixbuf_micro_version$constants.SEGMENT.set(gdk_pixbuf_micro_version$constants.LAYOUT, 0L, varValue);
    }

    private static class gdk_pixbuf_version$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("gdk_pixbuf_version").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *gdk_pixbuf_version
     * }
     */
    public static AddressLayout gdk_pixbuf_version$layout() {
        return gdk_pixbuf_version$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const char *gdk_pixbuf_version
     * }
     */
    public static MemorySegment gdk_pixbuf_version$segment() {
        return gdk_pixbuf_version$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *gdk_pixbuf_version
     * }
     */
    public static MemorySegment gdk_pixbuf_version() {
        return gdk_pixbuf_version$constants.SEGMENT.get(gdk_pixbuf_version$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *gdk_pixbuf_version
     * }
     */
    public static void gdk_pixbuf_version(MemorySegment varValue) {
        gdk_pixbuf_version$constants.SEGMENT.set(gdk_pixbuf_version$constants.LAYOUT, 0L, varValue);
    }
    private static final int GDK_PIXBUF_ALPHA_BILEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ALPHA_BILEVEL = 0
     * }
     */
    public static int GDK_PIXBUF_ALPHA_BILEVEL() {
        return GDK_PIXBUF_ALPHA_BILEVEL;
    }
    private static final int GDK_PIXBUF_ALPHA_FULL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ALPHA_FULL = 1
     * }
     */
    public static int GDK_PIXBUF_ALPHA_FULL() {
        return GDK_PIXBUF_ALPHA_FULL;
    }
    private static final int GDK_COLORSPACE_RGB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_COLORSPACE_RGB = 0
     * }
     */
    public static int GDK_COLORSPACE_RGB() {
        return GDK_COLORSPACE_RGB;
    }
    private static final int GDK_PIXBUF_ERROR_CORRUPT_IMAGE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ERROR_CORRUPT_IMAGE = 0
     * }
     */
    public static int GDK_PIXBUF_ERROR_CORRUPT_IMAGE() {
        return GDK_PIXBUF_ERROR_CORRUPT_IMAGE;
    }
    private static final int GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY = 1
     * }
     */
    public static int GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY() {
        return GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY;
    }
    private static final int GDK_PIXBUF_ERROR_BAD_OPTION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ERROR_BAD_OPTION = 2
     * }
     */
    public static int GDK_PIXBUF_ERROR_BAD_OPTION() {
        return GDK_PIXBUF_ERROR_BAD_OPTION;
    }
    private static final int GDK_PIXBUF_ERROR_UNKNOWN_TYPE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ERROR_UNKNOWN_TYPE = 3
     * }
     */
    public static int GDK_PIXBUF_ERROR_UNKNOWN_TYPE() {
        return GDK_PIXBUF_ERROR_UNKNOWN_TYPE;
    }
    private static final int GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION = 4
     * }
     */
    public static int GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION() {
        return GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION;
    }
    private static final int GDK_PIXBUF_ERROR_FAILED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ERROR_FAILED = 5
     * }
     */
    public static int GDK_PIXBUF_ERROR_FAILED() {
        return GDK_PIXBUF_ERROR_FAILED;
    }
    private static final int GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION = 6
     * }
     */
    public static int GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION() {
        return GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION;
    }

    private static class gdk_pixbuf_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark gdk_pixbuf_error_quark()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_error_quark$descriptor() {
        return gdk_pixbuf_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark gdk_pixbuf_error_quark()
     * }
     */
    public static MethodHandle gdk_pixbuf_error_quark$handle() {
        return gdk_pixbuf_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark gdk_pixbuf_error_quark()
     * }
     */
    public static int gdk_pixbuf_error_quark() {
        var mh$ = gdk_pixbuf_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_get_type()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_type$descriptor() {
        return gdk_pixbuf_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_get_type()
     * }
     */
    public static MethodHandle gdk_pixbuf_get_type$handle() {
        return gdk_pixbuf_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_get_type()
     * }
     */
    public static long gdk_pixbuf_get_type() {
        var mh$ = gdk_pixbuf_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_ref(GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_ref$descriptor() {
        return gdk_pixbuf_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_ref(GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_ref$handle() {
        return gdk_pixbuf_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_ref(GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gdk_pixbuf_ref(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_ref", pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_unref(GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_unref$descriptor() {
        return gdk_pixbuf_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_unref(GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_unref$handle() {
        return gdk_pixbuf_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_unref(GdkPixbuf *pixbuf)
     * }
     */
    public static void gdk_pixbuf_unref(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_unref", pixbuf);
            }
            mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_colorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_colorspace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkColorspace gdk_pixbuf_get_colorspace(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_colorspace$descriptor() {
        return gdk_pixbuf_get_colorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkColorspace gdk_pixbuf_get_colorspace(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_colorspace$handle() {
        return gdk_pixbuf_get_colorspace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkColorspace gdk_pixbuf_get_colorspace(const GdkPixbuf *pixbuf)
     * }
     */
    public static int gdk_pixbuf_get_colorspace(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_get_colorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_colorspace", pixbuf);
            }
            return (int)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_n_channels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_n_channels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_n_channels(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_n_channels$descriptor() {
        return gdk_pixbuf_get_n_channels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_n_channels(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_n_channels$handle() {
        return gdk_pixbuf_get_n_channels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_n_channels(const GdkPixbuf *pixbuf)
     * }
     */
    public static int gdk_pixbuf_get_n_channels(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_get_n_channels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_n_channels", pixbuf);
            }
            return (int)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_has_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_has_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_get_has_alpha(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_has_alpha$descriptor() {
        return gdk_pixbuf_get_has_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_get_has_alpha(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_has_alpha$handle() {
        return gdk_pixbuf_get_has_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_get_has_alpha(const GdkPixbuf *pixbuf)
     * }
     */
    public static int gdk_pixbuf_get_has_alpha(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_get_has_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_has_alpha", pixbuf);
            }
            return (int)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_bits_per_sample {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_bits_per_sample"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_bits_per_sample(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_bits_per_sample$descriptor() {
        return gdk_pixbuf_get_bits_per_sample.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_bits_per_sample(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_bits_per_sample$handle() {
        return gdk_pixbuf_get_bits_per_sample.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_bits_per_sample(const GdkPixbuf *pixbuf)
     * }
     */
    public static int gdk_pixbuf_get_bits_per_sample(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_get_bits_per_sample.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_bits_per_sample", pixbuf);
            }
            return (int)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_pixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_pixels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guchar *gdk_pixbuf_get_pixels(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_pixels$descriptor() {
        return gdk_pixbuf_get_pixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guchar *gdk_pixbuf_get_pixels(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_pixels$handle() {
        return gdk_pixbuf_get_pixels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guchar *gdk_pixbuf_get_pixels(const GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gdk_pixbuf_get_pixels(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_get_pixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_pixels", pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_width(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_width$descriptor() {
        return gdk_pixbuf_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_width(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_width$handle() {
        return gdk_pixbuf_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_width(const GdkPixbuf *pixbuf)
     * }
     */
    public static int gdk_pixbuf_get_width(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_width", pixbuf);
            }
            return (int)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_height(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_height$descriptor() {
        return gdk_pixbuf_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_height(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_height$handle() {
        return gdk_pixbuf_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_height(const GdkPixbuf *pixbuf)
     * }
     */
    public static int gdk_pixbuf_get_height(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_height", pixbuf);
            }
            return (int)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_rowstride {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_rowstride"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_rowstride(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_rowstride$descriptor() {
        return gdk_pixbuf_get_rowstride.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_rowstride(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_rowstride$handle() {
        return gdk_pixbuf_get_rowstride.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_pixbuf_get_rowstride(const GdkPixbuf *pixbuf)
     * }
     */
    public static int gdk_pixbuf_get_rowstride(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_get_rowstride.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_rowstride", pixbuf);
            }
            return (int)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_byte_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_byte_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize gdk_pixbuf_get_byte_length(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_byte_length$descriptor() {
        return gdk_pixbuf_get_byte_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize gdk_pixbuf_get_byte_length(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_byte_length$handle() {
        return gdk_pixbuf_get_byte_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize gdk_pixbuf_get_byte_length(const GdkPixbuf *pixbuf)
     * }
     */
    public static long gdk_pixbuf_get_byte_length(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_get_byte_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_byte_length", pixbuf);
            }
            return (long)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_pixels_with_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_pixels_with_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guchar *gdk_pixbuf_get_pixels_with_length(const GdkPixbuf *pixbuf, guint *length)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_pixels_with_length$descriptor() {
        return gdk_pixbuf_get_pixels_with_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guchar *gdk_pixbuf_get_pixels_with_length(const GdkPixbuf *pixbuf, guint *length)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_pixels_with_length$handle() {
        return gdk_pixbuf_get_pixels_with_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guchar *gdk_pixbuf_get_pixels_with_length(const GdkPixbuf *pixbuf, guint *length)
     * }
     */
    public static MemorySegment gdk_pixbuf_get_pixels_with_length(MemorySegment pixbuf, MemorySegment length) {
        var mh$ = gdk_pixbuf_get_pixels_with_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_pixels_with_length", pixbuf, length);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_read_pixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_read_pixels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const guint8 *gdk_pixbuf_read_pixels(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_read_pixels$descriptor() {
        return gdk_pixbuf_read_pixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const guint8 *gdk_pixbuf_read_pixels(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_read_pixels$handle() {
        return gdk_pixbuf_read_pixels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const guint8 *gdk_pixbuf_read_pixels(const GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gdk_pixbuf_read_pixels(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_read_pixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_read_pixels", pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_read_pixel_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_read_pixel_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *gdk_pixbuf_read_pixel_bytes(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_read_pixel_bytes$descriptor() {
        return gdk_pixbuf_read_pixel_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *gdk_pixbuf_read_pixel_bytes(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_read_pixel_bytes$handle() {
        return gdk_pixbuf_read_pixel_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *gdk_pixbuf_read_pixel_bytes(const GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gdk_pixbuf_read_pixel_bytes(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_read_pixel_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_read_pixel_bytes", pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new(GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new$descriptor() {
        return gdk_pixbuf_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new(GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height)
     * }
     */
    public static MethodHandle gdk_pixbuf_new$handle() {
        return gdk_pixbuf_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new(GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height)
     * }
     */
    public static MemorySegment gdk_pixbuf_new(int colorspace, int has_alpha, int bits_per_sample, int width, int height) {
        var mh$ = gdk_pixbuf_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new", colorspace, has_alpha, bits_per_sample, width, height);
            }
            return (MemorySegment)mh$.invokeExact(colorspace, has_alpha, bits_per_sample, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_calculate_rowstride {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_calculate_rowstride"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_pixbuf_calculate_rowstride(GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_calculate_rowstride$descriptor() {
        return gdk_pixbuf_calculate_rowstride.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_pixbuf_calculate_rowstride(GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height)
     * }
     */
    public static MethodHandle gdk_pixbuf_calculate_rowstride$handle() {
        return gdk_pixbuf_calculate_rowstride.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_pixbuf_calculate_rowstride(GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height)
     * }
     */
    public static int gdk_pixbuf_calculate_rowstride(int colorspace, int has_alpha, int bits_per_sample, int width, int height) {
        var mh$ = gdk_pixbuf_calculate_rowstride.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_calculate_rowstride", colorspace, has_alpha, bits_per_sample, width, height);
            }
            return (int)mh$.invokeExact(colorspace, has_alpha, bits_per_sample, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_copy(const GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_copy$descriptor() {
        return gdk_pixbuf_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_copy(const GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_copy$handle() {
        return gdk_pixbuf_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_copy(const GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gdk_pixbuf_copy(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_copy", pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_subpixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_subpixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_subpixbuf(GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_subpixbuf$descriptor() {
        return gdk_pixbuf_new_subpixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_subpixbuf(GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_subpixbuf$handle() {
        return gdk_pixbuf_new_subpixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_subpixbuf(GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_subpixbuf(MemorySegment src_pixbuf, int src_x, int src_y, int width, int height) {
        var mh$ = gdk_pixbuf_new_subpixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_subpixbuf", src_pixbuf, src_x, src_y, width, height);
            }
            return (MemorySegment)mh$.invokeExact(src_pixbuf, src_x, src_y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file(const char *filename, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_file$descriptor() {
        return gdk_pixbuf_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file(const char *filename, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_file$handle() {
        return gdk_pixbuf_new_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file(const char *filename, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_file(MemorySegment filename, MemorySegment error) {
        var mh$ = gdk_pixbuf_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_file", filename, error);
            }
            return (MemorySegment)mh$.invokeExact(filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_file_at_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_file_at_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file_at_size(const char *filename, int width, int height, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_file_at_size$descriptor() {
        return gdk_pixbuf_new_from_file_at_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file_at_size(const char *filename, int width, int height, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_file_at_size$handle() {
        return gdk_pixbuf_new_from_file_at_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file_at_size(const char *filename, int width, int height, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_file_at_size(MemorySegment filename, int width, int height, MemorySegment error) {
        var mh$ = gdk_pixbuf_new_from_file_at_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_file_at_size", filename, width, height, error);
            }
            return (MemorySegment)mh$.invokeExact(filename, width, height, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_file_at_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_file_at_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file_at_scale(const char *filename, int width, int height, gboolean preserve_aspect_ratio, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_file_at_scale$descriptor() {
        return gdk_pixbuf_new_from_file_at_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file_at_scale(const char *filename, int width, int height, gboolean preserve_aspect_ratio, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_file_at_scale$handle() {
        return gdk_pixbuf_new_from_file_at_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_file_at_scale(const char *filename, int width, int height, gboolean preserve_aspect_ratio, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_file_at_scale(MemorySegment filename, int width, int height, int preserve_aspect_ratio, MemorySegment error) {
        var mh$ = gdk_pixbuf_new_from_file_at_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_file_at_scale", filename, width, height, preserve_aspect_ratio, error);
            }
            return (MemorySegment)mh$.invokeExact(filename, width, height, preserve_aspect_ratio, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_resource(const char *resource_path, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_resource$descriptor() {
        return gdk_pixbuf_new_from_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_resource(const char *resource_path, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_resource$handle() {
        return gdk_pixbuf_new_from_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_resource(const char *resource_path, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_resource(MemorySegment resource_path, MemorySegment error) {
        var mh$ = gdk_pixbuf_new_from_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_resource", resource_path, error);
            }
            return (MemorySegment)mh$.invokeExact(resource_path, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_resource_at_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_resource_at_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_resource_at_scale(const char *resource_path, int width, int height, gboolean preserve_aspect_ratio, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_resource_at_scale$descriptor() {
        return gdk_pixbuf_new_from_resource_at_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_resource_at_scale(const char *resource_path, int width, int height, gboolean preserve_aspect_ratio, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_resource_at_scale$handle() {
        return gdk_pixbuf_new_from_resource_at_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_resource_at_scale(const char *resource_path, int width, int height, gboolean preserve_aspect_ratio, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_resource_at_scale(MemorySegment resource_path, int width, int height, int preserve_aspect_ratio, MemorySegment error) {
        var mh$ = gdk_pixbuf_new_from_resource_at_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_resource_at_scale", resource_path, width, height, preserve_aspect_ratio, error);
            }
            return (MemorySegment)mh$.invokeExact(resource_path, width, height, preserve_aspect_ratio, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_data(const guchar *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride, GdkPixbufDestroyNotify destroy_fn, gpointer destroy_fn_data)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_data$descriptor() {
        return gdk_pixbuf_new_from_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_data(const guchar *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride, GdkPixbufDestroyNotify destroy_fn, gpointer destroy_fn_data)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_data$handle() {
        return gdk_pixbuf_new_from_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_data(const guchar *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride, GdkPixbufDestroyNotify destroy_fn, gpointer destroy_fn_data)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_data(MemorySegment data, int colorspace, int has_alpha, int bits_per_sample, int width, int height, int rowstride, MemorySegment destroy_fn, MemorySegment destroy_fn_data) {
        var mh$ = gdk_pixbuf_new_from_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_data", data, colorspace, has_alpha, bits_per_sample, width, height, rowstride, destroy_fn, destroy_fn_data);
            }
            return (MemorySegment)mh$.invokeExact(data, colorspace, has_alpha, bits_per_sample, width, height, rowstride, destroy_fn, destroy_fn_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_bytes(GBytes *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_bytes$descriptor() {
        return gdk_pixbuf_new_from_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_bytes(GBytes *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_bytes$handle() {
        return gdk_pixbuf_new_from_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_bytes(GBytes *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_bytes(MemorySegment data, int colorspace, int has_alpha, int bits_per_sample, int width, int height, int rowstride) {
        var mh$ = gdk_pixbuf_new_from_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_bytes", data, colorspace, has_alpha, bits_per_sample, width, height, rowstride);
            }
            return (MemorySegment)mh$.invokeExact(data, colorspace, has_alpha, bits_per_sample, width, height, rowstride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_xpm_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_xpm_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_xpm_data(const char **data)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_xpm_data$descriptor() {
        return gdk_pixbuf_new_from_xpm_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_xpm_data(const char **data)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_xpm_data$handle() {
        return gdk_pixbuf_new_from_xpm_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_xpm_data(const char **data)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_xpm_data(MemorySegment data) {
        var mh$ = gdk_pixbuf_new_from_xpm_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_xpm_data", data);
            }
            return (MemorySegment)mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_inline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_inline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_inline(gint data_length, const guint8 *data, gboolean copy_pixels, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_inline$descriptor() {
        return gdk_pixbuf_new_from_inline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_inline(gint data_length, const guint8 *data, gboolean copy_pixels, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_inline$handle() {
        return gdk_pixbuf_new_from_inline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_inline(gint data_length, const guint8 *data, gboolean copy_pixels, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_inline(int data_length, MemorySegment data, int copy_pixels, MemorySegment error) {
        var mh$ = gdk_pixbuf_new_from_inline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_inline", data_length, data, copy_pixels, error);
            }
            return (MemorySegment)mh$.invokeExact(data_length, data, copy_pixels, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_fill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_fill"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_fill(GdkPixbuf *pixbuf, guint32 pixel)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_fill$descriptor() {
        return gdk_pixbuf_fill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_fill(GdkPixbuf *pixbuf, guint32 pixel)
     * }
     */
    public static MethodHandle gdk_pixbuf_fill$handle() {
        return gdk_pixbuf_fill.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_fill(GdkPixbuf *pixbuf, guint32 pixel)
     * }
     */
    public static void gdk_pixbuf_fill(MemorySegment pixbuf, int pixel) {
        var mh$ = gdk_pixbuf_fill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_fill", pixbuf, pixel);
            }
            mh$.invokeExact(pixbuf, pixel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save(GdkPixbuf *pixbuf, const char *filename, const char *type, GError **error, ...)
     * }
     */
    public static class gdk_pixbuf_save {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gdk_pixbuf_save");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gdk_pixbuf_save(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean gdk_pixbuf_save(GdkPixbuf *pixbuf, const char *filename, const char *type, GError **error, ...)
         * }
         */
        public static gdk_pixbuf_save makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gdk_pixbuf_save(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment pixbuf, MemorySegment filename, MemorySegment type, MemorySegment error, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gdk_pixbuf_save", pixbuf, filename, type, error, x4);
                }
                return (int)spreader.invokeExact(pixbuf, filename, type, error, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gdk_pixbuf_savev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_savev"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_savev(GdkPixbuf *pixbuf, const char *filename, const char *type, char **option_keys, char **option_values, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_savev$descriptor() {
        return gdk_pixbuf_savev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_savev(GdkPixbuf *pixbuf, const char *filename, const char *type, char **option_keys, char **option_values, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_savev$handle() {
        return gdk_pixbuf_savev.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_savev(GdkPixbuf *pixbuf, const char *filename, const char *type, char **option_keys, char **option_values, GError **error)
     * }
     */
    public static int gdk_pixbuf_savev(MemorySegment pixbuf, MemorySegment filename, MemorySegment type, MemorySegment option_keys, MemorySegment option_values, MemorySegment error) {
        var mh$ = gdk_pixbuf_savev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_savev", pixbuf, filename, type, option_keys, option_values, error);
            }
            return (int)mh$.invokeExact(pixbuf, filename, type, option_keys, option_values, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_callback(GdkPixbuf *pixbuf, GdkPixbufSaveFunc save_func, gpointer user_data, const char *type, GError **error, ...)
     * }
     */
    public static class gdk_pixbuf_save_to_callback {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gdk_pixbuf_save_to_callback");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gdk_pixbuf_save_to_callback(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean gdk_pixbuf_save_to_callback(GdkPixbuf *pixbuf, GdkPixbufSaveFunc save_func, gpointer user_data, const char *type, GError **error, ...)
         * }
         */
        public static gdk_pixbuf_save_to_callback makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gdk_pixbuf_save_to_callback(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment pixbuf, MemorySegment save_func, MemorySegment user_data, MemorySegment type, MemorySegment error, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gdk_pixbuf_save_to_callback", pixbuf, save_func, user_data, type, error, x5);
                }
                return (int)spreader.invokeExact(pixbuf, save_func, user_data, type, error, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gdk_pixbuf_save_to_callbackv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_save_to_callbackv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_callbackv(GdkPixbuf *pixbuf, GdkPixbufSaveFunc save_func, gpointer user_data, const char *type, char **option_keys, char **option_values, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_save_to_callbackv$descriptor() {
        return gdk_pixbuf_save_to_callbackv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_callbackv(GdkPixbuf *pixbuf, GdkPixbufSaveFunc save_func, gpointer user_data, const char *type, char **option_keys, char **option_values, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_save_to_callbackv$handle() {
        return gdk_pixbuf_save_to_callbackv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_callbackv(GdkPixbuf *pixbuf, GdkPixbufSaveFunc save_func, gpointer user_data, const char *type, char **option_keys, char **option_values, GError **error)
     * }
     */
    public static int gdk_pixbuf_save_to_callbackv(MemorySegment pixbuf, MemorySegment save_func, MemorySegment user_data, MemorySegment type, MemorySegment option_keys, MemorySegment option_values, MemorySegment error) {
        var mh$ = gdk_pixbuf_save_to_callbackv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_save_to_callbackv", pixbuf, save_func, user_data, type, option_keys, option_values, error);
            }
            return (int)mh$.invokeExact(pixbuf, save_func, user_data, type, option_keys, option_values, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_buffer(GdkPixbuf *pixbuf, gchar **buffer, gsize *buffer_size, const char *type, GError **error, ...)
     * }
     */
    public static class gdk_pixbuf_save_to_buffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gdk_pixbuf_save_to_buffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gdk_pixbuf_save_to_buffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean gdk_pixbuf_save_to_buffer(GdkPixbuf *pixbuf, gchar **buffer, gsize *buffer_size, const char *type, GError **error, ...)
         * }
         */
        public static gdk_pixbuf_save_to_buffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gdk_pixbuf_save_to_buffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment pixbuf, MemorySegment buffer, MemorySegment buffer_size, MemorySegment type, MemorySegment error, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gdk_pixbuf_save_to_buffer", pixbuf, buffer, buffer_size, type, error, x5);
                }
                return (int)spreader.invokeExact(pixbuf, buffer, buffer_size, type, error, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gdk_pixbuf_save_to_bufferv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_save_to_bufferv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_bufferv(GdkPixbuf *pixbuf, gchar **buffer, gsize *buffer_size, const char *type, char **option_keys, char **option_values, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_save_to_bufferv$descriptor() {
        return gdk_pixbuf_save_to_bufferv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_bufferv(GdkPixbuf *pixbuf, gchar **buffer, gsize *buffer_size, const char *type, char **option_keys, char **option_values, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_save_to_bufferv$handle() {
        return gdk_pixbuf_save_to_bufferv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_bufferv(GdkPixbuf *pixbuf, gchar **buffer, gsize *buffer_size, const char *type, char **option_keys, char **option_values, GError **error)
     * }
     */
    public static int gdk_pixbuf_save_to_bufferv(MemorySegment pixbuf, MemorySegment buffer, MemorySegment buffer_size, MemorySegment type, MemorySegment option_keys, MemorySegment option_values, MemorySegment error) {
        var mh$ = gdk_pixbuf_save_to_bufferv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_save_to_bufferv", pixbuf, buffer, buffer_size, type, option_keys, option_values, error);
            }
            return (int)mh$.invokeExact(pixbuf, buffer, buffer_size, type, option_keys, option_values, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_stream(GInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_stream$descriptor() {
        return gdk_pixbuf_new_from_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_stream(GInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_stream$handle() {
        return gdk_pixbuf_new_from_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_stream(GInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_stream(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = gdk_pixbuf_new_from_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_stream", stream, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_stream_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_stream_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_new_from_stream_async(GInputStream *stream, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_stream_async$descriptor() {
        return gdk_pixbuf_new_from_stream_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_new_from_stream_async(GInputStream *stream, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_stream_async$handle() {
        return gdk_pixbuf_new_from_stream_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_new_from_stream_async(GInputStream *stream, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void gdk_pixbuf_new_from_stream_async(MemorySegment stream, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gdk_pixbuf_new_from_stream_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_stream_async", stream, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_stream_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_stream_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_stream_finish(GAsyncResult *async_result, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_stream_finish$descriptor() {
        return gdk_pixbuf_new_from_stream_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_stream_finish(GAsyncResult *async_result, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_stream_finish$handle() {
        return gdk_pixbuf_new_from_stream_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_stream_finish(GAsyncResult *async_result, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_stream_finish(MemorySegment async_result, MemorySegment error) {
        var mh$ = gdk_pixbuf_new_from_stream_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_stream_finish", async_result, error);
            }
            return (MemorySegment)mh$.invokeExact(async_result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_stream_at_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_stream_at_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_stream_at_scale(GInputStream *stream, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_stream_at_scale$descriptor() {
        return gdk_pixbuf_new_from_stream_at_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_stream_at_scale(GInputStream *stream, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_stream_at_scale$handle() {
        return gdk_pixbuf_new_from_stream_at_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_new_from_stream_at_scale(GInputStream *stream, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_new_from_stream_at_scale(MemorySegment stream, int width, int height, int preserve_aspect_ratio, MemorySegment cancellable, MemorySegment error) {
        var mh$ = gdk_pixbuf_new_from_stream_at_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_stream_at_scale", stream, width, height, preserve_aspect_ratio, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, width, height, preserve_aspect_ratio, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_new_from_stream_at_scale_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_new_from_stream_at_scale_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_new_from_stream_at_scale_async(GInputStream *stream, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_new_from_stream_at_scale_async$descriptor() {
        return gdk_pixbuf_new_from_stream_at_scale_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_new_from_stream_at_scale_async(GInputStream *stream, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle gdk_pixbuf_new_from_stream_at_scale_async$handle() {
        return gdk_pixbuf_new_from_stream_at_scale_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_new_from_stream_at_scale_async(GInputStream *stream, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void gdk_pixbuf_new_from_stream_at_scale_async(MemorySegment stream, int width, int height, int preserve_aspect_ratio, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gdk_pixbuf_new_from_stream_at_scale_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_new_from_stream_at_scale_async", stream, width, height, preserve_aspect_ratio, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, width, height, preserve_aspect_ratio, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_stream(GdkPixbuf *pixbuf, GOutputStream *stream, const char *type, GCancellable *cancellable, GError **error, ...)
     * }
     */
    public static class gdk_pixbuf_save_to_stream {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gdk_pixbuf_save_to_stream");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gdk_pixbuf_save_to_stream(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean gdk_pixbuf_save_to_stream(GdkPixbuf *pixbuf, GOutputStream *stream, const char *type, GCancellable *cancellable, GError **error, ...)
         * }
         */
        public static gdk_pixbuf_save_to_stream makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gdk_pixbuf_save_to_stream(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment pixbuf, MemorySegment stream, MemorySegment type, MemorySegment cancellable, MemorySegment error, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gdk_pixbuf_save_to_stream", pixbuf, stream, type, cancellable, error, x5);
                }
                return (int)spreader.invokeExact(pixbuf, stream, type, cancellable, error, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_save_to_stream_async(GdkPixbuf *pixbuf, GOutputStream *stream, const gchar *type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data, ...)
     * }
     */
    public static class gdk_pixbuf_save_to_stream_async {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gdk_pixbuf_save_to_stream_async");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gdk_pixbuf_save_to_stream_async(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gdk_pixbuf_save_to_stream_async(GdkPixbuf *pixbuf, GOutputStream *stream, const gchar *type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data, ...)
         * }
         */
        public static gdk_pixbuf_save_to_stream_async makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gdk_pixbuf_save_to_stream_async(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment pixbuf, MemorySegment stream, MemorySegment type, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gdk_pixbuf_save_to_stream_async", pixbuf, stream, type, cancellable, callback, user_data, x6);
                }
                spreader.invokeExact(pixbuf, stream, type, cancellable, callback, user_data, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gdk_pixbuf_save_to_stream_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_save_to_stream_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_stream_finish(GAsyncResult *async_result, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_save_to_stream_finish$descriptor() {
        return gdk_pixbuf_save_to_stream_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_stream_finish(GAsyncResult *async_result, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_save_to_stream_finish$handle() {
        return gdk_pixbuf_save_to_stream_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_stream_finish(GAsyncResult *async_result, GError **error)
     * }
     */
    public static int gdk_pixbuf_save_to_stream_finish(MemorySegment async_result, MemorySegment error) {
        var mh$ = gdk_pixbuf_save_to_stream_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_save_to_stream_finish", async_result, error);
            }
            return (int)mh$.invokeExact(async_result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_save_to_streamv_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_save_to_streamv_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_save_to_streamv_async(GdkPixbuf *pixbuf, GOutputStream *stream, const gchar *type, gchar **option_keys, gchar **option_values, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_save_to_streamv_async$descriptor() {
        return gdk_pixbuf_save_to_streamv_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_save_to_streamv_async(GdkPixbuf *pixbuf, GOutputStream *stream, const gchar *type, gchar **option_keys, gchar **option_values, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle gdk_pixbuf_save_to_streamv_async$handle() {
        return gdk_pixbuf_save_to_streamv_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_save_to_streamv_async(GdkPixbuf *pixbuf, GOutputStream *stream, const gchar *type, gchar **option_keys, gchar **option_values, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void gdk_pixbuf_save_to_streamv_async(MemorySegment pixbuf, MemorySegment stream, MemorySegment type, MemorySegment option_keys, MemorySegment option_values, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gdk_pixbuf_save_to_streamv_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_save_to_streamv_async", pixbuf, stream, type, option_keys, option_values, cancellable, callback, user_data);
            }
            mh$.invokeExact(pixbuf, stream, type, option_keys, option_values, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_save_to_streamv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_save_to_streamv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_streamv(GdkPixbuf *pixbuf, GOutputStream *stream, const char *type, char **option_keys, char **option_values, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_save_to_streamv$descriptor() {
        return gdk_pixbuf_save_to_streamv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_streamv(GdkPixbuf *pixbuf, GOutputStream *stream, const char *type, char **option_keys, char **option_values, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_save_to_streamv$handle() {
        return gdk_pixbuf_save_to_streamv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_save_to_streamv(GdkPixbuf *pixbuf, GOutputStream *stream, const char *type, char **option_keys, char **option_values, GCancellable *cancellable, GError **error)
     * }
     */
    public static int gdk_pixbuf_save_to_streamv(MemorySegment pixbuf, MemorySegment stream, MemorySegment type, MemorySegment option_keys, MemorySegment option_values, MemorySegment cancellable, MemorySegment error) {
        var mh$ = gdk_pixbuf_save_to_streamv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_save_to_streamv", pixbuf, stream, type, option_keys, option_values, cancellable, error);
            }
            return (int)mh$.invokeExact(pixbuf, stream, type, option_keys, option_values, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_add_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_add_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_add_alpha(const GdkPixbuf *pixbuf, gboolean substitute_color, guchar r, guchar g, guchar b)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_add_alpha$descriptor() {
        return gdk_pixbuf_add_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_add_alpha(const GdkPixbuf *pixbuf, gboolean substitute_color, guchar r, guchar g, guchar b)
     * }
     */
    public static MethodHandle gdk_pixbuf_add_alpha$handle() {
        return gdk_pixbuf_add_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_add_alpha(const GdkPixbuf *pixbuf, gboolean substitute_color, guchar r, guchar g, guchar b)
     * }
     */
    public static MemorySegment gdk_pixbuf_add_alpha(MemorySegment pixbuf, int substitute_color, byte r, byte g, byte b) {
        var mh$ = gdk_pixbuf_add_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_add_alpha", pixbuf, substitute_color, r, g, b);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf, substitute_color, r, g, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_copy_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_copy_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_copy_area(const GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height, GdkPixbuf *dest_pixbuf, int dest_x, int dest_y)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_copy_area$descriptor() {
        return gdk_pixbuf_copy_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_copy_area(const GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height, GdkPixbuf *dest_pixbuf, int dest_x, int dest_y)
     * }
     */
    public static MethodHandle gdk_pixbuf_copy_area$handle() {
        return gdk_pixbuf_copy_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_copy_area(const GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height, GdkPixbuf *dest_pixbuf, int dest_x, int dest_y)
     * }
     */
    public static void gdk_pixbuf_copy_area(MemorySegment src_pixbuf, int src_x, int src_y, int width, int height, MemorySegment dest_pixbuf, int dest_x, int dest_y) {
        var mh$ = gdk_pixbuf_copy_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_copy_area", src_pixbuf, src_x, src_y, width, height, dest_pixbuf, dest_x, dest_y);
            }
            mh$.invokeExact(src_pixbuf, src_x, src_y, width, height, dest_pixbuf, dest_x, dest_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_saturate_and_pixelate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_saturate_and_pixelate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_saturate_and_pixelate(const GdkPixbuf *src, GdkPixbuf *dest, gfloat saturation, gboolean pixelate)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_saturate_and_pixelate$descriptor() {
        return gdk_pixbuf_saturate_and_pixelate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_saturate_and_pixelate(const GdkPixbuf *src, GdkPixbuf *dest, gfloat saturation, gboolean pixelate)
     * }
     */
    public static MethodHandle gdk_pixbuf_saturate_and_pixelate$handle() {
        return gdk_pixbuf_saturate_and_pixelate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_saturate_and_pixelate(const GdkPixbuf *src, GdkPixbuf *dest, gfloat saturation, gboolean pixelate)
     * }
     */
    public static void gdk_pixbuf_saturate_and_pixelate(MemorySegment src, MemorySegment dest, float saturation, int pixelate) {
        var mh$ = gdk_pixbuf_saturate_and_pixelate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_saturate_and_pixelate", src, dest, saturation, pixelate);
            }
            mh$.invokeExact(src, dest, saturation, pixelate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_apply_embedded_orientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_apply_embedded_orientation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_apply_embedded_orientation(GdkPixbuf *src)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_apply_embedded_orientation$descriptor() {
        return gdk_pixbuf_apply_embedded_orientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_apply_embedded_orientation(GdkPixbuf *src)
     * }
     */
    public static MethodHandle gdk_pixbuf_apply_embedded_orientation$handle() {
        return gdk_pixbuf_apply_embedded_orientation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_apply_embedded_orientation(GdkPixbuf *src)
     * }
     */
    public static MemorySegment gdk_pixbuf_apply_embedded_orientation(MemorySegment src) {
        var mh$ = gdk_pixbuf_apply_embedded_orientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_apply_embedded_orientation", src);
            }
            return (MemorySegment)mh$.invokeExact(src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_set_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_set_option"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_set_option(GdkPixbuf *pixbuf, const gchar *key, const gchar *value)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_set_option$descriptor() {
        return gdk_pixbuf_set_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_set_option(GdkPixbuf *pixbuf, const gchar *key, const gchar *value)
     * }
     */
    public static MethodHandle gdk_pixbuf_set_option$handle() {
        return gdk_pixbuf_set_option.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_set_option(GdkPixbuf *pixbuf, const gchar *key, const gchar *value)
     * }
     */
    public static int gdk_pixbuf_set_option(MemorySegment pixbuf, MemorySegment key, MemorySegment value) {
        var mh$ = gdk_pixbuf_set_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_set_option", pixbuf, key, value);
            }
            return (int)mh$.invokeExact(pixbuf, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_option"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gdk_pixbuf_get_option(GdkPixbuf *pixbuf, const gchar *key)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_option$descriptor() {
        return gdk_pixbuf_get_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gdk_pixbuf_get_option(GdkPixbuf *pixbuf, const gchar *key)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_option$handle() {
        return gdk_pixbuf_get_option.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gdk_pixbuf_get_option(GdkPixbuf *pixbuf, const gchar *key)
     * }
     */
    public static MemorySegment gdk_pixbuf_get_option(MemorySegment pixbuf, MemorySegment key) {
        var mh$ = gdk_pixbuf_get_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_option", pixbuf, key);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_remove_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_remove_option"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_remove_option(GdkPixbuf *pixbuf, const gchar *key)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_remove_option$descriptor() {
        return gdk_pixbuf_remove_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_remove_option(GdkPixbuf *pixbuf, const gchar *key)
     * }
     */
    public static MethodHandle gdk_pixbuf_remove_option$handle() {
        return gdk_pixbuf_remove_option.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_remove_option(GdkPixbuf *pixbuf, const gchar *key)
     * }
     */
    public static int gdk_pixbuf_remove_option(MemorySegment pixbuf, MemorySegment key) {
        var mh$ = gdk_pixbuf_remove_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_remove_option", pixbuf, key);
            }
            return (int)mh$.invokeExact(pixbuf, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHashTable *gdk_pixbuf_get_options(GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_options$descriptor() {
        return gdk_pixbuf_get_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHashTable *gdk_pixbuf_get_options(GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_options$handle() {
        return gdk_pixbuf_get_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHashTable *gdk_pixbuf_get_options(GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gdk_pixbuf_get_options(MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_get_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_options", pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_copy_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_copy_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_copy_options(GdkPixbuf *src_pixbuf, GdkPixbuf *dest_pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_copy_options$descriptor() {
        return gdk_pixbuf_copy_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_copy_options(GdkPixbuf *src_pixbuf, GdkPixbuf *dest_pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_copy_options$handle() {
        return gdk_pixbuf_copy_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_copy_options(GdkPixbuf *src_pixbuf, GdkPixbuf *dest_pixbuf)
     * }
     */
    public static int gdk_pixbuf_copy_options(MemorySegment src_pixbuf, MemorySegment dest_pixbuf) {
        var mh$ = gdk_pixbuf_copy_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_copy_options", src_pixbuf, dest_pixbuf);
            }
            return (int)mh$.invokeExact(src_pixbuf, dest_pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_INTERP_NEAREST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_INTERP_NEAREST = 0
     * }
     */
    public static int GDK_INTERP_NEAREST() {
        return GDK_INTERP_NEAREST;
    }
    private static final int GDK_INTERP_TILES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_INTERP_TILES = 1
     * }
     */
    public static int GDK_INTERP_TILES() {
        return GDK_INTERP_TILES;
    }
    private static final int GDK_INTERP_BILINEAR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_INTERP_BILINEAR = 2
     * }
     */
    public static int GDK_INTERP_BILINEAR() {
        return GDK_INTERP_BILINEAR;
    }
    private static final int GDK_INTERP_HYPER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_INTERP_HYPER = 3
     * }
     */
    public static int GDK_INTERP_HYPER() {
        return GDK_INTERP_HYPER;
    }
    private static final int GDK_PIXBUF_ROTATE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ROTATE_NONE = 0
     * }
     */
    public static int GDK_PIXBUF_ROTATE_NONE() {
        return GDK_PIXBUF_ROTATE_NONE;
    }
    private static final int GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = (int)90L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = 90
     * }
     */
    public static int GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE() {
        return GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE;
    }
    private static final int GDK_PIXBUF_ROTATE_UPSIDEDOWN = (int)180L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ROTATE_UPSIDEDOWN = 180
     * }
     */
    public static int GDK_PIXBUF_ROTATE_UPSIDEDOWN() {
        return GDK_PIXBUF_ROTATE_UPSIDEDOWN;
    }
    private static final int GDK_PIXBUF_ROTATE_CLOCKWISE = (int)270L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIXBUF_ROTATE_CLOCKWISE = 270
     * }
     */
    public static int GDK_PIXBUF_ROTATE_CLOCKWISE() {
        return GDK_PIXBUF_ROTATE_CLOCKWISE;
    }

    private static class gdk_pixbuf_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_scale(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_scale$descriptor() {
        return gdk_pixbuf_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_scale(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type)
     * }
     */
    public static MethodHandle gdk_pixbuf_scale$handle() {
        return gdk_pixbuf_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_scale(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type)
     * }
     */
    public static void gdk_pixbuf_scale(MemorySegment src, MemorySegment dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type) {
        var mh$ = gdk_pixbuf_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_scale", src, dest, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, interp_type);
            }
            mh$.invokeExact(src, dest, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, interp_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_composite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_composite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_composite(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_composite$descriptor() {
        return gdk_pixbuf_composite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_composite(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha)
     * }
     */
    public static MethodHandle gdk_pixbuf_composite$handle() {
        return gdk_pixbuf_composite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_composite(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha)
     * }
     */
    public static void gdk_pixbuf_composite(MemorySegment src, MemorySegment dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type, int overall_alpha) {
        var mh$ = gdk_pixbuf_composite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_composite", src, dest, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, interp_type, overall_alpha);
            }
            mh$.invokeExact(src, dest, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, interp_type, overall_alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_composite_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_composite_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_composite_color(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha, int check_x, int check_y, int check_size, guint32 color1, guint32 color2)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_composite_color$descriptor() {
        return gdk_pixbuf_composite_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_composite_color(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha, int check_x, int check_y, int check_size, guint32 color1, guint32 color2)
     * }
     */
    public static MethodHandle gdk_pixbuf_composite_color$handle() {
        return gdk_pixbuf_composite_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_composite_color(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha, int check_x, int check_y, int check_size, guint32 color1, guint32 color2)
     * }
     */
    public static void gdk_pixbuf_composite_color(MemorySegment src, MemorySegment dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type, int overall_alpha, int check_x, int check_y, int check_size, int color1, int color2) {
        var mh$ = gdk_pixbuf_composite_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_composite_color", src, dest, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, interp_type, overall_alpha, check_x, check_y, check_size, color1, color2);
            }
            mh$.invokeExact(src, dest, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, interp_type, overall_alpha, check_x, check_y, check_size, color1, color2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_scale_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_scale_simple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_scale_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_scale_simple$descriptor() {
        return gdk_pixbuf_scale_simple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_scale_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type)
     * }
     */
    public static MethodHandle gdk_pixbuf_scale_simple$handle() {
        return gdk_pixbuf_scale_simple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_scale_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type)
     * }
     */
    public static MemorySegment gdk_pixbuf_scale_simple(MemorySegment src, int dest_width, int dest_height, int interp_type) {
        var mh$ = gdk_pixbuf_scale_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_scale_simple", src, dest_width, dest_height, interp_type);
            }
            return (MemorySegment)mh$.invokeExact(src, dest_width, dest_height, interp_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_composite_color_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_composite_color_simple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_composite_color_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type, int overall_alpha, int check_size, guint32 color1, guint32 color2)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_composite_color_simple$descriptor() {
        return gdk_pixbuf_composite_color_simple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_composite_color_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type, int overall_alpha, int check_size, guint32 color1, guint32 color2)
     * }
     */
    public static MethodHandle gdk_pixbuf_composite_color_simple$handle() {
        return gdk_pixbuf_composite_color_simple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_composite_color_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type, int overall_alpha, int check_size, guint32 color1, guint32 color2)
     * }
     */
    public static MemorySegment gdk_pixbuf_composite_color_simple(MemorySegment src, int dest_width, int dest_height, int interp_type, int overall_alpha, int check_size, int color1, int color2) {
        var mh$ = gdk_pixbuf_composite_color_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_composite_color_simple", src, dest_width, dest_height, interp_type, overall_alpha, check_size, color1, color2);
            }
            return (MemorySegment)mh$.invokeExact(src, dest_width, dest_height, interp_type, overall_alpha, check_size, color1, color2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_rotate_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_rotate_simple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_rotate_simple(const GdkPixbuf *src, GdkPixbufRotation angle)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_rotate_simple$descriptor() {
        return gdk_pixbuf_rotate_simple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_rotate_simple(const GdkPixbuf *src, GdkPixbufRotation angle)
     * }
     */
    public static MethodHandle gdk_pixbuf_rotate_simple$handle() {
        return gdk_pixbuf_rotate_simple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_rotate_simple(const GdkPixbuf *src, GdkPixbufRotation angle)
     * }
     */
    public static MemorySegment gdk_pixbuf_rotate_simple(MemorySegment src, int angle) {
        var mh$ = gdk_pixbuf_rotate_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_rotate_simple", src, angle);
            }
            return (MemorySegment)mh$.invokeExact(src, angle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_flip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_flip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_flip(const GdkPixbuf *src, gboolean horizontal)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_flip$descriptor() {
        return gdk_pixbuf_flip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_flip(const GdkPixbuf *src, gboolean horizontal)
     * }
     */
    public static MethodHandle gdk_pixbuf_flip$handle() {
        return gdk_pixbuf_flip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_flip(const GdkPixbuf *src, gboolean horizontal)
     * }
     */
    public static MemorySegment gdk_pixbuf_flip(MemorySegment src, int horizontal) {
        var mh$ = gdk_pixbuf_flip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_flip", src, horizontal);
            }
            return (MemorySegment)mh$.invokeExact(src, horizontal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_animation_get_type()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_get_type$descriptor() {
        return gdk_pixbuf_animation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_animation_get_type()
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_get_type$handle() {
        return gdk_pixbuf_animation_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_animation_get_type()
     * }
     */
    public static long gdk_pixbuf_animation_get_type() {
        var mh$ = gdk_pixbuf_animation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_new_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file(const char *filename, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_new_from_file$descriptor() {
        return gdk_pixbuf_animation_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file(const char *filename, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_new_from_file$handle() {
        return gdk_pixbuf_animation_new_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file(const char *filename, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_animation_new_from_file(MemorySegment filename, MemorySegment error) {
        var mh$ = gdk_pixbuf_animation_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_new_from_file", filename, error);
            }
            return (MemorySegment)mh$.invokeExact(filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_new_from_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_new_from_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream(GInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_new_from_stream$descriptor() {
        return gdk_pixbuf_animation_new_from_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream(GInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_new_from_stream$handle() {
        return gdk_pixbuf_animation_new_from_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream(GInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_animation_new_from_stream(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = gdk_pixbuf_animation_new_from_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_new_from_stream", stream, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_new_from_stream_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_new_from_stream_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_animation_new_from_stream_async(GInputStream *stream, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_new_from_stream_async$descriptor() {
        return gdk_pixbuf_animation_new_from_stream_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_animation_new_from_stream_async(GInputStream *stream, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_new_from_stream_async$handle() {
        return gdk_pixbuf_animation_new_from_stream_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_animation_new_from_stream_async(GInputStream *stream, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void gdk_pixbuf_animation_new_from_stream_async(MemorySegment stream, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gdk_pixbuf_animation_new_from_stream_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_new_from_stream_async", stream, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_new_from_stream_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_new_from_stream_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream_finish(GAsyncResult *async_result, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_new_from_stream_finish$descriptor() {
        return gdk_pixbuf_animation_new_from_stream_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream_finish(GAsyncResult *async_result, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_new_from_stream_finish$handle() {
        return gdk_pixbuf_animation_new_from_stream_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream_finish(GAsyncResult *async_result, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_animation_new_from_stream_finish(MemorySegment async_result, MemorySegment error) {
        var mh$ = gdk_pixbuf_animation_new_from_stream_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_new_from_stream_finish", async_result, error);
            }
            return (MemorySegment)mh$.invokeExact(async_result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_new_from_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_new_from_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_resource(const char *resource_path, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_new_from_resource$descriptor() {
        return gdk_pixbuf_animation_new_from_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_resource(const char *resource_path, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_new_from_resource$handle() {
        return gdk_pixbuf_animation_new_from_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_resource(const char *resource_path, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_animation_new_from_resource(MemorySegment resource_path, MemorySegment error) {
        var mh$ = gdk_pixbuf_animation_new_from_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_new_from_resource", resource_path, error);
            }
            return (MemorySegment)mh$.invokeExact(resource_path, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_ref(GdkPixbufAnimation *animation)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_ref$descriptor() {
        return gdk_pixbuf_animation_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_ref(GdkPixbufAnimation *animation)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_ref$handle() {
        return gdk_pixbuf_animation_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_animation_ref(GdkPixbufAnimation *animation)
     * }
     */
    public static MemorySegment gdk_pixbuf_animation_ref(MemorySegment animation) {
        var mh$ = gdk_pixbuf_animation_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_ref", animation);
            }
            return (MemorySegment)mh$.invokeExact(animation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_animation_unref(GdkPixbufAnimation *animation)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_unref$descriptor() {
        return gdk_pixbuf_animation_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_animation_unref(GdkPixbufAnimation *animation)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_unref$handle() {
        return gdk_pixbuf_animation_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_animation_unref(GdkPixbufAnimation *animation)
     * }
     */
    public static void gdk_pixbuf_animation_unref(MemorySegment animation) {
        var mh$ = gdk_pixbuf_animation_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_unref", animation);
            }
            mh$.invokeExact(animation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_animation_get_width(GdkPixbufAnimation *animation)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_get_width$descriptor() {
        return gdk_pixbuf_animation_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_animation_get_width(GdkPixbufAnimation *animation)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_get_width$handle() {
        return gdk_pixbuf_animation_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_pixbuf_animation_get_width(GdkPixbufAnimation *animation)
     * }
     */
    public static int gdk_pixbuf_animation_get_width(MemorySegment animation) {
        var mh$ = gdk_pixbuf_animation_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_get_width", animation);
            }
            return (int)mh$.invokeExact(animation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_animation_get_height(GdkPixbufAnimation *animation)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_get_height$descriptor() {
        return gdk_pixbuf_animation_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_animation_get_height(GdkPixbufAnimation *animation)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_get_height$handle() {
        return gdk_pixbuf_animation_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_pixbuf_animation_get_height(GdkPixbufAnimation *animation)
     * }
     */
    public static int gdk_pixbuf_animation_get_height(MemorySegment animation) {
        var mh$ = gdk_pixbuf_animation_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_get_height", animation);
            }
            return (int)mh$.invokeExact(animation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_is_static_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_is_static_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_animation_is_static_image(GdkPixbufAnimation *animation)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_is_static_image$descriptor() {
        return gdk_pixbuf_animation_is_static_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_animation_is_static_image(GdkPixbufAnimation *animation)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_is_static_image$handle() {
        return gdk_pixbuf_animation_is_static_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_animation_is_static_image(GdkPixbufAnimation *animation)
     * }
     */
    public static int gdk_pixbuf_animation_is_static_image(MemorySegment animation) {
        var mh$ = gdk_pixbuf_animation_is_static_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_is_static_image", animation);
            }
            return (int)mh$.invokeExact(animation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_get_static_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_get_static_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_animation_get_static_image(GdkPixbufAnimation *animation)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_get_static_image$descriptor() {
        return gdk_pixbuf_animation_get_static_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_animation_get_static_image(GdkPixbufAnimation *animation)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_get_static_image$handle() {
        return gdk_pixbuf_animation_get_static_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_animation_get_static_image(GdkPixbufAnimation *animation)
     * }
     */
    public static MemorySegment gdk_pixbuf_animation_get_static_image(MemorySegment animation) {
        var mh$ = gdk_pixbuf_animation_get_static_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_get_static_image", animation);
            }
            return (MemorySegment)mh$.invokeExact(animation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_get_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_get_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter(GdkPixbufAnimation *animation, const GTimeVal *start_time)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_get_iter$descriptor() {
        return gdk_pixbuf_animation_get_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter(GdkPixbufAnimation *animation, const GTimeVal *start_time)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_get_iter$handle() {
        return gdk_pixbuf_animation_get_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter(GdkPixbufAnimation *animation, const GTimeVal *start_time)
     * }
     */
    public static MemorySegment gdk_pixbuf_animation_get_iter(MemorySegment animation, MemorySegment start_time) {
        var mh$ = gdk_pixbuf_animation_get_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_get_iter", animation, start_time);
            }
            return (MemorySegment)mh$.invokeExact(animation, start_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_iter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_iter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_animation_iter_get_type()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_iter_get_type$descriptor() {
        return gdk_pixbuf_animation_iter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_animation_iter_get_type()
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_iter_get_type$handle() {
        return gdk_pixbuf_animation_iter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_animation_iter_get_type()
     * }
     */
    public static long gdk_pixbuf_animation_iter_get_type() {
        var mh$ = gdk_pixbuf_animation_iter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_iter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_iter_get_delay_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_iter_get_delay_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_animation_iter_get_delay_time(GdkPixbufAnimationIter *iter)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_iter_get_delay_time$descriptor() {
        return gdk_pixbuf_animation_iter_get_delay_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_pixbuf_animation_iter_get_delay_time(GdkPixbufAnimationIter *iter)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_iter_get_delay_time$handle() {
        return gdk_pixbuf_animation_iter_get_delay_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_pixbuf_animation_iter_get_delay_time(GdkPixbufAnimationIter *iter)
     * }
     */
    public static int gdk_pixbuf_animation_iter_get_delay_time(MemorySegment iter) {
        var mh$ = gdk_pixbuf_animation_iter_get_delay_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_iter_get_delay_time", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_iter_get_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_iter_get_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_animation_iter_get_pixbuf(GdkPixbufAnimationIter *iter)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_iter_get_pixbuf$descriptor() {
        return gdk_pixbuf_animation_iter_get_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_animation_iter_get_pixbuf(GdkPixbufAnimationIter *iter)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_iter_get_pixbuf$handle() {
        return gdk_pixbuf_animation_iter_get_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_animation_iter_get_pixbuf(GdkPixbufAnimationIter *iter)
     * }
     */
    public static MemorySegment gdk_pixbuf_animation_iter_get_pixbuf(MemorySegment iter) {
        var mh$ = gdk_pixbuf_animation_iter_get_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_iter_get_pixbuf", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_iter_on_currently_loading_frame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_iter_on_currently_loading_frame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame(GdkPixbufAnimationIter *iter)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_iter_on_currently_loading_frame$descriptor() {
        return gdk_pixbuf_animation_iter_on_currently_loading_frame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame(GdkPixbufAnimationIter *iter)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_iter_on_currently_loading_frame$handle() {
        return gdk_pixbuf_animation_iter_on_currently_loading_frame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame(GdkPixbufAnimationIter *iter)
     * }
     */
    public static int gdk_pixbuf_animation_iter_on_currently_loading_frame(MemorySegment iter) {
        var mh$ = gdk_pixbuf_animation_iter_on_currently_loading_frame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_iter_on_currently_loading_frame", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_animation_iter_advance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_animation_iter_advance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_animation_iter_advance(GdkPixbufAnimationIter *iter, const GTimeVal *current_time)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_animation_iter_advance$descriptor() {
        return gdk_pixbuf_animation_iter_advance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_animation_iter_advance(GdkPixbufAnimationIter *iter, const GTimeVal *current_time)
     * }
     */
    public static MethodHandle gdk_pixbuf_animation_iter_advance$handle() {
        return gdk_pixbuf_animation_iter_advance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_animation_iter_advance(GdkPixbufAnimationIter *iter, const GTimeVal *current_time)
     * }
     */
    public static int gdk_pixbuf_animation_iter_advance(MemorySegment iter, MemorySegment current_time) {
        var mh$ = gdk_pixbuf_animation_iter_advance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_animation_iter_advance", iter, current_time);
            }
            return (int)mh$.invokeExact(iter, current_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_simple_anim_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_simple_anim_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_simple_anim_get_type()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_simple_anim_get_type$descriptor() {
        return gdk_pixbuf_simple_anim_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_simple_anim_get_type()
     * }
     */
    public static MethodHandle gdk_pixbuf_simple_anim_get_type$handle() {
        return gdk_pixbuf_simple_anim_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_simple_anim_get_type()
     * }
     */
    public static long gdk_pixbuf_simple_anim_get_type() {
        var mh$ = gdk_pixbuf_simple_anim_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_simple_anim_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_simple_anim_iter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_simple_anim_iter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_simple_anim_iter_get_type()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_simple_anim_iter_get_type$descriptor() {
        return gdk_pixbuf_simple_anim_iter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_simple_anim_iter_get_type()
     * }
     */
    public static MethodHandle gdk_pixbuf_simple_anim_iter_get_type$handle() {
        return gdk_pixbuf_simple_anim_iter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_simple_anim_iter_get_type()
     * }
     */
    public static long gdk_pixbuf_simple_anim_iter_get_type() {
        var mh$ = gdk_pixbuf_simple_anim_iter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_simple_anim_iter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_simple_anim_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_simple_anim_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufSimpleAnim *gdk_pixbuf_simple_anim_new(gint width, gint height, gfloat rate)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_simple_anim_new$descriptor() {
        return gdk_pixbuf_simple_anim_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufSimpleAnim *gdk_pixbuf_simple_anim_new(gint width, gint height, gfloat rate)
     * }
     */
    public static MethodHandle gdk_pixbuf_simple_anim_new$handle() {
        return gdk_pixbuf_simple_anim_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufSimpleAnim *gdk_pixbuf_simple_anim_new(gint width, gint height, gfloat rate)
     * }
     */
    public static MemorySegment gdk_pixbuf_simple_anim_new(int width, int height, float rate) {
        var mh$ = gdk_pixbuf_simple_anim_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_simple_anim_new", width, height, rate);
            }
            return (MemorySegment)mh$.invokeExact(width, height, rate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_simple_anim_add_frame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_simple_anim_add_frame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_simple_anim_add_frame(GdkPixbufSimpleAnim *animation, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_simple_anim_add_frame$descriptor() {
        return gdk_pixbuf_simple_anim_add_frame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_simple_anim_add_frame(GdkPixbufSimpleAnim *animation, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gdk_pixbuf_simple_anim_add_frame$handle() {
        return gdk_pixbuf_simple_anim_add_frame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_simple_anim_add_frame(GdkPixbufSimpleAnim *animation, GdkPixbuf *pixbuf)
     * }
     */
    public static void gdk_pixbuf_simple_anim_add_frame(MemorySegment animation, MemorySegment pixbuf) {
        var mh$ = gdk_pixbuf_simple_anim_add_frame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_simple_anim_add_frame", animation, pixbuf);
            }
            mh$.invokeExact(animation, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_simple_anim_set_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_simple_anim_set_loop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_simple_anim_set_loop(GdkPixbufSimpleAnim *animation, gboolean loop)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_simple_anim_set_loop$descriptor() {
        return gdk_pixbuf_simple_anim_set_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_simple_anim_set_loop(GdkPixbufSimpleAnim *animation, gboolean loop)
     * }
     */
    public static MethodHandle gdk_pixbuf_simple_anim_set_loop$handle() {
        return gdk_pixbuf_simple_anim_set_loop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_simple_anim_set_loop(GdkPixbufSimpleAnim *animation, gboolean loop)
     * }
     */
    public static void gdk_pixbuf_simple_anim_set_loop(MemorySegment animation, int loop) {
        var mh$ = gdk_pixbuf_simple_anim_set_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_simple_anim_set_loop", animation, loop);
            }
            mh$.invokeExact(animation, loop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_simple_anim_get_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_simple_anim_get_loop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_simple_anim_get_loop(GdkPixbufSimpleAnim *animation)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_simple_anim_get_loop$descriptor() {
        return gdk_pixbuf_simple_anim_get_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_simple_anim_get_loop(GdkPixbufSimpleAnim *animation)
     * }
     */
    public static MethodHandle gdk_pixbuf_simple_anim_get_loop$handle() {
        return gdk_pixbuf_simple_anim_get_loop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_simple_anim_get_loop(GdkPixbufSimpleAnim *animation)
     * }
     */
    public static int gdk_pixbuf_simple_anim_get_loop(MemorySegment animation) {
        var mh$ = gdk_pixbuf_simple_anim_get_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_simple_anim_get_loop", animation);
            }
            return (int)mh$.invokeExact(animation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_init_modules {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_init_modules"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_init_modules(const char *path, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_init_modules$descriptor() {
        return gdk_pixbuf_init_modules.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_init_modules(const char *path, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_init_modules$handle() {
        return gdk_pixbuf_init_modules.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_init_modules(const char *path, GError **error)
     * }
     */
    public static int gdk_pixbuf_init_modules(MemorySegment path, MemorySegment error) {
        var mh$ = gdk_pixbuf_init_modules.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_init_modules", path, error);
            }
            return (int)mh$.invokeExact(path, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_format_get_type()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_get_type$descriptor() {
        return gdk_pixbuf_format_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_format_get_type()
     * }
     */
    public static MethodHandle gdk_pixbuf_format_get_type$handle() {
        return gdk_pixbuf_format_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_format_get_type()
     * }
     */
    public static long gdk_pixbuf_format_get_type() {
        var mh$ = gdk_pixbuf_format_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_formats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_formats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gdk_pixbuf_get_formats()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_formats$descriptor() {
        return gdk_pixbuf_get_formats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gdk_pixbuf_get_formats()
     * }
     */
    public static MethodHandle gdk_pixbuf_get_formats$handle() {
        return gdk_pixbuf_get_formats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gdk_pixbuf_get_formats()
     * }
     */
    public static MemorySegment gdk_pixbuf_get_formats() {
        var mh$ = gdk_pixbuf_get_formats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_formats");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_pixbuf_format_get_name(GdkPixbufFormat *format)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_get_name$descriptor() {
        return gdk_pixbuf_format_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_pixbuf_format_get_name(GdkPixbufFormat *format)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_get_name$handle() {
        return gdk_pixbuf_format_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_pixbuf_format_get_name(GdkPixbufFormat *format)
     * }
     */
    public static MemorySegment gdk_pixbuf_format_get_name(MemorySegment format) {
        var mh$ = gdk_pixbuf_format_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_get_name", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_pixbuf_format_get_description(GdkPixbufFormat *format)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_get_description$descriptor() {
        return gdk_pixbuf_format_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_pixbuf_format_get_description(GdkPixbufFormat *format)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_get_description$handle() {
        return gdk_pixbuf_format_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_pixbuf_format_get_description(GdkPixbufFormat *format)
     * }
     */
    public static MemorySegment gdk_pixbuf_format_get_description(MemorySegment format) {
        var mh$ = gdk_pixbuf_format_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_get_description", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_get_mime_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_get_mime_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gdk_pixbuf_format_get_mime_types(GdkPixbufFormat *format)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_get_mime_types$descriptor() {
        return gdk_pixbuf_format_get_mime_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gdk_pixbuf_format_get_mime_types(GdkPixbufFormat *format)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_get_mime_types$handle() {
        return gdk_pixbuf_format_get_mime_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gdk_pixbuf_format_get_mime_types(GdkPixbufFormat *format)
     * }
     */
    public static MemorySegment gdk_pixbuf_format_get_mime_types(MemorySegment format) {
        var mh$ = gdk_pixbuf_format_get_mime_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_get_mime_types", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_get_extensions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_get_extensions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gdk_pixbuf_format_get_extensions(GdkPixbufFormat *format)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_get_extensions$descriptor() {
        return gdk_pixbuf_format_get_extensions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gdk_pixbuf_format_get_extensions(GdkPixbufFormat *format)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_get_extensions$handle() {
        return gdk_pixbuf_format_get_extensions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gdk_pixbuf_format_get_extensions(GdkPixbufFormat *format)
     * }
     */
    public static MemorySegment gdk_pixbuf_format_get_extensions(MemorySegment format) {
        var mh$ = gdk_pixbuf_format_get_extensions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_get_extensions", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_is_save_option_supported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_is_save_option_supported"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_save_option_supported(GdkPixbufFormat *format, const gchar *option_key)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_is_save_option_supported$descriptor() {
        return gdk_pixbuf_format_is_save_option_supported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_save_option_supported(GdkPixbufFormat *format, const gchar *option_key)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_is_save_option_supported$handle() {
        return gdk_pixbuf_format_is_save_option_supported.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_save_option_supported(GdkPixbufFormat *format, const gchar *option_key)
     * }
     */
    public static int gdk_pixbuf_format_is_save_option_supported(MemorySegment format, MemorySegment option_key) {
        var mh$ = gdk_pixbuf_format_is_save_option_supported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_is_save_option_supported", format, option_key);
            }
            return (int)mh$.invokeExact(format, option_key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_is_writable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_is_writable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_writable(GdkPixbufFormat *format)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_is_writable$descriptor() {
        return gdk_pixbuf_format_is_writable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_writable(GdkPixbufFormat *format)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_is_writable$handle() {
        return gdk_pixbuf_format_is_writable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_writable(GdkPixbufFormat *format)
     * }
     */
    public static int gdk_pixbuf_format_is_writable(MemorySegment format) {
        var mh$ = gdk_pixbuf_format_is_writable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_is_writable", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_is_scalable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_is_scalable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_scalable(GdkPixbufFormat *format)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_is_scalable$descriptor() {
        return gdk_pixbuf_format_is_scalable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_scalable(GdkPixbufFormat *format)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_is_scalable$handle() {
        return gdk_pixbuf_format_is_scalable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_scalable(GdkPixbufFormat *format)
     * }
     */
    public static int gdk_pixbuf_format_is_scalable(MemorySegment format) {
        var mh$ = gdk_pixbuf_format_is_scalable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_is_scalable", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_is_disabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_is_disabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_disabled(GdkPixbufFormat *format)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_is_disabled$descriptor() {
        return gdk_pixbuf_format_is_disabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_disabled(GdkPixbufFormat *format)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_is_disabled$handle() {
        return gdk_pixbuf_format_is_disabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_format_is_disabled(GdkPixbufFormat *format)
     * }
     */
    public static int gdk_pixbuf_format_is_disabled(MemorySegment format) {
        var mh$ = gdk_pixbuf_format_is_disabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_is_disabled", format);
            }
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_set_disabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_set_disabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_format_set_disabled(GdkPixbufFormat *format, gboolean disabled)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_set_disabled$descriptor() {
        return gdk_pixbuf_format_set_disabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_format_set_disabled(GdkPixbufFormat *format, gboolean disabled)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_set_disabled$handle() {
        return gdk_pixbuf_format_set_disabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_format_set_disabled(GdkPixbufFormat *format, gboolean disabled)
     * }
     */
    public static void gdk_pixbuf_format_set_disabled(MemorySegment format, int disabled) {
        var mh$ = gdk_pixbuf_format_set_disabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_set_disabled", format, disabled);
            }
            mh$.invokeExact(format, disabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_get_license {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_get_license"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_pixbuf_format_get_license(GdkPixbufFormat *format)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_get_license$descriptor() {
        return gdk_pixbuf_format_get_license.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_pixbuf_format_get_license(GdkPixbufFormat *format)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_get_license$handle() {
        return gdk_pixbuf_format_get_license.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_pixbuf_format_get_license(GdkPixbufFormat *format)
     * }
     */
    public static MemorySegment gdk_pixbuf_format_get_license(MemorySegment format) {
        var mh$ = gdk_pixbuf_format_get_license.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_get_license", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_file_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_file_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_get_file_info(const gchar *filename, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_file_info$descriptor() {
        return gdk_pixbuf_get_file_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_get_file_info(const gchar *filename, gint *width, gint *height)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_file_info$handle() {
        return gdk_pixbuf_get_file_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_get_file_info(const gchar *filename, gint *width, gint *height)
     * }
     */
    public static MemorySegment gdk_pixbuf_get_file_info(MemorySegment filename, MemorySegment width, MemorySegment height) {
        var mh$ = gdk_pixbuf_get_file_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_file_info", filename, width, height);
            }
            return (MemorySegment)mh$.invokeExact(filename, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_file_info_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_file_info_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_get_file_info_async(const gchar *filename, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_file_info_async$descriptor() {
        return gdk_pixbuf_get_file_info_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_get_file_info_async(const gchar *filename, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_file_info_async$handle() {
        return gdk_pixbuf_get_file_info_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_get_file_info_async(const gchar *filename, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void gdk_pixbuf_get_file_info_async(MemorySegment filename, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gdk_pixbuf_get_file_info_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_file_info_async", filename, cancellable, callback, user_data);
            }
            mh$.invokeExact(filename, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_file_info_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_file_info_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_get_file_info_finish(GAsyncResult *async_result, gint *width, gint *height, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_file_info_finish$descriptor() {
        return gdk_pixbuf_get_file_info_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_get_file_info_finish(GAsyncResult *async_result, gint *width, gint *height, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_file_info_finish$handle() {
        return gdk_pixbuf_get_file_info_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_get_file_info_finish(GAsyncResult *async_result, gint *width, gint *height, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_get_file_info_finish(MemorySegment async_result, MemorySegment width, MemorySegment height, MemorySegment error) {
        var mh$ = gdk_pixbuf_get_file_info_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_file_info_finish", async_result, width, height, error);
            }
            return (MemorySegment)mh$.invokeExact(async_result, width, height, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_format_copy(const GdkPixbufFormat *format)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_copy$descriptor() {
        return gdk_pixbuf_format_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_format_copy(const GdkPixbufFormat *format)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_copy$handle() {
        return gdk_pixbuf_format_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_format_copy(const GdkPixbufFormat *format)
     * }
     */
    public static MemorySegment gdk_pixbuf_format_copy(MemorySegment format) {
        var mh$ = gdk_pixbuf_format_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_copy", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_format_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_format_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_format_free(GdkPixbufFormat *format)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_format_free$descriptor() {
        return gdk_pixbuf_format_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_format_free(GdkPixbufFormat *format)
     * }
     */
    public static MethodHandle gdk_pixbuf_format_free$handle() {
        return gdk_pixbuf_format_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_format_free(GdkPixbufFormat *format)
     * }
     */
    public static void gdk_pixbuf_format_free(MemorySegment format) {
        var mh$ = gdk_pixbuf_format_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_format_free", format);
            }
            mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_loader_get_type()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_get_type$descriptor() {
        return gdk_pixbuf_loader_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_loader_get_type()
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_get_type$handle() {
        return gdk_pixbuf_loader_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_loader_get_type()
     * }
     */
    public static long gdk_pixbuf_loader_get_type() {
        var mh$ = gdk_pixbuf_loader_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufLoader *gdk_pixbuf_loader_new()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_new$descriptor() {
        return gdk_pixbuf_loader_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufLoader *gdk_pixbuf_loader_new()
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_new$handle() {
        return gdk_pixbuf_loader_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufLoader *gdk_pixbuf_loader_new()
     * }
     */
    public static MemorySegment gdk_pixbuf_loader_new() {
        var mh$ = gdk_pixbuf_loader_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_new_with_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_new_with_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufLoader *gdk_pixbuf_loader_new_with_type(const char *image_type, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_new_with_type$descriptor() {
        return gdk_pixbuf_loader_new_with_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufLoader *gdk_pixbuf_loader_new_with_type(const char *image_type, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_new_with_type$handle() {
        return gdk_pixbuf_loader_new_with_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufLoader *gdk_pixbuf_loader_new_with_type(const char *image_type, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_loader_new_with_type(MemorySegment image_type, MemorySegment error) {
        var mh$ = gdk_pixbuf_loader_new_with_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_new_with_type", image_type, error);
            }
            return (MemorySegment)mh$.invokeExact(image_type, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_new_with_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_new_with_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufLoader *gdk_pixbuf_loader_new_with_mime_type(const char *mime_type, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_new_with_mime_type$descriptor() {
        return gdk_pixbuf_loader_new_with_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufLoader *gdk_pixbuf_loader_new_with_mime_type(const char *mime_type, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_new_with_mime_type$handle() {
        return gdk_pixbuf_loader_new_with_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufLoader *gdk_pixbuf_loader_new_with_mime_type(const char *mime_type, GError **error)
     * }
     */
    public static MemorySegment gdk_pixbuf_loader_new_with_mime_type(MemorySegment mime_type, MemorySegment error) {
        var mh$ = gdk_pixbuf_loader_new_with_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_new_with_mime_type", mime_type, error);
            }
            return (MemorySegment)mh$.invokeExact(mime_type, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_loader_set_size(GdkPixbufLoader *loader, int width, int height)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_set_size$descriptor() {
        return gdk_pixbuf_loader_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pixbuf_loader_set_size(GdkPixbufLoader *loader, int width, int height)
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_set_size$handle() {
        return gdk_pixbuf_loader_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pixbuf_loader_set_size(GdkPixbufLoader *loader, int width, int height)
     * }
     */
    public static void gdk_pixbuf_loader_set_size(MemorySegment loader, int width, int height) {
        var mh$ = gdk_pixbuf_loader_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_set_size", loader, width, height);
            }
            mh$.invokeExact(loader, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_write"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_loader_write(GdkPixbufLoader *loader, const guchar *buf, gsize count, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_write$descriptor() {
        return gdk_pixbuf_loader_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_loader_write(GdkPixbufLoader *loader, const guchar *buf, gsize count, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_write$handle() {
        return gdk_pixbuf_loader_write.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_loader_write(GdkPixbufLoader *loader, const guchar *buf, gsize count, GError **error)
     * }
     */
    public static int gdk_pixbuf_loader_write(MemorySegment loader, MemorySegment buf, long count, MemorySegment error) {
        var mh$ = gdk_pixbuf_loader_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_write", loader, buf, count, error);
            }
            return (int)mh$.invokeExact(loader, buf, count, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_write_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_write_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_loader_write_bytes(GdkPixbufLoader *loader, GBytes *buffer, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_write_bytes$descriptor() {
        return gdk_pixbuf_loader_write_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_loader_write_bytes(GdkPixbufLoader *loader, GBytes *buffer, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_write_bytes$handle() {
        return gdk_pixbuf_loader_write_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_loader_write_bytes(GdkPixbufLoader *loader, GBytes *buffer, GError **error)
     * }
     */
    public static int gdk_pixbuf_loader_write_bytes(MemorySegment loader, MemorySegment buffer, MemorySegment error) {
        var mh$ = gdk_pixbuf_loader_write_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_write_bytes", loader, buffer, error);
            }
            return (int)mh$.invokeExact(loader, buffer, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_get_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_get_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_loader_get_pixbuf(GdkPixbufLoader *loader)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_get_pixbuf$descriptor() {
        return gdk_pixbuf_loader_get_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_loader_get_pixbuf(GdkPixbufLoader *loader)
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_get_pixbuf$handle() {
        return gdk_pixbuf_loader_get_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_loader_get_pixbuf(GdkPixbufLoader *loader)
     * }
     */
    public static MemorySegment gdk_pixbuf_loader_get_pixbuf(MemorySegment loader) {
        var mh$ = gdk_pixbuf_loader_get_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_get_pixbuf", loader);
            }
            return (MemorySegment)mh$.invokeExact(loader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_get_animation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_get_animation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_loader_get_animation(GdkPixbufLoader *loader)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_get_animation$descriptor() {
        return gdk_pixbuf_loader_get_animation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_loader_get_animation(GdkPixbufLoader *loader)
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_get_animation$handle() {
        return gdk_pixbuf_loader_get_animation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gdk_pixbuf_loader_get_animation(GdkPixbufLoader *loader)
     * }
     */
    public static MemorySegment gdk_pixbuf_loader_get_animation(MemorySegment loader) {
        var mh$ = gdk_pixbuf_loader_get_animation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_get_animation", loader);
            }
            return (MemorySegment)mh$.invokeExact(loader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_loader_close(GdkPixbufLoader *loader, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_close$descriptor() {
        return gdk_pixbuf_loader_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_loader_close(GdkPixbufLoader *loader, GError **error)
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_close$handle() {
        return gdk_pixbuf_loader_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pixbuf_loader_close(GdkPixbufLoader *loader, GError **error)
     * }
     */
    public static int gdk_pixbuf_loader_close(MemorySegment loader, MemorySegment error) {
        var mh$ = gdk_pixbuf_loader_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_close", loader, error);
            }
            return (int)mh$.invokeExact(loader, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_loader_get_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_loader_get_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_loader_get_format(GdkPixbufLoader *loader)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_loader_get_format$descriptor() {
        return gdk_pixbuf_loader_get_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_loader_get_format(GdkPixbufLoader *loader)
     * }
     */
    public static MethodHandle gdk_pixbuf_loader_get_format$handle() {
        return gdk_pixbuf_loader_get_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufFormat *gdk_pixbuf_loader_get_format(GdkPixbufLoader *loader)
     * }
     */
    public static MemorySegment gdk_pixbuf_loader_get_format(MemorySegment loader) {
        var mh$ = gdk_pixbuf_loader_get_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_loader_get_format", loader);
            }
            return (MemorySegment)mh$.invokeExact(loader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_alpha_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_alpha_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_alpha_mode_get_type()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_alpha_mode_get_type$descriptor() {
        return gdk_pixbuf_alpha_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_alpha_mode_get_type()
     * }
     */
    public static MethodHandle gdk_pixbuf_alpha_mode_get_type$handle() {
        return gdk_pixbuf_alpha_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_alpha_mode_get_type()
     * }
     */
    public static long gdk_pixbuf_alpha_mode_get_type() {
        var mh$ = gdk_pixbuf_alpha_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_alpha_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_colorspace_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_colorspace_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_colorspace_get_type()
     * }
     */
    public static FunctionDescriptor gdk_colorspace_get_type$descriptor() {
        return gdk_colorspace_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_colorspace_get_type()
     * }
     */
    public static MethodHandle gdk_colorspace_get_type$handle() {
        return gdk_colorspace_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_colorspace_get_type()
     * }
     */
    public static long gdk_colorspace_get_type() {
        var mh$ = gdk_colorspace_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_colorspace_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_error_get_type()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_error_get_type$descriptor() {
        return gdk_pixbuf_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_error_get_type()
     * }
     */
    public static MethodHandle gdk_pixbuf_error_get_type$handle() {
        return gdk_pixbuf_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_error_get_type()
     * }
     */
    public static long gdk_pixbuf_error_get_type() {
        var mh$ = gdk_pixbuf_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_interp_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_interp_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_interp_type_get_type()
     * }
     */
    public static FunctionDescriptor gdk_interp_type_get_type$descriptor() {
        return gdk_interp_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_interp_type_get_type()
     * }
     */
    public static MethodHandle gdk_interp_type_get_type$handle() {
        return gdk_interp_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_interp_type_get_type()
     * }
     */
    public static long gdk_interp_type_get_type() {
        var mh$ = gdk_interp_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_interp_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_rotation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_rotation_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_rotation_get_type()
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_rotation_get_type$descriptor() {
        return gdk_pixbuf_rotation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_rotation_get_type()
     * }
     */
    public static MethodHandle gdk_pixbuf_rotation_get_type$handle() {
        return gdk_pixbuf_rotation_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_pixbuf_rotation_get_type()
     * }
     */
    public static long gdk_pixbuf_rotation_get_type() {
        var mh$ = gdk_pixbuf_rotation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_rotation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GdkPixbuf *GdkPixbuf_autoptr
     * }
     */
    public static final AddressLayout GdkPixbuf_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkPixbuf_listautoptr
     * }
     */
    public static final AddressLayout GdkPixbuf_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkPixbuf_slistautoptr
     * }
     */
    public static final AddressLayout GdkPixbuf_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkPixbuf_queueautoptr
     * }
     */
    public static final AddressLayout GdkPixbuf_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkPixbufAnimation *GdkPixbufAnimation_autoptr
     * }
     */
    public static final AddressLayout GdkPixbufAnimation_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkPixbufAnimation_listautoptr
     * }
     */
    public static final AddressLayout GdkPixbufAnimation_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkPixbufAnimation_slistautoptr
     * }
     */
    public static final AddressLayout GdkPixbufAnimation_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkPixbufAnimation_queueautoptr
     * }
     */
    public static final AddressLayout GdkPixbufAnimation_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkPixbufAnimationIter *GdkPixbufAnimationIter_autoptr
     * }
     */
    public static final AddressLayout GdkPixbufAnimationIter_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkPixbufAnimationIter_listautoptr
     * }
     */
    public static final AddressLayout GdkPixbufAnimationIter_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkPixbufAnimationIter_slistautoptr
     * }
     */
    public static final AddressLayout GdkPixbufAnimationIter_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkPixbufAnimationIter_queueautoptr
     * }
     */
    public static final AddressLayout GdkPixbufAnimationIter_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkPixbufLoader *GdkPixbufLoader_autoptr
     * }
     */
    public static final AddressLayout GdkPixbufLoader_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkPixbufLoader_listautoptr
     * }
     */
    public static final AddressLayout GdkPixbufLoader_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkPixbufLoader_slistautoptr
     * }
     */
    public static final AddressLayout GdkPixbufLoader_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkPixbufLoader_queueautoptr
     * }
     */
    public static final AddressLayout GdkPixbufLoader_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkPixbufSimpleAnim *GdkPixbufSimpleAnim_autoptr
     * }
     */
    public static final AddressLayout GdkPixbufSimpleAnim_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkPixbufSimpleAnim_listautoptr
     * }
     */
    public static final AddressLayout GdkPixbufSimpleAnim_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkPixbufSimpleAnim_slistautoptr
     * }
     */
    public static final AddressLayout GdkPixbufSimpleAnim_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkPixbufSimpleAnim_queueautoptr
     * }
     */
    public static final AddressLayout GdkPixbufSimpleAnim_queueautoptr = app_indicator_h.C_POINTER;

    private static class gdk_pixbuf_get_from_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_from_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_get_from_window(GdkWindow *window, gint src_x, gint src_y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_from_window$descriptor() {
        return gdk_pixbuf_get_from_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_get_from_window(GdkWindow *window, gint src_x, gint src_y, gint width, gint height)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_from_window$handle() {
        return gdk_pixbuf_get_from_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_get_from_window(GdkWindow *window, gint src_x, gint src_y, gint width, gint height)
     * }
     */
    public static MemorySegment gdk_pixbuf_get_from_window(MemorySegment window, int src_x, int src_y, int width, int height) {
        var mh$ = gdk_pixbuf_get_from_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_from_window", window, src_x, src_y, width, height);
            }
            return (MemorySegment)mh$.invokeExact(window, src_x, src_y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pixbuf_get_from_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pixbuf_get_from_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_get_from_surface(cairo_surface_t *surface, gint src_x, gint src_y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gdk_pixbuf_get_from_surface$descriptor() {
        return gdk_pixbuf_get_from_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_get_from_surface(cairo_surface_t *surface, gint src_x, gint src_y, gint width, gint height)
     * }
     */
    public static MethodHandle gdk_pixbuf_get_from_surface$handle() {
        return gdk_pixbuf_get_from_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_pixbuf_get_from_surface(cairo_surface_t *surface, gint src_x, gint src_y, gint width, gint height)
     * }
     */
    public static MemorySegment gdk_pixbuf_get_from_surface(MemorySegment surface, int src_x, int src_y, int width, int height) {
        var mh$ = gdk_pixbuf_get_from_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pixbuf_get_from_surface", surface, src_x, src_y, width, height);
            }
            return (MemorySegment)mh$.invokeExact(surface, src_x, src_y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_map_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_map_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_cairo_font_map_get_type()
     * }
     */
    public static FunctionDescriptor pango_cairo_font_map_get_type$descriptor() {
        return pango_cairo_font_map_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_cairo_font_map_get_type()
     * }
     */
    public static MethodHandle pango_cairo_font_map_get_type$handle() {
        return pango_cairo_font_map_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_cairo_font_map_get_type()
     * }
     */
    public static long pango_cairo_font_map_get_type() {
        var mh$ = pango_cairo_font_map_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_map_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_map_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_map_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMap *pango_cairo_font_map_new()
     * }
     */
    public static FunctionDescriptor pango_cairo_font_map_new$descriptor() {
        return pango_cairo_font_map_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMap *pango_cairo_font_map_new()
     * }
     */
    public static MethodHandle pango_cairo_font_map_new$handle() {
        return pango_cairo_font_map_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMap *pango_cairo_font_map_new()
     * }
     */
    public static MemorySegment pango_cairo_font_map_new() {
        var mh$ = pango_cairo_font_map_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_map_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_map_new_for_font_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_map_new_for_font_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMap *pango_cairo_font_map_new_for_font_type(cairo_font_type_t fonttype)
     * }
     */
    public static FunctionDescriptor pango_cairo_font_map_new_for_font_type$descriptor() {
        return pango_cairo_font_map_new_for_font_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMap *pango_cairo_font_map_new_for_font_type(cairo_font_type_t fonttype)
     * }
     */
    public static MethodHandle pango_cairo_font_map_new_for_font_type$handle() {
        return pango_cairo_font_map_new_for_font_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMap *pango_cairo_font_map_new_for_font_type(cairo_font_type_t fonttype)
     * }
     */
    public static MemorySegment pango_cairo_font_map_new_for_font_type(int fonttype) {
        var mh$ = pango_cairo_font_map_new_for_font_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_map_new_for_font_type", fonttype);
            }
            return (MemorySegment)mh$.invokeExact(fonttype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_map_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_map_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMap *pango_cairo_font_map_get_default()
     * }
     */
    public static FunctionDescriptor pango_cairo_font_map_get_default$descriptor() {
        return pango_cairo_font_map_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMap *pango_cairo_font_map_get_default()
     * }
     */
    public static MethodHandle pango_cairo_font_map_get_default$handle() {
        return pango_cairo_font_map_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMap *pango_cairo_font_map_get_default()
     * }
     */
    public static MemorySegment pango_cairo_font_map_get_default() {
        var mh$ = pango_cairo_font_map_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_map_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_map_set_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_map_set_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_font_map_set_default(PangoCairoFontMap *fontmap)
     * }
     */
    public static FunctionDescriptor pango_cairo_font_map_set_default$descriptor() {
        return pango_cairo_font_map_set_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_font_map_set_default(PangoCairoFontMap *fontmap)
     * }
     */
    public static MethodHandle pango_cairo_font_map_set_default$handle() {
        return pango_cairo_font_map_set_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_font_map_set_default(PangoCairoFontMap *fontmap)
     * }
     */
    public static void pango_cairo_font_map_set_default(MemorySegment fontmap) {
        var mh$ = pango_cairo_font_map_set_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_map_set_default", fontmap);
            }
            mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_map_get_font_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_map_get_font_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_type_t pango_cairo_font_map_get_font_type(PangoCairoFontMap *fontmap)
     * }
     */
    public static FunctionDescriptor pango_cairo_font_map_get_font_type$descriptor() {
        return pango_cairo_font_map_get_font_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_type_t pango_cairo_font_map_get_font_type(PangoCairoFontMap *fontmap)
     * }
     */
    public static MethodHandle pango_cairo_font_map_get_font_type$handle() {
        return pango_cairo_font_map_get_font_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_type_t pango_cairo_font_map_get_font_type(PangoCairoFontMap *fontmap)
     * }
     */
    public static int pango_cairo_font_map_get_font_type(MemorySegment fontmap) {
        var mh$ = pango_cairo_font_map_get_font_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_map_get_font_type", fontmap);
            }
            return (int)mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_map_set_resolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_map_set_resolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_font_map_set_resolution(PangoCairoFontMap *fontmap, double dpi)
     * }
     */
    public static FunctionDescriptor pango_cairo_font_map_set_resolution$descriptor() {
        return pango_cairo_font_map_set_resolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_font_map_set_resolution(PangoCairoFontMap *fontmap, double dpi)
     * }
     */
    public static MethodHandle pango_cairo_font_map_set_resolution$handle() {
        return pango_cairo_font_map_set_resolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_font_map_set_resolution(PangoCairoFontMap *fontmap, double dpi)
     * }
     */
    public static void pango_cairo_font_map_set_resolution(MemorySegment fontmap, double dpi) {
        var mh$ = pango_cairo_font_map_set_resolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_map_set_resolution", fontmap, dpi);
            }
            mh$.invokeExact(fontmap, dpi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_map_get_resolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_map_get_resolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double pango_cairo_font_map_get_resolution(PangoCairoFontMap *fontmap)
     * }
     */
    public static FunctionDescriptor pango_cairo_font_map_get_resolution$descriptor() {
        return pango_cairo_font_map_get_resolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double pango_cairo_font_map_get_resolution(PangoCairoFontMap *fontmap)
     * }
     */
    public static MethodHandle pango_cairo_font_map_get_resolution$handle() {
        return pango_cairo_font_map_get_resolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double pango_cairo_font_map_get_resolution(PangoCairoFontMap *fontmap)
     * }
     */
    public static double pango_cairo_font_map_get_resolution(MemorySegment fontmap) {
        var mh$ = pango_cairo_font_map_get_resolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_map_get_resolution", fontmap);
            }
            return (double)mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_map_create_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_map_create_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *pango_cairo_font_map_create_context(PangoCairoFontMap *fontmap)
     * }
     */
    public static FunctionDescriptor pango_cairo_font_map_create_context$descriptor() {
        return pango_cairo_font_map_create_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *pango_cairo_font_map_create_context(PangoCairoFontMap *fontmap)
     * }
     */
    public static MethodHandle pango_cairo_font_map_create_context$handle() {
        return pango_cairo_font_map_create_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *pango_cairo_font_map_create_context(PangoCairoFontMap *fontmap)
     * }
     */
    public static MemorySegment pango_cairo_font_map_create_context(MemorySegment fontmap) {
        var mh$ = pango_cairo_font_map_create_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_map_create_context", fontmap);
            }
            return (MemorySegment)mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_cairo_font_get_type()
     * }
     */
    public static FunctionDescriptor pango_cairo_font_get_type$descriptor() {
        return pango_cairo_font_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_cairo_font_get_type()
     * }
     */
    public static MethodHandle pango_cairo_font_get_type$handle() {
        return pango_cairo_font_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_cairo_font_get_type()
     * }
     */
    public static long pango_cairo_font_get_type() {
        var mh$ = pango_cairo_font_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_font_get_scaled_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_font_get_scaled_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *pango_cairo_font_get_scaled_font(PangoCairoFont *font)
     * }
     */
    public static FunctionDescriptor pango_cairo_font_get_scaled_font$descriptor() {
        return pango_cairo_font_get_scaled_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *pango_cairo_font_get_scaled_font(PangoCairoFont *font)
     * }
     */
    public static MethodHandle pango_cairo_font_get_scaled_font$handle() {
        return pango_cairo_font_get_scaled_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *pango_cairo_font_get_scaled_font(PangoCairoFont *font)
     * }
     */
    public static MemorySegment pango_cairo_font_get_scaled_font(MemorySegment font) {
        var mh$ = pango_cairo_font_get_scaled_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_font_get_scaled_font", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_update_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_update_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_update_context(cairo_t *cr, PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_cairo_update_context$descriptor() {
        return pango_cairo_update_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_update_context(cairo_t *cr, PangoContext *context)
     * }
     */
    public static MethodHandle pango_cairo_update_context$handle() {
        return pango_cairo_update_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_update_context(cairo_t *cr, PangoContext *context)
     * }
     */
    public static void pango_cairo_update_context(MemorySegment cr, MemorySegment context) {
        var mh$ = pango_cairo_update_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_update_context", cr, context);
            }
            mh$.invokeExact(cr, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_context_set_font_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_context_set_font_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_context_set_font_options(PangoContext *context, const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor pango_cairo_context_set_font_options$descriptor() {
        return pango_cairo_context_set_font_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_context_set_font_options(PangoContext *context, const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle pango_cairo_context_set_font_options$handle() {
        return pango_cairo_context_set_font_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_context_set_font_options(PangoContext *context, const cairo_font_options_t *options)
     * }
     */
    public static void pango_cairo_context_set_font_options(MemorySegment context, MemorySegment options) {
        var mh$ = pango_cairo_context_set_font_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_context_set_font_options", context, options);
            }
            mh$.invokeExact(context, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_context_get_font_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_context_get_font_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const cairo_font_options_t *pango_cairo_context_get_font_options(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_cairo_context_get_font_options$descriptor() {
        return pango_cairo_context_get_font_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const cairo_font_options_t *pango_cairo_context_get_font_options(PangoContext *context)
     * }
     */
    public static MethodHandle pango_cairo_context_get_font_options$handle() {
        return pango_cairo_context_get_font_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const cairo_font_options_t *pango_cairo_context_get_font_options(PangoContext *context)
     * }
     */
    public static MemorySegment pango_cairo_context_get_font_options(MemorySegment context) {
        var mh$ = pango_cairo_context_get_font_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_context_get_font_options", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_context_set_resolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_context_set_resolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_context_set_resolution(PangoContext *context, double dpi)
     * }
     */
    public static FunctionDescriptor pango_cairo_context_set_resolution$descriptor() {
        return pango_cairo_context_set_resolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_context_set_resolution(PangoContext *context, double dpi)
     * }
     */
    public static MethodHandle pango_cairo_context_set_resolution$handle() {
        return pango_cairo_context_set_resolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_context_set_resolution(PangoContext *context, double dpi)
     * }
     */
    public static void pango_cairo_context_set_resolution(MemorySegment context, double dpi) {
        var mh$ = pango_cairo_context_set_resolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_context_set_resolution", context, dpi);
            }
            mh$.invokeExact(context, dpi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_context_get_resolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_context_get_resolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double pango_cairo_context_get_resolution(PangoContext *context)
     * }
     */
    public static FunctionDescriptor pango_cairo_context_get_resolution$descriptor() {
        return pango_cairo_context_get_resolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double pango_cairo_context_get_resolution(PangoContext *context)
     * }
     */
    public static MethodHandle pango_cairo_context_get_resolution$handle() {
        return pango_cairo_context_get_resolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double pango_cairo_context_get_resolution(PangoContext *context)
     * }
     */
    public static double pango_cairo_context_get_resolution(MemorySegment context) {
        var mh$ = pango_cairo_context_get_resolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_context_get_resolution", context);
            }
            return (double)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_context_set_shape_renderer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_context_set_shape_renderer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_context_set_shape_renderer(PangoContext *context, PangoCairoShapeRendererFunc func, gpointer data, GDestroyNotify dnotify)
     * }
     */
    public static FunctionDescriptor pango_cairo_context_set_shape_renderer$descriptor() {
        return pango_cairo_context_set_shape_renderer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_context_set_shape_renderer(PangoContext *context, PangoCairoShapeRendererFunc func, gpointer data, GDestroyNotify dnotify)
     * }
     */
    public static MethodHandle pango_cairo_context_set_shape_renderer$handle() {
        return pango_cairo_context_set_shape_renderer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_context_set_shape_renderer(PangoContext *context, PangoCairoShapeRendererFunc func, gpointer data, GDestroyNotify dnotify)
     * }
     */
    public static void pango_cairo_context_set_shape_renderer(MemorySegment context, MemorySegment func, MemorySegment data, MemorySegment dnotify) {
        var mh$ = pango_cairo_context_set_shape_renderer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_context_set_shape_renderer", context, func, data, dnotify);
            }
            mh$.invokeExact(context, func, data, dnotify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_context_get_shape_renderer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_context_get_shape_renderer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoCairoShapeRendererFunc pango_cairo_context_get_shape_renderer(PangoContext *context, gpointer *data)
     * }
     */
    public static FunctionDescriptor pango_cairo_context_get_shape_renderer$descriptor() {
        return pango_cairo_context_get_shape_renderer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoCairoShapeRendererFunc pango_cairo_context_get_shape_renderer(PangoContext *context, gpointer *data)
     * }
     */
    public static MethodHandle pango_cairo_context_get_shape_renderer$handle() {
        return pango_cairo_context_get_shape_renderer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoCairoShapeRendererFunc pango_cairo_context_get_shape_renderer(PangoContext *context, gpointer *data)
     * }
     */
    public static MemorySegment pango_cairo_context_get_shape_renderer(MemorySegment context, MemorySegment data) {
        var mh$ = pango_cairo_context_get_shape_renderer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_context_get_shape_renderer", context, data);
            }
            return (MemorySegment)mh$.invokeExact(context, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_create_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_create_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *pango_cairo_create_context(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor pango_cairo_create_context$descriptor() {
        return pango_cairo_create_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *pango_cairo_create_context(cairo_t *cr)
     * }
     */
    public static MethodHandle pango_cairo_create_context$handle() {
        return pango_cairo_create_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *pango_cairo_create_context(cairo_t *cr)
     * }
     */
    public static MemorySegment pango_cairo_create_context(MemorySegment cr) {
        var mh$ = pango_cairo_create_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_create_context", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_create_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_create_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_cairo_create_layout(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor pango_cairo_create_layout$descriptor() {
        return pango_cairo_create_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *pango_cairo_create_layout(cairo_t *cr)
     * }
     */
    public static MethodHandle pango_cairo_create_layout$handle() {
        return pango_cairo_create_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *pango_cairo_create_layout(cairo_t *cr)
     * }
     */
    public static MemorySegment pango_cairo_create_layout(MemorySegment cr) {
        var mh$ = pango_cairo_create_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_create_layout", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_update_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_update_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_update_layout(cairo_t *cr, PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_cairo_update_layout$descriptor() {
        return pango_cairo_update_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_update_layout(cairo_t *cr, PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_cairo_update_layout$handle() {
        return pango_cairo_update_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_update_layout(cairo_t *cr, PangoLayout *layout)
     * }
     */
    public static void pango_cairo_update_layout(MemorySegment cr, MemorySegment layout) {
        var mh$ = pango_cairo_update_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_update_layout", cr, layout);
            }
            mh$.invokeExact(cr, layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_show_glyph_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_show_glyph_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_show_glyph_string(cairo_t *cr, PangoFont *font, PangoGlyphString *glyphs)
     * }
     */
    public static FunctionDescriptor pango_cairo_show_glyph_string$descriptor() {
        return pango_cairo_show_glyph_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_show_glyph_string(cairo_t *cr, PangoFont *font, PangoGlyphString *glyphs)
     * }
     */
    public static MethodHandle pango_cairo_show_glyph_string$handle() {
        return pango_cairo_show_glyph_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_show_glyph_string(cairo_t *cr, PangoFont *font, PangoGlyphString *glyphs)
     * }
     */
    public static void pango_cairo_show_glyph_string(MemorySegment cr, MemorySegment font, MemorySegment glyphs) {
        var mh$ = pango_cairo_show_glyph_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_show_glyph_string", cr, font, glyphs);
            }
            mh$.invokeExact(cr, font, glyphs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_show_glyph_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_show_glyph_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_show_glyph_item(cairo_t *cr, const char *text, PangoGlyphItem *glyph_item)
     * }
     */
    public static FunctionDescriptor pango_cairo_show_glyph_item$descriptor() {
        return pango_cairo_show_glyph_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_show_glyph_item(cairo_t *cr, const char *text, PangoGlyphItem *glyph_item)
     * }
     */
    public static MethodHandle pango_cairo_show_glyph_item$handle() {
        return pango_cairo_show_glyph_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_show_glyph_item(cairo_t *cr, const char *text, PangoGlyphItem *glyph_item)
     * }
     */
    public static void pango_cairo_show_glyph_item(MemorySegment cr, MemorySegment text, MemorySegment glyph_item) {
        var mh$ = pango_cairo_show_glyph_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_show_glyph_item", cr, text, glyph_item);
            }
            mh$.invokeExact(cr, text, glyph_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_show_layout_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_show_layout_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_show_layout_line(cairo_t *cr, PangoLayoutLine *line)
     * }
     */
    public static FunctionDescriptor pango_cairo_show_layout_line$descriptor() {
        return pango_cairo_show_layout_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_show_layout_line(cairo_t *cr, PangoLayoutLine *line)
     * }
     */
    public static MethodHandle pango_cairo_show_layout_line$handle() {
        return pango_cairo_show_layout_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_show_layout_line(cairo_t *cr, PangoLayoutLine *line)
     * }
     */
    public static void pango_cairo_show_layout_line(MemorySegment cr, MemorySegment line) {
        var mh$ = pango_cairo_show_layout_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_show_layout_line", cr, line);
            }
            mh$.invokeExact(cr, line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_show_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_show_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_show_layout(cairo_t *cr, PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_cairo_show_layout$descriptor() {
        return pango_cairo_show_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_show_layout(cairo_t *cr, PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_cairo_show_layout$handle() {
        return pango_cairo_show_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_show_layout(cairo_t *cr, PangoLayout *layout)
     * }
     */
    public static void pango_cairo_show_layout(MemorySegment cr, MemorySegment layout) {
        var mh$ = pango_cairo_show_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_show_layout", cr, layout);
            }
            mh$.invokeExact(cr, layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_show_error_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_show_error_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_show_error_underline(cairo_t *cr, double x, double y, double width, double height)
     * }
     */
    public static FunctionDescriptor pango_cairo_show_error_underline$descriptor() {
        return pango_cairo_show_error_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_show_error_underline(cairo_t *cr, double x, double y, double width, double height)
     * }
     */
    public static MethodHandle pango_cairo_show_error_underline$handle() {
        return pango_cairo_show_error_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_show_error_underline(cairo_t *cr, double x, double y, double width, double height)
     * }
     */
    public static void pango_cairo_show_error_underline(MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = pango_cairo_show_error_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_show_error_underline", cr, x, y, width, height);
            }
            mh$.invokeExact(cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_glyph_string_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_glyph_string_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_glyph_string_path(cairo_t *cr, PangoFont *font, PangoGlyphString *glyphs)
     * }
     */
    public static FunctionDescriptor pango_cairo_glyph_string_path$descriptor() {
        return pango_cairo_glyph_string_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_glyph_string_path(cairo_t *cr, PangoFont *font, PangoGlyphString *glyphs)
     * }
     */
    public static MethodHandle pango_cairo_glyph_string_path$handle() {
        return pango_cairo_glyph_string_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_glyph_string_path(cairo_t *cr, PangoFont *font, PangoGlyphString *glyphs)
     * }
     */
    public static void pango_cairo_glyph_string_path(MemorySegment cr, MemorySegment font, MemorySegment glyphs) {
        var mh$ = pango_cairo_glyph_string_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_glyph_string_path", cr, font, glyphs);
            }
            mh$.invokeExact(cr, font, glyphs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_layout_line_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_layout_line_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_layout_line_path(cairo_t *cr, PangoLayoutLine *line)
     * }
     */
    public static FunctionDescriptor pango_cairo_layout_line_path$descriptor() {
        return pango_cairo_layout_line_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_layout_line_path(cairo_t *cr, PangoLayoutLine *line)
     * }
     */
    public static MethodHandle pango_cairo_layout_line_path$handle() {
        return pango_cairo_layout_line_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_layout_line_path(cairo_t *cr, PangoLayoutLine *line)
     * }
     */
    public static void pango_cairo_layout_line_path(MemorySegment cr, MemorySegment line) {
        var mh$ = pango_cairo_layout_line_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_layout_line_path", cr, line);
            }
            mh$.invokeExact(cr, line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_layout_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_layout_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_layout_path(cairo_t *cr, PangoLayout *layout)
     * }
     */
    public static FunctionDescriptor pango_cairo_layout_path$descriptor() {
        return pango_cairo_layout_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_layout_path(cairo_t *cr, PangoLayout *layout)
     * }
     */
    public static MethodHandle pango_cairo_layout_path$handle() {
        return pango_cairo_layout_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_layout_path(cairo_t *cr, PangoLayout *layout)
     * }
     */
    public static void pango_cairo_layout_path(MemorySegment cr, MemorySegment layout) {
        var mh$ = pango_cairo_layout_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_layout_path", cr, layout);
            }
            mh$.invokeExact(cr, layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_cairo_error_underline_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_cairo_error_underline_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_cairo_error_underline_path(cairo_t *cr, double x, double y, double width, double height)
     * }
     */
    public static FunctionDescriptor pango_cairo_error_underline_path$descriptor() {
        return pango_cairo_error_underline_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_cairo_error_underline_path(cairo_t *cr, double x, double y, double width, double height)
     * }
     */
    public static MethodHandle pango_cairo_error_underline_path$handle() {
        return pango_cairo_error_underline_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_cairo_error_underline_path(cairo_t *cr, double x, double y, double width, double height)
     * }
     */
    public static void pango_cairo_error_underline_path(MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = pango_cairo_error_underline_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_cairo_error_underline_path", cr, x, y, width, height);
            }
            mh$.invokeExact(cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_t *gdk_cairo_create(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_cairo_create$descriptor() {
        return gdk_cairo_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_t *gdk_cairo_create(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_cairo_create$handle() {
        return gdk_cairo_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_t *gdk_cairo_create(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_cairo_create(MemorySegment window) {
        var mh$ = gdk_cairo_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_create", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_get_clip_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_get_clip_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_cairo_get_clip_rectangle(cairo_t *cr, GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gdk_cairo_get_clip_rectangle$descriptor() {
        return gdk_cairo_get_clip_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_cairo_get_clip_rectangle(cairo_t *cr, GdkRectangle *rect)
     * }
     */
    public static MethodHandle gdk_cairo_get_clip_rectangle$handle() {
        return gdk_cairo_get_clip_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_cairo_get_clip_rectangle(cairo_t *cr, GdkRectangle *rect)
     * }
     */
    public static int gdk_cairo_get_clip_rectangle(MemorySegment cr, MemorySegment rect) {
        var mh$ = gdk_cairo_get_clip_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_get_clip_rectangle", cr, rect);
            }
            return (int)mh$.invokeExact(cr, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_set_source_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_set_source_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_rgba(cairo_t *cr, const GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gdk_cairo_set_source_rgba$descriptor() {
        return gdk_cairo_set_source_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_rgba(cairo_t *cr, const GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gdk_cairo_set_source_rgba$handle() {
        return gdk_cairo_set_source_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_rgba(cairo_t *cr, const GdkRGBA *rgba)
     * }
     */
    public static void gdk_cairo_set_source_rgba(MemorySegment cr, MemorySegment rgba) {
        var mh$ = gdk_cairo_set_source_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_set_source_rgba", cr, rgba);
            }
            mh$.invokeExact(cr, rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_set_source_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_set_source_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_pixbuf(cairo_t *cr, const GdkPixbuf *pixbuf, gdouble pixbuf_x, gdouble pixbuf_y)
     * }
     */
    public static FunctionDescriptor gdk_cairo_set_source_pixbuf$descriptor() {
        return gdk_cairo_set_source_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_pixbuf(cairo_t *cr, const GdkPixbuf *pixbuf, gdouble pixbuf_x, gdouble pixbuf_y)
     * }
     */
    public static MethodHandle gdk_cairo_set_source_pixbuf$handle() {
        return gdk_cairo_set_source_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_pixbuf(cairo_t *cr, const GdkPixbuf *pixbuf, gdouble pixbuf_x, gdouble pixbuf_y)
     * }
     */
    public static void gdk_cairo_set_source_pixbuf(MemorySegment cr, MemorySegment pixbuf, double pixbuf_x, double pixbuf_y) {
        var mh$ = gdk_cairo_set_source_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_set_source_pixbuf", cr, pixbuf, pixbuf_x, pixbuf_y);
            }
            mh$.invokeExact(cr, pixbuf, pixbuf_x, pixbuf_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_set_source_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_set_source_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_window(cairo_t *cr, GdkWindow *window, gdouble x, gdouble y)
     * }
     */
    public static FunctionDescriptor gdk_cairo_set_source_window$descriptor() {
        return gdk_cairo_set_source_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_window(cairo_t *cr, GdkWindow *window, gdouble x, gdouble y)
     * }
     */
    public static MethodHandle gdk_cairo_set_source_window$handle() {
        return gdk_cairo_set_source_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_window(cairo_t *cr, GdkWindow *window, gdouble x, gdouble y)
     * }
     */
    public static void gdk_cairo_set_source_window(MemorySegment cr, MemorySegment window, double x, double y) {
        var mh$ = gdk_cairo_set_source_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_set_source_window", cr, window, x, y);
            }
            mh$.invokeExact(cr, window, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_cairo_rectangle(cairo_t *cr, const GdkRectangle *rectangle)
     * }
     */
    public static FunctionDescriptor gdk_cairo_rectangle$descriptor() {
        return gdk_cairo_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_cairo_rectangle(cairo_t *cr, const GdkRectangle *rectangle)
     * }
     */
    public static MethodHandle gdk_cairo_rectangle$handle() {
        return gdk_cairo_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_cairo_rectangle(cairo_t *cr, const GdkRectangle *rectangle)
     * }
     */
    public static void gdk_cairo_rectangle(MemorySegment cr, MemorySegment rectangle) {
        var mh$ = gdk_cairo_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_rectangle", cr, rectangle);
            }
            mh$.invokeExact(cr, rectangle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_cairo_region(cairo_t *cr, const cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor gdk_cairo_region$descriptor() {
        return gdk_cairo_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_cairo_region(cairo_t *cr, const cairo_region_t *region)
     * }
     */
    public static MethodHandle gdk_cairo_region$handle() {
        return gdk_cairo_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_cairo_region(cairo_t *cr, const cairo_region_t *region)
     * }
     */
    public static void gdk_cairo_region(MemorySegment cr, MemorySegment region) {
        var mh$ = gdk_cairo_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_region", cr, region);
            }
            mh$.invokeExact(cr, region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_region_create_from_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_region_create_from_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_cairo_region_create_from_surface(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor gdk_cairo_region_create_from_surface$descriptor() {
        return gdk_cairo_region_create_from_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_cairo_region_create_from_surface(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle gdk_cairo_region_create_from_surface$handle() {
        return gdk_cairo_region_create_from_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_cairo_region_create_from_surface(cairo_surface_t *surface)
     * }
     */
    public static MemorySegment gdk_cairo_region_create_from_surface(MemorySegment surface) {
        var mh$ = gdk_cairo_region_create_from_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_region_create_from_surface", surface);
            }
            return (MemorySegment)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_set_source_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_set_source_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_color(cairo_t *cr, const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gdk_cairo_set_source_color$descriptor() {
        return gdk_cairo_set_source_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_color(cairo_t *cr, const GdkColor *color)
     * }
     */
    public static MethodHandle gdk_cairo_set_source_color$handle() {
        return gdk_cairo_set_source_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_cairo_set_source_color(cairo_t *cr, const GdkColor *color)
     * }
     */
    public static void gdk_cairo_set_source_color(MemorySegment cr, MemorySegment color) {
        var mh$ = gdk_cairo_set_source_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_set_source_color", cr, color);
            }
            mh$.invokeExact(cr, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_surface_create_from_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_surface_create_from_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_cairo_surface_create_from_pixbuf(const GdkPixbuf *pixbuf, int scale, GdkWindow *for_window)
     * }
     */
    public static FunctionDescriptor gdk_cairo_surface_create_from_pixbuf$descriptor() {
        return gdk_cairo_surface_create_from_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_cairo_surface_create_from_pixbuf(const GdkPixbuf *pixbuf, int scale, GdkWindow *for_window)
     * }
     */
    public static MethodHandle gdk_cairo_surface_create_from_pixbuf$handle() {
        return gdk_cairo_surface_create_from_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_cairo_surface_create_from_pixbuf(const GdkPixbuf *pixbuf, int scale, GdkWindow *for_window)
     * }
     */
    public static MemorySegment gdk_cairo_surface_create_from_pixbuf(MemorySegment pixbuf, int scale, MemorySegment for_window) {
        var mh$ = gdk_cairo_surface_create_from_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_surface_create_from_pixbuf", pixbuf, scale, for_window);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf, scale, for_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_draw_from_gl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_draw_from_gl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_cairo_draw_from_gl(cairo_t *cr, GdkWindow *window, int source, int source_type, int buffer_scale, int x, int y, int width, int height)
     * }
     */
    public static FunctionDescriptor gdk_cairo_draw_from_gl$descriptor() {
        return gdk_cairo_draw_from_gl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_cairo_draw_from_gl(cairo_t *cr, GdkWindow *window, int source, int source_type, int buffer_scale, int x, int y, int width, int height)
     * }
     */
    public static MethodHandle gdk_cairo_draw_from_gl$handle() {
        return gdk_cairo_draw_from_gl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_cairo_draw_from_gl(cairo_t *cr, GdkWindow *window, int source, int source_type, int buffer_scale, int x, int y, int width, int height)
     * }
     */
    public static void gdk_cairo_draw_from_gl(MemorySegment cr, MemorySegment window, int source, int source_type, int buffer_scale, int x, int y, int width, int height) {
        var mh$ = gdk_cairo_draw_from_gl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_draw_from_gl", cr, window, source, source_type, buffer_scale, x, y, width, height);
            }
            mh$.invokeExact(cr, window, source, source_type, buffer_scale, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cairo_get_drawing_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cairo_get_drawing_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDrawingContext *gdk_cairo_get_drawing_context(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor gdk_cairo_get_drawing_context$descriptor() {
        return gdk_cairo_get_drawing_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDrawingContext *gdk_cairo_get_drawing_context(cairo_t *cr)
     * }
     */
    public static MethodHandle gdk_cairo_get_drawing_context$handle() {
        return gdk_cairo_get_drawing_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDrawingContext *gdk_cairo_get_drawing_context(cairo_t *cr)
     * }
     */
    public static MemorySegment gdk_cairo_get_drawing_context(MemorySegment cr) {
        var mh$ = gdk_cairo_get_drawing_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cairo_get_drawing_context", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_X_CURSOR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_X_CURSOR = 0
     * }
     */
    public static int GDK_X_CURSOR() {
        return GDK_X_CURSOR;
    }
    private static final int GDK_ARROW = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ARROW = 2
     * }
     */
    public static int GDK_ARROW() {
        return GDK_ARROW;
    }
    private static final int GDK_BASED_ARROW_DOWN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BASED_ARROW_DOWN = 4
     * }
     */
    public static int GDK_BASED_ARROW_DOWN() {
        return GDK_BASED_ARROW_DOWN;
    }
    private static final int GDK_BASED_ARROW_UP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BASED_ARROW_UP = 6
     * }
     */
    public static int GDK_BASED_ARROW_UP() {
        return GDK_BASED_ARROW_UP;
    }
    private static final int GDK_BOAT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BOAT = 8
     * }
     */
    public static int GDK_BOAT() {
        return GDK_BOAT;
    }
    private static final int GDK_BOGOSITY = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BOGOSITY = 10
     * }
     */
    public static int GDK_BOGOSITY() {
        return GDK_BOGOSITY;
    }
    private static final int GDK_BOTTOM_LEFT_CORNER = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BOTTOM_LEFT_CORNER = 12
     * }
     */
    public static int GDK_BOTTOM_LEFT_CORNER() {
        return GDK_BOTTOM_LEFT_CORNER;
    }
    private static final int GDK_BOTTOM_RIGHT_CORNER = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BOTTOM_RIGHT_CORNER = 14
     * }
     */
    public static int GDK_BOTTOM_RIGHT_CORNER() {
        return GDK_BOTTOM_RIGHT_CORNER;
    }
    private static final int GDK_BOTTOM_SIDE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BOTTOM_SIDE = 16
     * }
     */
    public static int GDK_BOTTOM_SIDE() {
        return GDK_BOTTOM_SIDE;
    }
    private static final int GDK_BOTTOM_TEE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BOTTOM_TEE = 18
     * }
     */
    public static int GDK_BOTTOM_TEE() {
        return GDK_BOTTOM_TEE;
    }
    private static final int GDK_BOX_SPIRAL = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BOX_SPIRAL = 20
     * }
     */
    public static int GDK_BOX_SPIRAL() {
        return GDK_BOX_SPIRAL;
    }
    private static final int GDK_CENTER_PTR = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CENTER_PTR = 22
     * }
     */
    public static int GDK_CENTER_PTR() {
        return GDK_CENTER_PTR;
    }
    private static final int GDK_CIRCLE = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CIRCLE = 24
     * }
     */
    public static int GDK_CIRCLE() {
        return GDK_CIRCLE;
    }
    private static final int GDK_CLOCK = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CLOCK = 26
     * }
     */
    public static int GDK_CLOCK() {
        return GDK_CLOCK;
    }
    private static final int GDK_COFFEE_MUG = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_COFFEE_MUG = 28
     * }
     */
    public static int GDK_COFFEE_MUG() {
        return GDK_COFFEE_MUG;
    }
    private static final int GDK_CROSS = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSS = 30
     * }
     */
    public static int GDK_CROSS() {
        return GDK_CROSS;
    }
    private static final int GDK_CROSS_REVERSE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSS_REVERSE = 32
     * }
     */
    public static int GDK_CROSS_REVERSE() {
        return GDK_CROSS_REVERSE;
    }
    private static final int GDK_CROSSHAIR = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSSHAIR = 34
     * }
     */
    public static int GDK_CROSSHAIR() {
        return GDK_CROSSHAIR;
    }
    private static final int GDK_DIAMOND_CROSS = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DIAMOND_CROSS = 36
     * }
     */
    public static int GDK_DIAMOND_CROSS() {
        return GDK_DIAMOND_CROSS;
    }
    private static final int GDK_DOT = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DOT = 38
     * }
     */
    public static int GDK_DOT() {
        return GDK_DOT;
    }
    private static final int GDK_DOTBOX = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DOTBOX = 40
     * }
     */
    public static int GDK_DOTBOX() {
        return GDK_DOTBOX;
    }
    private static final int GDK_DOUBLE_ARROW = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DOUBLE_ARROW = 42
     * }
     */
    public static int GDK_DOUBLE_ARROW() {
        return GDK_DOUBLE_ARROW;
    }
    private static final int GDK_DRAFT_LARGE = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAFT_LARGE = 44
     * }
     */
    public static int GDK_DRAFT_LARGE() {
        return GDK_DRAFT_LARGE;
    }
    private static final int GDK_DRAFT_SMALL = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAFT_SMALL = 46
     * }
     */
    public static int GDK_DRAFT_SMALL() {
        return GDK_DRAFT_SMALL;
    }
    private static final int GDK_DRAPED_BOX = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAPED_BOX = 48
     * }
     */
    public static int GDK_DRAPED_BOX() {
        return GDK_DRAPED_BOX;
    }
    private static final int GDK_EXCHANGE = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_EXCHANGE = 50
     * }
     */
    public static int GDK_EXCHANGE() {
        return GDK_EXCHANGE;
    }
    private static final int GDK_FLEUR = (int)52L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FLEUR = 52
     * }
     */
    public static int GDK_FLEUR() {
        return GDK_FLEUR;
    }
    private static final int GDK_GOBBLER = (int)54L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GOBBLER = 54
     * }
     */
    public static int GDK_GOBBLER() {
        return GDK_GOBBLER;
    }
    private static final int GDK_GUMBY = (int)56L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GUMBY = 56
     * }
     */
    public static int GDK_GUMBY() {
        return GDK_GUMBY;
    }
    private static final int GDK_HAND1 = (int)58L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HAND1 = 58
     * }
     */
    public static int GDK_HAND1() {
        return GDK_HAND1;
    }
    private static final int GDK_HAND2 = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HAND2 = 60
     * }
     */
    public static int GDK_HAND2() {
        return GDK_HAND2;
    }
    private static final int GDK_HEART = (int)62L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HEART = 62
     * }
     */
    public static int GDK_HEART() {
        return GDK_HEART;
    }
    private static final int GDK_ICON = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ICON = 64
     * }
     */
    public static int GDK_ICON() {
        return GDK_ICON;
    }
    private static final int GDK_IRON_CROSS = (int)66L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_IRON_CROSS = 66
     * }
     */
    public static int GDK_IRON_CROSS() {
        return GDK_IRON_CROSS;
    }
    private static final int GDK_LEFT_PTR = (int)68L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LEFT_PTR = 68
     * }
     */
    public static int GDK_LEFT_PTR() {
        return GDK_LEFT_PTR;
    }
    private static final int GDK_LEFT_SIDE = (int)70L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LEFT_SIDE = 70
     * }
     */
    public static int GDK_LEFT_SIDE() {
        return GDK_LEFT_SIDE;
    }
    private static final int GDK_LEFT_TEE = (int)72L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LEFT_TEE = 72
     * }
     */
    public static int GDK_LEFT_TEE() {
        return GDK_LEFT_TEE;
    }
    private static final int GDK_LEFTBUTTON = (int)74L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LEFTBUTTON = 74
     * }
     */
    public static int GDK_LEFTBUTTON() {
        return GDK_LEFTBUTTON;
    }
    private static final int GDK_LL_ANGLE = (int)76L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LL_ANGLE = 76
     * }
     */
    public static int GDK_LL_ANGLE() {
        return GDK_LL_ANGLE;
    }
    private static final int GDK_LR_ANGLE = (int)78L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LR_ANGLE = 78
     * }
     */
    public static int GDK_LR_ANGLE() {
        return GDK_LR_ANGLE;
    }
    private static final int GDK_MAN = (int)80L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MAN = 80
     * }
     */
    public static int GDK_MAN() {
        return GDK_MAN;
    }
    private static final int GDK_MIDDLEBUTTON = (int)82L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MIDDLEBUTTON = 82
     * }
     */
    public static int GDK_MIDDLEBUTTON() {
        return GDK_MIDDLEBUTTON;
    }
    private static final int GDK_MOUSE = (int)84L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MOUSE = 84
     * }
     */
    public static int GDK_MOUSE() {
        return GDK_MOUSE;
    }
    private static final int GDK_PENCIL = (int)86L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PENCIL = 86
     * }
     */
    public static int GDK_PENCIL() {
        return GDK_PENCIL;
    }
    private static final int GDK_PIRATE = (int)88L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PIRATE = 88
     * }
     */
    public static int GDK_PIRATE() {
        return GDK_PIRATE;
    }
    private static final int GDK_PLUS = (int)90L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PLUS = 90
     * }
     */
    public static int GDK_PLUS() {
        return GDK_PLUS;
    }
    private static final int GDK_QUESTION_ARROW = (int)92L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_QUESTION_ARROW = 92
     * }
     */
    public static int GDK_QUESTION_ARROW() {
        return GDK_QUESTION_ARROW;
    }
    private static final int GDK_RIGHT_PTR = (int)94L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_RIGHT_PTR = 94
     * }
     */
    public static int GDK_RIGHT_PTR() {
        return GDK_RIGHT_PTR;
    }
    private static final int GDK_RIGHT_SIDE = (int)96L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_RIGHT_SIDE = 96
     * }
     */
    public static int GDK_RIGHT_SIDE() {
        return GDK_RIGHT_SIDE;
    }
    private static final int GDK_RIGHT_TEE = (int)98L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_RIGHT_TEE = 98
     * }
     */
    public static int GDK_RIGHT_TEE() {
        return GDK_RIGHT_TEE;
    }
    private static final int GDK_RIGHTBUTTON = (int)100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_RIGHTBUTTON = 100
     * }
     */
    public static int GDK_RIGHTBUTTON() {
        return GDK_RIGHTBUTTON;
    }
    private static final int GDK_RTL_LOGO = (int)102L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_RTL_LOGO = 102
     * }
     */
    public static int GDK_RTL_LOGO() {
        return GDK_RTL_LOGO;
    }
    private static final int GDK_SAILBOAT = (int)104L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SAILBOAT = 104
     * }
     */
    public static int GDK_SAILBOAT() {
        return GDK_SAILBOAT;
    }
    private static final int GDK_SB_DOWN_ARROW = (int)106L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SB_DOWN_ARROW = 106
     * }
     */
    public static int GDK_SB_DOWN_ARROW() {
        return GDK_SB_DOWN_ARROW;
    }
    private static final int GDK_SB_H_DOUBLE_ARROW = (int)108L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SB_H_DOUBLE_ARROW = 108
     * }
     */
    public static int GDK_SB_H_DOUBLE_ARROW() {
        return GDK_SB_H_DOUBLE_ARROW;
    }
    private static final int GDK_SB_LEFT_ARROW = (int)110L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SB_LEFT_ARROW = 110
     * }
     */
    public static int GDK_SB_LEFT_ARROW() {
        return GDK_SB_LEFT_ARROW;
    }
    private static final int GDK_SB_RIGHT_ARROW = (int)112L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SB_RIGHT_ARROW = 112
     * }
     */
    public static int GDK_SB_RIGHT_ARROW() {
        return GDK_SB_RIGHT_ARROW;
    }
    private static final int GDK_SB_UP_ARROW = (int)114L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SB_UP_ARROW = 114
     * }
     */
    public static int GDK_SB_UP_ARROW() {
        return GDK_SB_UP_ARROW;
    }
    private static final int GDK_SB_V_DOUBLE_ARROW = (int)116L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SB_V_DOUBLE_ARROW = 116
     * }
     */
    public static int GDK_SB_V_DOUBLE_ARROW() {
        return GDK_SB_V_DOUBLE_ARROW;
    }
    private static final int GDK_SHUTTLE = (int)118L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SHUTTLE = 118
     * }
     */
    public static int GDK_SHUTTLE() {
        return GDK_SHUTTLE;
    }
    private static final int GDK_SIZING = (int)120L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SIZING = 120
     * }
     */
    public static int GDK_SIZING() {
        return GDK_SIZING;
    }
    private static final int GDK_SPIDER = (int)122L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SPIDER = 122
     * }
     */
    public static int GDK_SPIDER() {
        return GDK_SPIDER;
    }
    private static final int GDK_SPRAYCAN = (int)124L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SPRAYCAN = 124
     * }
     */
    public static int GDK_SPRAYCAN() {
        return GDK_SPRAYCAN;
    }
    private static final int GDK_STAR = (int)126L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_STAR = 126
     * }
     */
    public static int GDK_STAR() {
        return GDK_STAR;
    }
    private static final int GDK_TARGET = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TARGET = 128
     * }
     */
    public static int GDK_TARGET() {
        return GDK_TARGET;
    }
    private static final int GDK_TCROSS = (int)130L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TCROSS = 130
     * }
     */
    public static int GDK_TCROSS() {
        return GDK_TCROSS;
    }
    private static final int GDK_TOP_LEFT_ARROW = (int)132L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOP_LEFT_ARROW = 132
     * }
     */
    public static int GDK_TOP_LEFT_ARROW() {
        return GDK_TOP_LEFT_ARROW;
    }
    private static final int GDK_TOP_LEFT_CORNER = (int)134L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOP_LEFT_CORNER = 134
     * }
     */
    public static int GDK_TOP_LEFT_CORNER() {
        return GDK_TOP_LEFT_CORNER;
    }
    private static final int GDK_TOP_RIGHT_CORNER = (int)136L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOP_RIGHT_CORNER = 136
     * }
     */
    public static int GDK_TOP_RIGHT_CORNER() {
        return GDK_TOP_RIGHT_CORNER;
    }
    private static final int GDK_TOP_SIDE = (int)138L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOP_SIDE = 138
     * }
     */
    public static int GDK_TOP_SIDE() {
        return GDK_TOP_SIDE;
    }
    private static final int GDK_TOP_TEE = (int)140L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOP_TEE = 140
     * }
     */
    public static int GDK_TOP_TEE() {
        return GDK_TOP_TEE;
    }
    private static final int GDK_TREK = (int)142L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TREK = 142
     * }
     */
    public static int GDK_TREK() {
        return GDK_TREK;
    }
    private static final int GDK_UL_ANGLE = (int)144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_UL_ANGLE = 144
     * }
     */
    public static int GDK_UL_ANGLE() {
        return GDK_UL_ANGLE;
    }
    private static final int GDK_UMBRELLA = (int)146L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_UMBRELLA = 146
     * }
     */
    public static int GDK_UMBRELLA() {
        return GDK_UMBRELLA;
    }
    private static final int GDK_UR_ANGLE = (int)148L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_UR_ANGLE = 148
     * }
     */
    public static int GDK_UR_ANGLE() {
        return GDK_UR_ANGLE;
    }
    private static final int GDK_WATCH = (int)150L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WATCH = 150
     * }
     */
    public static int GDK_WATCH() {
        return GDK_WATCH;
    }
    private static final int GDK_XTERM = (int)152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_XTERM = 152
     * }
     */
    public static int GDK_XTERM() {
        return GDK_XTERM;
    }
    private static final int GDK_LAST_CURSOR = (int)153L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LAST_CURSOR = 153
     * }
     */
    public static int GDK_LAST_CURSOR() {
        return GDK_LAST_CURSOR;
    }
    private static final int GDK_BLANK_CURSOR = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BLANK_CURSOR = -2
     * }
     */
    public static int GDK_BLANK_CURSOR() {
        return GDK_BLANK_CURSOR;
    }
    private static final int GDK_CURSOR_IS_PIXMAP = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CURSOR_IS_PIXMAP = -1
     * }
     */
    public static int GDK_CURSOR_IS_PIXMAP() {
        return GDK_CURSOR_IS_PIXMAP;
    }

    private static class gdk_cursor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_cursor_get_type()
     * }
     */
    public static FunctionDescriptor gdk_cursor_get_type$descriptor() {
        return gdk_cursor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_cursor_get_type()
     * }
     */
    public static MethodHandle gdk_cursor_get_type$handle() {
        return gdk_cursor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_cursor_get_type()
     * }
     */
    public static long gdk_cursor_get_type() {
        var mh$ = gdk_cursor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_new_for_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_new_for_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_for_display(GdkDisplay *display, GdkCursorType cursor_type)
     * }
     */
    public static FunctionDescriptor gdk_cursor_new_for_display$descriptor() {
        return gdk_cursor_new_for_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_for_display(GdkDisplay *display, GdkCursorType cursor_type)
     * }
     */
    public static MethodHandle gdk_cursor_new_for_display$handle() {
        return gdk_cursor_new_for_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_for_display(GdkDisplay *display, GdkCursorType cursor_type)
     * }
     */
    public static MemorySegment gdk_cursor_new_for_display(MemorySegment display, int cursor_type) {
        var mh$ = gdk_cursor_new_for_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_new_for_display", display, cursor_type);
            }
            return (MemorySegment)mh$.invokeExact(display, cursor_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new(GdkCursorType cursor_type)
     * }
     */
    public static FunctionDescriptor gdk_cursor_new$descriptor() {
        return gdk_cursor_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new(GdkCursorType cursor_type)
     * }
     */
    public static MethodHandle gdk_cursor_new$handle() {
        return gdk_cursor_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new(GdkCursorType cursor_type)
     * }
     */
    public static MemorySegment gdk_cursor_new(int cursor_type) {
        var mh$ = gdk_cursor_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_new", cursor_type);
            }
            return (MemorySegment)mh$.invokeExact(cursor_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_new_from_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_new_from_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_from_pixbuf(GdkDisplay *display, GdkPixbuf *pixbuf, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gdk_cursor_new_from_pixbuf$descriptor() {
        return gdk_cursor_new_from_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_from_pixbuf(GdkDisplay *display, GdkPixbuf *pixbuf, gint x, gint y)
     * }
     */
    public static MethodHandle gdk_cursor_new_from_pixbuf$handle() {
        return gdk_cursor_new_from_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_from_pixbuf(GdkDisplay *display, GdkPixbuf *pixbuf, gint x, gint y)
     * }
     */
    public static MemorySegment gdk_cursor_new_from_pixbuf(MemorySegment display, MemorySegment pixbuf, int x, int y) {
        var mh$ = gdk_cursor_new_from_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_new_from_pixbuf", display, pixbuf, x, y);
            }
            return (MemorySegment)mh$.invokeExact(display, pixbuf, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_new_from_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_new_from_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_from_surface(GdkDisplay *display, cairo_surface_t *surface, gdouble x, gdouble y)
     * }
     */
    public static FunctionDescriptor gdk_cursor_new_from_surface$descriptor() {
        return gdk_cursor_new_from_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_from_surface(GdkDisplay *display, cairo_surface_t *surface, gdouble x, gdouble y)
     * }
     */
    public static MethodHandle gdk_cursor_new_from_surface$handle() {
        return gdk_cursor_new_from_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_from_surface(GdkDisplay *display, cairo_surface_t *surface, gdouble x, gdouble y)
     * }
     */
    public static MemorySegment gdk_cursor_new_from_surface(MemorySegment display, MemorySegment surface, double x, double y) {
        var mh$ = gdk_cursor_new_from_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_new_from_surface", display, surface, x, y);
            }
            return (MemorySegment)mh$.invokeExact(display, surface, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_new_from_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_new_from_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_from_name(GdkDisplay *display, const gchar *name)
     * }
     */
    public static FunctionDescriptor gdk_cursor_new_from_name$descriptor() {
        return gdk_cursor_new_from_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_from_name(GdkDisplay *display, const gchar *name)
     * }
     */
    public static MethodHandle gdk_cursor_new_from_name$handle() {
        return gdk_cursor_new_from_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_new_from_name(GdkDisplay *display, const gchar *name)
     * }
     */
    public static MemorySegment gdk_cursor_new_from_name(MemorySegment display, MemorySegment name) {
        var mh$ = gdk_cursor_new_from_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_new_from_name", display, name);
            }
            return (MemorySegment)mh$.invokeExact(display, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_cursor_get_display(GdkCursor *cursor)
     * }
     */
    public static FunctionDescriptor gdk_cursor_get_display$descriptor() {
        return gdk_cursor_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_cursor_get_display(GdkCursor *cursor)
     * }
     */
    public static MethodHandle gdk_cursor_get_display$handle() {
        return gdk_cursor_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_cursor_get_display(GdkCursor *cursor)
     * }
     */
    public static MemorySegment gdk_cursor_get_display(MemorySegment cursor) {
        var mh$ = gdk_cursor_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_get_display", cursor);
            }
            return (MemorySegment)mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_ref(GdkCursor *cursor)
     * }
     */
    public static FunctionDescriptor gdk_cursor_ref$descriptor() {
        return gdk_cursor_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_ref(GdkCursor *cursor)
     * }
     */
    public static MethodHandle gdk_cursor_ref$handle() {
        return gdk_cursor_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkCursor *gdk_cursor_ref(GdkCursor *cursor)
     * }
     */
    public static MemorySegment gdk_cursor_ref(MemorySegment cursor) {
        var mh$ = gdk_cursor_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_ref", cursor);
            }
            return (MemorySegment)mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_cursor_unref(GdkCursor *cursor)
     * }
     */
    public static FunctionDescriptor gdk_cursor_unref$descriptor() {
        return gdk_cursor_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_cursor_unref(GdkCursor *cursor)
     * }
     */
    public static MethodHandle gdk_cursor_unref$handle() {
        return gdk_cursor_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_cursor_unref(GdkCursor *cursor)
     * }
     */
    public static void gdk_cursor_unref(MemorySegment cursor) {
        var mh$ = gdk_cursor_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_unref", cursor);
            }
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_get_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_get_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_cursor_get_image(GdkCursor *cursor)
     * }
     */
    public static FunctionDescriptor gdk_cursor_get_image$descriptor() {
        return gdk_cursor_get_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_cursor_get_image(GdkCursor *cursor)
     * }
     */
    public static MethodHandle gdk_cursor_get_image$handle() {
        return gdk_cursor_get_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gdk_cursor_get_image(GdkCursor *cursor)
     * }
     */
    public static MemorySegment gdk_cursor_get_image(MemorySegment cursor) {
        var mh$ = gdk_cursor_get_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_get_image", cursor);
            }
            return (MemorySegment)mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_get_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_get_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_cursor_get_surface(GdkCursor *cursor, gdouble *x_hot, gdouble *y_hot)
     * }
     */
    public static FunctionDescriptor gdk_cursor_get_surface$descriptor() {
        return gdk_cursor_get_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_cursor_get_surface(GdkCursor *cursor, gdouble *x_hot, gdouble *y_hot)
     * }
     */
    public static MethodHandle gdk_cursor_get_surface$handle() {
        return gdk_cursor_get_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gdk_cursor_get_surface(GdkCursor *cursor, gdouble *x_hot, gdouble *y_hot)
     * }
     */
    public static MemorySegment gdk_cursor_get_surface(MemorySegment cursor, MemorySegment x_hot, MemorySegment y_hot) {
        var mh$ = gdk_cursor_get_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_get_surface", cursor, x_hot, y_hot);
            }
            return (MemorySegment)mh$.invokeExact(cursor, x_hot, y_hot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_get_cursor_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_get_cursor_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkCursorType gdk_cursor_get_cursor_type(GdkCursor *cursor)
     * }
     */
    public static FunctionDescriptor gdk_cursor_get_cursor_type$descriptor() {
        return gdk_cursor_get_cursor_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkCursorType gdk_cursor_get_cursor_type(GdkCursor *cursor)
     * }
     */
    public static MethodHandle gdk_cursor_get_cursor_type$handle() {
        return gdk_cursor_get_cursor_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkCursorType gdk_cursor_get_cursor_type(GdkCursor *cursor)
     * }
     */
    public static int gdk_cursor_get_cursor_type(MemorySegment cursor) {
        var mh$ = gdk_cursor_get_cursor_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_get_cursor_type", cursor);
            }
            return (int)mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_DEVICE_PAD_FEATURE_BUTTON = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_PAD_FEATURE_BUTTON = 0
     * }
     */
    public static int GDK_DEVICE_PAD_FEATURE_BUTTON() {
        return GDK_DEVICE_PAD_FEATURE_BUTTON;
    }
    private static final int GDK_DEVICE_PAD_FEATURE_RING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_PAD_FEATURE_RING = 1
     * }
     */
    public static int GDK_DEVICE_PAD_FEATURE_RING() {
        return GDK_DEVICE_PAD_FEATURE_RING;
    }
    private static final int GDK_DEVICE_PAD_FEATURE_STRIP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_PAD_FEATURE_STRIP = 2
     * }
     */
    public static int GDK_DEVICE_PAD_FEATURE_STRIP() {
        return GDK_DEVICE_PAD_FEATURE_STRIP;
    }

    private static class gdk_device_pad_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_pad_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_device_pad_get_type()
     * }
     */
    public static FunctionDescriptor gdk_device_pad_get_type$descriptor() {
        return gdk_device_pad_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_device_pad_get_type()
     * }
     */
    public static MethodHandle gdk_device_pad_get_type$handle() {
        return gdk_device_pad_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_device_pad_get_type()
     * }
     */
    public static long gdk_device_pad_get_type() {
        var mh$ = gdk_device_pad_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_pad_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_pad_get_n_groups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_pad_get_n_groups"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_n_groups(GdkDevicePad *pad)
     * }
     */
    public static FunctionDescriptor gdk_device_pad_get_n_groups$descriptor() {
        return gdk_device_pad_get_n_groups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_n_groups(GdkDevicePad *pad)
     * }
     */
    public static MethodHandle gdk_device_pad_get_n_groups$handle() {
        return gdk_device_pad_get_n_groups.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_n_groups(GdkDevicePad *pad)
     * }
     */
    public static int gdk_device_pad_get_n_groups(MemorySegment pad) {
        var mh$ = gdk_device_pad_get_n_groups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_pad_get_n_groups", pad);
            }
            return (int)mh$.invokeExact(pad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_pad_get_group_n_modes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_pad_get_group_n_modes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_group_n_modes(GdkDevicePad *pad, gint group_idx)
     * }
     */
    public static FunctionDescriptor gdk_device_pad_get_group_n_modes$descriptor() {
        return gdk_device_pad_get_group_n_modes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_group_n_modes(GdkDevicePad *pad, gint group_idx)
     * }
     */
    public static MethodHandle gdk_device_pad_get_group_n_modes$handle() {
        return gdk_device_pad_get_group_n_modes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_group_n_modes(GdkDevicePad *pad, gint group_idx)
     * }
     */
    public static int gdk_device_pad_get_group_n_modes(MemorySegment pad, int group_idx) {
        var mh$ = gdk_device_pad_get_group_n_modes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_pad_get_group_n_modes", pad, group_idx);
            }
            return (int)mh$.invokeExact(pad, group_idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_pad_get_n_features {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_pad_get_n_features"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_n_features(GdkDevicePad *pad, GdkDevicePadFeature feature)
     * }
     */
    public static FunctionDescriptor gdk_device_pad_get_n_features$descriptor() {
        return gdk_device_pad_get_n_features.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_n_features(GdkDevicePad *pad, GdkDevicePadFeature feature)
     * }
     */
    public static MethodHandle gdk_device_pad_get_n_features$handle() {
        return gdk_device_pad_get_n_features.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_n_features(GdkDevicePad *pad, GdkDevicePadFeature feature)
     * }
     */
    public static int gdk_device_pad_get_n_features(MemorySegment pad, int feature) {
        var mh$ = gdk_device_pad_get_n_features.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_pad_get_n_features", pad, feature);
            }
            return (int)mh$.invokeExact(pad, feature);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_pad_get_feature_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_pad_get_feature_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_feature_group(GdkDevicePad *pad, GdkDevicePadFeature feature, gint feature_idx)
     * }
     */
    public static FunctionDescriptor gdk_device_pad_get_feature_group$descriptor() {
        return gdk_device_pad_get_feature_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_feature_group(GdkDevicePad *pad, GdkDevicePadFeature feature, gint feature_idx)
     * }
     */
    public static MethodHandle gdk_device_pad_get_feature_group$handle() {
        return gdk_device_pad_get_feature_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_device_pad_get_feature_group(GdkDevicePad *pad, GdkDevicePadFeature feature, gint feature_idx)
     * }
     */
    public static int gdk_device_pad_get_feature_group(MemorySegment pad, int feature, int feature_idx) {
        var mh$ = gdk_device_pad_get_feature_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_pad_get_feature_group", pad, feature, feature_idx);
            }
            return (int)mh$.invokeExact(pad, feature, feature_idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_manager_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_manager_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_display_manager_get_type()
     * }
     */
    public static FunctionDescriptor gdk_display_manager_get_type$descriptor() {
        return gdk_display_manager_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_display_manager_get_type()
     * }
     */
    public static MethodHandle gdk_display_manager_get_type$handle() {
        return gdk_display_manager_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_display_manager_get_type()
     * }
     */
    public static long gdk_display_manager_get_type() {
        var mh$ = gdk_display_manager_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_manager_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_manager_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_manager_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplayManager *gdk_display_manager_get()
     * }
     */
    public static FunctionDescriptor gdk_display_manager_get$descriptor() {
        return gdk_display_manager_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplayManager *gdk_display_manager_get()
     * }
     */
    public static MethodHandle gdk_display_manager_get$handle() {
        return gdk_display_manager_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplayManager *gdk_display_manager_get()
     * }
     */
    public static MemorySegment gdk_display_manager_get() {
        var mh$ = gdk_display_manager_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_manager_get");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_manager_get_default_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_manager_get_default_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_manager_get_default_display(GdkDisplayManager *manager)
     * }
     */
    public static FunctionDescriptor gdk_display_manager_get_default_display$descriptor() {
        return gdk_display_manager_get_default_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_manager_get_default_display(GdkDisplayManager *manager)
     * }
     */
    public static MethodHandle gdk_display_manager_get_default_display$handle() {
        return gdk_display_manager_get_default_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_manager_get_default_display(GdkDisplayManager *manager)
     * }
     */
    public static MemorySegment gdk_display_manager_get_default_display(MemorySegment manager) {
        var mh$ = gdk_display_manager_get_default_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_manager_get_default_display", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_manager_set_default_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_manager_set_default_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_display_manager_set_default_display(GdkDisplayManager *manager, GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_display_manager_set_default_display$descriptor() {
        return gdk_display_manager_set_default_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_display_manager_set_default_display(GdkDisplayManager *manager, GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_display_manager_set_default_display$handle() {
        return gdk_display_manager_set_default_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_display_manager_set_default_display(GdkDisplayManager *manager, GdkDisplay *display)
     * }
     */
    public static void gdk_display_manager_set_default_display(MemorySegment manager, MemorySegment display) {
        var mh$ = gdk_display_manager_set_default_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_manager_set_default_display", manager, display);
            }
            mh$.invokeExact(manager, display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_manager_list_displays {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_manager_list_displays"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gdk_display_manager_list_displays(GdkDisplayManager *manager)
     * }
     */
    public static FunctionDescriptor gdk_display_manager_list_displays$descriptor() {
        return gdk_display_manager_list_displays.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gdk_display_manager_list_displays(GdkDisplayManager *manager)
     * }
     */
    public static MethodHandle gdk_display_manager_list_displays$handle() {
        return gdk_display_manager_list_displays.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gdk_display_manager_list_displays(GdkDisplayManager *manager)
     * }
     */
    public static MemorySegment gdk_display_manager_list_displays(MemorySegment manager) {
        var mh$ = gdk_display_manager_list_displays.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_manager_list_displays", manager);
            }
            return (MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_display_manager_open_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_display_manager_open_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_manager_open_display(GdkDisplayManager *manager, const gchar *name)
     * }
     */
    public static FunctionDescriptor gdk_display_manager_open_display$descriptor() {
        return gdk_display_manager_open_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_manager_open_display(GdkDisplayManager *manager, const gchar *name)
     * }
     */
    public static MethodHandle gdk_display_manager_open_display$handle() {
        return gdk_display_manager_open_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_display_manager_open_display(GdkDisplayManager *manager, const gchar *name)
     * }
     */
    public static MemorySegment gdk_display_manager_open_display(MemorySegment manager, MemorySegment name) {
        var mh$ = gdk_display_manager_open_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_display_manager_open_display", manager, name);
            }
            return (MemorySegment)mh$.invokeExact(manager, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_cursor_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_cursor_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_cursor_type_get_type()
     * }
     */
    public static FunctionDescriptor gdk_cursor_type_get_type$descriptor() {
        return gdk_cursor_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_cursor_type_get_type()
     * }
     */
    public static MethodHandle gdk_cursor_type_get_type$handle() {
        return gdk_cursor_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_cursor_type_get_type()
     * }
     */
    public static long gdk_cursor_type_get_type() {
        var mh$ = gdk_cursor_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_cursor_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_input_source_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_input_source_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_input_source_get_type()
     * }
     */
    public static FunctionDescriptor gdk_input_source_get_type$descriptor() {
        return gdk_input_source_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_input_source_get_type()
     * }
     */
    public static MethodHandle gdk_input_source_get_type$handle() {
        return gdk_input_source_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_input_source_get_type()
     * }
     */
    public static long gdk_input_source_get_type() {
        var mh$ = gdk_input_source_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_input_source_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_input_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_input_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_input_mode_get_type()
     * }
     */
    public static FunctionDescriptor gdk_input_mode_get_type$descriptor() {
        return gdk_input_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_input_mode_get_type()
     * }
     */
    public static MethodHandle gdk_input_mode_get_type$handle() {
        return gdk_input_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_input_mode_get_type()
     * }
     */
    public static long gdk_input_mode_get_type() {
        var mh$ = gdk_input_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_input_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_device_type_get_type()
     * }
     */
    public static FunctionDescriptor gdk_device_type_get_type$descriptor() {
        return gdk_device_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_device_type_get_type()
     * }
     */
    public static MethodHandle gdk_device_type_get_type$handle() {
        return gdk_device_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_device_type_get_type()
     * }
     */
    public static long gdk_device_type_get_type() {
        var mh$ = gdk_device_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_pad_feature_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_pad_feature_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_device_pad_feature_get_type()
     * }
     */
    public static FunctionDescriptor gdk_device_pad_feature_get_type$descriptor() {
        return gdk_device_pad_feature_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_device_pad_feature_get_type()
     * }
     */
    public static MethodHandle gdk_device_pad_feature_get_type$handle() {
        return gdk_device_pad_feature_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_device_pad_feature_get_type()
     * }
     */
    public static long gdk_device_pad_feature_get_type() {
        var mh$ = gdk_device_pad_feature_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_pad_feature_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_tool_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_tool_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_device_tool_type_get_type()
     * }
     */
    public static FunctionDescriptor gdk_device_tool_type_get_type$descriptor() {
        return gdk_device_tool_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_device_tool_type_get_type()
     * }
     */
    public static MethodHandle gdk_device_tool_type_get_type$handle() {
        return gdk_device_tool_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_device_tool_type_get_type()
     * }
     */
    public static long gdk_device_tool_type_get_type() {
        var mh$ = gdk_device_tool_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_tool_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_drag_action_get_type()
     * }
     */
    public static FunctionDescriptor gdk_drag_action_get_type$descriptor() {
        return gdk_drag_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_drag_action_get_type()
     * }
     */
    public static MethodHandle gdk_drag_action_get_type$handle() {
        return gdk_drag_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_drag_action_get_type()
     * }
     */
    public static long gdk_drag_action_get_type() {
        var mh$ = gdk_drag_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_cancel_reason_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_cancel_reason_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_drag_cancel_reason_get_type()
     * }
     */
    public static FunctionDescriptor gdk_drag_cancel_reason_get_type$descriptor() {
        return gdk_drag_cancel_reason_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_drag_cancel_reason_get_type()
     * }
     */
    public static MethodHandle gdk_drag_cancel_reason_get_type$handle() {
        return gdk_drag_cancel_reason_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_drag_cancel_reason_get_type()
     * }
     */
    public static long gdk_drag_cancel_reason_get_type() {
        var mh$ = gdk_drag_cancel_reason_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_cancel_reason_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_protocol_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_protocol_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_drag_protocol_get_type()
     * }
     */
    public static FunctionDescriptor gdk_drag_protocol_get_type$descriptor() {
        return gdk_drag_protocol_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_drag_protocol_get_type()
     * }
     */
    public static MethodHandle gdk_drag_protocol_get_type$handle() {
        return gdk_drag_protocol_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_drag_protocol_get_type()
     * }
     */
    public static long gdk_drag_protocol_get_type() {
        var mh$ = gdk_drag_protocol_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_protocol_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_filter_return_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_filter_return_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_filter_return_get_type()
     * }
     */
    public static FunctionDescriptor gdk_filter_return_get_type$descriptor() {
        return gdk_filter_return_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_filter_return_get_type()
     * }
     */
    public static MethodHandle gdk_filter_return_get_type$handle() {
        return gdk_filter_return_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_filter_return_get_type()
     * }
     */
    public static long gdk_filter_return_get_type() {
        var mh$ = gdk_filter_return_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_filter_return_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_event_type_get_type()
     * }
     */
    public static FunctionDescriptor gdk_event_type_get_type$descriptor() {
        return gdk_event_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_event_type_get_type()
     * }
     */
    public static MethodHandle gdk_event_type_get_type$handle() {
        return gdk_event_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_event_type_get_type()
     * }
     */
    public static long gdk_event_type_get_type() {
        var mh$ = gdk_event_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visibility_state_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visibility_state_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_visibility_state_get_type()
     * }
     */
    public static FunctionDescriptor gdk_visibility_state_get_type$descriptor() {
        return gdk_visibility_state_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_visibility_state_get_type()
     * }
     */
    public static MethodHandle gdk_visibility_state_get_type$handle() {
        return gdk_visibility_state_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_visibility_state_get_type()
     * }
     */
    public static long gdk_visibility_state_get_type() {
        var mh$ = gdk_visibility_state_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visibility_state_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_touchpad_gesture_phase_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_touchpad_gesture_phase_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_touchpad_gesture_phase_get_type()
     * }
     */
    public static FunctionDescriptor gdk_touchpad_gesture_phase_get_type$descriptor() {
        return gdk_touchpad_gesture_phase_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_touchpad_gesture_phase_get_type()
     * }
     */
    public static MethodHandle gdk_touchpad_gesture_phase_get_type$handle() {
        return gdk_touchpad_gesture_phase_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_touchpad_gesture_phase_get_type()
     * }
     */
    public static long gdk_touchpad_gesture_phase_get_type() {
        var mh$ = gdk_touchpad_gesture_phase_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_touchpad_gesture_phase_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_scroll_direction_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_scroll_direction_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_scroll_direction_get_type()
     * }
     */
    public static FunctionDescriptor gdk_scroll_direction_get_type$descriptor() {
        return gdk_scroll_direction_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_scroll_direction_get_type()
     * }
     */
    public static MethodHandle gdk_scroll_direction_get_type$handle() {
        return gdk_scroll_direction_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_scroll_direction_get_type()
     * }
     */
    public static long gdk_scroll_direction_get_type() {
        var mh$ = gdk_scroll_direction_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_scroll_direction_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_notify_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_notify_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_notify_type_get_type()
     * }
     */
    public static FunctionDescriptor gdk_notify_type_get_type$descriptor() {
        return gdk_notify_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_notify_type_get_type()
     * }
     */
    public static MethodHandle gdk_notify_type_get_type$handle() {
        return gdk_notify_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_notify_type_get_type()
     * }
     */
    public static long gdk_notify_type_get_type() {
        var mh$ = gdk_notify_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_notify_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_crossing_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_crossing_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_crossing_mode_get_type()
     * }
     */
    public static FunctionDescriptor gdk_crossing_mode_get_type$descriptor() {
        return gdk_crossing_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_crossing_mode_get_type()
     * }
     */
    public static MethodHandle gdk_crossing_mode_get_type$handle() {
        return gdk_crossing_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_crossing_mode_get_type()
     * }
     */
    public static long gdk_crossing_mode_get_type() {
        var mh$ = gdk_crossing_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_crossing_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_property_state_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_property_state_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_property_state_get_type()
     * }
     */
    public static FunctionDescriptor gdk_property_state_get_type$descriptor() {
        return gdk_property_state_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_property_state_get_type()
     * }
     */
    public static MethodHandle gdk_property_state_get_type$handle() {
        return gdk_property_state_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_property_state_get_type()
     * }
     */
    public static long gdk_property_state_get_type() {
        var mh$ = gdk_property_state_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_property_state_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_state_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_state_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_window_state_get_type()
     * }
     */
    public static FunctionDescriptor gdk_window_state_get_type$descriptor() {
        return gdk_window_state_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_window_state_get_type()
     * }
     */
    public static MethodHandle gdk_window_state_get_type$handle() {
        return gdk_window_state_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_window_state_get_type()
     * }
     */
    public static long gdk_window_state_get_type() {
        var mh$ = gdk_window_state_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_state_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_setting_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_setting_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_setting_action_get_type()
     * }
     */
    public static FunctionDescriptor gdk_setting_action_get_type$descriptor() {
        return gdk_setting_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_setting_action_get_type()
     * }
     */
    public static MethodHandle gdk_setting_action_get_type$handle() {
        return gdk_setting_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_setting_action_get_type()
     * }
     */
    public static long gdk_setting_action_get_type() {
        var mh$ = gdk_setting_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_setting_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_owner_change_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_owner_change_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_owner_change_get_type()
     * }
     */
    public static FunctionDescriptor gdk_owner_change_get_type$descriptor() {
        return gdk_owner_change_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_owner_change_get_type()
     * }
     */
    public static MethodHandle gdk_owner_change_get_type$handle() {
        return gdk_owner_change_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_owner_change_get_type()
     * }
     */
    public static long gdk_owner_change_get_type() {
        var mh$ = gdk_owner_change_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_owner_change_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_clock_phase_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_phase_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_frame_clock_phase_get_type()
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_phase_get_type$descriptor() {
        return gdk_frame_clock_phase_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_frame_clock_phase_get_type()
     * }
     */
    public static MethodHandle gdk_frame_clock_phase_get_type$handle() {
        return gdk_frame_clock_phase_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_frame_clock_phase_get_type()
     * }
     */
    public static long gdk_frame_clock_phase_get_type() {
        var mh$ = gdk_frame_clock_phase_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_phase_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_subpixel_layout_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_subpixel_layout_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_subpixel_layout_get_type()
     * }
     */
    public static FunctionDescriptor gdk_subpixel_layout_get_type$descriptor() {
        return gdk_subpixel_layout_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_subpixel_layout_get_type()
     * }
     */
    public static MethodHandle gdk_subpixel_layout_get_type$handle() {
        return gdk_subpixel_layout_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_subpixel_layout_get_type()
     * }
     */
    public static long gdk_subpixel_layout_get_type() {
        var mh$ = gdk_subpixel_layout_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_subpixel_layout_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_prop_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_prop_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_prop_mode_get_type()
     * }
     */
    public static FunctionDescriptor gdk_prop_mode_get_type$descriptor() {
        return gdk_prop_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_prop_mode_get_type()
     * }
     */
    public static MethodHandle gdk_prop_mode_get_type$handle() {
        return gdk_prop_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_prop_mode_get_type()
     * }
     */
    public static long gdk_prop_mode_get_type() {
        var mh$ = gdk_prop_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_prop_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_seat_capabilities_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_seat_capabilities_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_seat_capabilities_get_type()
     * }
     */
    public static FunctionDescriptor gdk_seat_capabilities_get_type$descriptor() {
        return gdk_seat_capabilities_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_seat_capabilities_get_type()
     * }
     */
    public static MethodHandle gdk_seat_capabilities_get_type$handle() {
        return gdk_seat_capabilities_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_seat_capabilities_get_type()
     * }
     */
    public static long gdk_seat_capabilities_get_type() {
        var mh$ = gdk_seat_capabilities_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_seat_capabilities_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_byte_order_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_byte_order_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_byte_order_get_type()
     * }
     */
    public static FunctionDescriptor gdk_byte_order_get_type$descriptor() {
        return gdk_byte_order_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_byte_order_get_type()
     * }
     */
    public static MethodHandle gdk_byte_order_get_type$handle() {
        return gdk_byte_order_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_byte_order_get_type()
     * }
     */
    public static long gdk_byte_order_get_type() {
        var mh$ = gdk_byte_order_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_byte_order_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_modifier_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_modifier_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_modifier_type_get_type()
     * }
     */
    public static FunctionDescriptor gdk_modifier_type_get_type$descriptor() {
        return gdk_modifier_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_modifier_type_get_type()
     * }
     */
    public static MethodHandle gdk_modifier_type_get_type$handle() {
        return gdk_modifier_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_modifier_type_get_type()
     * }
     */
    public static long gdk_modifier_type_get_type() {
        var mh$ = gdk_modifier_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_modifier_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_modifier_intent_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_modifier_intent_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_modifier_intent_get_type()
     * }
     */
    public static FunctionDescriptor gdk_modifier_intent_get_type$descriptor() {
        return gdk_modifier_intent_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_modifier_intent_get_type()
     * }
     */
    public static MethodHandle gdk_modifier_intent_get_type$handle() {
        return gdk_modifier_intent_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_modifier_intent_get_type()
     * }
     */
    public static long gdk_modifier_intent_get_type() {
        var mh$ = gdk_modifier_intent_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_modifier_intent_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_status_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_status_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_status_get_type()
     * }
     */
    public static FunctionDescriptor gdk_status_get_type$descriptor() {
        return gdk_status_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_status_get_type()
     * }
     */
    public static MethodHandle gdk_status_get_type$handle() {
        return gdk_status_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_status_get_type()
     * }
     */
    public static long gdk_status_get_type() {
        var mh$ = gdk_status_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_status_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_grab_status_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_grab_status_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_grab_status_get_type()
     * }
     */
    public static FunctionDescriptor gdk_grab_status_get_type$descriptor() {
        return gdk_grab_status_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_grab_status_get_type()
     * }
     */
    public static MethodHandle gdk_grab_status_get_type$handle() {
        return gdk_grab_status_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_grab_status_get_type()
     * }
     */
    public static long gdk_grab_status_get_type() {
        var mh$ = gdk_grab_status_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_grab_status_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_grab_ownership_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_grab_ownership_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_grab_ownership_get_type()
     * }
     */
    public static FunctionDescriptor gdk_grab_ownership_get_type$descriptor() {
        return gdk_grab_ownership_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_grab_ownership_get_type()
     * }
     */
    public static MethodHandle gdk_grab_ownership_get_type$handle() {
        return gdk_grab_ownership_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_grab_ownership_get_type()
     * }
     */
    public static long gdk_grab_ownership_get_type() {
        var mh$ = gdk_grab_ownership_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_grab_ownership_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_mask_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_mask_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_event_mask_get_type()
     * }
     */
    public static FunctionDescriptor gdk_event_mask_get_type$descriptor() {
        return gdk_event_mask_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_event_mask_get_type()
     * }
     */
    public static MethodHandle gdk_event_mask_get_type$handle() {
        return gdk_event_mask_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_event_mask_get_type()
     * }
     */
    public static long gdk_event_mask_get_type() {
        var mh$ = gdk_event_mask_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_mask_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_gl_error_get_type()
     * }
     */
    public static FunctionDescriptor gdk_gl_error_get_type$descriptor() {
        return gdk_gl_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_gl_error_get_type()
     * }
     */
    public static MethodHandle gdk_gl_error_get_type$handle() {
        return gdk_gl_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_gl_error_get_type()
     * }
     */
    public static long gdk_gl_error_get_type() {
        var mh$ = gdk_gl_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_type_hint_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_type_hint_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_window_type_hint_get_type()
     * }
     */
    public static FunctionDescriptor gdk_window_type_hint_get_type$descriptor() {
        return gdk_window_type_hint_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_window_type_hint_get_type()
     * }
     */
    public static MethodHandle gdk_window_type_hint_get_type$handle() {
        return gdk_window_type_hint_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_window_type_hint_get_type()
     * }
     */
    public static long gdk_window_type_hint_get_type() {
        var mh$ = gdk_window_type_hint_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_type_hint_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_axis_use_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_axis_use_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_axis_use_get_type()
     * }
     */
    public static FunctionDescriptor gdk_axis_use_get_type$descriptor() {
        return gdk_axis_use_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_axis_use_get_type()
     * }
     */
    public static MethodHandle gdk_axis_use_get_type$handle() {
        return gdk_axis_use_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_axis_use_get_type()
     * }
     */
    public static long gdk_axis_use_get_type() {
        var mh$ = gdk_axis_use_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_axis_use_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_axis_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_axis_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_axis_flags_get_type()
     * }
     */
    public static FunctionDescriptor gdk_axis_flags_get_type$descriptor() {
        return gdk_axis_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_axis_flags_get_type()
     * }
     */
    public static MethodHandle gdk_axis_flags_get_type$handle() {
        return gdk_axis_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_axis_flags_get_type()
     * }
     */
    public static long gdk_axis_flags_get_type() {
        var mh$ = gdk_axis_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_axis_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_visual_type_get_type()
     * }
     */
    public static FunctionDescriptor gdk_visual_type_get_type$descriptor() {
        return gdk_visual_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_visual_type_get_type()
     * }
     */
    public static MethodHandle gdk_visual_type_get_type$handle() {
        return gdk_visual_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_visual_type_get_type()
     * }
     */
    public static long gdk_visual_type_get_type() {
        var mh$ = gdk_visual_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_window_class_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_window_class_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_window_window_class_get_type()
     * }
     */
    public static FunctionDescriptor gdk_window_window_class_get_type$descriptor() {
        return gdk_window_window_class_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_window_window_class_get_type()
     * }
     */
    public static MethodHandle gdk_window_window_class_get_type$handle() {
        return gdk_window_window_class_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_window_window_class_get_type()
     * }
     */
    public static long gdk_window_window_class_get_type() {
        var mh$ = gdk_window_window_class_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_window_class_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_window_type_get_type()
     * }
     */
    public static FunctionDescriptor gdk_window_type_get_type$descriptor() {
        return gdk_window_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_window_type_get_type()
     * }
     */
    public static MethodHandle gdk_window_type_get_type$handle() {
        return gdk_window_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_window_type_get_type()
     * }
     */
    public static long gdk_window_type_get_type() {
        var mh$ = gdk_window_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_attributes_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_attributes_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_window_attributes_type_get_type()
     * }
     */
    public static FunctionDescriptor gdk_window_attributes_type_get_type$descriptor() {
        return gdk_window_attributes_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_window_attributes_type_get_type()
     * }
     */
    public static MethodHandle gdk_window_attributes_type_get_type$handle() {
        return gdk_window_attributes_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_window_attributes_type_get_type()
     * }
     */
    public static long gdk_window_attributes_type_get_type() {
        var mh$ = gdk_window_attributes_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_attributes_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_hints_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_hints_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_window_hints_get_type()
     * }
     */
    public static FunctionDescriptor gdk_window_hints_get_type$descriptor() {
        return gdk_window_hints_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_window_hints_get_type()
     * }
     */
    public static MethodHandle gdk_window_hints_get_type$handle() {
        return gdk_window_hints_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_window_hints_get_type()
     * }
     */
    public static long gdk_window_hints_get_type() {
        var mh$ = gdk_window_hints_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_hints_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_wm_decoration_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_wm_decoration_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_wm_decoration_get_type()
     * }
     */
    public static FunctionDescriptor gdk_wm_decoration_get_type$descriptor() {
        return gdk_wm_decoration_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_wm_decoration_get_type()
     * }
     */
    public static MethodHandle gdk_wm_decoration_get_type$handle() {
        return gdk_wm_decoration_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_wm_decoration_get_type()
     * }
     */
    public static long gdk_wm_decoration_get_type() {
        var mh$ = gdk_wm_decoration_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_wm_decoration_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_wm_function_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_wm_function_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_wm_function_get_type()
     * }
     */
    public static FunctionDescriptor gdk_wm_function_get_type$descriptor() {
        return gdk_wm_function_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_wm_function_get_type()
     * }
     */
    public static MethodHandle gdk_wm_function_get_type$handle() {
        return gdk_wm_function_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_wm_function_get_type()
     * }
     */
    public static long gdk_wm_function_get_type() {
        var mh$ = gdk_wm_function_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_wm_function_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gravity_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gravity_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_gravity_get_type()
     * }
     */
    public static FunctionDescriptor gdk_gravity_get_type$descriptor() {
        return gdk_gravity_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_gravity_get_type()
     * }
     */
    public static MethodHandle gdk_gravity_get_type$handle() {
        return gdk_gravity_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_gravity_get_type()
     * }
     */
    public static long gdk_gravity_get_type() {
        var mh$ = gdk_gravity_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gravity_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_anchor_hints_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_anchor_hints_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_anchor_hints_get_type()
     * }
     */
    public static FunctionDescriptor gdk_anchor_hints_get_type$descriptor() {
        return gdk_anchor_hints_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_anchor_hints_get_type()
     * }
     */
    public static MethodHandle gdk_anchor_hints_get_type$handle() {
        return gdk_anchor_hints_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_anchor_hints_get_type()
     * }
     */
    public static long gdk_anchor_hints_get_type() {
        var mh$ = gdk_anchor_hints_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_anchor_hints_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_edge_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_edge_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_window_edge_get_type()
     * }
     */
    public static FunctionDescriptor gdk_window_edge_get_type$descriptor() {
        return gdk_window_edge_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_window_edge_get_type()
     * }
     */
    public static MethodHandle gdk_window_edge_get_type$handle() {
        return gdk_window_edge_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_window_edge_get_type()
     * }
     */
    public static long gdk_window_edge_get_type() {
        var mh$ = gdk_window_edge_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_edge_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_fullscreen_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_fullscreen_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_fullscreen_mode_get_type()
     * }
     */
    public static FunctionDescriptor gdk_fullscreen_mode_get_type$descriptor() {
        return gdk_fullscreen_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_fullscreen_mode_get_type()
     * }
     */
    public static MethodHandle gdk_fullscreen_mode_get_type$handle() {
        return gdk_fullscreen_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_fullscreen_mode_get_type()
     * }
     */
    public static long gdk_fullscreen_mode_get_type() {
        var mh$ = gdk_fullscreen_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_fullscreen_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark gdk_gl_error_quark()
     * }
     */
    public static FunctionDescriptor gdk_gl_error_quark$descriptor() {
        return gdk_gl_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark gdk_gl_error_quark()
     * }
     */
    public static MethodHandle gdk_gl_error_quark$handle() {
        return gdk_gl_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark gdk_gl_error_quark()
     * }
     */
    public static int gdk_gl_error_quark() {
        var mh$ = gdk_gl_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_gl_context_get_type()
     * }
     */
    public static FunctionDescriptor gdk_gl_context_get_type$descriptor() {
        return gdk_gl_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_gl_context_get_type()
     * }
     */
    public static MethodHandle gdk_gl_context_get_type$handle() {
        return gdk_gl_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_gl_context_get_type()
     * }
     */
    public static long gdk_gl_context_get_type() {
        var mh$ = gdk_gl_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_gl_context_get_display(GdkGLContext *context)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_get_display$descriptor() {
        return gdk_gl_context_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_gl_context_get_display(GdkGLContext *context)
     * }
     */
    public static MethodHandle gdk_gl_context_get_display$handle() {
        return gdk_gl_context_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_gl_context_get_display(GdkGLContext *context)
     * }
     */
    public static MemorySegment gdk_gl_context_get_display(MemorySegment context) {
        var mh$ = gdk_gl_context_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_get_display", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_get_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_get_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_gl_context_get_window(GdkGLContext *context)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_get_window$descriptor() {
        return gdk_gl_context_get_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_gl_context_get_window(GdkGLContext *context)
     * }
     */
    public static MethodHandle gdk_gl_context_get_window$handle() {
        return gdk_gl_context_get_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_gl_context_get_window(GdkGLContext *context)
     * }
     */
    public static MemorySegment gdk_gl_context_get_window(MemorySegment context) {
        var mh$ = gdk_gl_context_get_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_get_window", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_get_shared_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_get_shared_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkGLContext *gdk_gl_context_get_shared_context(GdkGLContext *context)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_get_shared_context$descriptor() {
        return gdk_gl_context_get_shared_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkGLContext *gdk_gl_context_get_shared_context(GdkGLContext *context)
     * }
     */
    public static MethodHandle gdk_gl_context_get_shared_context$handle() {
        return gdk_gl_context_get_shared_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkGLContext *gdk_gl_context_get_shared_context(GdkGLContext *context)
     * }
     */
    public static MemorySegment gdk_gl_context_get_shared_context(MemorySegment context) {
        var mh$ = gdk_gl_context_get_shared_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_get_shared_context", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_get_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_get_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_get_version(GdkGLContext *context, int *major, int *minor)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_get_version$descriptor() {
        return gdk_gl_context_get_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_get_version(GdkGLContext *context, int *major, int *minor)
     * }
     */
    public static MethodHandle gdk_gl_context_get_version$handle() {
        return gdk_gl_context_get_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_gl_context_get_version(GdkGLContext *context, int *major, int *minor)
     * }
     */
    public static void gdk_gl_context_get_version(MemorySegment context, MemorySegment major, MemorySegment minor) {
        var mh$ = gdk_gl_context_get_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_get_version", context, major, minor);
            }
            mh$.invokeExact(context, major, minor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_is_legacy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_is_legacy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_is_legacy(GdkGLContext *context)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_is_legacy$descriptor() {
        return gdk_gl_context_is_legacy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_is_legacy(GdkGLContext *context)
     * }
     */
    public static MethodHandle gdk_gl_context_is_legacy$handle() {
        return gdk_gl_context_is_legacy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_is_legacy(GdkGLContext *context)
     * }
     */
    public static int gdk_gl_context_is_legacy(MemorySegment context) {
        var mh$ = gdk_gl_context_is_legacy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_is_legacy", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_set_required_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_set_required_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_required_version(GdkGLContext *context, int major, int minor)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_set_required_version$descriptor() {
        return gdk_gl_context_set_required_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_required_version(GdkGLContext *context, int major, int minor)
     * }
     */
    public static MethodHandle gdk_gl_context_set_required_version$handle() {
        return gdk_gl_context_set_required_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_required_version(GdkGLContext *context, int major, int minor)
     * }
     */
    public static void gdk_gl_context_set_required_version(MemorySegment context, int major, int minor) {
        var mh$ = gdk_gl_context_set_required_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_set_required_version", context, major, minor);
            }
            mh$.invokeExact(context, major, minor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_get_required_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_get_required_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_get_required_version(GdkGLContext *context, int *major, int *minor)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_get_required_version$descriptor() {
        return gdk_gl_context_get_required_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_get_required_version(GdkGLContext *context, int *major, int *minor)
     * }
     */
    public static MethodHandle gdk_gl_context_get_required_version$handle() {
        return gdk_gl_context_get_required_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_gl_context_get_required_version(GdkGLContext *context, int *major, int *minor)
     * }
     */
    public static void gdk_gl_context_get_required_version(MemorySegment context, MemorySegment major, MemorySegment minor) {
        var mh$ = gdk_gl_context_get_required_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_get_required_version", context, major, minor);
            }
            mh$.invokeExact(context, major, minor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_set_debug_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_set_debug_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_debug_enabled(GdkGLContext *context, gboolean enabled)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_set_debug_enabled$descriptor() {
        return gdk_gl_context_set_debug_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_debug_enabled(GdkGLContext *context, gboolean enabled)
     * }
     */
    public static MethodHandle gdk_gl_context_set_debug_enabled$handle() {
        return gdk_gl_context_set_debug_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_debug_enabled(GdkGLContext *context, gboolean enabled)
     * }
     */
    public static void gdk_gl_context_set_debug_enabled(MemorySegment context, int enabled) {
        var mh$ = gdk_gl_context_set_debug_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_set_debug_enabled", context, enabled);
            }
            mh$.invokeExact(context, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_get_debug_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_get_debug_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_get_debug_enabled(GdkGLContext *context)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_get_debug_enabled$descriptor() {
        return gdk_gl_context_get_debug_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_get_debug_enabled(GdkGLContext *context)
     * }
     */
    public static MethodHandle gdk_gl_context_get_debug_enabled$handle() {
        return gdk_gl_context_get_debug_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_get_debug_enabled(GdkGLContext *context)
     * }
     */
    public static int gdk_gl_context_get_debug_enabled(MemorySegment context) {
        var mh$ = gdk_gl_context_get_debug_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_get_debug_enabled", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_set_forward_compatible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_set_forward_compatible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_forward_compatible(GdkGLContext *context, gboolean compatible)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_set_forward_compatible$descriptor() {
        return gdk_gl_context_set_forward_compatible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_forward_compatible(GdkGLContext *context, gboolean compatible)
     * }
     */
    public static MethodHandle gdk_gl_context_set_forward_compatible$handle() {
        return gdk_gl_context_set_forward_compatible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_forward_compatible(GdkGLContext *context, gboolean compatible)
     * }
     */
    public static void gdk_gl_context_set_forward_compatible(MemorySegment context, int compatible) {
        var mh$ = gdk_gl_context_set_forward_compatible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_set_forward_compatible", context, compatible);
            }
            mh$.invokeExact(context, compatible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_get_forward_compatible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_get_forward_compatible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_get_forward_compatible(GdkGLContext *context)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_get_forward_compatible$descriptor() {
        return gdk_gl_context_get_forward_compatible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_get_forward_compatible(GdkGLContext *context)
     * }
     */
    public static MethodHandle gdk_gl_context_get_forward_compatible$handle() {
        return gdk_gl_context_get_forward_compatible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_get_forward_compatible(GdkGLContext *context)
     * }
     */
    public static int gdk_gl_context_get_forward_compatible(MemorySegment context) {
        var mh$ = gdk_gl_context_get_forward_compatible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_get_forward_compatible", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_set_use_es {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_set_use_es"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_use_es(GdkGLContext *context, int use_es)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_set_use_es$descriptor() {
        return gdk_gl_context_set_use_es.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_use_es(GdkGLContext *context, int use_es)
     * }
     */
    public static MethodHandle gdk_gl_context_set_use_es$handle() {
        return gdk_gl_context_set_use_es.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_gl_context_set_use_es(GdkGLContext *context, int use_es)
     * }
     */
    public static void gdk_gl_context_set_use_es(MemorySegment context, int use_es) {
        var mh$ = gdk_gl_context_set_use_es.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_set_use_es", context, use_es);
            }
            mh$.invokeExact(context, use_es);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_get_use_es {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_get_use_es"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_get_use_es(GdkGLContext *context)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_get_use_es$descriptor() {
        return gdk_gl_context_get_use_es.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_get_use_es(GdkGLContext *context)
     * }
     */
    public static MethodHandle gdk_gl_context_get_use_es$handle() {
        return gdk_gl_context_get_use_es.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_get_use_es(GdkGLContext *context)
     * }
     */
    public static int gdk_gl_context_get_use_es(MemorySegment context) {
        var mh$ = gdk_gl_context_get_use_es.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_get_use_es", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_realize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_realize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_realize(GdkGLContext *context, GError **error)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_realize$descriptor() {
        return gdk_gl_context_realize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_realize(GdkGLContext *context, GError **error)
     * }
     */
    public static MethodHandle gdk_gl_context_realize$handle() {
        return gdk_gl_context_realize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_gl_context_realize(GdkGLContext *context, GError **error)
     * }
     */
    public static int gdk_gl_context_realize(MemorySegment context, MemorySegment error) {
        var mh$ = gdk_gl_context_realize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_realize", context, error);
            }
            return (int)mh$.invokeExact(context, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_make_current {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_make_current"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_make_current(GdkGLContext *context)
     * }
     */
    public static FunctionDescriptor gdk_gl_context_make_current$descriptor() {
        return gdk_gl_context_make_current.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_make_current(GdkGLContext *context)
     * }
     */
    public static MethodHandle gdk_gl_context_make_current$handle() {
        return gdk_gl_context_make_current.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_gl_context_make_current(GdkGLContext *context)
     * }
     */
    public static void gdk_gl_context_make_current(MemorySegment context) {
        var mh$ = gdk_gl_context_make_current.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_make_current", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_get_current {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_get_current"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkGLContext *gdk_gl_context_get_current()
     * }
     */
    public static FunctionDescriptor gdk_gl_context_get_current$descriptor() {
        return gdk_gl_context_get_current.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkGLContext *gdk_gl_context_get_current()
     * }
     */
    public static MethodHandle gdk_gl_context_get_current$handle() {
        return gdk_gl_context_get_current.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkGLContext *gdk_gl_context_get_current()
     * }
     */
    public static MemorySegment gdk_gl_context_get_current() {
        var mh$ = gdk_gl_context_get_current.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_get_current");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_gl_context_clear_current {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_gl_context_clear_current"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_clear_current()
     * }
     */
    public static FunctionDescriptor gdk_gl_context_clear_current$descriptor() {
        return gdk_gl_context_clear_current.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_gl_context_clear_current()
     * }
     */
    public static MethodHandle gdk_gl_context_clear_current$handle() {
        return gdk_gl_context_clear_current.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_gl_context_clear_current()
     * }
     */
    public static void gdk_gl_context_clear_current() {
        var mh$ = gdk_gl_context_clear_current.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_gl_context_clear_current");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_keymap_get_type()
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_type$descriptor() {
        return gdk_keymap_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_keymap_get_type()
     * }
     */
    public static MethodHandle gdk_keymap_get_type$handle() {
        return gdk_keymap_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_keymap_get_type()
     * }
     */
    public static long gdk_keymap_get_type() {
        var mh$ = gdk_keymap_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkKeymap *gdk_keymap_get_default()
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_default$descriptor() {
        return gdk_keymap_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkKeymap *gdk_keymap_get_default()
     * }
     */
    public static MethodHandle gdk_keymap_get_default$handle() {
        return gdk_keymap_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkKeymap *gdk_keymap_get_default()
     * }
     */
    public static MemorySegment gdk_keymap_get_default() {
        var mh$ = gdk_keymap_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_for_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_for_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkKeymap *gdk_keymap_get_for_display(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_for_display$descriptor() {
        return gdk_keymap_get_for_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkKeymap *gdk_keymap_get_for_display(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_keymap_get_for_display$handle() {
        return gdk_keymap_get_for_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkKeymap *gdk_keymap_get_for_display(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_keymap_get_for_display(MemorySegment display) {
        var mh$ = gdk_keymap_get_for_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_for_display", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_lookup_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_lookup_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_keymap_lookup_key(GdkKeymap *keymap, const GdkKeymapKey *key)
     * }
     */
    public static FunctionDescriptor gdk_keymap_lookup_key$descriptor() {
        return gdk_keymap_lookup_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_keymap_lookup_key(GdkKeymap *keymap, const GdkKeymapKey *key)
     * }
     */
    public static MethodHandle gdk_keymap_lookup_key$handle() {
        return gdk_keymap_lookup_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_keymap_lookup_key(GdkKeymap *keymap, const GdkKeymapKey *key)
     * }
     */
    public static int gdk_keymap_lookup_key(MemorySegment keymap, MemorySegment key) {
        var mh$ = gdk_keymap_lookup_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_lookup_key", keymap, key);
            }
            return (int)mh$.invokeExact(keymap, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_translate_keyboard_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_translate_keyboard_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_translate_keyboard_state(GdkKeymap *keymap, guint hardware_keycode, GdkModifierType state, gint group, guint *keyval, gint *effective_group, gint *level, GdkModifierType *consumed_modifiers)
     * }
     */
    public static FunctionDescriptor gdk_keymap_translate_keyboard_state$descriptor() {
        return gdk_keymap_translate_keyboard_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_translate_keyboard_state(GdkKeymap *keymap, guint hardware_keycode, GdkModifierType state, gint group, guint *keyval, gint *effective_group, gint *level, GdkModifierType *consumed_modifiers)
     * }
     */
    public static MethodHandle gdk_keymap_translate_keyboard_state$handle() {
        return gdk_keymap_translate_keyboard_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_translate_keyboard_state(GdkKeymap *keymap, guint hardware_keycode, GdkModifierType state, gint group, guint *keyval, gint *effective_group, gint *level, GdkModifierType *consumed_modifiers)
     * }
     */
    public static int gdk_keymap_translate_keyboard_state(MemorySegment keymap, int hardware_keycode, int state, int group, MemorySegment keyval, MemorySegment effective_group, MemorySegment level, MemorySegment consumed_modifiers) {
        var mh$ = gdk_keymap_translate_keyboard_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_translate_keyboard_state", keymap, hardware_keycode, state, group, keyval, effective_group, level, consumed_modifiers);
            }
            return (int)mh$.invokeExact(keymap, hardware_keycode, state, group, keyval, effective_group, level, consumed_modifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_entries_for_keyval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_entries_for_keyval"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_entries_for_keyval(GdkKeymap *keymap, guint keyval, GdkKeymapKey **keys, gint *n_keys)
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_entries_for_keyval$descriptor() {
        return gdk_keymap_get_entries_for_keyval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_entries_for_keyval(GdkKeymap *keymap, guint keyval, GdkKeymapKey **keys, gint *n_keys)
     * }
     */
    public static MethodHandle gdk_keymap_get_entries_for_keyval$handle() {
        return gdk_keymap_get_entries_for_keyval.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_entries_for_keyval(GdkKeymap *keymap, guint keyval, GdkKeymapKey **keys, gint *n_keys)
     * }
     */
    public static int gdk_keymap_get_entries_for_keyval(MemorySegment keymap, int keyval, MemorySegment keys, MemorySegment n_keys) {
        var mh$ = gdk_keymap_get_entries_for_keyval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_entries_for_keyval", keymap, keyval, keys, n_keys);
            }
            return (int)mh$.invokeExact(keymap, keyval, keys, n_keys);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_entries_for_keycode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_entries_for_keycode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_entries_for_keycode(GdkKeymap *keymap, guint hardware_keycode, GdkKeymapKey **keys, guint **keyvals, gint *n_entries)
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_entries_for_keycode$descriptor() {
        return gdk_keymap_get_entries_for_keycode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_entries_for_keycode(GdkKeymap *keymap, guint hardware_keycode, GdkKeymapKey **keys, guint **keyvals, gint *n_entries)
     * }
     */
    public static MethodHandle gdk_keymap_get_entries_for_keycode$handle() {
        return gdk_keymap_get_entries_for_keycode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_entries_for_keycode(GdkKeymap *keymap, guint hardware_keycode, GdkKeymapKey **keys, guint **keyvals, gint *n_entries)
     * }
     */
    public static int gdk_keymap_get_entries_for_keycode(MemorySegment keymap, int hardware_keycode, MemorySegment keys, MemorySegment keyvals, MemorySegment n_entries) {
        var mh$ = gdk_keymap_get_entries_for_keycode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_entries_for_keycode", keymap, hardware_keycode, keys, keyvals, n_entries);
            }
            return (int)mh$.invokeExact(keymap, hardware_keycode, keys, keyvals, n_entries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoDirection gdk_keymap_get_direction(GdkKeymap *keymap)
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_direction$descriptor() {
        return gdk_keymap_get_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoDirection gdk_keymap_get_direction(GdkKeymap *keymap)
     * }
     */
    public static MethodHandle gdk_keymap_get_direction$handle() {
        return gdk_keymap_get_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoDirection gdk_keymap_get_direction(GdkKeymap *keymap)
     * }
     */
    public static int gdk_keymap_get_direction(MemorySegment keymap) {
        var mh$ = gdk_keymap_get_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_direction", keymap);
            }
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_have_bidi_layouts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_have_bidi_layouts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_have_bidi_layouts(GdkKeymap *keymap)
     * }
     */
    public static FunctionDescriptor gdk_keymap_have_bidi_layouts$descriptor() {
        return gdk_keymap_have_bidi_layouts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_have_bidi_layouts(GdkKeymap *keymap)
     * }
     */
    public static MethodHandle gdk_keymap_have_bidi_layouts$handle() {
        return gdk_keymap_have_bidi_layouts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_have_bidi_layouts(GdkKeymap *keymap)
     * }
     */
    public static int gdk_keymap_have_bidi_layouts(MemorySegment keymap) {
        var mh$ = gdk_keymap_have_bidi_layouts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_have_bidi_layouts", keymap);
            }
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_caps_lock_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_caps_lock_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_caps_lock_state(GdkKeymap *keymap)
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_caps_lock_state$descriptor() {
        return gdk_keymap_get_caps_lock_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_caps_lock_state(GdkKeymap *keymap)
     * }
     */
    public static MethodHandle gdk_keymap_get_caps_lock_state$handle() {
        return gdk_keymap_get_caps_lock_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_caps_lock_state(GdkKeymap *keymap)
     * }
     */
    public static int gdk_keymap_get_caps_lock_state(MemorySegment keymap) {
        var mh$ = gdk_keymap_get_caps_lock_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_caps_lock_state", keymap);
            }
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_num_lock_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_num_lock_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_num_lock_state(GdkKeymap *keymap)
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_num_lock_state$descriptor() {
        return gdk_keymap_get_num_lock_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_num_lock_state(GdkKeymap *keymap)
     * }
     */
    public static MethodHandle gdk_keymap_get_num_lock_state$handle() {
        return gdk_keymap_get_num_lock_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_num_lock_state(GdkKeymap *keymap)
     * }
     */
    public static int gdk_keymap_get_num_lock_state(MemorySegment keymap) {
        var mh$ = gdk_keymap_get_num_lock_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_num_lock_state", keymap);
            }
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_scroll_lock_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_scroll_lock_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_scroll_lock_state(GdkKeymap *keymap)
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_scroll_lock_state$descriptor() {
        return gdk_keymap_get_scroll_lock_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_scroll_lock_state(GdkKeymap *keymap)
     * }
     */
    public static MethodHandle gdk_keymap_get_scroll_lock_state$handle() {
        return gdk_keymap_get_scroll_lock_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_get_scroll_lock_state(GdkKeymap *keymap)
     * }
     */
    public static int gdk_keymap_get_scroll_lock_state(MemorySegment keymap) {
        var mh$ = gdk_keymap_get_scroll_lock_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_scroll_lock_state", keymap);
            }
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_modifier_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_modifier_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_keymap_get_modifier_state(GdkKeymap *keymap)
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_modifier_state$descriptor() {
        return gdk_keymap_get_modifier_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_keymap_get_modifier_state(GdkKeymap *keymap)
     * }
     */
    public static MethodHandle gdk_keymap_get_modifier_state$handle() {
        return gdk_keymap_get_modifier_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_keymap_get_modifier_state(GdkKeymap *keymap)
     * }
     */
    public static int gdk_keymap_get_modifier_state(MemorySegment keymap) {
        var mh$ = gdk_keymap_get_modifier_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_modifier_state", keymap);
            }
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_add_virtual_modifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_add_virtual_modifiers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_keymap_add_virtual_modifiers(GdkKeymap *keymap, GdkModifierType *state)
     * }
     */
    public static FunctionDescriptor gdk_keymap_add_virtual_modifiers$descriptor() {
        return gdk_keymap_add_virtual_modifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_keymap_add_virtual_modifiers(GdkKeymap *keymap, GdkModifierType *state)
     * }
     */
    public static MethodHandle gdk_keymap_add_virtual_modifiers$handle() {
        return gdk_keymap_add_virtual_modifiers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_keymap_add_virtual_modifiers(GdkKeymap *keymap, GdkModifierType *state)
     * }
     */
    public static void gdk_keymap_add_virtual_modifiers(MemorySegment keymap, MemorySegment state) {
        var mh$ = gdk_keymap_add_virtual_modifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_add_virtual_modifiers", keymap, state);
            }
            mh$.invokeExact(keymap, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_map_virtual_modifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_map_virtual_modifiers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_map_virtual_modifiers(GdkKeymap *keymap, GdkModifierType *state)
     * }
     */
    public static FunctionDescriptor gdk_keymap_map_virtual_modifiers$descriptor() {
        return gdk_keymap_map_virtual_modifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_map_virtual_modifiers(GdkKeymap *keymap, GdkModifierType *state)
     * }
     */
    public static MethodHandle gdk_keymap_map_virtual_modifiers$handle() {
        return gdk_keymap_map_virtual_modifiers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_keymap_map_virtual_modifiers(GdkKeymap *keymap, GdkModifierType *state)
     * }
     */
    public static int gdk_keymap_map_virtual_modifiers(MemorySegment keymap, MemorySegment state) {
        var mh$ = gdk_keymap_map_virtual_modifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_map_virtual_modifiers", keymap, state);
            }
            return (int)mh$.invokeExact(keymap, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keymap_get_modifier_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keymap_get_modifier_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkModifierType gdk_keymap_get_modifier_mask(GdkKeymap *keymap, GdkModifierIntent intent)
     * }
     */
    public static FunctionDescriptor gdk_keymap_get_modifier_mask$descriptor() {
        return gdk_keymap_get_modifier_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkModifierType gdk_keymap_get_modifier_mask(GdkKeymap *keymap, GdkModifierIntent intent)
     * }
     */
    public static MethodHandle gdk_keymap_get_modifier_mask$handle() {
        return gdk_keymap_get_modifier_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkModifierType gdk_keymap_get_modifier_mask(GdkKeymap *keymap, GdkModifierIntent intent)
     * }
     */
    public static int gdk_keymap_get_modifier_mask(MemorySegment keymap, int intent) {
        var mh$ = gdk_keymap_get_modifier_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keymap_get_modifier_mask", keymap, intent);
            }
            return (int)mh$.invokeExact(keymap, intent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keyval_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keyval_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_keyval_name(guint keyval)
     * }
     */
    public static FunctionDescriptor gdk_keyval_name$descriptor() {
        return gdk_keyval_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_keyval_name(guint keyval)
     * }
     */
    public static MethodHandle gdk_keyval_name$handle() {
        return gdk_keyval_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_keyval_name(guint keyval)
     * }
     */
    public static MemorySegment gdk_keyval_name(int keyval) {
        var mh$ = gdk_keyval_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keyval_name", keyval);
            }
            return (MemorySegment)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keyval_from_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keyval_from_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_keyval_from_name(const gchar *keyval_name)
     * }
     */
    public static FunctionDescriptor gdk_keyval_from_name$descriptor() {
        return gdk_keyval_from_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_keyval_from_name(const gchar *keyval_name)
     * }
     */
    public static MethodHandle gdk_keyval_from_name$handle() {
        return gdk_keyval_from_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_keyval_from_name(const gchar *keyval_name)
     * }
     */
    public static int gdk_keyval_from_name(MemorySegment keyval_name) {
        var mh$ = gdk_keyval_from_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keyval_from_name", keyval_name);
            }
            return (int)mh$.invokeExact(keyval_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keyval_convert_case {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keyval_convert_case"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_keyval_convert_case(guint symbol, guint *lower, guint *upper)
     * }
     */
    public static FunctionDescriptor gdk_keyval_convert_case$descriptor() {
        return gdk_keyval_convert_case.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_keyval_convert_case(guint symbol, guint *lower, guint *upper)
     * }
     */
    public static MethodHandle gdk_keyval_convert_case$handle() {
        return gdk_keyval_convert_case.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_keyval_convert_case(guint symbol, guint *lower, guint *upper)
     * }
     */
    public static void gdk_keyval_convert_case(int symbol, MemorySegment lower, MemorySegment upper) {
        var mh$ = gdk_keyval_convert_case.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keyval_convert_case", symbol, lower, upper);
            }
            mh$.invokeExact(symbol, lower, upper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keyval_to_upper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keyval_to_upper"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_keyval_to_upper(guint keyval)
     * }
     */
    public static FunctionDescriptor gdk_keyval_to_upper$descriptor() {
        return gdk_keyval_to_upper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_keyval_to_upper(guint keyval)
     * }
     */
    public static MethodHandle gdk_keyval_to_upper$handle() {
        return gdk_keyval_to_upper.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_keyval_to_upper(guint keyval)
     * }
     */
    public static int gdk_keyval_to_upper(int keyval) {
        var mh$ = gdk_keyval_to_upper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keyval_to_upper", keyval);
            }
            return (int)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keyval_to_lower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keyval_to_lower"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_keyval_to_lower(guint keyval)
     * }
     */
    public static FunctionDescriptor gdk_keyval_to_lower$descriptor() {
        return gdk_keyval_to_lower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_keyval_to_lower(guint keyval)
     * }
     */
    public static MethodHandle gdk_keyval_to_lower$handle() {
        return gdk_keyval_to_lower.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_keyval_to_lower(guint keyval)
     * }
     */
    public static int gdk_keyval_to_lower(int keyval) {
        var mh$ = gdk_keyval_to_lower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keyval_to_lower", keyval);
            }
            return (int)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keyval_is_upper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keyval_is_upper"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_keyval_is_upper(guint keyval)
     * }
     */
    public static FunctionDescriptor gdk_keyval_is_upper$descriptor() {
        return gdk_keyval_is_upper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_keyval_is_upper(guint keyval)
     * }
     */
    public static MethodHandle gdk_keyval_is_upper$handle() {
        return gdk_keyval_is_upper.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_keyval_is_upper(guint keyval)
     * }
     */
    public static int gdk_keyval_is_upper(int keyval) {
        var mh$ = gdk_keyval_is_upper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keyval_is_upper", keyval);
            }
            return (int)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keyval_is_lower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keyval_is_lower"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_keyval_is_lower(guint keyval)
     * }
     */
    public static FunctionDescriptor gdk_keyval_is_lower$descriptor() {
        return gdk_keyval_is_lower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_keyval_is_lower(guint keyval)
     * }
     */
    public static MethodHandle gdk_keyval_is_lower$handle() {
        return gdk_keyval_is_lower.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_keyval_is_lower(guint keyval)
     * }
     */
    public static int gdk_keyval_is_lower(int keyval) {
        var mh$ = gdk_keyval_is_lower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keyval_is_lower", keyval);
            }
            return (int)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keyval_to_unicode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keyval_to_unicode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 gdk_keyval_to_unicode(guint keyval)
     * }
     */
    public static FunctionDescriptor gdk_keyval_to_unicode$descriptor() {
        return gdk_keyval_to_unicode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 gdk_keyval_to_unicode(guint keyval)
     * }
     */
    public static MethodHandle gdk_keyval_to_unicode$handle() {
        return gdk_keyval_to_unicode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 gdk_keyval_to_unicode(guint keyval)
     * }
     */
    public static int gdk_keyval_to_unicode(int keyval) {
        var mh$ = gdk_keyval_to_unicode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keyval_to_unicode", keyval);
            }
            return (int)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_unicode_to_keyval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_unicode_to_keyval"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_unicode_to_keyval(guint32 wc)
     * }
     */
    public static FunctionDescriptor gdk_unicode_to_keyval$descriptor() {
        return gdk_unicode_to_keyval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_unicode_to_keyval(guint32 wc)
     * }
     */
    public static MethodHandle gdk_unicode_to_keyval$handle() {
        return gdk_unicode_to_keyval.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_unicode_to_keyval(guint32 wc)
     * }
     */
    public static int gdk_unicode_to_keyval(int wc) {
        var mh$ = gdk_unicode_to_keyval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_unicode_to_keyval", wc);
            }
            return (int)mh$.invokeExact(wc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_parse_args {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_parse_args"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_parse_args(gint *argc, gchar ***argv)
     * }
     */
    public static FunctionDescriptor gdk_parse_args$descriptor() {
        return gdk_parse_args.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_parse_args(gint *argc, gchar ***argv)
     * }
     */
    public static MethodHandle gdk_parse_args$handle() {
        return gdk_parse_args.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_parse_args(gint *argc, gchar ***argv)
     * }
     */
    public static void gdk_parse_args(MemorySegment argc, MemorySegment argv) {
        var mh$ = gdk_parse_args.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_parse_args", argc, argv);
            }
            mh$.invokeExact(argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_init(gint *argc, gchar ***argv)
     * }
     */
    public static FunctionDescriptor gdk_init$descriptor() {
        return gdk_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_init(gint *argc, gchar ***argv)
     * }
     */
    public static MethodHandle gdk_init$handle() {
        return gdk_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_init(gint *argc, gchar ***argv)
     * }
     */
    public static void gdk_init(MemorySegment argc, MemorySegment argv) {
        var mh$ = gdk_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_init", argc, argv);
            }
            mh$.invokeExact(argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_init_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_init_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_init_check(gint *argc, gchar ***argv)
     * }
     */
    public static FunctionDescriptor gdk_init_check$descriptor() {
        return gdk_init_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_init_check(gint *argc, gchar ***argv)
     * }
     */
    public static MethodHandle gdk_init_check$handle() {
        return gdk_init_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_init_check(gint *argc, gchar ***argv)
     * }
     */
    public static int gdk_init_check(MemorySegment argc, MemorySegment argv) {
        var mh$ = gdk_init_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_init_check", argc, argv);
            }
            return (int)mh$.invokeExact(argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_add_option_entries_libgtk_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_add_option_entries_libgtk_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_add_option_entries_libgtk_only(GOptionGroup *group)
     * }
     */
    public static FunctionDescriptor gdk_add_option_entries_libgtk_only$descriptor() {
        return gdk_add_option_entries_libgtk_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_add_option_entries_libgtk_only(GOptionGroup *group)
     * }
     */
    public static MethodHandle gdk_add_option_entries_libgtk_only$handle() {
        return gdk_add_option_entries_libgtk_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_add_option_entries_libgtk_only(GOptionGroup *group)
     * }
     */
    public static void gdk_add_option_entries_libgtk_only(MemorySegment group) {
        var mh$ = gdk_add_option_entries_libgtk_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_add_option_entries_libgtk_only", group);
            }
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pre_parse_libgtk_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pre_parse_libgtk_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pre_parse_libgtk_only()
     * }
     */
    public static FunctionDescriptor gdk_pre_parse_libgtk_only$descriptor() {
        return gdk_pre_parse_libgtk_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pre_parse_libgtk_only()
     * }
     */
    public static MethodHandle gdk_pre_parse_libgtk_only$handle() {
        return gdk_pre_parse_libgtk_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pre_parse_libgtk_only()
     * }
     */
    public static void gdk_pre_parse_libgtk_only() {
        var mh$ = gdk_pre_parse_libgtk_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pre_parse_libgtk_only");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_get_program_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_get_program_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gdk_get_program_class()
     * }
     */
    public static FunctionDescriptor gdk_get_program_class$descriptor() {
        return gdk_get_program_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gdk_get_program_class()
     * }
     */
    public static MethodHandle gdk_get_program_class$handle() {
        return gdk_get_program_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gdk_get_program_class()
     * }
     */
    public static MemorySegment gdk_get_program_class() {
        var mh$ = gdk_get_program_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_get_program_class");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_set_program_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_set_program_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_set_program_class(const gchar *program_class)
     * }
     */
    public static FunctionDescriptor gdk_set_program_class$descriptor() {
        return gdk_set_program_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_set_program_class(const gchar *program_class)
     * }
     */
    public static MethodHandle gdk_set_program_class$handle() {
        return gdk_set_program_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_set_program_class(const gchar *program_class)
     * }
     */
    public static void gdk_set_program_class(MemorySegment program_class) {
        var mh$ = gdk_set_program_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_set_program_class", program_class);
            }
            mh$.invokeExact(program_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_notify_startup_complete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_notify_startup_complete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_notify_startup_complete()
     * }
     */
    public static FunctionDescriptor gdk_notify_startup_complete$descriptor() {
        return gdk_notify_startup_complete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_notify_startup_complete()
     * }
     */
    public static MethodHandle gdk_notify_startup_complete$handle() {
        return gdk_notify_startup_complete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_notify_startup_complete()
     * }
     */
    public static void gdk_notify_startup_complete() {
        var mh$ = gdk_notify_startup_complete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_notify_startup_complete");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_notify_startup_complete_with_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_notify_startup_complete_with_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_notify_startup_complete_with_id(const gchar *startup_id)
     * }
     */
    public static FunctionDescriptor gdk_notify_startup_complete_with_id$descriptor() {
        return gdk_notify_startup_complete_with_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_notify_startup_complete_with_id(const gchar *startup_id)
     * }
     */
    public static MethodHandle gdk_notify_startup_complete_with_id$handle() {
        return gdk_notify_startup_complete_with_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_notify_startup_complete_with_id(const gchar *startup_id)
     * }
     */
    public static void gdk_notify_startup_complete_with_id(MemorySegment startup_id) {
        var mh$ = gdk_notify_startup_complete_with_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_notify_startup_complete_with_id", startup_id);
            }
            mh$.invokeExact(startup_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_error_trap_push {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_error_trap_push"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_error_trap_push()
     * }
     */
    public static FunctionDescriptor gdk_error_trap_push$descriptor() {
        return gdk_error_trap_push.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_error_trap_push()
     * }
     */
    public static MethodHandle gdk_error_trap_push$handle() {
        return gdk_error_trap_push.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_error_trap_push()
     * }
     */
    public static void gdk_error_trap_push() {
        var mh$ = gdk_error_trap_push.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_error_trap_push");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_error_trap_pop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_error_trap_pop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_error_trap_pop()
     * }
     */
    public static FunctionDescriptor gdk_error_trap_pop$descriptor() {
        return gdk_error_trap_pop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_error_trap_pop()
     * }
     */
    public static MethodHandle gdk_error_trap_pop$handle() {
        return gdk_error_trap_pop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_error_trap_pop()
     * }
     */
    public static int gdk_error_trap_pop() {
        var mh$ = gdk_error_trap_pop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_error_trap_pop");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_error_trap_pop_ignored {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_error_trap_pop_ignored"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_error_trap_pop_ignored()
     * }
     */
    public static FunctionDescriptor gdk_error_trap_pop_ignored$descriptor() {
        return gdk_error_trap_pop_ignored.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_error_trap_pop_ignored()
     * }
     */
    public static MethodHandle gdk_error_trap_pop_ignored$handle() {
        return gdk_error_trap_pop_ignored.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_error_trap_pop_ignored()
     * }
     */
    public static void gdk_error_trap_pop_ignored() {
        var mh$ = gdk_error_trap_pop_ignored.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_error_trap_pop_ignored");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_get_display_arg_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_get_display_arg_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gdk_get_display_arg_name()
     * }
     */
    public static FunctionDescriptor gdk_get_display_arg_name$descriptor() {
        return gdk_get_display_arg_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gdk_get_display_arg_name()
     * }
     */
    public static MethodHandle gdk_get_display_arg_name$handle() {
        return gdk_get_display_arg_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gdk_get_display_arg_name()
     * }
     */
    public static MemorySegment gdk_get_display_arg_name() {
        var mh$ = gdk_get_display_arg_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_get_display_arg_name");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_get_display()
     * }
     */
    public static FunctionDescriptor gdk_get_display$descriptor() {
        return gdk_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_get_display()
     * }
     */
    public static MethodHandle gdk_get_display$handle() {
        return gdk_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_get_display()
     * }
     */
    public static MemorySegment gdk_get_display() {
        var mh$ = gdk_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_get_display");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pointer_grab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pointer_grab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_pointer_grab(GdkWindow *window, gboolean owner_events, GdkEventMask event_mask, GdkWindow *confine_to, GdkCursor *cursor, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_pointer_grab$descriptor() {
        return gdk_pointer_grab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_pointer_grab(GdkWindow *window, gboolean owner_events, GdkEventMask event_mask, GdkWindow *confine_to, GdkCursor *cursor, guint32 time_)
     * }
     */
    public static MethodHandle gdk_pointer_grab$handle() {
        return gdk_pointer_grab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_pointer_grab(GdkWindow *window, gboolean owner_events, GdkEventMask event_mask, GdkWindow *confine_to, GdkCursor *cursor, guint32 time_)
     * }
     */
    public static int gdk_pointer_grab(MemorySegment window, int owner_events, int event_mask, MemorySegment confine_to, MemorySegment cursor, int time_) {
        var mh$ = gdk_pointer_grab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pointer_grab", window, owner_events, event_mask, confine_to, cursor, time_);
            }
            return (int)mh$.invokeExact(window, owner_events, event_mask, confine_to, cursor, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keyboard_grab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keyboard_grab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_keyboard_grab(GdkWindow *window, gboolean owner_events, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_keyboard_grab$descriptor() {
        return gdk_keyboard_grab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_keyboard_grab(GdkWindow *window, gboolean owner_events, guint32 time_)
     * }
     */
    public static MethodHandle gdk_keyboard_grab$handle() {
        return gdk_keyboard_grab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_keyboard_grab(GdkWindow *window, gboolean owner_events, guint32 time_)
     * }
     */
    public static int gdk_keyboard_grab(MemorySegment window, int owner_events, int time_) {
        var mh$ = gdk_keyboard_grab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keyboard_grab", window, owner_events, time_);
            }
            return (int)mh$.invokeExact(window, owner_events, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pointer_ungrab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pointer_ungrab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_pointer_ungrab(guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_pointer_ungrab$descriptor() {
        return gdk_pointer_ungrab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_pointer_ungrab(guint32 time_)
     * }
     */
    public static MethodHandle gdk_pointer_ungrab$handle() {
        return gdk_pointer_ungrab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_pointer_ungrab(guint32 time_)
     * }
     */
    public static void gdk_pointer_ungrab(int time_) {
        var mh$ = gdk_pointer_ungrab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pointer_ungrab", time_);
            }
            mh$.invokeExact(time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_keyboard_ungrab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_keyboard_ungrab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_keyboard_ungrab(guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_keyboard_ungrab$descriptor() {
        return gdk_keyboard_ungrab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_keyboard_ungrab(guint32 time_)
     * }
     */
    public static MethodHandle gdk_keyboard_ungrab$handle() {
        return gdk_keyboard_ungrab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_keyboard_ungrab(guint32 time_)
     * }
     */
    public static void gdk_keyboard_ungrab(int time_) {
        var mh$ = gdk_keyboard_ungrab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_keyboard_ungrab", time_);
            }
            mh$.invokeExact(time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pointer_is_grabbed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pointer_is_grabbed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_pointer_is_grabbed()
     * }
     */
    public static FunctionDescriptor gdk_pointer_is_grabbed$descriptor() {
        return gdk_pointer_is_grabbed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_pointer_is_grabbed()
     * }
     */
    public static MethodHandle gdk_pointer_is_grabbed$handle() {
        return gdk_pointer_is_grabbed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_pointer_is_grabbed()
     * }
     */
    public static int gdk_pointer_is_grabbed() {
        var mh$ = gdk_pointer_is_grabbed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pointer_is_grabbed");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_width()
     * }
     */
    public static FunctionDescriptor gdk_screen_width$descriptor() {
        return gdk_screen_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_width()
     * }
     */
    public static MethodHandle gdk_screen_width$handle() {
        return gdk_screen_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_width()
     * }
     */
    public static int gdk_screen_width() {
        var mh$ = gdk_screen_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_width");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_height()
     * }
     */
    public static FunctionDescriptor gdk_screen_height$descriptor() {
        return gdk_screen_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_height()
     * }
     */
    public static MethodHandle gdk_screen_height$handle() {
        return gdk_screen_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_height()
     * }
     */
    public static int gdk_screen_height() {
        var mh$ = gdk_screen_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_height");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_width_mm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_width_mm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_width_mm()
     * }
     */
    public static FunctionDescriptor gdk_screen_width_mm$descriptor() {
        return gdk_screen_width_mm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_width_mm()
     * }
     */
    public static MethodHandle gdk_screen_width_mm$handle() {
        return gdk_screen_width_mm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_width_mm()
     * }
     */
    public static int gdk_screen_width_mm() {
        var mh$ = gdk_screen_width_mm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_width_mm");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_screen_height_mm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_screen_height_mm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_screen_height_mm()
     * }
     */
    public static FunctionDescriptor gdk_screen_height_mm$descriptor() {
        return gdk_screen_height_mm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_screen_height_mm()
     * }
     */
    public static MethodHandle gdk_screen_height_mm$handle() {
        return gdk_screen_height_mm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_screen_height_mm()
     * }
     */
    public static int gdk_screen_height_mm() {
        var mh$ = gdk_screen_height_mm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_screen_height_mm");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_set_double_click_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_set_double_click_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_set_double_click_time(guint msec)
     * }
     */
    public static FunctionDescriptor gdk_set_double_click_time$descriptor() {
        return gdk_set_double_click_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_set_double_click_time(guint msec)
     * }
     */
    public static MethodHandle gdk_set_double_click_time$handle() {
        return gdk_set_double_click_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_set_double_click_time(guint msec)
     * }
     */
    public static void gdk_set_double_click_time(int msec) {
        var mh$ = gdk_set_double_click_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_set_double_click_time", msec);
            }
            mh$.invokeExact(msec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_beep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_beep"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_beep()
     * }
     */
    public static FunctionDescriptor gdk_beep$descriptor() {
        return gdk_beep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_beep()
     * }
     */
    public static MethodHandle gdk_beep$handle() {
        return gdk_beep.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_beep()
     * }
     */
    public static void gdk_beep() {
        var mh$ = gdk_beep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_beep");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_flush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_flush()
     * }
     */
    public static FunctionDescriptor gdk_flush$descriptor() {
        return gdk_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_flush()
     * }
     */
    public static MethodHandle gdk_flush$handle() {
        return gdk_flush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_flush()
     * }
     */
    public static void gdk_flush() {
        var mh$ = gdk_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_flush");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_disable_multidevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_disable_multidevice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_disable_multidevice()
     * }
     */
    public static FunctionDescriptor gdk_disable_multidevice$descriptor() {
        return gdk_disable_multidevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_disable_multidevice()
     * }
     */
    public static MethodHandle gdk_disable_multidevice$handle() {
        return gdk_disable_multidevice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_disable_multidevice()
     * }
     */
    public static void gdk_disable_multidevice() {
        var mh$ = gdk_disable_multidevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_disable_multidevice");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_set_allowed_backends {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_set_allowed_backends"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_set_allowed_backends(const gchar *backends)
     * }
     */
    public static FunctionDescriptor gdk_set_allowed_backends$descriptor() {
        return gdk_set_allowed_backends.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_set_allowed_backends(const gchar *backends)
     * }
     */
    public static MethodHandle gdk_set_allowed_backends$handle() {
        return gdk_set_allowed_backends.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_set_allowed_backends(const gchar *backends)
     * }
     */
    public static void gdk_set_allowed_backends(MemorySegment backends) {
        var mh$ = gdk_set_allowed_backends.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_set_allowed_backends", backends);
            }
            mh$.invokeExact(backends);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pango_context_get_for_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pango_context_get_for_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *gdk_pango_context_get_for_screen(GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_pango_context_get_for_screen$descriptor() {
        return gdk_pango_context_get_for_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *gdk_pango_context_get_for_screen(GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_pango_context_get_for_screen$handle() {
        return gdk_pango_context_get_for_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *gdk_pango_context_get_for_screen(GdkScreen *screen)
     * }
     */
    public static MemorySegment gdk_pango_context_get_for_screen(MemorySegment screen) {
        var mh$ = gdk_pango_context_get_for_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pango_context_get_for_screen", screen);
            }
            return (MemorySegment)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pango_context_get_for_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pango_context_get_for_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *gdk_pango_context_get_for_display(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gdk_pango_context_get_for_display$descriptor() {
        return gdk_pango_context_get_for_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *gdk_pango_context_get_for_display(GdkDisplay *display)
     * }
     */
    public static MethodHandle gdk_pango_context_get_for_display$handle() {
        return gdk_pango_context_get_for_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *gdk_pango_context_get_for_display(GdkDisplay *display)
     * }
     */
    public static MemorySegment gdk_pango_context_get_for_display(MemorySegment display) {
        var mh$ = gdk_pango_context_get_for_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pango_context_get_for_display", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pango_context_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pango_context_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *gdk_pango_context_get()
     * }
     */
    public static FunctionDescriptor gdk_pango_context_get$descriptor() {
        return gdk_pango_context_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *gdk_pango_context_get()
     * }
     */
    public static MethodHandle gdk_pango_context_get$handle() {
        return gdk_pango_context_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *gdk_pango_context_get()
     * }
     */
    public static MemorySegment gdk_pango_context_get() {
        var mh$ = gdk_pango_context_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pango_context_get");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pango_layout_line_get_clip_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pango_layout_line_get_clip_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_pango_layout_line_get_clip_region(PangoLayoutLine *line, gint x_origin, gint y_origin, const gint *index_ranges, gint n_ranges)
     * }
     */
    public static FunctionDescriptor gdk_pango_layout_line_get_clip_region$descriptor() {
        return gdk_pango_layout_line_get_clip_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_pango_layout_line_get_clip_region(PangoLayoutLine *line, gint x_origin, gint y_origin, const gint *index_ranges, gint n_ranges)
     * }
     */
    public static MethodHandle gdk_pango_layout_line_get_clip_region$handle() {
        return gdk_pango_layout_line_get_clip_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_pango_layout_line_get_clip_region(PangoLayoutLine *line, gint x_origin, gint y_origin, const gint *index_ranges, gint n_ranges)
     * }
     */
    public static MemorySegment gdk_pango_layout_line_get_clip_region(MemorySegment line, int x_origin, int y_origin, MemorySegment index_ranges, int n_ranges) {
        var mh$ = gdk_pango_layout_line_get_clip_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pango_layout_line_get_clip_region", line, x_origin, y_origin, index_ranges, n_ranges);
            }
            return (MemorySegment)mh$.invokeExact(line, x_origin, y_origin, index_ranges, n_ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_pango_layout_get_clip_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_pango_layout_get_clip_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_pango_layout_get_clip_region(PangoLayout *layout, gint x_origin, gint y_origin, const gint *index_ranges, gint n_ranges)
     * }
     */
    public static FunctionDescriptor gdk_pango_layout_get_clip_region$descriptor() {
        return gdk_pango_layout_get_clip_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_pango_layout_get_clip_region(PangoLayout *layout, gint x_origin, gint y_origin, const gint *index_ranges, gint n_ranges)
     * }
     */
    public static MethodHandle gdk_pango_layout_get_clip_region$handle() {
        return gdk_pango_layout_get_clip_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_pango_layout_get_clip_region(PangoLayout *layout, gint x_origin, gint y_origin, const gint *index_ranges, gint n_ranges)
     * }
     */
    public static MemorySegment gdk_pango_layout_get_clip_region(MemorySegment layout, int x_origin, int y_origin, MemorySegment index_ranges, int n_ranges) {
        var mh$ = gdk_pango_layout_get_clip_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_pango_layout_get_clip_region", layout, x_origin, y_origin, index_ranges, n_ranges);
            }
            return (MemorySegment)mh$.invokeExact(layout, x_origin, y_origin, index_ranges, n_ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_PROP_MODE_REPLACE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROP_MODE_REPLACE = 0
     * }
     */
    public static int GDK_PROP_MODE_REPLACE() {
        return GDK_PROP_MODE_REPLACE;
    }
    private static final int GDK_PROP_MODE_PREPEND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROP_MODE_PREPEND = 1
     * }
     */
    public static int GDK_PROP_MODE_PREPEND() {
        return GDK_PROP_MODE_PREPEND;
    }
    private static final int GDK_PROP_MODE_APPEND = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROP_MODE_APPEND = 2
     * }
     */
    public static int GDK_PROP_MODE_APPEND() {
        return GDK_PROP_MODE_APPEND;
    }

    private static class gdk_atom_intern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_atom_intern"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gdk_atom_intern(const gchar *atom_name, gboolean only_if_exists)
     * }
     */
    public static FunctionDescriptor gdk_atom_intern$descriptor() {
        return gdk_atom_intern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gdk_atom_intern(const gchar *atom_name, gboolean only_if_exists)
     * }
     */
    public static MethodHandle gdk_atom_intern$handle() {
        return gdk_atom_intern.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gdk_atom_intern(const gchar *atom_name, gboolean only_if_exists)
     * }
     */
    public static MemorySegment gdk_atom_intern(MemorySegment atom_name, int only_if_exists) {
        var mh$ = gdk_atom_intern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_atom_intern", atom_name, only_if_exists);
            }
            return (MemorySegment)mh$.invokeExact(atom_name, only_if_exists);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_atom_intern_static_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_atom_intern_static_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gdk_atom_intern_static_string(const gchar *atom_name)
     * }
     */
    public static FunctionDescriptor gdk_atom_intern_static_string$descriptor() {
        return gdk_atom_intern_static_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gdk_atom_intern_static_string(const gchar *atom_name)
     * }
     */
    public static MethodHandle gdk_atom_intern_static_string$handle() {
        return gdk_atom_intern_static_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gdk_atom_intern_static_string(const gchar *atom_name)
     * }
     */
    public static MemorySegment gdk_atom_intern_static_string(MemorySegment atom_name) {
        var mh$ = gdk_atom_intern_static_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_atom_intern_static_string", atom_name);
            }
            return (MemorySegment)mh$.invokeExact(atom_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_atom_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_atom_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_atom_name(GdkAtom atom)
     * }
     */
    public static FunctionDescriptor gdk_atom_name$descriptor() {
        return gdk_atom_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_atom_name(GdkAtom atom)
     * }
     */
    public static MethodHandle gdk_atom_name$handle() {
        return gdk_atom_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_atom_name(GdkAtom atom)
     * }
     */
    public static MemorySegment gdk_atom_name(MemorySegment atom) {
        var mh$ = gdk_atom_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_atom_name", atom);
            }
            return (MemorySegment)mh$.invokeExact(atom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_property_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_property_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_property_get(GdkWindow *window, GdkAtom property, GdkAtom type, gulong offset, gulong length, gint pdelete, GdkAtom *actual_property_type, gint *actual_format, gint *actual_length, guchar **data)
     * }
     */
    public static FunctionDescriptor gdk_property_get$descriptor() {
        return gdk_property_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_property_get(GdkWindow *window, GdkAtom property, GdkAtom type, gulong offset, gulong length, gint pdelete, GdkAtom *actual_property_type, gint *actual_format, gint *actual_length, guchar **data)
     * }
     */
    public static MethodHandle gdk_property_get$handle() {
        return gdk_property_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_property_get(GdkWindow *window, GdkAtom property, GdkAtom type, gulong offset, gulong length, gint pdelete, GdkAtom *actual_property_type, gint *actual_format, gint *actual_length, guchar **data)
     * }
     */
    public static int gdk_property_get(MemorySegment window, MemorySegment property, MemorySegment type, long offset, long length, int pdelete, MemorySegment actual_property_type, MemorySegment actual_format, MemorySegment actual_length, MemorySegment data) {
        var mh$ = gdk_property_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_property_get", window, property, type, offset, length, pdelete, actual_property_type, actual_format, actual_length, data);
            }
            return (int)mh$.invokeExact(window, property, type, offset, length, pdelete, actual_property_type, actual_format, actual_length, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_property_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_property_change"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_property_change(GdkWindow *window, GdkAtom property, GdkAtom type, gint format, GdkPropMode mode, const guchar *data, gint nelements)
     * }
     */
    public static FunctionDescriptor gdk_property_change$descriptor() {
        return gdk_property_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_property_change(GdkWindow *window, GdkAtom property, GdkAtom type, gint format, GdkPropMode mode, const guchar *data, gint nelements)
     * }
     */
    public static MethodHandle gdk_property_change$handle() {
        return gdk_property_change.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_property_change(GdkWindow *window, GdkAtom property, GdkAtom type, gint format, GdkPropMode mode, const guchar *data, gint nelements)
     * }
     */
    public static void gdk_property_change(MemorySegment window, MemorySegment property, MemorySegment type, int format, int mode, MemorySegment data, int nelements) {
        var mh$ = gdk_property_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_property_change", window, property, type, format, mode, data, nelements);
            }
            mh$.invokeExact(window, property, type, format, mode, data, nelements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_property_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_property_delete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_property_delete(GdkWindow *window, GdkAtom property)
     * }
     */
    public static FunctionDescriptor gdk_property_delete$descriptor() {
        return gdk_property_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_property_delete(GdkWindow *window, GdkAtom property)
     * }
     */
    public static MethodHandle gdk_property_delete$handle() {
        return gdk_property_delete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_property_delete(GdkWindow *window, GdkAtom property)
     * }
     */
    public static void gdk_property_delete(MemorySegment window, MemorySegment property) {
        var mh$ = gdk_property_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_property_delete", window, property);
            }
            mh$.invokeExact(window, property);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_text_property_to_utf8_list_for_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_text_property_to_utf8_list_for_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_text_property_to_utf8_list_for_display(GdkDisplay *display, GdkAtom encoding, gint format, const guchar *text, gint length, gchar ***list)
     * }
     */
    public static FunctionDescriptor gdk_text_property_to_utf8_list_for_display$descriptor() {
        return gdk_text_property_to_utf8_list_for_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_text_property_to_utf8_list_for_display(GdkDisplay *display, GdkAtom encoding, gint format, const guchar *text, gint length, gchar ***list)
     * }
     */
    public static MethodHandle gdk_text_property_to_utf8_list_for_display$handle() {
        return gdk_text_property_to_utf8_list_for_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_text_property_to_utf8_list_for_display(GdkDisplay *display, GdkAtom encoding, gint format, const guchar *text, gint length, gchar ***list)
     * }
     */
    public static int gdk_text_property_to_utf8_list_for_display(MemorySegment display, MemorySegment encoding, int format, MemorySegment text, int length, MemorySegment list) {
        var mh$ = gdk_text_property_to_utf8_list_for_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_text_property_to_utf8_list_for_display", display, encoding, format, text, length, list);
            }
            return (int)mh$.invokeExact(display, encoding, format, text, length, list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_utf8_to_string_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_utf8_to_string_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gdk_utf8_to_string_target(const gchar *str)
     * }
     */
    public static FunctionDescriptor gdk_utf8_to_string_target$descriptor() {
        return gdk_utf8_to_string_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gdk_utf8_to_string_target(const gchar *str)
     * }
     */
    public static MethodHandle gdk_utf8_to_string_target$handle() {
        return gdk_utf8_to_string_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gdk_utf8_to_string_target(const gchar *str)
     * }
     */
    public static MemorySegment gdk_utf8_to_string_target(MemorySegment str) {
        var mh$ = gdk_utf8_to_string_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_utf8_to_string_target", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_selection_owner_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_selection_owner_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_selection_owner_set(GdkWindow *owner, GdkAtom selection, guint32 time_, gboolean send_event)
     * }
     */
    public static FunctionDescriptor gdk_selection_owner_set$descriptor() {
        return gdk_selection_owner_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_selection_owner_set(GdkWindow *owner, GdkAtom selection, guint32 time_, gboolean send_event)
     * }
     */
    public static MethodHandle gdk_selection_owner_set$handle() {
        return gdk_selection_owner_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_selection_owner_set(GdkWindow *owner, GdkAtom selection, guint32 time_, gboolean send_event)
     * }
     */
    public static int gdk_selection_owner_set(MemorySegment owner, MemorySegment selection, int time_, int send_event) {
        var mh$ = gdk_selection_owner_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_selection_owner_set", owner, selection, time_, send_event);
            }
            return (int)mh$.invokeExact(owner, selection, time_, send_event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_selection_owner_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_selection_owner_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_selection_owner_get(GdkAtom selection)
     * }
     */
    public static FunctionDescriptor gdk_selection_owner_get$descriptor() {
        return gdk_selection_owner_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_selection_owner_get(GdkAtom selection)
     * }
     */
    public static MethodHandle gdk_selection_owner_get$handle() {
        return gdk_selection_owner_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_selection_owner_get(GdkAtom selection)
     * }
     */
    public static MemorySegment gdk_selection_owner_get(MemorySegment selection) {
        var mh$ = gdk_selection_owner_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_selection_owner_get", selection);
            }
            return (MemorySegment)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_selection_owner_set_for_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_selection_owner_set_for_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_selection_owner_set_for_display(GdkDisplay *display, GdkWindow *owner, GdkAtom selection, guint32 time_, gboolean send_event)
     * }
     */
    public static FunctionDescriptor gdk_selection_owner_set_for_display$descriptor() {
        return gdk_selection_owner_set_for_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_selection_owner_set_for_display(GdkDisplay *display, GdkWindow *owner, GdkAtom selection, guint32 time_, gboolean send_event)
     * }
     */
    public static MethodHandle gdk_selection_owner_set_for_display$handle() {
        return gdk_selection_owner_set_for_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_selection_owner_set_for_display(GdkDisplay *display, GdkWindow *owner, GdkAtom selection, guint32 time_, gboolean send_event)
     * }
     */
    public static int gdk_selection_owner_set_for_display(MemorySegment display, MemorySegment owner, MemorySegment selection, int time_, int send_event) {
        var mh$ = gdk_selection_owner_set_for_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_selection_owner_set_for_display", display, owner, selection, time_, send_event);
            }
            return (int)mh$.invokeExact(display, owner, selection, time_, send_event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_selection_owner_get_for_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_selection_owner_get_for_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_selection_owner_get_for_display(GdkDisplay *display, GdkAtom selection)
     * }
     */
    public static FunctionDescriptor gdk_selection_owner_get_for_display$descriptor() {
        return gdk_selection_owner_get_for_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_selection_owner_get_for_display(GdkDisplay *display, GdkAtom selection)
     * }
     */
    public static MethodHandle gdk_selection_owner_get_for_display$handle() {
        return gdk_selection_owner_get_for_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_selection_owner_get_for_display(GdkDisplay *display, GdkAtom selection)
     * }
     */
    public static MemorySegment gdk_selection_owner_get_for_display(MemorySegment display, MemorySegment selection) {
        var mh$ = gdk_selection_owner_get_for_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_selection_owner_get_for_display", display, selection);
            }
            return (MemorySegment)mh$.invokeExact(display, selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_selection_convert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_selection_convert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_selection_convert(GdkWindow *requestor, GdkAtom selection, GdkAtom target, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_selection_convert$descriptor() {
        return gdk_selection_convert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_selection_convert(GdkWindow *requestor, GdkAtom selection, GdkAtom target, guint32 time_)
     * }
     */
    public static MethodHandle gdk_selection_convert$handle() {
        return gdk_selection_convert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_selection_convert(GdkWindow *requestor, GdkAtom selection, GdkAtom target, guint32 time_)
     * }
     */
    public static void gdk_selection_convert(MemorySegment requestor, MemorySegment selection, MemorySegment target, int time_) {
        var mh$ = gdk_selection_convert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_selection_convert", requestor, selection, target, time_);
            }
            mh$.invokeExact(requestor, selection, target, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_selection_property_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_selection_property_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_selection_property_get(GdkWindow *requestor, guchar **data, GdkAtom *prop_type, gint *prop_format)
     * }
     */
    public static FunctionDescriptor gdk_selection_property_get$descriptor() {
        return gdk_selection_property_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_selection_property_get(GdkWindow *requestor, guchar **data, GdkAtom *prop_type, gint *prop_format)
     * }
     */
    public static MethodHandle gdk_selection_property_get$handle() {
        return gdk_selection_property_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_selection_property_get(GdkWindow *requestor, guchar **data, GdkAtom *prop_type, gint *prop_format)
     * }
     */
    public static int gdk_selection_property_get(MemorySegment requestor, MemorySegment data, MemorySegment prop_type, MemorySegment prop_format) {
        var mh$ = gdk_selection_property_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_selection_property_get", requestor, data, prop_type, prop_format);
            }
            return (int)mh$.invokeExact(requestor, data, prop_type, prop_format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_selection_send_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_selection_send_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_selection_send_notify(GdkWindow *requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_selection_send_notify$descriptor() {
        return gdk_selection_send_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_selection_send_notify(GdkWindow *requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_)
     * }
     */
    public static MethodHandle gdk_selection_send_notify$handle() {
        return gdk_selection_send_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_selection_send_notify(GdkWindow *requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_)
     * }
     */
    public static void gdk_selection_send_notify(MemorySegment requestor, MemorySegment selection, MemorySegment target, MemorySegment property, int time_) {
        var mh$ = gdk_selection_send_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_selection_send_notify", requestor, selection, target, property, time_);
            }
            mh$.invokeExact(requestor, selection, target, property, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_selection_send_notify_for_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_selection_send_notify_for_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_selection_send_notify_for_display(GdkDisplay *display, GdkWindow *requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_selection_send_notify_for_display$descriptor() {
        return gdk_selection_send_notify_for_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_selection_send_notify_for_display(GdkDisplay *display, GdkWindow *requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_)
     * }
     */
    public static MethodHandle gdk_selection_send_notify_for_display$handle() {
        return gdk_selection_send_notify_for_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_selection_send_notify_for_display(GdkDisplay *display, GdkWindow *requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_)
     * }
     */
    public static void gdk_selection_send_notify_for_display(MemorySegment display, MemorySegment requestor, MemorySegment selection, MemorySegment target, MemorySegment property, int time_) {
        var mh$ = gdk_selection_send_notify_for_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_selection_send_notify_for_display", display, requestor, selection, target, property, time_);
            }
            mh$.invokeExact(display, requestor, selection, target, property, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_test_render_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_test_render_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_test_render_sync(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_test_render_sync$descriptor() {
        return gdk_test_render_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_test_render_sync(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_test_render_sync$handle() {
        return gdk_test_render_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_test_render_sync(GdkWindow *window)
     * }
     */
    public static void gdk_test_render_sync(MemorySegment window) {
        var mh$ = gdk_test_render_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_test_render_sync", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_test_simulate_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_test_simulate_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_test_simulate_key(GdkWindow *window, gint x, gint y, guint keyval, GdkModifierType modifiers, GdkEventType key_pressrelease)
     * }
     */
    public static FunctionDescriptor gdk_test_simulate_key$descriptor() {
        return gdk_test_simulate_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_test_simulate_key(GdkWindow *window, gint x, gint y, guint keyval, GdkModifierType modifiers, GdkEventType key_pressrelease)
     * }
     */
    public static MethodHandle gdk_test_simulate_key$handle() {
        return gdk_test_simulate_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_test_simulate_key(GdkWindow *window, gint x, gint y, guint keyval, GdkModifierType modifiers, GdkEventType key_pressrelease)
     * }
     */
    public static int gdk_test_simulate_key(MemorySegment window, int x, int y, int keyval, int modifiers, int key_pressrelease) {
        var mh$ = gdk_test_simulate_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_test_simulate_key", window, x, y, keyval, modifiers, key_pressrelease);
            }
            return (int)mh$.invokeExact(window, x, y, keyval, modifiers, key_pressrelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_test_simulate_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_test_simulate_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_test_simulate_button(GdkWindow *window, gint x, gint y, guint button, GdkModifierType modifiers, GdkEventType button_pressrelease)
     * }
     */
    public static FunctionDescriptor gdk_test_simulate_button$descriptor() {
        return gdk_test_simulate_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_test_simulate_button(GdkWindow *window, gint x, gint y, guint button, GdkModifierType modifiers, GdkEventType button_pressrelease)
     * }
     */
    public static MethodHandle gdk_test_simulate_button$handle() {
        return gdk_test_simulate_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_test_simulate_button(GdkWindow *window, gint x, gint y, guint button, GdkModifierType modifiers, GdkEventType button_pressrelease)
     * }
     */
    public static int gdk_test_simulate_button(MemorySegment window, int x, int y, int button, int modifiers, int button_pressrelease) {
        var mh$ = gdk_test_simulate_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_test_simulate_button", window, x, y, button, modifiers, button_pressrelease);
            }
            return (int)mh$.invokeExact(window, x, y, button, modifiers, button_pressrelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_threads_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_threads_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_threads_init()
     * }
     */
    public static FunctionDescriptor gdk_threads_init$descriptor() {
        return gdk_threads_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_threads_init()
     * }
     */
    public static MethodHandle gdk_threads_init$handle() {
        return gdk_threads_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_threads_init()
     * }
     */
    public static void gdk_threads_init() {
        var mh$ = gdk_threads_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_threads_init");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_threads_enter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_threads_enter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_threads_enter()
     * }
     */
    public static FunctionDescriptor gdk_threads_enter$descriptor() {
        return gdk_threads_enter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_threads_enter()
     * }
     */
    public static MethodHandle gdk_threads_enter$handle() {
        return gdk_threads_enter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_threads_enter()
     * }
     */
    public static void gdk_threads_enter() {
        var mh$ = gdk_threads_enter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_threads_enter");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_threads_leave {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_threads_leave"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_threads_leave()
     * }
     */
    public static FunctionDescriptor gdk_threads_leave$descriptor() {
        return gdk_threads_leave.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_threads_leave()
     * }
     */
    public static MethodHandle gdk_threads_leave$handle() {
        return gdk_threads_leave.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_threads_leave()
     * }
     */
    public static void gdk_threads_leave() {
        var mh$ = gdk_threads_leave.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_threads_leave");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_threads_set_lock_functions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_threads_set_lock_functions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_threads_set_lock_functions(GCallback enter_fn, GCallback leave_fn)
     * }
     */
    public static FunctionDescriptor gdk_threads_set_lock_functions$descriptor() {
        return gdk_threads_set_lock_functions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_threads_set_lock_functions(GCallback enter_fn, GCallback leave_fn)
     * }
     */
    public static MethodHandle gdk_threads_set_lock_functions$handle() {
        return gdk_threads_set_lock_functions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_threads_set_lock_functions(GCallback enter_fn, GCallback leave_fn)
     * }
     */
    public static void gdk_threads_set_lock_functions(MemorySegment enter_fn, MemorySegment leave_fn) {
        var mh$ = gdk_threads_set_lock_functions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_threads_set_lock_functions", enter_fn, leave_fn);
            }
            mh$.invokeExact(enter_fn, leave_fn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_threads_add_idle_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_threads_add_idle_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_idle_full(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor gdk_threads_add_idle_full$descriptor() {
        return gdk_threads_add_idle_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_idle_full(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle gdk_threads_add_idle_full$handle() {
        return gdk_threads_add_idle_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_threads_add_idle_full(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static int gdk_threads_add_idle_full(int priority, MemorySegment function, MemorySegment data, MemorySegment notify) {
        var mh$ = gdk_threads_add_idle_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_threads_add_idle_full", priority, function, data, notify);
            }
            return (int)mh$.invokeExact(priority, function, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_threads_add_idle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_threads_add_idle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_idle(GSourceFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor gdk_threads_add_idle$descriptor() {
        return gdk_threads_add_idle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_idle(GSourceFunc function, gpointer data)
     * }
     */
    public static MethodHandle gdk_threads_add_idle$handle() {
        return gdk_threads_add_idle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_threads_add_idle(GSourceFunc function, gpointer data)
     * }
     */
    public static int gdk_threads_add_idle(MemorySegment function, MemorySegment data) {
        var mh$ = gdk_threads_add_idle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_threads_add_idle", function, data);
            }
            return (int)mh$.invokeExact(function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_threads_add_timeout_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_threads_add_timeout_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor gdk_threads_add_timeout_full$descriptor() {
        return gdk_threads_add_timeout_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle gdk_threads_add_timeout_full$handle() {
        return gdk_threads_add_timeout_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static int gdk_threads_add_timeout_full(int priority, int interval, MemorySegment function, MemorySegment data, MemorySegment notify) {
        var mh$ = gdk_threads_add_timeout_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_threads_add_timeout_full", priority, interval, function, data, notify);
            }
            return (int)mh$.invokeExact(priority, interval, function, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_threads_add_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_threads_add_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor gdk_threads_add_timeout$descriptor() {
        return gdk_threads_add_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static MethodHandle gdk_threads_add_timeout$handle() {
        return gdk_threads_add_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static int gdk_threads_add_timeout(int interval, MemorySegment function, MemorySegment data) {
        var mh$ = gdk_threads_add_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_threads_add_timeout", interval, function, data);
            }
            return (int)mh$.invokeExact(interval, function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_threads_add_timeout_seconds_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_threads_add_timeout_seconds_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout_seconds_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor gdk_threads_add_timeout_seconds_full$descriptor() {
        return gdk_threads_add_timeout_seconds_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout_seconds_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle gdk_threads_add_timeout_seconds_full$handle() {
        return gdk_threads_add_timeout_seconds_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout_seconds_full(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify)
     * }
     */
    public static int gdk_threads_add_timeout_seconds_full(int priority, int interval, MemorySegment function, MemorySegment data, MemorySegment notify) {
        var mh$ = gdk_threads_add_timeout_seconds_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_threads_add_timeout_seconds_full", priority, interval, function, data, notify);
            }
            return (int)mh$.invokeExact(priority, interval, function, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_threads_add_timeout_seconds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_threads_add_timeout_seconds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout_seconds(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor gdk_threads_add_timeout_seconds$descriptor() {
        return gdk_threads_add_timeout_seconds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout_seconds(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static MethodHandle gdk_threads_add_timeout_seconds$handle() {
        return gdk_threads_add_timeout_seconds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gdk_threads_add_timeout_seconds(guint interval, GSourceFunc function, gpointer data)
     * }
     */
    public static int gdk_threads_add_timeout_seconds(int interval, MemorySegment function, MemorySegment data) {
        var mh$ = gdk_threads_add_timeout_seconds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_threads_add_timeout_seconds", interval, function, data);
            }
            return (int)mh$.invokeExact(interval, function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_VISUAL_STATIC_GRAY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISUAL_STATIC_GRAY = 0
     * }
     */
    public static int GDK_VISUAL_STATIC_GRAY() {
        return GDK_VISUAL_STATIC_GRAY;
    }
    private static final int GDK_VISUAL_GRAYSCALE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISUAL_GRAYSCALE = 1
     * }
     */
    public static int GDK_VISUAL_GRAYSCALE() {
        return GDK_VISUAL_GRAYSCALE;
    }
    private static final int GDK_VISUAL_STATIC_COLOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISUAL_STATIC_COLOR = 2
     * }
     */
    public static int GDK_VISUAL_STATIC_COLOR() {
        return GDK_VISUAL_STATIC_COLOR;
    }
    private static final int GDK_VISUAL_PSEUDO_COLOR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISUAL_PSEUDO_COLOR = 3
     * }
     */
    public static int GDK_VISUAL_PSEUDO_COLOR() {
        return GDK_VISUAL_PSEUDO_COLOR;
    }
    private static final int GDK_VISUAL_TRUE_COLOR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISUAL_TRUE_COLOR = 4
     * }
     */
    public static int GDK_VISUAL_TRUE_COLOR() {
        return GDK_VISUAL_TRUE_COLOR;
    }
    private static final int GDK_VISUAL_DIRECT_COLOR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISUAL_DIRECT_COLOR = 5
     * }
     */
    public static int GDK_VISUAL_DIRECT_COLOR() {
        return GDK_VISUAL_DIRECT_COLOR;
    }

    private static class gdk_visual_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_visual_get_type()
     * }
     */
    public static FunctionDescriptor gdk_visual_get_type$descriptor() {
        return gdk_visual_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_visual_get_type()
     * }
     */
    public static MethodHandle gdk_visual_get_type$handle() {
        return gdk_visual_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_visual_get_type()
     * }
     */
    public static long gdk_visual_get_type() {
        var mh$ = gdk_visual_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_best_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_best_depth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_visual_get_best_depth()
     * }
     */
    public static FunctionDescriptor gdk_visual_get_best_depth$descriptor() {
        return gdk_visual_get_best_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_visual_get_best_depth()
     * }
     */
    public static MethodHandle gdk_visual_get_best_depth$handle() {
        return gdk_visual_get_best_depth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_visual_get_best_depth()
     * }
     */
    public static int gdk_visual_get_best_depth() {
        var mh$ = gdk_visual_get_best_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_best_depth");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_best_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_best_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisualType gdk_visual_get_best_type()
     * }
     */
    public static FunctionDescriptor gdk_visual_get_best_type$descriptor() {
        return gdk_visual_get_best_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisualType gdk_visual_get_best_type()
     * }
     */
    public static MethodHandle gdk_visual_get_best_type$handle() {
        return gdk_visual_get_best_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisualType gdk_visual_get_best_type()
     * }
     */
    public static int gdk_visual_get_best_type() {
        var mh$ = gdk_visual_get_best_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_best_type");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_system {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_system"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_system()
     * }
     */
    public static FunctionDescriptor gdk_visual_get_system$descriptor() {
        return gdk_visual_get_system.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_system()
     * }
     */
    public static MethodHandle gdk_visual_get_system$handle() {
        return gdk_visual_get_system.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_system()
     * }
     */
    public static MemorySegment gdk_visual_get_system() {
        var mh$ = gdk_visual_get_system.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_system");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_best {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_best"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best()
     * }
     */
    public static FunctionDescriptor gdk_visual_get_best$descriptor() {
        return gdk_visual_get_best.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best()
     * }
     */
    public static MethodHandle gdk_visual_get_best$handle() {
        return gdk_visual_get_best.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best()
     * }
     */
    public static MemorySegment gdk_visual_get_best() {
        var mh$ = gdk_visual_get_best.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_best");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_best_with_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_best_with_depth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best_with_depth(gint depth)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_best_with_depth$descriptor() {
        return gdk_visual_get_best_with_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best_with_depth(gint depth)
     * }
     */
    public static MethodHandle gdk_visual_get_best_with_depth$handle() {
        return gdk_visual_get_best_with_depth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best_with_depth(gint depth)
     * }
     */
    public static MemorySegment gdk_visual_get_best_with_depth(int depth) {
        var mh$ = gdk_visual_get_best_with_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_best_with_depth", depth);
            }
            return (MemorySegment)mh$.invokeExact(depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_best_with_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_best_with_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best_with_type(GdkVisualType visual_type)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_best_with_type$descriptor() {
        return gdk_visual_get_best_with_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best_with_type(GdkVisualType visual_type)
     * }
     */
    public static MethodHandle gdk_visual_get_best_with_type$handle() {
        return gdk_visual_get_best_with_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best_with_type(GdkVisualType visual_type)
     * }
     */
    public static MemorySegment gdk_visual_get_best_with_type(int visual_type) {
        var mh$ = gdk_visual_get_best_with_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_best_with_type", visual_type);
            }
            return (MemorySegment)mh$.invokeExact(visual_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_best_with_both {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_best_with_both"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best_with_both(gint depth, GdkVisualType visual_type)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_best_with_both$descriptor() {
        return gdk_visual_get_best_with_both.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best_with_both(gint depth, GdkVisualType visual_type)
     * }
     */
    public static MethodHandle gdk_visual_get_best_with_both$handle() {
        return gdk_visual_get_best_with_both.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisual *gdk_visual_get_best_with_both(gint depth, GdkVisualType visual_type)
     * }
     */
    public static MemorySegment gdk_visual_get_best_with_both(int depth, int visual_type) {
        var mh$ = gdk_visual_get_best_with_both.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_best_with_both", depth, visual_type);
            }
            return (MemorySegment)mh$.invokeExact(depth, visual_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_query_depths {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_query_depths"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_query_depths(gint **depths, gint *count)
     * }
     */
    public static FunctionDescriptor gdk_query_depths$descriptor() {
        return gdk_query_depths.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_query_depths(gint **depths, gint *count)
     * }
     */
    public static MethodHandle gdk_query_depths$handle() {
        return gdk_query_depths.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_query_depths(gint **depths, gint *count)
     * }
     */
    public static void gdk_query_depths(MemorySegment depths, MemorySegment count) {
        var mh$ = gdk_query_depths.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_query_depths", depths, count);
            }
            mh$.invokeExact(depths, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_query_visual_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_query_visual_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_query_visual_types(GdkVisualType **visual_types, gint *count)
     * }
     */
    public static FunctionDescriptor gdk_query_visual_types$descriptor() {
        return gdk_query_visual_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_query_visual_types(GdkVisualType **visual_types, gint *count)
     * }
     */
    public static MethodHandle gdk_query_visual_types$handle() {
        return gdk_query_visual_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_query_visual_types(GdkVisualType **visual_types, gint *count)
     * }
     */
    public static void gdk_query_visual_types(MemorySegment visual_types, MemorySegment count) {
        var mh$ = gdk_query_visual_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_query_visual_types", visual_types, count);
            }
            mh$.invokeExact(visual_types, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_list_visuals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_list_visuals"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_list_visuals()
     * }
     */
    public static FunctionDescriptor gdk_list_visuals$descriptor() {
        return gdk_list_visuals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_list_visuals()
     * }
     */
    public static MethodHandle gdk_list_visuals$handle() {
        return gdk_list_visuals.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_list_visuals()
     * }
     */
    public static MemorySegment gdk_list_visuals() {
        var mh$ = gdk_list_visuals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_list_visuals");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_visual_get_screen(GdkVisual *visual)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_screen$descriptor() {
        return gdk_visual_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_visual_get_screen(GdkVisual *visual)
     * }
     */
    public static MethodHandle gdk_visual_get_screen$handle() {
        return gdk_visual_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gdk_visual_get_screen(GdkVisual *visual)
     * }
     */
    public static MemorySegment gdk_visual_get_screen(MemorySegment visual) {
        var mh$ = gdk_visual_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_screen", visual);
            }
            return (MemorySegment)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_visual_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_visual_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisualType gdk_visual_get_visual_type(GdkVisual *visual)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_visual_type$descriptor() {
        return gdk_visual_get_visual_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisualType gdk_visual_get_visual_type(GdkVisual *visual)
     * }
     */
    public static MethodHandle gdk_visual_get_visual_type$handle() {
        return gdk_visual_get_visual_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisualType gdk_visual_get_visual_type(GdkVisual *visual)
     * }
     */
    public static int gdk_visual_get_visual_type(MemorySegment visual) {
        var mh$ = gdk_visual_get_visual_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_visual_type", visual);
            }
            return (int)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_depth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_visual_get_depth(GdkVisual *visual)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_depth$descriptor() {
        return gdk_visual_get_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_visual_get_depth(GdkVisual *visual)
     * }
     */
    public static MethodHandle gdk_visual_get_depth$handle() {
        return gdk_visual_get_depth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_visual_get_depth(GdkVisual *visual)
     * }
     */
    public static int gdk_visual_get_depth(MemorySegment visual) {
        var mh$ = gdk_visual_get_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_depth", visual);
            }
            return (int)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_byte_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_byte_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkByteOrder gdk_visual_get_byte_order(GdkVisual *visual)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_byte_order$descriptor() {
        return gdk_visual_get_byte_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkByteOrder gdk_visual_get_byte_order(GdkVisual *visual)
     * }
     */
    public static MethodHandle gdk_visual_get_byte_order$handle() {
        return gdk_visual_get_byte_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkByteOrder gdk_visual_get_byte_order(GdkVisual *visual)
     * }
     */
    public static int gdk_visual_get_byte_order(MemorySegment visual) {
        var mh$ = gdk_visual_get_byte_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_byte_order", visual);
            }
            return (int)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_colormap_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_colormap_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_visual_get_colormap_size(GdkVisual *visual)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_colormap_size$descriptor() {
        return gdk_visual_get_colormap_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_visual_get_colormap_size(GdkVisual *visual)
     * }
     */
    public static MethodHandle gdk_visual_get_colormap_size$handle() {
        return gdk_visual_get_colormap_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_visual_get_colormap_size(GdkVisual *visual)
     * }
     */
    public static int gdk_visual_get_colormap_size(MemorySegment visual) {
        var mh$ = gdk_visual_get_colormap_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_colormap_size", visual);
            }
            return (int)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_bits_per_rgb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_bits_per_rgb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_visual_get_bits_per_rgb(GdkVisual *visual)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_bits_per_rgb$descriptor() {
        return gdk_visual_get_bits_per_rgb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_visual_get_bits_per_rgb(GdkVisual *visual)
     * }
     */
    public static MethodHandle gdk_visual_get_bits_per_rgb$handle() {
        return gdk_visual_get_bits_per_rgb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_visual_get_bits_per_rgb(GdkVisual *visual)
     * }
     */
    public static int gdk_visual_get_bits_per_rgb(MemorySegment visual) {
        var mh$ = gdk_visual_get_bits_per_rgb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_bits_per_rgb", visual);
            }
            return (int)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_red_pixel_details {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_red_pixel_details"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_visual_get_red_pixel_details(GdkVisual *visual, guint32 *mask, gint *shift, gint *precision)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_red_pixel_details$descriptor() {
        return gdk_visual_get_red_pixel_details.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_visual_get_red_pixel_details(GdkVisual *visual, guint32 *mask, gint *shift, gint *precision)
     * }
     */
    public static MethodHandle gdk_visual_get_red_pixel_details$handle() {
        return gdk_visual_get_red_pixel_details.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_visual_get_red_pixel_details(GdkVisual *visual, guint32 *mask, gint *shift, gint *precision)
     * }
     */
    public static void gdk_visual_get_red_pixel_details(MemorySegment visual, MemorySegment mask, MemorySegment shift, MemorySegment precision) {
        var mh$ = gdk_visual_get_red_pixel_details.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_red_pixel_details", visual, mask, shift, precision);
            }
            mh$.invokeExact(visual, mask, shift, precision);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_green_pixel_details {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_green_pixel_details"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_visual_get_green_pixel_details(GdkVisual *visual, guint32 *mask, gint *shift, gint *precision)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_green_pixel_details$descriptor() {
        return gdk_visual_get_green_pixel_details.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_visual_get_green_pixel_details(GdkVisual *visual, guint32 *mask, gint *shift, gint *precision)
     * }
     */
    public static MethodHandle gdk_visual_get_green_pixel_details$handle() {
        return gdk_visual_get_green_pixel_details.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_visual_get_green_pixel_details(GdkVisual *visual, guint32 *mask, gint *shift, gint *precision)
     * }
     */
    public static void gdk_visual_get_green_pixel_details(MemorySegment visual, MemorySegment mask, MemorySegment shift, MemorySegment precision) {
        var mh$ = gdk_visual_get_green_pixel_details.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_green_pixel_details", visual, mask, shift, precision);
            }
            mh$.invokeExact(visual, mask, shift, precision);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_visual_get_blue_pixel_details {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_visual_get_blue_pixel_details"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_visual_get_blue_pixel_details(GdkVisual *visual, guint32 *mask, gint *shift, gint *precision)
     * }
     */
    public static FunctionDescriptor gdk_visual_get_blue_pixel_details$descriptor() {
        return gdk_visual_get_blue_pixel_details.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_visual_get_blue_pixel_details(GdkVisual *visual, guint32 *mask, gint *shift, gint *precision)
     * }
     */
    public static MethodHandle gdk_visual_get_blue_pixel_details$handle() {
        return gdk_visual_get_blue_pixel_details.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_visual_get_blue_pixel_details(GdkVisual *visual, guint32 *mask, gint *shift, gint *precision)
     * }
     */
    public static void gdk_visual_get_blue_pixel_details(MemorySegment visual, MemorySegment mask, MemorySegment shift, MemorySegment precision) {
        var mh$ = gdk_visual_get_blue_pixel_details.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_visual_get_blue_pixel_details", visual, mask, shift, precision);
            }
            mh$.invokeExact(visual, mask, shift, precision);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GdkAppLaunchContext *GdkAppLaunchContext_autoptr
     * }
     */
    public static final AddressLayout GdkAppLaunchContext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkAppLaunchContext_listautoptr
     * }
     */
    public static final AddressLayout GdkAppLaunchContext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkAppLaunchContext_slistautoptr
     * }
     */
    public static final AddressLayout GdkAppLaunchContext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkAppLaunchContext_queueautoptr
     * }
     */
    public static final AddressLayout GdkAppLaunchContext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkCursor *GdkCursor_autoptr
     * }
     */
    public static final AddressLayout GdkCursor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkCursor_listautoptr
     * }
     */
    public static final AddressLayout GdkCursor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkCursor_slistautoptr
     * }
     */
    public static final AddressLayout GdkCursor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkCursor_queueautoptr
     * }
     */
    public static final AddressLayout GdkCursor_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkDevice *GdkDevice_autoptr
     * }
     */
    public static final AddressLayout GdkDevice_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkDevice_listautoptr
     * }
     */
    public static final AddressLayout GdkDevice_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkDevice_slistautoptr
     * }
     */
    public static final AddressLayout GdkDevice_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkDevice_queueautoptr
     * }
     */
    public static final AddressLayout GdkDevice_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkDeviceManager *GdkDeviceManager_autoptr
     * }
     */
    public static final AddressLayout GdkDeviceManager_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkDeviceManager_listautoptr
     * }
     */
    public static final AddressLayout GdkDeviceManager_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkDeviceManager_slistautoptr
     * }
     */
    public static final AddressLayout GdkDeviceManager_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkDeviceManager_queueautoptr
     * }
     */
    public static final AddressLayout GdkDeviceManager_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkDisplay *GdkDisplay_autoptr
     * }
     */
    public static final AddressLayout GdkDisplay_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkDisplay_listautoptr
     * }
     */
    public static final AddressLayout GdkDisplay_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkDisplay_slistautoptr
     * }
     */
    public static final AddressLayout GdkDisplay_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkDisplay_queueautoptr
     * }
     */
    public static final AddressLayout GdkDisplay_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkDisplayManager *GdkDisplayManager_autoptr
     * }
     */
    public static final AddressLayout GdkDisplayManager_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkDisplayManager_listautoptr
     * }
     */
    public static final AddressLayout GdkDisplayManager_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkDisplayManager_slistautoptr
     * }
     */
    public static final AddressLayout GdkDisplayManager_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkDisplayManager_queueautoptr
     * }
     */
    public static final AddressLayout GdkDisplayManager_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkDragContext *GdkDragContext_autoptr
     * }
     */
    public static final AddressLayout GdkDragContext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkDragContext_listautoptr
     * }
     */
    public static final AddressLayout GdkDragContext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkDragContext_slistautoptr
     * }
     */
    public static final AddressLayout GdkDragContext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkDragContext_queueautoptr
     * }
     */
    public static final AddressLayout GdkDragContext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkFrameClock *GdkFrameClock_autoptr
     * }
     */
    public static final AddressLayout GdkFrameClock_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkFrameClock_listautoptr
     * }
     */
    public static final AddressLayout GdkFrameClock_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkFrameClock_slistautoptr
     * }
     */
    public static final AddressLayout GdkFrameClock_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkFrameClock_queueautoptr
     * }
     */
    public static final AddressLayout GdkFrameClock_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkGLContext *GdkGLContext_autoptr
     * }
     */
    public static final AddressLayout GdkGLContext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkGLContext_listautoptr
     * }
     */
    public static final AddressLayout GdkGLContext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkGLContext_slistautoptr
     * }
     */
    public static final AddressLayout GdkGLContext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkGLContext_queueautoptr
     * }
     */
    public static final AddressLayout GdkGLContext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkKeymap *GdkKeymap_autoptr
     * }
     */
    public static final AddressLayout GdkKeymap_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkKeymap_listautoptr
     * }
     */
    public static final AddressLayout GdkKeymap_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkKeymap_slistautoptr
     * }
     */
    public static final AddressLayout GdkKeymap_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkKeymap_queueautoptr
     * }
     */
    public static final AddressLayout GdkKeymap_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkScreen *GdkScreen_autoptr
     * }
     */
    public static final AddressLayout GdkScreen_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkScreen_listautoptr
     * }
     */
    public static final AddressLayout GdkScreen_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkScreen_slistautoptr
     * }
     */
    public static final AddressLayout GdkScreen_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkScreen_queueautoptr
     * }
     */
    public static final AddressLayout GdkScreen_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkVisual *GdkVisual_autoptr
     * }
     */
    public static final AddressLayout GdkVisual_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkVisual_listautoptr
     * }
     */
    public static final AddressLayout GdkVisual_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkVisual_slistautoptr
     * }
     */
    public static final AddressLayout GdkVisual_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkVisual_queueautoptr
     * }
     */
    public static final AddressLayout GdkVisual_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkWindow *GdkWindow_autoptr
     * }
     */
    public static final AddressLayout GdkWindow_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkWindow_listautoptr
     * }
     */
    public static final AddressLayout GdkWindow_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkWindow_slistautoptr
     * }
     */
    public static final AddressLayout GdkWindow_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkWindow_queueautoptr
     * }
     */
    public static final AddressLayout GdkWindow_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkEvent *GdkEvent_autoptr
     * }
     */
    public static final AddressLayout GdkEvent_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkEvent_listautoptr
     * }
     */
    public static final AddressLayout GdkEvent_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkEvent_slistautoptr
     * }
     */
    public static final AddressLayout GdkEvent_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkEvent_queueautoptr
     * }
     */
    public static final AddressLayout GdkEvent_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkFrameTimings *GdkFrameTimings_autoptr
     * }
     */
    public static final AddressLayout GdkFrameTimings_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkFrameTimings_listautoptr
     * }
     */
    public static final AddressLayout GdkFrameTimings_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkFrameTimings_slistautoptr
     * }
     */
    public static final AddressLayout GdkFrameTimings_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkFrameTimings_queueautoptr
     * }
     */
    public static final AddressLayout GdkFrameTimings_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GdkRGBA *GdkRGBA_autoptr
     * }
     */
    public static final AddressLayout GdkRGBA_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GdkRGBA_listautoptr
     * }
     */
    public static final AddressLayout GdkRGBA_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GdkRGBA_slistautoptr
     * }
     */
    public static final AddressLayout GdkRGBA_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GdkRGBA_queueautoptr
     * }
     */
    public static final AddressLayout GdkRGBA_queueautoptr = app_indicator_h.C_POINTER;
    private static final int GTK_ALIGN_FILL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ALIGN_FILL = 0
     * }
     */
    public static int GTK_ALIGN_FILL() {
        return GTK_ALIGN_FILL;
    }
    private static final int GTK_ALIGN_START = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ALIGN_START = 1
     * }
     */
    public static int GTK_ALIGN_START() {
        return GTK_ALIGN_START;
    }
    private static final int GTK_ALIGN_END = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ALIGN_END = 2
     * }
     */
    public static int GTK_ALIGN_END() {
        return GTK_ALIGN_END;
    }
    private static final int GTK_ALIGN_CENTER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ALIGN_CENTER = 3
     * }
     */
    public static int GTK_ALIGN_CENTER() {
        return GTK_ALIGN_CENTER;
    }
    private static final int GTK_ALIGN_BASELINE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ALIGN_BASELINE = 4
     * }
     */
    public static int GTK_ALIGN_BASELINE() {
        return GTK_ALIGN_BASELINE;
    }
    private static final int GTK_ARROW_UP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ARROW_UP = 0
     * }
     */
    public static int GTK_ARROW_UP() {
        return GTK_ARROW_UP;
    }
    private static final int GTK_ARROW_DOWN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ARROW_DOWN = 1
     * }
     */
    public static int GTK_ARROW_DOWN() {
        return GTK_ARROW_DOWN;
    }
    private static final int GTK_ARROW_LEFT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ARROW_LEFT = 2
     * }
     */
    public static int GTK_ARROW_LEFT() {
        return GTK_ARROW_LEFT;
    }
    private static final int GTK_ARROW_RIGHT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ARROW_RIGHT = 3
     * }
     */
    public static int GTK_ARROW_RIGHT() {
        return GTK_ARROW_RIGHT;
    }
    private static final int GTK_ARROW_NONE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ARROW_NONE = 4
     * }
     */
    public static int GTK_ARROW_NONE() {
        return GTK_ARROW_NONE;
    }
    private static final int GTK_BASELINE_POSITION_TOP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BASELINE_POSITION_TOP = 0
     * }
     */
    public static int GTK_BASELINE_POSITION_TOP() {
        return GTK_BASELINE_POSITION_TOP;
    }
    private static final int GTK_BASELINE_POSITION_CENTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BASELINE_POSITION_CENTER = 1
     * }
     */
    public static int GTK_BASELINE_POSITION_CENTER() {
        return GTK_BASELINE_POSITION_CENTER;
    }
    private static final int GTK_BASELINE_POSITION_BOTTOM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BASELINE_POSITION_BOTTOM = 2
     * }
     */
    public static int GTK_BASELINE_POSITION_BOTTOM() {
        return GTK_BASELINE_POSITION_BOTTOM;
    }
    private static final int GTK_DELETE_CHARS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DELETE_CHARS = 0
     * }
     */
    public static int GTK_DELETE_CHARS() {
        return GTK_DELETE_CHARS;
    }
    private static final int GTK_DELETE_WORD_ENDS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DELETE_WORD_ENDS = 1
     * }
     */
    public static int GTK_DELETE_WORD_ENDS() {
        return GTK_DELETE_WORD_ENDS;
    }
    private static final int GTK_DELETE_WORDS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DELETE_WORDS = 2
     * }
     */
    public static int GTK_DELETE_WORDS() {
        return GTK_DELETE_WORDS;
    }
    private static final int GTK_DELETE_DISPLAY_LINES = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DELETE_DISPLAY_LINES = 3
     * }
     */
    public static int GTK_DELETE_DISPLAY_LINES() {
        return GTK_DELETE_DISPLAY_LINES;
    }
    private static final int GTK_DELETE_DISPLAY_LINE_ENDS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DELETE_DISPLAY_LINE_ENDS = 4
     * }
     */
    public static int GTK_DELETE_DISPLAY_LINE_ENDS() {
        return GTK_DELETE_DISPLAY_LINE_ENDS;
    }
    private static final int GTK_DELETE_PARAGRAPH_ENDS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DELETE_PARAGRAPH_ENDS = 5
     * }
     */
    public static int GTK_DELETE_PARAGRAPH_ENDS() {
        return GTK_DELETE_PARAGRAPH_ENDS;
    }
    private static final int GTK_DELETE_PARAGRAPHS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DELETE_PARAGRAPHS = 6
     * }
     */
    public static int GTK_DELETE_PARAGRAPHS() {
        return GTK_DELETE_PARAGRAPHS;
    }
    private static final int GTK_DELETE_WHITESPACE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DELETE_WHITESPACE = 7
     * }
     */
    public static int GTK_DELETE_WHITESPACE() {
        return GTK_DELETE_WHITESPACE;
    }
    private static final int GTK_DIR_TAB_FORWARD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DIR_TAB_FORWARD = 0
     * }
     */
    public static int GTK_DIR_TAB_FORWARD() {
        return GTK_DIR_TAB_FORWARD;
    }
    private static final int GTK_DIR_TAB_BACKWARD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DIR_TAB_BACKWARD = 1
     * }
     */
    public static int GTK_DIR_TAB_BACKWARD() {
        return GTK_DIR_TAB_BACKWARD;
    }
    private static final int GTK_DIR_UP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DIR_UP = 2
     * }
     */
    public static int GTK_DIR_UP() {
        return GTK_DIR_UP;
    }
    private static final int GTK_DIR_DOWN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DIR_DOWN = 3
     * }
     */
    public static int GTK_DIR_DOWN() {
        return GTK_DIR_DOWN;
    }
    private static final int GTK_DIR_LEFT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DIR_LEFT = 4
     * }
     */
    public static int GTK_DIR_LEFT() {
        return GTK_DIR_LEFT;
    }
    private static final int GTK_DIR_RIGHT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DIR_RIGHT = 5
     * }
     */
    public static int GTK_DIR_RIGHT() {
        return GTK_DIR_RIGHT;
    }
    private static final int GTK_ICON_SIZE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_SIZE_INVALID = 0
     * }
     */
    public static int GTK_ICON_SIZE_INVALID() {
        return GTK_ICON_SIZE_INVALID;
    }
    private static final int GTK_ICON_SIZE_MENU = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_SIZE_MENU = 1
     * }
     */
    public static int GTK_ICON_SIZE_MENU() {
        return GTK_ICON_SIZE_MENU;
    }
    private static final int GTK_ICON_SIZE_SMALL_TOOLBAR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_SIZE_SMALL_TOOLBAR = 2
     * }
     */
    public static int GTK_ICON_SIZE_SMALL_TOOLBAR() {
        return GTK_ICON_SIZE_SMALL_TOOLBAR;
    }
    private static final int GTK_ICON_SIZE_LARGE_TOOLBAR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_SIZE_LARGE_TOOLBAR = 3
     * }
     */
    public static int GTK_ICON_SIZE_LARGE_TOOLBAR() {
        return GTK_ICON_SIZE_LARGE_TOOLBAR;
    }
    private static final int GTK_ICON_SIZE_BUTTON = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_SIZE_BUTTON = 4
     * }
     */
    public static int GTK_ICON_SIZE_BUTTON() {
        return GTK_ICON_SIZE_BUTTON;
    }
    private static final int GTK_ICON_SIZE_DND = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_SIZE_DND = 5
     * }
     */
    public static int GTK_ICON_SIZE_DND() {
        return GTK_ICON_SIZE_DND;
    }
    private static final int GTK_ICON_SIZE_DIALOG = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ICON_SIZE_DIALOG = 6
     * }
     */
    public static int GTK_ICON_SIZE_DIALOG() {
        return GTK_ICON_SIZE_DIALOG;
    }
    private static final int GTK_SENSITIVITY_AUTO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SENSITIVITY_AUTO = 0
     * }
     */
    public static int GTK_SENSITIVITY_AUTO() {
        return GTK_SENSITIVITY_AUTO;
    }
    private static final int GTK_SENSITIVITY_ON = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SENSITIVITY_ON = 1
     * }
     */
    public static int GTK_SENSITIVITY_ON() {
        return GTK_SENSITIVITY_ON;
    }
    private static final int GTK_SENSITIVITY_OFF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SENSITIVITY_OFF = 2
     * }
     */
    public static int GTK_SENSITIVITY_OFF() {
        return GTK_SENSITIVITY_OFF;
    }
    private static final int GTK_TEXT_DIR_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_DIR_NONE = 0
     * }
     */
    public static int GTK_TEXT_DIR_NONE() {
        return GTK_TEXT_DIR_NONE;
    }
    private static final int GTK_TEXT_DIR_LTR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_DIR_LTR = 1
     * }
     */
    public static int GTK_TEXT_DIR_LTR() {
        return GTK_TEXT_DIR_LTR;
    }
    private static final int GTK_TEXT_DIR_RTL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TEXT_DIR_RTL = 2
     * }
     */
    public static int GTK_TEXT_DIR_RTL() {
        return GTK_TEXT_DIR_RTL;
    }
    private static final int GTK_JUSTIFY_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUSTIFY_LEFT = 0
     * }
     */
    public static int GTK_JUSTIFY_LEFT() {
        return GTK_JUSTIFY_LEFT;
    }
    private static final int GTK_JUSTIFY_RIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUSTIFY_RIGHT = 1
     * }
     */
    public static int GTK_JUSTIFY_RIGHT() {
        return GTK_JUSTIFY_RIGHT;
    }
    private static final int GTK_JUSTIFY_CENTER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUSTIFY_CENTER = 2
     * }
     */
    public static int GTK_JUSTIFY_CENTER() {
        return GTK_JUSTIFY_CENTER;
    }
    private static final int GTK_JUSTIFY_FILL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUSTIFY_FILL = 3
     * }
     */
    public static int GTK_JUSTIFY_FILL() {
        return GTK_JUSTIFY_FILL;
    }
    private static final int GTK_MENU_DIR_PARENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MENU_DIR_PARENT = 0
     * }
     */
    public static int GTK_MENU_DIR_PARENT() {
        return GTK_MENU_DIR_PARENT;
    }
    private static final int GTK_MENU_DIR_CHILD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MENU_DIR_CHILD = 1
     * }
     */
    public static int GTK_MENU_DIR_CHILD() {
        return GTK_MENU_DIR_CHILD;
    }
    private static final int GTK_MENU_DIR_NEXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MENU_DIR_NEXT = 2
     * }
     */
    public static int GTK_MENU_DIR_NEXT() {
        return GTK_MENU_DIR_NEXT;
    }
    private static final int GTK_MENU_DIR_PREV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MENU_DIR_PREV = 3
     * }
     */
    public static int GTK_MENU_DIR_PREV() {
        return GTK_MENU_DIR_PREV;
    }
    private static final int GTK_MESSAGE_INFO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MESSAGE_INFO = 0
     * }
     */
    public static int GTK_MESSAGE_INFO() {
        return GTK_MESSAGE_INFO;
    }
    private static final int GTK_MESSAGE_WARNING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MESSAGE_WARNING = 1
     * }
     */
    public static int GTK_MESSAGE_WARNING() {
        return GTK_MESSAGE_WARNING;
    }
    private static final int GTK_MESSAGE_QUESTION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MESSAGE_QUESTION = 2
     * }
     */
    public static int GTK_MESSAGE_QUESTION() {
        return GTK_MESSAGE_QUESTION;
    }
    private static final int GTK_MESSAGE_ERROR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MESSAGE_ERROR = 3
     * }
     */
    public static int GTK_MESSAGE_ERROR() {
        return GTK_MESSAGE_ERROR;
    }
    private static final int GTK_MESSAGE_OTHER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MESSAGE_OTHER = 4
     * }
     */
    public static int GTK_MESSAGE_OTHER() {
        return GTK_MESSAGE_OTHER;
    }
    private static final int GTK_MOVEMENT_LOGICAL_POSITIONS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MOVEMENT_LOGICAL_POSITIONS = 0
     * }
     */
    public static int GTK_MOVEMENT_LOGICAL_POSITIONS() {
        return GTK_MOVEMENT_LOGICAL_POSITIONS;
    }
    private static final int GTK_MOVEMENT_VISUAL_POSITIONS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MOVEMENT_VISUAL_POSITIONS = 1
     * }
     */
    public static int GTK_MOVEMENT_VISUAL_POSITIONS() {
        return GTK_MOVEMENT_VISUAL_POSITIONS;
    }
    private static final int GTK_MOVEMENT_WORDS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MOVEMENT_WORDS = 2
     * }
     */
    public static int GTK_MOVEMENT_WORDS() {
        return GTK_MOVEMENT_WORDS;
    }
    private static final int GTK_MOVEMENT_DISPLAY_LINES = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MOVEMENT_DISPLAY_LINES = 3
     * }
     */
    public static int GTK_MOVEMENT_DISPLAY_LINES() {
        return GTK_MOVEMENT_DISPLAY_LINES;
    }
    private static final int GTK_MOVEMENT_DISPLAY_LINE_ENDS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MOVEMENT_DISPLAY_LINE_ENDS = 4
     * }
     */
    public static int GTK_MOVEMENT_DISPLAY_LINE_ENDS() {
        return GTK_MOVEMENT_DISPLAY_LINE_ENDS;
    }
    private static final int GTK_MOVEMENT_PARAGRAPHS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MOVEMENT_PARAGRAPHS = 5
     * }
     */
    public static int GTK_MOVEMENT_PARAGRAPHS() {
        return GTK_MOVEMENT_PARAGRAPHS;
    }
    private static final int GTK_MOVEMENT_PARAGRAPH_ENDS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MOVEMENT_PARAGRAPH_ENDS = 6
     * }
     */
    public static int GTK_MOVEMENT_PARAGRAPH_ENDS() {
        return GTK_MOVEMENT_PARAGRAPH_ENDS;
    }
    private static final int GTK_MOVEMENT_PAGES = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MOVEMENT_PAGES = 7
     * }
     */
    public static int GTK_MOVEMENT_PAGES() {
        return GTK_MOVEMENT_PAGES;
    }
    private static final int GTK_MOVEMENT_BUFFER_ENDS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MOVEMENT_BUFFER_ENDS = 8
     * }
     */
    public static int GTK_MOVEMENT_BUFFER_ENDS() {
        return GTK_MOVEMENT_BUFFER_ENDS;
    }
    private static final int GTK_MOVEMENT_HORIZONTAL_PAGES = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_MOVEMENT_HORIZONTAL_PAGES = 9
     * }
     */
    public static int GTK_MOVEMENT_HORIZONTAL_PAGES() {
        return GTK_MOVEMENT_HORIZONTAL_PAGES;
    }
    private static final int GTK_SCROLL_STEPS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_STEPS = 0
     * }
     */
    public static int GTK_SCROLL_STEPS() {
        return GTK_SCROLL_STEPS;
    }
    private static final int GTK_SCROLL_PAGES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_PAGES = 1
     * }
     */
    public static int GTK_SCROLL_PAGES() {
        return GTK_SCROLL_PAGES;
    }
    private static final int GTK_SCROLL_ENDS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_ENDS = 2
     * }
     */
    public static int GTK_SCROLL_ENDS() {
        return GTK_SCROLL_ENDS;
    }
    private static final int GTK_SCROLL_HORIZONTAL_STEPS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_HORIZONTAL_STEPS = 3
     * }
     */
    public static int GTK_SCROLL_HORIZONTAL_STEPS() {
        return GTK_SCROLL_HORIZONTAL_STEPS;
    }
    private static final int GTK_SCROLL_HORIZONTAL_PAGES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_HORIZONTAL_PAGES = 4
     * }
     */
    public static int GTK_SCROLL_HORIZONTAL_PAGES() {
        return GTK_SCROLL_HORIZONTAL_PAGES;
    }
    private static final int GTK_SCROLL_HORIZONTAL_ENDS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_HORIZONTAL_ENDS = 5
     * }
     */
    public static int GTK_SCROLL_HORIZONTAL_ENDS() {
        return GTK_SCROLL_HORIZONTAL_ENDS;
    }
    private static final int GTK_ORIENTATION_HORIZONTAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ORIENTATION_HORIZONTAL = 0
     * }
     */
    public static int GTK_ORIENTATION_HORIZONTAL() {
        return GTK_ORIENTATION_HORIZONTAL;
    }
    private static final int GTK_ORIENTATION_VERTICAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ORIENTATION_VERTICAL = 1
     * }
     */
    public static int GTK_ORIENTATION_VERTICAL() {
        return GTK_ORIENTATION_VERTICAL;
    }
    private static final int GTK_PACK_START = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PACK_START = 0
     * }
     */
    public static int GTK_PACK_START() {
        return GTK_PACK_START;
    }
    private static final int GTK_PACK_END = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PACK_END = 1
     * }
     */
    public static int GTK_PACK_END() {
        return GTK_PACK_END;
    }
    private static final int GTK_POS_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_POS_LEFT = 0
     * }
     */
    public static int GTK_POS_LEFT() {
        return GTK_POS_LEFT;
    }
    private static final int GTK_POS_RIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_POS_RIGHT = 1
     * }
     */
    public static int GTK_POS_RIGHT() {
        return GTK_POS_RIGHT;
    }
    private static final int GTK_POS_TOP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_POS_TOP = 2
     * }
     */
    public static int GTK_POS_TOP() {
        return GTK_POS_TOP;
    }
    private static final int GTK_POS_BOTTOM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_POS_BOTTOM = 3
     * }
     */
    public static int GTK_POS_BOTTOM() {
        return GTK_POS_BOTTOM;
    }
    private static final int GTK_RELIEF_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RELIEF_NORMAL = 0
     * }
     */
    public static int GTK_RELIEF_NORMAL() {
        return GTK_RELIEF_NORMAL;
    }
    private static final int GTK_RELIEF_HALF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RELIEF_HALF = 1
     * }
     */
    public static int GTK_RELIEF_HALF() {
        return GTK_RELIEF_HALF;
    }
    private static final int GTK_RELIEF_NONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_RELIEF_NONE = 2
     * }
     */
    public static int GTK_RELIEF_NONE() {
        return GTK_RELIEF_NONE;
    }
    private static final int GTK_SCROLL_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_NONE = 0
     * }
     */
    public static int GTK_SCROLL_NONE() {
        return GTK_SCROLL_NONE;
    }
    private static final int GTK_SCROLL_JUMP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_JUMP = 1
     * }
     */
    public static int GTK_SCROLL_JUMP() {
        return GTK_SCROLL_JUMP;
    }
    private static final int GTK_SCROLL_STEP_BACKWARD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_STEP_BACKWARD = 2
     * }
     */
    public static int GTK_SCROLL_STEP_BACKWARD() {
        return GTK_SCROLL_STEP_BACKWARD;
    }
    private static final int GTK_SCROLL_STEP_FORWARD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_STEP_FORWARD = 3
     * }
     */
    public static int GTK_SCROLL_STEP_FORWARD() {
        return GTK_SCROLL_STEP_FORWARD;
    }
    private static final int GTK_SCROLL_PAGE_BACKWARD = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_PAGE_BACKWARD = 4
     * }
     */
    public static int GTK_SCROLL_PAGE_BACKWARD() {
        return GTK_SCROLL_PAGE_BACKWARD;
    }
    private static final int GTK_SCROLL_PAGE_FORWARD = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_PAGE_FORWARD = 5
     * }
     */
    public static int GTK_SCROLL_PAGE_FORWARD() {
        return GTK_SCROLL_PAGE_FORWARD;
    }
    private static final int GTK_SCROLL_STEP_UP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_STEP_UP = 6
     * }
     */
    public static int GTK_SCROLL_STEP_UP() {
        return GTK_SCROLL_STEP_UP;
    }
    private static final int GTK_SCROLL_STEP_DOWN = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_STEP_DOWN = 7
     * }
     */
    public static int GTK_SCROLL_STEP_DOWN() {
        return GTK_SCROLL_STEP_DOWN;
    }
    private static final int GTK_SCROLL_PAGE_UP = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_PAGE_UP = 8
     * }
     */
    public static int GTK_SCROLL_PAGE_UP() {
        return GTK_SCROLL_PAGE_UP;
    }
    private static final int GTK_SCROLL_PAGE_DOWN = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_PAGE_DOWN = 9
     * }
     */
    public static int GTK_SCROLL_PAGE_DOWN() {
        return GTK_SCROLL_PAGE_DOWN;
    }
    private static final int GTK_SCROLL_STEP_LEFT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_STEP_LEFT = 10
     * }
     */
    public static int GTK_SCROLL_STEP_LEFT() {
        return GTK_SCROLL_STEP_LEFT;
    }
    private static final int GTK_SCROLL_STEP_RIGHT = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_STEP_RIGHT = 11
     * }
     */
    public static int GTK_SCROLL_STEP_RIGHT() {
        return GTK_SCROLL_STEP_RIGHT;
    }
    private static final int GTK_SCROLL_PAGE_LEFT = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_PAGE_LEFT = 12
     * }
     */
    public static int GTK_SCROLL_PAGE_LEFT() {
        return GTK_SCROLL_PAGE_LEFT;
    }
    private static final int GTK_SCROLL_PAGE_RIGHT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_PAGE_RIGHT = 13
     * }
     */
    public static int GTK_SCROLL_PAGE_RIGHT() {
        return GTK_SCROLL_PAGE_RIGHT;
    }
    private static final int GTK_SCROLL_START = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_START = 14
     * }
     */
    public static int GTK_SCROLL_START() {
        return GTK_SCROLL_START;
    }
    private static final int GTK_SCROLL_END = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_END = 15
     * }
     */
    public static int GTK_SCROLL_END() {
        return GTK_SCROLL_END;
    }
    private static final int GTK_SELECTION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SELECTION_NONE = 0
     * }
     */
    public static int GTK_SELECTION_NONE() {
        return GTK_SELECTION_NONE;
    }
    private static final int GTK_SELECTION_SINGLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SELECTION_SINGLE = 1
     * }
     */
    public static int GTK_SELECTION_SINGLE() {
        return GTK_SELECTION_SINGLE;
    }
    private static final int GTK_SELECTION_BROWSE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SELECTION_BROWSE = 2
     * }
     */
    public static int GTK_SELECTION_BROWSE() {
        return GTK_SELECTION_BROWSE;
    }
    private static final int GTK_SELECTION_MULTIPLE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SELECTION_MULTIPLE = 3
     * }
     */
    public static int GTK_SELECTION_MULTIPLE() {
        return GTK_SELECTION_MULTIPLE;
    }
    private static final int GTK_SHADOW_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHADOW_NONE = 0
     * }
     */
    public static int GTK_SHADOW_NONE() {
        return GTK_SHADOW_NONE;
    }
    private static final int GTK_SHADOW_IN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHADOW_IN = 1
     * }
     */
    public static int GTK_SHADOW_IN() {
        return GTK_SHADOW_IN;
    }
    private static final int GTK_SHADOW_OUT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHADOW_OUT = 2
     * }
     */
    public static int GTK_SHADOW_OUT() {
        return GTK_SHADOW_OUT;
    }
    private static final int GTK_SHADOW_ETCHED_IN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHADOW_ETCHED_IN = 3
     * }
     */
    public static int GTK_SHADOW_ETCHED_IN() {
        return GTK_SHADOW_ETCHED_IN;
    }
    private static final int GTK_SHADOW_ETCHED_OUT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SHADOW_ETCHED_OUT = 4
     * }
     */
    public static int GTK_SHADOW_ETCHED_OUT() {
        return GTK_SHADOW_ETCHED_OUT;
    }
    private static final int GTK_STATE_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_NORMAL = 0
     * }
     */
    public static int GTK_STATE_NORMAL() {
        return GTK_STATE_NORMAL;
    }
    private static final int GTK_STATE_ACTIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_ACTIVE = 1
     * }
     */
    public static int GTK_STATE_ACTIVE() {
        return GTK_STATE_ACTIVE;
    }
    private static final int GTK_STATE_PRELIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_PRELIGHT = 2
     * }
     */
    public static int GTK_STATE_PRELIGHT() {
        return GTK_STATE_PRELIGHT;
    }
    private static final int GTK_STATE_SELECTED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_SELECTED = 3
     * }
     */
    public static int GTK_STATE_SELECTED() {
        return GTK_STATE_SELECTED;
    }
    private static final int GTK_STATE_INSENSITIVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_INSENSITIVE = 4
     * }
     */
    public static int GTK_STATE_INSENSITIVE() {
        return GTK_STATE_INSENSITIVE;
    }
    private static final int GTK_STATE_INCONSISTENT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_INCONSISTENT = 5
     * }
     */
    public static int GTK_STATE_INCONSISTENT() {
        return GTK_STATE_INCONSISTENT;
    }
    private static final int GTK_STATE_FOCUSED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FOCUSED = 6
     * }
     */
    public static int GTK_STATE_FOCUSED() {
        return GTK_STATE_FOCUSED;
    }
    private static final int GTK_TOOLBAR_ICONS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TOOLBAR_ICONS = 0
     * }
     */
    public static int GTK_TOOLBAR_ICONS() {
        return GTK_TOOLBAR_ICONS;
    }
    private static final int GTK_TOOLBAR_TEXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TOOLBAR_TEXT = 1
     * }
     */
    public static int GTK_TOOLBAR_TEXT() {
        return GTK_TOOLBAR_TEXT;
    }
    private static final int GTK_TOOLBAR_BOTH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TOOLBAR_BOTH = 2
     * }
     */
    public static int GTK_TOOLBAR_BOTH() {
        return GTK_TOOLBAR_BOTH;
    }
    private static final int GTK_TOOLBAR_BOTH_HORIZ = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TOOLBAR_BOTH_HORIZ = 3
     * }
     */
    public static int GTK_TOOLBAR_BOTH_HORIZ() {
        return GTK_TOOLBAR_BOTH_HORIZ;
    }
    private static final int GTK_WRAP_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WRAP_NONE = 0
     * }
     */
    public static int GTK_WRAP_NONE() {
        return GTK_WRAP_NONE;
    }
    private static final int GTK_WRAP_CHAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WRAP_CHAR = 1
     * }
     */
    public static int GTK_WRAP_CHAR() {
        return GTK_WRAP_CHAR;
    }
    private static final int GTK_WRAP_WORD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WRAP_WORD = 2
     * }
     */
    public static int GTK_WRAP_WORD() {
        return GTK_WRAP_WORD;
    }
    private static final int GTK_WRAP_WORD_CHAR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WRAP_WORD_CHAR = 3
     * }
     */
    public static int GTK_WRAP_WORD_CHAR() {
        return GTK_WRAP_WORD_CHAR;
    }
    private static final int GTK_SORT_ASCENDING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SORT_ASCENDING = 0
     * }
     */
    public static int GTK_SORT_ASCENDING() {
        return GTK_SORT_ASCENDING;
    }
    private static final int GTK_SORT_DESCENDING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SORT_DESCENDING = 1
     * }
     */
    public static int GTK_SORT_DESCENDING() {
        return GTK_SORT_DESCENDING;
    }
    private static final int GTK_IM_PREEDIT_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IM_PREEDIT_NOTHING = 0
     * }
     */
    public static int GTK_IM_PREEDIT_NOTHING() {
        return GTK_IM_PREEDIT_NOTHING;
    }
    private static final int GTK_IM_PREEDIT_CALLBACK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IM_PREEDIT_CALLBACK = 1
     * }
     */
    public static int GTK_IM_PREEDIT_CALLBACK() {
        return GTK_IM_PREEDIT_CALLBACK;
    }
    private static final int GTK_IM_PREEDIT_NONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IM_PREEDIT_NONE = 2
     * }
     */
    public static int GTK_IM_PREEDIT_NONE() {
        return GTK_IM_PREEDIT_NONE;
    }
    private static final int GTK_IM_STATUS_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IM_STATUS_NOTHING = 0
     * }
     */
    public static int GTK_IM_STATUS_NOTHING() {
        return GTK_IM_STATUS_NOTHING;
    }
    private static final int GTK_IM_STATUS_CALLBACK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IM_STATUS_CALLBACK = 1
     * }
     */
    public static int GTK_IM_STATUS_CALLBACK() {
        return GTK_IM_STATUS_CALLBACK;
    }
    private static final int GTK_IM_STATUS_NONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IM_STATUS_NONE = 2
     * }
     */
    public static int GTK_IM_STATUS_NONE() {
        return GTK_IM_STATUS_NONE;
    }
    private static final int GTK_PACK_DIRECTION_LTR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PACK_DIRECTION_LTR = 0
     * }
     */
    public static int GTK_PACK_DIRECTION_LTR() {
        return GTK_PACK_DIRECTION_LTR;
    }
    private static final int GTK_PACK_DIRECTION_RTL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PACK_DIRECTION_RTL = 1
     * }
     */
    public static int GTK_PACK_DIRECTION_RTL() {
        return GTK_PACK_DIRECTION_RTL;
    }
    private static final int GTK_PACK_DIRECTION_TTB = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PACK_DIRECTION_TTB = 2
     * }
     */
    public static int GTK_PACK_DIRECTION_TTB() {
        return GTK_PACK_DIRECTION_TTB;
    }
    private static final int GTK_PACK_DIRECTION_BTT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PACK_DIRECTION_BTT = 3
     * }
     */
    public static int GTK_PACK_DIRECTION_BTT() {
        return GTK_PACK_DIRECTION_BTT;
    }
    private static final int GTK_PRINT_PAGES_ALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_PAGES_ALL = 0
     * }
     */
    public static int GTK_PRINT_PAGES_ALL() {
        return GTK_PRINT_PAGES_ALL;
    }
    private static final int GTK_PRINT_PAGES_CURRENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_PAGES_CURRENT = 1
     * }
     */
    public static int GTK_PRINT_PAGES_CURRENT() {
        return GTK_PRINT_PAGES_CURRENT;
    }
    private static final int GTK_PRINT_PAGES_RANGES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_PAGES_RANGES = 2
     * }
     */
    public static int GTK_PRINT_PAGES_RANGES() {
        return GTK_PRINT_PAGES_RANGES;
    }
    private static final int GTK_PRINT_PAGES_SELECTION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_PAGES_SELECTION = 3
     * }
     */
    public static int GTK_PRINT_PAGES_SELECTION() {
        return GTK_PRINT_PAGES_SELECTION;
    }
    private static final int GTK_PAGE_SET_ALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAGE_SET_ALL = 0
     * }
     */
    public static int GTK_PAGE_SET_ALL() {
        return GTK_PAGE_SET_ALL;
    }
    private static final int GTK_PAGE_SET_EVEN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAGE_SET_EVEN = 1
     * }
     */
    public static int GTK_PAGE_SET_EVEN() {
        return GTK_PAGE_SET_EVEN;
    }
    private static final int GTK_PAGE_SET_ODD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAGE_SET_ODD = 2
     * }
     */
    public static int GTK_PAGE_SET_ODD() {
        return GTK_PAGE_SET_ODD;
    }
    private static final int GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = 0
     * }
     */
    public static int GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM() {
        return GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM;
    }
    private static final int GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = 1
     * }
     */
    public static int GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP() {
        return GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP;
    }
    private static final int GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = 2
     * }
     */
    public static int GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM() {
        return GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM;
    }
    private static final int GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = 3
     * }
     */
    public static int GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP() {
        return GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP;
    }
    private static final int GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = 4
     * }
     */
    public static int GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT() {
        return GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT;
    }
    private static final int GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = 5
     * }
     */
    public static int GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT() {
        return GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT;
    }
    private static final int GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = 6
     * }
     */
    public static int GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT() {
        return GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT;
    }
    private static final int GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = 7
     * }
     */
    public static int GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT() {
        return GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT;
    }
    private static final int GTK_PAGE_ORIENTATION_PORTRAIT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAGE_ORIENTATION_PORTRAIT = 0
     * }
     */
    public static int GTK_PAGE_ORIENTATION_PORTRAIT() {
        return GTK_PAGE_ORIENTATION_PORTRAIT;
    }
    private static final int GTK_PAGE_ORIENTATION_LANDSCAPE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAGE_ORIENTATION_LANDSCAPE = 1
     * }
     */
    public static int GTK_PAGE_ORIENTATION_LANDSCAPE() {
        return GTK_PAGE_ORIENTATION_LANDSCAPE;
    }
    private static final int GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT = 2
     * }
     */
    public static int GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT() {
        return GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT;
    }
    private static final int GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE = 3
     * }
     */
    public static int GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE() {
        return GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE;
    }
    private static final int GTK_PRINT_QUALITY_LOW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_QUALITY_LOW = 0
     * }
     */
    public static int GTK_PRINT_QUALITY_LOW() {
        return GTK_PRINT_QUALITY_LOW;
    }
    private static final int GTK_PRINT_QUALITY_NORMAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_QUALITY_NORMAL = 1
     * }
     */
    public static int GTK_PRINT_QUALITY_NORMAL() {
        return GTK_PRINT_QUALITY_NORMAL;
    }
    private static final int GTK_PRINT_QUALITY_HIGH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_QUALITY_HIGH = 2
     * }
     */
    public static int GTK_PRINT_QUALITY_HIGH() {
        return GTK_PRINT_QUALITY_HIGH;
    }
    private static final int GTK_PRINT_QUALITY_DRAFT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_QUALITY_DRAFT = 3
     * }
     */
    public static int GTK_PRINT_QUALITY_DRAFT() {
        return GTK_PRINT_QUALITY_DRAFT;
    }
    private static final int GTK_PRINT_DUPLEX_SIMPLEX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_DUPLEX_SIMPLEX = 0
     * }
     */
    public static int GTK_PRINT_DUPLEX_SIMPLEX() {
        return GTK_PRINT_DUPLEX_SIMPLEX;
    }
    private static final int GTK_PRINT_DUPLEX_HORIZONTAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_DUPLEX_HORIZONTAL = 1
     * }
     */
    public static int GTK_PRINT_DUPLEX_HORIZONTAL() {
        return GTK_PRINT_DUPLEX_HORIZONTAL;
    }
    private static final int GTK_PRINT_DUPLEX_VERTICAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PRINT_DUPLEX_VERTICAL = 2
     * }
     */
    public static int GTK_PRINT_DUPLEX_VERTICAL() {
        return GTK_PRINT_DUPLEX_VERTICAL;
    }
    private static final int GTK_UNIT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UNIT_NONE = 0
     * }
     */
    public static int GTK_UNIT_NONE() {
        return GTK_UNIT_NONE;
    }
    private static final int GTK_UNIT_POINTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UNIT_POINTS = 1
     * }
     */
    public static int GTK_UNIT_POINTS() {
        return GTK_UNIT_POINTS;
    }
    private static final int GTK_UNIT_INCH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UNIT_INCH = 2
     * }
     */
    public static int GTK_UNIT_INCH() {
        return GTK_UNIT_INCH;
    }
    private static final int GTK_UNIT_MM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_UNIT_MM = 3
     * }
     */
    public static int GTK_UNIT_MM() {
        return GTK_UNIT_MM;
    }
    private static final int GTK_TREE_VIEW_GRID_LINES_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_GRID_LINES_NONE = 0
     * }
     */
    public static int GTK_TREE_VIEW_GRID_LINES_NONE() {
        return GTK_TREE_VIEW_GRID_LINES_NONE;
    }
    private static final int GTK_TREE_VIEW_GRID_LINES_HORIZONTAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_GRID_LINES_HORIZONTAL = 1
     * }
     */
    public static int GTK_TREE_VIEW_GRID_LINES_HORIZONTAL() {
        return GTK_TREE_VIEW_GRID_LINES_HORIZONTAL;
    }
    private static final int GTK_TREE_VIEW_GRID_LINES_VERTICAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_GRID_LINES_VERTICAL = 2
     * }
     */
    public static int GTK_TREE_VIEW_GRID_LINES_VERTICAL() {
        return GTK_TREE_VIEW_GRID_LINES_VERTICAL;
    }
    private static final int GTK_TREE_VIEW_GRID_LINES_BOTH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_GRID_LINES_BOTH = 3
     * }
     */
    public static int GTK_TREE_VIEW_GRID_LINES_BOTH() {
        return GTK_TREE_VIEW_GRID_LINES_BOTH;
    }
    private static final int GTK_DRAG_RESULT_SUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DRAG_RESULT_SUCCESS = 0
     * }
     */
    public static int GTK_DRAG_RESULT_SUCCESS() {
        return GTK_DRAG_RESULT_SUCCESS;
    }
    private static final int GTK_DRAG_RESULT_NO_TARGET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DRAG_RESULT_NO_TARGET = 1
     * }
     */
    public static int GTK_DRAG_RESULT_NO_TARGET() {
        return GTK_DRAG_RESULT_NO_TARGET;
    }
    private static final int GTK_DRAG_RESULT_USER_CANCELLED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DRAG_RESULT_USER_CANCELLED = 2
     * }
     */
    public static int GTK_DRAG_RESULT_USER_CANCELLED() {
        return GTK_DRAG_RESULT_USER_CANCELLED;
    }
    private static final int GTK_DRAG_RESULT_TIMEOUT_EXPIRED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DRAG_RESULT_TIMEOUT_EXPIRED = 3
     * }
     */
    public static int GTK_DRAG_RESULT_TIMEOUT_EXPIRED() {
        return GTK_DRAG_RESULT_TIMEOUT_EXPIRED;
    }
    private static final int GTK_DRAG_RESULT_GRAB_BROKEN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DRAG_RESULT_GRAB_BROKEN = 4
     * }
     */
    public static int GTK_DRAG_RESULT_GRAB_BROKEN() {
        return GTK_DRAG_RESULT_GRAB_BROKEN;
    }
    private static final int GTK_DRAG_RESULT_ERROR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DRAG_RESULT_ERROR = 5
     * }
     */
    public static int GTK_DRAG_RESULT_ERROR() {
        return GTK_DRAG_RESULT_ERROR;
    }
    private static final int GTK_SIZE_GROUP_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SIZE_GROUP_NONE = 0
     * }
     */
    public static int GTK_SIZE_GROUP_NONE() {
        return GTK_SIZE_GROUP_NONE;
    }
    private static final int GTK_SIZE_GROUP_HORIZONTAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SIZE_GROUP_HORIZONTAL = 1
     * }
     */
    public static int GTK_SIZE_GROUP_HORIZONTAL() {
        return GTK_SIZE_GROUP_HORIZONTAL;
    }
    private static final int GTK_SIZE_GROUP_VERTICAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SIZE_GROUP_VERTICAL = 2
     * }
     */
    public static int GTK_SIZE_GROUP_VERTICAL() {
        return GTK_SIZE_GROUP_VERTICAL;
    }
    private static final int GTK_SIZE_GROUP_BOTH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SIZE_GROUP_BOTH = 3
     * }
     */
    public static int GTK_SIZE_GROUP_BOTH() {
        return GTK_SIZE_GROUP_BOTH;
    }
    private static final int GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH = 0
     * }
     */
    public static int GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH() {
        return GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH;
    }
    private static final int GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT = 1
     * }
     */
    public static int GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT() {
        return GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT;
    }
    private static final int GTK_SIZE_REQUEST_CONSTANT_SIZE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SIZE_REQUEST_CONSTANT_SIZE = 2
     * }
     */
    public static int GTK_SIZE_REQUEST_CONSTANT_SIZE() {
        return GTK_SIZE_REQUEST_CONSTANT_SIZE;
    }
    private static final int GTK_SCROLL_MINIMUM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_MINIMUM = 0
     * }
     */
    public static int GTK_SCROLL_MINIMUM() {
        return GTK_SCROLL_MINIMUM;
    }
    private static final int GTK_SCROLL_NATURAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_SCROLL_NATURAL = 1
     * }
     */
    public static int GTK_SCROLL_NATURAL() {
        return GTK_SCROLL_NATURAL;
    }
    private static final int GTK_STATE_FLAG_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_NORMAL = 0
     * }
     */
    public static int GTK_STATE_FLAG_NORMAL() {
        return GTK_STATE_FLAG_NORMAL;
    }
    private static final int GTK_STATE_FLAG_ACTIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_ACTIVE = 1
     * }
     */
    public static int GTK_STATE_FLAG_ACTIVE() {
        return GTK_STATE_FLAG_ACTIVE;
    }
    private static final int GTK_STATE_FLAG_PRELIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_PRELIGHT = 2
     * }
     */
    public static int GTK_STATE_FLAG_PRELIGHT() {
        return GTK_STATE_FLAG_PRELIGHT;
    }
    private static final int GTK_STATE_FLAG_SELECTED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_SELECTED = 4
     * }
     */
    public static int GTK_STATE_FLAG_SELECTED() {
        return GTK_STATE_FLAG_SELECTED;
    }
    private static final int GTK_STATE_FLAG_INSENSITIVE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_INSENSITIVE = 8
     * }
     */
    public static int GTK_STATE_FLAG_INSENSITIVE() {
        return GTK_STATE_FLAG_INSENSITIVE;
    }
    private static final int GTK_STATE_FLAG_INCONSISTENT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_INCONSISTENT = 16
     * }
     */
    public static int GTK_STATE_FLAG_INCONSISTENT() {
        return GTK_STATE_FLAG_INCONSISTENT;
    }
    private static final int GTK_STATE_FLAG_FOCUSED = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_FOCUSED = 32
     * }
     */
    public static int GTK_STATE_FLAG_FOCUSED() {
        return GTK_STATE_FLAG_FOCUSED;
    }
    private static final int GTK_STATE_FLAG_BACKDROP = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_BACKDROP = 64
     * }
     */
    public static int GTK_STATE_FLAG_BACKDROP() {
        return GTK_STATE_FLAG_BACKDROP;
    }
    private static final int GTK_STATE_FLAG_DIR_LTR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_DIR_LTR = 128
     * }
     */
    public static int GTK_STATE_FLAG_DIR_LTR() {
        return GTK_STATE_FLAG_DIR_LTR;
    }
    private static final int GTK_STATE_FLAG_DIR_RTL = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_DIR_RTL = 256
     * }
     */
    public static int GTK_STATE_FLAG_DIR_RTL() {
        return GTK_STATE_FLAG_DIR_RTL;
    }
    private static final int GTK_STATE_FLAG_LINK = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_LINK = 512
     * }
     */
    public static int GTK_STATE_FLAG_LINK() {
        return GTK_STATE_FLAG_LINK;
    }
    private static final int GTK_STATE_FLAG_VISITED = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_VISITED = 1024
     * }
     */
    public static int GTK_STATE_FLAG_VISITED() {
        return GTK_STATE_FLAG_VISITED;
    }
    private static final int GTK_STATE_FLAG_CHECKED = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_CHECKED = 2048
     * }
     */
    public static int GTK_STATE_FLAG_CHECKED() {
        return GTK_STATE_FLAG_CHECKED;
    }
    private static final int GTK_STATE_FLAG_DROP_ACTIVE = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_STATE_FLAG_DROP_ACTIVE = 4096
     * }
     */
    public static int GTK_STATE_FLAG_DROP_ACTIVE() {
        return GTK_STATE_FLAG_DROP_ACTIVE;
    }
    private static final int GTK_REGION_EVEN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REGION_EVEN = 1
     * }
     */
    public static int GTK_REGION_EVEN() {
        return GTK_REGION_EVEN;
    }
    private static final int GTK_REGION_ODD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REGION_ODD = 2
     * }
     */
    public static int GTK_REGION_ODD() {
        return GTK_REGION_ODD;
    }
    private static final int GTK_REGION_FIRST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REGION_FIRST = 4
     * }
     */
    public static int GTK_REGION_FIRST() {
        return GTK_REGION_FIRST;
    }
    private static final int GTK_REGION_LAST = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REGION_LAST = 8
     * }
     */
    public static int GTK_REGION_LAST() {
        return GTK_REGION_LAST;
    }
    private static final int GTK_REGION_ONLY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REGION_ONLY = 16
     * }
     */
    public static int GTK_REGION_ONLY() {
        return GTK_REGION_ONLY;
    }
    private static final int GTK_REGION_SORTED = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_REGION_SORTED = 32
     * }
     */
    public static int GTK_REGION_SORTED() {
        return GTK_REGION_SORTED;
    }
    private static final int GTK_JUNCTION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUNCTION_NONE = 0
     * }
     */
    public static int GTK_JUNCTION_NONE() {
        return GTK_JUNCTION_NONE;
    }
    private static final int GTK_JUNCTION_CORNER_TOPLEFT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUNCTION_CORNER_TOPLEFT = 1
     * }
     */
    public static int GTK_JUNCTION_CORNER_TOPLEFT() {
        return GTK_JUNCTION_CORNER_TOPLEFT;
    }
    private static final int GTK_JUNCTION_CORNER_TOPRIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUNCTION_CORNER_TOPRIGHT = 2
     * }
     */
    public static int GTK_JUNCTION_CORNER_TOPRIGHT() {
        return GTK_JUNCTION_CORNER_TOPRIGHT;
    }
    private static final int GTK_JUNCTION_CORNER_BOTTOMLEFT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUNCTION_CORNER_BOTTOMLEFT = 4
     * }
     */
    public static int GTK_JUNCTION_CORNER_BOTTOMLEFT() {
        return GTK_JUNCTION_CORNER_BOTTOMLEFT;
    }
    private static final int GTK_JUNCTION_CORNER_BOTTOMRIGHT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUNCTION_CORNER_BOTTOMRIGHT = 8
     * }
     */
    public static int GTK_JUNCTION_CORNER_BOTTOMRIGHT() {
        return GTK_JUNCTION_CORNER_BOTTOMRIGHT;
    }
    private static final int GTK_JUNCTION_TOP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUNCTION_TOP = 3
     * }
     */
    public static int GTK_JUNCTION_TOP() {
        return GTK_JUNCTION_TOP;
    }
    private static final int GTK_JUNCTION_BOTTOM = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUNCTION_BOTTOM = 12
     * }
     */
    public static int GTK_JUNCTION_BOTTOM() {
        return GTK_JUNCTION_BOTTOM;
    }
    private static final int GTK_JUNCTION_LEFT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUNCTION_LEFT = 5
     * }
     */
    public static int GTK_JUNCTION_LEFT() {
        return GTK_JUNCTION_LEFT;
    }
    private static final int GTK_JUNCTION_RIGHT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_JUNCTION_RIGHT = 10
     * }
     */
    public static int GTK_JUNCTION_RIGHT() {
        return GTK_JUNCTION_RIGHT;
    }
    private static final int GTK_BORDER_STYLE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BORDER_STYLE_NONE = 0
     * }
     */
    public static int GTK_BORDER_STYLE_NONE() {
        return GTK_BORDER_STYLE_NONE;
    }
    private static final int GTK_BORDER_STYLE_SOLID = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BORDER_STYLE_SOLID = 1
     * }
     */
    public static int GTK_BORDER_STYLE_SOLID() {
        return GTK_BORDER_STYLE_SOLID;
    }
    private static final int GTK_BORDER_STYLE_INSET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BORDER_STYLE_INSET = 2
     * }
     */
    public static int GTK_BORDER_STYLE_INSET() {
        return GTK_BORDER_STYLE_INSET;
    }
    private static final int GTK_BORDER_STYLE_OUTSET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BORDER_STYLE_OUTSET = 3
     * }
     */
    public static int GTK_BORDER_STYLE_OUTSET() {
        return GTK_BORDER_STYLE_OUTSET;
    }
    private static final int GTK_BORDER_STYLE_HIDDEN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BORDER_STYLE_HIDDEN = 4
     * }
     */
    public static int GTK_BORDER_STYLE_HIDDEN() {
        return GTK_BORDER_STYLE_HIDDEN;
    }
    private static final int GTK_BORDER_STYLE_DOTTED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BORDER_STYLE_DOTTED = 5
     * }
     */
    public static int GTK_BORDER_STYLE_DOTTED() {
        return GTK_BORDER_STYLE_DOTTED;
    }
    private static final int GTK_BORDER_STYLE_DASHED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BORDER_STYLE_DASHED = 6
     * }
     */
    public static int GTK_BORDER_STYLE_DASHED() {
        return GTK_BORDER_STYLE_DASHED;
    }
    private static final int GTK_BORDER_STYLE_DOUBLE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BORDER_STYLE_DOUBLE = 7
     * }
     */
    public static int GTK_BORDER_STYLE_DOUBLE() {
        return GTK_BORDER_STYLE_DOUBLE;
    }
    private static final int GTK_BORDER_STYLE_GROOVE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BORDER_STYLE_GROOVE = 8
     * }
     */
    public static int GTK_BORDER_STYLE_GROOVE() {
        return GTK_BORDER_STYLE_GROOVE;
    }
    private static final int GTK_BORDER_STYLE_RIDGE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BORDER_STYLE_RIDGE = 9
     * }
     */
    public static int GTK_BORDER_STYLE_RIDGE() {
        return GTK_BORDER_STYLE_RIDGE;
    }
    private static final int GTK_LEVEL_BAR_MODE_CONTINUOUS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LEVEL_BAR_MODE_CONTINUOUS = 0
     * }
     */
    public static int GTK_LEVEL_BAR_MODE_CONTINUOUS() {
        return GTK_LEVEL_BAR_MODE_CONTINUOUS;
    }
    private static final int GTK_LEVEL_BAR_MODE_DISCRETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_LEVEL_BAR_MODE_DISCRETE = 1
     * }
     */
    public static int GTK_LEVEL_BAR_MODE_DISCRETE() {
        return GTK_LEVEL_BAR_MODE_DISCRETE;
    }
    private static final int GTK_INPUT_PURPOSE_FREE_FORM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_FREE_FORM = 0
     * }
     */
    public static int GTK_INPUT_PURPOSE_FREE_FORM() {
        return GTK_INPUT_PURPOSE_FREE_FORM;
    }
    private static final int GTK_INPUT_PURPOSE_ALPHA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_ALPHA = 1
     * }
     */
    public static int GTK_INPUT_PURPOSE_ALPHA() {
        return GTK_INPUT_PURPOSE_ALPHA;
    }
    private static final int GTK_INPUT_PURPOSE_DIGITS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_DIGITS = 2
     * }
     */
    public static int GTK_INPUT_PURPOSE_DIGITS() {
        return GTK_INPUT_PURPOSE_DIGITS;
    }
    private static final int GTK_INPUT_PURPOSE_NUMBER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_NUMBER = 3
     * }
     */
    public static int GTK_INPUT_PURPOSE_NUMBER() {
        return GTK_INPUT_PURPOSE_NUMBER;
    }
    private static final int GTK_INPUT_PURPOSE_PHONE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_PHONE = 4
     * }
     */
    public static int GTK_INPUT_PURPOSE_PHONE() {
        return GTK_INPUT_PURPOSE_PHONE;
    }
    private static final int GTK_INPUT_PURPOSE_URL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_URL = 5
     * }
     */
    public static int GTK_INPUT_PURPOSE_URL() {
        return GTK_INPUT_PURPOSE_URL;
    }
    private static final int GTK_INPUT_PURPOSE_EMAIL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_EMAIL = 6
     * }
     */
    public static int GTK_INPUT_PURPOSE_EMAIL() {
        return GTK_INPUT_PURPOSE_EMAIL;
    }
    private static final int GTK_INPUT_PURPOSE_NAME = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_NAME = 7
     * }
     */
    public static int GTK_INPUT_PURPOSE_NAME() {
        return GTK_INPUT_PURPOSE_NAME;
    }
    private static final int GTK_INPUT_PURPOSE_PASSWORD = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_PASSWORD = 8
     * }
     */
    public static int GTK_INPUT_PURPOSE_PASSWORD() {
        return GTK_INPUT_PURPOSE_PASSWORD;
    }
    private static final int GTK_INPUT_PURPOSE_PIN = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_PIN = 9
     * }
     */
    public static int GTK_INPUT_PURPOSE_PIN() {
        return GTK_INPUT_PURPOSE_PIN;
    }
    private static final int GTK_INPUT_PURPOSE_TERMINAL = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_PURPOSE_TERMINAL = 10
     * }
     */
    public static int GTK_INPUT_PURPOSE_TERMINAL() {
        return GTK_INPUT_PURPOSE_TERMINAL;
    }
    private static final int GTK_INPUT_HINT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_NONE = 0
     * }
     */
    public static int GTK_INPUT_HINT_NONE() {
        return GTK_INPUT_HINT_NONE;
    }
    private static final int GTK_INPUT_HINT_SPELLCHECK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_SPELLCHECK = 1
     * }
     */
    public static int GTK_INPUT_HINT_SPELLCHECK() {
        return GTK_INPUT_HINT_SPELLCHECK;
    }
    private static final int GTK_INPUT_HINT_NO_SPELLCHECK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_NO_SPELLCHECK = 2
     * }
     */
    public static int GTK_INPUT_HINT_NO_SPELLCHECK() {
        return GTK_INPUT_HINT_NO_SPELLCHECK;
    }
    private static final int GTK_INPUT_HINT_WORD_COMPLETION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_WORD_COMPLETION = 4
     * }
     */
    public static int GTK_INPUT_HINT_WORD_COMPLETION() {
        return GTK_INPUT_HINT_WORD_COMPLETION;
    }
    private static final int GTK_INPUT_HINT_LOWERCASE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_LOWERCASE = 8
     * }
     */
    public static int GTK_INPUT_HINT_LOWERCASE() {
        return GTK_INPUT_HINT_LOWERCASE;
    }
    private static final int GTK_INPUT_HINT_UPPERCASE_CHARS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_UPPERCASE_CHARS = 16
     * }
     */
    public static int GTK_INPUT_HINT_UPPERCASE_CHARS() {
        return GTK_INPUT_HINT_UPPERCASE_CHARS;
    }
    private static final int GTK_INPUT_HINT_UPPERCASE_WORDS = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_UPPERCASE_WORDS = 32
     * }
     */
    public static int GTK_INPUT_HINT_UPPERCASE_WORDS() {
        return GTK_INPUT_HINT_UPPERCASE_WORDS;
    }
    private static final int GTK_INPUT_HINT_UPPERCASE_SENTENCES = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_UPPERCASE_SENTENCES = 64
     * }
     */
    public static int GTK_INPUT_HINT_UPPERCASE_SENTENCES() {
        return GTK_INPUT_HINT_UPPERCASE_SENTENCES;
    }
    private static final int GTK_INPUT_HINT_INHIBIT_OSK = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_INHIBIT_OSK = 128
     * }
     */
    public static int GTK_INPUT_HINT_INHIBIT_OSK() {
        return GTK_INPUT_HINT_INHIBIT_OSK;
    }
    private static final int GTK_INPUT_HINT_VERTICAL_WRITING = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_VERTICAL_WRITING = 256
     * }
     */
    public static int GTK_INPUT_HINT_VERTICAL_WRITING() {
        return GTK_INPUT_HINT_VERTICAL_WRITING;
    }
    private static final int GTK_INPUT_HINT_EMOJI = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_EMOJI = 512
     * }
     */
    public static int GTK_INPUT_HINT_EMOJI() {
        return GTK_INPUT_HINT_EMOJI;
    }
    private static final int GTK_INPUT_HINT_NO_EMOJI = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_INPUT_HINT_NO_EMOJI = 1024
     * }
     */
    public static int GTK_INPUT_HINT_NO_EMOJI() {
        return GTK_INPUT_HINT_NO_EMOJI;
    }
    private static final int GTK_PHASE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PHASE_NONE = 0
     * }
     */
    public static int GTK_PHASE_NONE() {
        return GTK_PHASE_NONE;
    }
    private static final int GTK_PHASE_CAPTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PHASE_CAPTURE = 1
     * }
     */
    public static int GTK_PHASE_CAPTURE() {
        return GTK_PHASE_CAPTURE;
    }
    private static final int GTK_PHASE_BUBBLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PHASE_BUBBLE = 2
     * }
     */
    public static int GTK_PHASE_BUBBLE() {
        return GTK_PHASE_BUBBLE;
    }
    private static final int GTK_PHASE_TARGET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PHASE_TARGET = 3
     * }
     */
    public static int GTK_PHASE_TARGET() {
        return GTK_PHASE_TARGET;
    }
    private static final int GTK_EVENT_SEQUENCE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EVENT_SEQUENCE_NONE = 0
     * }
     */
    public static int GTK_EVENT_SEQUENCE_NONE() {
        return GTK_EVENT_SEQUENCE_NONE;
    }
    private static final int GTK_EVENT_SEQUENCE_CLAIMED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EVENT_SEQUENCE_CLAIMED = 1
     * }
     */
    public static int GTK_EVENT_SEQUENCE_CLAIMED() {
        return GTK_EVENT_SEQUENCE_CLAIMED;
    }
}

