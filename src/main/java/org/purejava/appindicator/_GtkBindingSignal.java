// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkBindingSignal {
 *     GtkBindingSignal *next;
 *     gchar *signal_name;
 *     guint n_args;
 *     GtkBindingArg *args;
 * }
 * }
 */
public class _GtkBindingSignal {

    _GtkBindingSignal() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_POINTER.withName("next"),
        app_indicator_h.C_POINTER.withName("signal_name"),
        app_indicator_h.C_INT.withName("n_args"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_POINTER.withName("args")
    ).withName("_GtkBindingSignal");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkBindingSignal *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkBindingSignal *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkBindingSignal *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkBindingSignal *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    private static final AddressLayout signal_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("signal_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar *signal_name
     * }
     */
    public static final AddressLayout signal_name$layout() {
        return signal_name$LAYOUT;
    }

    private static final long signal_name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar *signal_name
     * }
     */
    public static final long signal_name$offset() {
        return signal_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar *signal_name
     * }
     */
    public static MemorySegment signal_name(MemorySegment struct) {
        return struct.get(signal_name$LAYOUT, signal_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar *signal_name
     * }
     */
    public static void signal_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(signal_name$LAYOUT, signal_name$OFFSET, fieldValue);
    }

    private static final OfInt n_args$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint n_args
     * }
     */
    public static final OfInt n_args$layout() {
        return n_args$LAYOUT;
    }

    private static final long n_args$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint n_args
     * }
     */
    public static final long n_args$offset() {
        return n_args$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint n_args
     * }
     */
    public static int n_args(MemorySegment struct) {
        return struct.get(n_args$LAYOUT, n_args$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint n_args
     * }
     */
    public static void n_args(MemorySegment struct, int fieldValue) {
        struct.set(n_args$LAYOUT, n_args$OFFSET, fieldValue);
    }

    private static final AddressLayout args$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkBindingArg *args
     * }
     */
    public static final AddressLayout args$layout() {
        return args$LAYOUT;
    }

    private static final long args$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkBindingArg *args
     * }
     */
    public static final long args$offset() {
        return args$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkBindingArg *args
     * }
     */
    public static MemorySegment args(MemorySegment struct) {
        return struct.get(args$LAYOUT, args$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkBindingArg *args
     * }
     */
    public static void args(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(args$LAYOUT, args$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

