// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.foreign.*;

final class constants$424 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$424() {}
    static final FunctionDescriptor g_error_get_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle g_error_get_type$MH = RuntimeHelper.downcallHandle(
        "g_error_get_type",
        constants$424.g_error_get_type$FUNC
    );
    static final FunctionDescriptor g_date_time_get_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle g_date_time_get_type$MH = RuntimeHelper.downcallHandle(
        "g_date_time_get_type",
        constants$424.g_date_time_get_type$FUNC
    );
    static final FunctionDescriptor g_time_zone_get_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle g_time_zone_get_type$MH = RuntimeHelper.downcallHandle(
        "g_time_zone_get_type",
        constants$424.g_time_zone_get_type$FUNC
    );
    static final FunctionDescriptor g_io_channel_get_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle g_io_channel_get_type$MH = RuntimeHelper.downcallHandle(
        "g_io_channel_get_type",
        constants$424.g_io_channel_get_type$FUNC
    );
    static final FunctionDescriptor g_io_condition_get_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle g_io_condition_get_type$MH = RuntimeHelper.downcallHandle(
        "g_io_condition_get_type",
        constants$424.g_io_condition_get_type$FUNC
    );
    static final FunctionDescriptor g_variant_builder_get_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle g_variant_builder_get_type$MH = RuntimeHelper.downcallHandle(
        "g_variant_builder_get_type",
        constants$424.g_variant_builder_get_type$FUNC
    );
}


