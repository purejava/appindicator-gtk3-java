// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GDBusMethodInfo {
 *     gint ref_count;
 *     gchar *name;
 *     GDBusArgInfo **in_args;
 *     GDBusArgInfo **out_args;
 *     GDBusAnnotationInfo **annotations;
 * }
 * }
 */
public class _GDBusMethodInfo {

    _GDBusMethodInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_INT.withName("ref_count"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_POINTER.withName("name"),
        app_indicator_h.C_POINTER.withName("in_args"),
        app_indicator_h.C_POINTER.withName("out_args"),
        app_indicator_h.C_POINTER.withName("annotations")
    ).withName("_GDBusMethodInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ref_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ref_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint ref_count
     * }
     */
    public static final OfInt ref_count$layout() {
        return ref_count$LAYOUT;
    }

    private static final long ref_count$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint ref_count
     * }
     */
    public static final long ref_count$offset() {
        return ref_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint ref_count
     * }
     */
    public static int ref_count(MemorySegment struct) {
        return struct.get(ref_count$LAYOUT, ref_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint ref_count
     * }
     */
    public static void ref_count(MemorySegment struct, int fieldValue) {
        struct.set(ref_count$LAYOUT, ref_count$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout in_args$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("in_args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GDBusArgInfo **in_args
     * }
     */
    public static final AddressLayout in_args$layout() {
        return in_args$LAYOUT;
    }

    private static final long in_args$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GDBusArgInfo **in_args
     * }
     */
    public static final long in_args$offset() {
        return in_args$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GDBusArgInfo **in_args
     * }
     */
    public static MemorySegment in_args(MemorySegment struct) {
        return struct.get(in_args$LAYOUT, in_args$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GDBusArgInfo **in_args
     * }
     */
    public static void in_args(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(in_args$LAYOUT, in_args$OFFSET, fieldValue);
    }

    private static final AddressLayout out_args$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("out_args"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GDBusArgInfo **out_args
     * }
     */
    public static final AddressLayout out_args$layout() {
        return out_args$LAYOUT;
    }

    private static final long out_args$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GDBusArgInfo **out_args
     * }
     */
    public static final long out_args$offset() {
        return out_args$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GDBusArgInfo **out_args
     * }
     */
    public static MemorySegment out_args(MemorySegment struct) {
        return struct.get(out_args$LAYOUT, out_args$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GDBusArgInfo **out_args
     * }
     */
    public static void out_args(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(out_args$LAYOUT, out_args$OFFSET, fieldValue);
    }

    private static final AddressLayout annotations$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("annotations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GDBusAnnotationInfo **annotations
     * }
     */
    public static final AddressLayout annotations$layout() {
        return annotations$LAYOUT;
    }

    private static final long annotations$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GDBusAnnotationInfo **annotations
     * }
     */
    public static final long annotations$offset() {
        return annotations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GDBusAnnotationInfo **annotations
     * }
     */
    public static MemorySegment annotations(MemorySegment struct) {
        return struct.get(annotations$LAYOUT, annotations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GDBusAnnotationInfo **annotations
     * }
     */
    public static void annotations(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(annotations$LAYOUT, annotations$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

