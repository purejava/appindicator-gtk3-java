// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _PangoAttrShape {
 *     struct _PangoAttribute attr;
 *     struct _PangoRectangle ink_rect;
 *     struct _PangoRectangle logical_rect;
 *     void* data;
 *     void* (*copy_func)(void*);
 *     void (*destroy_func)(void*);
 * };
 * }
 */
public class _PangoAttrShape {

    public static MemoryLayout $LAYOUT() {
        return constants$1570.const$2;
    }
    public static MemorySegment attr$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment ink_rect$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment logical_rect$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static VarHandle data$VH() {
        return constants$1570.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1570.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
        constants$1570.const$3.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1570.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1570.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void* (*copy_func)(void*);
     * }
     */
    public interface copy_func {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(copy_func fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1570.const$4, fi, constants$5.const$2, scope);
        }
        static copy_func ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle copy_func$VH() {
        return constants$1570.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*copy_func)(void*);
     * }
     */
    public static MemorySegment copy_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1570.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*copy_func)(void*);
     * }
     */
    public static void copy_func$set(MemorySegment seg, MemorySegment x) {
        constants$1570.const$5.set(seg, x);
    }
    public static MemorySegment copy_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1570.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_func$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1570.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_func copy_func(MemorySegment segment, Arena scope) {
        return copy_func.ofAddress(copy_func$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*destroy_func)(void*);
     * }
     */
    public interface destroy_func {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(destroy_func fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1571.const$0, fi, constants$13.const$1, scope);
        }
        static destroy_func ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle destroy_func$VH() {
        return constants$1571.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*destroy_func)(void*);
     * }
     */
    public static MemorySegment destroy_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1571.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*destroy_func)(void*);
     * }
     */
    public static void destroy_func$set(MemorySegment seg, MemorySegment x) {
        constants$1571.const$1.set(seg, x);
    }
    public static MemorySegment destroy_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1571.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void destroy_func$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1571.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static destroy_func destroy_func(MemorySegment segment, Arena scope) {
        return destroy_func.ofAddress(destroy_func$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


