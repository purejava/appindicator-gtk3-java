// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkAccelLabelClass {
 *     struct _GtkLabelClass parent_class;
 *     char* signal_quote1;
 *     char* signal_quote2;
 *     char* mod_name_shift;
 *     char* mod_name_control;
 *     char* mod_name_alt;
 *     char* mod_separator;
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkAccelLabelClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2260.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 952);
    }
    public static VarHandle signal_quote1$VH() {
        return constants$2261.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* signal_quote1;
     * }
     */
    public static MemorySegment signal_quote1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* signal_quote1;
     * }
     */
    public static void signal_quote1$set(MemorySegment seg, MemorySegment x) {
        constants$2261.const$0.set(seg, x);
    }
    public static MemorySegment signal_quote1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void signal_quote1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2261.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle signal_quote2$VH() {
        return constants$2261.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* signal_quote2;
     * }
     */
    public static MemorySegment signal_quote2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* signal_quote2;
     * }
     */
    public static void signal_quote2$set(MemorySegment seg, MemorySegment x) {
        constants$2261.const$1.set(seg, x);
    }
    public static MemorySegment signal_quote2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void signal_quote2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2261.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mod_name_shift$VH() {
        return constants$2261.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* mod_name_shift;
     * }
     */
    public static MemorySegment mod_name_shift$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* mod_name_shift;
     * }
     */
    public static void mod_name_shift$set(MemorySegment seg, MemorySegment x) {
        constants$2261.const$2.set(seg, x);
    }
    public static MemorySegment mod_name_shift$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mod_name_shift$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2261.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mod_name_control$VH() {
        return constants$2261.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* mod_name_control;
     * }
     */
    public static MemorySegment mod_name_control$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* mod_name_control;
     * }
     */
    public static void mod_name_control$set(MemorySegment seg, MemorySegment x) {
        constants$2261.const$3.set(seg, x);
    }
    public static MemorySegment mod_name_control$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void mod_name_control$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2261.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mod_name_alt$VH() {
        return constants$2261.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* mod_name_alt;
     * }
     */
    public static MemorySegment mod_name_alt$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* mod_name_alt;
     * }
     */
    public static void mod_name_alt$set(MemorySegment seg, MemorySegment x) {
        constants$2261.const$4.set(seg, x);
    }
    public static MemorySegment mod_name_alt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mod_name_alt$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2261.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mod_separator$VH() {
        return constants$2261.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* mod_separator;
     * }
     */
    public static MemorySegment mod_separator$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* mod_separator;
     * }
     */
    public static void mod_separator$set(MemorySegment seg, MemorySegment x) {
        constants$2261.const$5.set(seg, x);
    }
    public static MemorySegment mod_separator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2261.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void mod_separator$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2261.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2262.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2262.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2262.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2262.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2262.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2262.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2262.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2262.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2262.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2262.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2262.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2262.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2262.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2262.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2262.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2262.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2262.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2262.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2263.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2263.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2263.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2263.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2263.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2263.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


