// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GdkRGBA {
 *     double red;
 *     double green;
 *     double blue;
 *     double alpha;
 * };
 * }
 */
public class _GdkRGBA {

    public static MemoryLayout $LAYOUT() {
        return constants$1881.const$4;
    }
    public static VarHandle red$VH() {
        return constants$1881.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double red;
     * }
     */
    public static double red$get(MemorySegment seg) {
        return (double)constants$1881.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double red;
     * }
     */
    public static void red$set(MemorySegment seg, double x) {
        constants$1881.const$5.set(seg, x);
    }
    public static double red$get(MemorySegment seg, long index) {
        return (double)constants$1881.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void red$set(MemorySegment seg, long index, double x) {
        constants$1881.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle green$VH() {
        return constants$1882.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double green;
     * }
     */
    public static double green$get(MemorySegment seg) {
        return (double)constants$1882.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double green;
     * }
     */
    public static void green$set(MemorySegment seg, double x) {
        constants$1882.const$0.set(seg, x);
    }
    public static double green$get(MemorySegment seg, long index) {
        return (double)constants$1882.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void green$set(MemorySegment seg, long index, double x) {
        constants$1882.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blue$VH() {
        return constants$1882.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double blue;
     * }
     */
    public static double blue$get(MemorySegment seg) {
        return (double)constants$1882.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double blue;
     * }
     */
    public static void blue$set(MemorySegment seg, double x) {
        constants$1882.const$1.set(seg, x);
    }
    public static double blue$get(MemorySegment seg, long index) {
        return (double)constants$1882.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void blue$set(MemorySegment seg, long index, double x) {
        constants$1882.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle alpha$VH() {
        return constants$1882.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double alpha;
     * }
     */
    public static double alpha$get(MemorySegment seg) {
        return (double)constants$1882.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double alpha;
     * }
     */
    public static void alpha$set(MemorySegment seg, double x) {
        constants$1882.const$2.set(seg, x);
    }
    public static double alpha$get(MemorySegment seg, long index) {
        return (double)constants$1882.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void alpha$set(MemorySegment seg, long index, double x) {
        constants$1882.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


