// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _AtkObjectFactoryClass {
 *     GObjectClass parent_class;
 *     AtkObject *(*create_accessible)(GObject *);
 *     void (*invalidate)(AtkObjectFactory *);
 *     GType (*get_accessible_type)(void);
 *     AtkFunction pad1;
 *     AtkFunction pad2;
 * }
 * }
 */
public class _AtkObjectFactoryClass {

    _AtkObjectFactoryClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("create_accessible"),
        app_indicator_h.C_POINTER.withName("invalidate"),
        app_indicator_h.C_POINTER.withName("get_accessible_type"),
        app_indicator_h.C_POINTER.withName("pad1"),
        app_indicator_h.C_POINTER.withName("pad2")
    ).withName("_AtkObjectFactoryClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * AtkObject *(*create_accessible)(GObject *)
     * }
     */
    public class create_accessible {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(create_accessible.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(create_accessible.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout create_accessible$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("create_accessible"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AtkObject *(*create_accessible)(GObject *)
     * }
     */
    public static final AddressLayout create_accessible$layout() {
        return create_accessible$LAYOUT;
    }

    private static final long create_accessible$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AtkObject *(*create_accessible)(GObject *)
     * }
     */
    public static final long create_accessible$offset() {
        return create_accessible$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AtkObject *(*create_accessible)(GObject *)
     * }
     */
    public static MemorySegment create_accessible(MemorySegment struct) {
        return struct.get(create_accessible$LAYOUT, create_accessible$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AtkObject *(*create_accessible)(GObject *)
     * }
     */
    public static void create_accessible(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(create_accessible$LAYOUT, create_accessible$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*invalidate)(AtkObjectFactory *)
     * }
     */
    public class invalidate {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(invalidate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(invalidate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout invalidate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("invalidate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*invalidate)(AtkObjectFactory *)
     * }
     */
    public static final AddressLayout invalidate$layout() {
        return invalidate$LAYOUT;
    }

    private static final long invalidate$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*invalidate)(AtkObjectFactory *)
     * }
     */
    public static final long invalidate$offset() {
        return invalidate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*invalidate)(AtkObjectFactory *)
     * }
     */
    public static MemorySegment invalidate(MemorySegment struct) {
        return struct.get(invalidate$LAYOUT, invalidate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*invalidate)(AtkObjectFactory *)
     * }
     */
    public static void invalidate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(invalidate$LAYOUT, invalidate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GType (*get_accessible_type)(void)
     * }
     */
    public class get_accessible_type {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG);

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_accessible_type.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_accessible_type.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_accessible_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_accessible_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GType (*get_accessible_type)(void)
     * }
     */
    public static final AddressLayout get_accessible_type$layout() {
        return get_accessible_type$LAYOUT;
    }

    private static final long get_accessible_type$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GType (*get_accessible_type)(void)
     * }
     */
    public static final long get_accessible_type$offset() {
        return get_accessible_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GType (*get_accessible_type)(void)
     * }
     */
    public static MemorySegment get_accessible_type(MemorySegment struct) {
        return struct.get(get_accessible_type$LAYOUT, get_accessible_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GType (*get_accessible_type)(void)
     * }
     */
    public static void get_accessible_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_accessible_type$LAYOUT, get_accessible_type$OFFSET, fieldValue);
    }

    private static final AddressLayout pad1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pad1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AtkFunction pad1
     * }
     */
    public static final AddressLayout pad1$layout() {
        return pad1$LAYOUT;
    }

    private static final long pad1$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AtkFunction pad1
     * }
     */
    public static final long pad1$offset() {
        return pad1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AtkFunction pad1
     * }
     */
    public static MemorySegment pad1(MemorySegment struct) {
        return struct.get(pad1$LAYOUT, pad1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AtkFunction pad1
     * }
     */
    public static void pad1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pad1$LAYOUT, pad1$OFFSET, fieldValue);
    }

    private static final AddressLayout pad2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pad2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AtkFunction pad2
     * }
     */
    public static final AddressLayout pad2$layout() {
        return pad2$LAYOUT;
    }

    private static final long pad2$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AtkFunction pad2
     * }
     */
    public static final long pad2$offset() {
        return pad2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AtkFunction pad2
     * }
     */
    public static MemorySegment pad2(MemorySegment struct) {
        return struct.get(pad2$LAYOUT, pad2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AtkFunction pad2
     * }
     */
    public static void pad2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pad2$LAYOUT, pad2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

