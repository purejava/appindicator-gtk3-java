// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GParamSpecString {
 *     struct _GParamSpec parent_instance;
 *     char* default_value;
 *     char* cset_first;
 *     char* cset_nth;
 *     char substitutor;
 *      *     unsigned int null_fold_if_empty;
 *     unsigned int ensure_non_null;
 * };
 * }
 */
public class _GParamSpecString {

    public static MemoryLayout $LAYOUT() {
        return constants$663.const$0;
    }
    public static MemorySegment parent_instance$slice(MemorySegment seg) {
        return seg.asSlice(0, 72);
    }
    public static VarHandle default_value$VH() {
        return constants$663.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* default_value;
     * }
     */
    public static MemorySegment default_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$663.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* default_value;
     * }
     */
    public static void default_value$set(MemorySegment seg, MemorySegment x) {
        constants$663.const$1.set(seg, x);
    }
    public static MemorySegment default_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$663.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void default_value$set(MemorySegment seg, long index, MemorySegment x) {
        constants$663.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cset_first$VH() {
        return constants$663.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* cset_first;
     * }
     */
    public static MemorySegment cset_first$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$663.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* cset_first;
     * }
     */
    public static void cset_first$set(MemorySegment seg, MemorySegment x) {
        constants$663.const$2.set(seg, x);
    }
    public static MemorySegment cset_first$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$663.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void cset_first$set(MemorySegment seg, long index, MemorySegment x) {
        constants$663.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cset_nth$VH() {
        return constants$663.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* cset_nth;
     * }
     */
    public static MemorySegment cset_nth$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$663.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* cset_nth;
     * }
     */
    public static void cset_nth$set(MemorySegment seg, MemorySegment x) {
        constants$663.const$3.set(seg, x);
    }
    public static MemorySegment cset_nth$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$663.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cset_nth$set(MemorySegment seg, long index, MemorySegment x) {
        constants$663.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle substitutor$VH() {
        return constants$663.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char substitutor;
     * }
     */
    public static byte substitutor$get(MemorySegment seg) {
        return (byte)constants$663.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char substitutor;
     * }
     */
    public static void substitutor$set(MemorySegment seg, byte x) {
        constants$663.const$4.set(seg, x);
    }
    public static byte substitutor$get(MemorySegment seg, long index) {
        return (byte)constants$663.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void substitutor$set(MemorySegment seg, long index, byte x) {
        constants$663.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


