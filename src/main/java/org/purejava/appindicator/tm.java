// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct tm {
 *     int tm_sec;
 *     int tm_min;
 *     int tm_hour;
 *     int tm_mday;
 *     int tm_mon;
 *     int tm_year;
 *     int tm_wday;
 *     int tm_yday;
 *     int tm_isdst;
 *     long tm_gmtoff;
 *     char* tm_zone;
 * };
 * }
 */
public class tm {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$3;
    }
    public static VarHandle tm_sec$VH() {
        return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tm_sec;
     * }
     */
    public static int tm_sec$get(MemorySegment seg) {
        return (int)constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tm_sec;
     * }
     */
    public static void tm_sec$set(MemorySegment seg, int x) {
        constants$0.const$4.set(seg, x);
    }
    public static int tm_sec$get(MemorySegment seg, long index) {
        return (int)constants$0.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_sec$set(MemorySegment seg, long index, int x) {
        constants$0.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm_min$VH() {
        return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tm_min;
     * }
     */
    public static int tm_min$get(MemorySegment seg) {
        return (int)constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tm_min;
     * }
     */
    public static void tm_min$set(MemorySegment seg, int x) {
        constants$0.const$5.set(seg, x);
    }
    public static int tm_min$get(MemorySegment seg, long index) {
        return (int)constants$0.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_min$set(MemorySegment seg, long index, int x) {
        constants$0.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm_hour$VH() {
        return constants$1.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tm_hour;
     * }
     */
    public static int tm_hour$get(MemorySegment seg) {
        return (int)constants$1.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tm_hour;
     * }
     */
    public static void tm_hour$set(MemorySegment seg, int x) {
        constants$1.const$0.set(seg, x);
    }
    public static int tm_hour$get(MemorySegment seg, long index) {
        return (int)constants$1.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_hour$set(MemorySegment seg, long index, int x) {
        constants$1.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm_mday$VH() {
        return constants$1.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tm_mday;
     * }
     */
    public static int tm_mday$get(MemorySegment seg) {
        return (int)constants$1.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tm_mday;
     * }
     */
    public static void tm_mday$set(MemorySegment seg, int x) {
        constants$1.const$1.set(seg, x);
    }
    public static int tm_mday$get(MemorySegment seg, long index) {
        return (int)constants$1.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_mday$set(MemorySegment seg, long index, int x) {
        constants$1.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm_mon$VH() {
        return constants$1.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tm_mon;
     * }
     */
    public static int tm_mon$get(MemorySegment seg) {
        return (int)constants$1.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tm_mon;
     * }
     */
    public static void tm_mon$set(MemorySegment seg, int x) {
        constants$1.const$2.set(seg, x);
    }
    public static int tm_mon$get(MemorySegment seg, long index) {
        return (int)constants$1.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_mon$set(MemorySegment seg, long index, int x) {
        constants$1.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm_year$VH() {
        return constants$1.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tm_year;
     * }
     */
    public static int tm_year$get(MemorySegment seg) {
        return (int)constants$1.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tm_year;
     * }
     */
    public static void tm_year$set(MemorySegment seg, int x) {
        constants$1.const$3.set(seg, x);
    }
    public static int tm_year$get(MemorySegment seg, long index) {
        return (int)constants$1.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_year$set(MemorySegment seg, long index, int x) {
        constants$1.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm_wday$VH() {
        return constants$1.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tm_wday;
     * }
     */
    public static int tm_wday$get(MemorySegment seg) {
        return (int)constants$1.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tm_wday;
     * }
     */
    public static void tm_wday$set(MemorySegment seg, int x) {
        constants$1.const$4.set(seg, x);
    }
    public static int tm_wday$get(MemorySegment seg, long index) {
        return (int)constants$1.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_wday$set(MemorySegment seg, long index, int x) {
        constants$1.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm_yday$VH() {
        return constants$1.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tm_yday;
     * }
     */
    public static int tm_yday$get(MemorySegment seg) {
        return (int)constants$1.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tm_yday;
     * }
     */
    public static void tm_yday$set(MemorySegment seg, int x) {
        constants$1.const$5.set(seg, x);
    }
    public static int tm_yday$get(MemorySegment seg, long index) {
        return (int)constants$1.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_yday$set(MemorySegment seg, long index, int x) {
        constants$1.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm_isdst$VH() {
        return constants$2.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int tm_isdst;
     * }
     */
    public static int tm_isdst$get(MemorySegment seg) {
        return (int)constants$2.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int tm_isdst;
     * }
     */
    public static void tm_isdst$set(MemorySegment seg, int x) {
        constants$2.const$0.set(seg, x);
    }
    public static int tm_isdst$get(MemorySegment seg, long index) {
        return (int)constants$2.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_isdst$set(MemorySegment seg, long index, int x) {
        constants$2.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm_gmtoff$VH() {
        return constants$2.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long tm_gmtoff;
     * }
     */
    public static long tm_gmtoff$get(MemorySegment seg) {
        return (long)constants$2.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long tm_gmtoff;
     * }
     */
    public static void tm_gmtoff$set(MemorySegment seg, long x) {
        constants$2.const$1.set(seg, x);
    }
    public static long tm_gmtoff$get(MemorySegment seg, long index) {
        return (long)constants$2.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_gmtoff$set(MemorySegment seg, long index, long x) {
        constants$2.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tm_zone$VH() {
        return constants$2.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* tm_zone;
     * }
     */
    public static MemorySegment tm_zone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* tm_zone;
     * }
     */
    public static void tm_zone$set(MemorySegment seg, MemorySegment x) {
        constants$2.const$2.set(seg, x);
    }
    public static MemorySegment tm_zone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void tm_zone$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


