// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _GTlsBackendInterface {
 *     GTypeInterface g_iface;
 *     gboolean (*supports_tls)(GTlsBackend*);
 *     GType (*get_certificate_type)();
 *     GType (*get_client_connection_type)();
 *     GType (*get_server_connection_type)();
 *     GType (*get_file_database_type)();
 *     GTlsDatabase* (*get_default_database)(GTlsBackend*);
 *     gboolean (*supports_dtls)(GTlsBackend*);
 *     GType (*get_dtls_client_connection_type)();
 *     GType (*get_dtls_server_connection_type)();
 * };
 * }
 */
public class _GTlsBackendInterface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("supports_tls"),
        Constants$root.C_POINTER$LAYOUT.withName("get_certificate_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_client_connection_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_server_connection_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_file_database_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_default_database"),
        Constants$root.C_POINTER$LAYOUT.withName("supports_dtls"),
        Constants$root.C_POINTER$LAYOUT.withName("get_dtls_client_connection_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_dtls_server_connection_type")
    ).withName("_GTlsBackendInterface");
    public static MemoryLayout $LAYOUT() {
        return _GTlsBackendInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor supports_tls$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor supports_tls_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle supports_tls_UP$MH = RuntimeHelper.upcallHandle(supports_tls.class, "apply", _GTlsBackendInterface.supports_tls_UP$FUNC);
    static final FunctionDescriptor supports_tls_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle supports_tls_DOWN$MH = RuntimeHelper.downcallHandle(
        _GTlsBackendInterface.supports_tls_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*supports_tls)(GTlsBackend*);
     * }
     */
    public interface supports_tls {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(supports_tls fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GTlsBackendInterface.supports_tls_UP$MH, fi, _GTlsBackendInterface.supports_tls$FUNC, scope);
        }
        static supports_tls ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GTlsBackendInterface.supports_tls_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle supports_tls$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("supports_tls"));
    public static VarHandle supports_tls$VH() {
        return _GTlsBackendInterface.supports_tls$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*supports_tls)(GTlsBackend*);
     * }
     */
    public static MemorySegment supports_tls$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.supports_tls$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*supports_tls)(GTlsBackend*);
     * }
     */
    public static void supports_tls$set(MemorySegment seg, MemorySegment x) {
        _GTlsBackendInterface.supports_tls$VH.set(seg, x);
    }
    public static MemorySegment supports_tls$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.supports_tls$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void supports_tls$set(MemorySegment seg, long index, MemorySegment x) {
        _GTlsBackendInterface.supports_tls$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static supports_tls supports_tls(MemorySegment segment, SegmentScope scope) {
        return supports_tls.ofAddress(supports_tls$get(segment), scope);
    }
    static final FunctionDescriptor get_certificate_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final FunctionDescriptor get_certificate_type_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_certificate_type_UP$MH = RuntimeHelper.upcallHandle(get_certificate_type.class, "apply", _GTlsBackendInterface.get_certificate_type_UP$FUNC);
    static final FunctionDescriptor get_certificate_type_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_certificate_type_DOWN$MH = RuntimeHelper.downcallHandle(
        _GTlsBackendInterface.get_certificate_type_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GType (*get_certificate_type)();
     * }
     */
    public interface get_certificate_type {

        long apply();
        static MemorySegment allocate(get_certificate_type fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GTlsBackendInterface.get_certificate_type_UP$MH, fi, _GTlsBackendInterface.get_certificate_type$FUNC, scope);
        }
        static get_certificate_type ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    return (long)_GTlsBackendInterface.get_certificate_type_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_certificate_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_certificate_type"));
    public static VarHandle get_certificate_type$VH() {
        return _GTlsBackendInterface.get_certificate_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GType (*get_certificate_type)();
     * }
     */
    public static MemorySegment get_certificate_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_certificate_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GType (*get_certificate_type)();
     * }
     */
    public static void get_certificate_type$set(MemorySegment seg, MemorySegment x) {
        _GTlsBackendInterface.get_certificate_type$VH.set(seg, x);
    }
    public static MemorySegment get_certificate_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_certificate_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_certificate_type$set(MemorySegment seg, long index, MemorySegment x) {
        _GTlsBackendInterface.get_certificate_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_certificate_type get_certificate_type(MemorySegment segment, SegmentScope scope) {
        return get_certificate_type.ofAddress(get_certificate_type$get(segment), scope);
    }
    static final FunctionDescriptor get_client_connection_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final FunctionDescriptor get_client_connection_type_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_client_connection_type_UP$MH = RuntimeHelper.upcallHandle(get_client_connection_type.class, "apply", _GTlsBackendInterface.get_client_connection_type_UP$FUNC);
    static final FunctionDescriptor get_client_connection_type_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_client_connection_type_DOWN$MH = RuntimeHelper.downcallHandle(
        _GTlsBackendInterface.get_client_connection_type_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GType (*get_client_connection_type)();
     * }
     */
    public interface get_client_connection_type {

        long apply();
        static MemorySegment allocate(get_client_connection_type fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GTlsBackendInterface.get_client_connection_type_UP$MH, fi, _GTlsBackendInterface.get_client_connection_type$FUNC, scope);
        }
        static get_client_connection_type ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    return (long)_GTlsBackendInterface.get_client_connection_type_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_client_connection_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_client_connection_type"));
    public static VarHandle get_client_connection_type$VH() {
        return _GTlsBackendInterface.get_client_connection_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GType (*get_client_connection_type)();
     * }
     */
    public static MemorySegment get_client_connection_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_client_connection_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GType (*get_client_connection_type)();
     * }
     */
    public static void get_client_connection_type$set(MemorySegment seg, MemorySegment x) {
        _GTlsBackendInterface.get_client_connection_type$VH.set(seg, x);
    }
    public static MemorySegment get_client_connection_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_client_connection_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_client_connection_type$set(MemorySegment seg, long index, MemorySegment x) {
        _GTlsBackendInterface.get_client_connection_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_client_connection_type get_client_connection_type(MemorySegment segment, SegmentScope scope) {
        return get_client_connection_type.ofAddress(get_client_connection_type$get(segment), scope);
    }
    static final FunctionDescriptor get_server_connection_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final FunctionDescriptor get_server_connection_type_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_server_connection_type_UP$MH = RuntimeHelper.upcallHandle(get_server_connection_type.class, "apply", _GTlsBackendInterface.get_server_connection_type_UP$FUNC);
    static final FunctionDescriptor get_server_connection_type_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_server_connection_type_DOWN$MH = RuntimeHelper.downcallHandle(
        _GTlsBackendInterface.get_server_connection_type_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GType (*get_server_connection_type)();
     * }
     */
    public interface get_server_connection_type {

        long apply();
        static MemorySegment allocate(get_server_connection_type fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GTlsBackendInterface.get_server_connection_type_UP$MH, fi, _GTlsBackendInterface.get_server_connection_type$FUNC, scope);
        }
        static get_server_connection_type ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    return (long)_GTlsBackendInterface.get_server_connection_type_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_server_connection_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_server_connection_type"));
    public static VarHandle get_server_connection_type$VH() {
        return _GTlsBackendInterface.get_server_connection_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GType (*get_server_connection_type)();
     * }
     */
    public static MemorySegment get_server_connection_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_server_connection_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GType (*get_server_connection_type)();
     * }
     */
    public static void get_server_connection_type$set(MemorySegment seg, MemorySegment x) {
        _GTlsBackendInterface.get_server_connection_type$VH.set(seg, x);
    }
    public static MemorySegment get_server_connection_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_server_connection_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_server_connection_type$set(MemorySegment seg, long index, MemorySegment x) {
        _GTlsBackendInterface.get_server_connection_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_server_connection_type get_server_connection_type(MemorySegment segment, SegmentScope scope) {
        return get_server_connection_type.ofAddress(get_server_connection_type$get(segment), scope);
    }
    static final FunctionDescriptor get_file_database_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final FunctionDescriptor get_file_database_type_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_file_database_type_UP$MH = RuntimeHelper.upcallHandle(get_file_database_type.class, "apply", _GTlsBackendInterface.get_file_database_type_UP$FUNC);
    static final FunctionDescriptor get_file_database_type_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_file_database_type_DOWN$MH = RuntimeHelper.downcallHandle(
        _GTlsBackendInterface.get_file_database_type_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GType (*get_file_database_type)();
     * }
     */
    public interface get_file_database_type {

        long apply();
        static MemorySegment allocate(get_file_database_type fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GTlsBackendInterface.get_file_database_type_UP$MH, fi, _GTlsBackendInterface.get_file_database_type$FUNC, scope);
        }
        static get_file_database_type ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    return (long)_GTlsBackendInterface.get_file_database_type_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_file_database_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_file_database_type"));
    public static VarHandle get_file_database_type$VH() {
        return _GTlsBackendInterface.get_file_database_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GType (*get_file_database_type)();
     * }
     */
    public static MemorySegment get_file_database_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_file_database_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GType (*get_file_database_type)();
     * }
     */
    public static void get_file_database_type$set(MemorySegment seg, MemorySegment x) {
        _GTlsBackendInterface.get_file_database_type$VH.set(seg, x);
    }
    public static MemorySegment get_file_database_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_file_database_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_file_database_type$set(MemorySegment seg, long index, MemorySegment x) {
        _GTlsBackendInterface.get_file_database_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_file_database_type get_file_database_type(MemorySegment segment, SegmentScope scope) {
        return get_file_database_type.ofAddress(get_file_database_type$get(segment), scope);
    }
    static final FunctionDescriptor get_default_database$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_default_database_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_default_database_UP$MH = RuntimeHelper.upcallHandle(get_default_database.class, "apply", _GTlsBackendInterface.get_default_database_UP$FUNC);
    static final FunctionDescriptor get_default_database_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_default_database_DOWN$MH = RuntimeHelper.downcallHandle(
        _GTlsBackendInterface.get_default_database_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GTlsDatabase* (*get_default_database)(GTlsBackend*);
     * }
     */
    public interface get_default_database {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_default_database fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GTlsBackendInterface.get_default_database_UP$MH, fi, _GTlsBackendInterface.get_default_database$FUNC, scope);
        }
        static get_default_database ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_default_database_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_default_database$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_default_database"));
    public static VarHandle get_default_database$VH() {
        return _GTlsBackendInterface.get_default_database$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GTlsDatabase* (*get_default_database)(GTlsBackend*);
     * }
     */
    public static MemorySegment get_default_database$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_default_database$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GTlsDatabase* (*get_default_database)(GTlsBackend*);
     * }
     */
    public static void get_default_database$set(MemorySegment seg, MemorySegment x) {
        _GTlsBackendInterface.get_default_database$VH.set(seg, x);
    }
    public static MemorySegment get_default_database$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_default_database$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_default_database$set(MemorySegment seg, long index, MemorySegment x) {
        _GTlsBackendInterface.get_default_database$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_default_database get_default_database(MemorySegment segment, SegmentScope scope) {
        return get_default_database.ofAddress(get_default_database$get(segment), scope);
    }
    static final FunctionDescriptor supports_dtls$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor supports_dtls_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle supports_dtls_UP$MH = RuntimeHelper.upcallHandle(supports_dtls.class, "apply", _GTlsBackendInterface.supports_dtls_UP$FUNC);
    static final FunctionDescriptor supports_dtls_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle supports_dtls_DOWN$MH = RuntimeHelper.downcallHandle(
        _GTlsBackendInterface.supports_dtls_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*supports_dtls)(GTlsBackend*);
     * }
     */
    public interface supports_dtls {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(supports_dtls fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GTlsBackendInterface.supports_dtls_UP$MH, fi, _GTlsBackendInterface.supports_dtls$FUNC, scope);
        }
        static supports_dtls ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GTlsBackendInterface.supports_dtls_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle supports_dtls$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("supports_dtls"));
    public static VarHandle supports_dtls$VH() {
        return _GTlsBackendInterface.supports_dtls$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*supports_dtls)(GTlsBackend*);
     * }
     */
    public static MemorySegment supports_dtls$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.supports_dtls$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*supports_dtls)(GTlsBackend*);
     * }
     */
    public static void supports_dtls$set(MemorySegment seg, MemorySegment x) {
        _GTlsBackendInterface.supports_dtls$VH.set(seg, x);
    }
    public static MemorySegment supports_dtls$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.supports_dtls$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void supports_dtls$set(MemorySegment seg, long index, MemorySegment x) {
        _GTlsBackendInterface.supports_dtls$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static supports_dtls supports_dtls(MemorySegment segment, SegmentScope scope) {
        return supports_dtls.ofAddress(supports_dtls$get(segment), scope);
    }
    static final FunctionDescriptor get_dtls_client_connection_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final FunctionDescriptor get_dtls_client_connection_type_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_dtls_client_connection_type_UP$MH = RuntimeHelper.upcallHandle(get_dtls_client_connection_type.class, "apply", _GTlsBackendInterface.get_dtls_client_connection_type_UP$FUNC);
    static final FunctionDescriptor get_dtls_client_connection_type_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_dtls_client_connection_type_DOWN$MH = RuntimeHelper.downcallHandle(
        _GTlsBackendInterface.get_dtls_client_connection_type_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GType (*get_dtls_client_connection_type)();
     * }
     */
    public interface get_dtls_client_connection_type {

        long apply();
        static MemorySegment allocate(get_dtls_client_connection_type fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GTlsBackendInterface.get_dtls_client_connection_type_UP$MH, fi, _GTlsBackendInterface.get_dtls_client_connection_type$FUNC, scope);
        }
        static get_dtls_client_connection_type ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    return (long)_GTlsBackendInterface.get_dtls_client_connection_type_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_dtls_client_connection_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_dtls_client_connection_type"));
    public static VarHandle get_dtls_client_connection_type$VH() {
        return _GTlsBackendInterface.get_dtls_client_connection_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GType (*get_dtls_client_connection_type)();
     * }
     */
    public static MemorySegment get_dtls_client_connection_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_dtls_client_connection_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GType (*get_dtls_client_connection_type)();
     * }
     */
    public static void get_dtls_client_connection_type$set(MemorySegment seg, MemorySegment x) {
        _GTlsBackendInterface.get_dtls_client_connection_type$VH.set(seg, x);
    }
    public static MemorySegment get_dtls_client_connection_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_dtls_client_connection_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dtls_client_connection_type$set(MemorySegment seg, long index, MemorySegment x) {
        _GTlsBackendInterface.get_dtls_client_connection_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dtls_client_connection_type get_dtls_client_connection_type(MemorySegment segment, SegmentScope scope) {
        return get_dtls_client_connection_type.ofAddress(get_dtls_client_connection_type$get(segment), scope);
    }
    static final FunctionDescriptor get_dtls_server_connection_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final FunctionDescriptor get_dtls_server_connection_type_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_dtls_server_connection_type_UP$MH = RuntimeHelper.upcallHandle(get_dtls_server_connection_type.class, "apply", _GTlsBackendInterface.get_dtls_server_connection_type_UP$FUNC);
    static final FunctionDescriptor get_dtls_server_connection_type_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT);
    static final MethodHandle get_dtls_server_connection_type_DOWN$MH = RuntimeHelper.downcallHandle(
        _GTlsBackendInterface.get_dtls_server_connection_type_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GType (*get_dtls_server_connection_type)();
     * }
     */
    public interface get_dtls_server_connection_type {

        long apply();
        static MemorySegment allocate(get_dtls_server_connection_type fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GTlsBackendInterface.get_dtls_server_connection_type_UP$MH, fi, _GTlsBackendInterface.get_dtls_server_connection_type$FUNC, scope);
        }
        static get_dtls_server_connection_type ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    return (long)_GTlsBackendInterface.get_dtls_server_connection_type_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_dtls_server_connection_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_dtls_server_connection_type"));
    public static VarHandle get_dtls_server_connection_type$VH() {
        return _GTlsBackendInterface.get_dtls_server_connection_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GType (*get_dtls_server_connection_type)();
     * }
     */
    public static MemorySegment get_dtls_server_connection_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_dtls_server_connection_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GType (*get_dtls_server_connection_type)();
     * }
     */
    public static void get_dtls_server_connection_type$set(MemorySegment seg, MemorySegment x) {
        _GTlsBackendInterface.get_dtls_server_connection_type$VH.set(seg, x);
    }
    public static MemorySegment get_dtls_server_connection_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GTlsBackendInterface.get_dtls_server_connection_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dtls_server_connection_type$set(MemorySegment seg, long index, MemorySegment x) {
        _GTlsBackendInterface.get_dtls_server_connection_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dtls_server_connection_type get_dtls_server_connection_type(MemorySegment segment, SegmentScope scope) {
        return get_dtls_server_connection_type.ofAddress(get_dtls_server_connection_type$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


