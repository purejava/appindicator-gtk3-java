// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_14 extends app_indicator_h_15 {

    app_indicator_h_14() {
        // Should not be called directly
    }
    private static final int G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = 16
     * }
     */
    public static int G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION() {
        return G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION;
    }
    private static final int G_DBUS_PROXY_FLAGS_NO_MATCH_RULE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_PROXY_FLAGS_NO_MATCH_RULE = 32
     * }
     */
    public static int G_DBUS_PROXY_FLAGS_NO_MATCH_RULE() {
        return G_DBUS_PROXY_FLAGS_NO_MATCH_RULE;
    }
    private static final int G_DBUS_ERROR_FAILED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_FAILED = 0
     * }
     */
    public static int G_DBUS_ERROR_FAILED() {
        return G_DBUS_ERROR_FAILED;
    }
    private static final int G_DBUS_ERROR_NO_MEMORY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_NO_MEMORY = 1
     * }
     */
    public static int G_DBUS_ERROR_NO_MEMORY() {
        return G_DBUS_ERROR_NO_MEMORY;
    }
    private static final int G_DBUS_ERROR_SERVICE_UNKNOWN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SERVICE_UNKNOWN = 2
     * }
     */
    public static int G_DBUS_ERROR_SERVICE_UNKNOWN() {
        return G_DBUS_ERROR_SERVICE_UNKNOWN;
    }
    private static final int G_DBUS_ERROR_NAME_HAS_NO_OWNER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_NAME_HAS_NO_OWNER = 3
     * }
     */
    public static int G_DBUS_ERROR_NAME_HAS_NO_OWNER() {
        return G_DBUS_ERROR_NAME_HAS_NO_OWNER;
    }
    private static final int G_DBUS_ERROR_NO_REPLY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_NO_REPLY = 4
     * }
     */
    public static int G_DBUS_ERROR_NO_REPLY() {
        return G_DBUS_ERROR_NO_REPLY;
    }
    private static final int G_DBUS_ERROR_IO_ERROR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_IO_ERROR = 5
     * }
     */
    public static int G_DBUS_ERROR_IO_ERROR() {
        return G_DBUS_ERROR_IO_ERROR;
    }
    private static final int G_DBUS_ERROR_BAD_ADDRESS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_BAD_ADDRESS = 6
     * }
     */
    public static int G_DBUS_ERROR_BAD_ADDRESS() {
        return G_DBUS_ERROR_BAD_ADDRESS;
    }
    private static final int G_DBUS_ERROR_NOT_SUPPORTED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_NOT_SUPPORTED = 7
     * }
     */
    public static int G_DBUS_ERROR_NOT_SUPPORTED() {
        return G_DBUS_ERROR_NOT_SUPPORTED;
    }
    private static final int G_DBUS_ERROR_LIMITS_EXCEEDED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_LIMITS_EXCEEDED = 8
     * }
     */
    public static int G_DBUS_ERROR_LIMITS_EXCEEDED() {
        return G_DBUS_ERROR_LIMITS_EXCEEDED;
    }
    private static final int G_DBUS_ERROR_ACCESS_DENIED = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_ACCESS_DENIED = 9
     * }
     */
    public static int G_DBUS_ERROR_ACCESS_DENIED() {
        return G_DBUS_ERROR_ACCESS_DENIED;
    }
    private static final int G_DBUS_ERROR_AUTH_FAILED = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_AUTH_FAILED = 10
     * }
     */
    public static int G_DBUS_ERROR_AUTH_FAILED() {
        return G_DBUS_ERROR_AUTH_FAILED;
    }
    private static final int G_DBUS_ERROR_NO_SERVER = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_NO_SERVER = 11
     * }
     */
    public static int G_DBUS_ERROR_NO_SERVER() {
        return G_DBUS_ERROR_NO_SERVER;
    }
    private static final int G_DBUS_ERROR_TIMEOUT = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_TIMEOUT = 12
     * }
     */
    public static int G_DBUS_ERROR_TIMEOUT() {
        return G_DBUS_ERROR_TIMEOUT;
    }
    private static final int G_DBUS_ERROR_NO_NETWORK = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_NO_NETWORK = 13
     * }
     */
    public static int G_DBUS_ERROR_NO_NETWORK() {
        return G_DBUS_ERROR_NO_NETWORK;
    }
    private static final int G_DBUS_ERROR_ADDRESS_IN_USE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_ADDRESS_IN_USE = 14
     * }
     */
    public static int G_DBUS_ERROR_ADDRESS_IN_USE() {
        return G_DBUS_ERROR_ADDRESS_IN_USE;
    }
    private static final int G_DBUS_ERROR_DISCONNECTED = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_DISCONNECTED = 15
     * }
     */
    public static int G_DBUS_ERROR_DISCONNECTED() {
        return G_DBUS_ERROR_DISCONNECTED;
    }
    private static final int G_DBUS_ERROR_INVALID_ARGS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_INVALID_ARGS = 16
     * }
     */
    public static int G_DBUS_ERROR_INVALID_ARGS() {
        return G_DBUS_ERROR_INVALID_ARGS;
    }
    private static final int G_DBUS_ERROR_FILE_NOT_FOUND = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_FILE_NOT_FOUND = 17
     * }
     */
    public static int G_DBUS_ERROR_FILE_NOT_FOUND() {
        return G_DBUS_ERROR_FILE_NOT_FOUND;
    }
    private static final int G_DBUS_ERROR_FILE_EXISTS = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_FILE_EXISTS = 18
     * }
     */
    public static int G_DBUS_ERROR_FILE_EXISTS() {
        return G_DBUS_ERROR_FILE_EXISTS;
    }
    private static final int G_DBUS_ERROR_UNKNOWN_METHOD = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_UNKNOWN_METHOD = 19
     * }
     */
    public static int G_DBUS_ERROR_UNKNOWN_METHOD() {
        return G_DBUS_ERROR_UNKNOWN_METHOD;
    }
    private static final int G_DBUS_ERROR_TIMED_OUT = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_TIMED_OUT = 20
     * }
     */
    public static int G_DBUS_ERROR_TIMED_OUT() {
        return G_DBUS_ERROR_TIMED_OUT;
    }
    private static final int G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = 21
     * }
     */
    public static int G_DBUS_ERROR_MATCH_RULE_NOT_FOUND() {
        return G_DBUS_ERROR_MATCH_RULE_NOT_FOUND;
    }
    private static final int G_DBUS_ERROR_MATCH_RULE_INVALID = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_MATCH_RULE_INVALID = 22
     * }
     */
    public static int G_DBUS_ERROR_MATCH_RULE_INVALID() {
        return G_DBUS_ERROR_MATCH_RULE_INVALID;
    }
    private static final int G_DBUS_ERROR_SPAWN_EXEC_FAILED = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_EXEC_FAILED = 23
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_EXEC_FAILED() {
        return G_DBUS_ERROR_SPAWN_EXEC_FAILED;
    }
    private static final int G_DBUS_ERROR_SPAWN_FORK_FAILED = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_FORK_FAILED = 24
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_FORK_FAILED() {
        return G_DBUS_ERROR_SPAWN_FORK_FAILED;
    }
    private static final int G_DBUS_ERROR_SPAWN_CHILD_EXITED = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_CHILD_EXITED = 25
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_CHILD_EXITED() {
        return G_DBUS_ERROR_SPAWN_CHILD_EXITED;
    }
    private static final int G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = 26
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_CHILD_SIGNALED() {
        return G_DBUS_ERROR_SPAWN_CHILD_SIGNALED;
    }
    private static final int G_DBUS_ERROR_SPAWN_FAILED = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_FAILED = 27
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_FAILED() {
        return G_DBUS_ERROR_SPAWN_FAILED;
    }
    private static final int G_DBUS_ERROR_SPAWN_SETUP_FAILED = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_SETUP_FAILED = 28
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_SETUP_FAILED() {
        return G_DBUS_ERROR_SPAWN_SETUP_FAILED;
    }
    private static final int G_DBUS_ERROR_SPAWN_CONFIG_INVALID = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_CONFIG_INVALID = 29
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_CONFIG_INVALID() {
        return G_DBUS_ERROR_SPAWN_CONFIG_INVALID;
    }
    private static final int G_DBUS_ERROR_SPAWN_SERVICE_INVALID = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_SERVICE_INVALID = 30
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_SERVICE_INVALID() {
        return G_DBUS_ERROR_SPAWN_SERVICE_INVALID;
    }
    private static final int G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = 31
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND() {
        return G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND;
    }
    private static final int G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = 32
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID() {
        return G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID;
    }
    private static final int G_DBUS_ERROR_SPAWN_FILE_INVALID = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_FILE_INVALID = 33
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_FILE_INVALID() {
        return G_DBUS_ERROR_SPAWN_FILE_INVALID;
    }
    private static final int G_DBUS_ERROR_SPAWN_NO_MEMORY = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SPAWN_NO_MEMORY = 34
     * }
     */
    public static int G_DBUS_ERROR_SPAWN_NO_MEMORY() {
        return G_DBUS_ERROR_SPAWN_NO_MEMORY;
    }
    private static final int G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = 35
     * }
     */
    public static int G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN() {
        return G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN;
    }
    private static final int G_DBUS_ERROR_INVALID_SIGNATURE = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_INVALID_SIGNATURE = 36
     * }
     */
    public static int G_DBUS_ERROR_INVALID_SIGNATURE() {
        return G_DBUS_ERROR_INVALID_SIGNATURE;
    }
    private static final int G_DBUS_ERROR_INVALID_FILE_CONTENT = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_INVALID_FILE_CONTENT = 37
     * }
     */
    public static int G_DBUS_ERROR_INVALID_FILE_CONTENT() {
        return G_DBUS_ERROR_INVALID_FILE_CONTENT;
    }
    private static final int G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38
     * }
     */
    public static int G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN() {
        return G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN;
    }
    private static final int G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = 39
     * }
     */
    public static int G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN() {
        return G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN;
    }
    private static final int G_DBUS_ERROR_OBJECT_PATH_IN_USE = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_OBJECT_PATH_IN_USE = 40
     * }
     */
    public static int G_DBUS_ERROR_OBJECT_PATH_IN_USE() {
        return G_DBUS_ERROR_OBJECT_PATH_IN_USE;
    }
    private static final int G_DBUS_ERROR_UNKNOWN_OBJECT = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_UNKNOWN_OBJECT = 41
     * }
     */
    public static int G_DBUS_ERROR_UNKNOWN_OBJECT() {
        return G_DBUS_ERROR_UNKNOWN_OBJECT;
    }
    private static final int G_DBUS_ERROR_UNKNOWN_INTERFACE = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_UNKNOWN_INTERFACE = 42
     * }
     */
    public static int G_DBUS_ERROR_UNKNOWN_INTERFACE() {
        return G_DBUS_ERROR_UNKNOWN_INTERFACE;
    }
    private static final int G_DBUS_ERROR_UNKNOWN_PROPERTY = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_UNKNOWN_PROPERTY = 43
     * }
     */
    public static int G_DBUS_ERROR_UNKNOWN_PROPERTY() {
        return G_DBUS_ERROR_UNKNOWN_PROPERTY;
    }
    private static final int G_DBUS_ERROR_PROPERTY_READ_ONLY = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_ERROR_PROPERTY_READ_ONLY = 44
     * }
     */
    public static int G_DBUS_ERROR_PROPERTY_READ_ONLY() {
        return G_DBUS_ERROR_PROPERTY_READ_ONLY;
    }
    private static final int G_DBUS_CONNECTION_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CONNECTION_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_CONNECTION_FLAGS_NONE() {
        return G_DBUS_CONNECTION_FLAGS_NONE;
    }
    private static final int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1
     * }
     */
    public static int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT() {
        return G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT;
    }
    private static final int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 2
     * }
     */
    public static int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER() {
        return G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER;
    }
    private static final int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 4
     * }
     */
    public static int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS() {
        return G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS;
    }
    private static final int G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 8
     * }
     */
    public static int G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION() {
        return G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION;
    }
    private static final int G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 16
     * }
     */
    public static int G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING() {
        return G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING;
    }
    private static final int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = 32
     * }
     */
    public static int G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER() {
        return G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER;
    }
    private static final int G_DBUS_CONNECTION_FLAGS_CROSS_NAMESPACE = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CONNECTION_FLAGS_CROSS_NAMESPACE = 64
     * }
     */
    public static int G_DBUS_CONNECTION_FLAGS_CROSS_NAMESPACE() {
        return G_DBUS_CONNECTION_FLAGS_CROSS_NAMESPACE;
    }
    private static final int G_DBUS_CAPABILITY_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CAPABILITY_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_CAPABILITY_FLAGS_NONE() {
        return G_DBUS_CAPABILITY_FLAGS_NONE;
    }
    private static final int G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1
     * }
     */
    public static int G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING() {
        return G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING;
    }
    private static final int G_DBUS_CALL_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CALL_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_CALL_FLAGS_NONE() {
        return G_DBUS_CALL_FLAGS_NONE;
    }
    private static final int G_DBUS_CALL_FLAGS_NO_AUTO_START = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CALL_FLAGS_NO_AUTO_START = 1
     * }
     */
    public static int G_DBUS_CALL_FLAGS_NO_AUTO_START() {
        return G_DBUS_CALL_FLAGS_NO_AUTO_START;
    }
    private static final int G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 2
     * }
     */
    public static int G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION() {
        return G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION;
    }
    private static final int G_DBUS_MESSAGE_TYPE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_TYPE_INVALID = 0
     * }
     */
    public static int G_DBUS_MESSAGE_TYPE_INVALID() {
        return G_DBUS_MESSAGE_TYPE_INVALID;
    }
    private static final int G_DBUS_MESSAGE_TYPE_METHOD_CALL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_TYPE_METHOD_CALL = 1
     * }
     */
    public static int G_DBUS_MESSAGE_TYPE_METHOD_CALL() {
        return G_DBUS_MESSAGE_TYPE_METHOD_CALL;
    }
    private static final int G_DBUS_MESSAGE_TYPE_METHOD_RETURN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_TYPE_METHOD_RETURN = 2
     * }
     */
    public static int G_DBUS_MESSAGE_TYPE_METHOD_RETURN() {
        return G_DBUS_MESSAGE_TYPE_METHOD_RETURN;
    }
    private static final int G_DBUS_MESSAGE_TYPE_ERROR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_TYPE_ERROR = 3
     * }
     */
    public static int G_DBUS_MESSAGE_TYPE_ERROR() {
        return G_DBUS_MESSAGE_TYPE_ERROR;
    }
    private static final int G_DBUS_MESSAGE_TYPE_SIGNAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_TYPE_SIGNAL = 4
     * }
     */
    public static int G_DBUS_MESSAGE_TYPE_SIGNAL() {
        return G_DBUS_MESSAGE_TYPE_SIGNAL;
    }
    private static final int G_DBUS_MESSAGE_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_MESSAGE_FLAGS_NONE() {
        return G_DBUS_MESSAGE_FLAGS_NONE;
    }
    private static final int G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1
     * }
     */
    public static int G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED() {
        return G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED;
    }
    private static final int G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 2
     * }
     */
    public static int G_DBUS_MESSAGE_FLAGS_NO_AUTO_START() {
        return G_DBUS_MESSAGE_FLAGS_NO_AUTO_START;
    }
    private static final int G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 4
     * }
     */
    public static int G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION() {
        return G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION;
    }
    private static final int G_DBUS_MESSAGE_HEADER_FIELD_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_HEADER_FIELD_INVALID = 0
     * }
     */
    public static int G_DBUS_MESSAGE_HEADER_FIELD_INVALID() {
        return G_DBUS_MESSAGE_HEADER_FIELD_INVALID;
    }
    private static final int G_DBUS_MESSAGE_HEADER_FIELD_PATH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_HEADER_FIELD_PATH = 1
     * }
     */
    public static int G_DBUS_MESSAGE_HEADER_FIELD_PATH() {
        return G_DBUS_MESSAGE_HEADER_FIELD_PATH;
    }
    private static final int G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = 2
     * }
     */
    public static int G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE() {
        return G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE;
    }
    private static final int G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = 3
     * }
     */
    public static int G_DBUS_MESSAGE_HEADER_FIELD_MEMBER() {
        return G_DBUS_MESSAGE_HEADER_FIELD_MEMBER;
    }
    private static final int G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = 4
     * }
     */
    public static int G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME() {
        return G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME;
    }
    private static final int G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5
     * }
     */
    public static int G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL() {
        return G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL;
    }
    private static final int G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = 6
     * }
     */
    public static int G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION() {
        return G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION;
    }
    private static final int G_DBUS_MESSAGE_HEADER_FIELD_SENDER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_HEADER_FIELD_SENDER = 7
     * }
     */
    public static int G_DBUS_MESSAGE_HEADER_FIELD_SENDER() {
        return G_DBUS_MESSAGE_HEADER_FIELD_SENDER;
    }
    private static final int G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = 8
     * }
     */
    public static int G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE() {
        return G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE;
    }
    private static final int G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9
     * }
     */
    public static int G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS() {
        return G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS;
    }
    private static final int G_DBUS_PROPERTY_INFO_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_PROPERTY_INFO_FLAGS_NONE() {
        return G_DBUS_PROPERTY_INFO_FLAGS_NONE;
    }
    private static final int G_DBUS_PROPERTY_INFO_FLAGS_READABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1
     * }
     */
    public static int G_DBUS_PROPERTY_INFO_FLAGS_READABLE() {
        return G_DBUS_PROPERTY_INFO_FLAGS_READABLE;
    }
    private static final int G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2
     * }
     */
    public static int G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE() {
        return G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE;
    }
    private static final int G_DBUS_SUBTREE_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SUBTREE_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_SUBTREE_FLAGS_NONE() {
        return G_DBUS_SUBTREE_FLAGS_NONE;
    }
    private static final int G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1
     * }
     */
    public static int G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES() {
        return G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES;
    }
    private static final int G_DBUS_SERVER_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SERVER_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_SERVER_FLAGS_NONE() {
        return G_DBUS_SERVER_FLAGS_NONE;
    }
    private static final int G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1
     * }
     */
    public static int G_DBUS_SERVER_FLAGS_RUN_IN_THREAD() {
        return G_DBUS_SERVER_FLAGS_RUN_IN_THREAD;
    }
    private static final int G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 2
     * }
     */
    public static int G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS() {
        return G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS;
    }
    private static final int G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = 4
     * }
     */
    public static int G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER() {
        return G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER;
    }
    private static final int G_DBUS_SIGNAL_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SIGNAL_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_SIGNAL_FLAGS_NONE() {
        return G_DBUS_SIGNAL_FLAGS_NONE;
    }
    private static final int G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = 1
     * }
     */
    public static int G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE() {
        return G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE;
    }
    private static final int G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = 2
     * }
     */
    public static int G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE() {
        return G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE;
    }
    private static final int G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = 4
     * }
     */
    public static int G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH() {
        return G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH;
    }
    private static final int G_DBUS_SEND_MESSAGE_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_SEND_MESSAGE_FLAGS_NONE() {
        return G_DBUS_SEND_MESSAGE_FLAGS_NONE;
    }
    private static final int G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1
     * }
     */
    public static int G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL() {
        return G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL;
    }
    private static final int G_CREDENTIALS_TYPE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CREDENTIALS_TYPE_INVALID = 0
     * }
     */
    public static int G_CREDENTIALS_TYPE_INVALID() {
        return G_CREDENTIALS_TYPE_INVALID;
    }
    private static final int G_CREDENTIALS_TYPE_LINUX_UCRED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CREDENTIALS_TYPE_LINUX_UCRED = 1
     * }
     */
    public static int G_CREDENTIALS_TYPE_LINUX_UCRED() {
        return G_CREDENTIALS_TYPE_LINUX_UCRED;
    }
    private static final int G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = 2
     * }
     */
    public static int G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED() {
        return G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED;
    }
    private static final int G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = 3
     * }
     */
    public static int G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED() {
        return G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED;
    }
    private static final int G_CREDENTIALS_TYPE_SOLARIS_UCRED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CREDENTIALS_TYPE_SOLARIS_UCRED = 4
     * }
     */
    public static int G_CREDENTIALS_TYPE_SOLARIS_UCRED() {
        return G_CREDENTIALS_TYPE_SOLARIS_UCRED;
    }
    private static final int G_CREDENTIALS_TYPE_NETBSD_UNPCBID = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CREDENTIALS_TYPE_NETBSD_UNPCBID = 5
     * }
     */
    public static int G_CREDENTIALS_TYPE_NETBSD_UNPCBID() {
        return G_CREDENTIALS_TYPE_NETBSD_UNPCBID;
    }
    private static final int G_CREDENTIALS_TYPE_APPLE_XUCRED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CREDENTIALS_TYPE_APPLE_XUCRED = 6
     * }
     */
    public static int G_CREDENTIALS_TYPE_APPLE_XUCRED() {
        return G_CREDENTIALS_TYPE_APPLE_XUCRED;
    }
    private static final int G_CREDENTIALS_TYPE_WIN32_PID = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CREDENTIALS_TYPE_WIN32_PID = 7
     * }
     */
    public static int G_CREDENTIALS_TYPE_WIN32_PID() {
        return G_CREDENTIALS_TYPE_WIN32_PID;
    }
    private static final int G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = (int)66L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 66
     * }
     */
    public static int G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN() {
        return G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN;
    }
    private static final int G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = (int)108L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 108
     * }
     */
    public static int G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN() {
        return G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN;
    }
    private static final int G_APPLICATION_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_FLAGS_NONE = 0
     * }
     */
    public static int G_APPLICATION_FLAGS_NONE() {
        return G_APPLICATION_FLAGS_NONE;
    }
    private static final int G_APPLICATION_DEFAULT_FLAGS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_DEFAULT_FLAGS = 0
     * }
     */
    public static int G_APPLICATION_DEFAULT_FLAGS() {
        return G_APPLICATION_DEFAULT_FLAGS;
    }
    private static final int G_APPLICATION_IS_SERVICE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_IS_SERVICE = 1
     * }
     */
    public static int G_APPLICATION_IS_SERVICE() {
        return G_APPLICATION_IS_SERVICE;
    }
    private static final int G_APPLICATION_IS_LAUNCHER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_IS_LAUNCHER = 2
     * }
     */
    public static int G_APPLICATION_IS_LAUNCHER() {
        return G_APPLICATION_IS_LAUNCHER;
    }
    private static final int G_APPLICATION_HANDLES_OPEN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_HANDLES_OPEN = 4
     * }
     */
    public static int G_APPLICATION_HANDLES_OPEN() {
        return G_APPLICATION_HANDLES_OPEN;
    }
    private static final int G_APPLICATION_HANDLES_COMMAND_LINE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_HANDLES_COMMAND_LINE = 8
     * }
     */
    public static int G_APPLICATION_HANDLES_COMMAND_LINE() {
        return G_APPLICATION_HANDLES_COMMAND_LINE;
    }
    private static final int G_APPLICATION_SEND_ENVIRONMENT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_SEND_ENVIRONMENT = 16
     * }
     */
    public static int G_APPLICATION_SEND_ENVIRONMENT() {
        return G_APPLICATION_SEND_ENVIRONMENT;
    }
    private static final int G_APPLICATION_NON_UNIQUE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_NON_UNIQUE = 32
     * }
     */
    public static int G_APPLICATION_NON_UNIQUE() {
        return G_APPLICATION_NON_UNIQUE;
    }
    private static final int G_APPLICATION_CAN_OVERRIDE_APP_ID = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_CAN_OVERRIDE_APP_ID = 64
     * }
     */
    public static int G_APPLICATION_CAN_OVERRIDE_APP_ID() {
        return G_APPLICATION_CAN_OVERRIDE_APP_ID;
    }
    private static final int G_APPLICATION_ALLOW_REPLACEMENT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_ALLOW_REPLACEMENT = 128
     * }
     */
    public static int G_APPLICATION_ALLOW_REPLACEMENT() {
        return G_APPLICATION_ALLOW_REPLACEMENT;
    }
    private static final int G_APPLICATION_REPLACE = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APPLICATION_REPLACE = 256
     * }
     */
    public static int G_APPLICATION_REPLACE() {
        return G_APPLICATION_REPLACE;
    }
    private static final int G_TLS_ERROR_UNAVAILABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_ERROR_UNAVAILABLE = 0
     * }
     */
    public static int G_TLS_ERROR_UNAVAILABLE() {
        return G_TLS_ERROR_UNAVAILABLE;
    }
    private static final int G_TLS_ERROR_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_ERROR_MISC = 1
     * }
     */
    public static int G_TLS_ERROR_MISC() {
        return G_TLS_ERROR_MISC;
    }
    private static final int G_TLS_ERROR_BAD_CERTIFICATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_ERROR_BAD_CERTIFICATE = 2
     * }
     */
    public static int G_TLS_ERROR_BAD_CERTIFICATE() {
        return G_TLS_ERROR_BAD_CERTIFICATE;
    }
    private static final int G_TLS_ERROR_NOT_TLS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_ERROR_NOT_TLS = 3
     * }
     */
    public static int G_TLS_ERROR_NOT_TLS() {
        return G_TLS_ERROR_NOT_TLS;
    }
    private static final int G_TLS_ERROR_HANDSHAKE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_ERROR_HANDSHAKE = 4
     * }
     */
    public static int G_TLS_ERROR_HANDSHAKE() {
        return G_TLS_ERROR_HANDSHAKE;
    }
    private static final int G_TLS_ERROR_CERTIFICATE_REQUIRED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_ERROR_CERTIFICATE_REQUIRED = 5
     * }
     */
    public static int G_TLS_ERROR_CERTIFICATE_REQUIRED() {
        return G_TLS_ERROR_CERTIFICATE_REQUIRED;
    }
    private static final int G_TLS_ERROR_EOF = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_ERROR_EOF = 6
     * }
     */
    public static int G_TLS_ERROR_EOF() {
        return G_TLS_ERROR_EOF;
    }
    private static final int G_TLS_ERROR_INAPPROPRIATE_FALLBACK = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_ERROR_INAPPROPRIATE_FALLBACK = 7
     * }
     */
    public static int G_TLS_ERROR_INAPPROPRIATE_FALLBACK() {
        return G_TLS_ERROR_INAPPROPRIATE_FALLBACK;
    }
    private static final int G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD = 8
     * }
     */
    public static int G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD() {
        return G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD;
    }
    private static final int G_TLS_CERTIFICATE_NO_FLAGS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CERTIFICATE_NO_FLAGS = 0
     * }
     */
    public static int G_TLS_CERTIFICATE_NO_FLAGS() {
        return G_TLS_CERTIFICATE_NO_FLAGS;
    }
    private static final int G_TLS_CERTIFICATE_UNKNOWN_CA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CERTIFICATE_UNKNOWN_CA = 1
     * }
     */
    public static int G_TLS_CERTIFICATE_UNKNOWN_CA() {
        return G_TLS_CERTIFICATE_UNKNOWN_CA;
    }
    private static final int G_TLS_CERTIFICATE_BAD_IDENTITY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CERTIFICATE_BAD_IDENTITY = 2
     * }
     */
    public static int G_TLS_CERTIFICATE_BAD_IDENTITY() {
        return G_TLS_CERTIFICATE_BAD_IDENTITY;
    }
    private static final int G_TLS_CERTIFICATE_NOT_ACTIVATED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CERTIFICATE_NOT_ACTIVATED = 4
     * }
     */
    public static int G_TLS_CERTIFICATE_NOT_ACTIVATED() {
        return G_TLS_CERTIFICATE_NOT_ACTIVATED;
    }
    private static final int G_TLS_CERTIFICATE_EXPIRED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CERTIFICATE_EXPIRED = 8
     * }
     */
    public static int G_TLS_CERTIFICATE_EXPIRED() {
        return G_TLS_CERTIFICATE_EXPIRED;
    }
    private static final int G_TLS_CERTIFICATE_REVOKED = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CERTIFICATE_REVOKED = 16
     * }
     */
    public static int G_TLS_CERTIFICATE_REVOKED() {
        return G_TLS_CERTIFICATE_REVOKED;
    }
    private static final int G_TLS_CERTIFICATE_INSECURE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CERTIFICATE_INSECURE = 32
     * }
     */
    public static int G_TLS_CERTIFICATE_INSECURE() {
        return G_TLS_CERTIFICATE_INSECURE;
    }
    private static final int G_TLS_CERTIFICATE_GENERIC_ERROR = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CERTIFICATE_GENERIC_ERROR = 64
     * }
     */
    public static int G_TLS_CERTIFICATE_GENERIC_ERROR() {
        return G_TLS_CERTIFICATE_GENERIC_ERROR;
    }
    private static final int G_TLS_CERTIFICATE_VALIDATE_ALL = (int)127L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CERTIFICATE_VALIDATE_ALL = 127
     * }
     */
    public static int G_TLS_CERTIFICATE_VALIDATE_ALL() {
        return G_TLS_CERTIFICATE_VALIDATE_ALL;
    }
    private static final int G_TLS_AUTHENTICATION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_AUTHENTICATION_NONE = 0
     * }
     */
    public static int G_TLS_AUTHENTICATION_NONE() {
        return G_TLS_AUTHENTICATION_NONE;
    }
    private static final int G_TLS_AUTHENTICATION_REQUESTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_AUTHENTICATION_REQUESTED = 1
     * }
     */
    public static int G_TLS_AUTHENTICATION_REQUESTED() {
        return G_TLS_AUTHENTICATION_REQUESTED;
    }
    private static final int G_TLS_AUTHENTICATION_REQUIRED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_AUTHENTICATION_REQUIRED = 2
     * }
     */
    public static int G_TLS_AUTHENTICATION_REQUIRED() {
        return G_TLS_AUTHENTICATION_REQUIRED;
    }
    private static final int G_TLS_CHANNEL_BINDING_TLS_UNIQUE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CHANNEL_BINDING_TLS_UNIQUE = 0
     * }
     */
    public static int G_TLS_CHANNEL_BINDING_TLS_UNIQUE() {
        return G_TLS_CHANNEL_BINDING_TLS_UNIQUE;
    }
    private static final int G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT = 1
     * }
     */
    public static int G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT() {
        return G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT;
    }
    private static final int G_TLS_CHANNEL_BINDING_TLS_EXPORTER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CHANNEL_BINDING_TLS_EXPORTER = 2
     * }
     */
    public static int G_TLS_CHANNEL_BINDING_TLS_EXPORTER() {
        return G_TLS_CHANNEL_BINDING_TLS_EXPORTER;
    }
    private static final int G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED = 0
     * }
     */
    public static int G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED() {
        return G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED;
    }
    private static final int G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE = 1
     * }
     */
    public static int G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE() {
        return G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE;
    }
    private static final int G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE = 2
     * }
     */
    public static int G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE() {
        return G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE;
    }
    private static final int G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED = 3
     * }
     */
    public static int G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED() {
        return G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED;
    }
    private static final int G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR = 4
     * }
     */
    public static int G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR() {
        return G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR;
    }
    private static final int G_TLS_REHANDSHAKE_NEVER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_REHANDSHAKE_NEVER = 0
     * }
     */
    public static int G_TLS_REHANDSHAKE_NEVER() {
        return G_TLS_REHANDSHAKE_NEVER;
    }
    private static final int G_TLS_REHANDSHAKE_SAFELY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_REHANDSHAKE_SAFELY = 1
     * }
     */
    public static int G_TLS_REHANDSHAKE_SAFELY() {
        return G_TLS_REHANDSHAKE_SAFELY;
    }
    private static final int G_TLS_REHANDSHAKE_UNSAFELY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_REHANDSHAKE_UNSAFELY = 2
     * }
     */
    public static int G_TLS_REHANDSHAKE_UNSAFELY() {
        return G_TLS_REHANDSHAKE_UNSAFELY;
    }
    private static final int G_TLS_PASSWORD_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _GTlsPasswordFlags.G_TLS_PASSWORD_NONE = 0
     * }
     */
    public static int G_TLS_PASSWORD_NONE() {
        return G_TLS_PASSWORD_NONE;
    }
    private static final int G_TLS_PASSWORD_RETRY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _GTlsPasswordFlags.G_TLS_PASSWORD_RETRY = 2
     * }
     */
    public static int G_TLS_PASSWORD_RETRY() {
        return G_TLS_PASSWORD_RETRY;
    }
    private static final int G_TLS_PASSWORD_MANY_TRIES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _GTlsPasswordFlags.G_TLS_PASSWORD_MANY_TRIES = 4
     * }
     */
    public static int G_TLS_PASSWORD_MANY_TRIES() {
        return G_TLS_PASSWORD_MANY_TRIES;
    }
    private static final int G_TLS_PASSWORD_FINAL_TRY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _GTlsPasswordFlags.G_TLS_PASSWORD_FINAL_TRY = 8
     * }
     */
    public static int G_TLS_PASSWORD_FINAL_TRY() {
        return G_TLS_PASSWORD_FINAL_TRY;
    }
    private static final int G_TLS_PASSWORD_PKCS11_USER = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _GTlsPasswordFlags.G_TLS_PASSWORD_PKCS11_USER = 16
     * }
     */
    public static int G_TLS_PASSWORD_PKCS11_USER() {
        return G_TLS_PASSWORD_PKCS11_USER;
    }
    private static final int G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER = (int)32L;
    /**
     * {@snippet lang=c :
     * enum _GTlsPasswordFlags.G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER = 32
     * }
     */
    public static int G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER() {
        return G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER;
    }
    private static final int G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC = (int)64L;
    /**
     * {@snippet lang=c :
     * enum _GTlsPasswordFlags.G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC = 64
     * }
     */
    public static int G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC() {
        return G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC;
    }
    private static final int G_TLS_INTERACTION_UNHANDLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_INTERACTION_UNHANDLED = 0
     * }
     */
    public static int G_TLS_INTERACTION_UNHANDLED() {
        return G_TLS_INTERACTION_UNHANDLED;
    }
    private static final int G_TLS_INTERACTION_HANDLED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_INTERACTION_HANDLED = 1
     * }
     */
    public static int G_TLS_INTERACTION_HANDLED() {
        return G_TLS_INTERACTION_HANDLED;
    }
    private static final int G_TLS_INTERACTION_FAILED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_INTERACTION_FAILED = 2
     * }
     */
    public static int G_TLS_INTERACTION_FAILED() {
        return G_TLS_INTERACTION_FAILED;
    }
    private static final int G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_INTERFACE_SKELETON_FLAGS_NONE() {
        return G_DBUS_INTERFACE_SKELETON_FLAGS_NONE;
    }
    private static final int G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1
     * }
     */
    public static int G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD() {
        return G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD;
    }
    private static final int G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE() {
        return G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE;
    }
    private static final int G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1
     * }
     */
    public static int G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START() {
        return G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START;
    }
    private static final int G_TLS_DATABASE_VERIFY_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_DATABASE_VERIFY_NONE = 0
     * }
     */
    public static int G_TLS_DATABASE_VERIFY_NONE() {
        return G_TLS_DATABASE_VERIFY_NONE;
    }
    private static final int G_TLS_DATABASE_LOOKUP_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_DATABASE_LOOKUP_NONE = 0
     * }
     */
    public static int G_TLS_DATABASE_LOOKUP_NONE() {
        return G_TLS_DATABASE_LOOKUP_NONE;
    }
    private static final int G_TLS_DATABASE_LOOKUP_KEYPAIR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_DATABASE_LOOKUP_KEYPAIR = 1
     * }
     */
    public static int G_TLS_DATABASE_LOOKUP_KEYPAIR() {
        return G_TLS_DATABASE_LOOKUP_KEYPAIR;
    }
    private static final int G_TLS_CERTIFICATE_REQUEST_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_CERTIFICATE_REQUEST_NONE = 0
     * }
     */
    public static int G_TLS_CERTIFICATE_REQUEST_NONE() {
        return G_TLS_CERTIFICATE_REQUEST_NONE;
    }
    private static final int G_TLS_PROTOCOL_VERSION_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_PROTOCOL_VERSION_UNKNOWN = 0
     * }
     */
    public static int G_TLS_PROTOCOL_VERSION_UNKNOWN() {
        return G_TLS_PROTOCOL_VERSION_UNKNOWN;
    }
    private static final int G_TLS_PROTOCOL_VERSION_SSL_3_0 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_PROTOCOL_VERSION_SSL_3_0 = 1
     * }
     */
    public static int G_TLS_PROTOCOL_VERSION_SSL_3_0() {
        return G_TLS_PROTOCOL_VERSION_SSL_3_0;
    }
    private static final int G_TLS_PROTOCOL_VERSION_TLS_1_0 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_PROTOCOL_VERSION_TLS_1_0 = 2
     * }
     */
    public static int G_TLS_PROTOCOL_VERSION_TLS_1_0() {
        return G_TLS_PROTOCOL_VERSION_TLS_1_0;
    }
    private static final int G_TLS_PROTOCOL_VERSION_TLS_1_1 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_PROTOCOL_VERSION_TLS_1_1 = 3
     * }
     */
    public static int G_TLS_PROTOCOL_VERSION_TLS_1_1() {
        return G_TLS_PROTOCOL_VERSION_TLS_1_1;
    }
    private static final int G_TLS_PROTOCOL_VERSION_TLS_1_2 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_PROTOCOL_VERSION_TLS_1_2 = 4
     * }
     */
    public static int G_TLS_PROTOCOL_VERSION_TLS_1_2() {
        return G_TLS_PROTOCOL_VERSION_TLS_1_2;
    }
    private static final int G_TLS_PROTOCOL_VERSION_TLS_1_3 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_PROTOCOL_VERSION_TLS_1_3 = 5
     * }
     */
    public static int G_TLS_PROTOCOL_VERSION_TLS_1_3() {
        return G_TLS_PROTOCOL_VERSION_TLS_1_3;
    }
    private static final int G_TLS_PROTOCOL_VERSION_DTLS_1_0 = (int)201L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_PROTOCOL_VERSION_DTLS_1_0 = 201
     * }
     */
    public static int G_TLS_PROTOCOL_VERSION_DTLS_1_0() {
        return G_TLS_PROTOCOL_VERSION_DTLS_1_0;
    }
    private static final int G_TLS_PROTOCOL_VERSION_DTLS_1_2 = (int)202L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TLS_PROTOCOL_VERSION_DTLS_1_2 = 202
     * }
     */
    public static int G_TLS_PROTOCOL_VERSION_DTLS_1_2() {
        return G_TLS_PROTOCOL_VERSION_DTLS_1_2;
    }
    private static final int G_IO_MODULE_SCOPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_MODULE_SCOPE_NONE = 0
     * }
     */
    public static int G_IO_MODULE_SCOPE_NONE() {
        return G_IO_MODULE_SCOPE_NONE;
    }
    private static final int G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = 1
     * }
     */
    public static int G_IO_MODULE_SCOPE_BLOCK_DUPLICATES() {
        return G_IO_MODULE_SCOPE_BLOCK_DUPLICATES;
    }
    private static final int G_SOCKET_CLIENT_RESOLVING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_CLIENT_RESOLVING = 0
     * }
     */
    public static int G_SOCKET_CLIENT_RESOLVING() {
        return G_SOCKET_CLIENT_RESOLVING;
    }
    private static final int G_SOCKET_CLIENT_RESOLVED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_CLIENT_RESOLVED = 1
     * }
     */
    public static int G_SOCKET_CLIENT_RESOLVED() {
        return G_SOCKET_CLIENT_RESOLVED;
    }
    private static final int G_SOCKET_CLIENT_CONNECTING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_CLIENT_CONNECTING = 2
     * }
     */
    public static int G_SOCKET_CLIENT_CONNECTING() {
        return G_SOCKET_CLIENT_CONNECTING;
    }
    private static final int G_SOCKET_CLIENT_CONNECTED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_CLIENT_CONNECTED = 3
     * }
     */
    public static int G_SOCKET_CLIENT_CONNECTED() {
        return G_SOCKET_CLIENT_CONNECTED;
    }
    private static final int G_SOCKET_CLIENT_PROXY_NEGOTIATING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_CLIENT_PROXY_NEGOTIATING = 4
     * }
     */
    public static int G_SOCKET_CLIENT_PROXY_NEGOTIATING() {
        return G_SOCKET_CLIENT_PROXY_NEGOTIATING;
    }
    private static final int G_SOCKET_CLIENT_PROXY_NEGOTIATED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_CLIENT_PROXY_NEGOTIATED = 5
     * }
     */
    public static int G_SOCKET_CLIENT_PROXY_NEGOTIATED() {
        return G_SOCKET_CLIENT_PROXY_NEGOTIATED;
    }
    private static final int G_SOCKET_CLIENT_TLS_HANDSHAKING = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_CLIENT_TLS_HANDSHAKING = 6
     * }
     */
    public static int G_SOCKET_CLIENT_TLS_HANDSHAKING() {
        return G_SOCKET_CLIENT_TLS_HANDSHAKING;
    }
    private static final int G_SOCKET_CLIENT_TLS_HANDSHAKED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_CLIENT_TLS_HANDSHAKED = 7
     * }
     */
    public static int G_SOCKET_CLIENT_TLS_HANDSHAKED() {
        return G_SOCKET_CLIENT_TLS_HANDSHAKED;
    }
    private static final int G_SOCKET_CLIENT_COMPLETE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_CLIENT_COMPLETE = 8
     * }
     */
    public static int G_SOCKET_CLIENT_COMPLETE() {
        return G_SOCKET_CLIENT_COMPLETE;
    }
    private static final int G_SOCKET_LISTENER_BINDING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_LISTENER_BINDING = 0
     * }
     */
    public static int G_SOCKET_LISTENER_BINDING() {
        return G_SOCKET_LISTENER_BINDING;
    }
    private static final int G_SOCKET_LISTENER_BOUND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_LISTENER_BOUND = 1
     * }
     */
    public static int G_SOCKET_LISTENER_BOUND() {
        return G_SOCKET_LISTENER_BOUND;
    }
    private static final int G_SOCKET_LISTENER_LISTENING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_LISTENER_LISTENING = 2
     * }
     */
    public static int G_SOCKET_LISTENER_LISTENING() {
        return G_SOCKET_LISTENER_LISTENING;
    }
    private static final int G_SOCKET_LISTENER_LISTENED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_LISTENER_LISTENED = 3
     * }
     */
    public static int G_SOCKET_LISTENER_LISTENED() {
        return G_SOCKET_LISTENER_LISTENED;
    }
    private static final int G_TEST_DBUS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_DBUS_NONE = 0
     * }
     */
    public static int G_TEST_DBUS_NONE() {
        return G_TEST_DBUS_NONE;
    }
    private static final int G_SUBPROCESS_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SUBPROCESS_FLAGS_NONE = 0
     * }
     */
    public static int G_SUBPROCESS_FLAGS_NONE() {
        return G_SUBPROCESS_FLAGS_NONE;
    }
    private static final int G_SUBPROCESS_FLAGS_STDIN_PIPE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SUBPROCESS_FLAGS_STDIN_PIPE = 1
     * }
     */
    public static int G_SUBPROCESS_FLAGS_STDIN_PIPE() {
        return G_SUBPROCESS_FLAGS_STDIN_PIPE;
    }
    private static final int G_SUBPROCESS_FLAGS_STDIN_INHERIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SUBPROCESS_FLAGS_STDIN_INHERIT = 2
     * }
     */
    public static int G_SUBPROCESS_FLAGS_STDIN_INHERIT() {
        return G_SUBPROCESS_FLAGS_STDIN_INHERIT;
    }
    private static final int G_SUBPROCESS_FLAGS_STDOUT_PIPE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SUBPROCESS_FLAGS_STDOUT_PIPE = 4
     * }
     */
    public static int G_SUBPROCESS_FLAGS_STDOUT_PIPE() {
        return G_SUBPROCESS_FLAGS_STDOUT_PIPE;
    }
    private static final int G_SUBPROCESS_FLAGS_STDOUT_SILENCE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SUBPROCESS_FLAGS_STDOUT_SILENCE = 8
     * }
     */
    public static int G_SUBPROCESS_FLAGS_STDOUT_SILENCE() {
        return G_SUBPROCESS_FLAGS_STDOUT_SILENCE;
    }
    private static final int G_SUBPROCESS_FLAGS_STDERR_PIPE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SUBPROCESS_FLAGS_STDERR_PIPE = 16
     * }
     */
    public static int G_SUBPROCESS_FLAGS_STDERR_PIPE() {
        return G_SUBPROCESS_FLAGS_STDERR_PIPE;
    }
    private static final int G_SUBPROCESS_FLAGS_STDERR_SILENCE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SUBPROCESS_FLAGS_STDERR_SILENCE = 32
     * }
     */
    public static int G_SUBPROCESS_FLAGS_STDERR_SILENCE() {
        return G_SUBPROCESS_FLAGS_STDERR_SILENCE;
    }
    private static final int G_SUBPROCESS_FLAGS_STDERR_MERGE = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SUBPROCESS_FLAGS_STDERR_MERGE = 64
     * }
     */
    public static int G_SUBPROCESS_FLAGS_STDERR_MERGE() {
        return G_SUBPROCESS_FLAGS_STDERR_MERGE;
    }
    private static final int G_SUBPROCESS_FLAGS_INHERIT_FDS = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SUBPROCESS_FLAGS_INHERIT_FDS = 128
     * }
     */
    public static int G_SUBPROCESS_FLAGS_INHERIT_FDS() {
        return G_SUBPROCESS_FLAGS_INHERIT_FDS;
    }
    private static final int G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP = 256
     * }
     */
    public static int G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP() {
        return G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP;
    }
    private static final int G_NOTIFICATION_PRIORITY_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NOTIFICATION_PRIORITY_NORMAL = 0
     * }
     */
    public static int G_NOTIFICATION_PRIORITY_NORMAL() {
        return G_NOTIFICATION_PRIORITY_NORMAL;
    }
    private static final int G_NOTIFICATION_PRIORITY_LOW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NOTIFICATION_PRIORITY_LOW = 1
     * }
     */
    public static int G_NOTIFICATION_PRIORITY_LOW() {
        return G_NOTIFICATION_PRIORITY_LOW;
    }
    private static final int G_NOTIFICATION_PRIORITY_HIGH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NOTIFICATION_PRIORITY_HIGH = 2
     * }
     */
    public static int G_NOTIFICATION_PRIORITY_HIGH() {
        return G_NOTIFICATION_PRIORITY_HIGH;
    }
    private static final int G_NOTIFICATION_PRIORITY_URGENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NOTIFICATION_PRIORITY_URGENT = 3
     * }
     */
    public static int G_NOTIFICATION_PRIORITY_URGENT() {
        return G_NOTIFICATION_PRIORITY_URGENT;
    }
    private static final int G_NETWORK_CONNECTIVITY_LOCAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NETWORK_CONNECTIVITY_LOCAL = 1
     * }
     */
    public static int G_NETWORK_CONNECTIVITY_LOCAL() {
        return G_NETWORK_CONNECTIVITY_LOCAL;
    }
    private static final int G_NETWORK_CONNECTIVITY_LIMITED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NETWORK_CONNECTIVITY_LIMITED = 2
     * }
     */
    public static int G_NETWORK_CONNECTIVITY_LIMITED() {
        return G_NETWORK_CONNECTIVITY_LIMITED;
    }
    private static final int G_NETWORK_CONNECTIVITY_PORTAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NETWORK_CONNECTIVITY_PORTAL = 3
     * }
     */
    public static int G_NETWORK_CONNECTIVITY_PORTAL() {
        return G_NETWORK_CONNECTIVITY_PORTAL;
    }
    private static final int G_NETWORK_CONNECTIVITY_FULL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_NETWORK_CONNECTIVITY_FULL = 4
     * }
     */
    public static int G_NETWORK_CONNECTIVITY_FULL() {
        return G_NETWORK_CONNECTIVITY_FULL;
    }
    private static final int G_POLLABLE_RETURN_FAILED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_POLLABLE_RETURN_FAILED = 0
     * }
     */
    public static int G_POLLABLE_RETURN_FAILED() {
        return G_POLLABLE_RETURN_FAILED;
    }
    private static final int G_POLLABLE_RETURN_OK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_POLLABLE_RETURN_OK = 1
     * }
     */
    public static int G_POLLABLE_RETURN_OK() {
        return G_POLLABLE_RETURN_OK;
    }
    private static final int G_POLLABLE_RETURN_WOULD_BLOCK = (int)-27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_POLLABLE_RETURN_WOULD_BLOCK = -27
     * }
     */
    public static int G_POLLABLE_RETURN_WOULD_BLOCK() {
        return G_POLLABLE_RETURN_WOULD_BLOCK;
    }
    private static final int G_MEMORY_MONITOR_WARNING_LEVEL_LOW = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MEMORY_MONITOR_WARNING_LEVEL_LOW = 50
     * }
     */
    public static int G_MEMORY_MONITOR_WARNING_LEVEL_LOW() {
        return G_MEMORY_MONITOR_WARNING_LEVEL_LOW;
    }
    private static final int G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM = (int)100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM = 100
     * }
     */
    public static int G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM() {
        return G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM;
    }
    private static final int G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL = (int)255L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL = 255
     * }
     */
    public static int G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL() {
        return G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL;
    }

    private static class g_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_action_get_type()
     * }
     */
    public static FunctionDescriptor g_action_get_type$descriptor() {
        return g_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_action_get_type()
     * }
     */
    public static MethodHandle g_action_get_type$handle() {
        return g_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_action_get_type()
     * }
     */
    public static long g_action_get_type() {
        var mh$ = g_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_action_get_name(GAction *action)
     * }
     */
    public static FunctionDescriptor g_action_get_name$descriptor() {
        return g_action_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_action_get_name(GAction *action)
     * }
     */
    public static MethodHandle g_action_get_name$handle() {
        return g_action_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_action_get_name(GAction *action)
     * }
     */
    public static MemorySegment g_action_get_name(MemorySegment action) {
        var mh$ = g_action_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_get_name", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_get_parameter_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_get_parameter_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_action_get_parameter_type(GAction *action)
     * }
     */
    public static FunctionDescriptor g_action_get_parameter_type$descriptor() {
        return g_action_get_parameter_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_action_get_parameter_type(GAction *action)
     * }
     */
    public static MethodHandle g_action_get_parameter_type$handle() {
        return g_action_get_parameter_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_action_get_parameter_type(GAction *action)
     * }
     */
    public static MemorySegment g_action_get_parameter_type(MemorySegment action) {
        var mh$ = g_action_get_parameter_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_get_parameter_type", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_get_state_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_get_state_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_action_get_state_type(GAction *action)
     * }
     */
    public static FunctionDescriptor g_action_get_state_type$descriptor() {
        return g_action_get_state_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_action_get_state_type(GAction *action)
     * }
     */
    public static MethodHandle g_action_get_state_type$handle() {
        return g_action_get_state_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_action_get_state_type(GAction *action)
     * }
     */
    public static MemorySegment g_action_get_state_type(MemorySegment action) {
        var mh$ = g_action_get_state_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_get_state_type", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_get_state_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_get_state_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_action_get_state_hint(GAction *action)
     * }
     */
    public static FunctionDescriptor g_action_get_state_hint$descriptor() {
        return g_action_get_state_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_action_get_state_hint(GAction *action)
     * }
     */
    public static MethodHandle g_action_get_state_hint$handle() {
        return g_action_get_state_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_action_get_state_hint(GAction *action)
     * }
     */
    public static MemorySegment g_action_get_state_hint(MemorySegment action) {
        var mh$ = g_action_get_state_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_get_state_hint", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_get_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_get_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_action_get_enabled(GAction *action)
     * }
     */
    public static FunctionDescriptor g_action_get_enabled$descriptor() {
        return g_action_get_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_action_get_enabled(GAction *action)
     * }
     */
    public static MethodHandle g_action_get_enabled$handle() {
        return g_action_get_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_action_get_enabled(GAction *action)
     * }
     */
    public static int g_action_get_enabled(MemorySegment action) {
        var mh$ = g_action_get_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_get_enabled", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_action_get_state(GAction *action)
     * }
     */
    public static FunctionDescriptor g_action_get_state$descriptor() {
        return g_action_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_action_get_state(GAction *action)
     * }
     */
    public static MethodHandle g_action_get_state$handle() {
        return g_action_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_action_get_state(GAction *action)
     * }
     */
    public static MemorySegment g_action_get_state(MemorySegment action) {
        var mh$ = g_action_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_get_state", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_change_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_change_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_change_state(GAction *action, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_action_change_state$descriptor() {
        return g_action_change_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_change_state(GAction *action, GVariant *value)
     * }
     */
    public static MethodHandle g_action_change_state$handle() {
        return g_action_change_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_change_state(GAction *action, GVariant *value)
     * }
     */
    public static void g_action_change_state(MemorySegment action, MemorySegment value) {
        var mh$ = g_action_change_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_change_state", action, value);
            }
            mh$.invokeExact(action, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_activate(GAction *action, GVariant *parameter)
     * }
     */
    public static FunctionDescriptor g_action_activate$descriptor() {
        return g_action_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_activate(GAction *action, GVariant *parameter)
     * }
     */
    public static MethodHandle g_action_activate$handle() {
        return g_action_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_activate(GAction *action, GVariant *parameter)
     * }
     */
    public static void g_action_activate(MemorySegment action, MemorySegment parameter) {
        var mh$ = g_action_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_activate", action, parameter);
            }
            mh$.invokeExact(action, parameter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_name_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_name_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_action_name_is_valid(const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_name_is_valid$descriptor() {
        return g_action_name_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_action_name_is_valid(const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_name_is_valid$handle() {
        return g_action_name_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_action_name_is_valid(const gchar *action_name)
     * }
     */
    public static int g_action_name_is_valid(MemorySegment action_name) {
        var mh$ = g_action_name_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_name_is_valid", action_name);
            }
            return (int)mh$.invokeExact(action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_parse_detailed_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_parse_detailed_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_action_parse_detailed_name(const gchar *detailed_name, gchar **action_name, GVariant **target_value, GError **error)
     * }
     */
    public static FunctionDescriptor g_action_parse_detailed_name$descriptor() {
        return g_action_parse_detailed_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_action_parse_detailed_name(const gchar *detailed_name, gchar **action_name, GVariant **target_value, GError **error)
     * }
     */
    public static MethodHandle g_action_parse_detailed_name$handle() {
        return g_action_parse_detailed_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_action_parse_detailed_name(const gchar *detailed_name, gchar **action_name, GVariant **target_value, GError **error)
     * }
     */
    public static int g_action_parse_detailed_name(MemorySegment detailed_name, MemorySegment action_name, MemorySegment target_value, MemorySegment error) {
        var mh$ = g_action_parse_detailed_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_parse_detailed_name", detailed_name, action_name, target_value, error);
            }
            return (int)mh$.invokeExact(detailed_name, action_name, target_value, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_print_detailed_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_print_detailed_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_action_print_detailed_name(const gchar *action_name, GVariant *target_value)
     * }
     */
    public static FunctionDescriptor g_action_print_detailed_name$descriptor() {
        return g_action_print_detailed_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_action_print_detailed_name(const gchar *action_name, GVariant *target_value)
     * }
     */
    public static MethodHandle g_action_print_detailed_name$handle() {
        return g_action_print_detailed_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_action_print_detailed_name(const gchar *action_name, GVariant *target_value)
     * }
     */
    public static MemorySegment g_action_print_detailed_name(MemorySegment action_name, MemorySegment target_value) {
        var mh$ = g_action_print_detailed_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_print_detailed_name", action_name, target_value);
            }
            return (MemorySegment)mh$.invokeExact(action_name, target_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_action_group_get_type()
     * }
     */
    public static FunctionDescriptor g_action_group_get_type$descriptor() {
        return g_action_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_action_group_get_type()
     * }
     */
    public static MethodHandle g_action_group_get_type$handle() {
        return g_action_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_action_group_get_type()
     * }
     */
    public static long g_action_group_get_type() {
        var mh$ = g_action_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_has_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_has_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_action_group_has_action(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_group_has_action$descriptor() {
        return g_action_group_has_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_action_group_has_action(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_group_has_action$handle() {
        return g_action_group_has_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_action_group_has_action(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static int g_action_group_has_action(MemorySegment action_group, MemorySegment action_name) {
        var mh$ = g_action_group_has_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_has_action", action_group, action_name);
            }
            return (int)mh$.invokeExact(action_group, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_list_actions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_list_actions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_action_group_list_actions(GActionGroup *action_group)
     * }
     */
    public static FunctionDescriptor g_action_group_list_actions$descriptor() {
        return g_action_group_list_actions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_action_group_list_actions(GActionGroup *action_group)
     * }
     */
    public static MethodHandle g_action_group_list_actions$handle() {
        return g_action_group_list_actions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_action_group_list_actions(GActionGroup *action_group)
     * }
     */
    public static MemorySegment g_action_group_list_actions(MemorySegment action_group) {
        var mh$ = g_action_group_list_actions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_list_actions", action_group);
            }
            return (MemorySegment)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_get_action_parameter_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_get_action_parameter_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_action_group_get_action_parameter_type(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_group_get_action_parameter_type$descriptor() {
        return g_action_group_get_action_parameter_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_action_group_get_action_parameter_type(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_group_get_action_parameter_type$handle() {
        return g_action_group_get_action_parameter_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_action_group_get_action_parameter_type(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MemorySegment g_action_group_get_action_parameter_type(MemorySegment action_group, MemorySegment action_name) {
        var mh$ = g_action_group_get_action_parameter_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_get_action_parameter_type", action_group, action_name);
            }
            return (MemorySegment)mh$.invokeExact(action_group, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_get_action_state_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_get_action_state_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_action_group_get_action_state_type(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_group_get_action_state_type$descriptor() {
        return g_action_group_get_action_state_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_action_group_get_action_state_type(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_group_get_action_state_type$handle() {
        return g_action_group_get_action_state_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_action_group_get_action_state_type(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MemorySegment g_action_group_get_action_state_type(MemorySegment action_group, MemorySegment action_name) {
        var mh$ = g_action_group_get_action_state_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_get_action_state_type", action_group, action_name);
            }
            return (MemorySegment)mh$.invokeExact(action_group, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_get_action_state_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_get_action_state_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_action_group_get_action_state_hint(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_group_get_action_state_hint$descriptor() {
        return g_action_group_get_action_state_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_action_group_get_action_state_hint(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_group_get_action_state_hint$handle() {
        return g_action_group_get_action_state_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_action_group_get_action_state_hint(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MemorySegment g_action_group_get_action_state_hint(MemorySegment action_group, MemorySegment action_name) {
        var mh$ = g_action_group_get_action_state_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_get_action_state_hint", action_group, action_name);
            }
            return (MemorySegment)mh$.invokeExact(action_group, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_get_action_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_get_action_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_action_group_get_action_enabled(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_group_get_action_enabled$descriptor() {
        return g_action_group_get_action_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_action_group_get_action_enabled(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_group_get_action_enabled$handle() {
        return g_action_group_get_action_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_action_group_get_action_enabled(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static int g_action_group_get_action_enabled(MemorySegment action_group, MemorySegment action_name) {
        var mh$ = g_action_group_get_action_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_get_action_enabled", action_group, action_name);
            }
            return (int)mh$.invokeExact(action_group, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_get_action_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_get_action_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_action_group_get_action_state(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_group_get_action_state$descriptor() {
        return g_action_group_get_action_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_action_group_get_action_state(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_group_get_action_state$handle() {
        return g_action_group_get_action_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_action_group_get_action_state(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MemorySegment g_action_group_get_action_state(MemorySegment action_group, MemorySegment action_name) {
        var mh$ = g_action_group_get_action_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_get_action_state", action_group, action_name);
            }
            return (MemorySegment)mh$.invokeExact(action_group, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_change_action_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_change_action_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_group_change_action_state(GActionGroup *action_group, const gchar *action_name, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_action_group_change_action_state$descriptor() {
        return g_action_group_change_action_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_group_change_action_state(GActionGroup *action_group, const gchar *action_name, GVariant *value)
     * }
     */
    public static MethodHandle g_action_group_change_action_state$handle() {
        return g_action_group_change_action_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_group_change_action_state(GActionGroup *action_group, const gchar *action_name, GVariant *value)
     * }
     */
    public static void g_action_group_change_action_state(MemorySegment action_group, MemorySegment action_name, MemorySegment value) {
        var mh$ = g_action_group_change_action_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_change_action_state", action_group, action_name, value);
            }
            mh$.invokeExact(action_group, action_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_activate_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_activate_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_group_activate_action(GActionGroup *action_group, const gchar *action_name, GVariant *parameter)
     * }
     */
    public static FunctionDescriptor g_action_group_activate_action$descriptor() {
        return g_action_group_activate_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_group_activate_action(GActionGroup *action_group, const gchar *action_name, GVariant *parameter)
     * }
     */
    public static MethodHandle g_action_group_activate_action$handle() {
        return g_action_group_activate_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_group_activate_action(GActionGroup *action_group, const gchar *action_name, GVariant *parameter)
     * }
     */
    public static void g_action_group_activate_action(MemorySegment action_group, MemorySegment action_name, MemorySegment parameter) {
        var mh$ = g_action_group_activate_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_activate_action", action_group, action_name, parameter);
            }
            mh$.invokeExact(action_group, action_name, parameter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_action_added {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_action_added"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_group_action_added(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_group_action_added$descriptor() {
        return g_action_group_action_added.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_group_action_added(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_group_action_added$handle() {
        return g_action_group_action_added.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_group_action_added(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static void g_action_group_action_added(MemorySegment action_group, MemorySegment action_name) {
        var mh$ = g_action_group_action_added.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_action_added", action_group, action_name);
            }
            mh$.invokeExact(action_group, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_action_removed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_action_removed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_group_action_removed(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_group_action_removed$descriptor() {
        return g_action_group_action_removed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_group_action_removed(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_group_action_removed$handle() {
        return g_action_group_action_removed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_group_action_removed(GActionGroup *action_group, const gchar *action_name)
     * }
     */
    public static void g_action_group_action_removed(MemorySegment action_group, MemorySegment action_name) {
        var mh$ = g_action_group_action_removed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_action_removed", action_group, action_name);
            }
            mh$.invokeExact(action_group, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_action_enabled_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_action_enabled_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_group_action_enabled_changed(GActionGroup *action_group, const gchar *action_name, gboolean enabled)
     * }
     */
    public static FunctionDescriptor g_action_group_action_enabled_changed$descriptor() {
        return g_action_group_action_enabled_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_group_action_enabled_changed(GActionGroup *action_group, const gchar *action_name, gboolean enabled)
     * }
     */
    public static MethodHandle g_action_group_action_enabled_changed$handle() {
        return g_action_group_action_enabled_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_group_action_enabled_changed(GActionGroup *action_group, const gchar *action_name, gboolean enabled)
     * }
     */
    public static void g_action_group_action_enabled_changed(MemorySegment action_group, MemorySegment action_name, int enabled) {
        var mh$ = g_action_group_action_enabled_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_action_enabled_changed", action_group, action_name, enabled);
            }
            mh$.invokeExact(action_group, action_name, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_action_state_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_action_state_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_group_action_state_changed(GActionGroup *action_group, const gchar *action_name, GVariant *state)
     * }
     */
    public static FunctionDescriptor g_action_group_action_state_changed$descriptor() {
        return g_action_group_action_state_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_group_action_state_changed(GActionGroup *action_group, const gchar *action_name, GVariant *state)
     * }
     */
    public static MethodHandle g_action_group_action_state_changed$handle() {
        return g_action_group_action_state_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_group_action_state_changed(GActionGroup *action_group, const gchar *action_name, GVariant *state)
     * }
     */
    public static void g_action_group_action_state_changed(MemorySegment action_group, MemorySegment action_name, MemorySegment state) {
        var mh$ = g_action_group_action_state_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_action_state_changed", action_group, action_name, state);
            }
            mh$.invokeExact(action_group, action_name, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_group_query_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_group_query_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_action_group_query_action(GActionGroup *action_group, const gchar *action_name, gboolean *enabled, const GVariantType **parameter_type, const GVariantType **state_type, GVariant **state_hint, GVariant **state)
     * }
     */
    public static FunctionDescriptor g_action_group_query_action$descriptor() {
        return g_action_group_query_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_action_group_query_action(GActionGroup *action_group, const gchar *action_name, gboolean *enabled, const GVariantType **parameter_type, const GVariantType **state_type, GVariant **state_hint, GVariant **state)
     * }
     */
    public static MethodHandle g_action_group_query_action$handle() {
        return g_action_group_query_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_action_group_query_action(GActionGroup *action_group, const gchar *action_name, gboolean *enabled, const GVariantType **parameter_type, const GVariantType **state_type, GVariant **state_hint, GVariant **state)
     * }
     */
    public static int g_action_group_query_action(MemorySegment action_group, MemorySegment action_name, MemorySegment enabled, MemorySegment parameter_type, MemorySegment state_type, MemorySegment state_hint, MemorySegment state) {
        var mh$ = g_action_group_query_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_group_query_action", action_group, action_name, enabled, parameter_type, state_type, state_hint, state);
            }
            return (int)mh$.invokeExact(action_group, action_name, enabled, parameter_type, state_type, state_hint, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_export_action_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_export_action_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_export_action_group(GDBusConnection *connection, const gchar *object_path, GActionGroup *action_group, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_export_action_group$descriptor() {
        return g_dbus_connection_export_action_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_dbus_connection_export_action_group(GDBusConnection *connection, const gchar *object_path, GActionGroup *action_group, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_export_action_group$handle() {
        return g_dbus_connection_export_action_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_dbus_connection_export_action_group(GDBusConnection *connection, const gchar *object_path, GActionGroup *action_group, GError **error)
     * }
     */
    public static int g_dbus_connection_export_action_group(MemorySegment connection, MemorySegment object_path, MemorySegment action_group, MemorySegment error) {
        var mh$ = g_dbus_connection_export_action_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_export_action_group", connection, object_path, action_group, error);
            }
            return (int)mh$.invokeExact(connection, object_path, action_group, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_unexport_action_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_unexport_action_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_unexport_action_group(GDBusConnection *connection, guint export_id)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_unexport_action_group$descriptor() {
        return g_dbus_connection_unexport_action_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_unexport_action_group(GDBusConnection *connection, guint export_id)
     * }
     */
    public static MethodHandle g_dbus_connection_unexport_action_group$handle() {
        return g_dbus_connection_unexport_action_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_unexport_action_group(GDBusConnection *connection, guint export_id)
     * }
     */
    public static void g_dbus_connection_unexport_action_group(MemorySegment connection, int export_id) {
        var mh$ = g_dbus_connection_unexport_action_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_unexport_action_group", connection, export_id);
            }
            mh$.invokeExact(connection, export_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_map_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_map_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_action_map_get_type()
     * }
     */
    public static FunctionDescriptor g_action_map_get_type$descriptor() {
        return g_action_map_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_action_map_get_type()
     * }
     */
    public static MethodHandle g_action_map_get_type$handle() {
        return g_action_map_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_action_map_get_type()
     * }
     */
    public static long g_action_map_get_type() {
        var mh$ = g_action_map_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_map_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_map_lookup_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_map_lookup_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAction *g_action_map_lookup_action(GActionMap *action_map, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_map_lookup_action$descriptor() {
        return g_action_map_lookup_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAction *g_action_map_lookup_action(GActionMap *action_map, const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_map_lookup_action$handle() {
        return g_action_map_lookup_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAction *g_action_map_lookup_action(GActionMap *action_map, const gchar *action_name)
     * }
     */
    public static MemorySegment g_action_map_lookup_action(MemorySegment action_map, MemorySegment action_name) {
        var mh$ = g_action_map_lookup_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_map_lookup_action", action_map, action_name);
            }
            return (MemorySegment)mh$.invokeExact(action_map, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_map_add_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_map_add_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_map_add_action(GActionMap *action_map, GAction *action)
     * }
     */
    public static FunctionDescriptor g_action_map_add_action$descriptor() {
        return g_action_map_add_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_map_add_action(GActionMap *action_map, GAction *action)
     * }
     */
    public static MethodHandle g_action_map_add_action$handle() {
        return g_action_map_add_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_map_add_action(GActionMap *action_map, GAction *action)
     * }
     */
    public static void g_action_map_add_action(MemorySegment action_map, MemorySegment action) {
        var mh$ = g_action_map_add_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_map_add_action", action_map, action);
            }
            mh$.invokeExact(action_map, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_map_remove_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_map_remove_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_map_remove_action(GActionMap *action_map, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_action_map_remove_action$descriptor() {
        return g_action_map_remove_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_map_remove_action(GActionMap *action_map, const gchar *action_name)
     * }
     */
    public static MethodHandle g_action_map_remove_action$handle() {
        return g_action_map_remove_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_map_remove_action(GActionMap *action_map, const gchar *action_name)
     * }
     */
    public static void g_action_map_remove_action(MemorySegment action_map, MemorySegment action_name) {
        var mh$ = g_action_map_remove_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_map_remove_action", action_map, action_name);
            }
            mh$.invokeExact(action_map, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_map_add_action_entries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_map_add_action_entries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_map_add_action_entries(GActionMap *action_map, const GActionEntry *entries, gint n_entries, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_action_map_add_action_entries$descriptor() {
        return g_action_map_add_action_entries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_map_add_action_entries(GActionMap *action_map, const GActionEntry *entries, gint n_entries, gpointer user_data)
     * }
     */
    public static MethodHandle g_action_map_add_action_entries$handle() {
        return g_action_map_add_action_entries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_map_add_action_entries(GActionMap *action_map, const GActionEntry *entries, gint n_entries, gpointer user_data)
     * }
     */
    public static void g_action_map_add_action_entries(MemorySegment action_map, MemorySegment entries, int n_entries, MemorySegment user_data) {
        var mh$ = g_action_map_add_action_entries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_map_add_action_entries", action_map, entries, n_entries, user_data);
            }
            mh$.invokeExact(action_map, entries, n_entries, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_action_map_remove_action_entries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_action_map_remove_action_entries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_action_map_remove_action_entries(GActionMap *action_map, const GActionEntry *entries, gint n_entries)
     * }
     */
    public static FunctionDescriptor g_action_map_remove_action_entries$descriptor() {
        return g_action_map_remove_action_entries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_action_map_remove_action_entries(GActionMap *action_map, const GActionEntry *entries, gint n_entries)
     * }
     */
    public static MethodHandle g_action_map_remove_action_entries$handle() {
        return g_action_map_remove_action_entries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_action_map_remove_action_entries(GActionMap *action_map, const GActionEntry *entries, gint n_entries)
     * }
     */
    public static void g_action_map_remove_action_entries(MemorySegment action_map, MemorySegment entries, int n_entries) {
        var mh$ = g_action_map_remove_action_entries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_action_map_remove_action_entries", action_map, entries, n_entries);
            }
            mh$.invokeExact(action_map, entries, n_entries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_app_info_get_type()
     * }
     */
    public static FunctionDescriptor g_app_info_get_type$descriptor() {
        return g_app_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_app_info_get_type()
     * }
     */
    public static MethodHandle g_app_info_get_type$handle() {
        return g_app_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_app_info_get_type()
     * }
     */
    public static long g_app_info_get_type() {
        var mh$ = g_app_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_create_from_commandline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_create_from_commandline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_create_from_commandline(const char *commandline, const char *application_name, GAppInfoCreateFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_create_from_commandline$descriptor() {
        return g_app_info_create_from_commandline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_create_from_commandline(const char *commandline, const char *application_name, GAppInfoCreateFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_app_info_create_from_commandline$handle() {
        return g_app_info_create_from_commandline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_create_from_commandline(const char *commandline, const char *application_name, GAppInfoCreateFlags flags, GError **error)
     * }
     */
    public static MemorySegment g_app_info_create_from_commandline(MemorySegment commandline, MemorySegment application_name, int flags, MemorySegment error) {
        var mh$ = g_app_info_create_from_commandline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_create_from_commandline", commandline, application_name, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(commandline, application_name, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_dup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_dup(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_dup$descriptor() {
        return g_app_info_dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_dup(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_dup$handle() {
        return g_app_info_dup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_dup(GAppInfo *appinfo)
     * }
     */
    public static MemorySegment g_app_info_dup(MemorySegment appinfo) {
        var mh$ = g_app_info_dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_dup", appinfo);
            }
            return (MemorySegment)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_equal(GAppInfo *appinfo1, GAppInfo *appinfo2)
     * }
     */
    public static FunctionDescriptor g_app_info_equal$descriptor() {
        return g_app_info_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_equal(GAppInfo *appinfo1, GAppInfo *appinfo2)
     * }
     */
    public static MethodHandle g_app_info_equal$handle() {
        return g_app_info_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_equal(GAppInfo *appinfo1, GAppInfo *appinfo2)
     * }
     */
    public static int g_app_info_equal(MemorySegment appinfo1, MemorySegment appinfo2) {
        var mh$ = g_app_info_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_equal", appinfo1, appinfo2);
            }
            return (int)mh$.invokeExact(appinfo1, appinfo2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_id(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_get_id$descriptor() {
        return g_app_info_get_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_id(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_get_id$handle() {
        return g_app_info_get_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_app_info_get_id(GAppInfo *appinfo)
     * }
     */
    public static MemorySegment g_app_info_get_id(MemorySegment appinfo) {
        var mh$ = g_app_info_get_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_id", appinfo);
            }
            return (MemorySegment)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_name(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_get_name$descriptor() {
        return g_app_info_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_name(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_get_name$handle() {
        return g_app_info_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_app_info_get_name(GAppInfo *appinfo)
     * }
     */
    public static MemorySegment g_app_info_get_name(MemorySegment appinfo) {
        var mh$ = g_app_info_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_name", appinfo);
            }
            return (MemorySegment)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_display_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_display_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_display_name(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_get_display_name$descriptor() {
        return g_app_info_get_display_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_display_name(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_get_display_name$handle() {
        return g_app_info_get_display_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_app_info_get_display_name(GAppInfo *appinfo)
     * }
     */
    public static MemorySegment g_app_info_get_display_name(MemorySegment appinfo) {
        var mh$ = g_app_info_get_display_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_display_name", appinfo);
            }
            return (MemorySegment)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_description(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_get_description$descriptor() {
        return g_app_info_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_description(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_get_description$handle() {
        return g_app_info_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_app_info_get_description(GAppInfo *appinfo)
     * }
     */
    public static MemorySegment g_app_info_get_description(MemorySegment appinfo) {
        var mh$ = g_app_info_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_description", appinfo);
            }
            return (MemorySegment)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_executable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_executable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_executable(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_get_executable$descriptor() {
        return g_app_info_get_executable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_executable(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_get_executable$handle() {
        return g_app_info_get_executable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_app_info_get_executable(GAppInfo *appinfo)
     * }
     */
    public static MemorySegment g_app_info_get_executable(MemorySegment appinfo) {
        var mh$ = g_app_info_get_executable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_executable", appinfo);
            }
            return (MemorySegment)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_commandline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_commandline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_commandline(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_get_commandline$descriptor() {
        return g_app_info_get_commandline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_app_info_get_commandline(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_get_commandline$handle() {
        return g_app_info_get_commandline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_app_info_get_commandline(GAppInfo *appinfo)
     * }
     */
    public static MemorySegment g_app_info_get_commandline(MemorySegment appinfo) {
        var mh$ = g_app_info_get_commandline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_commandline", appinfo);
            }
            return (MemorySegment)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_app_info_get_icon(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_get_icon$descriptor() {
        return g_app_info_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_app_info_get_icon(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_get_icon$handle() {
        return g_app_info_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_app_info_get_icon(GAppInfo *appinfo)
     * }
     */
    public static MemorySegment g_app_info_get_icon(MemorySegment appinfo) {
        var mh$ = g_app_info_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_icon", appinfo);
            }
            return (MemorySegment)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_launch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_launch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch(GAppInfo *appinfo, GList *files, GAppLaunchContext *context, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_launch$descriptor() {
        return g_app_info_launch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch(GAppInfo *appinfo, GList *files, GAppLaunchContext *context, GError **error)
     * }
     */
    public static MethodHandle g_app_info_launch$handle() {
        return g_app_info_launch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch(GAppInfo *appinfo, GList *files, GAppLaunchContext *context, GError **error)
     * }
     */
    public static int g_app_info_launch(MemorySegment appinfo, MemorySegment files, MemorySegment context, MemorySegment error) {
        var mh$ = g_app_info_launch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_launch", appinfo, files, context, error);
            }
            return (int)mh$.invokeExact(appinfo, files, context, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_supports_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_supports_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_supports_uris(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_supports_uris$descriptor() {
        return g_app_info_supports_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_supports_uris(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_supports_uris$handle() {
        return g_app_info_supports_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_supports_uris(GAppInfo *appinfo)
     * }
     */
    public static int g_app_info_supports_uris(MemorySegment appinfo) {
        var mh$ = g_app_info_supports_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_supports_uris", appinfo);
            }
            return (int)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_supports_files {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_supports_files"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_supports_files(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_supports_files$descriptor() {
        return g_app_info_supports_files.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_supports_files(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_supports_files$handle() {
        return g_app_info_supports_files.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_supports_files(GAppInfo *appinfo)
     * }
     */
    public static int g_app_info_supports_files(MemorySegment appinfo) {
        var mh$ = g_app_info_supports_files.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_supports_files", appinfo);
            }
            return (int)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_launch_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_launch_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_uris(GAppInfo *appinfo, GList *uris, GAppLaunchContext *context, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_launch_uris$descriptor() {
        return g_app_info_launch_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_uris(GAppInfo *appinfo, GList *uris, GAppLaunchContext *context, GError **error)
     * }
     */
    public static MethodHandle g_app_info_launch_uris$handle() {
        return g_app_info_launch_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_uris(GAppInfo *appinfo, GList *uris, GAppLaunchContext *context, GError **error)
     * }
     */
    public static int g_app_info_launch_uris(MemorySegment appinfo, MemorySegment uris, MemorySegment context, MemorySegment error) {
        var mh$ = g_app_info_launch_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_launch_uris", appinfo, uris, context, error);
            }
            return (int)mh$.invokeExact(appinfo, uris, context, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_launch_uris_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_launch_uris_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_app_info_launch_uris_async(GAppInfo *appinfo, GList *uris, GAppLaunchContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_app_info_launch_uris_async$descriptor() {
        return g_app_info_launch_uris_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_app_info_launch_uris_async(GAppInfo *appinfo, GList *uris, GAppLaunchContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_app_info_launch_uris_async$handle() {
        return g_app_info_launch_uris_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_app_info_launch_uris_async(GAppInfo *appinfo, GList *uris, GAppLaunchContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_app_info_launch_uris_async(MemorySegment appinfo, MemorySegment uris, MemorySegment context, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_app_info_launch_uris_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_launch_uris_async", appinfo, uris, context, cancellable, callback, user_data);
            }
            mh$.invokeExact(appinfo, uris, context, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_launch_uris_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_launch_uris_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_uris_finish(GAppInfo *appinfo, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_launch_uris_finish$descriptor() {
        return g_app_info_launch_uris_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_uris_finish(GAppInfo *appinfo, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_app_info_launch_uris_finish$handle() {
        return g_app_info_launch_uris_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_uris_finish(GAppInfo *appinfo, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_app_info_launch_uris_finish(MemorySegment appinfo, MemorySegment result, MemorySegment error) {
        var mh$ = g_app_info_launch_uris_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_launch_uris_finish", appinfo, result, error);
            }
            return (int)mh$.invokeExact(appinfo, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_should_show {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_should_show"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_should_show(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_should_show$descriptor() {
        return g_app_info_should_show.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_should_show(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_should_show$handle() {
        return g_app_info_should_show.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_should_show(GAppInfo *appinfo)
     * }
     */
    public static int g_app_info_should_show(MemorySegment appinfo) {
        var mh$ = g_app_info_should_show.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_should_show", appinfo);
            }
            return (int)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_set_as_default_for_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_set_as_default_for_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_set_as_default_for_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_set_as_default_for_type$descriptor() {
        return g_app_info_set_as_default_for_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_set_as_default_for_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static MethodHandle g_app_info_set_as_default_for_type$handle() {
        return g_app_info_set_as_default_for_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_set_as_default_for_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static int g_app_info_set_as_default_for_type(MemorySegment appinfo, MemorySegment content_type, MemorySegment error) {
        var mh$ = g_app_info_set_as_default_for_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_set_as_default_for_type", appinfo, content_type, error);
            }
            return (int)mh$.invokeExact(appinfo, content_type, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_set_as_default_for_extension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_set_as_default_for_extension"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_set_as_default_for_extension(GAppInfo *appinfo, const char *extension, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_set_as_default_for_extension$descriptor() {
        return g_app_info_set_as_default_for_extension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_set_as_default_for_extension(GAppInfo *appinfo, const char *extension, GError **error)
     * }
     */
    public static MethodHandle g_app_info_set_as_default_for_extension$handle() {
        return g_app_info_set_as_default_for_extension.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_set_as_default_for_extension(GAppInfo *appinfo, const char *extension, GError **error)
     * }
     */
    public static int g_app_info_set_as_default_for_extension(MemorySegment appinfo, MemorySegment extension, MemorySegment error) {
        var mh$ = g_app_info_set_as_default_for_extension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_set_as_default_for_extension", appinfo, extension, error);
            }
            return (int)mh$.invokeExact(appinfo, extension, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_add_supports_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_add_supports_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_add_supports_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_add_supports_type$descriptor() {
        return g_app_info_add_supports_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_add_supports_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static MethodHandle g_app_info_add_supports_type$handle() {
        return g_app_info_add_supports_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_add_supports_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static int g_app_info_add_supports_type(MemorySegment appinfo, MemorySegment content_type, MemorySegment error) {
        var mh$ = g_app_info_add_supports_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_add_supports_type", appinfo, content_type, error);
            }
            return (int)mh$.invokeExact(appinfo, content_type, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_can_remove_supports_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_can_remove_supports_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_can_remove_supports_type(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_can_remove_supports_type$descriptor() {
        return g_app_info_can_remove_supports_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_can_remove_supports_type(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_can_remove_supports_type$handle() {
        return g_app_info_can_remove_supports_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_can_remove_supports_type(GAppInfo *appinfo)
     * }
     */
    public static int g_app_info_can_remove_supports_type(MemorySegment appinfo) {
        var mh$ = g_app_info_can_remove_supports_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_can_remove_supports_type", appinfo);
            }
            return (int)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_remove_supports_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_remove_supports_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_remove_supports_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_remove_supports_type$descriptor() {
        return g_app_info_remove_supports_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_remove_supports_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static MethodHandle g_app_info_remove_supports_type$handle() {
        return g_app_info_remove_supports_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_remove_supports_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static int g_app_info_remove_supports_type(MemorySegment appinfo, MemorySegment content_type, MemorySegment error) {
        var mh$ = g_app_info_remove_supports_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_remove_supports_type", appinfo, content_type, error);
            }
            return (int)mh$.invokeExact(appinfo, content_type, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_supported_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_supported_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char **g_app_info_get_supported_types(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_get_supported_types$descriptor() {
        return g_app_info_get_supported_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char **g_app_info_get_supported_types(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_get_supported_types$handle() {
        return g_app_info_get_supported_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char **g_app_info_get_supported_types(GAppInfo *appinfo)
     * }
     */
    public static MemorySegment g_app_info_get_supported_types(MemorySegment appinfo) {
        var mh$ = g_app_info_get_supported_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_supported_types", appinfo);
            }
            return (MemorySegment)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_can_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_can_delete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_can_delete(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_can_delete$descriptor() {
        return g_app_info_can_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_can_delete(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_can_delete$handle() {
        return g_app_info_can_delete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_can_delete(GAppInfo *appinfo)
     * }
     */
    public static int g_app_info_can_delete(MemorySegment appinfo) {
        var mh$ = g_app_info_can_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_can_delete", appinfo);
            }
            return (int)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_delete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_delete(GAppInfo *appinfo)
     * }
     */
    public static FunctionDescriptor g_app_info_delete$descriptor() {
        return g_app_info_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_delete(GAppInfo *appinfo)
     * }
     */
    public static MethodHandle g_app_info_delete$handle() {
        return g_app_info_delete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_delete(GAppInfo *appinfo)
     * }
     */
    public static int g_app_info_delete(MemorySegment appinfo) {
        var mh$ = g_app_info_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_delete", appinfo);
            }
            return (int)mh$.invokeExact(appinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_set_as_last_used_for_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_set_as_last_used_for_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_set_as_last_used_for_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_set_as_last_used_for_type$descriptor() {
        return g_app_info_set_as_last_used_for_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_set_as_last_used_for_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static MethodHandle g_app_info_set_as_last_used_for_type$handle() {
        return g_app_info_set_as_last_used_for_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_set_as_last_used_for_type(GAppInfo *appinfo, const char *content_type, GError **error)
     * }
     */
    public static int g_app_info_set_as_last_used_for_type(MemorySegment appinfo, MemorySegment content_type, MemorySegment error) {
        var mh$ = g_app_info_set_as_last_used_for_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_set_as_last_used_for_type", appinfo, content_type, error);
            }
            return (int)mh$.invokeExact(appinfo, content_type, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_app_info_get_all()
     * }
     */
    public static FunctionDescriptor g_app_info_get_all$descriptor() {
        return g_app_info_get_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_app_info_get_all()
     * }
     */
    public static MethodHandle g_app_info_get_all$handle() {
        return g_app_info_get_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_app_info_get_all()
     * }
     */
    public static MemorySegment g_app_info_get_all() {
        var mh$ = g_app_info_get_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_all");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_all_for_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_all_for_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_app_info_get_all_for_type(const char *content_type)
     * }
     */
    public static FunctionDescriptor g_app_info_get_all_for_type$descriptor() {
        return g_app_info_get_all_for_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_app_info_get_all_for_type(const char *content_type)
     * }
     */
    public static MethodHandle g_app_info_get_all_for_type$handle() {
        return g_app_info_get_all_for_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_app_info_get_all_for_type(const char *content_type)
     * }
     */
    public static MemorySegment g_app_info_get_all_for_type(MemorySegment content_type) {
        var mh$ = g_app_info_get_all_for_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_all_for_type", content_type);
            }
            return (MemorySegment)mh$.invokeExact(content_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_recommended_for_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_recommended_for_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_app_info_get_recommended_for_type(const gchar *content_type)
     * }
     */
    public static FunctionDescriptor g_app_info_get_recommended_for_type$descriptor() {
        return g_app_info_get_recommended_for_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_app_info_get_recommended_for_type(const gchar *content_type)
     * }
     */
    public static MethodHandle g_app_info_get_recommended_for_type$handle() {
        return g_app_info_get_recommended_for_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_app_info_get_recommended_for_type(const gchar *content_type)
     * }
     */
    public static MemorySegment g_app_info_get_recommended_for_type(MemorySegment content_type) {
        var mh$ = g_app_info_get_recommended_for_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_recommended_for_type", content_type);
            }
            return (MemorySegment)mh$.invokeExact(content_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_fallback_for_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_fallback_for_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_app_info_get_fallback_for_type(const gchar *content_type)
     * }
     */
    public static FunctionDescriptor g_app_info_get_fallback_for_type$descriptor() {
        return g_app_info_get_fallback_for_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_app_info_get_fallback_for_type(const gchar *content_type)
     * }
     */
    public static MethodHandle g_app_info_get_fallback_for_type$handle() {
        return g_app_info_get_fallback_for_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_app_info_get_fallback_for_type(const gchar *content_type)
     * }
     */
    public static MemorySegment g_app_info_get_fallback_for_type(MemorySegment content_type) {
        var mh$ = g_app_info_get_fallback_for_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_fallback_for_type", content_type);
            }
            return (MemorySegment)mh$.invokeExact(content_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_reset_type_associations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_reset_type_associations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_app_info_reset_type_associations(const char *content_type)
     * }
     */
    public static FunctionDescriptor g_app_info_reset_type_associations$descriptor() {
        return g_app_info_reset_type_associations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_app_info_reset_type_associations(const char *content_type)
     * }
     */
    public static MethodHandle g_app_info_reset_type_associations$handle() {
        return g_app_info_reset_type_associations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_app_info_reset_type_associations(const char *content_type)
     * }
     */
    public static void g_app_info_reset_type_associations(MemorySegment content_type) {
        var mh$ = g_app_info_reset_type_associations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_reset_type_associations", content_type);
            }
            mh$.invokeExact(content_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_default_for_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_default_for_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_type(const char *content_type, gboolean must_support_uris)
     * }
     */
    public static FunctionDescriptor g_app_info_get_default_for_type$descriptor() {
        return g_app_info_get_default_for_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_type(const char *content_type, gboolean must_support_uris)
     * }
     */
    public static MethodHandle g_app_info_get_default_for_type$handle() {
        return g_app_info_get_default_for_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_type(const char *content_type, gboolean must_support_uris)
     * }
     */
    public static MemorySegment g_app_info_get_default_for_type(MemorySegment content_type, int must_support_uris) {
        var mh$ = g_app_info_get_default_for_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_default_for_type", content_type, must_support_uris);
            }
            return (MemorySegment)mh$.invokeExact(content_type, must_support_uris);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_default_for_type_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_default_for_type_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_app_info_get_default_for_type_async(const char *content_type, gboolean must_support_uris, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_app_info_get_default_for_type_async$descriptor() {
        return g_app_info_get_default_for_type_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_app_info_get_default_for_type_async(const char *content_type, gboolean must_support_uris, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_app_info_get_default_for_type_async$handle() {
        return g_app_info_get_default_for_type_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_app_info_get_default_for_type_async(const char *content_type, gboolean must_support_uris, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_app_info_get_default_for_type_async(MemorySegment content_type, int must_support_uris, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_app_info_get_default_for_type_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_default_for_type_async", content_type, must_support_uris, cancellable, callback, user_data);
            }
            mh$.invokeExact(content_type, must_support_uris, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_default_for_type_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_default_for_type_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_type_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_get_default_for_type_finish$descriptor() {
        return g_app_info_get_default_for_type_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_type_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_app_info_get_default_for_type_finish$handle() {
        return g_app_info_get_default_for_type_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_type_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_app_info_get_default_for_type_finish(MemorySegment result, MemorySegment error) {
        var mh$ = g_app_info_get_default_for_type_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_default_for_type_finish", result, error);
            }
            return (MemorySegment)mh$.invokeExact(result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_default_for_uri_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_default_for_uri_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_uri_scheme(const char *uri_scheme)
     * }
     */
    public static FunctionDescriptor g_app_info_get_default_for_uri_scheme$descriptor() {
        return g_app_info_get_default_for_uri_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_uri_scheme(const char *uri_scheme)
     * }
     */
    public static MethodHandle g_app_info_get_default_for_uri_scheme$handle() {
        return g_app_info_get_default_for_uri_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_uri_scheme(const char *uri_scheme)
     * }
     */
    public static MemorySegment g_app_info_get_default_for_uri_scheme(MemorySegment uri_scheme) {
        var mh$ = g_app_info_get_default_for_uri_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_default_for_uri_scheme", uri_scheme);
            }
            return (MemorySegment)mh$.invokeExact(uri_scheme);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_default_for_uri_scheme_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_default_for_uri_scheme_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_app_info_get_default_for_uri_scheme_async(const char *uri_scheme, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_app_info_get_default_for_uri_scheme_async$descriptor() {
        return g_app_info_get_default_for_uri_scheme_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_app_info_get_default_for_uri_scheme_async(const char *uri_scheme, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_app_info_get_default_for_uri_scheme_async$handle() {
        return g_app_info_get_default_for_uri_scheme_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_app_info_get_default_for_uri_scheme_async(const char *uri_scheme, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_app_info_get_default_for_uri_scheme_async(MemorySegment uri_scheme, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_app_info_get_default_for_uri_scheme_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_default_for_uri_scheme_async", uri_scheme, cancellable, callback, user_data);
            }
            mh$.invokeExact(uri_scheme, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_get_default_for_uri_scheme_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_get_default_for_uri_scheme_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_uri_scheme_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_get_default_for_uri_scheme_finish$descriptor() {
        return g_app_info_get_default_for_uri_scheme_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_uri_scheme_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_app_info_get_default_for_uri_scheme_finish$handle() {
        return g_app_info_get_default_for_uri_scheme_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfo *g_app_info_get_default_for_uri_scheme_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_app_info_get_default_for_uri_scheme_finish(MemorySegment result, MemorySegment error) {
        var mh$ = g_app_info_get_default_for_uri_scheme_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_get_default_for_uri_scheme_finish", result, error);
            }
            return (MemorySegment)mh$.invokeExact(result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_launch_default_for_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_launch_default_for_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_default_for_uri(const char *uri, GAppLaunchContext *context, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_launch_default_for_uri$descriptor() {
        return g_app_info_launch_default_for_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_default_for_uri(const char *uri, GAppLaunchContext *context, GError **error)
     * }
     */
    public static MethodHandle g_app_info_launch_default_for_uri$handle() {
        return g_app_info_launch_default_for_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_default_for_uri(const char *uri, GAppLaunchContext *context, GError **error)
     * }
     */
    public static int g_app_info_launch_default_for_uri(MemorySegment uri, MemorySegment context, MemorySegment error) {
        var mh$ = g_app_info_launch_default_for_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_launch_default_for_uri", uri, context, error);
            }
            return (int)mh$.invokeExact(uri, context, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_launch_default_for_uri_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_launch_default_for_uri_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_app_info_launch_default_for_uri_async(const char *uri, GAppLaunchContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_app_info_launch_default_for_uri_async$descriptor() {
        return g_app_info_launch_default_for_uri_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_app_info_launch_default_for_uri_async(const char *uri, GAppLaunchContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_app_info_launch_default_for_uri_async$handle() {
        return g_app_info_launch_default_for_uri_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_app_info_launch_default_for_uri_async(const char *uri, GAppLaunchContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_app_info_launch_default_for_uri_async(MemorySegment uri, MemorySegment context, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_app_info_launch_default_for_uri_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_launch_default_for_uri_async", uri, context, cancellable, callback, user_data);
            }
            mh$.invokeExact(uri, context, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_launch_default_for_uri_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_launch_default_for_uri_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_default_for_uri_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_app_info_launch_default_for_uri_finish$descriptor() {
        return g_app_info_launch_default_for_uri_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_default_for_uri_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_app_info_launch_default_for_uri_finish$handle() {
        return g_app_info_launch_default_for_uri_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_app_info_launch_default_for_uri_finish(GAsyncResult *result, GError **error)
     * }
     */
    public static int g_app_info_launch_default_for_uri_finish(MemorySegment result, MemorySegment error) {
        var mh$ = g_app_info_launch_default_for_uri_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_launch_default_for_uri_finish", result, error);
            }
            return (int)mh$.invokeExact(result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_launch_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_launch_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_app_launch_context_get_type()
     * }
     */
    public static FunctionDescriptor g_app_launch_context_get_type$descriptor() {
        return g_app_launch_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_app_launch_context_get_type()
     * }
     */
    public static MethodHandle g_app_launch_context_get_type$handle() {
        return g_app_launch_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_app_launch_context_get_type()
     * }
     */
    public static long g_app_launch_context_get_type() {
        var mh$ = g_app_launch_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_launch_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_launch_context_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_launch_context_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppLaunchContext *g_app_launch_context_new()
     * }
     */
    public static FunctionDescriptor g_app_launch_context_new$descriptor() {
        return g_app_launch_context_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppLaunchContext *g_app_launch_context_new()
     * }
     */
    public static MethodHandle g_app_launch_context_new$handle() {
        return g_app_launch_context_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppLaunchContext *g_app_launch_context_new()
     * }
     */
    public static MemorySegment g_app_launch_context_new() {
        var mh$ = g_app_launch_context_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_launch_context_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_launch_context_setenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_launch_context_setenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_app_launch_context_setenv(GAppLaunchContext *context, const char *variable, const char *value)
     * }
     */
    public static FunctionDescriptor g_app_launch_context_setenv$descriptor() {
        return g_app_launch_context_setenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_app_launch_context_setenv(GAppLaunchContext *context, const char *variable, const char *value)
     * }
     */
    public static MethodHandle g_app_launch_context_setenv$handle() {
        return g_app_launch_context_setenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_app_launch_context_setenv(GAppLaunchContext *context, const char *variable, const char *value)
     * }
     */
    public static void g_app_launch_context_setenv(MemorySegment context, MemorySegment variable, MemorySegment value) {
        var mh$ = g_app_launch_context_setenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_launch_context_setenv", context, variable, value);
            }
            mh$.invokeExact(context, variable, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_launch_context_unsetenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_launch_context_unsetenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_app_launch_context_unsetenv(GAppLaunchContext *context, const char *variable)
     * }
     */
    public static FunctionDescriptor g_app_launch_context_unsetenv$descriptor() {
        return g_app_launch_context_unsetenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_app_launch_context_unsetenv(GAppLaunchContext *context, const char *variable)
     * }
     */
    public static MethodHandle g_app_launch_context_unsetenv$handle() {
        return g_app_launch_context_unsetenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_app_launch_context_unsetenv(GAppLaunchContext *context, const char *variable)
     * }
     */
    public static void g_app_launch_context_unsetenv(MemorySegment context, MemorySegment variable) {
        var mh$ = g_app_launch_context_unsetenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_launch_context_unsetenv", context, variable);
            }
            mh$.invokeExact(context, variable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_launch_context_get_environment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_launch_context_get_environment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **g_app_launch_context_get_environment(GAppLaunchContext *context)
     * }
     */
    public static FunctionDescriptor g_app_launch_context_get_environment$descriptor() {
        return g_app_launch_context_get_environment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **g_app_launch_context_get_environment(GAppLaunchContext *context)
     * }
     */
    public static MethodHandle g_app_launch_context_get_environment$handle() {
        return g_app_launch_context_get_environment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **g_app_launch_context_get_environment(GAppLaunchContext *context)
     * }
     */
    public static MemorySegment g_app_launch_context_get_environment(MemorySegment context) {
        var mh$ = g_app_launch_context_get_environment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_launch_context_get_environment", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_launch_context_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_launch_context_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_app_launch_context_get_display(GAppLaunchContext *context, GAppInfo *info, GList *files)
     * }
     */
    public static FunctionDescriptor g_app_launch_context_get_display$descriptor() {
        return g_app_launch_context_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_app_launch_context_get_display(GAppLaunchContext *context, GAppInfo *info, GList *files)
     * }
     */
    public static MethodHandle g_app_launch_context_get_display$handle() {
        return g_app_launch_context_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_app_launch_context_get_display(GAppLaunchContext *context, GAppInfo *info, GList *files)
     * }
     */
    public static MemorySegment g_app_launch_context_get_display(MemorySegment context, MemorySegment info, MemorySegment files) {
        var mh$ = g_app_launch_context_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_launch_context_get_display", context, info, files);
            }
            return (MemorySegment)mh$.invokeExact(context, info, files);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_launch_context_get_startup_notify_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_launch_context_get_startup_notify_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_app_launch_context_get_startup_notify_id(GAppLaunchContext *context, GAppInfo *info, GList *files)
     * }
     */
    public static FunctionDescriptor g_app_launch_context_get_startup_notify_id$descriptor() {
        return g_app_launch_context_get_startup_notify_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_app_launch_context_get_startup_notify_id(GAppLaunchContext *context, GAppInfo *info, GList *files)
     * }
     */
    public static MethodHandle g_app_launch_context_get_startup_notify_id$handle() {
        return g_app_launch_context_get_startup_notify_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_app_launch_context_get_startup_notify_id(GAppLaunchContext *context, GAppInfo *info, GList *files)
     * }
     */
    public static MemorySegment g_app_launch_context_get_startup_notify_id(MemorySegment context, MemorySegment info, MemorySegment files) {
        var mh$ = g_app_launch_context_get_startup_notify_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_launch_context_get_startup_notify_id", context, info, files);
            }
            return (MemorySegment)mh$.invokeExact(context, info, files);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_launch_context_launch_failed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_launch_context_launch_failed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_app_launch_context_launch_failed(GAppLaunchContext *context, const char *startup_notify_id)
     * }
     */
    public static FunctionDescriptor g_app_launch_context_launch_failed$descriptor() {
        return g_app_launch_context_launch_failed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_app_launch_context_launch_failed(GAppLaunchContext *context, const char *startup_notify_id)
     * }
     */
    public static MethodHandle g_app_launch_context_launch_failed$handle() {
        return g_app_launch_context_launch_failed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_app_launch_context_launch_failed(GAppLaunchContext *context, const char *startup_notify_id)
     * }
     */
    public static void g_app_launch_context_launch_failed(MemorySegment context, MemorySegment startup_notify_id) {
        var mh$ = g_app_launch_context_launch_failed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_launch_context_launch_failed", context, startup_notify_id);
            }
            mh$.invokeExact(context, startup_notify_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_monitor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_monitor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_app_info_monitor_get_type()
     * }
     */
    public static FunctionDescriptor g_app_info_monitor_get_type$descriptor() {
        return g_app_info_monitor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_app_info_monitor_get_type()
     * }
     */
    public static MethodHandle g_app_info_monitor_get_type$handle() {
        return g_app_info_monitor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_app_info_monitor_get_type()
     * }
     */
    public static long g_app_info_monitor_get_type() {
        var mh$ = g_app_info_monitor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_monitor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_app_info_monitor_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_app_info_monitor_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAppInfoMonitor *g_app_info_monitor_get()
     * }
     */
    public static FunctionDescriptor g_app_info_monitor_get$descriptor() {
        return g_app_info_monitor_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAppInfoMonitor *g_app_info_monitor_get()
     * }
     */
    public static MethodHandle g_app_info_monitor_get$handle() {
        return g_app_info_monitor_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAppInfoMonitor *g_app_info_monitor_get()
     * }
     */
    public static MemorySegment g_app_info_monitor_get() {
        var mh$ = g_app_info_monitor_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_app_info_monitor_get");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_application_get_type()
     * }
     */
    public static FunctionDescriptor g_application_get_type$descriptor() {
        return g_application_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_application_get_type()
     * }
     */
    public static MethodHandle g_application_get_type$handle() {
        return g_application_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_application_get_type()
     * }
     */
    public static long g_application_get_type() {
        var mh$ = g_application_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_id_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_id_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_application_id_is_valid(const gchar *application_id)
     * }
     */
    public static FunctionDescriptor g_application_id_is_valid$descriptor() {
        return g_application_id_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_application_id_is_valid(const gchar *application_id)
     * }
     */
    public static MethodHandle g_application_id_is_valid$handle() {
        return g_application_id_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_application_id_is_valid(const gchar *application_id)
     * }
     */
    public static int g_application_id_is_valid(MemorySegment application_id) {
        var mh$ = g_application_id_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_id_is_valid", application_id);
            }
            return (int)mh$.invokeExact(application_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GApplication *g_application_new(const gchar *application_id, GApplicationFlags flags)
     * }
     */
    public static FunctionDescriptor g_application_new$descriptor() {
        return g_application_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GApplication *g_application_new(const gchar *application_id, GApplicationFlags flags)
     * }
     */
    public static MethodHandle g_application_new$handle() {
        return g_application_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GApplication *g_application_new(const gchar *application_id, GApplicationFlags flags)
     * }
     */
    public static MemorySegment g_application_new(MemorySegment application_id, int flags) {
        var mh$ = g_application_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_new", application_id, flags);
            }
            return (MemorySegment)mh$.invokeExact(application_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_application_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_application_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_application_get_application_id(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_get_application_id$descriptor() {
        return g_application_get_application_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_application_get_application_id(GApplication *application)
     * }
     */
    public static MethodHandle g_application_get_application_id$handle() {
        return g_application_get_application_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_application_get_application_id(GApplication *application)
     * }
     */
    public static MemorySegment g_application_get_application_id(MemorySegment application) {
        var mh$ = g_application_get_application_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_application_id", application);
            }
            return (MemorySegment)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_set_application_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_set_application_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_set_application_id(GApplication *application, const gchar *application_id)
     * }
     */
    public static FunctionDescriptor g_application_set_application_id$descriptor() {
        return g_application_set_application_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_set_application_id(GApplication *application, const gchar *application_id)
     * }
     */
    public static MethodHandle g_application_set_application_id$handle() {
        return g_application_set_application_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_set_application_id(GApplication *application, const gchar *application_id)
     * }
     */
    public static void g_application_set_application_id(MemorySegment application, MemorySegment application_id) {
        var mh$ = g_application_set_application_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_set_application_id", application, application_id);
            }
            mh$.invokeExact(application, application_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_dbus_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_dbus_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_application_get_dbus_connection(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_get_dbus_connection$descriptor() {
        return g_application_get_dbus_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_application_get_dbus_connection(GApplication *application)
     * }
     */
    public static MethodHandle g_application_get_dbus_connection$handle() {
        return g_application_get_dbus_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_application_get_dbus_connection(GApplication *application)
     * }
     */
    public static MemorySegment g_application_get_dbus_connection(MemorySegment application) {
        var mh$ = g_application_get_dbus_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_dbus_connection", application);
            }
            return (MemorySegment)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_dbus_object_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_dbus_object_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_application_get_dbus_object_path(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_get_dbus_object_path$descriptor() {
        return g_application_get_dbus_object_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_application_get_dbus_object_path(GApplication *application)
     * }
     */
    public static MethodHandle g_application_get_dbus_object_path$handle() {
        return g_application_get_dbus_object_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_application_get_dbus_object_path(GApplication *application)
     * }
     */
    public static MemorySegment g_application_get_dbus_object_path(MemorySegment application) {
        var mh$ = g_application_get_dbus_object_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_dbus_object_path", application);
            }
            return (MemorySegment)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_inactivity_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_inactivity_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_application_get_inactivity_timeout(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_get_inactivity_timeout$descriptor() {
        return g_application_get_inactivity_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_application_get_inactivity_timeout(GApplication *application)
     * }
     */
    public static MethodHandle g_application_get_inactivity_timeout$handle() {
        return g_application_get_inactivity_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_application_get_inactivity_timeout(GApplication *application)
     * }
     */
    public static int g_application_get_inactivity_timeout(MemorySegment application) {
        var mh$ = g_application_get_inactivity_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_inactivity_timeout", application);
            }
            return (int)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_set_inactivity_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_set_inactivity_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_set_inactivity_timeout(GApplication *application, guint inactivity_timeout)
     * }
     */
    public static FunctionDescriptor g_application_set_inactivity_timeout$descriptor() {
        return g_application_set_inactivity_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_set_inactivity_timeout(GApplication *application, guint inactivity_timeout)
     * }
     */
    public static MethodHandle g_application_set_inactivity_timeout$handle() {
        return g_application_set_inactivity_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_set_inactivity_timeout(GApplication *application, guint inactivity_timeout)
     * }
     */
    public static void g_application_set_inactivity_timeout(MemorySegment application, int inactivity_timeout) {
        var mh$ = g_application_set_inactivity_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_set_inactivity_timeout", application, inactivity_timeout);
            }
            mh$.invokeExact(application, inactivity_timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GApplicationFlags g_application_get_flags(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_get_flags$descriptor() {
        return g_application_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GApplicationFlags g_application_get_flags(GApplication *application)
     * }
     */
    public static MethodHandle g_application_get_flags$handle() {
        return g_application_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GApplicationFlags g_application_get_flags(GApplication *application)
     * }
     */
    public static int g_application_get_flags(MemorySegment application) {
        var mh$ = g_application_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_flags", application);
            }
            return (int)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_set_flags(GApplication *application, GApplicationFlags flags)
     * }
     */
    public static FunctionDescriptor g_application_set_flags$descriptor() {
        return g_application_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_set_flags(GApplication *application, GApplicationFlags flags)
     * }
     */
    public static MethodHandle g_application_set_flags$handle() {
        return g_application_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_set_flags(GApplication *application, GApplicationFlags flags)
     * }
     */
    public static void g_application_set_flags(MemorySegment application, int flags) {
        var mh$ = g_application_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_set_flags", application, flags);
            }
            mh$.invokeExact(application, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_resource_base_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_resource_base_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_application_get_resource_base_path(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_get_resource_base_path$descriptor() {
        return g_application_get_resource_base_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_application_get_resource_base_path(GApplication *application)
     * }
     */
    public static MethodHandle g_application_get_resource_base_path$handle() {
        return g_application_get_resource_base_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_application_get_resource_base_path(GApplication *application)
     * }
     */
    public static MemorySegment g_application_get_resource_base_path(MemorySegment application) {
        var mh$ = g_application_get_resource_base_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_resource_base_path", application);
            }
            return (MemorySegment)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_set_resource_base_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_set_resource_base_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_set_resource_base_path(GApplication *application, const gchar *resource_path)
     * }
     */
    public static FunctionDescriptor g_application_set_resource_base_path$descriptor() {
        return g_application_set_resource_base_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_set_resource_base_path(GApplication *application, const gchar *resource_path)
     * }
     */
    public static MethodHandle g_application_set_resource_base_path$handle() {
        return g_application_set_resource_base_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_set_resource_base_path(GApplication *application, const gchar *resource_path)
     * }
     */
    public static void g_application_set_resource_base_path(MemorySegment application, MemorySegment resource_path) {
        var mh$ = g_application_set_resource_base_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_set_resource_base_path", application, resource_path);
            }
            mh$.invokeExact(application, resource_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_set_action_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_set_action_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_set_action_group(GApplication *application, GActionGroup *action_group)
     * }
     */
    public static FunctionDescriptor g_application_set_action_group$descriptor() {
        return g_application_set_action_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_set_action_group(GApplication *application, GActionGroup *action_group)
     * }
     */
    public static MethodHandle g_application_set_action_group$handle() {
        return g_application_set_action_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_set_action_group(GApplication *application, GActionGroup *action_group)
     * }
     */
    public static void g_application_set_action_group(MemorySegment application, MemorySegment action_group) {
        var mh$ = g_application_set_action_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_set_action_group", application, action_group);
            }
            mh$.invokeExact(application, action_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_add_main_option_entries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_add_main_option_entries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_add_main_option_entries(GApplication *application, const GOptionEntry *entries)
     * }
     */
    public static FunctionDescriptor g_application_add_main_option_entries$descriptor() {
        return g_application_add_main_option_entries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_add_main_option_entries(GApplication *application, const GOptionEntry *entries)
     * }
     */
    public static MethodHandle g_application_add_main_option_entries$handle() {
        return g_application_add_main_option_entries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_add_main_option_entries(GApplication *application, const GOptionEntry *entries)
     * }
     */
    public static void g_application_add_main_option_entries(MemorySegment application, MemorySegment entries) {
        var mh$ = g_application_add_main_option_entries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_add_main_option_entries", application, entries);
            }
            mh$.invokeExact(application, entries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_add_main_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_add_main_option"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_add_main_option(GApplication *application, const char *long_name, char short_name, GOptionFlags flags, GOptionArg arg, const char *description, const char *arg_description)
     * }
     */
    public static FunctionDescriptor g_application_add_main_option$descriptor() {
        return g_application_add_main_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_add_main_option(GApplication *application, const char *long_name, char short_name, GOptionFlags flags, GOptionArg arg, const char *description, const char *arg_description)
     * }
     */
    public static MethodHandle g_application_add_main_option$handle() {
        return g_application_add_main_option.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_add_main_option(GApplication *application, const char *long_name, char short_name, GOptionFlags flags, GOptionArg arg, const char *description, const char *arg_description)
     * }
     */
    public static void g_application_add_main_option(MemorySegment application, MemorySegment long_name, byte short_name, int flags, int arg, MemorySegment description, MemorySegment arg_description) {
        var mh$ = g_application_add_main_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_add_main_option", application, long_name, short_name, flags, arg, description, arg_description);
            }
            mh$.invokeExact(application, long_name, short_name, flags, arg, description, arg_description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_add_option_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_add_option_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_add_option_group(GApplication *application, GOptionGroup *group)
     * }
     */
    public static FunctionDescriptor g_application_add_option_group$descriptor() {
        return g_application_add_option_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_add_option_group(GApplication *application, GOptionGroup *group)
     * }
     */
    public static MethodHandle g_application_add_option_group$handle() {
        return g_application_add_option_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_add_option_group(GApplication *application, GOptionGroup *group)
     * }
     */
    public static void g_application_add_option_group(MemorySegment application, MemorySegment group) {
        var mh$ = g_application_add_option_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_add_option_group", application, group);
            }
            mh$.invokeExact(application, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_set_option_context_parameter_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_set_option_context_parameter_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_set_option_context_parameter_string(GApplication *application, const gchar *parameter_string)
     * }
     */
    public static FunctionDescriptor g_application_set_option_context_parameter_string$descriptor() {
        return g_application_set_option_context_parameter_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_set_option_context_parameter_string(GApplication *application, const gchar *parameter_string)
     * }
     */
    public static MethodHandle g_application_set_option_context_parameter_string$handle() {
        return g_application_set_option_context_parameter_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_set_option_context_parameter_string(GApplication *application, const gchar *parameter_string)
     * }
     */
    public static void g_application_set_option_context_parameter_string(MemorySegment application, MemorySegment parameter_string) {
        var mh$ = g_application_set_option_context_parameter_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_set_option_context_parameter_string", application, parameter_string);
            }
            mh$.invokeExact(application, parameter_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_set_option_context_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_set_option_context_summary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_set_option_context_summary(GApplication *application, const gchar *summary)
     * }
     */
    public static FunctionDescriptor g_application_set_option_context_summary$descriptor() {
        return g_application_set_option_context_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_set_option_context_summary(GApplication *application, const gchar *summary)
     * }
     */
    public static MethodHandle g_application_set_option_context_summary$handle() {
        return g_application_set_option_context_summary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_set_option_context_summary(GApplication *application, const gchar *summary)
     * }
     */
    public static void g_application_set_option_context_summary(MemorySegment application, MemorySegment summary) {
        var mh$ = g_application_set_option_context_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_set_option_context_summary", application, summary);
            }
            mh$.invokeExact(application, summary);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_set_option_context_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_set_option_context_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_set_option_context_description(GApplication *application, const gchar *description)
     * }
     */
    public static FunctionDescriptor g_application_set_option_context_description$descriptor() {
        return g_application_set_option_context_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_set_option_context_description(GApplication *application, const gchar *description)
     * }
     */
    public static MethodHandle g_application_set_option_context_description$handle() {
        return g_application_set_option_context_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_set_option_context_description(GApplication *application, const gchar *description)
     * }
     */
    public static void g_application_set_option_context_description(MemorySegment application, MemorySegment description) {
        var mh$ = g_application_set_option_context_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_set_option_context_description", application, description);
            }
            mh$.invokeExact(application, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_is_registered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_is_registered"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_application_get_is_registered(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_get_is_registered$descriptor() {
        return g_application_get_is_registered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_application_get_is_registered(GApplication *application)
     * }
     */
    public static MethodHandle g_application_get_is_registered$handle() {
        return g_application_get_is_registered.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_application_get_is_registered(GApplication *application)
     * }
     */
    public static int g_application_get_is_registered(MemorySegment application) {
        var mh$ = g_application_get_is_registered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_is_registered", application);
            }
            return (int)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_is_remote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_is_remote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_application_get_is_remote(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_get_is_remote$descriptor() {
        return g_application_get_is_remote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_application_get_is_remote(GApplication *application)
     * }
     */
    public static MethodHandle g_application_get_is_remote$handle() {
        return g_application_get_is_remote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_application_get_is_remote(GApplication *application)
     * }
     */
    public static int g_application_get_is_remote(MemorySegment application) {
        var mh$ = g_application_get_is_remote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_is_remote", application);
            }
            return (int)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_register"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_application_register(GApplication *application, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_application_register$descriptor() {
        return g_application_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_application_register(GApplication *application, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_application_register$handle() {
        return g_application_register.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_application_register(GApplication *application, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_application_register(MemorySegment application, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_application_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_register", application, cancellable, error);
            }
            return (int)mh$.invokeExact(application, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_hold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_hold"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_hold(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_hold$descriptor() {
        return g_application_hold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_hold(GApplication *application)
     * }
     */
    public static MethodHandle g_application_hold$handle() {
        return g_application_hold.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_hold(GApplication *application)
     * }
     */
    public static void g_application_hold(MemorySegment application) {
        var mh$ = g_application_hold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_hold", application);
            }
            mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_release(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_release$descriptor() {
        return g_application_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_release(GApplication *application)
     * }
     */
    public static MethodHandle g_application_release$handle() {
        return g_application_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_release(GApplication *application)
     * }
     */
    public static void g_application_release(MemorySegment application) {
        var mh$ = g_application_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_release", application);
            }
            mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_activate(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_activate$descriptor() {
        return g_application_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_activate(GApplication *application)
     * }
     */
    public static MethodHandle g_application_activate$handle() {
        return g_application_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_activate(GApplication *application)
     * }
     */
    public static void g_application_activate(MemorySegment application) {
        var mh$ = g_application_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_activate", application);
            }
            mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_open"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_open(GApplication *application, GFile **files, gint n_files, const gchar *hint)
     * }
     */
    public static FunctionDescriptor g_application_open$descriptor() {
        return g_application_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_open(GApplication *application, GFile **files, gint n_files, const gchar *hint)
     * }
     */
    public static MethodHandle g_application_open$handle() {
        return g_application_open.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_open(GApplication *application, GFile **files, gint n_files, const gchar *hint)
     * }
     */
    public static void g_application_open(MemorySegment application, MemorySegment files, int n_files, MemorySegment hint) {
        var mh$ = g_application_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_open", application, files, n_files, hint);
            }
            mh$.invokeExact(application, files, n_files, hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_run"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_application_run(GApplication *application, int argc, char **argv)
     * }
     */
    public static FunctionDescriptor g_application_run$descriptor() {
        return g_application_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_application_run(GApplication *application, int argc, char **argv)
     * }
     */
    public static MethodHandle g_application_run$handle() {
        return g_application_run.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_application_run(GApplication *application, int argc, char **argv)
     * }
     */
    public static int g_application_run(MemorySegment application, int argc, MemorySegment argv) {
        var mh$ = g_application_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_run", application, argc, argv);
            }
            return (int)mh$.invokeExact(application, argc, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_quit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_quit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_quit(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_quit$descriptor() {
        return g_application_quit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_quit(GApplication *application)
     * }
     */
    public static MethodHandle g_application_quit$handle() {
        return g_application_quit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_quit(GApplication *application)
     * }
     */
    public static void g_application_quit(MemorySegment application) {
        var mh$ = g_application_quit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_quit", application);
            }
            mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GApplication *g_application_get_default()
     * }
     */
    public static FunctionDescriptor g_application_get_default$descriptor() {
        return g_application_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GApplication *g_application_get_default()
     * }
     */
    public static MethodHandle g_application_get_default$handle() {
        return g_application_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GApplication *g_application_get_default()
     * }
     */
    public static MemorySegment g_application_get_default() {
        var mh$ = g_application_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_set_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_set_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_set_default(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_set_default$descriptor() {
        return g_application_set_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_set_default(GApplication *application)
     * }
     */
    public static MethodHandle g_application_set_default$handle() {
        return g_application_set_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_set_default(GApplication *application)
     * }
     */
    public static void g_application_set_default(MemorySegment application) {
        var mh$ = g_application_set_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_set_default", application);
            }
            mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_mark_busy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_mark_busy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_mark_busy(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_mark_busy$descriptor() {
        return g_application_mark_busy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_mark_busy(GApplication *application)
     * }
     */
    public static MethodHandle g_application_mark_busy$handle() {
        return g_application_mark_busy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_mark_busy(GApplication *application)
     * }
     */
    public static void g_application_mark_busy(MemorySegment application) {
        var mh$ = g_application_mark_busy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_mark_busy", application);
            }
            mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_unmark_busy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_unmark_busy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_unmark_busy(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_unmark_busy$descriptor() {
        return g_application_unmark_busy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_unmark_busy(GApplication *application)
     * }
     */
    public static MethodHandle g_application_unmark_busy$handle() {
        return g_application_unmark_busy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_unmark_busy(GApplication *application)
     * }
     */
    public static void g_application_unmark_busy(MemorySegment application) {
        var mh$ = g_application_unmark_busy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_unmark_busy", application);
            }
            mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_get_is_busy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_get_is_busy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_application_get_is_busy(GApplication *application)
     * }
     */
    public static FunctionDescriptor g_application_get_is_busy$descriptor() {
        return g_application_get_is_busy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_application_get_is_busy(GApplication *application)
     * }
     */
    public static MethodHandle g_application_get_is_busy$handle() {
        return g_application_get_is_busy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_application_get_is_busy(GApplication *application)
     * }
     */
    public static int g_application_get_is_busy(MemorySegment application) {
        var mh$ = g_application_get_is_busy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_get_is_busy", application);
            }
            return (int)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_send_notification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_send_notification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_send_notification(GApplication *application, const gchar *id, GNotification *notification)
     * }
     */
    public static FunctionDescriptor g_application_send_notification$descriptor() {
        return g_application_send_notification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_send_notification(GApplication *application, const gchar *id, GNotification *notification)
     * }
     */
    public static MethodHandle g_application_send_notification$handle() {
        return g_application_send_notification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_send_notification(GApplication *application, const gchar *id, GNotification *notification)
     * }
     */
    public static void g_application_send_notification(MemorySegment application, MemorySegment id, MemorySegment notification) {
        var mh$ = g_application_send_notification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_send_notification", application, id, notification);
            }
            mh$.invokeExact(application, id, notification);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_withdraw_notification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_withdraw_notification"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_withdraw_notification(GApplication *application, const gchar *id)
     * }
     */
    public static FunctionDescriptor g_application_withdraw_notification$descriptor() {
        return g_application_withdraw_notification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_withdraw_notification(GApplication *application, const gchar *id)
     * }
     */
    public static MethodHandle g_application_withdraw_notification$handle() {
        return g_application_withdraw_notification.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_withdraw_notification(GApplication *application, const gchar *id)
     * }
     */
    public static void g_application_withdraw_notification(MemorySegment application, MemorySegment id) {
        var mh$ = g_application_withdraw_notification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_withdraw_notification", application, id);
            }
            mh$.invokeExact(application, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_bind_busy_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_bind_busy_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_bind_busy_property(GApplication *application, gpointer object, const gchar *property)
     * }
     */
    public static FunctionDescriptor g_application_bind_busy_property$descriptor() {
        return g_application_bind_busy_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_bind_busy_property(GApplication *application, gpointer object, const gchar *property)
     * }
     */
    public static MethodHandle g_application_bind_busy_property$handle() {
        return g_application_bind_busy_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_bind_busy_property(GApplication *application, gpointer object, const gchar *property)
     * }
     */
    public static void g_application_bind_busy_property(MemorySegment application, MemorySegment object, MemorySegment property) {
        var mh$ = g_application_bind_busy_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_bind_busy_property", application, object, property);
            }
            mh$.invokeExact(application, object, property);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_unbind_busy_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_unbind_busy_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_unbind_busy_property(GApplication *application, gpointer object, const gchar *property)
     * }
     */
    public static FunctionDescriptor g_application_unbind_busy_property$descriptor() {
        return g_application_unbind_busy_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_unbind_busy_property(GApplication *application, gpointer object, const gchar *property)
     * }
     */
    public static MethodHandle g_application_unbind_busy_property$handle() {
        return g_application_unbind_busy_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_unbind_busy_property(GApplication *application, gpointer object, const gchar *property)
     * }
     */
    public static void g_application_unbind_busy_property(MemorySegment application, MemorySegment object, MemorySegment property) {
        var mh$ = g_application_unbind_busy_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_unbind_busy_property", application, object, property);
            }
            mh$.invokeExact(application, object, property);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_application_command_line_get_type()
     * }
     */
    public static FunctionDescriptor g_application_command_line_get_type$descriptor() {
        return g_application_command_line_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_application_command_line_get_type()
     * }
     */
    public static MethodHandle g_application_command_line_get_type$handle() {
        return g_application_command_line_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_application_command_line_get_type()
     * }
     */
    public static long g_application_command_line_get_type() {
        var mh$ = g_application_command_line_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_get_arguments {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_get_arguments"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_application_command_line_get_arguments(GApplicationCommandLine *cmdline, int *argc)
     * }
     */
    public static FunctionDescriptor g_application_command_line_get_arguments$descriptor() {
        return g_application_command_line_get_arguments.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_application_command_line_get_arguments(GApplicationCommandLine *cmdline, int *argc)
     * }
     */
    public static MethodHandle g_application_command_line_get_arguments$handle() {
        return g_application_command_line_get_arguments.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_application_command_line_get_arguments(GApplicationCommandLine *cmdline, int *argc)
     * }
     */
    public static MemorySegment g_application_command_line_get_arguments(MemorySegment cmdline, MemorySegment argc) {
        var mh$ = g_application_command_line_get_arguments.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_get_arguments", cmdline, argc);
            }
            return (MemorySegment)mh$.invokeExact(cmdline, argc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_get_options_dict {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_get_options_dict"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantDict *g_application_command_line_get_options_dict(GApplicationCommandLine *cmdline)
     * }
     */
    public static FunctionDescriptor g_application_command_line_get_options_dict$descriptor() {
        return g_application_command_line_get_options_dict.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantDict *g_application_command_line_get_options_dict(GApplicationCommandLine *cmdline)
     * }
     */
    public static MethodHandle g_application_command_line_get_options_dict$handle() {
        return g_application_command_line_get_options_dict.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantDict *g_application_command_line_get_options_dict(GApplicationCommandLine *cmdline)
     * }
     */
    public static MemorySegment g_application_command_line_get_options_dict(MemorySegment cmdline) {
        var mh$ = g_application_command_line_get_options_dict.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_get_options_dict", cmdline);
            }
            return (MemorySegment)mh$.invokeExact(cmdline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_get_stdin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_get_stdin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_application_command_line_get_stdin(GApplicationCommandLine *cmdline)
     * }
     */
    public static FunctionDescriptor g_application_command_line_get_stdin$descriptor() {
        return g_application_command_line_get_stdin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_application_command_line_get_stdin(GApplicationCommandLine *cmdline)
     * }
     */
    public static MethodHandle g_application_command_line_get_stdin$handle() {
        return g_application_command_line_get_stdin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_application_command_line_get_stdin(GApplicationCommandLine *cmdline)
     * }
     */
    public static MemorySegment g_application_command_line_get_stdin(MemorySegment cmdline) {
        var mh$ = g_application_command_line_get_stdin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_get_stdin", cmdline);
            }
            return (MemorySegment)mh$.invokeExact(cmdline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_get_environ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_get_environ"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *g_application_command_line_get_environ(GApplicationCommandLine *cmdline)
     * }
     */
    public static FunctionDescriptor g_application_command_line_get_environ$descriptor() {
        return g_application_command_line_get_environ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *g_application_command_line_get_environ(GApplicationCommandLine *cmdline)
     * }
     */
    public static MethodHandle g_application_command_line_get_environ$handle() {
        return g_application_command_line_get_environ.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *g_application_command_line_get_environ(GApplicationCommandLine *cmdline)
     * }
     */
    public static MemorySegment g_application_command_line_get_environ(MemorySegment cmdline) {
        var mh$ = g_application_command_line_get_environ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_get_environ", cmdline);
            }
            return (MemorySegment)mh$.invokeExact(cmdline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_getenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_getenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_application_command_line_getenv(GApplicationCommandLine *cmdline, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_application_command_line_getenv$descriptor() {
        return g_application_command_line_getenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_application_command_line_getenv(GApplicationCommandLine *cmdline, const gchar *name)
     * }
     */
    public static MethodHandle g_application_command_line_getenv$handle() {
        return g_application_command_line_getenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_application_command_line_getenv(GApplicationCommandLine *cmdline, const gchar *name)
     * }
     */
    public static MemorySegment g_application_command_line_getenv(MemorySegment cmdline, MemorySegment name) {
        var mh$ = g_application_command_line_getenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_getenv", cmdline, name);
            }
            return (MemorySegment)mh$.invokeExact(cmdline, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_get_cwd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_get_cwd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_application_command_line_get_cwd(GApplicationCommandLine *cmdline)
     * }
     */
    public static FunctionDescriptor g_application_command_line_get_cwd$descriptor() {
        return g_application_command_line_get_cwd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_application_command_line_get_cwd(GApplicationCommandLine *cmdline)
     * }
     */
    public static MethodHandle g_application_command_line_get_cwd$handle() {
        return g_application_command_line_get_cwd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_application_command_line_get_cwd(GApplicationCommandLine *cmdline)
     * }
     */
    public static MemorySegment g_application_command_line_get_cwd(MemorySegment cmdline) {
        var mh$ = g_application_command_line_get_cwd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_get_cwd", cmdline);
            }
            return (MemorySegment)mh$.invokeExact(cmdline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_get_is_remote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_get_is_remote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_application_command_line_get_is_remote(GApplicationCommandLine *cmdline)
     * }
     */
    public static FunctionDescriptor g_application_command_line_get_is_remote$descriptor() {
        return g_application_command_line_get_is_remote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_application_command_line_get_is_remote(GApplicationCommandLine *cmdline)
     * }
     */
    public static MethodHandle g_application_command_line_get_is_remote$handle() {
        return g_application_command_line_get_is_remote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_application_command_line_get_is_remote(GApplicationCommandLine *cmdline)
     * }
     */
    public static int g_application_command_line_get_is_remote(MemorySegment cmdline) {
        var mh$ = g_application_command_line_get_is_remote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_get_is_remote", cmdline);
            }
            return (int)mh$.invokeExact(cmdline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_application_command_line_print(GApplicationCommandLine *cmdline, const gchar *format, ...)
     * }
     */
    public static class g_application_command_line_print {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_application_command_line_print");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_application_command_line_print(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_application_command_line_print(GApplicationCommandLine *cmdline, const gchar *format, ...)
         * }
         */
        public static g_application_command_line_print makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_application_command_line_print(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment cmdline, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_application_command_line_print", cmdline, format, x2);
                }
                spreader.invokeExact(cmdline, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_application_command_line_printerr(GApplicationCommandLine *cmdline, const gchar *format, ...)
     * }
     */
    public static class g_application_command_line_printerr {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_application_command_line_printerr");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_application_command_line_printerr(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_application_command_line_printerr(GApplicationCommandLine *cmdline, const gchar *format, ...)
         * }
         */
        public static g_application_command_line_printerr makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_application_command_line_printerr(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment cmdline, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_application_command_line_printerr", cmdline, format, x2);
                }
                spreader.invokeExact(cmdline, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_application_command_line_get_exit_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_get_exit_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_application_command_line_get_exit_status(GApplicationCommandLine *cmdline)
     * }
     */
    public static FunctionDescriptor g_application_command_line_get_exit_status$descriptor() {
        return g_application_command_line_get_exit_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_application_command_line_get_exit_status(GApplicationCommandLine *cmdline)
     * }
     */
    public static MethodHandle g_application_command_line_get_exit_status$handle() {
        return g_application_command_line_get_exit_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_application_command_line_get_exit_status(GApplicationCommandLine *cmdline)
     * }
     */
    public static int g_application_command_line_get_exit_status(MemorySegment cmdline) {
        var mh$ = g_application_command_line_get_exit_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_get_exit_status", cmdline);
            }
            return (int)mh$.invokeExact(cmdline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_set_exit_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_set_exit_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_application_command_line_set_exit_status(GApplicationCommandLine *cmdline, int exit_status)
     * }
     */
    public static FunctionDescriptor g_application_command_line_set_exit_status$descriptor() {
        return g_application_command_line_set_exit_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_application_command_line_set_exit_status(GApplicationCommandLine *cmdline, int exit_status)
     * }
     */
    public static MethodHandle g_application_command_line_set_exit_status$handle() {
        return g_application_command_line_set_exit_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_application_command_line_set_exit_status(GApplicationCommandLine *cmdline, int exit_status)
     * }
     */
    public static void g_application_command_line_set_exit_status(MemorySegment cmdline, int exit_status) {
        var mh$ = g_application_command_line_set_exit_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_set_exit_status", cmdline, exit_status);
            }
            mh$.invokeExact(cmdline, exit_status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_get_platform_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_get_platform_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_application_command_line_get_platform_data(GApplicationCommandLine *cmdline)
     * }
     */
    public static FunctionDescriptor g_application_command_line_get_platform_data$descriptor() {
        return g_application_command_line_get_platform_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_application_command_line_get_platform_data(GApplicationCommandLine *cmdline)
     * }
     */
    public static MethodHandle g_application_command_line_get_platform_data$handle() {
        return g_application_command_line_get_platform_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_application_command_line_get_platform_data(GApplicationCommandLine *cmdline)
     * }
     */
    public static MemorySegment g_application_command_line_get_platform_data(MemorySegment cmdline) {
        var mh$ = g_application_command_line_get_platform_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_get_platform_data", cmdline);
            }
            return (MemorySegment)mh$.invokeExact(cmdline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_application_command_line_create_file_for_arg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_application_command_line_create_file_for_arg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_application_command_line_create_file_for_arg(GApplicationCommandLine *cmdline, const gchar *arg)
     * }
     */
    public static FunctionDescriptor g_application_command_line_create_file_for_arg$descriptor() {
        return g_application_command_line_create_file_for_arg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_application_command_line_create_file_for_arg(GApplicationCommandLine *cmdline, const gchar *arg)
     * }
     */
    public static MethodHandle g_application_command_line_create_file_for_arg$handle() {
        return g_application_command_line_create_file_for_arg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_application_command_line_create_file_for_arg(GApplicationCommandLine *cmdline, const gchar *arg)
     * }
     */
    public static MemorySegment g_application_command_line_create_file_for_arg(MemorySegment cmdline, MemorySegment arg) {
        var mh$ = g_application_command_line_create_file_for_arg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_application_command_line_create_file_for_arg", cmdline, arg);
            }
            return (MemorySegment)mh$.invokeExact(cmdline, arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_initable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_initable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_initable_get_type()
     * }
     */
    public static FunctionDescriptor g_initable_get_type$descriptor() {
        return g_initable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_initable_get_type()
     * }
     */
    public static MethodHandle g_initable_get_type$handle() {
        return g_initable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_initable_get_type()
     * }
     */
    public static long g_initable_get_type() {
        var mh$ = g_initable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_initable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_initable_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_initable_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_initable_init(GInitable *initable, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_initable_init$descriptor() {
        return g_initable_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_initable_init(GInitable *initable, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_initable_init$handle() {
        return g_initable_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_initable_init(GInitable *initable, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_initable_init(MemorySegment initable, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_initable_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_initable_init", initable, cancellable, error);
            }
            return (int)mh$.invokeExact(initable, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gpointer g_initable_new(GType object_type, GCancellable *cancellable, GError **error, const gchar *first_property_name, ...)
     * }
     */
    public static class g_initable_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_initable_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_initable_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gpointer g_initable_new(GType object_type, GCancellable *cancellable, GError **error, const gchar *first_property_name, ...)
         * }
         */
        public static g_initable_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_initable_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(long object_type, MemorySegment cancellable, MemorySegment error, MemorySegment first_property_name, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_initable_new", object_type, cancellable, error, first_property_name, x4);
                }
                return (MemorySegment)spreader.invokeExact(object_type, cancellable, error, first_property_name, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_initable_newv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_initable_newv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_initable_newv(GType object_type, guint n_parameters, GParameter *parameters, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_initable_newv$descriptor() {
        return g_initable_newv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_initable_newv(GType object_type, guint n_parameters, GParameter *parameters, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_initable_newv$handle() {
        return g_initable_newv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_initable_newv(GType object_type, guint n_parameters, GParameter *parameters, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_initable_newv(long object_type, int n_parameters, MemorySegment parameters, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_initable_newv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_initable_newv", object_type, n_parameters, parameters, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(object_type, n_parameters, parameters, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_initable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_initable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_async_initable_get_type()
     * }
     */
    public static FunctionDescriptor g_async_initable_get_type$descriptor() {
        return g_async_initable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_async_initable_get_type()
     * }
     */
    public static MethodHandle g_async_initable_get_type$handle() {
        return g_async_initable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_async_initable_get_type()
     * }
     */
    public static long g_async_initable_get_type() {
        var mh$ = g_async_initable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_initable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_initable_init_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_initable_init_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_initable_init_async(GAsyncInitable *initable, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_async_initable_init_async$descriptor() {
        return g_async_initable_init_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_initable_init_async(GAsyncInitable *initable, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_async_initable_init_async$handle() {
        return g_async_initable_init_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_initable_init_async(GAsyncInitable *initable, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_async_initable_init_async(MemorySegment initable, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_async_initable_init_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_initable_init_async", initable, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(initable, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_initable_init_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_initable_init_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_async_initable_init_finish(GAsyncInitable *initable, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_async_initable_init_finish$descriptor() {
        return g_async_initable_init_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_async_initable_init_finish(GAsyncInitable *initable, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_async_initable_init_finish$handle() {
        return g_async_initable_init_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_async_initable_init_finish(GAsyncInitable *initable, GAsyncResult *res, GError **error)
     * }
     */
    public static int g_async_initable_init_finish(MemorySegment initable, MemorySegment res, MemorySegment error) {
        var mh$ = g_async_initable_init_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_initable_init_finish", initable, res, error);
            }
            return (int)mh$.invokeExact(initable, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_async_initable_new_async(GType object_type, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data, const gchar *first_property_name, ...)
     * }
     */
    public static class g_async_initable_new_async {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_LONG,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_async_initable_new_async");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_async_initable_new_async(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_async_initable_new_async(GType object_type, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data, const gchar *first_property_name, ...)
         * }
         */
        public static g_async_initable_new_async makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_async_initable_new_async(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(long object_type, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data, MemorySegment first_property_name, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_async_initable_new_async", object_type, io_priority, cancellable, callback, user_data, first_property_name, x6);
                }
                spreader.invokeExact(object_type, io_priority, cancellable, callback, user_data, first_property_name, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_async_initable_newv_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_initable_newv_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_initable_newv_async(GType object_type, guint n_parameters, GParameter *parameters, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_async_initable_newv_async$descriptor() {
        return g_async_initable_newv_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_initable_newv_async(GType object_type, guint n_parameters, GParameter *parameters, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_async_initable_newv_async$handle() {
        return g_async_initable_newv_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_initable_newv_async(GType object_type, guint n_parameters, GParameter *parameters, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_async_initable_newv_async(long object_type, int n_parameters, MemorySegment parameters, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_async_initable_newv_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_initable_newv_async", object_type, n_parameters, parameters, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(object_type, n_parameters, parameters, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_initable_new_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_initable_new_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_async_initable_new_finish(GAsyncInitable *initable, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_async_initable_new_finish$descriptor() {
        return g_async_initable_new_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_async_initable_new_finish(GAsyncInitable *initable, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_async_initable_new_finish$handle() {
        return g_async_initable_new_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *g_async_initable_new_finish(GAsyncInitable *initable, GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_async_initable_new_finish(MemorySegment initable, MemorySegment res, MemorySegment error) {
        var mh$ = g_async_initable_new_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_initable_new_finish", initable, res, error);
            }
            return (MemorySegment)mh$.invokeExact(initable, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_result_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_result_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_async_result_get_type()
     * }
     */
    public static FunctionDescriptor g_async_result_get_type$descriptor() {
        return g_async_result_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_async_result_get_type()
     * }
     */
    public static MethodHandle g_async_result_get_type$handle() {
        return g_async_result_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_async_result_get_type()
     * }
     */
    public static long g_async_result_get_type() {
        var mh$ = g_async_result_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_result_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_result_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_result_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_async_result_get_user_data(GAsyncResult *res)
     * }
     */
    public static FunctionDescriptor g_async_result_get_user_data$descriptor() {
        return g_async_result_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_async_result_get_user_data(GAsyncResult *res)
     * }
     */
    public static MethodHandle g_async_result_get_user_data$handle() {
        return g_async_result_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_async_result_get_user_data(GAsyncResult *res)
     * }
     */
    public static MemorySegment g_async_result_get_user_data(MemorySegment res) {
        var mh$ = g_async_result_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_result_get_user_data", res);
            }
            return (MemorySegment)mh$.invokeExact(res);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_result_get_source_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_result_get_source_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_async_result_get_source_object(GAsyncResult *res)
     * }
     */
    public static FunctionDescriptor g_async_result_get_source_object$descriptor() {
        return g_async_result_get_source_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_async_result_get_source_object(GAsyncResult *res)
     * }
     */
    public static MethodHandle g_async_result_get_source_object$handle() {
        return g_async_result_get_source_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *g_async_result_get_source_object(GAsyncResult *res)
     * }
     */
    public static MemorySegment g_async_result_get_source_object(MemorySegment res) {
        var mh$ = g_async_result_get_source_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_result_get_source_object", res);
            }
            return (MemorySegment)mh$.invokeExact(res);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_result_legacy_propagate_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_result_legacy_propagate_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_async_result_legacy_propagate_error(GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_async_result_legacy_propagate_error$descriptor() {
        return g_async_result_legacy_propagate_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_async_result_legacy_propagate_error(GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_async_result_legacy_propagate_error$handle() {
        return g_async_result_legacy_propagate_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_async_result_legacy_propagate_error(GAsyncResult *res, GError **error)
     * }
     */
    public static int g_async_result_legacy_propagate_error(MemorySegment res, MemorySegment error) {
        var mh$ = g_async_result_legacy_propagate_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_result_legacy_propagate_error", res, error);
            }
            return (int)mh$.invokeExact(res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_result_is_tagged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_result_is_tagged"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_async_result_is_tagged(GAsyncResult *res, gpointer source_tag)
     * }
     */
    public static FunctionDescriptor g_async_result_is_tagged$descriptor() {
        return g_async_result_is_tagged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_async_result_is_tagged(GAsyncResult *res, gpointer source_tag)
     * }
     */
    public static MethodHandle g_async_result_is_tagged$handle() {
        return g_async_result_is_tagged.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_async_result_is_tagged(GAsyncResult *res, gpointer source_tag)
     * }
     */
    public static int g_async_result_is_tagged(MemorySegment res, MemorySegment source_tag) {
        var mh$ = g_async_result_is_tagged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_result_is_tagged", res, source_tag);
            }
            return (int)mh$.invokeExact(res, source_tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_input_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_input_stream_get_type$descriptor() {
        return g_input_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_input_stream_get_type()
     * }
     */
    public static MethodHandle g_input_stream_get_type$handle() {
        return g_input_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_input_stream_get_type()
     * }
     */
    public static long g_input_stream_get_type() {
        var mh$ = g_input_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_read"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_input_stream_read(GInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_read$descriptor() {
        return g_input_stream_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_input_stream_read(GInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_read$handle() {
        return g_input_stream_read.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_input_stream_read(GInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_input_stream_read(MemorySegment stream, MemorySegment buffer, long count, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_input_stream_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_read", stream, buffer, count, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, buffer, count, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_read_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_read_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_read_all(GInputStream *stream, void *buffer, gsize count, gsize *bytes_read, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_read_all$descriptor() {
        return g_input_stream_read_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_read_all(GInputStream *stream, void *buffer, gsize count, gsize *bytes_read, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_read_all$handle() {
        return g_input_stream_read_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_input_stream_read_all(GInputStream *stream, void *buffer, gsize count, gsize *bytes_read, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_input_stream_read_all(MemorySegment stream, MemorySegment buffer, long count, MemorySegment bytes_read, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_input_stream_read_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_read_all", stream, buffer, count, bytes_read, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, buffer, count, bytes_read, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_read_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_read_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_input_stream_read_bytes(GInputStream *stream, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_read_bytes$descriptor() {
        return g_input_stream_read_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_input_stream_read_bytes(GInputStream *stream, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_read_bytes$handle() {
        return g_input_stream_read_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_input_stream_read_bytes(GInputStream *stream, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_input_stream_read_bytes(MemorySegment stream, long count, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_input_stream_read_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_read_bytes", stream, count, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, count, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_skip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_skip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_input_stream_skip(GInputStream *stream, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_skip$descriptor() {
        return g_input_stream_skip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_input_stream_skip(GInputStream *stream, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_skip$handle() {
        return g_input_stream_skip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_input_stream_skip(GInputStream *stream, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_input_stream_skip(MemorySegment stream, long count, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_input_stream_skip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_skip", stream, count, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, count, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_close(GInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_close$descriptor() {
        return g_input_stream_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_close(GInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_close$handle() {
        return g_input_stream_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_input_stream_close(GInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_input_stream_close(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_input_stream_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_close", stream, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_read_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_read_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_input_stream_read_async(GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_input_stream_read_async$descriptor() {
        return g_input_stream_read_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_input_stream_read_async(GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_input_stream_read_async$handle() {
        return g_input_stream_read_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_input_stream_read_async(GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_input_stream_read_async(MemorySegment stream, MemorySegment buffer, long count, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_input_stream_read_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_read_async", stream, buffer, count, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, buffer, count, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_read_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_read_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_input_stream_read_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_read_finish$descriptor() {
        return g_input_stream_read_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_input_stream_read_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_read_finish$handle() {
        return g_input_stream_read_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_input_stream_read_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static long g_input_stream_read_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_input_stream_read_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_read_finish", stream, result, error);
            }
            return (long)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_read_all_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_read_all_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_input_stream_read_all_async(GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_input_stream_read_all_async$descriptor() {
        return g_input_stream_read_all_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_input_stream_read_all_async(GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_input_stream_read_all_async$handle() {
        return g_input_stream_read_all_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_input_stream_read_all_async(GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_input_stream_read_all_async(MemorySegment stream, MemorySegment buffer, long count, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_input_stream_read_all_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_read_all_async", stream, buffer, count, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, buffer, count, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_read_all_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_read_all_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_read_all_finish(GInputStream *stream, GAsyncResult *result, gsize *bytes_read, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_read_all_finish$descriptor() {
        return g_input_stream_read_all_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_read_all_finish(GInputStream *stream, GAsyncResult *result, gsize *bytes_read, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_read_all_finish$handle() {
        return g_input_stream_read_all_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_input_stream_read_all_finish(GInputStream *stream, GAsyncResult *result, gsize *bytes_read, GError **error)
     * }
     */
    public static int g_input_stream_read_all_finish(MemorySegment stream, MemorySegment result, MemorySegment bytes_read, MemorySegment error) {
        var mh$ = g_input_stream_read_all_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_read_all_finish", stream, result, bytes_read, error);
            }
            return (int)mh$.invokeExact(stream, result, bytes_read, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_read_bytes_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_read_bytes_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_input_stream_read_bytes_async(GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_input_stream_read_bytes_async$descriptor() {
        return g_input_stream_read_bytes_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_input_stream_read_bytes_async(GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_input_stream_read_bytes_async$handle() {
        return g_input_stream_read_bytes_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_input_stream_read_bytes_async(GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_input_stream_read_bytes_async(MemorySegment stream, long count, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_input_stream_read_bytes_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_read_bytes_async", stream, count, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, count, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_read_bytes_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_read_bytes_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_input_stream_read_bytes_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_read_bytes_finish$descriptor() {
        return g_input_stream_read_bytes_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_input_stream_read_bytes_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_read_bytes_finish$handle() {
        return g_input_stream_read_bytes_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_input_stream_read_bytes_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_input_stream_read_bytes_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_input_stream_read_bytes_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_read_bytes_finish", stream, result, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_skip_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_skip_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_input_stream_skip_async(GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_input_stream_skip_async$descriptor() {
        return g_input_stream_skip_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_input_stream_skip_async(GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_input_stream_skip_async$handle() {
        return g_input_stream_skip_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_input_stream_skip_async(GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_input_stream_skip_async(MemorySegment stream, long count, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_input_stream_skip_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_skip_async", stream, count, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, count, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_skip_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_skip_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_input_stream_skip_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_skip_finish$descriptor() {
        return g_input_stream_skip_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_input_stream_skip_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_skip_finish$handle() {
        return g_input_stream_skip_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_input_stream_skip_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static long g_input_stream_skip_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_input_stream_skip_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_skip_finish", stream, result, error);
            }
            return (long)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_close_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_close_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_input_stream_close_async(GInputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_input_stream_close_async$descriptor() {
        return g_input_stream_close_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_input_stream_close_async(GInputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_input_stream_close_async$handle() {
        return g_input_stream_close_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_input_stream_close_async(GInputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_input_stream_close_async(MemorySegment stream, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_input_stream_close_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_close_async", stream, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_close_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_close_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_close_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_close_finish$descriptor() {
        return g_input_stream_close_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_close_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_close_finish$handle() {
        return g_input_stream_close_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_input_stream_close_finish(GInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_input_stream_close_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_input_stream_close_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_close_finish", stream, result, error);
            }
            return (int)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_is_closed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_is_closed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_is_closed(GInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_input_stream_is_closed$descriptor() {
        return g_input_stream_is_closed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_is_closed(GInputStream *stream)
     * }
     */
    public static MethodHandle g_input_stream_is_closed$handle() {
        return g_input_stream_is_closed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_input_stream_is_closed(GInputStream *stream)
     * }
     */
    public static int g_input_stream_is_closed(MemorySegment stream) {
        var mh$ = g_input_stream_is_closed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_is_closed", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_has_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_has_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_has_pending(GInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_input_stream_has_pending$descriptor() {
        return g_input_stream_has_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_has_pending(GInputStream *stream)
     * }
     */
    public static MethodHandle g_input_stream_has_pending$handle() {
        return g_input_stream_has_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_input_stream_has_pending(GInputStream *stream)
     * }
     */
    public static int g_input_stream_has_pending(MemorySegment stream) {
        var mh$ = g_input_stream_has_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_has_pending", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_set_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_set_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_set_pending(GInputStream *stream, GError **error)
     * }
     */
    public static FunctionDescriptor g_input_stream_set_pending$descriptor() {
        return g_input_stream_set_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_input_stream_set_pending(GInputStream *stream, GError **error)
     * }
     */
    public static MethodHandle g_input_stream_set_pending$handle() {
        return g_input_stream_set_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_input_stream_set_pending(GInputStream *stream, GError **error)
     * }
     */
    public static int g_input_stream_set_pending(MemorySegment stream, MemorySegment error) {
        var mh$ = g_input_stream_set_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_set_pending", stream, error);
            }
            return (int)mh$.invokeExact(stream, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_input_stream_clear_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_input_stream_clear_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_input_stream_clear_pending(GInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_input_stream_clear_pending$descriptor() {
        return g_input_stream_clear_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_input_stream_clear_pending(GInputStream *stream)
     * }
     */
    public static MethodHandle g_input_stream_clear_pending$handle() {
        return g_input_stream_clear_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_input_stream_clear_pending(GInputStream *stream)
     * }
     */
    public static void g_input_stream_clear_pending(MemorySegment stream) {
        var mh$ = g_input_stream_clear_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_input_stream_clear_pending", stream);
            }
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filter_input_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filter_input_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_filter_input_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_filter_input_stream_get_type$descriptor() {
        return g_filter_input_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_filter_input_stream_get_type()
     * }
     */
    public static MethodHandle g_filter_input_stream_get_type$handle() {
        return g_filter_input_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_filter_input_stream_get_type()
     * }
     */
    public static long g_filter_input_stream_get_type() {
        var mh$ = g_filter_input_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filter_input_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filter_input_stream_get_base_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filter_input_stream_get_base_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_filter_input_stream_get_base_stream(GFilterInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_filter_input_stream_get_base_stream$descriptor() {
        return g_filter_input_stream_get_base_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_filter_input_stream_get_base_stream(GFilterInputStream *stream)
     * }
     */
    public static MethodHandle g_filter_input_stream_get_base_stream$handle() {
        return g_filter_input_stream_get_base_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_filter_input_stream_get_base_stream(GFilterInputStream *stream)
     * }
     */
    public static MemorySegment g_filter_input_stream_get_base_stream(MemorySegment stream) {
        var mh$ = g_filter_input_stream_get_base_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filter_input_stream_get_base_stream", stream);
            }
            return (MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filter_input_stream_get_close_base_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filter_input_stream_get_close_base_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_filter_input_stream_get_close_base_stream(GFilterInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_filter_input_stream_get_close_base_stream$descriptor() {
        return g_filter_input_stream_get_close_base_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_filter_input_stream_get_close_base_stream(GFilterInputStream *stream)
     * }
     */
    public static MethodHandle g_filter_input_stream_get_close_base_stream$handle() {
        return g_filter_input_stream_get_close_base_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_filter_input_stream_get_close_base_stream(GFilterInputStream *stream)
     * }
     */
    public static int g_filter_input_stream_get_close_base_stream(MemorySegment stream) {
        var mh$ = g_filter_input_stream_get_close_base_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filter_input_stream_get_close_base_stream", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filter_input_stream_set_close_base_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filter_input_stream_set_close_base_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_filter_input_stream_set_close_base_stream(GFilterInputStream *stream, gboolean close_base)
     * }
     */
    public static FunctionDescriptor g_filter_input_stream_set_close_base_stream$descriptor() {
        return g_filter_input_stream_set_close_base_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_filter_input_stream_set_close_base_stream(GFilterInputStream *stream, gboolean close_base)
     * }
     */
    public static MethodHandle g_filter_input_stream_set_close_base_stream$handle() {
        return g_filter_input_stream_set_close_base_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_filter_input_stream_set_close_base_stream(GFilterInputStream *stream, gboolean close_base)
     * }
     */
    public static void g_filter_input_stream_set_close_base_stream(MemorySegment stream, int close_base) {
        var mh$ = g_filter_input_stream_set_close_base_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filter_input_stream_set_close_base_stream", stream, close_base);
            }
            mh$.invokeExact(stream, close_base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_buffered_input_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_get_type$descriptor() {
        return g_buffered_input_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_buffered_input_stream_get_type()
     * }
     */
    public static MethodHandle g_buffered_input_stream_get_type$handle() {
        return g_buffered_input_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_buffered_input_stream_get_type()
     * }
     */
    public static long g_buffered_input_stream_get_type() {
        var mh$ = g_buffered_input_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_buffered_input_stream_new(GInputStream *base_stream)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_new$descriptor() {
        return g_buffered_input_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_buffered_input_stream_new(GInputStream *base_stream)
     * }
     */
    public static MethodHandle g_buffered_input_stream_new$handle() {
        return g_buffered_input_stream_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_buffered_input_stream_new(GInputStream *base_stream)
     * }
     */
    public static MemorySegment g_buffered_input_stream_new(MemorySegment base_stream) {
        var mh$ = g_buffered_input_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_new", base_stream);
            }
            return (MemorySegment)mh$.invokeExact(base_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_new_sized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_new_sized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_buffered_input_stream_new_sized(GInputStream *base_stream, gsize size)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_new_sized$descriptor() {
        return g_buffered_input_stream_new_sized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_buffered_input_stream_new_sized(GInputStream *base_stream, gsize size)
     * }
     */
    public static MethodHandle g_buffered_input_stream_new_sized$handle() {
        return g_buffered_input_stream_new_sized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_buffered_input_stream_new_sized(GInputStream *base_stream, gsize size)
     * }
     */
    public static MemorySegment g_buffered_input_stream_new_sized(MemorySegment base_stream, long size) {
        var mh$ = g_buffered_input_stream_new_sized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_new_sized", base_stream, size);
            }
            return (MemorySegment)mh$.invokeExact(base_stream, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_get_buffer_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_get_buffer_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_buffered_input_stream_get_buffer_size(GBufferedInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_get_buffer_size$descriptor() {
        return g_buffered_input_stream_get_buffer_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_buffered_input_stream_get_buffer_size(GBufferedInputStream *stream)
     * }
     */
    public static MethodHandle g_buffered_input_stream_get_buffer_size$handle() {
        return g_buffered_input_stream_get_buffer_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_buffered_input_stream_get_buffer_size(GBufferedInputStream *stream)
     * }
     */
    public static long g_buffered_input_stream_get_buffer_size(MemorySegment stream) {
        var mh$ = g_buffered_input_stream_get_buffer_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_get_buffer_size", stream);
            }
            return (long)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_set_buffer_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_set_buffer_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_buffered_input_stream_set_buffer_size(GBufferedInputStream *stream, gsize size)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_set_buffer_size$descriptor() {
        return g_buffered_input_stream_set_buffer_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_buffered_input_stream_set_buffer_size(GBufferedInputStream *stream, gsize size)
     * }
     */
    public static MethodHandle g_buffered_input_stream_set_buffer_size$handle() {
        return g_buffered_input_stream_set_buffer_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_buffered_input_stream_set_buffer_size(GBufferedInputStream *stream, gsize size)
     * }
     */
    public static void g_buffered_input_stream_set_buffer_size(MemorySegment stream, long size) {
        var mh$ = g_buffered_input_stream_set_buffer_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_set_buffer_size", stream, size);
            }
            mh$.invokeExact(stream, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_get_available {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_get_available"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_buffered_input_stream_get_available(GBufferedInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_get_available$descriptor() {
        return g_buffered_input_stream_get_available.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_buffered_input_stream_get_available(GBufferedInputStream *stream)
     * }
     */
    public static MethodHandle g_buffered_input_stream_get_available$handle() {
        return g_buffered_input_stream_get_available.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_buffered_input_stream_get_available(GBufferedInputStream *stream)
     * }
     */
    public static long g_buffered_input_stream_get_available(MemorySegment stream) {
        var mh$ = g_buffered_input_stream_get_available.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_get_available", stream);
            }
            return (long)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_peek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_buffered_input_stream_peek(GBufferedInputStream *stream, void *buffer, gsize offset, gsize count)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_peek$descriptor() {
        return g_buffered_input_stream_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_buffered_input_stream_peek(GBufferedInputStream *stream, void *buffer, gsize offset, gsize count)
     * }
     */
    public static MethodHandle g_buffered_input_stream_peek$handle() {
        return g_buffered_input_stream_peek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_buffered_input_stream_peek(GBufferedInputStream *stream, void *buffer, gsize offset, gsize count)
     * }
     */
    public static long g_buffered_input_stream_peek(MemorySegment stream, MemorySegment buffer, long offset, long count) {
        var mh$ = g_buffered_input_stream_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_peek", stream, buffer, offset, count);
            }
            return (long)mh$.invokeExact(stream, buffer, offset, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_peek_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_peek_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const void *g_buffered_input_stream_peek_buffer(GBufferedInputStream *stream, gsize *count)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_peek_buffer$descriptor() {
        return g_buffered_input_stream_peek_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const void *g_buffered_input_stream_peek_buffer(GBufferedInputStream *stream, gsize *count)
     * }
     */
    public static MethodHandle g_buffered_input_stream_peek_buffer$handle() {
        return g_buffered_input_stream_peek_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const void *g_buffered_input_stream_peek_buffer(GBufferedInputStream *stream, gsize *count)
     * }
     */
    public static MemorySegment g_buffered_input_stream_peek_buffer(MemorySegment stream, MemorySegment count) {
        var mh$ = g_buffered_input_stream_peek_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_peek_buffer", stream, count);
            }
            return (MemorySegment)mh$.invokeExact(stream, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_fill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_fill"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_buffered_input_stream_fill(GBufferedInputStream *stream, gssize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_fill$descriptor() {
        return g_buffered_input_stream_fill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_buffered_input_stream_fill(GBufferedInputStream *stream, gssize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_buffered_input_stream_fill$handle() {
        return g_buffered_input_stream_fill.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_buffered_input_stream_fill(GBufferedInputStream *stream, gssize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_buffered_input_stream_fill(MemorySegment stream, long count, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_buffered_input_stream_fill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_fill", stream, count, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, count, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_fill_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_fill_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_buffered_input_stream_fill_async(GBufferedInputStream *stream, gssize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_fill_async$descriptor() {
        return g_buffered_input_stream_fill_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_buffered_input_stream_fill_async(GBufferedInputStream *stream, gssize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_buffered_input_stream_fill_async$handle() {
        return g_buffered_input_stream_fill_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_buffered_input_stream_fill_async(GBufferedInputStream *stream, gssize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_buffered_input_stream_fill_async(MemorySegment stream, long count, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_buffered_input_stream_fill_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_fill_async", stream, count, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, count, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_fill_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_fill_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_buffered_input_stream_fill_finish(GBufferedInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_fill_finish$descriptor() {
        return g_buffered_input_stream_fill_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_buffered_input_stream_fill_finish(GBufferedInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_buffered_input_stream_fill_finish$handle() {
        return g_buffered_input_stream_fill_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_buffered_input_stream_fill_finish(GBufferedInputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static long g_buffered_input_stream_fill_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_buffered_input_stream_fill_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_fill_finish", stream, result, error);
            }
            return (long)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_input_stream_read_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_input_stream_read_byte"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_buffered_input_stream_read_byte(GBufferedInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_buffered_input_stream_read_byte$descriptor() {
        return g_buffered_input_stream_read_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_buffered_input_stream_read_byte(GBufferedInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_buffered_input_stream_read_byte$handle() {
        return g_buffered_input_stream_read_byte.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_buffered_input_stream_read_byte(GBufferedInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_buffered_input_stream_read_byte(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_buffered_input_stream_read_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_input_stream_read_byte", stream, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_output_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_output_stream_get_type$descriptor() {
        return g_output_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_output_stream_get_type()
     * }
     */
    public static MethodHandle g_output_stream_get_type$handle() {
        return g_output_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_output_stream_get_type()
     * }
     */
    public static long g_output_stream_get_type() {
        var mh$ = g_output_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_write"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_write(GOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_write$descriptor() {
        return g_output_stream_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_write(GOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_write$handle() {
        return g_output_stream_write.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_output_stream_write(GOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_output_stream_write(MemorySegment stream, MemorySegment buffer, long count, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_output_stream_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_write", stream, buffer, count, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, buffer, count, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_write_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_write_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_write_all(GOutputStream *stream, const void *buffer, gsize count, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_write_all$descriptor() {
        return g_output_stream_write_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_write_all(GOutputStream *stream, const void *buffer, gsize count, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_write_all$handle() {
        return g_output_stream_write_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_write_all(GOutputStream *stream, const void *buffer, gsize count, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_output_stream_write_all(MemorySegment stream, MemorySegment buffer, long count, MemorySegment bytes_written, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_output_stream_write_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_write_all", stream, buffer, count, bytes_written, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, buffer, count, bytes_written, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_writev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_writev"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev(GOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_writev$descriptor() {
        return g_output_stream_writev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev(GOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_writev$handle() {
        return g_output_stream_writev.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev(GOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_output_stream_writev(MemorySegment stream, MemorySegment vectors, long n_vectors, MemorySegment bytes_written, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_output_stream_writev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_writev", stream, vectors, n_vectors, bytes_written, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, vectors, n_vectors, bytes_written, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_writev_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_writev_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev_all(GOutputStream *stream, GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_writev_all$descriptor() {
        return g_output_stream_writev_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev_all(GOutputStream *stream, GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_writev_all$handle() {
        return g_output_stream_writev_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev_all(GOutputStream *stream, GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_output_stream_writev_all(MemorySegment stream, MemorySegment vectors, long n_vectors, MemorySegment bytes_written, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_output_stream_writev_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_writev_all", stream, vectors, n_vectors, bytes_written, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, vectors, n_vectors, bytes_written, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_printf(GOutputStream *stream, gsize *bytes_written, GCancellable *cancellable, GError **error, const gchar *format, ...)
     * }
     */
    public static class g_output_stream_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_output_stream_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_output_stream_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean g_output_stream_printf(GOutputStream *stream, gsize *bytes_written, GCancellable *cancellable, GError **error, const gchar *format, ...)
         * }
         */
        public static g_output_stream_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_output_stream_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment stream, MemorySegment bytes_written, MemorySegment cancellable, MemorySegment error, MemorySegment format, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_output_stream_printf", stream, bytes_written, cancellable, error, format, x5);
                }
                return (int)spreader.invokeExact(stream, bytes_written, cancellable, error, format, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_output_stream_write_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_write_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_write_bytes(GOutputStream *stream, GBytes *bytes, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_write_bytes$descriptor() {
        return g_output_stream_write_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_write_bytes(GOutputStream *stream, GBytes *bytes, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_write_bytes$handle() {
        return g_output_stream_write_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_output_stream_write_bytes(GOutputStream *stream, GBytes *bytes, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_output_stream_write_bytes(MemorySegment stream, MemorySegment bytes, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_output_stream_write_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_write_bytes", stream, bytes, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, bytes, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_splice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_splice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_splice(GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_splice$descriptor() {
        return g_output_stream_splice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_splice(GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_splice$handle() {
        return g_output_stream_splice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_output_stream_splice(GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_output_stream_splice(MemorySegment stream, MemorySegment source, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_output_stream_splice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_splice", stream, source, flags, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, source, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_flush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_flush(GOutputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_flush$descriptor() {
        return g_output_stream_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_flush(GOutputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_flush$handle() {
        return g_output_stream_flush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_flush(GOutputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_output_stream_flush(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_output_stream_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_flush", stream, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_close(GOutputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_close$descriptor() {
        return g_output_stream_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_close(GOutputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_close$handle() {
        return g_output_stream_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_close(GOutputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_output_stream_close(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_output_stream_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_close", stream, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_write_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_write_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_output_stream_write_async(GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_output_stream_write_async$descriptor() {
        return g_output_stream_write_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_output_stream_write_async(GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_output_stream_write_async$handle() {
        return g_output_stream_write_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_output_stream_write_async(GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_output_stream_write_async(MemorySegment stream, MemorySegment buffer, long count, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_output_stream_write_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_write_async", stream, buffer, count, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, buffer, count, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_write_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_write_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_write_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_write_finish$descriptor() {
        return g_output_stream_write_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_write_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_write_finish$handle() {
        return g_output_stream_write_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_output_stream_write_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static long g_output_stream_write_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_output_stream_write_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_write_finish", stream, result, error);
            }
            return (long)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_write_all_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_write_all_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_output_stream_write_all_async(GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_output_stream_write_all_async$descriptor() {
        return g_output_stream_write_all_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_output_stream_write_all_async(GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_output_stream_write_all_async$handle() {
        return g_output_stream_write_all_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_output_stream_write_all_async(GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_output_stream_write_all_async(MemorySegment stream, MemorySegment buffer, long count, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_output_stream_write_all_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_write_all_async", stream, buffer, count, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, buffer, count, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_write_all_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_write_all_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_write_all_finish(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_write_all_finish$descriptor() {
        return g_output_stream_write_all_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_write_all_finish(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_write_all_finish$handle() {
        return g_output_stream_write_all_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_write_all_finish(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error)
     * }
     */
    public static int g_output_stream_write_all_finish(MemorySegment stream, MemorySegment result, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_output_stream_write_all_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_write_all_finish", stream, result, bytes_written, error);
            }
            return (int)mh$.invokeExact(stream, result, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_writev_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_writev_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_output_stream_writev_async(GOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_output_stream_writev_async$descriptor() {
        return g_output_stream_writev_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_output_stream_writev_async(GOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_output_stream_writev_async$handle() {
        return g_output_stream_writev_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_output_stream_writev_async(GOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_output_stream_writev_async(MemorySegment stream, MemorySegment vectors, long n_vectors, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_output_stream_writev_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_writev_async", stream, vectors, n_vectors, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, vectors, n_vectors, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_writev_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_writev_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev_finish(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_writev_finish$descriptor() {
        return g_output_stream_writev_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev_finish(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_writev_finish$handle() {
        return g_output_stream_writev_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev_finish(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error)
     * }
     */
    public static int g_output_stream_writev_finish(MemorySegment stream, MemorySegment result, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_output_stream_writev_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_writev_finish", stream, result, bytes_written, error);
            }
            return (int)mh$.invokeExact(stream, result, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_writev_all_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_writev_all_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_output_stream_writev_all_async(GOutputStream *stream, GOutputVector *vectors, gsize n_vectors, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_output_stream_writev_all_async$descriptor() {
        return g_output_stream_writev_all_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_output_stream_writev_all_async(GOutputStream *stream, GOutputVector *vectors, gsize n_vectors, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_output_stream_writev_all_async$handle() {
        return g_output_stream_writev_all_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_output_stream_writev_all_async(GOutputStream *stream, GOutputVector *vectors, gsize n_vectors, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_output_stream_writev_all_async(MemorySegment stream, MemorySegment vectors, long n_vectors, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_output_stream_writev_all_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_writev_all_async", stream, vectors, n_vectors, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, vectors, n_vectors, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_writev_all_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_writev_all_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev_all_finish(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_writev_all_finish$descriptor() {
        return g_output_stream_writev_all_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev_all_finish(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_writev_all_finish$handle() {
        return g_output_stream_writev_all_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_writev_all_finish(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error)
     * }
     */
    public static int g_output_stream_writev_all_finish(MemorySegment stream, MemorySegment result, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_output_stream_writev_all_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_writev_all_finish", stream, result, bytes_written, error);
            }
            return (int)mh$.invokeExact(stream, result, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_write_bytes_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_write_bytes_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_output_stream_write_bytes_async(GOutputStream *stream, GBytes *bytes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_output_stream_write_bytes_async$descriptor() {
        return g_output_stream_write_bytes_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_output_stream_write_bytes_async(GOutputStream *stream, GBytes *bytes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_output_stream_write_bytes_async$handle() {
        return g_output_stream_write_bytes_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_output_stream_write_bytes_async(GOutputStream *stream, GBytes *bytes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_output_stream_write_bytes_async(MemorySegment stream, MemorySegment bytes, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_output_stream_write_bytes_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_write_bytes_async", stream, bytes, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, bytes, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_write_bytes_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_write_bytes_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_write_bytes_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_write_bytes_finish$descriptor() {
        return g_output_stream_write_bytes_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_write_bytes_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_write_bytes_finish$handle() {
        return g_output_stream_write_bytes_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_output_stream_write_bytes_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static long g_output_stream_write_bytes_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_output_stream_write_bytes_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_write_bytes_finish", stream, result, error);
            }
            return (long)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_splice_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_splice_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_output_stream_splice_async(GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_output_stream_splice_async$descriptor() {
        return g_output_stream_splice_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_output_stream_splice_async(GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_output_stream_splice_async$handle() {
        return g_output_stream_splice_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_output_stream_splice_async(GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_output_stream_splice_async(MemorySegment stream, MemorySegment source, int flags, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_output_stream_splice_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_splice_async", stream, source, flags, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, source, flags, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_splice_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_splice_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_splice_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_splice_finish$descriptor() {
        return g_output_stream_splice_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_output_stream_splice_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_splice_finish$handle() {
        return g_output_stream_splice_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_output_stream_splice_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static long g_output_stream_splice_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_output_stream_splice_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_splice_finish", stream, result, error);
            }
            return (long)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_flush_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_flush_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_output_stream_flush_async(GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_output_stream_flush_async$descriptor() {
        return g_output_stream_flush_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_output_stream_flush_async(GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_output_stream_flush_async$handle() {
        return g_output_stream_flush_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_output_stream_flush_async(GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_output_stream_flush_async(MemorySegment stream, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_output_stream_flush_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_flush_async", stream, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_flush_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_flush_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_flush_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_flush_finish$descriptor() {
        return g_output_stream_flush_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_flush_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_flush_finish$handle() {
        return g_output_stream_flush_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_flush_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_output_stream_flush_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_output_stream_flush_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_flush_finish", stream, result, error);
            }
            return (int)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_close_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_close_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_output_stream_close_async(GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_output_stream_close_async$descriptor() {
        return g_output_stream_close_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_output_stream_close_async(GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_output_stream_close_async$handle() {
        return g_output_stream_close_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_output_stream_close_async(GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_output_stream_close_async(MemorySegment stream, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_output_stream_close_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_close_async", stream, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_close_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_close_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_close_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_close_finish$descriptor() {
        return g_output_stream_close_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_close_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_close_finish$handle() {
        return g_output_stream_close_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_close_finish(GOutputStream *stream, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_output_stream_close_finish(MemorySegment stream, MemorySegment result, MemorySegment error) {
        var mh$ = g_output_stream_close_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_close_finish", stream, result, error);
            }
            return (int)mh$.invokeExact(stream, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_is_closed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_is_closed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_is_closed(GOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_output_stream_is_closed$descriptor() {
        return g_output_stream_is_closed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_is_closed(GOutputStream *stream)
     * }
     */
    public static MethodHandle g_output_stream_is_closed$handle() {
        return g_output_stream_is_closed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_is_closed(GOutputStream *stream)
     * }
     */
    public static int g_output_stream_is_closed(MemorySegment stream) {
        var mh$ = g_output_stream_is_closed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_is_closed", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_is_closing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_is_closing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_is_closing(GOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_output_stream_is_closing$descriptor() {
        return g_output_stream_is_closing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_is_closing(GOutputStream *stream)
     * }
     */
    public static MethodHandle g_output_stream_is_closing$handle() {
        return g_output_stream_is_closing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_is_closing(GOutputStream *stream)
     * }
     */
    public static int g_output_stream_is_closing(MemorySegment stream) {
        var mh$ = g_output_stream_is_closing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_is_closing", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_has_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_has_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_has_pending(GOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_output_stream_has_pending$descriptor() {
        return g_output_stream_has_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_has_pending(GOutputStream *stream)
     * }
     */
    public static MethodHandle g_output_stream_has_pending$handle() {
        return g_output_stream_has_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_has_pending(GOutputStream *stream)
     * }
     */
    public static int g_output_stream_has_pending(MemorySegment stream) {
        var mh$ = g_output_stream_has_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_has_pending", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_set_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_set_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_set_pending(GOutputStream *stream, GError **error)
     * }
     */
    public static FunctionDescriptor g_output_stream_set_pending$descriptor() {
        return g_output_stream_set_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_output_stream_set_pending(GOutputStream *stream, GError **error)
     * }
     */
    public static MethodHandle g_output_stream_set_pending$handle() {
        return g_output_stream_set_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_output_stream_set_pending(GOutputStream *stream, GError **error)
     * }
     */
    public static int g_output_stream_set_pending(MemorySegment stream, MemorySegment error) {
        var mh$ = g_output_stream_set_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_set_pending", stream, error);
            }
            return (int)mh$.invokeExact(stream, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_output_stream_clear_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_output_stream_clear_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_output_stream_clear_pending(GOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_output_stream_clear_pending$descriptor() {
        return g_output_stream_clear_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_output_stream_clear_pending(GOutputStream *stream)
     * }
     */
    public static MethodHandle g_output_stream_clear_pending$handle() {
        return g_output_stream_clear_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_output_stream_clear_pending(GOutputStream *stream)
     * }
     */
    public static void g_output_stream_clear_pending(MemorySegment stream) {
        var mh$ = g_output_stream_clear_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_output_stream_clear_pending", stream);
            }
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filter_output_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filter_output_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_filter_output_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_filter_output_stream_get_type$descriptor() {
        return g_filter_output_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_filter_output_stream_get_type()
     * }
     */
    public static MethodHandle g_filter_output_stream_get_type$handle() {
        return g_filter_output_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_filter_output_stream_get_type()
     * }
     */
    public static long g_filter_output_stream_get_type() {
        var mh$ = g_filter_output_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filter_output_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filter_output_stream_get_base_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filter_output_stream_get_base_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOutputStream *g_filter_output_stream_get_base_stream(GFilterOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_filter_output_stream_get_base_stream$descriptor() {
        return g_filter_output_stream_get_base_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOutputStream *g_filter_output_stream_get_base_stream(GFilterOutputStream *stream)
     * }
     */
    public static MethodHandle g_filter_output_stream_get_base_stream$handle() {
        return g_filter_output_stream_get_base_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOutputStream *g_filter_output_stream_get_base_stream(GFilterOutputStream *stream)
     * }
     */
    public static MemorySegment g_filter_output_stream_get_base_stream(MemorySegment stream) {
        var mh$ = g_filter_output_stream_get_base_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filter_output_stream_get_base_stream", stream);
            }
            return (MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filter_output_stream_get_close_base_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filter_output_stream_get_close_base_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_filter_output_stream_get_close_base_stream(GFilterOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_filter_output_stream_get_close_base_stream$descriptor() {
        return g_filter_output_stream_get_close_base_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_filter_output_stream_get_close_base_stream(GFilterOutputStream *stream)
     * }
     */
    public static MethodHandle g_filter_output_stream_get_close_base_stream$handle() {
        return g_filter_output_stream_get_close_base_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_filter_output_stream_get_close_base_stream(GFilterOutputStream *stream)
     * }
     */
    public static int g_filter_output_stream_get_close_base_stream(MemorySegment stream) {
        var mh$ = g_filter_output_stream_get_close_base_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filter_output_stream_get_close_base_stream", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filter_output_stream_set_close_base_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filter_output_stream_set_close_base_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_filter_output_stream_set_close_base_stream(GFilterOutputStream *stream, gboolean close_base)
     * }
     */
    public static FunctionDescriptor g_filter_output_stream_set_close_base_stream$descriptor() {
        return g_filter_output_stream_set_close_base_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_filter_output_stream_set_close_base_stream(GFilterOutputStream *stream, gboolean close_base)
     * }
     */
    public static MethodHandle g_filter_output_stream_set_close_base_stream$handle() {
        return g_filter_output_stream_set_close_base_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_filter_output_stream_set_close_base_stream(GFilterOutputStream *stream, gboolean close_base)
     * }
     */
    public static void g_filter_output_stream_set_close_base_stream(MemorySegment stream, int close_base) {
        var mh$ = g_filter_output_stream_set_close_base_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filter_output_stream_set_close_base_stream", stream, close_base);
            }
            mh$.invokeExact(stream, close_base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_output_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_output_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_buffered_output_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_buffered_output_stream_get_type$descriptor() {
        return g_buffered_output_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_buffered_output_stream_get_type()
     * }
     */
    public static MethodHandle g_buffered_output_stream_get_type$handle() {
        return g_buffered_output_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_buffered_output_stream_get_type()
     * }
     */
    public static long g_buffered_output_stream_get_type() {
        var mh$ = g_buffered_output_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_output_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_output_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_output_stream_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOutputStream *g_buffered_output_stream_new(GOutputStream *base_stream)
     * }
     */
    public static FunctionDescriptor g_buffered_output_stream_new$descriptor() {
        return g_buffered_output_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOutputStream *g_buffered_output_stream_new(GOutputStream *base_stream)
     * }
     */
    public static MethodHandle g_buffered_output_stream_new$handle() {
        return g_buffered_output_stream_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOutputStream *g_buffered_output_stream_new(GOutputStream *base_stream)
     * }
     */
    public static MemorySegment g_buffered_output_stream_new(MemorySegment base_stream) {
        var mh$ = g_buffered_output_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_output_stream_new", base_stream);
            }
            return (MemorySegment)mh$.invokeExact(base_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_output_stream_new_sized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_output_stream_new_sized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOutputStream *g_buffered_output_stream_new_sized(GOutputStream *base_stream, gsize size)
     * }
     */
    public static FunctionDescriptor g_buffered_output_stream_new_sized$descriptor() {
        return g_buffered_output_stream_new_sized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOutputStream *g_buffered_output_stream_new_sized(GOutputStream *base_stream, gsize size)
     * }
     */
    public static MethodHandle g_buffered_output_stream_new_sized$handle() {
        return g_buffered_output_stream_new_sized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOutputStream *g_buffered_output_stream_new_sized(GOutputStream *base_stream, gsize size)
     * }
     */
    public static MemorySegment g_buffered_output_stream_new_sized(MemorySegment base_stream, long size) {
        var mh$ = g_buffered_output_stream_new_sized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_output_stream_new_sized", base_stream, size);
            }
            return (MemorySegment)mh$.invokeExact(base_stream, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_output_stream_get_buffer_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_output_stream_get_buffer_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_buffered_output_stream_get_buffer_size(GBufferedOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_buffered_output_stream_get_buffer_size$descriptor() {
        return g_buffered_output_stream_get_buffer_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_buffered_output_stream_get_buffer_size(GBufferedOutputStream *stream)
     * }
     */
    public static MethodHandle g_buffered_output_stream_get_buffer_size$handle() {
        return g_buffered_output_stream_get_buffer_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_buffered_output_stream_get_buffer_size(GBufferedOutputStream *stream)
     * }
     */
    public static long g_buffered_output_stream_get_buffer_size(MemorySegment stream) {
        var mh$ = g_buffered_output_stream_get_buffer_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_output_stream_get_buffer_size", stream);
            }
            return (long)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_output_stream_set_buffer_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_output_stream_set_buffer_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_buffered_output_stream_set_buffer_size(GBufferedOutputStream *stream, gsize size)
     * }
     */
    public static FunctionDescriptor g_buffered_output_stream_set_buffer_size$descriptor() {
        return g_buffered_output_stream_set_buffer_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_buffered_output_stream_set_buffer_size(GBufferedOutputStream *stream, gsize size)
     * }
     */
    public static MethodHandle g_buffered_output_stream_set_buffer_size$handle() {
        return g_buffered_output_stream_set_buffer_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_buffered_output_stream_set_buffer_size(GBufferedOutputStream *stream, gsize size)
     * }
     */
    public static void g_buffered_output_stream_set_buffer_size(MemorySegment stream, long size) {
        var mh$ = g_buffered_output_stream_set_buffer_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_output_stream_set_buffer_size", stream, size);
            }
            mh$.invokeExact(stream, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_output_stream_get_auto_grow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_output_stream_get_auto_grow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_buffered_output_stream_get_auto_grow(GBufferedOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_buffered_output_stream_get_auto_grow$descriptor() {
        return g_buffered_output_stream_get_auto_grow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_buffered_output_stream_get_auto_grow(GBufferedOutputStream *stream)
     * }
     */
    public static MethodHandle g_buffered_output_stream_get_auto_grow$handle() {
        return g_buffered_output_stream_get_auto_grow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_buffered_output_stream_get_auto_grow(GBufferedOutputStream *stream)
     * }
     */
    public static int g_buffered_output_stream_get_auto_grow(MemorySegment stream) {
        var mh$ = g_buffered_output_stream_get_auto_grow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_output_stream_get_auto_grow", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_buffered_output_stream_set_auto_grow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_buffered_output_stream_set_auto_grow"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_buffered_output_stream_set_auto_grow(GBufferedOutputStream *stream, gboolean auto_grow)
     * }
     */
    public static FunctionDescriptor g_buffered_output_stream_set_auto_grow$descriptor() {
        return g_buffered_output_stream_set_auto_grow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_buffered_output_stream_set_auto_grow(GBufferedOutputStream *stream, gboolean auto_grow)
     * }
     */
    public static MethodHandle g_buffered_output_stream_set_auto_grow$handle() {
        return g_buffered_output_stream_set_auto_grow.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_buffered_output_stream_set_auto_grow(GBufferedOutputStream *stream, gboolean auto_grow)
     * }
     */
    public static void g_buffered_output_stream_set_auto_grow(MemorySegment stream, int auto_grow) {
        var mh$ = g_buffered_output_stream_set_auto_grow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_buffered_output_stream_set_auto_grow", stream, auto_grow);
            }
            mh$.invokeExact(stream, auto_grow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_icon_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_icon_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_bytes_icon_get_type()
     * }
     */
    public static FunctionDescriptor g_bytes_icon_get_type$descriptor() {
        return g_bytes_icon_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_bytes_icon_get_type()
     * }
     */
    public static MethodHandle g_bytes_icon_get_type$handle() {
        return g_bytes_icon_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_bytes_icon_get_type()
     * }
     */
    public static long g_bytes_icon_get_type() {
        var mh$ = g_bytes_icon_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_icon_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_icon_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_icon_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_bytes_icon_new(GBytes *bytes)
     * }
     */
    public static FunctionDescriptor g_bytes_icon_new$descriptor() {
        return g_bytes_icon_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_bytes_icon_new(GBytes *bytes)
     * }
     */
    public static MethodHandle g_bytes_icon_new$handle() {
        return g_bytes_icon_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_bytes_icon_new(GBytes *bytes)
     * }
     */
    public static MemorySegment g_bytes_icon_new(MemorySegment bytes) {
        var mh$ = g_bytes_icon_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_icon_new", bytes);
            }
            return (MemorySegment)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_icon_get_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_icon_get_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_icon_get_bytes(GBytesIcon *icon)
     * }
     */
    public static FunctionDescriptor g_bytes_icon_get_bytes$descriptor() {
        return g_bytes_icon_get_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_icon_get_bytes(GBytesIcon *icon)
     * }
     */
    public static MethodHandle g_bytes_icon_get_bytes$handle() {
        return g_bytes_icon_get_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_bytes_icon_get_bytes(GBytesIcon *icon)
     * }
     */
    public static MemorySegment g_bytes_icon_get_bytes(MemorySegment icon) {
        var mh$ = g_bytes_icon_get_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_icon_get_bytes", icon);
            }
            return (MemorySegment)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_cancellable_get_type()
     * }
     */
    public static FunctionDescriptor g_cancellable_get_type$descriptor() {
        return g_cancellable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_cancellable_get_type()
     * }
     */
    public static MethodHandle g_cancellable_get_type$handle() {
        return g_cancellable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_cancellable_get_type()
     * }
     */
    public static long g_cancellable_get_type() {
        var mh$ = g_cancellable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCancellable *g_cancellable_new()
     * }
     */
    public static FunctionDescriptor g_cancellable_new$descriptor() {
        return g_cancellable_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCancellable *g_cancellable_new()
     * }
     */
    public static MethodHandle g_cancellable_new$handle() {
        return g_cancellable_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCancellable *g_cancellable_new()
     * }
     */
    public static MemorySegment g_cancellable_new() {
        var mh$ = g_cancellable_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_is_cancelled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_is_cancelled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_cancellable_is_cancelled(GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_cancellable_is_cancelled$descriptor() {
        return g_cancellable_is_cancelled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_cancellable_is_cancelled(GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_cancellable_is_cancelled$handle() {
        return g_cancellable_is_cancelled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_cancellable_is_cancelled(GCancellable *cancellable)
     * }
     */
    public static int g_cancellable_is_cancelled(MemorySegment cancellable) {
        var mh$ = g_cancellable_is_cancelled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_is_cancelled", cancellable);
            }
            return (int)mh$.invokeExact(cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_set_error_if_cancelled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_set_error_if_cancelled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_cancellable_set_error_if_cancelled(GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_cancellable_set_error_if_cancelled$descriptor() {
        return g_cancellable_set_error_if_cancelled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_cancellable_set_error_if_cancelled(GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_cancellable_set_error_if_cancelled$handle() {
        return g_cancellable_set_error_if_cancelled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_cancellable_set_error_if_cancelled(GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_cancellable_set_error_if_cancelled(MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_cancellable_set_error_if_cancelled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_set_error_if_cancelled", cancellable, error);
            }
            return (int)mh$.invokeExact(cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_get_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_get_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_cancellable_get_fd(GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_cancellable_get_fd$descriptor() {
        return g_cancellable_get_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_cancellable_get_fd(GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_cancellable_get_fd$handle() {
        return g_cancellable_get_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_cancellable_get_fd(GCancellable *cancellable)
     * }
     */
    public static int g_cancellable_get_fd(MemorySegment cancellable) {
        var mh$ = g_cancellable_get_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_get_fd", cancellable);
            }
            return (int)mh$.invokeExact(cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_make_pollfd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_make_pollfd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_cancellable_make_pollfd(GCancellable *cancellable, GPollFD *pollfd)
     * }
     */
    public static FunctionDescriptor g_cancellable_make_pollfd$descriptor() {
        return g_cancellable_make_pollfd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_cancellable_make_pollfd(GCancellable *cancellable, GPollFD *pollfd)
     * }
     */
    public static MethodHandle g_cancellable_make_pollfd$handle() {
        return g_cancellable_make_pollfd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_cancellable_make_pollfd(GCancellable *cancellable, GPollFD *pollfd)
     * }
     */
    public static int g_cancellable_make_pollfd(MemorySegment cancellable, MemorySegment pollfd) {
        var mh$ = g_cancellable_make_pollfd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_make_pollfd", cancellable, pollfd);
            }
            return (int)mh$.invokeExact(cancellable, pollfd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_release_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_release_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cancellable_release_fd(GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_cancellable_release_fd$descriptor() {
        return g_cancellable_release_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cancellable_release_fd(GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_cancellable_release_fd$handle() {
        return g_cancellable_release_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cancellable_release_fd(GCancellable *cancellable)
     * }
     */
    public static void g_cancellable_release_fd(MemorySegment cancellable) {
        var mh$ = g_cancellable_release_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_release_fd", cancellable);
            }
            mh$.invokeExact(cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_source_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_source_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_cancellable_source_new(GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_cancellable_source_new$descriptor() {
        return g_cancellable_source_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_cancellable_source_new(GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_cancellable_source_new$handle() {
        return g_cancellable_source_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_cancellable_source_new(GCancellable *cancellable)
     * }
     */
    public static MemorySegment g_cancellable_source_new(MemorySegment cancellable) {
        var mh$ = g_cancellable_source_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_source_new", cancellable);
            }
            return (MemorySegment)mh$.invokeExact(cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_get_current {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_get_current"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCancellable *g_cancellable_get_current()
     * }
     */
    public static FunctionDescriptor g_cancellable_get_current$descriptor() {
        return g_cancellable_get_current.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCancellable *g_cancellable_get_current()
     * }
     */
    public static MethodHandle g_cancellable_get_current$handle() {
        return g_cancellable_get_current.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCancellable *g_cancellable_get_current()
     * }
     */
    public static MemorySegment g_cancellable_get_current() {
        var mh$ = g_cancellable_get_current.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_get_current");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_push_current {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_push_current"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cancellable_push_current(GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_cancellable_push_current$descriptor() {
        return g_cancellable_push_current.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cancellable_push_current(GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_cancellable_push_current$handle() {
        return g_cancellable_push_current.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cancellable_push_current(GCancellable *cancellable)
     * }
     */
    public static void g_cancellable_push_current(MemorySegment cancellable) {
        var mh$ = g_cancellable_push_current.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_push_current", cancellable);
            }
            mh$.invokeExact(cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_pop_current {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_pop_current"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cancellable_pop_current(GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_cancellable_pop_current$descriptor() {
        return g_cancellable_pop_current.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cancellable_pop_current(GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_cancellable_pop_current$handle() {
        return g_cancellable_pop_current.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cancellable_pop_current(GCancellable *cancellable)
     * }
     */
    public static void g_cancellable_pop_current(MemorySegment cancellable) {
        var mh$ = g_cancellable_pop_current.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_pop_current", cancellable);
            }
            mh$.invokeExact(cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cancellable_reset(GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_cancellable_reset$descriptor() {
        return g_cancellable_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cancellable_reset(GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_cancellable_reset$handle() {
        return g_cancellable_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cancellable_reset(GCancellable *cancellable)
     * }
     */
    public static void g_cancellable_reset(MemorySegment cancellable) {
        var mh$ = g_cancellable_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_reset", cancellable);
            }
            mh$.invokeExact(cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_connect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gulong g_cancellable_connect(GCancellable *cancellable, GCallback callback, gpointer data, GDestroyNotify data_destroy_func)
     * }
     */
    public static FunctionDescriptor g_cancellable_connect$descriptor() {
        return g_cancellable_connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gulong g_cancellable_connect(GCancellable *cancellable, GCallback callback, gpointer data, GDestroyNotify data_destroy_func)
     * }
     */
    public static MethodHandle g_cancellable_connect$handle() {
        return g_cancellable_connect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gulong g_cancellable_connect(GCancellable *cancellable, GCallback callback, gpointer data, GDestroyNotify data_destroy_func)
     * }
     */
    public static long g_cancellable_connect(MemorySegment cancellable, MemorySegment callback, MemorySegment data, MemorySegment data_destroy_func) {
        var mh$ = g_cancellable_connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_connect", cancellable, callback, data, data_destroy_func);
            }
            return (long)mh$.invokeExact(cancellable, callback, data, data_destroy_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_disconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_disconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cancellable_disconnect(GCancellable *cancellable, gulong handler_id)
     * }
     */
    public static FunctionDescriptor g_cancellable_disconnect$descriptor() {
        return g_cancellable_disconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cancellable_disconnect(GCancellable *cancellable, gulong handler_id)
     * }
     */
    public static MethodHandle g_cancellable_disconnect$handle() {
        return g_cancellable_disconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cancellable_disconnect(GCancellable *cancellable, gulong handler_id)
     * }
     */
    public static void g_cancellable_disconnect(MemorySegment cancellable, long handler_id) {
        var mh$ = g_cancellable_disconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_disconnect", cancellable, handler_id);
            }
            mh$.invokeExact(cancellable, handler_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cancellable_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cancellable_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cancellable_cancel(GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_cancellable_cancel$descriptor() {
        return g_cancellable_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cancellable_cancel(GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_cancellable_cancel$handle() {
        return g_cancellable_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cancellable_cancel(GCancellable *cancellable)
     * }
     */
    public static void g_cancellable_cancel(MemorySegment cancellable) {
        var mh$ = g_cancellable_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cancellable_cancel", cancellable);
            }
            mh$.invokeExact(cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_converter_get_type()
     * }
     */
    public static FunctionDescriptor g_converter_get_type$descriptor() {
        return g_converter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_converter_get_type()
     * }
     */
    public static MethodHandle g_converter_get_type$handle() {
        return g_converter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_converter_get_type()
     * }
     */
    public static long g_converter_get_type() {
        var mh$ = g_converter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_convert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_convert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GConverterResult g_converter_convert(GConverter *converter, const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, GConverterFlags flags, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_converter_convert$descriptor() {
        return g_converter_convert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GConverterResult g_converter_convert(GConverter *converter, const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, GConverterFlags flags, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_converter_convert$handle() {
        return g_converter_convert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GConverterResult g_converter_convert(GConverter *converter, const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, GConverterFlags flags, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static int g_converter_convert(MemorySegment converter, MemorySegment inbuf, long inbuf_size, MemorySegment outbuf, long outbuf_size, int flags, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_converter_convert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_convert", converter, inbuf, inbuf_size, outbuf, outbuf_size, flags, bytes_read, bytes_written, error);
            }
            return (int)mh$.invokeExact(converter, inbuf, inbuf_size, outbuf, outbuf_size, flags, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_converter_reset(GConverter *converter)
     * }
     */
    public static FunctionDescriptor g_converter_reset$descriptor() {
        return g_converter_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_converter_reset(GConverter *converter)
     * }
     */
    public static MethodHandle g_converter_reset$handle() {
        return g_converter_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_converter_reset(GConverter *converter)
     * }
     */
    public static void g_converter_reset(MemorySegment converter) {
        var mh$ = g_converter_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_reset", converter);
            }
            mh$.invokeExact(converter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_charset_converter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_charset_converter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_charset_converter_get_type()
     * }
     */
    public static FunctionDescriptor g_charset_converter_get_type$descriptor() {
        return g_charset_converter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_charset_converter_get_type()
     * }
     */
    public static MethodHandle g_charset_converter_get_type$handle() {
        return g_charset_converter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_charset_converter_get_type()
     * }
     */
    public static long g_charset_converter_get_type() {
        var mh$ = g_charset_converter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_charset_converter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_charset_converter_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_charset_converter_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCharsetConverter *g_charset_converter_new(const gchar *to_charset, const gchar *from_charset, GError **error)
     * }
     */
    public static FunctionDescriptor g_charset_converter_new$descriptor() {
        return g_charset_converter_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCharsetConverter *g_charset_converter_new(const gchar *to_charset, const gchar *from_charset, GError **error)
     * }
     */
    public static MethodHandle g_charset_converter_new$handle() {
        return g_charset_converter_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCharsetConverter *g_charset_converter_new(const gchar *to_charset, const gchar *from_charset, GError **error)
     * }
     */
    public static MemorySegment g_charset_converter_new(MemorySegment to_charset, MemorySegment from_charset, MemorySegment error) {
        var mh$ = g_charset_converter_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_charset_converter_new", to_charset, from_charset, error);
            }
            return (MemorySegment)mh$.invokeExact(to_charset, from_charset, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_charset_converter_set_use_fallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_charset_converter_set_use_fallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_charset_converter_set_use_fallback(GCharsetConverter *converter, gboolean use_fallback)
     * }
     */
    public static FunctionDescriptor g_charset_converter_set_use_fallback$descriptor() {
        return g_charset_converter_set_use_fallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_charset_converter_set_use_fallback(GCharsetConverter *converter, gboolean use_fallback)
     * }
     */
    public static MethodHandle g_charset_converter_set_use_fallback$handle() {
        return g_charset_converter_set_use_fallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_charset_converter_set_use_fallback(GCharsetConverter *converter, gboolean use_fallback)
     * }
     */
    public static void g_charset_converter_set_use_fallback(MemorySegment converter, int use_fallback) {
        var mh$ = g_charset_converter_set_use_fallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_charset_converter_set_use_fallback", converter, use_fallback);
            }
            mh$.invokeExact(converter, use_fallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_charset_converter_get_use_fallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_charset_converter_get_use_fallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_charset_converter_get_use_fallback(GCharsetConverter *converter)
     * }
     */
    public static FunctionDescriptor g_charset_converter_get_use_fallback$descriptor() {
        return g_charset_converter_get_use_fallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_charset_converter_get_use_fallback(GCharsetConverter *converter)
     * }
     */
    public static MethodHandle g_charset_converter_get_use_fallback$handle() {
        return g_charset_converter_get_use_fallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_charset_converter_get_use_fallback(GCharsetConverter *converter)
     * }
     */
    public static int g_charset_converter_get_use_fallback(MemorySegment converter) {
        var mh$ = g_charset_converter_get_use_fallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_charset_converter_get_use_fallback", converter);
            }
            return (int)mh$.invokeExact(converter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_charset_converter_get_num_fallbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_charset_converter_get_num_fallbacks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_charset_converter_get_num_fallbacks(GCharsetConverter *converter)
     * }
     */
    public static FunctionDescriptor g_charset_converter_get_num_fallbacks$descriptor() {
        return g_charset_converter_get_num_fallbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_charset_converter_get_num_fallbacks(GCharsetConverter *converter)
     * }
     */
    public static MethodHandle g_charset_converter_get_num_fallbacks$handle() {
        return g_charset_converter_get_num_fallbacks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_charset_converter_get_num_fallbacks(GCharsetConverter *converter)
     * }
     */
    public static int g_charset_converter_get_num_fallbacks(MemorySegment converter) {
        var mh$ = g_charset_converter_get_num_fallbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_charset_converter_get_num_fallbacks", converter);
            }
            return (int)mh$.invokeExact(converter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_equals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_equals"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_content_type_equals(const gchar *type1, const gchar *type2)
     * }
     */
    public static FunctionDescriptor g_content_type_equals$descriptor() {
        return g_content_type_equals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_content_type_equals(const gchar *type1, const gchar *type2)
     * }
     */
    public static MethodHandle g_content_type_equals$handle() {
        return g_content_type_equals.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_content_type_equals(const gchar *type1, const gchar *type2)
     * }
     */
    public static int g_content_type_equals(MemorySegment type1, MemorySegment type2) {
        var mh$ = g_content_type_equals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_equals", type1, type2);
            }
            return (int)mh$.invokeExact(type1, type2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_is_a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_is_a"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_content_type_is_a(const gchar *type, const gchar *supertype)
     * }
     */
    public static FunctionDescriptor g_content_type_is_a$descriptor() {
        return g_content_type_is_a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_content_type_is_a(const gchar *type, const gchar *supertype)
     * }
     */
    public static MethodHandle g_content_type_is_a$handle() {
        return g_content_type_is_a.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_content_type_is_a(const gchar *type, const gchar *supertype)
     * }
     */
    public static int g_content_type_is_a(MemorySegment type, MemorySegment supertype) {
        var mh$ = g_content_type_is_a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_is_a", type, supertype);
            }
            return (int)mh$.invokeExact(type, supertype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_is_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_is_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_content_type_is_mime_type(const gchar *type, const gchar *mime_type)
     * }
     */
    public static FunctionDescriptor g_content_type_is_mime_type$descriptor() {
        return g_content_type_is_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_content_type_is_mime_type(const gchar *type, const gchar *mime_type)
     * }
     */
    public static MethodHandle g_content_type_is_mime_type$handle() {
        return g_content_type_is_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_content_type_is_mime_type(const gchar *type, const gchar *mime_type)
     * }
     */
    public static int g_content_type_is_mime_type(MemorySegment type, MemorySegment mime_type) {
        var mh$ = g_content_type_is_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_is_mime_type", type, mime_type);
            }
            return (int)mh$.invokeExact(type, mime_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_is_unknown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_is_unknown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_content_type_is_unknown(const gchar *type)
     * }
     */
    public static FunctionDescriptor g_content_type_is_unknown$descriptor() {
        return g_content_type_is_unknown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_content_type_is_unknown(const gchar *type)
     * }
     */
    public static MethodHandle g_content_type_is_unknown$handle() {
        return g_content_type_is_unknown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_content_type_is_unknown(const gchar *type)
     * }
     */
    public static int g_content_type_is_unknown(MemorySegment type) {
        var mh$ = g_content_type_is_unknown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_is_unknown", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_content_type_get_description(const gchar *type)
     * }
     */
    public static FunctionDescriptor g_content_type_get_description$descriptor() {
        return g_content_type_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_content_type_get_description(const gchar *type)
     * }
     */
    public static MethodHandle g_content_type_get_description$handle() {
        return g_content_type_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_content_type_get_description(const gchar *type)
     * }
     */
    public static MemorySegment g_content_type_get_description(MemorySegment type) {
        var mh$ = g_content_type_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_get_description", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_get_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_get_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_content_type_get_mime_type(const gchar *type)
     * }
     */
    public static FunctionDescriptor g_content_type_get_mime_type$descriptor() {
        return g_content_type_get_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_content_type_get_mime_type(const gchar *type)
     * }
     */
    public static MethodHandle g_content_type_get_mime_type$handle() {
        return g_content_type_get_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_content_type_get_mime_type(const gchar *type)
     * }
     */
    public static MemorySegment g_content_type_get_mime_type(MemorySegment type) {
        var mh$ = g_content_type_get_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_get_mime_type", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_content_type_get_icon(const gchar *type)
     * }
     */
    public static FunctionDescriptor g_content_type_get_icon$descriptor() {
        return g_content_type_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_content_type_get_icon(const gchar *type)
     * }
     */
    public static MethodHandle g_content_type_get_icon$handle() {
        return g_content_type_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_content_type_get_icon(const gchar *type)
     * }
     */
    public static MemorySegment g_content_type_get_icon(MemorySegment type) {
        var mh$ = g_content_type_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_get_icon", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_get_symbolic_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_get_symbolic_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_content_type_get_symbolic_icon(const gchar *type)
     * }
     */
    public static FunctionDescriptor g_content_type_get_symbolic_icon$descriptor() {
        return g_content_type_get_symbolic_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_content_type_get_symbolic_icon(const gchar *type)
     * }
     */
    public static MethodHandle g_content_type_get_symbolic_icon$handle() {
        return g_content_type_get_symbolic_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_content_type_get_symbolic_icon(const gchar *type)
     * }
     */
    public static MemorySegment g_content_type_get_symbolic_icon(MemorySegment type) {
        var mh$ = g_content_type_get_symbolic_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_get_symbolic_icon", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_get_generic_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_get_generic_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_content_type_get_generic_icon_name(const gchar *type)
     * }
     */
    public static FunctionDescriptor g_content_type_get_generic_icon_name$descriptor() {
        return g_content_type_get_generic_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_content_type_get_generic_icon_name(const gchar *type)
     * }
     */
    public static MethodHandle g_content_type_get_generic_icon_name$handle() {
        return g_content_type_get_generic_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_content_type_get_generic_icon_name(const gchar *type)
     * }
     */
    public static MemorySegment g_content_type_get_generic_icon_name(MemorySegment type) {
        var mh$ = g_content_type_get_generic_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_get_generic_icon_name", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_can_be_executable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_can_be_executable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_content_type_can_be_executable(const gchar *type)
     * }
     */
    public static FunctionDescriptor g_content_type_can_be_executable$descriptor() {
        return g_content_type_can_be_executable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_content_type_can_be_executable(const gchar *type)
     * }
     */
    public static MethodHandle g_content_type_can_be_executable$handle() {
        return g_content_type_can_be_executable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_content_type_can_be_executable(const gchar *type)
     * }
     */
    public static int g_content_type_can_be_executable(MemorySegment type) {
        var mh$ = g_content_type_can_be_executable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_can_be_executable", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_from_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_from_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_content_type_from_mime_type(const gchar *mime_type)
     * }
     */
    public static FunctionDescriptor g_content_type_from_mime_type$descriptor() {
        return g_content_type_from_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_content_type_from_mime_type(const gchar *mime_type)
     * }
     */
    public static MethodHandle g_content_type_from_mime_type$handle() {
        return g_content_type_from_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_content_type_from_mime_type(const gchar *mime_type)
     * }
     */
    public static MemorySegment g_content_type_from_mime_type(MemorySegment mime_type) {
        var mh$ = g_content_type_from_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_from_mime_type", mime_type);
            }
            return (MemorySegment)mh$.invokeExact(mime_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_guess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_guess"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_content_type_guess(const gchar *filename, const guchar *data, gsize data_size, gboolean *result_uncertain)
     * }
     */
    public static FunctionDescriptor g_content_type_guess$descriptor() {
        return g_content_type_guess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_content_type_guess(const gchar *filename, const guchar *data, gsize data_size, gboolean *result_uncertain)
     * }
     */
    public static MethodHandle g_content_type_guess$handle() {
        return g_content_type_guess.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_content_type_guess(const gchar *filename, const guchar *data, gsize data_size, gboolean *result_uncertain)
     * }
     */
    public static MemorySegment g_content_type_guess(MemorySegment filename, MemorySegment data, long data_size, MemorySegment result_uncertain) {
        var mh$ = g_content_type_guess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_guess", filename, data, data_size, result_uncertain);
            }
            return (MemorySegment)mh$.invokeExact(filename, data, data_size, result_uncertain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_guess_for_tree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_guess_for_tree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_content_type_guess_for_tree(GFile *root)
     * }
     */
    public static FunctionDescriptor g_content_type_guess_for_tree$descriptor() {
        return g_content_type_guess_for_tree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_content_type_guess_for_tree(GFile *root)
     * }
     */
    public static MethodHandle g_content_type_guess_for_tree$handle() {
        return g_content_type_guess_for_tree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_content_type_guess_for_tree(GFile *root)
     * }
     */
    public static MemorySegment g_content_type_guess_for_tree(MemorySegment root) {
        var mh$ = g_content_type_guess_for_tree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_guess_for_tree", root);
            }
            return (MemorySegment)mh$.invokeExact(root);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_types_get_registered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_types_get_registered"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_content_types_get_registered()
     * }
     */
    public static FunctionDescriptor g_content_types_get_registered$descriptor() {
        return g_content_types_get_registered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_content_types_get_registered()
     * }
     */
    public static MethodHandle g_content_types_get_registered$handle() {
        return g_content_types_get_registered.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_content_types_get_registered()
     * }
     */
    public static MemorySegment g_content_types_get_registered() {
        var mh$ = g_content_types_get_registered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_types_get_registered");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_get_mime_dirs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_get_mime_dirs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *g_content_type_get_mime_dirs()
     * }
     */
    public static FunctionDescriptor g_content_type_get_mime_dirs$descriptor() {
        return g_content_type_get_mime_dirs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *g_content_type_get_mime_dirs()
     * }
     */
    public static MethodHandle g_content_type_get_mime_dirs$handle() {
        return g_content_type_get_mime_dirs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *g_content_type_get_mime_dirs()
     * }
     */
    public static MemorySegment g_content_type_get_mime_dirs() {
        var mh$ = g_content_type_get_mime_dirs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_get_mime_dirs");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_content_type_set_mime_dirs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_content_type_set_mime_dirs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_content_type_set_mime_dirs(const gchar *const *dirs)
     * }
     */
    public static FunctionDescriptor g_content_type_set_mime_dirs$descriptor() {
        return g_content_type_set_mime_dirs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_content_type_set_mime_dirs(const gchar *const *dirs)
     * }
     */
    public static MethodHandle g_content_type_set_mime_dirs$handle() {
        return g_content_type_set_mime_dirs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_content_type_set_mime_dirs(const gchar *const *dirs)
     * }
     */
    public static void g_content_type_set_mime_dirs(MemorySegment dirs) {
        var mh$ = g_content_type_set_mime_dirs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_content_type_set_mime_dirs", dirs);
            }
            mh$.invokeExact(dirs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_input_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_input_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_converter_input_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_converter_input_stream_get_type$descriptor() {
        return g_converter_input_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_converter_input_stream_get_type()
     * }
     */
    public static MethodHandle g_converter_input_stream_get_type$handle() {
        return g_converter_input_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_converter_input_stream_get_type()
     * }
     */
    public static long g_converter_input_stream_get_type() {
        var mh$ = g_converter_input_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_input_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_input_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_input_stream_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_converter_input_stream_new(GInputStream *base_stream, GConverter *converter)
     * }
     */
    public static FunctionDescriptor g_converter_input_stream_new$descriptor() {
        return g_converter_input_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_converter_input_stream_new(GInputStream *base_stream, GConverter *converter)
     * }
     */
    public static MethodHandle g_converter_input_stream_new$handle() {
        return g_converter_input_stream_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_converter_input_stream_new(GInputStream *base_stream, GConverter *converter)
     * }
     */
    public static MemorySegment g_converter_input_stream_new(MemorySegment base_stream, MemorySegment converter) {
        var mh$ = g_converter_input_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_input_stream_new", base_stream, converter);
            }
            return (MemorySegment)mh$.invokeExact(base_stream, converter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_input_stream_get_converter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_input_stream_get_converter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GConverter *g_converter_input_stream_get_converter(GConverterInputStream *converter_stream)
     * }
     */
    public static FunctionDescriptor g_converter_input_stream_get_converter$descriptor() {
        return g_converter_input_stream_get_converter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GConverter *g_converter_input_stream_get_converter(GConverterInputStream *converter_stream)
     * }
     */
    public static MethodHandle g_converter_input_stream_get_converter$handle() {
        return g_converter_input_stream_get_converter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GConverter *g_converter_input_stream_get_converter(GConverterInputStream *converter_stream)
     * }
     */
    public static MemorySegment g_converter_input_stream_get_converter(MemorySegment converter_stream) {
        var mh$ = g_converter_input_stream_get_converter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_input_stream_get_converter", converter_stream);
            }
            return (MemorySegment)mh$.invokeExact(converter_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_output_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_output_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_converter_output_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_converter_output_stream_get_type$descriptor() {
        return g_converter_output_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_converter_output_stream_get_type()
     * }
     */
    public static MethodHandle g_converter_output_stream_get_type$handle() {
        return g_converter_output_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_converter_output_stream_get_type()
     * }
     */
    public static long g_converter_output_stream_get_type() {
        var mh$ = g_converter_output_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_output_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_output_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_output_stream_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOutputStream *g_converter_output_stream_new(GOutputStream *base_stream, GConverter *converter)
     * }
     */
    public static FunctionDescriptor g_converter_output_stream_new$descriptor() {
        return g_converter_output_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOutputStream *g_converter_output_stream_new(GOutputStream *base_stream, GConverter *converter)
     * }
     */
    public static MethodHandle g_converter_output_stream_new$handle() {
        return g_converter_output_stream_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOutputStream *g_converter_output_stream_new(GOutputStream *base_stream, GConverter *converter)
     * }
     */
    public static MemorySegment g_converter_output_stream_new(MemorySegment base_stream, MemorySegment converter) {
        var mh$ = g_converter_output_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_output_stream_new", base_stream, converter);
            }
            return (MemorySegment)mh$.invokeExact(base_stream, converter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_converter_output_stream_get_converter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_converter_output_stream_get_converter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GConverter *g_converter_output_stream_get_converter(GConverterOutputStream *converter_stream)
     * }
     */
    public static FunctionDescriptor g_converter_output_stream_get_converter$descriptor() {
        return g_converter_output_stream_get_converter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GConverter *g_converter_output_stream_get_converter(GConverterOutputStream *converter_stream)
     * }
     */
    public static MethodHandle g_converter_output_stream_get_converter$handle() {
        return g_converter_output_stream_get_converter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GConverter *g_converter_output_stream_get_converter(GConverterOutputStream *converter_stream)
     * }
     */
    public static MemorySegment g_converter_output_stream_get_converter(MemorySegment converter_stream) {
        var mh$ = g_converter_output_stream_get_converter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_converter_output_stream_get_converter", converter_stream);
            }
            return (MemorySegment)mh$.invokeExact(converter_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __useconds_t useconds_t
     * }
     */
    public static final OfInt useconds_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __socklen_t socklen_t
     * }
     */
    public static final OfInt socklen_t = app_indicator_h.C_INT;

    private static class access {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("access"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int access(const char *__name, int __type)
     * }
     */
    public static FunctionDescriptor access$descriptor() {
        return access.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int access(const char *__name, int __type)
     * }
     */
    public static MethodHandle access$handle() {
        return access.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int access(const char *__name, int __type)
     * }
     */
    public static int access(MemorySegment __name, int __type) {
        var mh$ = access.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("access", __name, __type);
            }
            return (int)mh$.invokeExact(__name, __type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class faccessat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("faccessat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int faccessat(int __fd, const char *__file, int __type, int __flag)
     * }
     */
    public static FunctionDescriptor faccessat$descriptor() {
        return faccessat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int faccessat(int __fd, const char *__file, int __type, int __flag)
     * }
     */
    public static MethodHandle faccessat$handle() {
        return faccessat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int faccessat(int __fd, const char *__file, int __type, int __flag)
     * }
     */
    public static int faccessat(int __fd, MemorySegment __file, int __type, int __flag) {
        var mh$ = faccessat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("faccessat", __fd, __file, __type, __flag);
            }
            return (int)mh$.invokeExact(__fd, __file, __type, __flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lseek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("lseek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __off_t lseek(int __fd, __off_t __offset, int __whence)
     * }
     */
    public static FunctionDescriptor lseek$descriptor() {
        return lseek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __off_t lseek(int __fd, __off_t __offset, int __whence)
     * }
     */
    public static MethodHandle lseek$handle() {
        return lseek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __off_t lseek(int __fd, __off_t __offset, int __whence)
     * }
     */
    public static long lseek(int __fd, long __offset, int __whence) {
        var mh$ = lseek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lseek", __fd, __offset, __whence);
            }
            return (long)mh$.invokeExact(__fd, __offset, __whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int close(int __fd)
     * }
     */
    public static FunctionDescriptor close$descriptor() {
        return close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int close(int __fd)
     * }
     */
    public static MethodHandle close$handle() {
        return close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int close(int __fd)
     * }
     */
    public static int close(int __fd) {
        var mh$ = close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("close", __fd);
            }
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class closefrom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("closefrom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void closefrom(int __lowfd)
     * }
     */
    public static FunctionDescriptor closefrom$descriptor() {
        return closefrom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void closefrom(int __lowfd)
     * }
     */
    public static MethodHandle closefrom$handle() {
        return closefrom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void closefrom(int __lowfd)
     * }
     */
    public static void closefrom(int __lowfd) {
        var mh$ = closefrom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("closefrom", __lowfd);
            }
            mh$.invokeExact(__lowfd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("read"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t read(int __fd, void *__buf, size_t __nbytes)
     * }
     */
    public static FunctionDescriptor read$descriptor() {
        return read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t read(int __fd, void *__buf, size_t __nbytes)
     * }
     */
    public static MethodHandle read$handle() {
        return read.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t read(int __fd, void *__buf, size_t __nbytes)
     * }
     */
    public static long read(int __fd, MemorySegment __buf, long __nbytes) {
        var mh$ = read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("read", __fd, __buf, __nbytes);
            }
            return (long)mh$.invokeExact(__fd, __buf, __nbytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("write"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t write(int __fd, const void *__buf, size_t __n)
     * }
     */
    public static FunctionDescriptor write$descriptor() {
        return write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t write(int __fd, const void *__buf, size_t __n)
     * }
     */
    public static MethodHandle write$handle() {
        return write.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t write(int __fd, const void *__buf, size_t __n)
     * }
     */
    public static long write(int __fd, MemorySegment __buf, long __n) {
        var mh$ = write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("write", __fd, __buf, __n);
            }
            return (long)mh$.invokeExact(__fd, __buf, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pread"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t pread(int __fd, void *__buf, size_t __nbytes, __off_t __offset)
     * }
     */
    public static FunctionDescriptor pread$descriptor() {
        return pread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t pread(int __fd, void *__buf, size_t __nbytes, __off_t __offset)
     * }
     */
    public static MethodHandle pread$handle() {
        return pread.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t pread(int __fd, void *__buf, size_t __nbytes, __off_t __offset)
     * }
     */
    public static long pread(int __fd, MemorySegment __buf, long __nbytes, long __offset) {
        var mh$ = pread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pread", __fd, __buf, __nbytes, __offset);
            }
            return (long)mh$.invokeExact(__fd, __buf, __nbytes, __offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pwrite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t pwrite(int __fd, const void *__buf, size_t __n, __off_t __offset)
     * }
     */
    public static FunctionDescriptor pwrite$descriptor() {
        return pwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t pwrite(int __fd, const void *__buf, size_t __n, __off_t __offset)
     * }
     */
    public static MethodHandle pwrite$handle() {
        return pwrite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t pwrite(int __fd, const void *__buf, size_t __n, __off_t __offset)
     * }
     */
    public static long pwrite(int __fd, MemorySegment __buf, long __n, long __offset) {
        var mh$ = pwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pwrite", __fd, __buf, __n, __offset);
            }
            return (long)mh$.invokeExact(__fd, __buf, __n, __offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pipe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pipe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pipe(int __pipedes[2])
     * }
     */
    public static FunctionDescriptor pipe$descriptor() {
        return pipe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pipe(int __pipedes[2])
     * }
     */
    public static MethodHandle pipe$handle() {
        return pipe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pipe(int __pipedes[2])
     * }
     */
    public static int pipe(MemorySegment __pipedes) {
        var mh$ = pipe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pipe", __pipedes);
            }
            return (int)mh$.invokeExact(__pipedes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class alarm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("alarm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int alarm(unsigned int __seconds)
     * }
     */
    public static FunctionDescriptor alarm$descriptor() {
        return alarm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int alarm(unsigned int __seconds)
     * }
     */
    public static MethodHandle alarm$handle() {
        return alarm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int alarm(unsigned int __seconds)
     * }
     */
    public static int alarm(int __seconds) {
        var mh$ = alarm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("alarm", __seconds);
            }
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sleep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sleep"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int sleep(unsigned int __seconds)
     * }
     */
    public static FunctionDescriptor sleep$descriptor() {
        return sleep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int sleep(unsigned int __seconds)
     * }
     */
    public static MethodHandle sleep$handle() {
        return sleep.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int sleep(unsigned int __seconds)
     * }
     */
    public static int sleep(int __seconds) {
        var mh$ = sleep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sleep", __seconds);
            }
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ualarm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ualarm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __useconds_t ualarm(__useconds_t __value, __useconds_t __interval)
     * }
     */
    public static FunctionDescriptor ualarm$descriptor() {
        return ualarm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __useconds_t ualarm(__useconds_t __value, __useconds_t __interval)
     * }
     */
    public static MethodHandle ualarm$handle() {
        return ualarm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __useconds_t ualarm(__useconds_t __value, __useconds_t __interval)
     * }
     */
    public static int ualarm(int __value, int __interval) {
        var mh$ = ualarm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ualarm", __value, __interval);
            }
            return (int)mh$.invokeExact(__value, __interval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class usleep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("usleep"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int usleep(__useconds_t __useconds)
     * }
     */
    public static FunctionDescriptor usleep$descriptor() {
        return usleep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int usleep(__useconds_t __useconds)
     * }
     */
    public static MethodHandle usleep$handle() {
        return usleep.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int usleep(__useconds_t __useconds)
     * }
     */
    public static int usleep(int __useconds) {
        var mh$ = usleep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("usleep", __useconds);
            }
            return (int)mh$.invokeExact(__useconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pause {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pause"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pause()
     * }
     */
    public static FunctionDescriptor pause$descriptor() {
        return pause.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pause()
     * }
     */
    public static MethodHandle pause$handle() {
        return pause.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pause()
     * }
     */
    public static int pause() {
        var mh$ = pause.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pause");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class chown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("chown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int chown(const char *__file, __uid_t __owner, __gid_t __group)
     * }
     */
    public static FunctionDescriptor chown$descriptor() {
        return chown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int chown(const char *__file, __uid_t __owner, __gid_t __group)
     * }
     */
    public static MethodHandle chown$handle() {
        return chown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int chown(const char *__file, __uid_t __owner, __gid_t __group)
     * }
     */
    public static int chown(MemorySegment __file, int __owner, int __group) {
        var mh$ = chown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("chown", __file, __owner, __group);
            }
            return (int)mh$.invokeExact(__file, __owner, __group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fchown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fchown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fchown(int __fd, __uid_t __owner, __gid_t __group)
     * }
     */
    public static FunctionDescriptor fchown$descriptor() {
        return fchown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fchown(int __fd, __uid_t __owner, __gid_t __group)
     * }
     */
    public static MethodHandle fchown$handle() {
        return fchown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fchown(int __fd, __uid_t __owner, __gid_t __group)
     * }
     */
    public static int fchown(int __fd, int __owner, int __group) {
        var mh$ = fchown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fchown", __fd, __owner, __group);
            }
            return (int)mh$.invokeExact(__fd, __owner, __group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lchown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("lchown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lchown(const char *__file, __uid_t __owner, __gid_t __group)
     * }
     */
    public static FunctionDescriptor lchown$descriptor() {
        return lchown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lchown(const char *__file, __uid_t __owner, __gid_t __group)
     * }
     */
    public static MethodHandle lchown$handle() {
        return lchown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int lchown(const char *__file, __uid_t __owner, __gid_t __group)
     * }
     */
    public static int lchown(MemorySegment __file, int __owner, int __group) {
        var mh$ = lchown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lchown", __file, __owner, __group);
            }
            return (int)mh$.invokeExact(__file, __owner, __group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fchownat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fchownat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag)
     * }
     */
    public static FunctionDescriptor fchownat$descriptor() {
        return fchownat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag)
     * }
     */
    public static MethodHandle fchownat$handle() {
        return fchownat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fchownat(int __fd, const char *__file, __uid_t __owner, __gid_t __group, int __flag)
     * }
     */
    public static int fchownat(int __fd, MemorySegment __file, int __owner, int __group, int __flag) {
        var mh$ = fchownat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fchownat", __fd, __file, __owner, __group, __flag);
            }
            return (int)mh$.invokeExact(__fd, __file, __owner, __group, __flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class chdir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("chdir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int chdir(const char *__path)
     * }
     */
    public static FunctionDescriptor chdir$descriptor() {
        return chdir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int chdir(const char *__path)
     * }
     */
    public static MethodHandle chdir$handle() {
        return chdir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int chdir(const char *__path)
     * }
     */
    public static int chdir(MemorySegment __path) {
        var mh$ = chdir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("chdir", __path);
            }
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fchdir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fchdir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fchdir(int __fd)
     * }
     */
    public static FunctionDescriptor fchdir$descriptor() {
        return fchdir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fchdir(int __fd)
     * }
     */
    public static MethodHandle fchdir$handle() {
        return fchdir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fchdir(int __fd)
     * }
     */
    public static int fchdir(int __fd) {
        var mh$ = fchdir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fchdir", __fd);
            }
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getcwd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getcwd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *getcwd(char *__buf, size_t __size)
     * }
     */
    public static FunctionDescriptor getcwd$descriptor() {
        return getcwd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *getcwd(char *__buf, size_t __size)
     * }
     */
    public static MethodHandle getcwd$handle() {
        return getcwd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *getcwd(char *__buf, size_t __size)
     * }
     */
    public static MemorySegment getcwd(MemorySegment __buf, long __size) {
        var mh$ = getcwd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getcwd", __buf, __size);
            }
            return (MemorySegment)mh$.invokeExact(__buf, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getwd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getwd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *getwd(char *__buf)
     * }
     */
    public static FunctionDescriptor getwd$descriptor() {
        return getwd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *getwd(char *__buf)
     * }
     */
    public static MethodHandle getwd$handle() {
        return getwd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *getwd(char *__buf)
     * }
     */
    public static MemorySegment getwd(MemorySegment __buf) {
        var mh$ = getwd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getwd", __buf);
            }
            return (MemorySegment)mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("dup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int dup(int __fd)
     * }
     */
    public static FunctionDescriptor dup$descriptor() {
        return dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int dup(int __fd)
     * }
     */
    public static MethodHandle dup$handle() {
        return dup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int dup(int __fd)
     * }
     */
    public static int dup(int __fd) {
        var mh$ = dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dup", __fd);
            }
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class dup2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("dup2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int dup2(int __fd, int __fd2)
     * }
     */
    public static FunctionDescriptor dup2$descriptor() {
        return dup2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int dup2(int __fd, int __fd2)
     * }
     */
    public static MethodHandle dup2$handle() {
        return dup2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int dup2(int __fd, int __fd2)
     * }
     */
    public static int dup2(int __fd, int __fd2) {
        var mh$ = dup2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dup2", __fd, __fd2);
            }
            return (int)mh$.invokeExact(__fd, __fd2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __environ$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("__environ").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern char **__environ
     * }
     */
    public static AddressLayout __environ$layout() {
        return __environ$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern char **__environ
     * }
     */
    public static MemorySegment __environ$segment() {
        return __environ$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern char **__environ
     * }
     */
    public static MemorySegment __environ() {
        return __environ$constants.SEGMENT.get(__environ$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern char **__environ
     * }
     */
    public static void __environ(MemorySegment varValue) {
        __environ$constants.SEGMENT.set(__environ$constants.LAYOUT, 0L, varValue);
    }

    private static class execve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("execve"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int execve(const char *__path, char *const __argv[], char *const __envp[])
     * }
     */
    public static FunctionDescriptor execve$descriptor() {
        return execve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int execve(const char *__path, char *const __argv[], char *const __envp[])
     * }
     */
    public static MethodHandle execve$handle() {
        return execve.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int execve(const char *__path, char *const __argv[], char *const __envp[])
     * }
     */
    public static int execve(MemorySegment __path, MemorySegment __argv, MemorySegment __envp) {
        var mh$ = execve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("execve", __path, __argv, __envp);
            }
            return (int)mh$.invokeExact(__path, __argv, __envp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fexecve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fexecve"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fexecve(int __fd, char *const __argv[], char *const __envp[])
     * }
     */
    public static FunctionDescriptor fexecve$descriptor() {
        return fexecve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fexecve(int __fd, char *const __argv[], char *const __envp[])
     * }
     */
    public static MethodHandle fexecve$handle() {
        return fexecve.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fexecve(int __fd, char *const __argv[], char *const __envp[])
     * }
     */
    public static int fexecve(int __fd, MemorySegment __argv, MemorySegment __envp) {
        var mh$ = fexecve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fexecve", __fd, __argv, __envp);
            }
            return (int)mh$.invokeExact(__fd, __argv, __envp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class execv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("execv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int execv(const char *__path, char *const __argv[])
     * }
     */
    public static FunctionDescriptor execv$descriptor() {
        return execv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int execv(const char *__path, char *const __argv[])
     * }
     */
    public static MethodHandle execv$handle() {
        return execv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int execv(const char *__path, char *const __argv[])
     * }
     */
    public static int execv(MemorySegment __path, MemorySegment __argv) {
        var mh$ = execv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("execv", __path, __argv);
            }
            return (int)mh$.invokeExact(__path, __argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int execle(const char *__path, const char *__arg, ...)
     * }
     */
    public static class execle {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("execle");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private execle(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int execle(const char *__path, const char *__arg, ...)
         * }
         */
        public static execle makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new execle(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __path, MemorySegment __arg, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("execle", __path, __arg, x2);
                }
                return (int)spreader.invokeExact(__path, __arg, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int execl(const char *__path, const char *__arg, ...)
     * }
     */
    public static class execl {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("execl");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private execl(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int execl(const char *__path, const char *__arg, ...)
         * }
         */
        public static execl makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new execl(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __path, MemorySegment __arg, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("execl", __path, __arg, x2);
                }
                return (int)spreader.invokeExact(__path, __arg, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class execvp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("execvp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int execvp(const char *__file, char *const __argv[])
     * }
     */
    public static FunctionDescriptor execvp$descriptor() {
        return execvp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int execvp(const char *__file, char *const __argv[])
     * }
     */
    public static MethodHandle execvp$handle() {
        return execvp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int execvp(const char *__file, char *const __argv[])
     * }
     */
    public static int execvp(MemorySegment __file, MemorySegment __argv) {
        var mh$ = execvp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("execvp", __file, __argv);
            }
            return (int)mh$.invokeExact(__file, __argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int execlp(const char *__file, const char *__arg, ...)
     * }
     */
    public static class execlp {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("execlp");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private execlp(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int execlp(const char *__file, const char *__arg, ...)
         * }
         */
        public static execlp makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new execlp(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __file, MemorySegment __arg, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("execlp", __file, __arg, x2);
                }
                return (int)spreader.invokeExact(__file, __arg, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class nice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("nice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int nice(int __inc)
     * }
     */
    public static FunctionDescriptor nice$descriptor() {
        return nice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int nice(int __inc)
     * }
     */
    public static MethodHandle nice$handle() {
        return nice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int nice(int __inc)
     * }
     */
    public static int nice(int __inc) {
        var mh$ = nice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nice", __inc);
            }
            return (int)mh$.invokeExact(__inc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void _exit(int __status)
     * }
     */
    public static FunctionDescriptor _exit$descriptor() {
        return _exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void _exit(int __status)
     * }
     */
    public static MethodHandle _exit$handle() {
        return _exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void _exit(int __status)
     * }
     */
    public static void _exit(int __status) {
        var mh$ = _exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_exit", __status);
            }
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int _PC_LINK_MAX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_LINK_MAX = 0
     * }
     */
    public static int _PC_LINK_MAX() {
        return _PC_LINK_MAX;
    }
    private static final int _PC_MAX_CANON = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_MAX_CANON = 1
     * }
     */
    public static int _PC_MAX_CANON() {
        return _PC_MAX_CANON;
    }
    private static final int _PC_MAX_INPUT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_MAX_INPUT = 2
     * }
     */
    public static int _PC_MAX_INPUT() {
        return _PC_MAX_INPUT;
    }
    private static final int _PC_NAME_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_NAME_MAX = 3
     * }
     */
    public static int _PC_NAME_MAX() {
        return _PC_NAME_MAX;
    }
    private static final int _PC_PATH_MAX = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_PATH_MAX = 4
     * }
     */
    public static int _PC_PATH_MAX() {
        return _PC_PATH_MAX;
    }
    private static final int _PC_PIPE_BUF = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_PIPE_BUF = 5
     * }
     */
    public static int _PC_PIPE_BUF() {
        return _PC_PIPE_BUF;
    }
    private static final int _PC_CHOWN_RESTRICTED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_CHOWN_RESTRICTED = 6
     * }
     */
    public static int _PC_CHOWN_RESTRICTED() {
        return _PC_CHOWN_RESTRICTED;
    }
    private static final int _PC_NO_TRUNC = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_NO_TRUNC = 7
     * }
     */
    public static int _PC_NO_TRUNC() {
        return _PC_NO_TRUNC;
    }
    private static final int _PC_VDISABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_VDISABLE = 8
     * }
     */
    public static int _PC_VDISABLE() {
        return _PC_VDISABLE;
    }
    private static final int _PC_SYNC_IO = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_SYNC_IO = 9
     * }
     */
    public static int _PC_SYNC_IO() {
        return _PC_SYNC_IO;
    }
    private static final int _PC_ASYNC_IO = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_ASYNC_IO = 10
     * }
     */
    public static int _PC_ASYNC_IO() {
        return _PC_ASYNC_IO;
    }
    private static final int _PC_PRIO_IO = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_PRIO_IO = 11
     * }
     */
    public static int _PC_PRIO_IO() {
        return _PC_PRIO_IO;
    }
    private static final int _PC_SOCK_MAXBUF = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_SOCK_MAXBUF = 12
     * }
     */
    public static int _PC_SOCK_MAXBUF() {
        return _PC_SOCK_MAXBUF;
    }
    private static final int _PC_FILESIZEBITS = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_FILESIZEBITS = 13
     * }
     */
    public static int _PC_FILESIZEBITS() {
        return _PC_FILESIZEBITS;
    }
    private static final int _PC_REC_INCR_XFER_SIZE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_REC_INCR_XFER_SIZE = 14
     * }
     */
    public static int _PC_REC_INCR_XFER_SIZE() {
        return _PC_REC_INCR_XFER_SIZE;
    }
    private static final int _PC_REC_MAX_XFER_SIZE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_REC_MAX_XFER_SIZE = 15
     * }
     */
    public static int _PC_REC_MAX_XFER_SIZE() {
        return _PC_REC_MAX_XFER_SIZE;
    }
    private static final int _PC_REC_MIN_XFER_SIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_REC_MIN_XFER_SIZE = 16
     * }
     */
    public static int _PC_REC_MIN_XFER_SIZE() {
        return _PC_REC_MIN_XFER_SIZE;
    }
    private static final int _PC_REC_XFER_ALIGN = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_REC_XFER_ALIGN = 17
     * }
     */
    public static int _PC_REC_XFER_ALIGN() {
        return _PC_REC_XFER_ALIGN;
    }
    private static final int _PC_ALLOC_SIZE_MIN = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_ALLOC_SIZE_MIN = 18
     * }
     */
    public static int _PC_ALLOC_SIZE_MIN() {
        return _PC_ALLOC_SIZE_MIN;
    }
    private static final int _PC_SYMLINK_MAX = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_SYMLINK_MAX = 19
     * }
     */
    public static int _PC_SYMLINK_MAX() {
        return _PC_SYMLINK_MAX;
    }
    private static final int _PC_2_SYMLINKS = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._PC_2_SYMLINKS = 20
     * }
     */
    public static int _PC_2_SYMLINKS() {
        return _PC_2_SYMLINKS;
    }
    private static final int _SC_ARG_MAX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_ARG_MAX = 0
     * }
     */
    public static int _SC_ARG_MAX() {
        return _SC_ARG_MAX;
    }
    private static final int _SC_CHILD_MAX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_CHILD_MAX = 1
     * }
     */
    public static int _SC_CHILD_MAX() {
        return _SC_CHILD_MAX;
    }
    private static final int _SC_CLK_TCK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_CLK_TCK = 2
     * }
     */
    public static int _SC_CLK_TCK() {
        return _SC_CLK_TCK;
    }
    private static final int _SC_NGROUPS_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NGROUPS_MAX = 3
     * }
     */
    public static int _SC_NGROUPS_MAX() {
        return _SC_NGROUPS_MAX;
    }
    private static final int _SC_OPEN_MAX = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_OPEN_MAX = 4
     * }
     */
    public static int _SC_OPEN_MAX() {
        return _SC_OPEN_MAX;
    }
    private static final int _SC_STREAM_MAX = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_STREAM_MAX = 5
     * }
     */
    public static int _SC_STREAM_MAX() {
        return _SC_STREAM_MAX;
    }
    private static final int _SC_TZNAME_MAX = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TZNAME_MAX = 6
     * }
     */
    public static int _SC_TZNAME_MAX() {
        return _SC_TZNAME_MAX;
    }
    private static final int _SC_JOB_CONTROL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_JOB_CONTROL = 7
     * }
     */
    public static int _SC_JOB_CONTROL() {
        return _SC_JOB_CONTROL;
    }
    private static final int _SC_SAVED_IDS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SAVED_IDS = 8
     * }
     */
    public static int _SC_SAVED_IDS() {
        return _SC_SAVED_IDS;
    }
    private static final int _SC_REALTIME_SIGNALS = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_REALTIME_SIGNALS = 9
     * }
     */
    public static int _SC_REALTIME_SIGNALS() {
        return _SC_REALTIME_SIGNALS;
    }
    private static final int _SC_PRIORITY_SCHEDULING = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PRIORITY_SCHEDULING = 10
     * }
     */
    public static int _SC_PRIORITY_SCHEDULING() {
        return _SC_PRIORITY_SCHEDULING;
    }
    private static final int _SC_TIMERS = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TIMERS = 11
     * }
     */
    public static int _SC_TIMERS() {
        return _SC_TIMERS;
    }
    private static final int _SC_ASYNCHRONOUS_IO = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_ASYNCHRONOUS_IO = 12
     * }
     */
    public static int _SC_ASYNCHRONOUS_IO() {
        return _SC_ASYNCHRONOUS_IO;
    }
    private static final int _SC_PRIORITIZED_IO = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PRIORITIZED_IO = 13
     * }
     */
    public static int _SC_PRIORITIZED_IO() {
        return _SC_PRIORITIZED_IO;
    }
    private static final int _SC_SYNCHRONIZED_IO = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SYNCHRONIZED_IO = 14
     * }
     */
    public static int _SC_SYNCHRONIZED_IO() {
        return _SC_SYNCHRONIZED_IO;
    }
    private static final int _SC_FSYNC = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_FSYNC = 15
     * }
     */
    public static int _SC_FSYNC() {
        return _SC_FSYNC;
    }
    private static final int _SC_MAPPED_FILES = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MAPPED_FILES = 16
     * }
     */
    public static int _SC_MAPPED_FILES() {
        return _SC_MAPPED_FILES;
    }
    private static final int _SC_MEMLOCK = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MEMLOCK = 17
     * }
     */
    public static int _SC_MEMLOCK() {
        return _SC_MEMLOCK;
    }
    private static final int _SC_MEMLOCK_RANGE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MEMLOCK_RANGE = 18
     * }
     */
    public static int _SC_MEMLOCK_RANGE() {
        return _SC_MEMLOCK_RANGE;
    }
    private static final int _SC_MEMORY_PROTECTION = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MEMORY_PROTECTION = 19
     * }
     */
    public static int _SC_MEMORY_PROTECTION() {
        return _SC_MEMORY_PROTECTION;
    }
    private static final int _SC_MESSAGE_PASSING = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MESSAGE_PASSING = 20
     * }
     */
    public static int _SC_MESSAGE_PASSING() {
        return _SC_MESSAGE_PASSING;
    }
    private static final int _SC_SEMAPHORES = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SEMAPHORES = 21
     * }
     */
    public static int _SC_SEMAPHORES() {
        return _SC_SEMAPHORES;
    }
    private static final int _SC_SHARED_MEMORY_OBJECTS = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SHARED_MEMORY_OBJECTS = 22
     * }
     */
    public static int _SC_SHARED_MEMORY_OBJECTS() {
        return _SC_SHARED_MEMORY_OBJECTS;
    }
    private static final int _SC_AIO_LISTIO_MAX = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_AIO_LISTIO_MAX = 23
     * }
     */
    public static int _SC_AIO_LISTIO_MAX() {
        return _SC_AIO_LISTIO_MAX;
    }
    private static final int _SC_AIO_MAX = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_AIO_MAX = 24
     * }
     */
    public static int _SC_AIO_MAX() {
        return _SC_AIO_MAX;
    }
    private static final int _SC_AIO_PRIO_DELTA_MAX = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_AIO_PRIO_DELTA_MAX = 25
     * }
     */
    public static int _SC_AIO_PRIO_DELTA_MAX() {
        return _SC_AIO_PRIO_DELTA_MAX;
    }
    private static final int _SC_DELAYTIMER_MAX = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_DELAYTIMER_MAX = 26
     * }
     */
    public static int _SC_DELAYTIMER_MAX() {
        return _SC_DELAYTIMER_MAX;
    }
    private static final int _SC_MQ_OPEN_MAX = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MQ_OPEN_MAX = 27
     * }
     */
    public static int _SC_MQ_OPEN_MAX() {
        return _SC_MQ_OPEN_MAX;
    }
    private static final int _SC_MQ_PRIO_MAX = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MQ_PRIO_MAX = 28
     * }
     */
    public static int _SC_MQ_PRIO_MAX() {
        return _SC_MQ_PRIO_MAX;
    }
    private static final int _SC_VERSION = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_VERSION = 29
     * }
     */
    public static int _SC_VERSION() {
        return _SC_VERSION;
    }
    private static final int _SC_PAGESIZE = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PAGESIZE = 30
     * }
     */
    public static int _SC_PAGESIZE() {
        return _SC_PAGESIZE;
    }
    private static final int _SC_RTSIG_MAX = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_RTSIG_MAX = 31
     * }
     */
    public static int _SC_RTSIG_MAX() {
        return _SC_RTSIG_MAX;
    }
    private static final int _SC_SEM_NSEMS_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SEM_NSEMS_MAX = 32
     * }
     */
    public static int _SC_SEM_NSEMS_MAX() {
        return _SC_SEM_NSEMS_MAX;
    }
    private static final int _SC_SEM_VALUE_MAX = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SEM_VALUE_MAX = 33
     * }
     */
    public static int _SC_SEM_VALUE_MAX() {
        return _SC_SEM_VALUE_MAX;
    }
    private static final int _SC_SIGQUEUE_MAX = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SIGQUEUE_MAX = 34
     * }
     */
    public static int _SC_SIGQUEUE_MAX() {
        return _SC_SIGQUEUE_MAX;
    }
    private static final int _SC_TIMER_MAX = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TIMER_MAX = 35
     * }
     */
    public static int _SC_TIMER_MAX() {
        return _SC_TIMER_MAX;
    }
    private static final int _SC_BC_BASE_MAX = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_BC_BASE_MAX = 36
     * }
     */
    public static int _SC_BC_BASE_MAX() {
        return _SC_BC_BASE_MAX;
    }
    private static final int _SC_BC_DIM_MAX = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_BC_DIM_MAX = 37
     * }
     */
    public static int _SC_BC_DIM_MAX() {
        return _SC_BC_DIM_MAX;
    }
    private static final int _SC_BC_SCALE_MAX = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_BC_SCALE_MAX = 38
     * }
     */
    public static int _SC_BC_SCALE_MAX() {
        return _SC_BC_SCALE_MAX;
    }
    private static final int _SC_BC_STRING_MAX = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_BC_STRING_MAX = 39
     * }
     */
    public static int _SC_BC_STRING_MAX() {
        return _SC_BC_STRING_MAX;
    }
    private static final int _SC_COLL_WEIGHTS_MAX = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_COLL_WEIGHTS_MAX = 40
     * }
     */
    public static int _SC_COLL_WEIGHTS_MAX() {
        return _SC_COLL_WEIGHTS_MAX;
    }
    private static final int _SC_EQUIV_CLASS_MAX = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_EQUIV_CLASS_MAX = 41
     * }
     */
    public static int _SC_EQUIV_CLASS_MAX() {
        return _SC_EQUIV_CLASS_MAX;
    }
    private static final int _SC_EXPR_NEST_MAX = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_EXPR_NEST_MAX = 42
     * }
     */
    public static int _SC_EXPR_NEST_MAX() {
        return _SC_EXPR_NEST_MAX;
    }
    private static final int _SC_LINE_MAX = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LINE_MAX = 43
     * }
     */
    public static int _SC_LINE_MAX() {
        return _SC_LINE_MAX;
    }
    private static final int _SC_RE_DUP_MAX = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_RE_DUP_MAX = 44
     * }
     */
    public static int _SC_RE_DUP_MAX() {
        return _SC_RE_DUP_MAX;
    }
    private static final int _SC_CHARCLASS_NAME_MAX = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_CHARCLASS_NAME_MAX = 45
     * }
     */
    public static int _SC_CHARCLASS_NAME_MAX() {
        return _SC_CHARCLASS_NAME_MAX;
    }
    private static final int _SC_2_VERSION = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_VERSION = 46
     * }
     */
    public static int _SC_2_VERSION() {
        return _SC_2_VERSION;
    }
    private static final int _SC_2_C_BIND = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_C_BIND = 47
     * }
     */
    public static int _SC_2_C_BIND() {
        return _SC_2_C_BIND;
    }
    private static final int _SC_2_C_DEV = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_C_DEV = 48
     * }
     */
    public static int _SC_2_C_DEV() {
        return _SC_2_C_DEV;
    }
    private static final int _SC_2_FORT_DEV = (int)49L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_FORT_DEV = 49
     * }
     */
    public static int _SC_2_FORT_DEV() {
        return _SC_2_FORT_DEV;
    }
    private static final int _SC_2_FORT_RUN = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_FORT_RUN = 50
     * }
     */
    public static int _SC_2_FORT_RUN() {
        return _SC_2_FORT_RUN;
    }
    private static final int _SC_2_SW_DEV = (int)51L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_SW_DEV = 51
     * }
     */
    public static int _SC_2_SW_DEV() {
        return _SC_2_SW_DEV;
    }
    private static final int _SC_2_LOCALEDEF = (int)52L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_LOCALEDEF = 52
     * }
     */
    public static int _SC_2_LOCALEDEF() {
        return _SC_2_LOCALEDEF;
    }
    private static final int _SC_PII = (int)53L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PII = 53
     * }
     */
    public static int _SC_PII() {
        return _SC_PII;
    }
    private static final int _SC_PII_XTI = (int)54L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PII_XTI = 54
     * }
     */
    public static int _SC_PII_XTI() {
        return _SC_PII_XTI;
    }
    private static final int _SC_PII_SOCKET = (int)55L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PII_SOCKET = 55
     * }
     */
    public static int _SC_PII_SOCKET() {
        return _SC_PII_SOCKET;
    }
    private static final int _SC_PII_INTERNET = (int)56L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PII_INTERNET = 56
     * }
     */
    public static int _SC_PII_INTERNET() {
        return _SC_PII_INTERNET;
    }
    private static final int _SC_PII_OSI = (int)57L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PII_OSI = 57
     * }
     */
    public static int _SC_PII_OSI() {
        return _SC_PII_OSI;
    }
    private static final int _SC_POLL = (int)58L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_POLL = 58
     * }
     */
    public static int _SC_POLL() {
        return _SC_POLL;
    }
    private static final int _SC_SELECT = (int)59L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SELECT = 59
     * }
     */
    public static int _SC_SELECT() {
        return _SC_SELECT;
    }
    private static final int _SC_UIO_MAXIOV = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_UIO_MAXIOV = 60
     * }
     */
    public static int _SC_UIO_MAXIOV() {
        return _SC_UIO_MAXIOV;
    }
    private static final int _SC_IOV_MAX = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_IOV_MAX = 60
     * }
     */
    public static int _SC_IOV_MAX() {
        return _SC_IOV_MAX;
    }
    private static final int _SC_PII_INTERNET_STREAM = (int)61L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PII_INTERNET_STREAM = 61
     * }
     */
    public static int _SC_PII_INTERNET_STREAM() {
        return _SC_PII_INTERNET_STREAM;
    }
    private static final int _SC_PII_INTERNET_DGRAM = (int)62L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PII_INTERNET_DGRAM = 62
     * }
     */
    public static int _SC_PII_INTERNET_DGRAM() {
        return _SC_PII_INTERNET_DGRAM;
    }
    private static final int _SC_PII_OSI_COTS = (int)63L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PII_OSI_COTS = 63
     * }
     */
    public static int _SC_PII_OSI_COTS() {
        return _SC_PII_OSI_COTS;
    }
    private static final int _SC_PII_OSI_CLTS = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PII_OSI_CLTS = 64
     * }
     */
    public static int _SC_PII_OSI_CLTS() {
        return _SC_PII_OSI_CLTS;
    }
    private static final int _SC_PII_OSI_M = (int)65L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PII_OSI_M = 65
     * }
     */
    public static int _SC_PII_OSI_M() {
        return _SC_PII_OSI_M;
    }
    private static final int _SC_T_IOV_MAX = (int)66L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_T_IOV_MAX = 66
     * }
     */
    public static int _SC_T_IOV_MAX() {
        return _SC_T_IOV_MAX;
    }
    private static final int _SC_THREADS = (int)67L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREADS = 67
     * }
     */
    public static int _SC_THREADS() {
        return _SC_THREADS;
    }
    private static final int _SC_THREAD_SAFE_FUNCTIONS = (int)68L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_SAFE_FUNCTIONS = 68
     * }
     */
    public static int _SC_THREAD_SAFE_FUNCTIONS() {
        return _SC_THREAD_SAFE_FUNCTIONS;
    }
    private static final int _SC_GETGR_R_SIZE_MAX = (int)69L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_GETGR_R_SIZE_MAX = 69
     * }
     */
    public static int _SC_GETGR_R_SIZE_MAX() {
        return _SC_GETGR_R_SIZE_MAX;
    }
    private static final int _SC_GETPW_R_SIZE_MAX = (int)70L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_GETPW_R_SIZE_MAX = 70
     * }
     */
    public static int _SC_GETPW_R_SIZE_MAX() {
        return _SC_GETPW_R_SIZE_MAX;
    }
    private static final int _SC_LOGIN_NAME_MAX = (int)71L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LOGIN_NAME_MAX = 71
     * }
     */
    public static int _SC_LOGIN_NAME_MAX() {
        return _SC_LOGIN_NAME_MAX;
    }
    private static final int _SC_TTY_NAME_MAX = (int)72L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TTY_NAME_MAX = 72
     * }
     */
    public static int _SC_TTY_NAME_MAX() {
        return _SC_TTY_NAME_MAX;
    }
    private static final int _SC_THREAD_DESTRUCTOR_ITERATIONS = (int)73L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_DESTRUCTOR_ITERATIONS = 73
     * }
     */
    public static int _SC_THREAD_DESTRUCTOR_ITERATIONS() {
        return _SC_THREAD_DESTRUCTOR_ITERATIONS;
    }
    private static final int _SC_THREAD_KEYS_MAX = (int)74L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_KEYS_MAX = 74
     * }
     */
    public static int _SC_THREAD_KEYS_MAX() {
        return _SC_THREAD_KEYS_MAX;
    }
    private static final int _SC_THREAD_STACK_MIN = (int)75L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_STACK_MIN = 75
     * }
     */
    public static int _SC_THREAD_STACK_MIN() {
        return _SC_THREAD_STACK_MIN;
    }
    private static final int _SC_THREAD_THREADS_MAX = (int)76L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_THREADS_MAX = 76
     * }
     */
    public static int _SC_THREAD_THREADS_MAX() {
        return _SC_THREAD_THREADS_MAX;
    }
    private static final int _SC_THREAD_ATTR_STACKADDR = (int)77L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_ATTR_STACKADDR = 77
     * }
     */
    public static int _SC_THREAD_ATTR_STACKADDR() {
        return _SC_THREAD_ATTR_STACKADDR;
    }
    private static final int _SC_THREAD_ATTR_STACKSIZE = (int)78L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_ATTR_STACKSIZE = 78
     * }
     */
    public static int _SC_THREAD_ATTR_STACKSIZE() {
        return _SC_THREAD_ATTR_STACKSIZE;
    }
    private static final int _SC_THREAD_PRIORITY_SCHEDULING = (int)79L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_PRIORITY_SCHEDULING = 79
     * }
     */
    public static int _SC_THREAD_PRIORITY_SCHEDULING() {
        return _SC_THREAD_PRIORITY_SCHEDULING;
    }
    private static final int _SC_THREAD_PRIO_INHERIT = (int)80L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_PRIO_INHERIT = 80
     * }
     */
    public static int _SC_THREAD_PRIO_INHERIT() {
        return _SC_THREAD_PRIO_INHERIT;
    }
    private static final int _SC_THREAD_PRIO_PROTECT = (int)81L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_PRIO_PROTECT = 81
     * }
     */
    public static int _SC_THREAD_PRIO_PROTECT() {
        return _SC_THREAD_PRIO_PROTECT;
    }
    private static final int _SC_THREAD_PROCESS_SHARED = (int)82L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_PROCESS_SHARED = 82
     * }
     */
    public static int _SC_THREAD_PROCESS_SHARED() {
        return _SC_THREAD_PROCESS_SHARED;
    }
    private static final int _SC_NPROCESSORS_CONF = (int)83L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NPROCESSORS_CONF = 83
     * }
     */
    public static int _SC_NPROCESSORS_CONF() {
        return _SC_NPROCESSORS_CONF;
    }
    private static final int _SC_NPROCESSORS_ONLN = (int)84L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NPROCESSORS_ONLN = 84
     * }
     */
    public static int _SC_NPROCESSORS_ONLN() {
        return _SC_NPROCESSORS_ONLN;
    }
    private static final int _SC_PHYS_PAGES = (int)85L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PHYS_PAGES = 85
     * }
     */
    public static int _SC_PHYS_PAGES() {
        return _SC_PHYS_PAGES;
    }
    private static final int _SC_AVPHYS_PAGES = (int)86L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_AVPHYS_PAGES = 86
     * }
     */
    public static int _SC_AVPHYS_PAGES() {
        return _SC_AVPHYS_PAGES;
    }
    private static final int _SC_ATEXIT_MAX = (int)87L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_ATEXIT_MAX = 87
     * }
     */
    public static int _SC_ATEXIT_MAX() {
        return _SC_ATEXIT_MAX;
    }
    private static final int _SC_PASS_MAX = (int)88L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PASS_MAX = 88
     * }
     */
    public static int _SC_PASS_MAX() {
        return _SC_PASS_MAX;
    }
    private static final int _SC_XOPEN_VERSION = (int)89L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_VERSION = 89
     * }
     */
    public static int _SC_XOPEN_VERSION() {
        return _SC_XOPEN_VERSION;
    }
    private static final int _SC_XOPEN_XCU_VERSION = (int)90L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_XCU_VERSION = 90
     * }
     */
    public static int _SC_XOPEN_XCU_VERSION() {
        return _SC_XOPEN_XCU_VERSION;
    }
    private static final int _SC_XOPEN_UNIX = (int)91L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_UNIX = 91
     * }
     */
    public static int _SC_XOPEN_UNIX() {
        return _SC_XOPEN_UNIX;
    }
    private static final int _SC_XOPEN_CRYPT = (int)92L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_CRYPT = 92
     * }
     */
    public static int _SC_XOPEN_CRYPT() {
        return _SC_XOPEN_CRYPT;
    }
    private static final int _SC_XOPEN_ENH_I18N = (int)93L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_ENH_I18N = 93
     * }
     */
    public static int _SC_XOPEN_ENH_I18N() {
        return _SC_XOPEN_ENH_I18N;
    }
    private static final int _SC_XOPEN_SHM = (int)94L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_SHM = 94
     * }
     */
    public static int _SC_XOPEN_SHM() {
        return _SC_XOPEN_SHM;
    }
    private static final int _SC_2_CHAR_TERM = (int)95L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_CHAR_TERM = 95
     * }
     */
    public static int _SC_2_CHAR_TERM() {
        return _SC_2_CHAR_TERM;
    }
    private static final int _SC_2_C_VERSION = (int)96L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_C_VERSION = 96
     * }
     */
    public static int _SC_2_C_VERSION() {
        return _SC_2_C_VERSION;
    }
    private static final int _SC_2_UPE = (int)97L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_UPE = 97
     * }
     */
    public static int _SC_2_UPE() {
        return _SC_2_UPE;
    }
    private static final int _SC_XOPEN_XPG2 = (int)98L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_XPG2 = 98
     * }
     */
    public static int _SC_XOPEN_XPG2() {
        return _SC_XOPEN_XPG2;
    }
    private static final int _SC_XOPEN_XPG3 = (int)99L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_XPG3 = 99
     * }
     */
    public static int _SC_XOPEN_XPG3() {
        return _SC_XOPEN_XPG3;
    }
    private static final int _SC_XOPEN_XPG4 = (int)100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_XPG4 = 100
     * }
     */
    public static int _SC_XOPEN_XPG4() {
        return _SC_XOPEN_XPG4;
    }
    private static final int _SC_CHAR_BIT = (int)101L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_CHAR_BIT = 101
     * }
     */
    public static int _SC_CHAR_BIT() {
        return _SC_CHAR_BIT;
    }
    private static final int _SC_CHAR_MAX = (int)102L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_CHAR_MAX = 102
     * }
     */
    public static int _SC_CHAR_MAX() {
        return _SC_CHAR_MAX;
    }
    private static final int _SC_CHAR_MIN = (int)103L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_CHAR_MIN = 103
     * }
     */
    public static int _SC_CHAR_MIN() {
        return _SC_CHAR_MIN;
    }
    private static final int _SC_INT_MAX = (int)104L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_INT_MAX = 104
     * }
     */
    public static int _SC_INT_MAX() {
        return _SC_INT_MAX;
    }
    private static final int _SC_INT_MIN = (int)105L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_INT_MIN = 105
     * }
     */
    public static int _SC_INT_MIN() {
        return _SC_INT_MIN;
    }
    private static final int _SC_LONG_BIT = (int)106L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LONG_BIT = 106
     * }
     */
    public static int _SC_LONG_BIT() {
        return _SC_LONG_BIT;
    }
    private static final int _SC_WORD_BIT = (int)107L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_WORD_BIT = 107
     * }
     */
    public static int _SC_WORD_BIT() {
        return _SC_WORD_BIT;
    }
    private static final int _SC_MB_LEN_MAX = (int)108L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MB_LEN_MAX = 108
     * }
     */
    public static int _SC_MB_LEN_MAX() {
        return _SC_MB_LEN_MAX;
    }
    private static final int _SC_NZERO = (int)109L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NZERO = 109
     * }
     */
    public static int _SC_NZERO() {
        return _SC_NZERO;
    }
    private static final int _SC_SSIZE_MAX = (int)110L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SSIZE_MAX = 110
     * }
     */
    public static int _SC_SSIZE_MAX() {
        return _SC_SSIZE_MAX;
    }
    private static final int _SC_SCHAR_MAX = (int)111L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SCHAR_MAX = 111
     * }
     */
    public static int _SC_SCHAR_MAX() {
        return _SC_SCHAR_MAX;
    }
    private static final int _SC_SCHAR_MIN = (int)112L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SCHAR_MIN = 112
     * }
     */
    public static int _SC_SCHAR_MIN() {
        return _SC_SCHAR_MIN;
    }
    private static final int _SC_SHRT_MAX = (int)113L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SHRT_MAX = 113
     * }
     */
    public static int _SC_SHRT_MAX() {
        return _SC_SHRT_MAX;
    }
    private static final int _SC_SHRT_MIN = (int)114L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SHRT_MIN = 114
     * }
     */
    public static int _SC_SHRT_MIN() {
        return _SC_SHRT_MIN;
    }
    private static final int _SC_UCHAR_MAX = (int)115L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_UCHAR_MAX = 115
     * }
     */
    public static int _SC_UCHAR_MAX() {
        return _SC_UCHAR_MAX;
    }
    private static final int _SC_UINT_MAX = (int)116L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_UINT_MAX = 116
     * }
     */
    public static int _SC_UINT_MAX() {
        return _SC_UINT_MAX;
    }
    private static final int _SC_ULONG_MAX = (int)117L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_ULONG_MAX = 117
     * }
     */
    public static int _SC_ULONG_MAX() {
        return _SC_ULONG_MAX;
    }
    private static final int _SC_USHRT_MAX = (int)118L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_USHRT_MAX = 118
     * }
     */
    public static int _SC_USHRT_MAX() {
        return _SC_USHRT_MAX;
    }
    private static final int _SC_NL_ARGMAX = (int)119L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NL_ARGMAX = 119
     * }
     */
    public static int _SC_NL_ARGMAX() {
        return _SC_NL_ARGMAX;
    }
    private static final int _SC_NL_LANGMAX = (int)120L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NL_LANGMAX = 120
     * }
     */
    public static int _SC_NL_LANGMAX() {
        return _SC_NL_LANGMAX;
    }
    private static final int _SC_NL_MSGMAX = (int)121L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NL_MSGMAX = 121
     * }
     */
    public static int _SC_NL_MSGMAX() {
        return _SC_NL_MSGMAX;
    }
    private static final int _SC_NL_NMAX = (int)122L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NL_NMAX = 122
     * }
     */
    public static int _SC_NL_NMAX() {
        return _SC_NL_NMAX;
    }
    private static final int _SC_NL_SETMAX = (int)123L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NL_SETMAX = 123
     * }
     */
    public static int _SC_NL_SETMAX() {
        return _SC_NL_SETMAX;
    }
    private static final int _SC_NL_TEXTMAX = (int)124L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NL_TEXTMAX = 124
     * }
     */
    public static int _SC_NL_TEXTMAX() {
        return _SC_NL_TEXTMAX;
    }
    private static final int _SC_XBS5_ILP32_OFF32 = (int)125L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XBS5_ILP32_OFF32 = 125
     * }
     */
    public static int _SC_XBS5_ILP32_OFF32() {
        return _SC_XBS5_ILP32_OFF32;
    }
    private static final int _SC_XBS5_ILP32_OFFBIG = (int)126L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XBS5_ILP32_OFFBIG = 126
     * }
     */
    public static int _SC_XBS5_ILP32_OFFBIG() {
        return _SC_XBS5_ILP32_OFFBIG;
    }
    private static final int _SC_XBS5_LP64_OFF64 = (int)127L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XBS5_LP64_OFF64 = 127
     * }
     */
    public static int _SC_XBS5_LP64_OFF64() {
        return _SC_XBS5_LP64_OFF64;
    }
    private static final int _SC_XBS5_LPBIG_OFFBIG = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XBS5_LPBIG_OFFBIG = 128
     * }
     */
    public static int _SC_XBS5_LPBIG_OFFBIG() {
        return _SC_XBS5_LPBIG_OFFBIG;
    }
    private static final int _SC_XOPEN_LEGACY = (int)129L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_LEGACY = 129
     * }
     */
    public static int _SC_XOPEN_LEGACY() {
        return _SC_XOPEN_LEGACY;
    }
    private static final int _SC_XOPEN_REALTIME = (int)130L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_REALTIME = 130
     * }
     */
    public static int _SC_XOPEN_REALTIME() {
        return _SC_XOPEN_REALTIME;
    }
    private static final int _SC_XOPEN_REALTIME_THREADS = (int)131L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_REALTIME_THREADS = 131
     * }
     */
    public static int _SC_XOPEN_REALTIME_THREADS() {
        return _SC_XOPEN_REALTIME_THREADS;
    }
    private static final int _SC_ADVISORY_INFO = (int)132L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_ADVISORY_INFO = 132
     * }
     */
    public static int _SC_ADVISORY_INFO() {
        return _SC_ADVISORY_INFO;
    }
    private static final int _SC_BARRIERS = (int)133L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_BARRIERS = 133
     * }
     */
    public static int _SC_BARRIERS() {
        return _SC_BARRIERS;
    }
    private static final int _SC_BASE = (int)134L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_BASE = 134
     * }
     */
    public static int _SC_BASE() {
        return _SC_BASE;
    }
    private static final int _SC_C_LANG_SUPPORT = (int)135L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_C_LANG_SUPPORT = 135
     * }
     */
    public static int _SC_C_LANG_SUPPORT() {
        return _SC_C_LANG_SUPPORT;
    }
    private static final int _SC_C_LANG_SUPPORT_R = (int)136L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_C_LANG_SUPPORT_R = 136
     * }
     */
    public static int _SC_C_LANG_SUPPORT_R() {
        return _SC_C_LANG_SUPPORT_R;
    }
    private static final int _SC_CLOCK_SELECTION = (int)137L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_CLOCK_SELECTION = 137
     * }
     */
    public static int _SC_CLOCK_SELECTION() {
        return _SC_CLOCK_SELECTION;
    }
    private static final int _SC_CPUTIME = (int)138L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_CPUTIME = 138
     * }
     */
    public static int _SC_CPUTIME() {
        return _SC_CPUTIME;
    }
    private static final int _SC_THREAD_CPUTIME = (int)139L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_CPUTIME = 139
     * }
     */
    public static int _SC_THREAD_CPUTIME() {
        return _SC_THREAD_CPUTIME;
    }
    private static final int _SC_DEVICE_IO = (int)140L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_DEVICE_IO = 140
     * }
     */
    public static int _SC_DEVICE_IO() {
        return _SC_DEVICE_IO;
    }
    private static final int _SC_DEVICE_SPECIFIC = (int)141L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_DEVICE_SPECIFIC = 141
     * }
     */
    public static int _SC_DEVICE_SPECIFIC() {
        return _SC_DEVICE_SPECIFIC;
    }
    private static final int _SC_DEVICE_SPECIFIC_R = (int)142L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_DEVICE_SPECIFIC_R = 142
     * }
     */
    public static int _SC_DEVICE_SPECIFIC_R() {
        return _SC_DEVICE_SPECIFIC_R;
    }
    private static final int _SC_FD_MGMT = (int)143L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_FD_MGMT = 143
     * }
     */
    public static int _SC_FD_MGMT() {
        return _SC_FD_MGMT;
    }
    private static final int _SC_FIFO = (int)144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_FIFO = 144
     * }
     */
    public static int _SC_FIFO() {
        return _SC_FIFO;
    }
    private static final int _SC_PIPE = (int)145L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_PIPE = 145
     * }
     */
    public static int _SC_PIPE() {
        return _SC_PIPE;
    }
    private static final int _SC_FILE_ATTRIBUTES = (int)146L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_FILE_ATTRIBUTES = 146
     * }
     */
    public static int _SC_FILE_ATTRIBUTES() {
        return _SC_FILE_ATTRIBUTES;
    }
    private static final int _SC_FILE_LOCKING = (int)147L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_FILE_LOCKING = 147
     * }
     */
    public static int _SC_FILE_LOCKING() {
        return _SC_FILE_LOCKING;
    }
    private static final int _SC_FILE_SYSTEM = (int)148L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_FILE_SYSTEM = 148
     * }
     */
    public static int _SC_FILE_SYSTEM() {
        return _SC_FILE_SYSTEM;
    }
    private static final int _SC_MONOTONIC_CLOCK = (int)149L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MONOTONIC_CLOCK = 149
     * }
     */
    public static int _SC_MONOTONIC_CLOCK() {
        return _SC_MONOTONIC_CLOCK;
    }
    private static final int _SC_MULTI_PROCESS = (int)150L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MULTI_PROCESS = 150
     * }
     */
    public static int _SC_MULTI_PROCESS() {
        return _SC_MULTI_PROCESS;
    }
    private static final int _SC_SINGLE_PROCESS = (int)151L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SINGLE_PROCESS = 151
     * }
     */
    public static int _SC_SINGLE_PROCESS() {
        return _SC_SINGLE_PROCESS;
    }
    private static final int _SC_NETWORKING = (int)152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_NETWORKING = 152
     * }
     */
    public static int _SC_NETWORKING() {
        return _SC_NETWORKING;
    }
    private static final int _SC_READER_WRITER_LOCKS = (int)153L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_READER_WRITER_LOCKS = 153
     * }
     */
    public static int _SC_READER_WRITER_LOCKS() {
        return _SC_READER_WRITER_LOCKS;
    }
    private static final int _SC_SPIN_LOCKS = (int)154L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SPIN_LOCKS = 154
     * }
     */
    public static int _SC_SPIN_LOCKS() {
        return _SC_SPIN_LOCKS;
    }
    private static final int _SC_REGEXP = (int)155L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_REGEXP = 155
     * }
     */
    public static int _SC_REGEXP() {
        return _SC_REGEXP;
    }
    private static final int _SC_REGEX_VERSION = (int)156L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_REGEX_VERSION = 156
     * }
     */
    public static int _SC_REGEX_VERSION() {
        return _SC_REGEX_VERSION;
    }
    private static final int _SC_SHELL = (int)157L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SHELL = 157
     * }
     */
    public static int _SC_SHELL() {
        return _SC_SHELL;
    }
    private static final int _SC_SIGNALS = (int)158L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SIGNALS = 158
     * }
     */
    public static int _SC_SIGNALS() {
        return _SC_SIGNALS;
    }
    private static final int _SC_SPAWN = (int)159L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SPAWN = 159
     * }
     */
    public static int _SC_SPAWN() {
        return _SC_SPAWN;
    }
    private static final int _SC_SPORADIC_SERVER = (int)160L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SPORADIC_SERVER = 160
     * }
     */
    public static int _SC_SPORADIC_SERVER() {
        return _SC_SPORADIC_SERVER;
    }
    private static final int _SC_THREAD_SPORADIC_SERVER = (int)161L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_SPORADIC_SERVER = 161
     * }
     */
    public static int _SC_THREAD_SPORADIC_SERVER() {
        return _SC_THREAD_SPORADIC_SERVER;
    }
    private static final int _SC_SYSTEM_DATABASE = (int)162L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SYSTEM_DATABASE = 162
     * }
     */
    public static int _SC_SYSTEM_DATABASE() {
        return _SC_SYSTEM_DATABASE;
    }
    private static final int _SC_SYSTEM_DATABASE_R = (int)163L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SYSTEM_DATABASE_R = 163
     * }
     */
    public static int _SC_SYSTEM_DATABASE_R() {
        return _SC_SYSTEM_DATABASE_R;
    }
    private static final int _SC_TIMEOUTS = (int)164L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TIMEOUTS = 164
     * }
     */
    public static int _SC_TIMEOUTS() {
        return _SC_TIMEOUTS;
    }
    private static final int _SC_TYPED_MEMORY_OBJECTS = (int)165L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TYPED_MEMORY_OBJECTS = 165
     * }
     */
    public static int _SC_TYPED_MEMORY_OBJECTS() {
        return _SC_TYPED_MEMORY_OBJECTS;
    }
    private static final int _SC_USER_GROUPS = (int)166L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_USER_GROUPS = 166
     * }
     */
    public static int _SC_USER_GROUPS() {
        return _SC_USER_GROUPS;
    }
    private static final int _SC_USER_GROUPS_R = (int)167L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_USER_GROUPS_R = 167
     * }
     */
    public static int _SC_USER_GROUPS_R() {
        return _SC_USER_GROUPS_R;
    }
    private static final int _SC_2_PBS = (int)168L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_PBS = 168
     * }
     */
    public static int _SC_2_PBS() {
        return _SC_2_PBS;
    }
    private static final int _SC_2_PBS_ACCOUNTING = (int)169L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_PBS_ACCOUNTING = 169
     * }
     */
    public static int _SC_2_PBS_ACCOUNTING() {
        return _SC_2_PBS_ACCOUNTING;
    }
    private static final int _SC_2_PBS_LOCATE = (int)170L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_PBS_LOCATE = 170
     * }
     */
    public static int _SC_2_PBS_LOCATE() {
        return _SC_2_PBS_LOCATE;
    }
    private static final int _SC_2_PBS_MESSAGE = (int)171L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_PBS_MESSAGE = 171
     * }
     */
    public static int _SC_2_PBS_MESSAGE() {
        return _SC_2_PBS_MESSAGE;
    }
    private static final int _SC_2_PBS_TRACK = (int)172L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_PBS_TRACK = 172
     * }
     */
    public static int _SC_2_PBS_TRACK() {
        return _SC_2_PBS_TRACK;
    }
    private static final int _SC_SYMLOOP_MAX = (int)173L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SYMLOOP_MAX = 173
     * }
     */
    public static int _SC_SYMLOOP_MAX() {
        return _SC_SYMLOOP_MAX;
    }
    private static final int _SC_STREAMS = (int)174L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_STREAMS = 174
     * }
     */
    public static int _SC_STREAMS() {
        return _SC_STREAMS;
    }
    private static final int _SC_2_PBS_CHECKPOINT = (int)175L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_2_PBS_CHECKPOINT = 175
     * }
     */
    public static int _SC_2_PBS_CHECKPOINT() {
        return _SC_2_PBS_CHECKPOINT;
    }
    private static final int _SC_V6_ILP32_OFF32 = (int)176L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_V6_ILP32_OFF32 = 176
     * }
     */
    public static int _SC_V6_ILP32_OFF32() {
        return _SC_V6_ILP32_OFF32;
    }
    private static final int _SC_V6_ILP32_OFFBIG = (int)177L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_V6_ILP32_OFFBIG = 177
     * }
     */
    public static int _SC_V6_ILP32_OFFBIG() {
        return _SC_V6_ILP32_OFFBIG;
    }
    private static final int _SC_V6_LP64_OFF64 = (int)178L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_V6_LP64_OFF64 = 178
     * }
     */
    public static int _SC_V6_LP64_OFF64() {
        return _SC_V6_LP64_OFF64;
    }
    private static final int _SC_V6_LPBIG_OFFBIG = (int)179L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_V6_LPBIG_OFFBIG = 179
     * }
     */
    public static int _SC_V6_LPBIG_OFFBIG() {
        return _SC_V6_LPBIG_OFFBIG;
    }
    private static final int _SC_HOST_NAME_MAX = (int)180L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_HOST_NAME_MAX = 180
     * }
     */
    public static int _SC_HOST_NAME_MAX() {
        return _SC_HOST_NAME_MAX;
    }
    private static final int _SC_TRACE = (int)181L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TRACE = 181
     * }
     */
    public static int _SC_TRACE() {
        return _SC_TRACE;
    }
    private static final int _SC_TRACE_EVENT_FILTER = (int)182L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TRACE_EVENT_FILTER = 182
     * }
     */
    public static int _SC_TRACE_EVENT_FILTER() {
        return _SC_TRACE_EVENT_FILTER;
    }
    private static final int _SC_TRACE_INHERIT = (int)183L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TRACE_INHERIT = 183
     * }
     */
    public static int _SC_TRACE_INHERIT() {
        return _SC_TRACE_INHERIT;
    }
    private static final int _SC_TRACE_LOG = (int)184L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TRACE_LOG = 184
     * }
     */
    public static int _SC_TRACE_LOG() {
        return _SC_TRACE_LOG;
    }
    private static final int _SC_LEVEL1_ICACHE_SIZE = (int)185L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL1_ICACHE_SIZE = 185
     * }
     */
    public static int _SC_LEVEL1_ICACHE_SIZE() {
        return _SC_LEVEL1_ICACHE_SIZE;
    }
    private static final int _SC_LEVEL1_ICACHE_ASSOC = (int)186L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL1_ICACHE_ASSOC = 186
     * }
     */
    public static int _SC_LEVEL1_ICACHE_ASSOC() {
        return _SC_LEVEL1_ICACHE_ASSOC;
    }
    private static final int _SC_LEVEL1_ICACHE_LINESIZE = (int)187L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL1_ICACHE_LINESIZE = 187
     * }
     */
    public static int _SC_LEVEL1_ICACHE_LINESIZE() {
        return _SC_LEVEL1_ICACHE_LINESIZE;
    }
    private static final int _SC_LEVEL1_DCACHE_SIZE = (int)188L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL1_DCACHE_SIZE = 188
     * }
     */
    public static int _SC_LEVEL1_DCACHE_SIZE() {
        return _SC_LEVEL1_DCACHE_SIZE;
    }
    private static final int _SC_LEVEL1_DCACHE_ASSOC = (int)189L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL1_DCACHE_ASSOC = 189
     * }
     */
    public static int _SC_LEVEL1_DCACHE_ASSOC() {
        return _SC_LEVEL1_DCACHE_ASSOC;
    }
    private static final int _SC_LEVEL1_DCACHE_LINESIZE = (int)190L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL1_DCACHE_LINESIZE = 190
     * }
     */
    public static int _SC_LEVEL1_DCACHE_LINESIZE() {
        return _SC_LEVEL1_DCACHE_LINESIZE;
    }
    private static final int _SC_LEVEL2_CACHE_SIZE = (int)191L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL2_CACHE_SIZE = 191
     * }
     */
    public static int _SC_LEVEL2_CACHE_SIZE() {
        return _SC_LEVEL2_CACHE_SIZE;
    }
    private static final int _SC_LEVEL2_CACHE_ASSOC = (int)192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL2_CACHE_ASSOC = 192
     * }
     */
    public static int _SC_LEVEL2_CACHE_ASSOC() {
        return _SC_LEVEL2_CACHE_ASSOC;
    }
    private static final int _SC_LEVEL2_CACHE_LINESIZE = (int)193L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL2_CACHE_LINESIZE = 193
     * }
     */
    public static int _SC_LEVEL2_CACHE_LINESIZE() {
        return _SC_LEVEL2_CACHE_LINESIZE;
    }
    private static final int _SC_LEVEL3_CACHE_SIZE = (int)194L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL3_CACHE_SIZE = 194
     * }
     */
    public static int _SC_LEVEL3_CACHE_SIZE() {
        return _SC_LEVEL3_CACHE_SIZE;
    }
    private static final int _SC_LEVEL3_CACHE_ASSOC = (int)195L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL3_CACHE_ASSOC = 195
     * }
     */
    public static int _SC_LEVEL3_CACHE_ASSOC() {
        return _SC_LEVEL3_CACHE_ASSOC;
    }
    private static final int _SC_LEVEL3_CACHE_LINESIZE = (int)196L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL3_CACHE_LINESIZE = 196
     * }
     */
    public static int _SC_LEVEL3_CACHE_LINESIZE() {
        return _SC_LEVEL3_CACHE_LINESIZE;
    }
    private static final int _SC_LEVEL4_CACHE_SIZE = (int)197L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL4_CACHE_SIZE = 197
     * }
     */
    public static int _SC_LEVEL4_CACHE_SIZE() {
        return _SC_LEVEL4_CACHE_SIZE;
    }
    private static final int _SC_LEVEL4_CACHE_ASSOC = (int)198L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL4_CACHE_ASSOC = 198
     * }
     */
    public static int _SC_LEVEL4_CACHE_ASSOC() {
        return _SC_LEVEL4_CACHE_ASSOC;
    }
    private static final int _SC_LEVEL4_CACHE_LINESIZE = (int)199L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_LEVEL4_CACHE_LINESIZE = 199
     * }
     */
    public static int _SC_LEVEL4_CACHE_LINESIZE() {
        return _SC_LEVEL4_CACHE_LINESIZE;
    }
    private static final int _SC_IPV6 = (int)235L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_IPV6 = 235
     * }
     */
    public static int _SC_IPV6() {
        return _SC_IPV6;
    }
    private static final int _SC_RAW_SOCKETS = (int)236L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_RAW_SOCKETS = 236
     * }
     */
    public static int _SC_RAW_SOCKETS() {
        return _SC_RAW_SOCKETS;
    }
    private static final int _SC_V7_ILP32_OFF32 = (int)237L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_V7_ILP32_OFF32 = 237
     * }
     */
    public static int _SC_V7_ILP32_OFF32() {
        return _SC_V7_ILP32_OFF32;
    }
    private static final int _SC_V7_ILP32_OFFBIG = (int)238L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_V7_ILP32_OFFBIG = 238
     * }
     */
    public static int _SC_V7_ILP32_OFFBIG() {
        return _SC_V7_ILP32_OFFBIG;
    }
    private static final int _SC_V7_LP64_OFF64 = (int)239L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_V7_LP64_OFF64 = 239
     * }
     */
    public static int _SC_V7_LP64_OFF64() {
        return _SC_V7_LP64_OFF64;
    }
    private static final int _SC_V7_LPBIG_OFFBIG = (int)240L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_V7_LPBIG_OFFBIG = 240
     * }
     */
    public static int _SC_V7_LPBIG_OFFBIG() {
        return _SC_V7_LPBIG_OFFBIG;
    }
    private static final int _SC_SS_REPL_MAX = (int)241L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SS_REPL_MAX = 241
     * }
     */
    public static int _SC_SS_REPL_MAX() {
        return _SC_SS_REPL_MAX;
    }
    private static final int _SC_TRACE_EVENT_NAME_MAX = (int)242L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TRACE_EVENT_NAME_MAX = 242
     * }
     */
    public static int _SC_TRACE_EVENT_NAME_MAX() {
        return _SC_TRACE_EVENT_NAME_MAX;
    }
    private static final int _SC_TRACE_NAME_MAX = (int)243L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TRACE_NAME_MAX = 243
     * }
     */
    public static int _SC_TRACE_NAME_MAX() {
        return _SC_TRACE_NAME_MAX;
    }
    private static final int _SC_TRACE_SYS_MAX = (int)244L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TRACE_SYS_MAX = 244
     * }
     */
    public static int _SC_TRACE_SYS_MAX() {
        return _SC_TRACE_SYS_MAX;
    }
    private static final int _SC_TRACE_USER_EVENT_MAX = (int)245L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_TRACE_USER_EVENT_MAX = 245
     * }
     */
    public static int _SC_TRACE_USER_EVENT_MAX() {
        return _SC_TRACE_USER_EVENT_MAX;
    }
    private static final int _SC_XOPEN_STREAMS = (int)246L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_XOPEN_STREAMS = 246
     * }
     */
    public static int _SC_XOPEN_STREAMS() {
        return _SC_XOPEN_STREAMS;
    }
    private static final int _SC_THREAD_ROBUST_PRIO_INHERIT = (int)247L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_ROBUST_PRIO_INHERIT = 247
     * }
     */
    public static int _SC_THREAD_ROBUST_PRIO_INHERIT() {
        return _SC_THREAD_ROBUST_PRIO_INHERIT;
    }
    private static final int _SC_THREAD_ROBUST_PRIO_PROTECT = (int)248L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_THREAD_ROBUST_PRIO_PROTECT = 248
     * }
     */
    public static int _SC_THREAD_ROBUST_PRIO_PROTECT() {
        return _SC_THREAD_ROBUST_PRIO_PROTECT;
    }
    private static final int _SC_MINSIGSTKSZ = (int)249L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_MINSIGSTKSZ = 249
     * }
     */
    public static int _SC_MINSIGSTKSZ() {
        return _SC_MINSIGSTKSZ;
    }
    private static final int _SC_SIGSTKSZ = (int)250L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._SC_SIGSTKSZ = 250
     * }
     */
    public static int _SC_SIGSTKSZ() {
        return _SC_SIGSTKSZ;
    }
    private static final int _CS_PATH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_PATH = 0
     * }
     */
    public static int _CS_PATH() {
        return _CS_PATH;
    }
    private static final int _CS_V6_WIDTH_RESTRICTED_ENVS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_V6_WIDTH_RESTRICTED_ENVS = 1
     * }
     */
    public static int _CS_V6_WIDTH_RESTRICTED_ENVS() {
        return _CS_V6_WIDTH_RESTRICTED_ENVS;
    }
    private static final int _CS_GNU_LIBC_VERSION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_GNU_LIBC_VERSION = 2
     * }
     */
    public static int _CS_GNU_LIBC_VERSION() {
        return _CS_GNU_LIBC_VERSION;
    }
    private static final int _CS_GNU_LIBPTHREAD_VERSION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_GNU_LIBPTHREAD_VERSION = 3
     * }
     */
    public static int _CS_GNU_LIBPTHREAD_VERSION() {
        return _CS_GNU_LIBPTHREAD_VERSION;
    }
    private static final int _CS_V5_WIDTH_RESTRICTED_ENVS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_V5_WIDTH_RESTRICTED_ENVS = 4
     * }
     */
    public static int _CS_V5_WIDTH_RESTRICTED_ENVS() {
        return _CS_V5_WIDTH_RESTRICTED_ENVS;
    }
    private static final int _CS_V7_WIDTH_RESTRICTED_ENVS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_V7_WIDTH_RESTRICTED_ENVS = 5
     * }
     */
    public static int _CS_V7_WIDTH_RESTRICTED_ENVS() {
        return _CS_V7_WIDTH_RESTRICTED_ENVS;
    }
    private static final int _CS_LFS_CFLAGS = (int)1000L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_LFS_CFLAGS = 1000
     * }
     */
    public static int _CS_LFS_CFLAGS() {
        return _CS_LFS_CFLAGS;
    }
    private static final int _CS_LFS_LDFLAGS = (int)1001L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_LFS_LDFLAGS = 1001
     * }
     */
    public static int _CS_LFS_LDFLAGS() {
        return _CS_LFS_LDFLAGS;
    }
    private static final int _CS_LFS_LIBS = (int)1002L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_LFS_LIBS = 1002
     * }
     */
    public static int _CS_LFS_LIBS() {
        return _CS_LFS_LIBS;
    }
    private static final int _CS_LFS_LINTFLAGS = (int)1003L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_LFS_LINTFLAGS = 1003
     * }
     */
    public static int _CS_LFS_LINTFLAGS() {
        return _CS_LFS_LINTFLAGS;
    }
    private static final int _CS_LFS64_CFLAGS = (int)1004L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_LFS64_CFLAGS = 1004
     * }
     */
    public static int _CS_LFS64_CFLAGS() {
        return _CS_LFS64_CFLAGS;
    }
    private static final int _CS_LFS64_LDFLAGS = (int)1005L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_LFS64_LDFLAGS = 1005
     * }
     */
    public static int _CS_LFS64_LDFLAGS() {
        return _CS_LFS64_LDFLAGS;
    }
    private static final int _CS_LFS64_LIBS = (int)1006L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_LFS64_LIBS = 1006
     * }
     */
    public static int _CS_LFS64_LIBS() {
        return _CS_LFS64_LIBS;
    }
    private static final int _CS_LFS64_LINTFLAGS = (int)1007L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_LFS64_LINTFLAGS = 1007
     * }
     */
    public static int _CS_LFS64_LINTFLAGS() {
        return _CS_LFS64_LINTFLAGS;
    }
    private static final int _CS_XBS5_ILP32_OFF32_CFLAGS = (int)1100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_ILP32_OFF32_CFLAGS = 1100
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_CFLAGS() {
        return _CS_XBS5_ILP32_OFF32_CFLAGS;
    }
    private static final int _CS_XBS5_ILP32_OFF32_LDFLAGS = (int)1101L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_ILP32_OFF32_LDFLAGS = 1101
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LDFLAGS() {
        return _CS_XBS5_ILP32_OFF32_LDFLAGS;
    }
    private static final int _CS_XBS5_ILP32_OFF32_LIBS = (int)1102L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_ILP32_OFF32_LIBS = 1102
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LIBS() {
        return _CS_XBS5_ILP32_OFF32_LIBS;
    }
    private static final int _CS_XBS5_ILP32_OFF32_LINTFLAGS = (int)1103L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LINTFLAGS() {
        return _CS_XBS5_ILP32_OFF32_LINTFLAGS;
    }
    private static final int _CS_XBS5_ILP32_OFFBIG_CFLAGS = (int)1104L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_CFLAGS() {
        return _CS_XBS5_ILP32_OFFBIG_CFLAGS;
    }
    private static final int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = (int)1105L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LDFLAGS() {
        return _CS_XBS5_ILP32_OFFBIG_LDFLAGS;
    }
    private static final int _CS_XBS5_ILP32_OFFBIG_LIBS = (int)1106L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_ILP32_OFFBIG_LIBS = 1106
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LIBS() {
        return _CS_XBS5_ILP32_OFFBIG_LIBS;
    }
    private static final int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = (int)1107L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS() {
        return _CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
    }
    private static final int _CS_XBS5_LP64_OFF64_CFLAGS = (int)1108L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_LP64_OFF64_CFLAGS = 1108
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_CFLAGS() {
        return _CS_XBS5_LP64_OFF64_CFLAGS;
    }
    private static final int _CS_XBS5_LP64_OFF64_LDFLAGS = (int)1109L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_LP64_OFF64_LDFLAGS = 1109
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LDFLAGS() {
        return _CS_XBS5_LP64_OFF64_LDFLAGS;
    }
    private static final int _CS_XBS5_LP64_OFF64_LIBS = (int)1110L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_LP64_OFF64_LIBS = 1110
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LIBS() {
        return _CS_XBS5_LP64_OFF64_LIBS;
    }
    private static final int _CS_XBS5_LP64_OFF64_LINTFLAGS = (int)1111L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_LP64_OFF64_LINTFLAGS = 1111
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LINTFLAGS() {
        return _CS_XBS5_LP64_OFF64_LINTFLAGS;
    }
    private static final int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = (int)1112L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_CFLAGS() {
        return _CS_XBS5_LPBIG_OFFBIG_CFLAGS;
    }
    private static final int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = (int)1113L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS() {
        return _CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
    }
    private static final int _CS_XBS5_LPBIG_OFFBIG_LIBS = (int)1114L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_LPBIG_OFFBIG_LIBS = 1114
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LIBS() {
        return _CS_XBS5_LPBIG_OFFBIG_LIBS;
    }
    private static final int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = (int)1115L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS() {
        return _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
    }
    private static final int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = (int)1116L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_CFLAGS() {
        return _CS_POSIX_V6_ILP32_OFF32_CFLAGS;
    }
    private static final int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = (int)1117L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS() {
        return _CS_POSIX_V6_ILP32_OFF32_LDFLAGS;
    }
    private static final int _CS_POSIX_V6_ILP32_OFF32_LIBS = (int)1118L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_ILP32_OFF32_LIBS = 1118
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LIBS() {
        return _CS_POSIX_V6_ILP32_OFF32_LIBS;
    }
    private static final int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = (int)1119L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS() {
        return _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS;
    }
    private static final int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = (int)1120L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS() {
        return _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;
    }
    private static final int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = (int)1121L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS() {
        return _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;
    }
    private static final int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = (int)1122L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LIBS() {
        return _CS_POSIX_V6_ILP32_OFFBIG_LIBS;
    }
    private static final int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = (int)1123L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS() {
        return _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS;
    }
    private static final int _CS_POSIX_V6_LP64_OFF64_CFLAGS = (int)1124L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_CFLAGS() {
        return _CS_POSIX_V6_LP64_OFF64_CFLAGS;
    }
    private static final int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = (int)1125L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LDFLAGS() {
        return _CS_POSIX_V6_LP64_OFF64_LDFLAGS;
    }
    private static final int _CS_POSIX_V6_LP64_OFF64_LIBS = (int)1126L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_LP64_OFF64_LIBS = 1126
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LIBS() {
        return _CS_POSIX_V6_LP64_OFF64_LIBS;
    }
    private static final int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = (int)1127L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS() {
        return _CS_POSIX_V6_LP64_OFF64_LINTFLAGS;
    }
    private static final int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = (int)1128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS() {
        return _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;
    }
    private static final int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = (int)1129L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS() {
        return _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;
    }
    private static final int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = (int)1130L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS() {
        return _CS_POSIX_V6_LPBIG_OFFBIG_LIBS;
    }
    private static final int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = (int)1131L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS() {
        return _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS;
    }
    private static final int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = (int)1132L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_CFLAGS() {
        return _CS_POSIX_V7_ILP32_OFF32_CFLAGS;
    }
    private static final int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = (int)1133L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS() {
        return _CS_POSIX_V7_ILP32_OFF32_LDFLAGS;
    }
    private static final int _CS_POSIX_V7_ILP32_OFF32_LIBS = (int)1134L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_ILP32_OFF32_LIBS = 1134
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_LIBS() {
        return _CS_POSIX_V7_ILP32_OFF32_LIBS;
    }
    private static final int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = (int)1135L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS() {
        return _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS;
    }
    private static final int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = (int)1136L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS() {
        return _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS;
    }
    private static final int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = (int)1137L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS() {
        return _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS;
    }
    private static final int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = (int)1138L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LIBS() {
        return _CS_POSIX_V7_ILP32_OFFBIG_LIBS;
    }
    private static final int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = (int)1139L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139
     * }
     */
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS() {
        return _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS;
    }
    private static final int _CS_POSIX_V7_LP64_OFF64_CFLAGS = (int)1140L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_CFLAGS() {
        return _CS_POSIX_V7_LP64_OFF64_CFLAGS;
    }
    private static final int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = (int)1141L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_LDFLAGS() {
        return _CS_POSIX_V7_LP64_OFF64_LDFLAGS;
    }
    private static final int _CS_POSIX_V7_LP64_OFF64_LIBS = (int)1142L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_LP64_OFF64_LIBS = 1142
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_LIBS() {
        return _CS_POSIX_V7_LP64_OFF64_LIBS;
    }
    private static final int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = (int)1143L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143
     * }
     */
    public static int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS() {
        return _CS_POSIX_V7_LP64_OFF64_LINTFLAGS;
    }
    private static final int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = (int)1144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS() {
        return _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS;
    }
    private static final int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = (int)1145L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS() {
        return _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS;
    }
    private static final int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = (int)1146L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS() {
        return _CS_POSIX_V7_LPBIG_OFFBIG_LIBS;
    }
    private static final int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = (int)1147L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147
     * }
     */
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS() {
        return _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS;
    }
    private static final int _CS_V6_ENV = (int)1148L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_V6_ENV = 1148
     * }
     */
    public static int _CS_V6_ENV() {
        return _CS_V6_ENV;
    }
    private static final int _CS_V7_ENV = (int)1149L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._CS_V7_ENV = 1149
     * }
     */
    public static int _CS_V7_ENV() {
        return _CS_V7_ENV;
    }

    private static class pathconf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pathconf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long pathconf(const char *__path, int __name)
     * }
     */
    public static FunctionDescriptor pathconf$descriptor() {
        return pathconf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long pathconf(const char *__path, int __name)
     * }
     */
    public static MethodHandle pathconf$handle() {
        return pathconf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long pathconf(const char *__path, int __name)
     * }
     */
    public static long pathconf(MemorySegment __path, int __name) {
        var mh$ = pathconf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pathconf", __path, __name);
            }
            return (long)mh$.invokeExact(__path, __name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fpathconf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fpathconf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long fpathconf(int __fd, int __name)
     * }
     */
    public static FunctionDescriptor fpathconf$descriptor() {
        return fpathconf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long fpathconf(int __fd, int __name)
     * }
     */
    public static MethodHandle fpathconf$handle() {
        return fpathconf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long fpathconf(int __fd, int __name)
     * }
     */
    public static long fpathconf(int __fd, int __name) {
        var mh$ = fpathconf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fpathconf", __fd, __name);
            }
            return (long)mh$.invokeExact(__fd, __name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sysconf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sysconf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long sysconf(int __name)
     * }
     */
    public static FunctionDescriptor sysconf$descriptor() {
        return sysconf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long sysconf(int __name)
     * }
     */
    public static MethodHandle sysconf$handle() {
        return sysconf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long sysconf(int __name)
     * }
     */
    public static long sysconf(int __name) {
        var mh$ = sysconf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sysconf", __name);
            }
            return (long)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class confstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("confstr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t confstr(int __name, char *__buf, size_t __len)
     * }
     */
    public static FunctionDescriptor confstr$descriptor() {
        return confstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t confstr(int __name, char *__buf, size_t __len)
     * }
     */
    public static MethodHandle confstr$handle() {
        return confstr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern size_t confstr(int __name, char *__buf, size_t __len)
     * }
     */
    public static long confstr(int __name, MemorySegment __buf, long __len) {
        var mh$ = confstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("confstr", __name, __buf, __len);
            }
            return (long)mh$.invokeExact(__name, __buf, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getpid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getpid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __pid_t getpid()
     * }
     */
    public static FunctionDescriptor getpid$descriptor() {
        return getpid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __pid_t getpid()
     * }
     */
    public static MethodHandle getpid$handle() {
        return getpid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __pid_t getpid()
     * }
     */
    public static int getpid() {
        var mh$ = getpid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getpid");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getppid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getppid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __pid_t getppid()
     * }
     */
    public static FunctionDescriptor getppid$descriptor() {
        return getppid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __pid_t getppid()
     * }
     */
    public static MethodHandle getppid$handle() {
        return getppid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __pid_t getppid()
     * }
     */
    public static int getppid() {
        var mh$ = getppid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getppid");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getpgrp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getpgrp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __pid_t getpgrp()
     * }
     */
    public static FunctionDescriptor getpgrp$descriptor() {
        return getpgrp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __pid_t getpgrp()
     * }
     */
    public static MethodHandle getpgrp$handle() {
        return getpgrp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __pid_t getpgrp()
     * }
     */
    public static int getpgrp() {
        var mh$ = getpgrp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getpgrp");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __getpgid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__getpgid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __pid_t __getpgid(__pid_t __pid)
     * }
     */
    public static FunctionDescriptor __getpgid$descriptor() {
        return __getpgid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __pid_t __getpgid(__pid_t __pid)
     * }
     */
    public static MethodHandle __getpgid$handle() {
        return __getpgid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __pid_t __getpgid(__pid_t __pid)
     * }
     */
    public static int __getpgid(int __pid) {
        var mh$ = __getpgid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__getpgid", __pid);
            }
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getpgid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getpgid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __pid_t getpgid(__pid_t __pid)
     * }
     */
    public static FunctionDescriptor getpgid$descriptor() {
        return getpgid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __pid_t getpgid(__pid_t __pid)
     * }
     */
    public static MethodHandle getpgid$handle() {
        return getpgid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __pid_t getpgid(__pid_t __pid)
     * }
     */
    public static int getpgid(int __pid) {
        var mh$ = getpgid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getpgid", __pid);
            }
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setpgid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setpgid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setpgid(__pid_t __pid, __pid_t __pgid)
     * }
     */
    public static FunctionDescriptor setpgid$descriptor() {
        return setpgid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setpgid(__pid_t __pid, __pid_t __pgid)
     * }
     */
    public static MethodHandle setpgid$handle() {
        return setpgid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setpgid(__pid_t __pid, __pid_t __pgid)
     * }
     */
    public static int setpgid(int __pid, int __pgid) {
        var mh$ = setpgid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setpgid", __pid, __pgid);
            }
            return (int)mh$.invokeExact(__pid, __pgid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setpgrp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setpgrp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setpgrp()
     * }
     */
    public static FunctionDescriptor setpgrp$descriptor() {
        return setpgrp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setpgrp()
     * }
     */
    public static MethodHandle setpgrp$handle() {
        return setpgrp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setpgrp()
     * }
     */
    public static int setpgrp() {
        var mh$ = setpgrp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setpgrp");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setsid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setsid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __pid_t setsid()
     * }
     */
    public static FunctionDescriptor setsid$descriptor() {
        return setsid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __pid_t setsid()
     * }
     */
    public static MethodHandle setsid$handle() {
        return setsid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __pid_t setsid()
     * }
     */
    public static int setsid() {
        var mh$ = setsid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setsid");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getsid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getsid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __pid_t getsid(__pid_t __pid)
     * }
     */
    public static FunctionDescriptor getsid$descriptor() {
        return getsid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __pid_t getsid(__pid_t __pid)
     * }
     */
    public static MethodHandle getsid$handle() {
        return getsid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __pid_t getsid(__pid_t __pid)
     * }
     */
    public static int getsid(int __pid) {
        var mh$ = getsid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getsid", __pid);
            }
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getuid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __uid_t getuid()
     * }
     */
    public static FunctionDescriptor getuid$descriptor() {
        return getuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __uid_t getuid()
     * }
     */
    public static MethodHandle getuid$handle() {
        return getuid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __uid_t getuid()
     * }
     */
    public static int getuid() {
        var mh$ = getuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getuid");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class geteuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("geteuid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __uid_t geteuid()
     * }
     */
    public static FunctionDescriptor geteuid$descriptor() {
        return geteuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __uid_t geteuid()
     * }
     */
    public static MethodHandle geteuid$handle() {
        return geteuid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __uid_t geteuid()
     * }
     */
    public static int geteuid() {
        var mh$ = geteuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("geteuid");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getgid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getgid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __gid_t getgid()
     * }
     */
    public static FunctionDescriptor getgid$descriptor() {
        return getgid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __gid_t getgid()
     * }
     */
    public static MethodHandle getgid$handle() {
        return getgid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __gid_t getgid()
     * }
     */
    public static int getgid() {
        var mh$ = getgid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getgid");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getegid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getegid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __gid_t getegid()
     * }
     */
    public static FunctionDescriptor getegid$descriptor() {
        return getegid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __gid_t getegid()
     * }
     */
    public static MethodHandle getegid$handle() {
        return getegid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __gid_t getegid()
     * }
     */
    public static int getegid() {
        var mh$ = getegid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getegid");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getgroups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getgroups"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getgroups(int __size, __gid_t __list[])
     * }
     */
    public static FunctionDescriptor getgroups$descriptor() {
        return getgroups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getgroups(int __size, __gid_t __list[])
     * }
     */
    public static MethodHandle getgroups$handle() {
        return getgroups.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getgroups(int __size, __gid_t __list[])
     * }
     */
    public static int getgroups(int __size, MemorySegment __list) {
        var mh$ = getgroups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getgroups", __size, __list);
            }
            return (int)mh$.invokeExact(__size, __list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setuid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setuid(__uid_t __uid)
     * }
     */
    public static FunctionDescriptor setuid$descriptor() {
        return setuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setuid(__uid_t __uid)
     * }
     */
    public static MethodHandle setuid$handle() {
        return setuid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setuid(__uid_t __uid)
     * }
     */
    public static int setuid(int __uid) {
        var mh$ = setuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setuid", __uid);
            }
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setreuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setreuid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setreuid(__uid_t __ruid, __uid_t __euid)
     * }
     */
    public static FunctionDescriptor setreuid$descriptor() {
        return setreuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setreuid(__uid_t __ruid, __uid_t __euid)
     * }
     */
    public static MethodHandle setreuid$handle() {
        return setreuid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setreuid(__uid_t __ruid, __uid_t __euid)
     * }
     */
    public static int setreuid(int __ruid, int __euid) {
        var mh$ = setreuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setreuid", __ruid, __euid);
            }
            return (int)mh$.invokeExact(__ruid, __euid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class seteuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("seteuid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int seteuid(__uid_t __uid)
     * }
     */
    public static FunctionDescriptor seteuid$descriptor() {
        return seteuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int seteuid(__uid_t __uid)
     * }
     */
    public static MethodHandle seteuid$handle() {
        return seteuid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int seteuid(__uid_t __uid)
     * }
     */
    public static int seteuid(int __uid) {
        var mh$ = seteuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("seteuid", __uid);
            }
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setgid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setgid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setgid(__gid_t __gid)
     * }
     */
    public static FunctionDescriptor setgid$descriptor() {
        return setgid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setgid(__gid_t __gid)
     * }
     */
    public static MethodHandle setgid$handle() {
        return setgid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setgid(__gid_t __gid)
     * }
     */
    public static int setgid(int __gid) {
        var mh$ = setgid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setgid", __gid);
            }
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setregid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setregid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setregid(__gid_t __rgid, __gid_t __egid)
     * }
     */
    public static FunctionDescriptor setregid$descriptor() {
        return setregid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setregid(__gid_t __rgid, __gid_t __egid)
     * }
     */
    public static MethodHandle setregid$handle() {
        return setregid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setregid(__gid_t __rgid, __gid_t __egid)
     * }
     */
    public static int setregid(int __rgid, int __egid) {
        var mh$ = setregid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setregid", __rgid, __egid);
            }
            return (int)mh$.invokeExact(__rgid, __egid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setegid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setegid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setegid(__gid_t __gid)
     * }
     */
    public static FunctionDescriptor setegid$descriptor() {
        return setegid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setegid(__gid_t __gid)
     * }
     */
    public static MethodHandle setegid$handle() {
        return setegid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setegid(__gid_t __gid)
     * }
     */
    public static int setegid(int __gid) {
        var mh$ = setegid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setegid", __gid);
            }
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fork {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fork"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __pid_t fork()
     * }
     */
    public static FunctionDescriptor fork$descriptor() {
        return fork.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __pid_t fork()
     * }
     */
    public static MethodHandle fork$handle() {
        return fork.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __pid_t fork()
     * }
     */
    public static int fork() {
        var mh$ = fork.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fork");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vfork {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("vfork"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vfork()
     * }
     */
    public static FunctionDescriptor vfork$descriptor() {
        return vfork.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vfork()
     * }
     */
    public static MethodHandle vfork$handle() {
        return vfork.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int vfork()
     * }
     */
    public static int vfork() {
        var mh$ = vfork.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfork");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ttyname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ttyname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *ttyname(int __fd)
     * }
     */
    public static FunctionDescriptor ttyname$descriptor() {
        return ttyname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *ttyname(int __fd)
     * }
     */
    public static MethodHandle ttyname$handle() {
        return ttyname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *ttyname(int __fd)
     * }
     */
    public static MemorySegment ttyname(int __fd) {
        var mh$ = ttyname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ttyname", __fd);
            }
            return (MemorySegment)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ttyname_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ttyname_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ttyname_r(int __fd, char *__buf, size_t __buflen)
     * }
     */
    public static FunctionDescriptor ttyname_r$descriptor() {
        return ttyname_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ttyname_r(int __fd, char *__buf, size_t __buflen)
     * }
     */
    public static MethodHandle ttyname_r$handle() {
        return ttyname_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ttyname_r(int __fd, char *__buf, size_t __buflen)
     * }
     */
    public static int ttyname_r(int __fd, MemorySegment __buf, long __buflen) {
        var mh$ = ttyname_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ttyname_r", __fd, __buf, __buflen);
            }
            return (int)mh$.invokeExact(__fd, __buf, __buflen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class isatty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("isatty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int isatty(int __fd)
     * }
     */
    public static FunctionDescriptor isatty$descriptor() {
        return isatty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int isatty(int __fd)
     * }
     */
    public static MethodHandle isatty$handle() {
        return isatty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int isatty(int __fd)
     * }
     */
    public static int isatty(int __fd) {
        var mh$ = isatty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("isatty", __fd);
            }
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ttyslot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ttyslot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ttyslot()
     * }
     */
    public static FunctionDescriptor ttyslot$descriptor() {
        return ttyslot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ttyslot()
     * }
     */
    public static MethodHandle ttyslot$handle() {
        return ttyslot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ttyslot()
     * }
     */
    public static int ttyslot() {
        var mh$ = ttyslot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ttyslot");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int link(const char *__from, const char *__to)
     * }
     */
    public static FunctionDescriptor link$descriptor() {
        return link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int link(const char *__from, const char *__to)
     * }
     */
    public static MethodHandle link$handle() {
        return link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int link(const char *__from, const char *__to)
     * }
     */
    public static int link(MemorySegment __from, MemorySegment __to) {
        var mh$ = link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("link", __from, __to);
            }
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class linkat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("linkat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags)
     * }
     */
    public static FunctionDescriptor linkat$descriptor() {
        return linkat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags)
     * }
     */
    public static MethodHandle linkat$handle() {
        return linkat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int linkat(int __fromfd, const char *__from, int __tofd, const char *__to, int __flags)
     * }
     */
    public static int linkat(int __fromfd, MemorySegment __from, int __tofd, MemorySegment __to, int __flags) {
        var mh$ = linkat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("linkat", __fromfd, __from, __tofd, __to, __flags);
            }
            return (int)mh$.invokeExact(__fromfd, __from, __tofd, __to, __flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class symlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("symlink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int symlink(const char *__from, const char *__to)
     * }
     */
    public static FunctionDescriptor symlink$descriptor() {
        return symlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int symlink(const char *__from, const char *__to)
     * }
     */
    public static MethodHandle symlink$handle() {
        return symlink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int symlink(const char *__from, const char *__to)
     * }
     */
    public static int symlink(MemorySegment __from, MemorySegment __to) {
        var mh$ = symlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("symlink", __from, __to);
            }
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class readlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("readlink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t readlink(const char *restrict __path, char *restrict __buf, size_t __len)
     * }
     */
    public static FunctionDescriptor readlink$descriptor() {
        return readlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t readlink(const char *restrict __path, char *restrict __buf, size_t __len)
     * }
     */
    public static MethodHandle readlink$handle() {
        return readlink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t readlink(const char *restrict __path, char *restrict __buf, size_t __len)
     * }
     */
    public static long readlink(MemorySegment __path, MemorySegment __buf, long __len) {
        var mh$ = readlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("readlink", __path, __buf, __len);
            }
            return (long)mh$.invokeExact(__path, __buf, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class symlinkat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("symlinkat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int symlinkat(const char *__from, int __tofd, const char *__to)
     * }
     */
    public static FunctionDescriptor symlinkat$descriptor() {
        return symlinkat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int symlinkat(const char *__from, int __tofd, const char *__to)
     * }
     */
    public static MethodHandle symlinkat$handle() {
        return symlinkat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int symlinkat(const char *__from, int __tofd, const char *__to)
     * }
     */
    public static int symlinkat(MemorySegment __from, int __tofd, MemorySegment __to) {
        var mh$ = symlinkat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("symlinkat", __from, __tofd, __to);
            }
            return (int)mh$.invokeExact(__from, __tofd, __to);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class readlinkat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("readlinkat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ssize_t readlinkat(int __fd, const char *restrict __path, char *restrict __buf, size_t __len)
     * }
     */
    public static FunctionDescriptor readlinkat$descriptor() {
        return readlinkat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ssize_t readlinkat(int __fd, const char *restrict __path, char *restrict __buf, size_t __len)
     * }
     */
    public static MethodHandle readlinkat$handle() {
        return readlinkat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern ssize_t readlinkat(int __fd, const char *restrict __path, char *restrict __buf, size_t __len)
     * }
     */
    public static long readlinkat(int __fd, MemorySegment __path, MemorySegment __buf, long __len) {
        var mh$ = readlinkat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("readlinkat", __fd, __path, __buf, __len);
            }
            return (long)mh$.invokeExact(__fd, __path, __buf, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class unlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("unlink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int unlink(const char *__name)
     * }
     */
    public static FunctionDescriptor unlink$descriptor() {
        return unlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int unlink(const char *__name)
     * }
     */
    public static MethodHandle unlink$handle() {
        return unlink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int unlink(const char *__name)
     * }
     */
    public static int unlink(MemorySegment __name) {
        var mh$ = unlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("unlink", __name);
            }
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class unlinkat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("unlinkat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int unlinkat(int __fd, const char *__name, int __flag)
     * }
     */
    public static FunctionDescriptor unlinkat$descriptor() {
        return unlinkat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int unlinkat(int __fd, const char *__name, int __flag)
     * }
     */
    public static MethodHandle unlinkat$handle() {
        return unlinkat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int unlinkat(int __fd, const char *__name, int __flag)
     * }
     */
    public static int unlinkat(int __fd, MemorySegment __name, int __flag) {
        var mh$ = unlinkat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("unlinkat", __fd, __name, __flag);
            }
            return (int)mh$.invokeExact(__fd, __name, __flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rmdir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("rmdir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rmdir(const char *__path)
     * }
     */
    public static FunctionDescriptor rmdir$descriptor() {
        return rmdir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rmdir(const char *__path)
     * }
     */
    public static MethodHandle rmdir$handle() {
        return rmdir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int rmdir(const char *__path)
     * }
     */
    public static int rmdir(MemorySegment __path) {
        var mh$ = rmdir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rmdir", __path);
            }
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcgetpgrp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("tcgetpgrp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __pid_t tcgetpgrp(int __fd)
     * }
     */
    public static FunctionDescriptor tcgetpgrp$descriptor() {
        return tcgetpgrp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __pid_t tcgetpgrp(int __fd)
     * }
     */
    public static MethodHandle tcgetpgrp$handle() {
        return tcgetpgrp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __pid_t tcgetpgrp(int __fd)
     * }
     */
    public static int tcgetpgrp(int __fd) {
        var mh$ = tcgetpgrp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcgetpgrp", __fd);
            }
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcsetpgrp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("tcsetpgrp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int tcsetpgrp(int __fd, __pid_t __pgrp_id)
     * }
     */
    public static FunctionDescriptor tcsetpgrp$descriptor() {
        return tcsetpgrp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int tcsetpgrp(int __fd, __pid_t __pgrp_id)
     * }
     */
    public static MethodHandle tcsetpgrp$handle() {
        return tcsetpgrp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int tcsetpgrp(int __fd, __pid_t __pgrp_id)
     * }
     */
    public static int tcsetpgrp(int __fd, int __pgrp_id) {
        var mh$ = tcsetpgrp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcsetpgrp", __fd, __pgrp_id);
            }
            return (int)mh$.invokeExact(__fd, __pgrp_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getlogin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getlogin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *getlogin()
     * }
     */
    public static FunctionDescriptor getlogin$descriptor() {
        return getlogin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *getlogin()
     * }
     */
    public static MethodHandle getlogin$handle() {
        return getlogin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *getlogin()
     * }
     */
    public static MemorySegment getlogin() {
        var mh$ = getlogin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getlogin");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getlogin_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getlogin_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getlogin_r(char *__name, size_t __name_len)
     * }
     */
    public static FunctionDescriptor getlogin_r$descriptor() {
        return getlogin_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getlogin_r(char *__name, size_t __name_len)
     * }
     */
    public static MethodHandle getlogin_r$handle() {
        return getlogin_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getlogin_r(char *__name, size_t __name_len)
     * }
     */
    public static int getlogin_r(MemorySegment __name, long __name_len) {
        var mh$ = getlogin_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getlogin_r", __name, __name_len);
            }
            return (int)mh$.invokeExact(__name, __name_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setlogin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setlogin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setlogin(const char *__name)
     * }
     */
    public static FunctionDescriptor setlogin$descriptor() {
        return setlogin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setlogin(const char *__name)
     * }
     */
    public static MethodHandle setlogin$handle() {
        return setlogin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setlogin(const char *__name)
     * }
     */
    public static int setlogin(MemorySegment __name) {
        var mh$ = setlogin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setlogin", __name);
            }
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class optarg$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("optarg").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern char *optarg
     * }
     */
    public static AddressLayout optarg$layout() {
        return optarg$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern char *optarg
     * }
     */
    public static MemorySegment optarg$segment() {
        return optarg$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern char *optarg
     * }
     */
    public static MemorySegment optarg() {
        return optarg$constants.SEGMENT.get(optarg$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern char *optarg
     * }
     */
    public static void optarg(MemorySegment varValue) {
        optarg$constants.SEGMENT.set(optarg$constants.LAYOUT, 0L, varValue);
    }

    private static class optind$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("optind").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int optind
     * }
     */
    public static OfInt optind$layout() {
        return optind$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int optind
     * }
     */
    public static MemorySegment optind$segment() {
        return optind$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int optind
     * }
     */
    public static int optind() {
        return optind$constants.SEGMENT.get(optind$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int optind
     * }
     */
    public static void optind(int varValue) {
        optind$constants.SEGMENT.set(optind$constants.LAYOUT, 0L, varValue);
    }

    private static class opterr$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("opterr").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int opterr
     * }
     */
    public static OfInt opterr$layout() {
        return opterr$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int opterr
     * }
     */
    public static MemorySegment opterr$segment() {
        return opterr$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int opterr
     * }
     */
    public static int opterr() {
        return opterr$constants.SEGMENT.get(opterr$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int opterr
     * }
     */
    public static void opterr(int varValue) {
        opterr$constants.SEGMENT.set(opterr$constants.LAYOUT, 0L, varValue);
    }

    private static class optopt$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("optopt").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int optopt
     * }
     */
    public static OfInt optopt$layout() {
        return optopt$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int optopt
     * }
     */
    public static MemorySegment optopt$segment() {
        return optopt$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int optopt
     * }
     */
    public static int optopt() {
        return optopt$constants.SEGMENT.get(optopt$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int optopt
     * }
     */
    public static void optopt(int varValue) {
        optopt$constants.SEGMENT.set(optopt$constants.LAYOUT, 0L, varValue);
    }

    private static class getopt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getopt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getopt(int ___argc, char *const *___argv, const char *__shortopts)
     * }
     */
    public static FunctionDescriptor getopt$descriptor() {
        return getopt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getopt(int ___argc, char *const *___argv, const char *__shortopts)
     * }
     */
    public static MethodHandle getopt$handle() {
        return getopt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getopt(int ___argc, char *const *___argv, const char *__shortopts)
     * }
     */
    public static int getopt(int ___argc, MemorySegment ___argv, MemorySegment __shortopts) {
        var mh$ = getopt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getopt", ___argc, ___argv, __shortopts);
            }
            return (int)mh$.invokeExact(___argc, ___argv, __shortopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gethostname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gethostname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gethostname(char *__name, size_t __len)
     * }
     */
    public static FunctionDescriptor gethostname$descriptor() {
        return gethostname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gethostname(char *__name, size_t __len)
     * }
     */
    public static MethodHandle gethostname$handle() {
        return gethostname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gethostname(char *__name, size_t __len)
     * }
     */
    public static int gethostname(MemorySegment __name, long __len) {
        var mh$ = gethostname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gethostname", __name, __len);
            }
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sethostname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sethostname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sethostname(const char *__name, size_t __len)
     * }
     */
    public static FunctionDescriptor sethostname$descriptor() {
        return sethostname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sethostname(const char *__name, size_t __len)
     * }
     */
    public static MethodHandle sethostname$handle() {
        return sethostname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sethostname(const char *__name, size_t __len)
     * }
     */
    public static int sethostname(MemorySegment __name, long __len) {
        var mh$ = sethostname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sethostname", __name, __len);
            }
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sethostid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sethostid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sethostid(long __id)
     * }
     */
    public static FunctionDescriptor sethostid$descriptor() {
        return sethostid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sethostid(long __id)
     * }
     */
    public static MethodHandle sethostid$handle() {
        return sethostid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sethostid(long __id)
     * }
     */
    public static int sethostid(long __id) {
        var mh$ = sethostid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sethostid", __id);
            }
            return (int)mh$.invokeExact(__id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getdomainname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getdomainname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getdomainname(char *__name, size_t __len)
     * }
     */
    public static FunctionDescriptor getdomainname$descriptor() {
        return getdomainname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getdomainname(char *__name, size_t __len)
     * }
     */
    public static MethodHandle getdomainname$handle() {
        return getdomainname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getdomainname(char *__name, size_t __len)
     * }
     */
    public static int getdomainname(MemorySegment __name, long __len) {
        var mh$ = getdomainname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getdomainname", __name, __len);
            }
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setdomainname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setdomainname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setdomainname(const char *__name, size_t __len)
     * }
     */
    public static FunctionDescriptor setdomainname$descriptor() {
        return setdomainname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setdomainname(const char *__name, size_t __len)
     * }
     */
    public static MethodHandle setdomainname$handle() {
        return setdomainname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setdomainname(const char *__name, size_t __len)
     * }
     */
    public static int setdomainname(MemorySegment __name, long __len) {
        var mh$ = setdomainname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setdomainname", __name, __len);
            }
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vhangup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("vhangup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vhangup()
     * }
     */
    public static FunctionDescriptor vhangup$descriptor() {
        return vhangup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vhangup()
     * }
     */
    public static MethodHandle vhangup$handle() {
        return vhangup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int vhangup()
     * }
     */
    public static int vhangup() {
        var mh$ = vhangup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vhangup");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class revoke {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("revoke"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int revoke(const char *__file)
     * }
     */
    public static FunctionDescriptor revoke$descriptor() {
        return revoke.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int revoke(const char *__file)
     * }
     */
    public static MethodHandle revoke$handle() {
        return revoke.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int revoke(const char *__file)
     * }
     */
    public static int revoke(MemorySegment __file) {
        var mh$ = revoke.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("revoke", __file);
            }
            return (int)mh$.invokeExact(__file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class profil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("profil"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int profil(unsigned short *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale)
     * }
     */
    public static FunctionDescriptor profil$descriptor() {
        return profil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int profil(unsigned short *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale)
     * }
     */
    public static MethodHandle profil$handle() {
        return profil.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int profil(unsigned short *__sample_buffer, size_t __size, size_t __offset, unsigned int __scale)
     * }
     */
    public static int profil(MemorySegment __sample_buffer, long __size, long __offset, int __scale) {
        var mh$ = profil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("profil", __sample_buffer, __size, __offset, __scale);
            }
            return (int)mh$.invokeExact(__sample_buffer, __size, __offset, __scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class acct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("acct"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int acct(const char *__name)
     * }
     */
    public static FunctionDescriptor acct$descriptor() {
        return acct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int acct(const char *__name)
     * }
     */
    public static MethodHandle acct$handle() {
        return acct.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int acct(const char *__name)
     * }
     */
    public static int acct(MemorySegment __name) {
        var mh$ = acct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("acct", __name);
            }
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getusershell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getusershell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *getusershell()
     * }
     */
    public static FunctionDescriptor getusershell$descriptor() {
        return getusershell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *getusershell()
     * }
     */
    public static MethodHandle getusershell$handle() {
        return getusershell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *getusershell()
     * }
     */
    public static MemorySegment getusershell() {
        var mh$ = getusershell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getusershell");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class endusershell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("endusershell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void endusershell()
     * }
     */
    public static FunctionDescriptor endusershell$descriptor() {
        return endusershell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void endusershell()
     * }
     */
    public static MethodHandle endusershell$handle() {
        return endusershell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void endusershell()
     * }
     */
    public static void endusershell() {
        var mh$ = endusershell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("endusershell");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setusershell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setusershell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setusershell()
     * }
     */
    public static FunctionDescriptor setusershell$descriptor() {
        return setusershell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setusershell()
     * }
     */
    public static MethodHandle setusershell$handle() {
        return setusershell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void setusershell()
     * }
     */
    public static void setusershell() {
        var mh$ = setusershell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setusershell");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class daemon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("daemon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int daemon(int __nochdir, int __noclose)
     * }
     */
    public static FunctionDescriptor daemon$descriptor() {
        return daemon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int daemon(int __nochdir, int __noclose)
     * }
     */
    public static MethodHandle daemon$handle() {
        return daemon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int daemon(int __nochdir, int __noclose)
     * }
     */
    public static int daemon(int __nochdir, int __noclose) {
        var mh$ = daemon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("daemon", __nochdir, __noclose);
            }
            return (int)mh$.invokeExact(__nochdir, __noclose);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class chroot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("chroot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int chroot(const char *__path)
     * }
     */
    public static FunctionDescriptor chroot$descriptor() {
        return chroot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int chroot(const char *__path)
     * }
     */
    public static MethodHandle chroot$handle() {
        return chroot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int chroot(const char *__path)
     * }
     */
    public static int chroot(MemorySegment __path) {
        var mh$ = chroot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("chroot", __path);
            }
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getpass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getpass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *getpass(const char *__prompt)
     * }
     */
    public static FunctionDescriptor getpass$descriptor() {
        return getpass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *getpass(const char *__prompt)
     * }
     */
    public static MethodHandle getpass$handle() {
        return getpass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *getpass(const char *__prompt)
     * }
     */
    public static MemorySegment getpass(MemorySegment __prompt) {
        var mh$ = getpass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getpass", __prompt);
            }
            return (MemorySegment)mh$.invokeExact(__prompt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fsync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fsync(int __fd)
     * }
     */
    public static FunctionDescriptor fsync$descriptor() {
        return fsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fsync(int __fd)
     * }
     */
    public static MethodHandle fsync$handle() {
        return fsync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fsync(int __fd)
     * }
     */
    public static int fsync(int __fd) {
        var mh$ = fsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fsync", __fd);
            }
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gethostid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gethostid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long gethostid()
     * }
     */
    public static FunctionDescriptor gethostid$descriptor() {
        return gethostid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long gethostid()
     * }
     */
    public static MethodHandle gethostid$handle() {
        return gethostid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long gethostid()
     * }
     */
    public static long gethostid() {
        var mh$ = gethostid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gethostid");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void sync()
     * }
     */
    public static FunctionDescriptor sync$descriptor() {
        return sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void sync()
     * }
     */
    public static MethodHandle sync$handle() {
        return sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void sync()
     * }
     */
    public static void sync() {
        var mh$ = sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sync");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getpagesize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getpagesize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getpagesize()
     * }
     */
    public static FunctionDescriptor getpagesize$descriptor() {
        return getpagesize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getpagesize()
     * }
     */
    public static MethodHandle getpagesize$handle() {
        return getpagesize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getpagesize()
     * }
     */
    public static int getpagesize() {
        var mh$ = getpagesize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getpagesize");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getdtablesize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getdtablesize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getdtablesize()
     * }
     */
    public static FunctionDescriptor getdtablesize$descriptor() {
        return getdtablesize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getdtablesize()
     * }
     */
    public static MethodHandle getdtablesize$handle() {
        return getdtablesize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getdtablesize()
     * }
     */
    public static int getdtablesize() {
        var mh$ = getdtablesize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getdtablesize");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class truncate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("truncate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int truncate(const char *__file, __off_t __length)
     * }
     */
    public static FunctionDescriptor truncate$descriptor() {
        return truncate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int truncate(const char *__file, __off_t __length)
     * }
     */
    public static MethodHandle truncate$handle() {
        return truncate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int truncate(const char *__file, __off_t __length)
     * }
     */
    public static int truncate(MemorySegment __file, long __length) {
        var mh$ = truncate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("truncate", __file, __length);
            }
            return (int)mh$.invokeExact(__file, __length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftruncate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ftruncate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ftruncate(int __fd, __off_t __length)
     * }
     */
    public static FunctionDescriptor ftruncate$descriptor() {
        return ftruncate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ftruncate(int __fd, __off_t __length)
     * }
     */
    public static MethodHandle ftruncate$handle() {
        return ftruncate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ftruncate(int __fd, __off_t __length)
     * }
     */
    public static int ftruncate(int __fd, long __length) {
        var mh$ = ftruncate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftruncate", __fd, __length);
            }
            return (int)mh$.invokeExact(__fd, __length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class brk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("brk"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int brk(void *__addr)
     * }
     */
    public static FunctionDescriptor brk$descriptor() {
        return brk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int brk(void *__addr)
     * }
     */
    public static MethodHandle brk$handle() {
        return brk.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int brk(void *__addr)
     * }
     */
    public static int brk(MemorySegment __addr) {
        var mh$ = brk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("brk", __addr);
            }
            return (int)mh$.invokeExact(__addr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sbrk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sbrk"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *sbrk(intptr_t __delta)
     * }
     */
    public static FunctionDescriptor sbrk$descriptor() {
        return sbrk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *sbrk(intptr_t __delta)
     * }
     */
    public static MethodHandle sbrk$handle() {
        return sbrk.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *sbrk(intptr_t __delta)
     * }
     */
    public static MemorySegment sbrk(long __delta) {
        var mh$ = sbrk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sbrk", __delta);
            }
            return (MemorySegment)mh$.invokeExact(__delta);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern long syscall(long __sysno, ...)
     * }
     */
    public static class syscall {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_LONG,
                app_indicator_h.C_LONG
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("syscall");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private syscall(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern long syscall(long __sysno, ...)
         * }
         */
        public static syscall makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new syscall(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public long apply(long __sysno, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("syscall", __sysno, x1);
                }
                return (long)spreader.invokeExact(__sysno, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class lockf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("lockf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lockf(int __fd, int __cmd, __off_t __len)
     * }
     */
    public static FunctionDescriptor lockf$descriptor() {
        return lockf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lockf(int __fd, int __cmd, __off_t __len)
     * }
     */
    public static MethodHandle lockf$handle() {
        return lockf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int lockf(int __fd, int __cmd, __off_t __len)
     * }
     */
    public static int lockf(int __fd, int __cmd, long __len) {
        var mh$ = lockf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lockf", __fd, __cmd, __len);
            }
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdatasync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fdatasync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fdatasync(int __fildes)
     * }
     */
    public static FunctionDescriptor fdatasync$descriptor() {
        return fdatasync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fdatasync(int __fildes)
     * }
     */
    public static MethodHandle fdatasync$handle() {
        return fdatasync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fdatasync(int __fildes)
     * }
     */
    public static int fdatasync(int __fildes) {
        var mh$ = fdatasync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdatasync", __fildes);
            }
            return (int)mh$.invokeExact(__fildes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class crypt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("crypt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *crypt(const char *__key, const char *__salt)
     * }
     */
    public static FunctionDescriptor crypt$descriptor() {
        return crypt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *crypt(const char *__key, const char *__salt)
     * }
     */
    public static MethodHandle crypt$handle() {
        return crypt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *crypt(const char *__key, const char *__salt)
     * }
     */
    public static MemorySegment crypt(MemorySegment __key, MemorySegment __salt) {
        var mh$ = crypt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("crypt", __key, __salt);
            }
            return (MemorySegment)mh$.invokeExact(__key, __salt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getentropy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getentropy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getentropy(void *__buffer, size_t __length)
     * }
     */
    public static FunctionDescriptor getentropy$descriptor() {
        return getentropy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getentropy(void *__buffer, size_t __length)
     * }
     */
    public static MethodHandle getentropy$handle() {
        return getentropy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * int getentropy(void *__buffer, size_t __length)
     * }
     */
    public static int getentropy(MemorySegment __buffer, long __length) {
        var mh$ = getentropy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getentropy", __buffer, __length);
            }
            return (int)mh$.invokeExact(__buffer, __length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_credentials_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_credentials_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_credentials_get_type()
     * }
     */
    public static FunctionDescriptor g_credentials_get_type$descriptor() {
        return g_credentials_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_credentials_get_type()
     * }
     */
    public static MethodHandle g_credentials_get_type$handle() {
        return g_credentials_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_credentials_get_type()
     * }
     */
    public static long g_credentials_get_type() {
        var mh$ = g_credentials_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_credentials_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_credentials_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_credentials_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCredentials *g_credentials_new()
     * }
     */
    public static FunctionDescriptor g_credentials_new$descriptor() {
        return g_credentials_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCredentials *g_credentials_new()
     * }
     */
    public static MethodHandle g_credentials_new$handle() {
        return g_credentials_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCredentials *g_credentials_new()
     * }
     */
    public static MemorySegment g_credentials_new() {
        var mh$ = g_credentials_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_credentials_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_credentials_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_credentials_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_credentials_to_string(GCredentials *credentials)
     * }
     */
    public static FunctionDescriptor g_credentials_to_string$descriptor() {
        return g_credentials_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_credentials_to_string(GCredentials *credentials)
     * }
     */
    public static MethodHandle g_credentials_to_string$handle() {
        return g_credentials_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_credentials_to_string(GCredentials *credentials)
     * }
     */
    public static MemorySegment g_credentials_to_string(MemorySegment credentials) {
        var mh$ = g_credentials_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_credentials_to_string", credentials);
            }
            return (MemorySegment)mh$.invokeExact(credentials);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_credentials_get_native {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_credentials_get_native"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_credentials_get_native(GCredentials *credentials, GCredentialsType native_type)
     * }
     */
    public static FunctionDescriptor g_credentials_get_native$descriptor() {
        return g_credentials_get_native.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_credentials_get_native(GCredentials *credentials, GCredentialsType native_type)
     * }
     */
    public static MethodHandle g_credentials_get_native$handle() {
        return g_credentials_get_native.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_credentials_get_native(GCredentials *credentials, GCredentialsType native_type)
     * }
     */
    public static MemorySegment g_credentials_get_native(MemorySegment credentials, int native_type) {
        var mh$ = g_credentials_get_native.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_credentials_get_native", credentials, native_type);
            }
            return (MemorySegment)mh$.invokeExact(credentials, native_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_credentials_set_native {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_credentials_set_native"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_credentials_set_native(GCredentials *credentials, GCredentialsType native_type, gpointer native)
     * }
     */
    public static FunctionDescriptor g_credentials_set_native$descriptor() {
        return g_credentials_set_native.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_credentials_set_native(GCredentials *credentials, GCredentialsType native_type, gpointer native)
     * }
     */
    public static MethodHandle g_credentials_set_native$handle() {
        return g_credentials_set_native.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_credentials_set_native(GCredentials *credentials, GCredentialsType native_type, gpointer native)
     * }
     */
    public static void g_credentials_set_native(MemorySegment credentials, int native_type, MemorySegment native_) {
        var mh$ = g_credentials_set_native.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_credentials_set_native", credentials, native_type, native_);
            }
            mh$.invokeExact(credentials, native_type, native_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_credentials_is_same_user {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_credentials_is_same_user"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_credentials_is_same_user(GCredentials *credentials, GCredentials *other_credentials, GError **error)
     * }
     */
    public static FunctionDescriptor g_credentials_is_same_user$descriptor() {
        return g_credentials_is_same_user.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_credentials_is_same_user(GCredentials *credentials, GCredentials *other_credentials, GError **error)
     * }
     */
    public static MethodHandle g_credentials_is_same_user$handle() {
        return g_credentials_is_same_user.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_credentials_is_same_user(GCredentials *credentials, GCredentials *other_credentials, GError **error)
     * }
     */
    public static int g_credentials_is_same_user(MemorySegment credentials, MemorySegment other_credentials, MemorySegment error) {
        var mh$ = g_credentials_is_same_user.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_credentials_is_same_user", credentials, other_credentials, error);
            }
            return (int)mh$.invokeExact(credentials, other_credentials, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_credentials_get_unix_pid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_credentials_get_unix_pid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern pid_t g_credentials_get_unix_pid(GCredentials *credentials, GError **error)
     * }
     */
    public static FunctionDescriptor g_credentials_get_unix_pid$descriptor() {
        return g_credentials_get_unix_pid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern pid_t g_credentials_get_unix_pid(GCredentials *credentials, GError **error)
     * }
     */
    public static MethodHandle g_credentials_get_unix_pid$handle() {
        return g_credentials_get_unix_pid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern pid_t g_credentials_get_unix_pid(GCredentials *credentials, GError **error)
     * }
     */
    public static int g_credentials_get_unix_pid(MemorySegment credentials, MemorySegment error) {
        var mh$ = g_credentials_get_unix_pid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_credentials_get_unix_pid", credentials, error);
            }
            return (int)mh$.invokeExact(credentials, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_credentials_get_unix_user {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_credentials_get_unix_user"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uid_t g_credentials_get_unix_user(GCredentials *credentials, GError **error)
     * }
     */
    public static FunctionDescriptor g_credentials_get_unix_user$descriptor() {
        return g_credentials_get_unix_user.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uid_t g_credentials_get_unix_user(GCredentials *credentials, GError **error)
     * }
     */
    public static MethodHandle g_credentials_get_unix_user$handle() {
        return g_credentials_get_unix_user.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern uid_t g_credentials_get_unix_user(GCredentials *credentials, GError **error)
     * }
     */
    public static int g_credentials_get_unix_user(MemorySegment credentials, MemorySegment error) {
        var mh$ = g_credentials_get_unix_user.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_credentials_get_unix_user", credentials, error);
            }
            return (int)mh$.invokeExact(credentials, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_credentials_set_unix_user {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_credentials_set_unix_user"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_credentials_set_unix_user(GCredentials *credentials, uid_t uid, GError **error)
     * }
     */
    public static FunctionDescriptor g_credentials_set_unix_user$descriptor() {
        return g_credentials_set_unix_user.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_credentials_set_unix_user(GCredentials *credentials, uid_t uid, GError **error)
     * }
     */
    public static MethodHandle g_credentials_set_unix_user$handle() {
        return g_credentials_set_unix_user.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_credentials_set_unix_user(GCredentials *credentials, uid_t uid, GError **error)
     * }
     */
    public static int g_credentials_set_unix_user(MemorySegment credentials, int uid, MemorySegment error) {
        var mh$ = g_credentials_set_unix_user.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_credentials_set_unix_user", credentials, uid, error);
            }
            return (int)mh$.invokeExact(credentials, uid, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datagram_based_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datagram_based_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_datagram_based_get_type()
     * }
     */
    public static FunctionDescriptor g_datagram_based_get_type$descriptor() {
        return g_datagram_based_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_datagram_based_get_type()
     * }
     */
    public static MethodHandle g_datagram_based_get_type$handle() {
        return g_datagram_based_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_datagram_based_get_type()
     * }
     */
    public static long g_datagram_based_get_type() {
        var mh$ = g_datagram_based_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datagram_based_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datagram_based_receive_messages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datagram_based_receive_messages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_datagram_based_receive_messages(GDatagramBased *datagram_based, GInputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_datagram_based_receive_messages$descriptor() {
        return g_datagram_based_receive_messages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_datagram_based_receive_messages(GDatagramBased *datagram_based, GInputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_datagram_based_receive_messages$handle() {
        return g_datagram_based_receive_messages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_datagram_based_receive_messages(GDatagramBased *datagram_based, GInputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_datagram_based_receive_messages(MemorySegment datagram_based, MemorySegment messages, int num_messages, int flags, long timeout, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_datagram_based_receive_messages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datagram_based_receive_messages", datagram_based, messages, num_messages, flags, timeout, cancellable, error);
            }
            return (int)mh$.invokeExact(datagram_based, messages, num_messages, flags, timeout, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datagram_based_send_messages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datagram_based_send_messages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_datagram_based_send_messages(GDatagramBased *datagram_based, GOutputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_datagram_based_send_messages$descriptor() {
        return g_datagram_based_send_messages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_datagram_based_send_messages(GDatagramBased *datagram_based, GOutputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_datagram_based_send_messages$handle() {
        return g_datagram_based_send_messages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_datagram_based_send_messages(GDatagramBased *datagram_based, GOutputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_datagram_based_send_messages(MemorySegment datagram_based, MemorySegment messages, int num_messages, int flags, long timeout, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_datagram_based_send_messages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datagram_based_send_messages", datagram_based, messages, num_messages, flags, timeout, cancellable, error);
            }
            return (int)mh$.invokeExact(datagram_based, messages, num_messages, flags, timeout, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datagram_based_create_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datagram_based_create_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_datagram_based_create_source(GDatagramBased *datagram_based, GIOCondition condition, GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_datagram_based_create_source$descriptor() {
        return g_datagram_based_create_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_datagram_based_create_source(GDatagramBased *datagram_based, GIOCondition condition, GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_datagram_based_create_source$handle() {
        return g_datagram_based_create_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_datagram_based_create_source(GDatagramBased *datagram_based, GIOCondition condition, GCancellable *cancellable)
     * }
     */
    public static MemorySegment g_datagram_based_create_source(MemorySegment datagram_based, int condition, MemorySegment cancellable) {
        var mh$ = g_datagram_based_create_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datagram_based_create_source", datagram_based, condition, cancellable);
            }
            return (MemorySegment)mh$.invokeExact(datagram_based, condition, cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datagram_based_condition_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datagram_based_condition_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOCondition g_datagram_based_condition_check(GDatagramBased *datagram_based, GIOCondition condition)
     * }
     */
    public static FunctionDescriptor g_datagram_based_condition_check$descriptor() {
        return g_datagram_based_condition_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOCondition g_datagram_based_condition_check(GDatagramBased *datagram_based, GIOCondition condition)
     * }
     */
    public static MethodHandle g_datagram_based_condition_check$handle() {
        return g_datagram_based_condition_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOCondition g_datagram_based_condition_check(GDatagramBased *datagram_based, GIOCondition condition)
     * }
     */
    public static int g_datagram_based_condition_check(MemorySegment datagram_based, int condition) {
        var mh$ = g_datagram_based_condition_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datagram_based_condition_check", datagram_based, condition);
            }
            return (int)mh$.invokeExact(datagram_based, condition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datagram_based_condition_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datagram_based_condition_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_datagram_based_condition_wait(GDatagramBased *datagram_based, GIOCondition condition, gint64 timeout, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_datagram_based_condition_wait$descriptor() {
        return g_datagram_based_condition_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_datagram_based_condition_wait(GDatagramBased *datagram_based, GIOCondition condition, gint64 timeout, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_datagram_based_condition_wait$handle() {
        return g_datagram_based_condition_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_datagram_based_condition_wait(GDatagramBased *datagram_based, GIOCondition condition, gint64 timeout, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_datagram_based_condition_wait(MemorySegment datagram_based, int condition, long timeout, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_datagram_based_condition_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datagram_based_condition_wait", datagram_based, condition, timeout, cancellable, error);
            }
            return (int)mh$.invokeExact(datagram_based, condition, timeout, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_data_input_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_data_input_stream_get_type$descriptor() {
        return g_data_input_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_data_input_stream_get_type()
     * }
     */
    public static MethodHandle g_data_input_stream_get_type$handle() {
        return g_data_input_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_data_input_stream_get_type()
     * }
     */
    public static long g_data_input_stream_get_type() {
        var mh$ = g_data_input_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDataInputStream *g_data_input_stream_new(GInputStream *base_stream)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_new$descriptor() {
        return g_data_input_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDataInputStream *g_data_input_stream_new(GInputStream *base_stream)
     * }
     */
    public static MethodHandle g_data_input_stream_new$handle() {
        return g_data_input_stream_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDataInputStream *g_data_input_stream_new(GInputStream *base_stream)
     * }
     */
    public static MemorySegment g_data_input_stream_new(MemorySegment base_stream) {
        var mh$ = g_data_input_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_new", base_stream);
            }
            return (MemorySegment)mh$.invokeExact(base_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_set_byte_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_set_byte_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_data_input_stream_set_byte_order(GDataInputStream *stream, GDataStreamByteOrder order)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_set_byte_order$descriptor() {
        return g_data_input_stream_set_byte_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_data_input_stream_set_byte_order(GDataInputStream *stream, GDataStreamByteOrder order)
     * }
     */
    public static MethodHandle g_data_input_stream_set_byte_order$handle() {
        return g_data_input_stream_set_byte_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_data_input_stream_set_byte_order(GDataInputStream *stream, GDataStreamByteOrder order)
     * }
     */
    public static void g_data_input_stream_set_byte_order(MemorySegment stream, int order) {
        var mh$ = g_data_input_stream_set_byte_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_set_byte_order", stream, order);
            }
            mh$.invokeExact(stream, order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_get_byte_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_get_byte_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDataStreamByteOrder g_data_input_stream_get_byte_order(GDataInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_get_byte_order$descriptor() {
        return g_data_input_stream_get_byte_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDataStreamByteOrder g_data_input_stream_get_byte_order(GDataInputStream *stream)
     * }
     */
    public static MethodHandle g_data_input_stream_get_byte_order$handle() {
        return g_data_input_stream_get_byte_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDataStreamByteOrder g_data_input_stream_get_byte_order(GDataInputStream *stream)
     * }
     */
    public static int g_data_input_stream_get_byte_order(MemorySegment stream) {
        var mh$ = g_data_input_stream_get_byte_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_get_byte_order", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_set_newline_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_set_newline_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_data_input_stream_set_newline_type(GDataInputStream *stream, GDataStreamNewlineType type)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_set_newline_type$descriptor() {
        return g_data_input_stream_set_newline_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_data_input_stream_set_newline_type(GDataInputStream *stream, GDataStreamNewlineType type)
     * }
     */
    public static MethodHandle g_data_input_stream_set_newline_type$handle() {
        return g_data_input_stream_set_newline_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_data_input_stream_set_newline_type(GDataInputStream *stream, GDataStreamNewlineType type)
     * }
     */
    public static void g_data_input_stream_set_newline_type(MemorySegment stream, int type) {
        var mh$ = g_data_input_stream_set_newline_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_set_newline_type", stream, type);
            }
            mh$.invokeExact(stream, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_get_newline_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_get_newline_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDataStreamNewlineType g_data_input_stream_get_newline_type(GDataInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_get_newline_type$descriptor() {
        return g_data_input_stream_get_newline_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDataStreamNewlineType g_data_input_stream_get_newline_type(GDataInputStream *stream)
     * }
     */
    public static MethodHandle g_data_input_stream_get_newline_type$handle() {
        return g_data_input_stream_get_newline_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDataStreamNewlineType g_data_input_stream_get_newline_type(GDataInputStream *stream)
     * }
     */
    public static int g_data_input_stream_get_newline_type(MemorySegment stream) {
        var mh$ = g_data_input_stream_get_newline_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_get_newline_type", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_byte"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guchar g_data_input_stream_read_byte(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_byte$descriptor() {
        return g_data_input_stream_read_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guchar g_data_input_stream_read_byte(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_byte$handle() {
        return g_data_input_stream_read_byte.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guchar g_data_input_stream_read_byte(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static byte g_data_input_stream_read_byte(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_byte", stream, cancellable, error);
            }
            return (byte)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_int16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_int16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint16 g_data_input_stream_read_int16(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_int16$descriptor() {
        return g_data_input_stream_read_int16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint16 g_data_input_stream_read_int16(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_int16$handle() {
        return g_data_input_stream_read_int16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint16 g_data_input_stream_read_int16(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static short g_data_input_stream_read_int16(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_int16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_int16", stream, cancellable, error);
            }
            return (short)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_uint16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_uint16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 g_data_input_stream_read_uint16(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_uint16$descriptor() {
        return g_data_input_stream_read_uint16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 g_data_input_stream_read_uint16(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_uint16$handle() {
        return g_data_input_stream_read_uint16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 g_data_input_stream_read_uint16(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static short g_data_input_stream_read_uint16(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_uint16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_uint16", stream, cancellable, error);
            }
            return (short)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_int32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_int32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint32 g_data_input_stream_read_int32(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_int32$descriptor() {
        return g_data_input_stream_read_int32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint32 g_data_input_stream_read_int32(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_int32$handle() {
        return g_data_input_stream_read_int32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint32 g_data_input_stream_read_int32(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_data_input_stream_read_int32(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_int32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_int32", stream, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_uint32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_uint32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_data_input_stream_read_uint32(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_uint32$descriptor() {
        return g_data_input_stream_read_uint32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_data_input_stream_read_uint32(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_uint32$handle() {
        return g_data_input_stream_read_uint32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_data_input_stream_read_uint32(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_data_input_stream_read_uint32(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_uint32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_uint32", stream, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_data_input_stream_read_int64(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_int64$descriptor() {
        return g_data_input_stream_read_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_data_input_stream_read_int64(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_int64$handle() {
        return g_data_input_stream_read_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_data_input_stream_read_int64(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_data_input_stream_read_int64(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_int64", stream, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 g_data_input_stream_read_uint64(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_uint64$descriptor() {
        return g_data_input_stream_read_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 g_data_input_stream_read_uint64(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_uint64$handle() {
        return g_data_input_stream_read_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint64 g_data_input_stream_read_uint64(GDataInputStream *stream, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_data_input_stream_read_uint64(MemorySegment stream, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_uint64", stream, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line(GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_line$descriptor() {
        return g_data_input_stream_read_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line(GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_line$handle() {
        return g_data_input_stream_read_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line(GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_data_input_stream_read_line(MemorySegment stream, MemorySegment length, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_line", stream, length, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, length, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_line_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_line_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line_utf8(GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_line_utf8$descriptor() {
        return g_data_input_stream_read_line_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line_utf8(GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_line_utf8$handle() {
        return g_data_input_stream_read_line_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line_utf8(GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_data_input_stream_read_line_utf8(MemorySegment stream, MemorySegment length, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_line_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_line_utf8", stream, length, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, length, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_line_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_line_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_data_input_stream_read_line_async(GDataInputStream *stream, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_line_async$descriptor() {
        return g_data_input_stream_read_line_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_data_input_stream_read_line_async(GDataInputStream *stream, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_data_input_stream_read_line_async$handle() {
        return g_data_input_stream_read_line_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_data_input_stream_read_line_async(GDataInputStream *stream, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_data_input_stream_read_line_async(MemorySegment stream, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_data_input_stream_read_line_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_line_async", stream, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_line_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_line_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line_finish(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_line_finish$descriptor() {
        return g_data_input_stream_read_line_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line_finish(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_line_finish$handle() {
        return g_data_input_stream_read_line_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line_finish(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_data_input_stream_read_line_finish(MemorySegment stream, MemorySegment result, MemorySegment length, MemorySegment error) {
        var mh$ = g_data_input_stream_read_line_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_line_finish", stream, result, length, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, result, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_line_finish_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_line_finish_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line_finish_utf8(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_line_finish_utf8$descriptor() {
        return g_data_input_stream_read_line_finish_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line_finish_utf8(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_line_finish_utf8$handle() {
        return g_data_input_stream_read_line_finish_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_line_finish_utf8(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_data_input_stream_read_line_finish_utf8(MemorySegment stream, MemorySegment result, MemorySegment length, MemorySegment error) {
        var mh$ = g_data_input_stream_read_line_finish_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_line_finish_utf8", stream, result, length, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, result, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_until {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_until"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_until(GDataInputStream *stream, const gchar *stop_chars, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_until$descriptor() {
        return g_data_input_stream_read_until.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_until(GDataInputStream *stream, const gchar *stop_chars, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_until$handle() {
        return g_data_input_stream_read_until.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_until(GDataInputStream *stream, const gchar *stop_chars, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_data_input_stream_read_until(MemorySegment stream, MemorySegment stop_chars, MemorySegment length, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_until.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_until", stream, stop_chars, length, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, stop_chars, length, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_until_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_until_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_data_input_stream_read_until_async(GDataInputStream *stream, const gchar *stop_chars, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_until_async$descriptor() {
        return g_data_input_stream_read_until_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_data_input_stream_read_until_async(GDataInputStream *stream, const gchar *stop_chars, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_data_input_stream_read_until_async$handle() {
        return g_data_input_stream_read_until_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_data_input_stream_read_until_async(GDataInputStream *stream, const gchar *stop_chars, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_data_input_stream_read_until_async(MemorySegment stream, MemorySegment stop_chars, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_data_input_stream_read_until_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_until_async", stream, stop_chars, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, stop_chars, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_until_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_until_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_until_finish(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_until_finish$descriptor() {
        return g_data_input_stream_read_until_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_until_finish(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_until_finish$handle() {
        return g_data_input_stream_read_until_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_until_finish(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_data_input_stream_read_until_finish(MemorySegment stream, MemorySegment result, MemorySegment length, MemorySegment error) {
        var mh$ = g_data_input_stream_read_until_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_until_finish", stream, result, length, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, result, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_upto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_upto"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_upto(GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_upto$descriptor() {
        return g_data_input_stream_read_upto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_upto(GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_upto$handle() {
        return g_data_input_stream_read_upto.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_upto(GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gsize *length, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_data_input_stream_read_upto(MemorySegment stream, MemorySegment stop_chars, long stop_chars_len, MemorySegment length, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_input_stream_read_upto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_upto", stream, stop_chars, stop_chars_len, length, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, stop_chars, stop_chars_len, length, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_upto_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_upto_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_data_input_stream_read_upto_async(GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_upto_async$descriptor() {
        return g_data_input_stream_read_upto_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_data_input_stream_read_upto_async(GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_data_input_stream_read_upto_async$handle() {
        return g_data_input_stream_read_upto_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_data_input_stream_read_upto_async(GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_data_input_stream_read_upto_async(MemorySegment stream, MemorySegment stop_chars, long stop_chars_len, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_data_input_stream_read_upto_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_upto_async", stream, stop_chars, stop_chars_len, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, stop_chars, stop_chars_len, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_input_stream_read_upto_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_input_stream_read_upto_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_upto_finish(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_input_stream_read_upto_finish$descriptor() {
        return g_data_input_stream_read_upto_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_upto_finish(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_data_input_stream_read_upto_finish$handle() {
        return g_data_input_stream_read_upto_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_data_input_stream_read_upto_finish(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_data_input_stream_read_upto_finish(MemorySegment stream, MemorySegment result, MemorySegment length, MemorySegment error) {
        var mh$ = g_data_input_stream_read_upto_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_input_stream_read_upto_finish", stream, result, length, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, result, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_data_output_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_data_output_stream_get_type$descriptor() {
        return g_data_output_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_data_output_stream_get_type()
     * }
     */
    public static MethodHandle g_data_output_stream_get_type$handle() {
        return g_data_output_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_data_output_stream_get_type()
     * }
     */
    public static long g_data_output_stream_get_type() {
        var mh$ = g_data_output_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDataOutputStream *g_data_output_stream_new(GOutputStream *base_stream)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_new$descriptor() {
        return g_data_output_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDataOutputStream *g_data_output_stream_new(GOutputStream *base_stream)
     * }
     */
    public static MethodHandle g_data_output_stream_new$handle() {
        return g_data_output_stream_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDataOutputStream *g_data_output_stream_new(GOutputStream *base_stream)
     * }
     */
    public static MemorySegment g_data_output_stream_new(MemorySegment base_stream) {
        var mh$ = g_data_output_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_new", base_stream);
            }
            return (MemorySegment)mh$.invokeExact(base_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_set_byte_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_set_byte_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_data_output_stream_set_byte_order(GDataOutputStream *stream, GDataStreamByteOrder order)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_set_byte_order$descriptor() {
        return g_data_output_stream_set_byte_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_data_output_stream_set_byte_order(GDataOutputStream *stream, GDataStreamByteOrder order)
     * }
     */
    public static MethodHandle g_data_output_stream_set_byte_order$handle() {
        return g_data_output_stream_set_byte_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_data_output_stream_set_byte_order(GDataOutputStream *stream, GDataStreamByteOrder order)
     * }
     */
    public static void g_data_output_stream_set_byte_order(MemorySegment stream, int order) {
        var mh$ = g_data_output_stream_set_byte_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_set_byte_order", stream, order);
            }
            mh$.invokeExact(stream, order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_get_byte_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_get_byte_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDataStreamByteOrder g_data_output_stream_get_byte_order(GDataOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_get_byte_order$descriptor() {
        return g_data_output_stream_get_byte_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDataStreamByteOrder g_data_output_stream_get_byte_order(GDataOutputStream *stream)
     * }
     */
    public static MethodHandle g_data_output_stream_get_byte_order$handle() {
        return g_data_output_stream_get_byte_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDataStreamByteOrder g_data_output_stream_get_byte_order(GDataOutputStream *stream)
     * }
     */
    public static int g_data_output_stream_get_byte_order(MemorySegment stream) {
        var mh$ = g_data_output_stream_get_byte_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_get_byte_order", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_put_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_put_byte"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_byte(GDataOutputStream *stream, guchar data, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_put_byte$descriptor() {
        return g_data_output_stream_put_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_byte(GDataOutputStream *stream, guchar data, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_output_stream_put_byte$handle() {
        return g_data_output_stream_put_byte.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_byte(GDataOutputStream *stream, guchar data, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_data_output_stream_put_byte(MemorySegment stream, byte data, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_output_stream_put_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_put_byte", stream, data, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, data, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_put_int16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_put_int16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_int16(GDataOutputStream *stream, gint16 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_put_int16$descriptor() {
        return g_data_output_stream_put_int16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_int16(GDataOutputStream *stream, gint16 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_output_stream_put_int16$handle() {
        return g_data_output_stream_put_int16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_int16(GDataOutputStream *stream, gint16 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_data_output_stream_put_int16(MemorySegment stream, short data, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_output_stream_put_int16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_put_int16", stream, data, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, data, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_put_uint16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_put_uint16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_uint16(GDataOutputStream *stream, guint16 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_put_uint16$descriptor() {
        return g_data_output_stream_put_uint16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_uint16(GDataOutputStream *stream, guint16 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_output_stream_put_uint16$handle() {
        return g_data_output_stream_put_uint16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_uint16(GDataOutputStream *stream, guint16 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_data_output_stream_put_uint16(MemorySegment stream, short data, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_output_stream_put_uint16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_put_uint16", stream, data, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, data, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_put_int32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_put_int32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_int32(GDataOutputStream *stream, gint32 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_put_int32$descriptor() {
        return g_data_output_stream_put_int32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_int32(GDataOutputStream *stream, gint32 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_output_stream_put_int32$handle() {
        return g_data_output_stream_put_int32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_int32(GDataOutputStream *stream, gint32 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_data_output_stream_put_int32(MemorySegment stream, int data, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_output_stream_put_int32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_put_int32", stream, data, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, data, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_put_uint32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_put_uint32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_uint32(GDataOutputStream *stream, guint32 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_put_uint32$descriptor() {
        return g_data_output_stream_put_uint32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_uint32(GDataOutputStream *stream, guint32 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_output_stream_put_uint32$handle() {
        return g_data_output_stream_put_uint32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_uint32(GDataOutputStream *stream, guint32 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_data_output_stream_put_uint32(MemorySegment stream, int data, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_output_stream_put_uint32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_put_uint32", stream, data, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, data, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_put_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_put_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_int64(GDataOutputStream *stream, gint64 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_put_int64$descriptor() {
        return g_data_output_stream_put_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_int64(GDataOutputStream *stream, gint64 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_output_stream_put_int64$handle() {
        return g_data_output_stream_put_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_int64(GDataOutputStream *stream, gint64 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_data_output_stream_put_int64(MemorySegment stream, long data, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_output_stream_put_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_put_int64", stream, data, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, data, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_put_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_put_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_uint64(GDataOutputStream *stream, guint64 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_put_uint64$descriptor() {
        return g_data_output_stream_put_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_uint64(GDataOutputStream *stream, guint64 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_output_stream_put_uint64$handle() {
        return g_data_output_stream_put_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_uint64(GDataOutputStream *stream, guint64 data, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_data_output_stream_put_uint64(MemorySegment stream, long data, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_output_stream_put_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_put_uint64", stream, data, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, data, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_data_output_stream_put_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_data_output_stream_put_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_string(GDataOutputStream *stream, const char *str, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_data_output_stream_put_string$descriptor() {
        return g_data_output_stream_put_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_string(GDataOutputStream *stream, const char *str, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_data_output_stream_put_string$handle() {
        return g_data_output_stream_put_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_data_output_stream_put_string(GDataOutputStream *stream, const char *str, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_data_output_stream_put_string(MemorySegment stream, MemorySegment str, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_data_output_stream_put_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_data_output_stream_put_string", stream, str, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, str, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_action_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_action_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_action_group_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_action_group_get_type$descriptor() {
        return g_dbus_action_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_action_group_get_type()
     * }
     */
    public static MethodHandle g_dbus_action_group_get_type$handle() {
        return g_dbus_action_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_action_group_get_type()
     * }
     */
    public static long g_dbus_action_group_get_type() {
        var mh$ = g_dbus_action_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_action_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_action_group_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_action_group_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusActionGroup *g_dbus_action_group_get(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path)
     * }
     */
    public static FunctionDescriptor g_dbus_action_group_get$descriptor() {
        return g_dbus_action_group_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusActionGroup *g_dbus_action_group_get(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path)
     * }
     */
    public static MethodHandle g_dbus_action_group_get$handle() {
        return g_dbus_action_group_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusActionGroup *g_dbus_action_group_get(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path)
     * }
     */
    public static MemorySegment g_dbus_action_group_get(MemorySegment connection, MemorySegment bus_name, MemorySegment object_path) {
        var mh$ = g_dbus_action_group_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_action_group_get", connection, bus_name, object_path);
            }
            return (MemorySegment)mh$.invokeExact(connection, bus_name, object_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_address_escape_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_address_escape_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_address_escape_value(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_dbus_address_escape_value$descriptor() {
        return g_dbus_address_escape_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_address_escape_value(const gchar *string)
     * }
     */
    public static MethodHandle g_dbus_address_escape_value$handle() {
        return g_dbus_address_escape_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dbus_address_escape_value(const gchar *string)
     * }
     */
    public static MemorySegment g_dbus_address_escape_value(MemorySegment string) {
        var mh$ = g_dbus_address_escape_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_address_escape_value", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_is_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_is_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_address(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_dbus_is_address$descriptor() {
        return g_dbus_is_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_address(const gchar *string)
     * }
     */
    public static MethodHandle g_dbus_is_address$handle() {
        return g_dbus_is_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_address(const gchar *string)
     * }
     */
    public static int g_dbus_is_address(MemorySegment string) {
        var mh$ = g_dbus_is_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_is_address", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_is_supported_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_is_supported_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_supported_address(const gchar *string, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_is_supported_address$descriptor() {
        return g_dbus_is_supported_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_supported_address(const gchar *string, GError **error)
     * }
     */
    public static MethodHandle g_dbus_is_supported_address$handle() {
        return g_dbus_is_supported_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_is_supported_address(const gchar *string, GError **error)
     * }
     */
    public static int g_dbus_is_supported_address(MemorySegment string, MemorySegment error) {
        var mh$ = g_dbus_is_supported_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_is_supported_address", string, error);
            }
            return (int)mh$.invokeExact(string, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_address_get_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_address_get_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_address_get_stream(const gchar *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_address_get_stream$descriptor() {
        return g_dbus_address_get_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_address_get_stream(const gchar *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_address_get_stream$handle() {
        return g_dbus_address_get_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_address_get_stream(const gchar *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_address_get_stream(MemorySegment address, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_address_get_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_address_get_stream", address, cancellable, callback, user_data);
            }
            mh$.invokeExact(address, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_address_get_stream_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_address_get_stream_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStream *g_dbus_address_get_stream_finish(GAsyncResult *res, gchar **out_guid, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_address_get_stream_finish$descriptor() {
        return g_dbus_address_get_stream_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStream *g_dbus_address_get_stream_finish(GAsyncResult *res, gchar **out_guid, GError **error)
     * }
     */
    public static MethodHandle g_dbus_address_get_stream_finish$handle() {
        return g_dbus_address_get_stream_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStream *g_dbus_address_get_stream_finish(GAsyncResult *res, gchar **out_guid, GError **error)
     * }
     */
    public static MemorySegment g_dbus_address_get_stream_finish(MemorySegment res, MemorySegment out_guid, MemorySegment error) {
        var mh$ = g_dbus_address_get_stream_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_address_get_stream_finish", res, out_guid, error);
            }
            return (MemorySegment)mh$.invokeExact(res, out_guid, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_address_get_stream_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_address_get_stream_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStream *g_dbus_address_get_stream_sync(const gchar *address, gchar **out_guid, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_address_get_stream_sync$descriptor() {
        return g_dbus_address_get_stream_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStream *g_dbus_address_get_stream_sync(const gchar *address, gchar **out_guid, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_address_get_stream_sync$handle() {
        return g_dbus_address_get_stream_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStream *g_dbus_address_get_stream_sync(const gchar *address, gchar **out_guid, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_address_get_stream_sync(MemorySegment address, MemorySegment out_guid, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_address_get_stream_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_address_get_stream_sync", address, out_guid, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(address, out_guid, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_address_get_for_bus_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_address_get_for_bus_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_address_get_for_bus_sync(GBusType bus_type, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_address_get_for_bus_sync$descriptor() {
        return g_dbus_address_get_for_bus_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dbus_address_get_for_bus_sync(GBusType bus_type, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_address_get_for_bus_sync$handle() {
        return g_dbus_address_get_for_bus_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dbus_address_get_for_bus_sync(GBusType bus_type, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_address_get_for_bus_sync(int bus_type, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_address_get_for_bus_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_address_get_for_bus_sync", bus_type, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(bus_type, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_auth_observer_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_auth_observer_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_auth_observer_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_auth_observer_get_type$descriptor() {
        return g_dbus_auth_observer_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_auth_observer_get_type()
     * }
     */
    public static MethodHandle g_dbus_auth_observer_get_type$handle() {
        return g_dbus_auth_observer_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_auth_observer_get_type()
     * }
     */
    public static long g_dbus_auth_observer_get_type() {
        var mh$ = g_dbus_auth_observer_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_auth_observer_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_auth_observer_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_auth_observer_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusAuthObserver *g_dbus_auth_observer_new()
     * }
     */
    public static FunctionDescriptor g_dbus_auth_observer_new$descriptor() {
        return g_dbus_auth_observer_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusAuthObserver *g_dbus_auth_observer_new()
     * }
     */
    public static MethodHandle g_dbus_auth_observer_new$handle() {
        return g_dbus_auth_observer_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusAuthObserver *g_dbus_auth_observer_new()
     * }
     */
    public static MemorySegment g_dbus_auth_observer_new() {
        var mh$ = g_dbus_auth_observer_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_auth_observer_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_auth_observer_authorize_authenticated_peer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_auth_observer_authorize_authenticated_peer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_auth_observer_authorize_authenticated_peer(GDBusAuthObserver *observer, GIOStream *stream, GCredentials *credentials)
     * }
     */
    public static FunctionDescriptor g_dbus_auth_observer_authorize_authenticated_peer$descriptor() {
        return g_dbus_auth_observer_authorize_authenticated_peer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_auth_observer_authorize_authenticated_peer(GDBusAuthObserver *observer, GIOStream *stream, GCredentials *credentials)
     * }
     */
    public static MethodHandle g_dbus_auth_observer_authorize_authenticated_peer$handle() {
        return g_dbus_auth_observer_authorize_authenticated_peer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_auth_observer_authorize_authenticated_peer(GDBusAuthObserver *observer, GIOStream *stream, GCredentials *credentials)
     * }
     */
    public static int g_dbus_auth_observer_authorize_authenticated_peer(MemorySegment observer, MemorySegment stream, MemorySegment credentials) {
        var mh$ = g_dbus_auth_observer_authorize_authenticated_peer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_auth_observer_authorize_authenticated_peer", observer, stream, credentials);
            }
            return (int)mh$.invokeExact(observer, stream, credentials);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_auth_observer_allow_mechanism {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_auth_observer_allow_mechanism"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_auth_observer_allow_mechanism(GDBusAuthObserver *observer, const gchar *mechanism)
     * }
     */
    public static FunctionDescriptor g_dbus_auth_observer_allow_mechanism$descriptor() {
        return g_dbus_auth_observer_allow_mechanism.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_auth_observer_allow_mechanism(GDBusAuthObserver *observer, const gchar *mechanism)
     * }
     */
    public static MethodHandle g_dbus_auth_observer_allow_mechanism$handle() {
        return g_dbus_auth_observer_allow_mechanism.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_auth_observer_allow_mechanism(GDBusAuthObserver *observer, const gchar *mechanism)
     * }
     */
    public static int g_dbus_auth_observer_allow_mechanism(MemorySegment observer, MemorySegment mechanism) {
        var mh$ = g_dbus_auth_observer_allow_mechanism.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_auth_observer_allow_mechanism", observer, mechanism);
            }
            return (int)mh$.invokeExact(observer, mechanism);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_dbus_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_dbus_connection_get_type$descriptor() {
        return g_dbus_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_dbus_connection_get_type()
     * }
     */
    public static MethodHandle g_dbus_connection_get_type$handle() {
        return g_dbus_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_dbus_connection_get_type()
     * }
     */
    public static long g_dbus_connection_get_type() {
        var mh$ = g_dbus_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bus_get(GBusType bus_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_bus_get$descriptor() {
        return g_bus_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bus_get(GBusType bus_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_bus_get$handle() {
        return g_bus_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bus_get(GBusType bus_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_bus_get(int bus_type, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_bus_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_get", bus_type, cancellable, callback, user_data);
            }
            mh$.invokeExact(bus_type, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_get_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_get_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_bus_get_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_bus_get_finish$descriptor() {
        return g_bus_get_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_bus_get_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_bus_get_finish$handle() {
        return g_bus_get_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_bus_get_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_bus_get_finish(MemorySegment res, MemorySegment error) {
        var mh$ = g_bus_get_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_get_finish", res, error);
            }
            return (MemorySegment)mh$.invokeExact(res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bus_get_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bus_get_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_bus_get_sync(GBusType bus_type, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_bus_get_sync$descriptor() {
        return g_bus_get_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_bus_get_sync(GBusType bus_type, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_bus_get_sync$handle() {
        return g_bus_get_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_bus_get_sync(GBusType bus_type, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_bus_get_sync(int bus_type, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_bus_get_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bus_get_sync", bus_type, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(bus_type, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_new(GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_new$descriptor() {
        return g_dbus_connection_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_new(GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_connection_new$handle() {
        return g_dbus_connection_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_new(GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_connection_new(MemorySegment stream, MemorySegment guid, int flags, MemorySegment observer, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_connection_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_new", stream, guid, flags, observer, cancellable, callback, user_data);
            }
            mh$.invokeExact(stream, guid, flags, observer, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_new_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_new_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_new_finish$descriptor() {
        return g_dbus_connection_new_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_new_finish$handle() {
        return g_dbus_connection_new_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_connection_new_finish(MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_connection_new_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_new_finish", res, error);
            }
            return (MemorySegment)mh$.invokeExact(res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_new_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_new_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_sync(GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_new_sync$descriptor() {
        return g_dbus_connection_new_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_sync(GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_new_sync$handle() {
        return g_dbus_connection_new_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_sync(GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_connection_new_sync(MemorySegment stream, MemorySegment guid, int flags, MemorySegment observer, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_connection_new_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_new_sync", stream, guid, flags, observer, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(stream, guid, flags, observer, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_new_for_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_new_for_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_new_for_address(const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_new_for_address$descriptor() {
        return g_dbus_connection_new_for_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_new_for_address(const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_connection_new_for_address$handle() {
        return g_dbus_connection_new_for_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_new_for_address(const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_connection_new_for_address(MemorySegment address, int flags, MemorySegment observer, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_connection_new_for_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_new_for_address", address, flags, observer, cancellable, callback, user_data);
            }
            mh$.invokeExact(address, flags, observer, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_new_for_address_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_new_for_address_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_for_address_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_new_for_address_finish$descriptor() {
        return g_dbus_connection_new_for_address_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_for_address_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_new_for_address_finish$handle() {
        return g_dbus_connection_new_for_address_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_for_address_finish(GAsyncResult *res, GError **error)
     * }
     */
    public static MemorySegment g_dbus_connection_new_for_address_finish(MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_connection_new_for_address_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_new_for_address_finish", res, error);
            }
            return (MemorySegment)mh$.invokeExact(res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_new_for_address_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_new_for_address_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_for_address_sync(const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_new_for_address_sync$descriptor() {
        return g_dbus_connection_new_for_address_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_for_address_sync(const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_new_for_address_sync$handle() {
        return g_dbus_connection_new_for_address_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnection *g_dbus_connection_new_for_address_sync(const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_dbus_connection_new_for_address_sync(MemorySegment address, int flags, MemorySegment observer, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_connection_new_for_address_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_new_for_address_sync", address, flags, observer, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(address, flags, observer, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_start_message_processing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_start_message_processing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_start_message_processing(GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_start_message_processing$descriptor() {
        return g_dbus_connection_start_message_processing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_start_message_processing(GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_connection_start_message_processing$handle() {
        return g_dbus_connection_start_message_processing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_start_message_processing(GDBusConnection *connection)
     * }
     */
    public static void g_dbus_connection_start_message_processing(MemorySegment connection) {
        var mh$ = g_dbus_connection_start_message_processing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_start_message_processing", connection);
            }
            mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_is_closed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_is_closed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_is_closed(GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_is_closed$descriptor() {
        return g_dbus_connection_is_closed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_is_closed(GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_connection_is_closed$handle() {
        return g_dbus_connection_is_closed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_is_closed(GDBusConnection *connection)
     * }
     */
    public static int g_dbus_connection_is_closed(MemorySegment connection) {
        var mh$ = g_dbus_connection_is_closed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_is_closed", connection);
            }
            return (int)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_get_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_get_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStream *g_dbus_connection_get_stream(GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_get_stream$descriptor() {
        return g_dbus_connection_get_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStream *g_dbus_connection_get_stream(GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_connection_get_stream$handle() {
        return g_dbus_connection_get_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStream *g_dbus_connection_get_stream(GDBusConnection *connection)
     * }
     */
    public static MemorySegment g_dbus_connection_get_stream(MemorySegment connection) {
        var mh$ = g_dbus_connection_get_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_get_stream", connection);
            }
            return (MemorySegment)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_get_guid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_get_guid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_connection_get_guid(GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_get_guid$descriptor() {
        return g_dbus_connection_get_guid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_connection_get_guid(GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_connection_get_guid$handle() {
        return g_dbus_connection_get_guid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_connection_get_guid(GDBusConnection *connection)
     * }
     */
    public static MemorySegment g_dbus_connection_get_guid(MemorySegment connection) {
        var mh$ = g_dbus_connection_get_guid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_get_guid", connection);
            }
            return (MemorySegment)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_get_unique_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_get_unique_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_connection_get_unique_name(GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_get_unique_name$descriptor() {
        return g_dbus_connection_get_unique_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dbus_connection_get_unique_name(GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_connection_get_unique_name$handle() {
        return g_dbus_connection_get_unique_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dbus_connection_get_unique_name(GDBusConnection *connection)
     * }
     */
    public static MemorySegment g_dbus_connection_get_unique_name(MemorySegment connection) {
        var mh$ = g_dbus_connection_get_unique_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_get_unique_name", connection);
            }
            return (MemorySegment)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_get_peer_credentials {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_get_peer_credentials"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCredentials *g_dbus_connection_get_peer_credentials(GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_get_peer_credentials$descriptor() {
        return g_dbus_connection_get_peer_credentials.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCredentials *g_dbus_connection_get_peer_credentials(GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_connection_get_peer_credentials$handle() {
        return g_dbus_connection_get_peer_credentials.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCredentials *g_dbus_connection_get_peer_credentials(GDBusConnection *connection)
     * }
     */
    public static MemorySegment g_dbus_connection_get_peer_credentials(MemorySegment connection) {
        var mh$ = g_dbus_connection_get_peer_credentials.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_get_peer_credentials", connection);
            }
            return (MemorySegment)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_get_last_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_get_last_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_dbus_connection_get_last_serial(GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_get_last_serial$descriptor() {
        return g_dbus_connection_get_last_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_dbus_connection_get_last_serial(GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_connection_get_last_serial$handle() {
        return g_dbus_connection_get_last_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_dbus_connection_get_last_serial(GDBusConnection *connection)
     * }
     */
    public static int g_dbus_connection_get_last_serial(MemorySegment connection) {
        var mh$ = g_dbus_connection_get_last_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_get_last_serial", connection);
            }
            return (int)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_get_exit_on_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_get_exit_on_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_get_exit_on_close(GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_get_exit_on_close$descriptor() {
        return g_dbus_connection_get_exit_on_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_get_exit_on_close(GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_connection_get_exit_on_close$handle() {
        return g_dbus_connection_get_exit_on_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_get_exit_on_close(GDBusConnection *connection)
     * }
     */
    public static int g_dbus_connection_get_exit_on_close(MemorySegment connection) {
        var mh$ = g_dbus_connection_get_exit_on_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_get_exit_on_close", connection);
            }
            return (int)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_set_exit_on_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_set_exit_on_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_set_exit_on_close(GDBusConnection *connection, gboolean exit_on_close)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_set_exit_on_close$descriptor() {
        return g_dbus_connection_set_exit_on_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_set_exit_on_close(GDBusConnection *connection, gboolean exit_on_close)
     * }
     */
    public static MethodHandle g_dbus_connection_set_exit_on_close$handle() {
        return g_dbus_connection_set_exit_on_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_set_exit_on_close(GDBusConnection *connection, gboolean exit_on_close)
     * }
     */
    public static void g_dbus_connection_set_exit_on_close(MemorySegment connection, int exit_on_close) {
        var mh$ = g_dbus_connection_set_exit_on_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_set_exit_on_close", connection, exit_on_close);
            }
            mh$.invokeExact(connection, exit_on_close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_get_capabilities {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_get_capabilities"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusCapabilityFlags g_dbus_connection_get_capabilities(GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_get_capabilities$descriptor() {
        return g_dbus_connection_get_capabilities.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusCapabilityFlags g_dbus_connection_get_capabilities(GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_connection_get_capabilities$handle() {
        return g_dbus_connection_get_capabilities.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusCapabilityFlags g_dbus_connection_get_capabilities(GDBusConnection *connection)
     * }
     */
    public static int g_dbus_connection_get_capabilities(MemorySegment connection) {
        var mh$ = g_dbus_connection_get_capabilities.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_get_capabilities", connection);
            }
            return (int)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDBusConnectionFlags g_dbus_connection_get_flags(GDBusConnection *connection)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_get_flags$descriptor() {
        return g_dbus_connection_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDBusConnectionFlags g_dbus_connection_get_flags(GDBusConnection *connection)
     * }
     */
    public static MethodHandle g_dbus_connection_get_flags$handle() {
        return g_dbus_connection_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDBusConnectionFlags g_dbus_connection_get_flags(GDBusConnection *connection)
     * }
     */
    public static int g_dbus_connection_get_flags(MemorySegment connection) {
        var mh$ = g_dbus_connection_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_get_flags", connection);
            }
            return (int)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_close(GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_close$descriptor() {
        return g_dbus_connection_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_close(GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_connection_close$handle() {
        return g_dbus_connection_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_close(GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_connection_close(MemorySegment connection, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_connection_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_close", connection, cancellable, callback, user_data);
            }
            mh$.invokeExact(connection, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_close_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_close_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_close_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_close_finish$descriptor() {
        return g_dbus_connection_close_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_close_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_close_finish$handle() {
        return g_dbus_connection_close_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_close_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static int g_dbus_connection_close_finish(MemorySegment connection, MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_connection_close_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_close_finish", connection, res, error);
            }
            return (int)mh$.invokeExact(connection, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_close_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_close_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_close_sync(GDBusConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_close_sync$descriptor() {
        return g_dbus_connection_close_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_close_sync(GDBusConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_close_sync$handle() {
        return g_dbus_connection_close_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_close_sync(GDBusConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_dbus_connection_close_sync(MemorySegment connection, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_dbus_connection_close_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_close_sync", connection, cancellable, error);
            }
            return (int)mh$.invokeExact(connection, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_flush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_flush(GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_flush$descriptor() {
        return g_dbus_connection_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dbus_connection_flush(GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_dbus_connection_flush$handle() {
        return g_dbus_connection_flush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dbus_connection_flush(GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_dbus_connection_flush(MemorySegment connection, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_dbus_connection_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_flush", connection, cancellable, callback, user_data);
            }
            mh$.invokeExact(connection, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dbus_connection_flush_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dbus_connection_flush_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_flush_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static FunctionDescriptor g_dbus_connection_flush_finish$descriptor() {
        return g_dbus_connection_flush_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_flush_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static MethodHandle g_dbus_connection_flush_finish$handle() {
        return g_dbus_connection_flush_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_dbus_connection_flush_finish(GDBusConnection *connection, GAsyncResult *res, GError **error)
     * }
     */
    public static int g_dbus_connection_flush_finish(MemorySegment connection, MemorySegment res, MemorySegment error) {
        var mh$ = g_dbus_connection_flush_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dbus_connection_flush_finish", connection, res, error);
            }
            return (int)mh$.invokeExact(connection, res, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

