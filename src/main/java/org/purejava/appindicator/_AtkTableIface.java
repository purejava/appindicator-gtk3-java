// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _AtkTableIface {
 *     struct _GTypeInterface parent;
 *     struct _AtkObject* (*ref_at)(struct _AtkTable*,int,int);
 *     int (*get_index_at)(struct _AtkTable*,int,int);
 *     int (*get_column_at_index)(struct _AtkTable*,int);
 *     int (*get_row_at_index)(struct _AtkTable*,int);
 *     int (*get_n_columns)(struct _AtkTable*);
 *     int (*get_n_rows)(struct _AtkTable*);
 *     int (*get_column_extent_at)(struct _AtkTable*,int,int);
 *     int (*get_row_extent_at)(struct _AtkTable*,int,int);
 *     struct _AtkObject* (*get_caption)(struct _AtkTable*);
 *     char* (*get_column_description)(struct _AtkTable*,int);
 *     struct _AtkObject* (*get_column_header)(struct _AtkTable*,int);
 *     char* (*get_row_description)(struct _AtkTable*,int);
 *     struct _AtkObject* (*get_row_header)(struct _AtkTable*,int);
 *     struct _AtkObject* (*get_summary)(struct _AtkTable*);
 *     void (*set_caption)(struct _AtkTable*,struct _AtkObject*);
 *     void (*set_column_description)(struct _AtkTable*,int,char*);
 *     void (*set_column_header)(struct _AtkTable*,int,struct _AtkObject*);
 *     void (*set_row_description)(struct _AtkTable*,int,char*);
 *     void (*set_row_header)(struct _AtkTable*,int,struct _AtkObject*);
 *     void (*set_summary)(struct _AtkTable*,struct _AtkObject*);
 *     int (*get_selected_columns)(struct _AtkTable*,int**);
 *     int (*get_selected_rows)(struct _AtkTable*,int**);
 *     int (*is_column_selected)(struct _AtkTable*,int);
 *     int (*is_row_selected)(struct _AtkTable*,int);
 *     int (*is_selected)(struct _AtkTable*,int,int);
 *     int (*add_row_selection)(struct _AtkTable*,int);
 *     int (*remove_row_selection)(struct _AtkTable*,int);
 *     int (*add_column_selection)(struct _AtkTable*,int);
 *     int (*remove_column_selection)(struct _AtkTable*,int);
 *     void (*row_inserted)(struct _AtkTable*,int,int);
 *     void (*column_inserted)(struct _AtkTable*,int,int);
 *     void (*row_deleted)(struct _AtkTable*,int,int);
 *     void (*column_deleted)(struct _AtkTable*,int,int);
 *     void (*row_reordered)(struct _AtkTable*);
 *     void (*column_reordered)(struct _AtkTable*);
 *     void (*model_changed)(struct _AtkTable*);
 * };
 * }
 */
public class _AtkTableIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2067.const$2;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*ref_at)(struct _AtkTable*,int,int);
     * }
     */
    public interface ref_at {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(ref_at fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2067.const$3, fi, constants$33.const$5, scope);
        }
        static ref_at ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$1822.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ref_at$VH() {
        return constants$2067.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*ref_at)(struct _AtkTable*,int,int);
     * }
     */
    public static MemorySegment ref_at$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2067.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*ref_at)(struct _AtkTable*,int,int);
     * }
     */
    public static void ref_at$set(MemorySegment seg, MemorySegment x) {
        constants$2067.const$4.set(seg, x);
    }
    public static MemorySegment ref_at$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2067.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_at$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2067.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_at ref_at(MemorySegment segment, Arena scope) {
        return ref_at.ofAddress(ref_at$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_index_at)(struct _AtkTable*,int,int);
     * }
     */
    public interface get_index_at {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(get_index_at fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2067.const$5, fi, constants$49.const$0, scope);
        }
        static get_index_at ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$247.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_index_at$VH() {
        return constants$2068.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_index_at)(struct _AtkTable*,int,int);
     * }
     */
    public static MemorySegment get_index_at$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2068.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_index_at)(struct _AtkTable*,int,int);
     * }
     */
    public static void get_index_at$set(MemorySegment seg, MemorySegment x) {
        constants$2068.const$0.set(seg, x);
    }
    public static MemorySegment get_index_at$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2068.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_index_at$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2068.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_index_at get_index_at(MemorySegment segment, Arena scope) {
        return get_index_at.ofAddress(get_index_at$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_column_at_index)(struct _AtkTable*,int);
     * }
     */
    public interface get_column_at_index {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_column_at_index fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2068.const$1, fi, constants$11.const$4, scope);
        }
        static get_column_at_index ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_column_at_index$VH() {
        return constants$2068.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_column_at_index)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment get_column_at_index$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2068.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_column_at_index)(struct _AtkTable*,int);
     * }
     */
    public static void get_column_at_index$set(MemorySegment seg, MemorySegment x) {
        constants$2068.const$2.set(seg, x);
    }
    public static MemorySegment get_column_at_index$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2068.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_at_index$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2068.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_at_index get_column_at_index(MemorySegment segment, Arena scope) {
        return get_column_at_index.ofAddress(get_column_at_index$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_row_at_index)(struct _AtkTable*,int);
     * }
     */
    public interface get_row_at_index {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_row_at_index fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2068.const$3, fi, constants$11.const$4, scope);
        }
        static get_row_at_index ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_row_at_index$VH() {
        return constants$2068.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_row_at_index)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment get_row_at_index$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2068.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_row_at_index)(struct _AtkTable*,int);
     * }
     */
    public static void get_row_at_index$set(MemorySegment seg, MemorySegment x) {
        constants$2068.const$4.set(seg, x);
    }
    public static MemorySegment get_row_at_index$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2068.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_at_index$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2068.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_at_index get_row_at_index(MemorySegment segment, Arena scope) {
        return get_row_at_index.ofAddress(get_row_at_index$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_n_columns)(struct _AtkTable*);
     * }
     */
    public interface get_n_columns {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_n_columns fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2068.const$5, fi, constants$10.const$5, scope);
        }
        static get_n_columns ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_n_columns$VH() {
        return constants$2069.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_n_columns)(struct _AtkTable*);
     * }
     */
    public static MemorySegment get_n_columns$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2069.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_n_columns)(struct _AtkTable*);
     * }
     */
    public static void get_n_columns$set(MemorySegment seg, MemorySegment x) {
        constants$2069.const$0.set(seg, x);
    }
    public static MemorySegment get_n_columns$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2069.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_columns$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2069.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_columns get_n_columns(MemorySegment segment, Arena scope) {
        return get_n_columns.ofAddress(get_n_columns$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_n_rows)(struct _AtkTable*);
     * }
     */
    public interface get_n_rows {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_n_rows fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2069.const$1, fi, constants$10.const$5, scope);
        }
        static get_n_rows ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_n_rows$VH() {
        return constants$2069.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_n_rows)(struct _AtkTable*);
     * }
     */
    public static MemorySegment get_n_rows$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2069.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_n_rows)(struct _AtkTable*);
     * }
     */
    public static void get_n_rows$set(MemorySegment seg, MemorySegment x) {
        constants$2069.const$2.set(seg, x);
    }
    public static MemorySegment get_n_rows$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2069.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_rows$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2069.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_rows get_n_rows(MemorySegment segment, Arena scope) {
        return get_n_rows.ofAddress(get_n_rows$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_column_extent_at)(struct _AtkTable*,int,int);
     * }
     */
    public interface get_column_extent_at {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(get_column_extent_at fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2069.const$3, fi, constants$49.const$0, scope);
        }
        static get_column_extent_at ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$247.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_column_extent_at$VH() {
        return constants$2069.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_column_extent_at)(struct _AtkTable*,int,int);
     * }
     */
    public static MemorySegment get_column_extent_at$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2069.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_column_extent_at)(struct _AtkTable*,int,int);
     * }
     */
    public static void get_column_extent_at$set(MemorySegment seg, MemorySegment x) {
        constants$2069.const$4.set(seg, x);
    }
    public static MemorySegment get_column_extent_at$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2069.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_extent_at$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2069.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_extent_at get_column_extent_at(MemorySegment segment, Arena scope) {
        return get_column_extent_at.ofAddress(get_column_extent_at$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_row_extent_at)(struct _AtkTable*,int,int);
     * }
     */
    public interface get_row_extent_at {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(get_row_extent_at fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2069.const$5, fi, constants$49.const$0, scope);
        }
        static get_row_extent_at ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$247.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_row_extent_at$VH() {
        return constants$2070.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_row_extent_at)(struct _AtkTable*,int,int);
     * }
     */
    public static MemorySegment get_row_extent_at$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2070.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_row_extent_at)(struct _AtkTable*,int,int);
     * }
     */
    public static void get_row_extent_at$set(MemorySegment seg, MemorySegment x) {
        constants$2070.const$0.set(seg, x);
    }
    public static MemorySegment get_row_extent_at$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2070.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_extent_at$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2070.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_extent_at get_row_extent_at(MemorySegment segment, Arena scope) {
        return get_row_extent_at.ofAddress(get_row_extent_at$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*get_caption)(struct _AtkTable*);
     * }
     */
    public interface get_caption {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_caption fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2070.const$1, fi, constants$5.const$2, scope);
        }
        static get_caption ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_caption$VH() {
        return constants$2070.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*get_caption)(struct _AtkTable*);
     * }
     */
    public static MemorySegment get_caption$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2070.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*get_caption)(struct _AtkTable*);
     * }
     */
    public static void get_caption$set(MemorySegment seg, MemorySegment x) {
        constants$2070.const$2.set(seg, x);
    }
    public static MemorySegment get_caption$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2070.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_caption$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2070.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_caption get_caption(MemorySegment segment, Arena scope) {
        return get_caption.ofAddress(get_caption$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_column_description)(struct _AtkTable*,int);
     * }
     */
    public interface get_column_description {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_column_description fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2070.const$3, fi, constants$21.const$3, scope);
        }
        static get_column_description ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$318.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_column_description$VH() {
        return constants$2070.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_column_description)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment get_column_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2070.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_column_description)(struct _AtkTable*,int);
     * }
     */
    public static void get_column_description$set(MemorySegment seg, MemorySegment x) {
        constants$2070.const$4.set(seg, x);
    }
    public static MemorySegment get_column_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2070.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_description$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2070.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_description get_column_description(MemorySegment segment, Arena scope) {
        return get_column_description.ofAddress(get_column_description$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*get_column_header)(struct _AtkTable*,int);
     * }
     */
    public interface get_column_header {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_column_header fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2070.const$5, fi, constants$21.const$3, scope);
        }
        static get_column_header ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$318.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_column_header$VH() {
        return constants$2071.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*get_column_header)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment get_column_header$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2071.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*get_column_header)(struct _AtkTable*,int);
     * }
     */
    public static void get_column_header$set(MemorySegment seg, MemorySegment x) {
        constants$2071.const$0.set(seg, x);
    }
    public static MemorySegment get_column_header$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2071.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_header$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2071.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_header get_column_header(MemorySegment segment, Arena scope) {
        return get_column_header.ofAddress(get_column_header$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_row_description)(struct _AtkTable*,int);
     * }
     */
    public interface get_row_description {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_row_description fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2071.const$1, fi, constants$21.const$3, scope);
        }
        static get_row_description ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$318.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_row_description$VH() {
        return constants$2071.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_row_description)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment get_row_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2071.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_row_description)(struct _AtkTable*,int);
     * }
     */
    public static void get_row_description$set(MemorySegment seg, MemorySegment x) {
        constants$2071.const$2.set(seg, x);
    }
    public static MemorySegment get_row_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2071.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_description$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2071.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_description get_row_description(MemorySegment segment, Arena scope) {
        return get_row_description.ofAddress(get_row_description$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*get_row_header)(struct _AtkTable*,int);
     * }
     */
    public interface get_row_header {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_row_header fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2071.const$3, fi, constants$21.const$3, scope);
        }
        static get_row_header ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$318.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_row_header$VH() {
        return constants$2071.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*get_row_header)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment get_row_header$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2071.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*get_row_header)(struct _AtkTable*,int);
     * }
     */
    public static void get_row_header$set(MemorySegment seg, MemorySegment x) {
        constants$2071.const$4.set(seg, x);
    }
    public static MemorySegment get_row_header$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2071.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_header$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2071.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_header get_row_header(MemorySegment segment, Arena scope) {
        return get_row_header.ofAddress(get_row_header$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*get_summary)(struct _AtkTable*);
     * }
     */
    public interface get_summary {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_summary fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2071.const$5, fi, constants$5.const$2, scope);
        }
        static get_summary ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_summary$VH() {
        return constants$2072.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*get_summary)(struct _AtkTable*);
     * }
     */
    public static MemorySegment get_summary$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2072.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*get_summary)(struct _AtkTable*);
     * }
     */
    public static void get_summary$set(MemorySegment seg, MemorySegment x) {
        constants$2072.const$0.set(seg, x);
    }
    public static MemorySegment get_summary$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2072.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_summary$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2072.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_summary get_summary(MemorySegment segment, Arena scope) {
        return get_summary.ofAddress(get_summary$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_caption)(struct _AtkTable*,struct _AtkObject*);
     * }
     */
    public interface set_caption {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_caption fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2072.const$1, fi, constants$13.const$4, scope);
        }
        static set_caption ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_caption$VH() {
        return constants$2072.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_caption)(struct _AtkTable*,struct _AtkObject*);
     * }
     */
    public static MemorySegment set_caption$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2072.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_caption)(struct _AtkTable*,struct _AtkObject*);
     * }
     */
    public static void set_caption$set(MemorySegment seg, MemorySegment x) {
        constants$2072.const$2.set(seg, x);
    }
    public static MemorySegment set_caption$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2072.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void set_caption$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2072.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_caption set_caption(MemorySegment segment, Arena scope) {
        return set_caption.ofAddress(set_caption$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_column_description)(struct _AtkTable*,int,char*);
     * }
     */
    public interface set_column_description {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(set_column_description fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2072.const$3, fi, constants$42.const$4, scope);
        }
        static set_column_description ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$625.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_column_description$VH() {
        return constants$2072.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_column_description)(struct _AtkTable*,int,char*);
     * }
     */
    public static MemorySegment set_column_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2072.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_column_description)(struct _AtkTable*,int,char*);
     * }
     */
    public static void set_column_description$set(MemorySegment seg, MemorySegment x) {
        constants$2072.const$4.set(seg, x);
    }
    public static MemorySegment set_column_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2072.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void set_column_description$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2072.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_column_description set_column_description(MemorySegment segment, Arena scope) {
        return set_column_description.ofAddress(set_column_description$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_column_header)(struct _AtkTable*,int,struct _AtkObject*);
     * }
     */
    public interface set_column_header {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(set_column_header fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2072.const$5, fi, constants$42.const$4, scope);
        }
        static set_column_header ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$625.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_column_header$VH() {
        return constants$2073.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_column_header)(struct _AtkTable*,int,struct _AtkObject*);
     * }
     */
    public static MemorySegment set_column_header$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2073.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_column_header)(struct _AtkTable*,int,struct _AtkObject*);
     * }
     */
    public static void set_column_header$set(MemorySegment seg, MemorySegment x) {
        constants$2073.const$0.set(seg, x);
    }
    public static MemorySegment set_column_header$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2073.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void set_column_header$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2073.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_column_header set_column_header(MemorySegment segment, Arena scope) {
        return set_column_header.ofAddress(set_column_header$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_row_description)(struct _AtkTable*,int,char*);
     * }
     */
    public interface set_row_description {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(set_row_description fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2073.const$1, fi, constants$42.const$4, scope);
        }
        static set_row_description ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$625.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_row_description$VH() {
        return constants$2073.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_row_description)(struct _AtkTable*,int,char*);
     * }
     */
    public static MemorySegment set_row_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2073.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_row_description)(struct _AtkTable*,int,char*);
     * }
     */
    public static void set_row_description$set(MemorySegment seg, MemorySegment x) {
        constants$2073.const$2.set(seg, x);
    }
    public static MemorySegment set_row_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2073.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void set_row_description$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2073.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_row_description set_row_description(MemorySegment segment, Arena scope) {
        return set_row_description.ofAddress(set_row_description$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_row_header)(struct _AtkTable*,int,struct _AtkObject*);
     * }
     */
    public interface set_row_header {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(set_row_header fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2073.const$3, fi, constants$42.const$4, scope);
        }
        static set_row_header ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$625.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_row_header$VH() {
        return constants$2073.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_row_header)(struct _AtkTable*,int,struct _AtkObject*);
     * }
     */
    public static MemorySegment set_row_header$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2073.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_row_header)(struct _AtkTable*,int,struct _AtkObject*);
     * }
     */
    public static void set_row_header$set(MemorySegment seg, MemorySegment x) {
        constants$2073.const$4.set(seg, x);
    }
    public static MemorySegment set_row_header$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2073.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void set_row_header$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2073.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_row_header set_row_header(MemorySegment segment, Arena scope) {
        return set_row_header.ofAddress(set_row_header$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_summary)(struct _AtkTable*,struct _AtkObject*);
     * }
     */
    public interface set_summary {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_summary fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2073.const$5, fi, constants$13.const$4, scope);
        }
        static set_summary ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_summary$VH() {
        return constants$2074.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_summary)(struct _AtkTable*,struct _AtkObject*);
     * }
     */
    public static MemorySegment set_summary$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2074.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_summary)(struct _AtkTable*,struct _AtkObject*);
     * }
     */
    public static void set_summary$set(MemorySegment seg, MemorySegment x) {
        constants$2074.const$0.set(seg, x);
    }
    public static MemorySegment set_summary$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2074.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void set_summary$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2074.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_summary set_summary(MemorySegment segment, Arena scope) {
        return set_summary.ofAddress(set_summary$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_selected_columns)(struct _AtkTable*,int**);
     * }
     */
    public interface get_selected_columns {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_selected_columns fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2074.const$1, fi, constants$9.const$0, scope);
        }
        static get_selected_columns ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_selected_columns$VH() {
        return constants$2074.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_selected_columns)(struct _AtkTable*,int**);
     * }
     */
    public static MemorySegment get_selected_columns$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2074.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_selected_columns)(struct _AtkTable*,int**);
     * }
     */
    public static void get_selected_columns$set(MemorySegment seg, MemorySegment x) {
        constants$2074.const$2.set(seg, x);
    }
    public static MemorySegment get_selected_columns$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2074.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_selected_columns$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2074.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_selected_columns get_selected_columns(MemorySegment segment, Arena scope) {
        return get_selected_columns.ofAddress(get_selected_columns$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_selected_rows)(struct _AtkTable*,int**);
     * }
     */
    public interface get_selected_rows {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_selected_rows fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2074.const$3, fi, constants$9.const$0, scope);
        }
        static get_selected_rows ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_selected_rows$VH() {
        return constants$2074.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_selected_rows)(struct _AtkTable*,int**);
     * }
     */
    public static MemorySegment get_selected_rows$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2074.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_selected_rows)(struct _AtkTable*,int**);
     * }
     */
    public static void get_selected_rows$set(MemorySegment seg, MemorySegment x) {
        constants$2074.const$4.set(seg, x);
    }
    public static MemorySegment get_selected_rows$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2074.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_selected_rows$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2074.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_selected_rows get_selected_rows(MemorySegment segment, Arena scope) {
        return get_selected_rows.ofAddress(get_selected_rows$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*is_column_selected)(struct _AtkTable*,int);
     * }
     */
    public interface is_column_selected {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(is_column_selected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2074.const$5, fi, constants$11.const$4, scope);
        }
        static is_column_selected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_column_selected$VH() {
        return constants$2075.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_column_selected)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment is_column_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2075.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_column_selected)(struct _AtkTable*,int);
     * }
     */
    public static void is_column_selected$set(MemorySegment seg, MemorySegment x) {
        constants$2075.const$0.set(seg, x);
    }
    public static MemorySegment is_column_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2075.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void is_column_selected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2075.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_column_selected is_column_selected(MemorySegment segment, Arena scope) {
        return is_column_selected.ofAddress(is_column_selected$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*is_row_selected)(struct _AtkTable*,int);
     * }
     */
    public interface is_row_selected {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(is_row_selected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2075.const$1, fi, constants$11.const$4, scope);
        }
        static is_row_selected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_row_selected$VH() {
        return constants$2075.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_row_selected)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment is_row_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2075.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_row_selected)(struct _AtkTable*,int);
     * }
     */
    public static void is_row_selected$set(MemorySegment seg, MemorySegment x) {
        constants$2075.const$2.set(seg, x);
    }
    public static MemorySegment is_row_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2075.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void is_row_selected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2075.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_row_selected is_row_selected(MemorySegment segment, Arena scope) {
        return is_row_selected.ofAddress(is_row_selected$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*is_selected)(struct _AtkTable*,int,int);
     * }
     */
    public interface is_selected {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(is_selected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2075.const$3, fi, constants$49.const$0, scope);
        }
        static is_selected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$247.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_selected$VH() {
        return constants$2075.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_selected)(struct _AtkTable*,int,int);
     * }
     */
    public static MemorySegment is_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2075.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_selected)(struct _AtkTable*,int,int);
     * }
     */
    public static void is_selected$set(MemorySegment seg, MemorySegment x) {
        constants$2075.const$4.set(seg, x);
    }
    public static MemorySegment is_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2075.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void is_selected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2075.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_selected is_selected(MemorySegment segment, Arena scope) {
        return is_selected.ofAddress(is_selected$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*add_row_selection)(struct _AtkTable*,int);
     * }
     */
    public interface add_row_selection {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(add_row_selection fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2075.const$5, fi, constants$11.const$4, scope);
        }
        static add_row_selection ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle add_row_selection$VH() {
        return constants$2076.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*add_row_selection)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment add_row_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2076.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*add_row_selection)(struct _AtkTable*,int);
     * }
     */
    public static void add_row_selection$set(MemorySegment seg, MemorySegment x) {
        constants$2076.const$0.set(seg, x);
    }
    public static MemorySegment add_row_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2076.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void add_row_selection$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2076.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_row_selection add_row_selection(MemorySegment segment, Arena scope) {
        return add_row_selection.ofAddress(add_row_selection$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*remove_row_selection)(struct _AtkTable*,int);
     * }
     */
    public interface remove_row_selection {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(remove_row_selection fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2076.const$1, fi, constants$11.const$4, scope);
        }
        static remove_row_selection ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remove_row_selection$VH() {
        return constants$2076.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*remove_row_selection)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment remove_row_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2076.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*remove_row_selection)(struct _AtkTable*,int);
     * }
     */
    public static void remove_row_selection$set(MemorySegment seg, MemorySegment x) {
        constants$2076.const$2.set(seg, x);
    }
    public static MemorySegment remove_row_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2076.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_row_selection$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2076.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_row_selection remove_row_selection(MemorySegment segment, Arena scope) {
        return remove_row_selection.ofAddress(remove_row_selection$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*add_column_selection)(struct _AtkTable*,int);
     * }
     */
    public interface add_column_selection {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(add_column_selection fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2076.const$3, fi, constants$11.const$4, scope);
        }
        static add_column_selection ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle add_column_selection$VH() {
        return constants$2076.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*add_column_selection)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment add_column_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2076.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*add_column_selection)(struct _AtkTable*,int);
     * }
     */
    public static void add_column_selection$set(MemorySegment seg, MemorySegment x) {
        constants$2076.const$4.set(seg, x);
    }
    public static MemorySegment add_column_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2076.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void add_column_selection$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2076.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_column_selection add_column_selection(MemorySegment segment, Arena scope) {
        return add_column_selection.ofAddress(add_column_selection$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*remove_column_selection)(struct _AtkTable*,int);
     * }
     */
    public interface remove_column_selection {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(remove_column_selection fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2076.const$5, fi, constants$11.const$4, scope);
        }
        static remove_column_selection ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remove_column_selection$VH() {
        return constants$2077.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*remove_column_selection)(struct _AtkTable*,int);
     * }
     */
    public static MemorySegment remove_column_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2077.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*remove_column_selection)(struct _AtkTable*,int);
     * }
     */
    public static void remove_column_selection$set(MemorySegment seg, MemorySegment x) {
        constants$2077.const$0.set(seg, x);
    }
    public static MemorySegment remove_column_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2077.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_column_selection$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2077.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_column_selection remove_column_selection(MemorySegment segment, Arena scope) {
        return remove_column_selection.ofAddress(remove_column_selection$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*row_inserted)(struct _AtkTable*,int,int);
     * }
     */
    public interface row_inserted {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(row_inserted fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2077.const$1, fi, constants$467.const$3, scope);
        }
        static row_inserted ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1901.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_inserted$VH() {
        return constants$2077.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_inserted)(struct _AtkTable*,int,int);
     * }
     */
    public static MemorySegment row_inserted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2077.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_inserted)(struct _AtkTable*,int,int);
     * }
     */
    public static void row_inserted$set(MemorySegment seg, MemorySegment x) {
        constants$2077.const$2.set(seg, x);
    }
    public static MemorySegment row_inserted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2077.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void row_inserted$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2077.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_inserted row_inserted(MemorySegment segment, Arena scope) {
        return row_inserted.ofAddress(row_inserted$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*column_inserted)(struct _AtkTable*,int,int);
     * }
     */
    public interface column_inserted {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(column_inserted fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2077.const$3, fi, constants$467.const$3, scope);
        }
        static column_inserted ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1901.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle column_inserted$VH() {
        return constants$2077.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*column_inserted)(struct _AtkTable*,int,int);
     * }
     */
    public static MemorySegment column_inserted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2077.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*column_inserted)(struct _AtkTable*,int,int);
     * }
     */
    public static void column_inserted$set(MemorySegment seg, MemorySegment x) {
        constants$2077.const$4.set(seg, x);
    }
    public static MemorySegment column_inserted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2077.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void column_inserted$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2077.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static column_inserted column_inserted(MemorySegment segment, Arena scope) {
        return column_inserted.ofAddress(column_inserted$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*row_deleted)(struct _AtkTable*,int,int);
     * }
     */
    public interface row_deleted {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(row_deleted fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2077.const$5, fi, constants$467.const$3, scope);
        }
        static row_deleted ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1901.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_deleted$VH() {
        return constants$2078.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_deleted)(struct _AtkTable*,int,int);
     * }
     */
    public static MemorySegment row_deleted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2078.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_deleted)(struct _AtkTable*,int,int);
     * }
     */
    public static void row_deleted$set(MemorySegment seg, MemorySegment x) {
        constants$2078.const$0.set(seg, x);
    }
    public static MemorySegment row_deleted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2078.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void row_deleted$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2078.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_deleted row_deleted(MemorySegment segment, Arena scope) {
        return row_deleted.ofAddress(row_deleted$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*column_deleted)(struct _AtkTable*,int,int);
     * }
     */
    public interface column_deleted {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(column_deleted fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2078.const$1, fi, constants$467.const$3, scope);
        }
        static column_deleted ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1901.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle column_deleted$VH() {
        return constants$2078.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*column_deleted)(struct _AtkTable*,int,int);
     * }
     */
    public static MemorySegment column_deleted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2078.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*column_deleted)(struct _AtkTable*,int,int);
     * }
     */
    public static void column_deleted$set(MemorySegment seg, MemorySegment x) {
        constants$2078.const$2.set(seg, x);
    }
    public static MemorySegment column_deleted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2078.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void column_deleted$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2078.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static column_deleted column_deleted(MemorySegment segment, Arena scope) {
        return column_deleted.ofAddress(column_deleted$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*row_reordered)(struct _AtkTable*);
     * }
     */
    public interface row_reordered {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(row_reordered fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2078.const$3, fi, constants$13.const$1, scope);
        }
        static row_reordered ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_reordered$VH() {
        return constants$2078.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_reordered)(struct _AtkTable*);
     * }
     */
    public static MemorySegment row_reordered$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2078.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_reordered)(struct _AtkTable*);
     * }
     */
    public static void row_reordered$set(MemorySegment seg, MemorySegment x) {
        constants$2078.const$4.set(seg, x);
    }
    public static MemorySegment row_reordered$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2078.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void row_reordered$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2078.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_reordered row_reordered(MemorySegment segment, Arena scope) {
        return row_reordered.ofAddress(row_reordered$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*column_reordered)(struct _AtkTable*);
     * }
     */
    public interface column_reordered {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(column_reordered fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2078.const$5, fi, constants$13.const$1, scope);
        }
        static column_reordered ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle column_reordered$VH() {
        return constants$2079.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*column_reordered)(struct _AtkTable*);
     * }
     */
    public static MemorySegment column_reordered$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2079.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*column_reordered)(struct _AtkTable*);
     * }
     */
    public static void column_reordered$set(MemorySegment seg, MemorySegment x) {
        constants$2079.const$0.set(seg, x);
    }
    public static MemorySegment column_reordered$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2079.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void column_reordered$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2079.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static column_reordered column_reordered(MemorySegment segment, Arena scope) {
        return column_reordered.ofAddress(column_reordered$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*model_changed)(struct _AtkTable*);
     * }
     */
    public interface model_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(model_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2079.const$1, fi, constants$13.const$1, scope);
        }
        static model_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle model_changed$VH() {
        return constants$2079.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*model_changed)(struct _AtkTable*);
     * }
     */
    public static MemorySegment model_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2079.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*model_changed)(struct _AtkTable*);
     * }
     */
    public static void model_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2079.const$2.set(seg, x);
    }
    public static MemorySegment model_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2079.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void model_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2079.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static model_changed model_changed(MemorySegment segment, Arena scope) {
        return model_changed.ofAddress(model_changed$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


