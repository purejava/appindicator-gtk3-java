// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkTreeViewClass {
 *     struct _GtkContainerClass parent_class;
 *     void (*row_activated)(struct _GtkTreeView*,struct _GtkTreePath*,struct _GtkTreeViewColumn*);
 *     int (*test_expand_row)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
 *     int (*test_collapse_row)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
 *     void (*row_expanded)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
 *     void (*row_collapsed)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
 *     void (*columns_changed)(struct _GtkTreeView*);
 *     void (*cursor_changed)(struct _GtkTreeView*);
 *     int (*move_cursor)(struct _GtkTreeView*,enum GtkMovementStep,int);
 *     int (*select_all)(struct _GtkTreeView*);
 *     int (*unselect_all)(struct _GtkTreeView*);
 *     int (*select_cursor_row)(struct _GtkTreeView*,int);
 *     int (*toggle_cursor_row)(struct _GtkTreeView*);
 *     int (*expand_collapse_cursor_row)(struct _GtkTreeView*,int,int,int);
 *     int (*select_cursor_parent)(struct _GtkTreeView*);
 *     int (*start_interactive_search)(struct _GtkTreeView*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 * };
 * }
 */
public class _GtkTreeViewClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2466.const$1;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 976);
    }
    /**
     * {@snippet :
 * void (*row_activated)(struct _GtkTreeView*,struct _GtkTreePath*,struct _GtkTreeViewColumn*);
     * }
     */
    public interface row_activated {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(row_activated fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2466.const$2, fi, constants$14.const$3, scope);
        }
        static row_activated ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_activated$VH() {
        return constants$2466.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_activated)(struct _GtkTreeView*,struct _GtkTreePath*,struct _GtkTreeViewColumn*);
     * }
     */
    public static MemorySegment row_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2466.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_activated)(struct _GtkTreeView*,struct _GtkTreePath*,struct _GtkTreeViewColumn*);
     * }
     */
    public static void row_activated$set(MemorySegment seg, MemorySegment x) {
        constants$2466.const$3.set(seg, x);
    }
    public static MemorySegment row_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2466.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void row_activated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2466.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_activated row_activated(MemorySegment segment, Arena scope) {
        return row_activated.ofAddress(row_activated$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*test_expand_row)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public interface test_expand_row {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(test_expand_row fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2466.const$4, fi, constants$12.const$2, scope);
        }
        static test_expand_row ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle test_expand_row$VH() {
        return constants$2466.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*test_expand_row)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public static MemorySegment test_expand_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2466.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*test_expand_row)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public static void test_expand_row$set(MemorySegment seg, MemorySegment x) {
        constants$2466.const$5.set(seg, x);
    }
    public static MemorySegment test_expand_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2466.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void test_expand_row$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2466.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static test_expand_row test_expand_row(MemorySegment segment, Arena scope) {
        return test_expand_row.ofAddress(test_expand_row$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*test_collapse_row)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public interface test_collapse_row {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(test_collapse_row fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2467.const$0, fi, constants$12.const$2, scope);
        }
        static test_collapse_row ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle test_collapse_row$VH() {
        return constants$2467.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*test_collapse_row)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public static MemorySegment test_collapse_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2467.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*test_collapse_row)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public static void test_collapse_row$set(MemorySegment seg, MemorySegment x) {
        constants$2467.const$1.set(seg, x);
    }
    public static MemorySegment test_collapse_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2467.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void test_collapse_row$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2467.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static test_collapse_row test_collapse_row(MemorySegment segment, Arena scope) {
        return test_collapse_row.ofAddress(test_collapse_row$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*row_expanded)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public interface row_expanded {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(row_expanded fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2467.const$2, fi, constants$14.const$3, scope);
        }
        static row_expanded ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_expanded$VH() {
        return constants$2467.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_expanded)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public static MemorySegment row_expanded$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2467.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_expanded)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public static void row_expanded$set(MemorySegment seg, MemorySegment x) {
        constants$2467.const$3.set(seg, x);
    }
    public static MemorySegment row_expanded$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2467.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void row_expanded$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2467.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_expanded row_expanded(MemorySegment segment, Arena scope) {
        return row_expanded.ofAddress(row_expanded$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*row_collapsed)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public interface row_collapsed {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(row_collapsed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2467.const$4, fi, constants$14.const$3, scope);
        }
        static row_collapsed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_collapsed$VH() {
        return constants$2467.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_collapsed)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public static MemorySegment row_collapsed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2467.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_collapsed)(struct _GtkTreeView*,struct _GtkTreeIter*,struct _GtkTreePath*);
     * }
     */
    public static void row_collapsed$set(MemorySegment seg, MemorySegment x) {
        constants$2467.const$5.set(seg, x);
    }
    public static MemorySegment row_collapsed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2467.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void row_collapsed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2467.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_collapsed row_collapsed(MemorySegment segment, Arena scope) {
        return row_collapsed.ofAddress(row_collapsed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*columns_changed)(struct _GtkTreeView*);
     * }
     */
    public interface columns_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(columns_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2468.const$0, fi, constants$13.const$1, scope);
        }
        static columns_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle columns_changed$VH() {
        return constants$2468.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*columns_changed)(struct _GtkTreeView*);
     * }
     */
    public static MemorySegment columns_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2468.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*columns_changed)(struct _GtkTreeView*);
     * }
     */
    public static void columns_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2468.const$1.set(seg, x);
    }
    public static MemorySegment columns_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2468.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void columns_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2468.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static columns_changed columns_changed(MemorySegment segment, Arena scope) {
        return columns_changed.ofAddress(columns_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*cursor_changed)(struct _GtkTreeView*);
     * }
     */
    public interface cursor_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(cursor_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2468.const$2, fi, constants$13.const$1, scope);
        }
        static cursor_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cursor_changed$VH() {
        return constants$2468.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*cursor_changed)(struct _GtkTreeView*);
     * }
     */
    public static MemorySegment cursor_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2468.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*cursor_changed)(struct _GtkTreeView*);
     * }
     */
    public static void cursor_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2468.const$3.set(seg, x);
    }
    public static MemorySegment cursor_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2468.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cursor_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2468.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static cursor_changed cursor_changed(MemorySegment segment, Arena scope) {
        return cursor_changed.ofAddress(cursor_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*move_cursor)(struct _GtkTreeView*,enum GtkMovementStep,int);
     * }
     */
    public interface move_cursor {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(move_cursor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2468.const$4, fi, constants$49.const$0, scope);
        }
        static move_cursor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$247.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_cursor$VH() {
        return constants$2468.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*move_cursor)(struct _GtkTreeView*,enum GtkMovementStep,int);
     * }
     */
    public static MemorySegment move_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2468.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*move_cursor)(struct _GtkTreeView*,enum GtkMovementStep,int);
     * }
     */
    public static void move_cursor$set(MemorySegment seg, MemorySegment x) {
        constants$2468.const$5.set(seg, x);
    }
    public static MemorySegment move_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2468.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void move_cursor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2468.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_cursor move_cursor(MemorySegment segment, Arena scope) {
        return move_cursor.ofAddress(move_cursor$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*select_all)(struct _GtkTreeView*);
     * }
     */
    public interface select_all {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(select_all fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2469.const$0, fi, constants$10.const$5, scope);
        }
        static select_all ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle select_all$VH() {
        return constants$2469.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*select_all)(struct _GtkTreeView*);
     * }
     */
    public static MemorySegment select_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2469.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*select_all)(struct _GtkTreeView*);
     * }
     */
    public static void select_all$set(MemorySegment seg, MemorySegment x) {
        constants$2469.const$1.set(seg, x);
    }
    public static MemorySegment select_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2469.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void select_all$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2469.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_all select_all(MemorySegment segment, Arena scope) {
        return select_all.ofAddress(select_all$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*unselect_all)(struct _GtkTreeView*);
     * }
     */
    public interface unselect_all {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(unselect_all fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2469.const$2, fi, constants$10.const$5, scope);
        }
        static unselect_all ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unselect_all$VH() {
        return constants$2469.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*unselect_all)(struct _GtkTreeView*);
     * }
     */
    public static MemorySegment unselect_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2469.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*unselect_all)(struct _GtkTreeView*);
     * }
     */
    public static void unselect_all$set(MemorySegment seg, MemorySegment x) {
        constants$2469.const$3.set(seg, x);
    }
    public static MemorySegment unselect_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2469.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_all$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2469.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_all unselect_all(MemorySegment segment, Arena scope) {
        return unselect_all.ofAddress(unselect_all$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*select_cursor_row)(struct _GtkTreeView*,int);
     * }
     */
    public interface select_cursor_row {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(select_cursor_row fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2469.const$4, fi, constants$11.const$4, scope);
        }
        static select_cursor_row ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle select_cursor_row$VH() {
        return constants$2469.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*select_cursor_row)(struct _GtkTreeView*,int);
     * }
     */
    public static MemorySegment select_cursor_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2469.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*select_cursor_row)(struct _GtkTreeView*,int);
     * }
     */
    public static void select_cursor_row$set(MemorySegment seg, MemorySegment x) {
        constants$2469.const$5.set(seg, x);
    }
    public static MemorySegment select_cursor_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2469.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void select_cursor_row$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2469.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_cursor_row select_cursor_row(MemorySegment segment, Arena scope) {
        return select_cursor_row.ofAddress(select_cursor_row$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*toggle_cursor_row)(struct _GtkTreeView*);
     * }
     */
    public interface toggle_cursor_row {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(toggle_cursor_row fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2470.const$0, fi, constants$10.const$5, scope);
        }
        static toggle_cursor_row ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle toggle_cursor_row$VH() {
        return constants$2470.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*toggle_cursor_row)(struct _GtkTreeView*);
     * }
     */
    public static MemorySegment toggle_cursor_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2470.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*toggle_cursor_row)(struct _GtkTreeView*);
     * }
     */
    public static void toggle_cursor_row$set(MemorySegment seg, MemorySegment x) {
        constants$2470.const$1.set(seg, x);
    }
    public static MemorySegment toggle_cursor_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2470.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_cursor_row$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2470.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_cursor_row toggle_cursor_row(MemorySegment segment, Arena scope) {
        return toggle_cursor_row.ofAddress(toggle_cursor_row$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*expand_collapse_cursor_row)(struct _GtkTreeView*,int,int,int);
     * }
     */
    public interface expand_collapse_cursor_row {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(expand_collapse_cursor_row fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2470.const$2, fi, constants$608.const$5, scope);
        }
        static expand_collapse_cursor_row ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$1995.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle expand_collapse_cursor_row$VH() {
        return constants$2470.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*expand_collapse_cursor_row)(struct _GtkTreeView*,int,int,int);
     * }
     */
    public static MemorySegment expand_collapse_cursor_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2470.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*expand_collapse_cursor_row)(struct _GtkTreeView*,int,int,int);
     * }
     */
    public static void expand_collapse_cursor_row$set(MemorySegment seg, MemorySegment x) {
        constants$2470.const$3.set(seg, x);
    }
    public static MemorySegment expand_collapse_cursor_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2470.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void expand_collapse_cursor_row$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2470.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static expand_collapse_cursor_row expand_collapse_cursor_row(MemorySegment segment, Arena scope) {
        return expand_collapse_cursor_row.ofAddress(expand_collapse_cursor_row$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*select_cursor_parent)(struct _GtkTreeView*);
     * }
     */
    public interface select_cursor_parent {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(select_cursor_parent fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2470.const$4, fi, constants$10.const$5, scope);
        }
        static select_cursor_parent ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle select_cursor_parent$VH() {
        return constants$2470.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*select_cursor_parent)(struct _GtkTreeView*);
     * }
     */
    public static MemorySegment select_cursor_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2470.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*select_cursor_parent)(struct _GtkTreeView*);
     * }
     */
    public static void select_cursor_parent$set(MemorySegment seg, MemorySegment x) {
        constants$2470.const$5.set(seg, x);
    }
    public static MemorySegment select_cursor_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2470.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void select_cursor_parent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2470.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_cursor_parent select_cursor_parent(MemorySegment segment, Arena scope) {
        return select_cursor_parent.ofAddress(select_cursor_parent$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*start_interactive_search)(struct _GtkTreeView*);
     * }
     */
    public interface start_interactive_search {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(start_interactive_search fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2471.const$0, fi, constants$10.const$5, scope);
        }
        static start_interactive_search ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle start_interactive_search$VH() {
        return constants$2471.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*start_interactive_search)(struct _GtkTreeView*);
     * }
     */
    public static MemorySegment start_interactive_search$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2471.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*start_interactive_search)(struct _GtkTreeView*);
     * }
     */
    public static void start_interactive_search$set(MemorySegment seg, MemorySegment x) {
        constants$2471.const$1.set(seg, x);
    }
    public static MemorySegment start_interactive_search$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2471.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void start_interactive_search$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2471.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_interactive_search start_interactive_search(MemorySegment segment, Arena scope) {
        return start_interactive_search.ofAddress(start_interactive_search$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2471.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2471.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2471.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2471.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2471.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2471.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2471.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2471.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2471.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2471.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2471.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2471.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2472.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2472.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2472.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2472.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2472.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2472.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2472.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2472.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2472.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2472.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2472.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2472.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2472.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved5$VH() {
        return constants$2472.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2472.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$2472.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2472.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2472.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, Arena scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2473.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved6$VH() {
        return constants$2473.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2473.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$2473.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2473.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2473.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, Arena scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2473.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved7$VH() {
        return constants$2473.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2473.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$2473.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2473.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2473.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, Arena scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2473.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved8$VH() {
        return constants$2473.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2473.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$2473.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2473.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2473.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, Arena scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


