// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkTreeViewClass {
 *     GtkContainerClass parent_class;
 *     void (*row_activated)(GtkTreeView *, GtkTreePath *, GtkTreeViewColumn *);
 *     gboolean (*test_expand_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *);
 *     gboolean (*test_collapse_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *);
 *     void (*row_expanded)(GtkTreeView *, GtkTreeIter *, GtkTreePath *);
 *     void (*row_collapsed)(GtkTreeView *, GtkTreeIter *, GtkTreePath *);
 *     void (*columns_changed)(GtkTreeView *);
 *     void (*cursor_changed)(GtkTreeView *);
 *     gboolean (*move_cursor)(GtkTreeView *, GtkMovementStep, gint);
 *     gboolean (*select_all)(GtkTreeView *);
 *     gboolean (*unselect_all)(GtkTreeView *);
 *     gboolean (*select_cursor_row)(GtkTreeView *, gboolean);
 *     gboolean (*toggle_cursor_row)(GtkTreeView *);
 *     gboolean (*expand_collapse_cursor_row)(GtkTreeView *, gboolean, gboolean, gboolean);
 *     gboolean (*select_cursor_parent)(GtkTreeView *);
 *     gboolean (*start_interactive_search)(GtkTreeView *);
 *     void (*_gtk_reserved1)(void);
 *     void (*_gtk_reserved2)(void);
 *     void (*_gtk_reserved3)(void);
 *     void (*_gtk_reserved4)(void);
 *     void (*_gtk_reserved5)(void);
 *     void (*_gtk_reserved6)(void);
 *     void (*_gtk_reserved7)(void);
 *     void (*_gtk_reserved8)(void);
 * }
 * }
 */
public class _GtkTreeViewClass {

    _GtkTreeViewClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GtkContainerClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("row_activated"),
        app_indicator_h.C_POINTER.withName("test_expand_row"),
        app_indicator_h.C_POINTER.withName("test_collapse_row"),
        app_indicator_h.C_POINTER.withName("row_expanded"),
        app_indicator_h.C_POINTER.withName("row_collapsed"),
        app_indicator_h.C_POINTER.withName("columns_changed"),
        app_indicator_h.C_POINTER.withName("cursor_changed"),
        app_indicator_h.C_POINTER.withName("move_cursor"),
        app_indicator_h.C_POINTER.withName("select_all"),
        app_indicator_h.C_POINTER.withName("unselect_all"),
        app_indicator_h.C_POINTER.withName("select_cursor_row"),
        app_indicator_h.C_POINTER.withName("toggle_cursor_row"),
        app_indicator_h.C_POINTER.withName("expand_collapse_cursor_row"),
        app_indicator_h.C_POINTER.withName("select_cursor_parent"),
        app_indicator_h.C_POINTER.withName("start_interactive_search"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved1"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved2"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved3"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved4"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved5"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved6"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved7"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved8")
    ).withName("_GtkTreeViewClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkContainerClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkContainerClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkContainerClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkContainerClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*row_activated)(GtkTreeView *, GtkTreePath *, GtkTreeViewColumn *)
     * }
     */
    public class row_activated {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(row_activated.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(row_activated.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout row_activated$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("row_activated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*row_activated)(GtkTreeView *, GtkTreePath *, GtkTreeViewColumn *)
     * }
     */
    public static final AddressLayout row_activated$layout() {
        return row_activated$LAYOUT;
    }

    private static final long row_activated$OFFSET = 976;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*row_activated)(GtkTreeView *, GtkTreePath *, GtkTreeViewColumn *)
     * }
     */
    public static final long row_activated$offset() {
        return row_activated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*row_activated)(GtkTreeView *, GtkTreePath *, GtkTreeViewColumn *)
     * }
     */
    public static MemorySegment row_activated(MemorySegment struct) {
        return struct.get(row_activated$LAYOUT, row_activated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*row_activated)(GtkTreeView *, GtkTreePath *, GtkTreeViewColumn *)
     * }
     */
    public static void row_activated(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(row_activated$LAYOUT, row_activated$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*test_expand_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public class test_expand_row {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(test_expand_row.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(test_expand_row.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout test_expand_row$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("test_expand_row"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*test_expand_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static final AddressLayout test_expand_row$layout() {
        return test_expand_row$LAYOUT;
    }

    private static final long test_expand_row$OFFSET = 984;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*test_expand_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static final long test_expand_row$offset() {
        return test_expand_row$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*test_expand_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static MemorySegment test_expand_row(MemorySegment struct) {
        return struct.get(test_expand_row$LAYOUT, test_expand_row$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*test_expand_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static void test_expand_row(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(test_expand_row$LAYOUT, test_expand_row$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*test_collapse_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public class test_collapse_row {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(test_collapse_row.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(test_collapse_row.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout test_collapse_row$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("test_collapse_row"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*test_collapse_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static final AddressLayout test_collapse_row$layout() {
        return test_collapse_row$LAYOUT;
    }

    private static final long test_collapse_row$OFFSET = 992;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*test_collapse_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static final long test_collapse_row$offset() {
        return test_collapse_row$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*test_collapse_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static MemorySegment test_collapse_row(MemorySegment struct) {
        return struct.get(test_collapse_row$LAYOUT, test_collapse_row$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*test_collapse_row)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static void test_collapse_row(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(test_collapse_row$LAYOUT, test_collapse_row$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*row_expanded)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public class row_expanded {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(row_expanded.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(row_expanded.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout row_expanded$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("row_expanded"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*row_expanded)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static final AddressLayout row_expanded$layout() {
        return row_expanded$LAYOUT;
    }

    private static final long row_expanded$OFFSET = 1000;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*row_expanded)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static final long row_expanded$offset() {
        return row_expanded$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*row_expanded)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static MemorySegment row_expanded(MemorySegment struct) {
        return struct.get(row_expanded$LAYOUT, row_expanded$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*row_expanded)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static void row_expanded(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(row_expanded$LAYOUT, row_expanded$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*row_collapsed)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public class row_collapsed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(row_collapsed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(row_collapsed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout row_collapsed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("row_collapsed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*row_collapsed)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static final AddressLayout row_collapsed$layout() {
        return row_collapsed$LAYOUT;
    }

    private static final long row_collapsed$OFFSET = 1008;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*row_collapsed)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static final long row_collapsed$offset() {
        return row_collapsed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*row_collapsed)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static MemorySegment row_collapsed(MemorySegment struct) {
        return struct.get(row_collapsed$LAYOUT, row_collapsed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*row_collapsed)(GtkTreeView *, GtkTreeIter *, GtkTreePath *)
     * }
     */
    public static void row_collapsed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(row_collapsed$LAYOUT, row_collapsed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*columns_changed)(GtkTreeView *)
     * }
     */
    public class columns_changed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(columns_changed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(columns_changed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout columns_changed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("columns_changed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*columns_changed)(GtkTreeView *)
     * }
     */
    public static final AddressLayout columns_changed$layout() {
        return columns_changed$LAYOUT;
    }

    private static final long columns_changed$OFFSET = 1016;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*columns_changed)(GtkTreeView *)
     * }
     */
    public static final long columns_changed$offset() {
        return columns_changed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*columns_changed)(GtkTreeView *)
     * }
     */
    public static MemorySegment columns_changed(MemorySegment struct) {
        return struct.get(columns_changed$LAYOUT, columns_changed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*columns_changed)(GtkTreeView *)
     * }
     */
    public static void columns_changed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(columns_changed$LAYOUT, columns_changed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*cursor_changed)(GtkTreeView *)
     * }
     */
    public class cursor_changed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(cursor_changed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(cursor_changed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout cursor_changed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cursor_changed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*cursor_changed)(GtkTreeView *)
     * }
     */
    public static final AddressLayout cursor_changed$layout() {
        return cursor_changed$LAYOUT;
    }

    private static final long cursor_changed$OFFSET = 1024;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*cursor_changed)(GtkTreeView *)
     * }
     */
    public static final long cursor_changed$offset() {
        return cursor_changed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*cursor_changed)(GtkTreeView *)
     * }
     */
    public static MemorySegment cursor_changed(MemorySegment struct) {
        return struct.get(cursor_changed$LAYOUT, cursor_changed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*cursor_changed)(GtkTreeView *)
     * }
     */
    public static void cursor_changed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cursor_changed$LAYOUT, cursor_changed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*move_cursor)(GtkTreeView *, GtkMovementStep, gint)
     * }
     */
    public class move_cursor {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(move_cursor.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(move_cursor.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout move_cursor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("move_cursor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*move_cursor)(GtkTreeView *, GtkMovementStep, gint)
     * }
     */
    public static final AddressLayout move_cursor$layout() {
        return move_cursor$LAYOUT;
    }

    private static final long move_cursor$OFFSET = 1032;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*move_cursor)(GtkTreeView *, GtkMovementStep, gint)
     * }
     */
    public static final long move_cursor$offset() {
        return move_cursor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*move_cursor)(GtkTreeView *, GtkMovementStep, gint)
     * }
     */
    public static MemorySegment move_cursor(MemorySegment struct) {
        return struct.get(move_cursor$LAYOUT, move_cursor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*move_cursor)(GtkTreeView *, GtkMovementStep, gint)
     * }
     */
    public static void move_cursor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(move_cursor$LAYOUT, move_cursor$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*select_all)(GtkTreeView *)
     * }
     */
    public class select_all {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(select_all.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(select_all.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout select_all$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("select_all"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*select_all)(GtkTreeView *)
     * }
     */
    public static final AddressLayout select_all$layout() {
        return select_all$LAYOUT;
    }

    private static final long select_all$OFFSET = 1040;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*select_all)(GtkTreeView *)
     * }
     */
    public static final long select_all$offset() {
        return select_all$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*select_all)(GtkTreeView *)
     * }
     */
    public static MemorySegment select_all(MemorySegment struct) {
        return struct.get(select_all$LAYOUT, select_all$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*select_all)(GtkTreeView *)
     * }
     */
    public static void select_all(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(select_all$LAYOUT, select_all$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*unselect_all)(GtkTreeView *)
     * }
     */
    public class unselect_all {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(unselect_all.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(unselect_all.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout unselect_all$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unselect_all"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*unselect_all)(GtkTreeView *)
     * }
     */
    public static final AddressLayout unselect_all$layout() {
        return unselect_all$LAYOUT;
    }

    private static final long unselect_all$OFFSET = 1048;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*unselect_all)(GtkTreeView *)
     * }
     */
    public static final long unselect_all$offset() {
        return unselect_all$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*unselect_all)(GtkTreeView *)
     * }
     */
    public static MemorySegment unselect_all(MemorySegment struct) {
        return struct.get(unselect_all$LAYOUT, unselect_all$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*unselect_all)(GtkTreeView *)
     * }
     */
    public static void unselect_all(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unselect_all$LAYOUT, unselect_all$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*select_cursor_row)(GtkTreeView *, gboolean)
     * }
     */
    public class select_cursor_row {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(select_cursor_row.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(select_cursor_row.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout select_cursor_row$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("select_cursor_row"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*select_cursor_row)(GtkTreeView *, gboolean)
     * }
     */
    public static final AddressLayout select_cursor_row$layout() {
        return select_cursor_row$LAYOUT;
    }

    private static final long select_cursor_row$OFFSET = 1056;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*select_cursor_row)(GtkTreeView *, gboolean)
     * }
     */
    public static final long select_cursor_row$offset() {
        return select_cursor_row$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*select_cursor_row)(GtkTreeView *, gboolean)
     * }
     */
    public static MemorySegment select_cursor_row(MemorySegment struct) {
        return struct.get(select_cursor_row$LAYOUT, select_cursor_row$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*select_cursor_row)(GtkTreeView *, gboolean)
     * }
     */
    public static void select_cursor_row(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(select_cursor_row$LAYOUT, select_cursor_row$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*toggle_cursor_row)(GtkTreeView *)
     * }
     */
    public class toggle_cursor_row {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(toggle_cursor_row.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(toggle_cursor_row.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout toggle_cursor_row$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("toggle_cursor_row"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*toggle_cursor_row)(GtkTreeView *)
     * }
     */
    public static final AddressLayout toggle_cursor_row$layout() {
        return toggle_cursor_row$LAYOUT;
    }

    private static final long toggle_cursor_row$OFFSET = 1064;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*toggle_cursor_row)(GtkTreeView *)
     * }
     */
    public static final long toggle_cursor_row$offset() {
        return toggle_cursor_row$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*toggle_cursor_row)(GtkTreeView *)
     * }
     */
    public static MemorySegment toggle_cursor_row(MemorySegment struct) {
        return struct.get(toggle_cursor_row$LAYOUT, toggle_cursor_row$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*toggle_cursor_row)(GtkTreeView *)
     * }
     */
    public static void toggle_cursor_row(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(toggle_cursor_row$LAYOUT, toggle_cursor_row$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*expand_collapse_cursor_row)(GtkTreeView *, gboolean, gboolean, gboolean)
     * }
     */
    public class expand_collapse_cursor_row {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(expand_collapse_cursor_row.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(expand_collapse_cursor_row.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout expand_collapse_cursor_row$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("expand_collapse_cursor_row"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*expand_collapse_cursor_row)(GtkTreeView *, gboolean, gboolean, gboolean)
     * }
     */
    public static final AddressLayout expand_collapse_cursor_row$layout() {
        return expand_collapse_cursor_row$LAYOUT;
    }

    private static final long expand_collapse_cursor_row$OFFSET = 1072;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*expand_collapse_cursor_row)(GtkTreeView *, gboolean, gboolean, gboolean)
     * }
     */
    public static final long expand_collapse_cursor_row$offset() {
        return expand_collapse_cursor_row$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*expand_collapse_cursor_row)(GtkTreeView *, gboolean, gboolean, gboolean)
     * }
     */
    public static MemorySegment expand_collapse_cursor_row(MemorySegment struct) {
        return struct.get(expand_collapse_cursor_row$LAYOUT, expand_collapse_cursor_row$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*expand_collapse_cursor_row)(GtkTreeView *, gboolean, gboolean, gboolean)
     * }
     */
    public static void expand_collapse_cursor_row(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(expand_collapse_cursor_row$LAYOUT, expand_collapse_cursor_row$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*select_cursor_parent)(GtkTreeView *)
     * }
     */
    public class select_cursor_parent {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(select_cursor_parent.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(select_cursor_parent.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout select_cursor_parent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("select_cursor_parent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*select_cursor_parent)(GtkTreeView *)
     * }
     */
    public static final AddressLayout select_cursor_parent$layout() {
        return select_cursor_parent$LAYOUT;
    }

    private static final long select_cursor_parent$OFFSET = 1080;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*select_cursor_parent)(GtkTreeView *)
     * }
     */
    public static final long select_cursor_parent$offset() {
        return select_cursor_parent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*select_cursor_parent)(GtkTreeView *)
     * }
     */
    public static MemorySegment select_cursor_parent(MemorySegment struct) {
        return struct.get(select_cursor_parent$LAYOUT, select_cursor_parent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*select_cursor_parent)(GtkTreeView *)
     * }
     */
    public static void select_cursor_parent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(select_cursor_parent$LAYOUT, select_cursor_parent$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*start_interactive_search)(GtkTreeView *)
     * }
     */
    public class start_interactive_search {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(start_interactive_search.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(start_interactive_search.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout start_interactive_search$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("start_interactive_search"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*start_interactive_search)(GtkTreeView *)
     * }
     */
    public static final AddressLayout start_interactive_search$layout() {
        return start_interactive_search$LAYOUT;
    }

    private static final long start_interactive_search$OFFSET = 1088;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*start_interactive_search)(GtkTreeView *)
     * }
     */
    public static final long start_interactive_search$offset() {
        return start_interactive_search$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*start_interactive_search)(GtkTreeView *)
     * }
     */
    public static MemorySegment start_interactive_search(MemorySegment struct) {
        return struct.get(start_interactive_search$LAYOUT, start_interactive_search$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*start_interactive_search)(GtkTreeView *)
     * }
     */
    public static void start_interactive_search(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(start_interactive_search$LAYOUT, start_interactive_search$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public class _gtk_reserved1 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved1.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved1.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved1$layout() {
        return _gtk_reserved1$LAYOUT;
    }

    private static final long _gtk_reserved1$OFFSET = 1096;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static final long _gtk_reserved1$offset() {
        return _gtk_reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static MemorySegment _gtk_reserved1(MemorySegment struct) {
        return struct.get(_gtk_reserved1$LAYOUT, _gtk_reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static void _gtk_reserved1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved1$LAYOUT, _gtk_reserved1$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public class _gtk_reserved2 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved2$layout() {
        return _gtk_reserved2$LAYOUT;
    }

    private static final long _gtk_reserved2$OFFSET = 1104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static final long _gtk_reserved2$offset() {
        return _gtk_reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static MemorySegment _gtk_reserved2(MemorySegment struct) {
        return struct.get(_gtk_reserved2$LAYOUT, _gtk_reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static void _gtk_reserved2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved2$LAYOUT, _gtk_reserved2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public class _gtk_reserved3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved3$layout() {
        return _gtk_reserved3$LAYOUT;
    }

    private static final long _gtk_reserved3$OFFSET = 1112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static final long _gtk_reserved3$offset() {
        return _gtk_reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static MemorySegment _gtk_reserved3(MemorySegment struct) {
        return struct.get(_gtk_reserved3$LAYOUT, _gtk_reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static void _gtk_reserved3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved3$LAYOUT, _gtk_reserved3$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public class _gtk_reserved4 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved4.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved4.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved4$layout() {
        return _gtk_reserved4$LAYOUT;
    }

    private static final long _gtk_reserved4$OFFSET = 1120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static final long _gtk_reserved4$offset() {
        return _gtk_reserved4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static MemorySegment _gtk_reserved4(MemorySegment struct) {
        return struct.get(_gtk_reserved4$LAYOUT, _gtk_reserved4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static void _gtk_reserved4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved4$LAYOUT, _gtk_reserved4$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved5)(void)
     * }
     */
    public class _gtk_reserved5 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved5.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved5.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved5$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved5"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved5)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved5$layout() {
        return _gtk_reserved5$LAYOUT;
    }

    private static final long _gtk_reserved5$OFFSET = 1128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved5)(void)
     * }
     */
    public static final long _gtk_reserved5$offset() {
        return _gtk_reserved5$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved5)(void)
     * }
     */
    public static MemorySegment _gtk_reserved5(MemorySegment struct) {
        return struct.get(_gtk_reserved5$LAYOUT, _gtk_reserved5$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved5)(void)
     * }
     */
    public static void _gtk_reserved5(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved5$LAYOUT, _gtk_reserved5$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved6)(void)
     * }
     */
    public class _gtk_reserved6 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved6.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved6.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved6$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved6"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved6)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved6$layout() {
        return _gtk_reserved6$LAYOUT;
    }

    private static final long _gtk_reserved6$OFFSET = 1136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved6)(void)
     * }
     */
    public static final long _gtk_reserved6$offset() {
        return _gtk_reserved6$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved6)(void)
     * }
     */
    public static MemorySegment _gtk_reserved6(MemorySegment struct) {
        return struct.get(_gtk_reserved6$LAYOUT, _gtk_reserved6$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved6)(void)
     * }
     */
    public static void _gtk_reserved6(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved6$LAYOUT, _gtk_reserved6$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved7)(void)
     * }
     */
    public class _gtk_reserved7 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved7.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved7.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved7$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved7"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved7)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved7$layout() {
        return _gtk_reserved7$LAYOUT;
    }

    private static final long _gtk_reserved7$OFFSET = 1144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved7)(void)
     * }
     */
    public static final long _gtk_reserved7$offset() {
        return _gtk_reserved7$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved7)(void)
     * }
     */
    public static MemorySegment _gtk_reserved7(MemorySegment struct) {
        return struct.get(_gtk_reserved7$LAYOUT, _gtk_reserved7$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved7)(void)
     * }
     */
    public static void _gtk_reserved7(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved7$LAYOUT, _gtk_reserved7$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved8)(void)
     * }
     */
    public class _gtk_reserved8 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved8.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved8.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved8$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved8)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved8$layout() {
        return _gtk_reserved8$LAYOUT;
    }

    private static final long _gtk_reserved8$OFFSET = 1152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved8)(void)
     * }
     */
    public static final long _gtk_reserved8$offset() {
        return _gtk_reserved8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved8)(void)
     * }
     */
    public static MemorySegment _gtk_reserved8(MemorySegment struct) {
        return struct.get(_gtk_reserved8$LAYOUT, _gtk_reserved8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved8)(void)
     * }
     */
    public static void _gtk_reserved8(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved8$LAYOUT, _gtk_reserved8$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

