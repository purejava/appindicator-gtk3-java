// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GSourceCallbackFuncs {
 *     void (*ref)(void*);
 *     void (*unref)(void*);
 *     void (*get)(void*,struct _GSource*,int (**)(void*),void**);
 * };
 * }
 */
public class _GSourceCallbackFuncs {

    public static MemoryLayout $LAYOUT() {
        return constants$258.const$4;
    }
    /**
     * {@snippet :
 * void (*ref)(void*);
     * }
     */
    public interface ref {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(ref fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$258.const$5, fi, constants$13.const$1, scope);
        }
        static ref ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ref$VH() {
        return constants$259.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ref)(void*);
     * }
     */
    public static MemorySegment ref$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$259.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ref)(void*);
     * }
     */
    public static void ref$set(MemorySegment seg, MemorySegment x) {
        constants$259.const$0.set(seg, x);
    }
    public static MemorySegment ref$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$259.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ref$set(MemorySegment seg, long index, MemorySegment x) {
        constants$259.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref ref(MemorySegment segment, Arena scope) {
        return ref.ofAddress(ref$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unref)(void*);
     * }
     */
    public interface unref {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(unref fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$259.const$1, fi, constants$13.const$1, scope);
        }
        static unref ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unref$VH() {
        return constants$259.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unref)(void*);
     * }
     */
    public static MemorySegment unref$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$259.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unref)(void*);
     * }
     */
    public static void unref$set(MemorySegment seg, MemorySegment x) {
        constants$259.const$2.set(seg, x);
    }
    public static MemorySegment unref$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$259.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void unref$set(MemorySegment seg, long index, MemorySegment x) {
        constants$259.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static unref unref(MemorySegment segment, Arena scope) {
        return unref.ofAddress(unref$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get)(void*,struct _GSource*,int (**)(void*),void**);
     * }
     */
    public interface get {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$259.const$3, fi, constants$42.const$1, scope);
        }
        static get ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$259.const$4.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get$VH() {
        return constants$259.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get)(void*,struct _GSource*,int (**)(void*),void**);
     * }
     */
    public static MemorySegment get$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$259.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get)(void*,struct _GSource*,int (**)(void*),void**);
     * }
     */
    public static void get$set(MemorySegment seg, MemorySegment x) {
        constants$259.const$5.set(seg, x);
    }
    public static MemorySegment get$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$259.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get$set(MemorySegment seg, long index, MemorySegment x) {
        constants$259.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get get(MemorySegment segment, Arena scope) {
        return get.ofAddress(get$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


