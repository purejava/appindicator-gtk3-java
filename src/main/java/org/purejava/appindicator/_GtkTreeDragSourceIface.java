// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkTreeDragSourceIface {
 *     struct _GTypeInterface g_iface;
 *     int (*row_draggable)(struct _GtkTreeDragSource*,struct _GtkTreePath*);
 *     int (*drag_data_get)(struct _GtkTreeDragSource*,struct _GtkTreePath*,struct _GtkSelectionData*);
 *     int (*drag_data_delete)(struct _GtkTreeDragSource*,struct _GtkTreePath*);
 * };
 * }
 */
public class _GtkTreeDragSourceIface {

    public static MemoryLayout $LAYOUT() {
        return constants$3187.const$1;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * int (*row_draggable)(struct _GtkTreeDragSource*,struct _GtkTreePath*);
     * }
     */
    public interface row_draggable {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(row_draggable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3187.const$2, fi, constants$9.const$0, scope);
        }
        static row_draggable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_draggable$VH() {
        return constants$3187.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*row_draggable)(struct _GtkTreeDragSource*,struct _GtkTreePath*);
     * }
     */
    public static MemorySegment row_draggable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3187.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*row_draggable)(struct _GtkTreeDragSource*,struct _GtkTreePath*);
     * }
     */
    public static void row_draggable$set(MemorySegment seg, MemorySegment x) {
        constants$3187.const$3.set(seg, x);
    }
    public static MemorySegment row_draggable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3187.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void row_draggable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3187.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_draggable row_draggable(MemorySegment segment, Arena scope) {
        return row_draggable.ofAddress(row_draggable$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*drag_data_get)(struct _GtkTreeDragSource*,struct _GtkTreePath*,struct _GtkSelectionData*);
     * }
     */
    public interface drag_data_get {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(drag_data_get fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3187.const$4, fi, constants$12.const$2, scope);
        }
        static drag_data_get ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_data_get$VH() {
        return constants$3187.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*drag_data_get)(struct _GtkTreeDragSource*,struct _GtkTreePath*,struct _GtkSelectionData*);
     * }
     */
    public static MemorySegment drag_data_get$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3187.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*drag_data_get)(struct _GtkTreeDragSource*,struct _GtkTreePath*,struct _GtkSelectionData*);
     * }
     */
    public static void drag_data_get$set(MemorySegment seg, MemorySegment x) {
        constants$3187.const$5.set(seg, x);
    }
    public static MemorySegment drag_data_get$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3187.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_data_get$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3187.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_data_get drag_data_get(MemorySegment segment, Arena scope) {
        return drag_data_get.ofAddress(drag_data_get$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*drag_data_delete)(struct _GtkTreeDragSource*,struct _GtkTreePath*);
     * }
     */
    public interface drag_data_delete {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(drag_data_delete fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3188.const$0, fi, constants$9.const$0, scope);
        }
        static drag_data_delete ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_data_delete$VH() {
        return constants$3188.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*drag_data_delete)(struct _GtkTreeDragSource*,struct _GtkTreePath*);
     * }
     */
    public static MemorySegment drag_data_delete$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3188.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*drag_data_delete)(struct _GtkTreeDragSource*,struct _GtkTreePath*);
     * }
     */
    public static void drag_data_delete$set(MemorySegment seg, MemorySegment x) {
        constants$3188.const$1.set(seg, x);
    }
    public static MemorySegment drag_data_delete$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3188.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_data_delete$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3188.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_data_delete drag_data_delete(MemorySegment segment, Arena scope) {
        return drag_data_delete.ofAddress(drag_data_delete$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


