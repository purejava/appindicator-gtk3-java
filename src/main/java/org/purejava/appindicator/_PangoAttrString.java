// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _PangoAttrString {
 *     PangoAttribute attr;
 *     char* value;
 * };
 * }
 */
public class _PangoAttrString {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("klass"),
            Constants$root.C_INT$LAYOUT.withName("start_index"),
            Constants$root.C_INT$LAYOUT.withName("end_index")
        ).withName("attr"),
        Constants$root.C_POINTER$LAYOUT.withName("value")
    ).withName("_PangoAttrString");
    public static MemoryLayout $LAYOUT() {
        return _PangoAttrString.$struct$LAYOUT;
    }
    public static MemorySegment attr$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("value"));
    public static VarHandle value$VH() {
        return _PangoAttrString.value$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* value;
     * }
     */
    public static MemorySegment value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoAttrString.value$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* value;
     * }
     */
    public static void value$set(MemorySegment seg, MemorySegment x) {
        _PangoAttrString.value$VH.set(seg, x);
    }
    public static MemorySegment value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoAttrString.value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoAttrString.value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


