// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GdkGeometry {
 *     int min_width;
 *     int min_height;
 *     int max_width;
 *     int max_height;
 *     int base_width;
 *     int base_height;
 *     int width_inc;
 *     int height_inc;
 *     double min_aspect;
 *     double max_aspect;
 *     enum GdkGravity win_gravity;
 * };
 * }
 */
public class _GdkGeometry {

    public static MemoryLayout $LAYOUT() {
        return constants$1818.const$5;
    }
    public static VarHandle min_width$VH() {
        return constants$1819.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int min_width;
     * }
     */
    public static int min_width$get(MemorySegment seg) {
        return (int)constants$1819.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int min_width;
     * }
     */
    public static void min_width$set(MemorySegment seg, int x) {
        constants$1819.const$0.set(seg, x);
    }
    public static int min_width$get(MemorySegment seg, long index) {
        return (int)constants$1819.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void min_width$set(MemorySegment seg, long index, int x) {
        constants$1819.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle min_height$VH() {
        return constants$1819.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int min_height;
     * }
     */
    public static int min_height$get(MemorySegment seg) {
        return (int)constants$1819.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int min_height;
     * }
     */
    public static void min_height$set(MemorySegment seg, int x) {
        constants$1819.const$1.set(seg, x);
    }
    public static int min_height$get(MemorySegment seg, long index) {
        return (int)constants$1819.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void min_height$set(MemorySegment seg, long index, int x) {
        constants$1819.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_width$VH() {
        return constants$1819.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_width;
     * }
     */
    public static int max_width$get(MemorySegment seg) {
        return (int)constants$1819.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_width;
     * }
     */
    public static void max_width$set(MemorySegment seg, int x) {
        constants$1819.const$2.set(seg, x);
    }
    public static int max_width$get(MemorySegment seg, long index) {
        return (int)constants$1819.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void max_width$set(MemorySegment seg, long index, int x) {
        constants$1819.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_height$VH() {
        return constants$1819.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_height;
     * }
     */
    public static int max_height$get(MemorySegment seg) {
        return (int)constants$1819.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_height;
     * }
     */
    public static void max_height$set(MemorySegment seg, int x) {
        constants$1819.const$3.set(seg, x);
    }
    public static int max_height$get(MemorySegment seg, long index) {
        return (int)constants$1819.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void max_height$set(MemorySegment seg, long index, int x) {
        constants$1819.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle base_width$VH() {
        return constants$1819.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int base_width;
     * }
     */
    public static int base_width$get(MemorySegment seg) {
        return (int)constants$1819.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int base_width;
     * }
     */
    public static void base_width$set(MemorySegment seg, int x) {
        constants$1819.const$4.set(seg, x);
    }
    public static int base_width$get(MemorySegment seg, long index) {
        return (int)constants$1819.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void base_width$set(MemorySegment seg, long index, int x) {
        constants$1819.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle base_height$VH() {
        return constants$1819.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int base_height;
     * }
     */
    public static int base_height$get(MemorySegment seg) {
        return (int)constants$1819.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int base_height;
     * }
     */
    public static void base_height$set(MemorySegment seg, int x) {
        constants$1819.const$5.set(seg, x);
    }
    public static int base_height$get(MemorySegment seg, long index) {
        return (int)constants$1819.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void base_height$set(MemorySegment seg, long index, int x) {
        constants$1819.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width_inc$VH() {
        return constants$1820.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width_inc;
     * }
     */
    public static int width_inc$get(MemorySegment seg) {
        return (int)constants$1820.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width_inc;
     * }
     */
    public static void width_inc$set(MemorySegment seg, int x) {
        constants$1820.const$0.set(seg, x);
    }
    public static int width_inc$get(MemorySegment seg, long index) {
        return (int)constants$1820.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void width_inc$set(MemorySegment seg, long index, int x) {
        constants$1820.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height_inc$VH() {
        return constants$1820.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height_inc;
     * }
     */
    public static int height_inc$get(MemorySegment seg) {
        return (int)constants$1820.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height_inc;
     * }
     */
    public static void height_inc$set(MemorySegment seg, int x) {
        constants$1820.const$1.set(seg, x);
    }
    public static int height_inc$get(MemorySegment seg, long index) {
        return (int)constants$1820.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void height_inc$set(MemorySegment seg, long index, int x) {
        constants$1820.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle min_aspect$VH() {
        return constants$1820.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double min_aspect;
     * }
     */
    public static double min_aspect$get(MemorySegment seg) {
        return (double)constants$1820.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double min_aspect;
     * }
     */
    public static void min_aspect$set(MemorySegment seg, double x) {
        constants$1820.const$2.set(seg, x);
    }
    public static double min_aspect$get(MemorySegment seg, long index) {
        return (double)constants$1820.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void min_aspect$set(MemorySegment seg, long index, double x) {
        constants$1820.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_aspect$VH() {
        return constants$1820.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double max_aspect;
     * }
     */
    public static double max_aspect$get(MemorySegment seg) {
        return (double)constants$1820.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double max_aspect;
     * }
     */
    public static void max_aspect$set(MemorySegment seg, double x) {
        constants$1820.const$3.set(seg, x);
    }
    public static double max_aspect$get(MemorySegment seg, long index) {
        return (double)constants$1820.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void max_aspect$set(MemorySegment seg, long index, double x) {
        constants$1820.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle win_gravity$VH() {
        return constants$1820.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GdkGravity win_gravity;
     * }
     */
    public static int win_gravity$get(MemorySegment seg) {
        return (int)constants$1820.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GdkGravity win_gravity;
     * }
     */
    public static void win_gravity$set(MemorySegment seg, int x) {
        constants$1820.const$4.set(seg, x);
    }
    public static int win_gravity$get(MemorySegment seg, long index) {
        return (int)constants$1820.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void win_gravity$set(MemorySegment seg, long index, int x) {
        constants$1820.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


