// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkEntryClass {
 *     struct _GtkWidgetClass parent_class;
 *     void (*populate_popup)(struct _GtkEntry*,struct _GtkWidget*);
 *     void (*activate)(struct _GtkEntry*);
 *     void (*move_cursor)(struct _GtkEntry*,enum GtkMovementStep,int,int);
 *     void (*insert_at_cursor)(struct _GtkEntry*,char*);
 *     void (*delete_from_cursor)(struct _GtkEntry*,enum GtkDeleteType,int);
 *     void (*backspace)(struct _GtkEntry*);
 *     void (*cut_clipboard)(struct _GtkEntry*);
 *     void (*copy_clipboard)(struct _GtkEntry*);
 *     void (*paste_clipboard)(struct _GtkEntry*);
 *     void (*toggle_overwrite)(struct _GtkEntry*);
 *     void (*get_text_area_size)(struct _GtkEntry*,int*,int*,int*,int*);
 *     void (*get_frame_size)(struct _GtkEntry*,int*,int*,int*,int*);
 *     void (*insert_emoji)(struct _GtkEntry*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 * };
 * }
 */
public class _GtkEntryClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2451.const$3;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 824);
    }
    /**
     * {@snippet :
 * void (*populate_popup)(struct _GtkEntry*,struct _GtkWidget*);
     * }
     */
    public interface populate_popup {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(populate_popup fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2451.const$4, fi, constants$13.const$4, scope);
        }
        static populate_popup ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle populate_popup$VH() {
        return constants$2451.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*populate_popup)(struct _GtkEntry*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment populate_popup$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2451.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*populate_popup)(struct _GtkEntry*,struct _GtkWidget*);
     * }
     */
    public static void populate_popup$set(MemorySegment seg, MemorySegment x) {
        constants$2451.const$5.set(seg, x);
    }
    public static MemorySegment populate_popup$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2451.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void populate_popup$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2451.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static populate_popup populate_popup(MemorySegment segment, Arena scope) {
        return populate_popup.ofAddress(populate_popup$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*activate)(struct _GtkEntry*);
     * }
     */
    public interface activate {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(activate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2452.const$0, fi, constants$13.const$1, scope);
        }
        static activate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle activate$VH() {
        return constants$2452.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*activate)(struct _GtkEntry*);
     * }
     */
    public static MemorySegment activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2452.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*activate)(struct _GtkEntry*);
     * }
     */
    public static void activate$set(MemorySegment seg, MemorySegment x) {
        constants$2452.const$1.set(seg, x);
    }
    public static MemorySegment activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2452.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2452.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate(MemorySegment segment, Arena scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*move_cursor)(struct _GtkEntry*,enum GtkMovementStep,int,int);
     * }
     */
    public interface move_cursor {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(move_cursor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2452.const$2, fi, constants$1134.const$5, scope);
        }
        static move_cursor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    constants$2248.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_cursor$VH() {
        return constants$2452.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*move_cursor)(struct _GtkEntry*,enum GtkMovementStep,int,int);
     * }
     */
    public static MemorySegment move_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2452.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*move_cursor)(struct _GtkEntry*,enum GtkMovementStep,int,int);
     * }
     */
    public static void move_cursor$set(MemorySegment seg, MemorySegment x) {
        constants$2452.const$3.set(seg, x);
    }
    public static MemorySegment move_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2452.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void move_cursor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2452.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_cursor move_cursor(MemorySegment segment, Arena scope) {
        return move_cursor.ofAddress(move_cursor$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*insert_at_cursor)(struct _GtkEntry*,char*);
     * }
     */
    public interface insert_at_cursor {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(insert_at_cursor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2452.const$4, fi, constants$13.const$4, scope);
        }
        static insert_at_cursor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insert_at_cursor$VH() {
        return constants$2452.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*insert_at_cursor)(struct _GtkEntry*,char*);
     * }
     */
    public static MemorySegment insert_at_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2452.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*insert_at_cursor)(struct _GtkEntry*,char*);
     * }
     */
    public static void insert_at_cursor$set(MemorySegment seg, MemorySegment x) {
        constants$2452.const$5.set(seg, x);
    }
    public static MemorySegment insert_at_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2452.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_at_cursor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2452.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_at_cursor insert_at_cursor(MemorySegment segment, Arena scope) {
        return insert_at_cursor.ofAddress(insert_at_cursor$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*delete_from_cursor)(struct _GtkEntry*,enum GtkDeleteType,int);
     * }
     */
    public interface delete_from_cursor {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(delete_from_cursor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2453.const$0, fi, constants$469.const$2, scope);
        }
        static delete_from_cursor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1906.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle delete_from_cursor$VH() {
        return constants$2453.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*delete_from_cursor)(struct _GtkEntry*,enum GtkDeleteType,int);
     * }
     */
    public static MemorySegment delete_from_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2453.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*delete_from_cursor)(struct _GtkEntry*,enum GtkDeleteType,int);
     * }
     */
    public static void delete_from_cursor$set(MemorySegment seg, MemorySegment x) {
        constants$2453.const$1.set(seg, x);
    }
    public static MemorySegment delete_from_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2453.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_from_cursor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2453.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_from_cursor delete_from_cursor(MemorySegment segment, Arena scope) {
        return delete_from_cursor.ofAddress(delete_from_cursor$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*backspace)(struct _GtkEntry*);
     * }
     */
    public interface backspace {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(backspace fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2453.const$2, fi, constants$13.const$1, scope);
        }
        static backspace ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle backspace$VH() {
        return constants$2453.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*backspace)(struct _GtkEntry*);
     * }
     */
    public static MemorySegment backspace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2453.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*backspace)(struct _GtkEntry*);
     * }
     */
    public static void backspace$set(MemorySegment seg, MemorySegment x) {
        constants$2453.const$3.set(seg, x);
    }
    public static MemorySegment backspace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2453.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void backspace$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2453.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static backspace backspace(MemorySegment segment, Arena scope) {
        return backspace.ofAddress(backspace$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*cut_clipboard)(struct _GtkEntry*);
     * }
     */
    public interface cut_clipboard {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(cut_clipboard fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2453.const$4, fi, constants$13.const$1, scope);
        }
        static cut_clipboard ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cut_clipboard$VH() {
        return constants$2453.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*cut_clipboard)(struct _GtkEntry*);
     * }
     */
    public static MemorySegment cut_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2453.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*cut_clipboard)(struct _GtkEntry*);
     * }
     */
    public static void cut_clipboard$set(MemorySegment seg, MemorySegment x) {
        constants$2453.const$5.set(seg, x);
    }
    public static MemorySegment cut_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2453.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cut_clipboard$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2453.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static cut_clipboard cut_clipboard(MemorySegment segment, Arena scope) {
        return cut_clipboard.ofAddress(cut_clipboard$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*copy_clipboard)(struct _GtkEntry*);
     * }
     */
    public interface copy_clipboard {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(copy_clipboard fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2454.const$0, fi, constants$13.const$1, scope);
        }
        static copy_clipboard ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle copy_clipboard$VH() {
        return constants$2454.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*copy_clipboard)(struct _GtkEntry*);
     * }
     */
    public static MemorySegment copy_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2454.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*copy_clipboard)(struct _GtkEntry*);
     * }
     */
    public static void copy_clipboard$set(MemorySegment seg, MemorySegment x) {
        constants$2454.const$1.set(seg, x);
    }
    public static MemorySegment copy_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2454.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_clipboard$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2454.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_clipboard copy_clipboard(MemorySegment segment, Arena scope) {
        return copy_clipboard.ofAddress(copy_clipboard$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*paste_clipboard)(struct _GtkEntry*);
     * }
     */
    public interface paste_clipboard {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(paste_clipboard fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2454.const$2, fi, constants$13.const$1, scope);
        }
        static paste_clipboard ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle paste_clipboard$VH() {
        return constants$2454.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*paste_clipboard)(struct _GtkEntry*);
     * }
     */
    public static MemorySegment paste_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2454.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*paste_clipboard)(struct _GtkEntry*);
     * }
     */
    public static void paste_clipboard$set(MemorySegment seg, MemorySegment x) {
        constants$2454.const$3.set(seg, x);
    }
    public static MemorySegment paste_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2454.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void paste_clipboard$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2454.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static paste_clipboard paste_clipboard(MemorySegment segment, Arena scope) {
        return paste_clipboard.ofAddress(paste_clipboard$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*toggle_overwrite)(struct _GtkEntry*);
     * }
     */
    public interface toggle_overwrite {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(toggle_overwrite fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2454.const$4, fi, constants$13.const$1, scope);
        }
        static toggle_overwrite ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle toggle_overwrite$VH() {
        return constants$2454.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*toggle_overwrite)(struct _GtkEntry*);
     * }
     */
    public static MemorySegment toggle_overwrite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2454.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*toggle_overwrite)(struct _GtkEntry*);
     * }
     */
    public static void toggle_overwrite$set(MemorySegment seg, MemorySegment x) {
        constants$2454.const$5.set(seg, x);
    }
    public static MemorySegment toggle_overwrite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2454.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_overwrite$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2454.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_overwrite toggle_overwrite(MemorySegment segment, Arena scope) {
        return toggle_overwrite.ofAddress(toggle_overwrite$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_text_area_size)(struct _GtkEntry*,int*,int*,int*,int*);
     * }
     */
    public interface get_text_area_size {

        void apply(java.lang.foreign.MemorySegment cell_layout, java.lang.foreign.MemorySegment cell, java.lang.foreign.MemorySegment tree_model, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_text_area_size fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2455.const$0, fi, constants$332.const$1, scope);
        }
        static get_text_area_size ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _cell_layout, java.lang.foreign.MemorySegment _cell, java.lang.foreign.MemorySegment _tree_model, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$919.const$3.invokeExact(symbol, _cell_layout, _cell, _tree_model, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_text_area_size$VH() {
        return constants$2455.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_text_area_size)(struct _GtkEntry*,int*,int*,int*,int*);
     * }
     */
    public static MemorySegment get_text_area_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2455.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_text_area_size)(struct _GtkEntry*,int*,int*,int*,int*);
     * }
     */
    public static void get_text_area_size$set(MemorySegment seg, MemorySegment x) {
        constants$2455.const$1.set(seg, x);
    }
    public static MemorySegment get_text_area_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2455.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text_area_size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2455.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text_area_size get_text_area_size(MemorySegment segment, Arena scope) {
        return get_text_area_size.ofAddress(get_text_area_size$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_frame_size)(struct _GtkEntry*,int*,int*,int*,int*);
     * }
     */
    public interface get_frame_size {

        void apply(java.lang.foreign.MemorySegment cell_layout, java.lang.foreign.MemorySegment cell, java.lang.foreign.MemorySegment tree_model, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_frame_size fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2455.const$2, fi, constants$332.const$1, scope);
        }
        static get_frame_size ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _cell_layout, java.lang.foreign.MemorySegment _cell, java.lang.foreign.MemorySegment _tree_model, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$919.const$3.invokeExact(symbol, _cell_layout, _cell, _tree_model, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_frame_size$VH() {
        return constants$2455.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_frame_size)(struct _GtkEntry*,int*,int*,int*,int*);
     * }
     */
    public static MemorySegment get_frame_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2455.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_frame_size)(struct _GtkEntry*,int*,int*,int*,int*);
     * }
     */
    public static void get_frame_size$set(MemorySegment seg, MemorySegment x) {
        constants$2455.const$3.set(seg, x);
    }
    public static MemorySegment get_frame_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2455.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_frame_size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2455.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_frame_size get_frame_size(MemorySegment segment, Arena scope) {
        return get_frame_size.ofAddress(get_frame_size$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*insert_emoji)(struct _GtkEntry*);
     * }
     */
    public interface insert_emoji {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(insert_emoji fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2455.const$4, fi, constants$13.const$1, scope);
        }
        static insert_emoji ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insert_emoji$VH() {
        return constants$2455.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*insert_emoji)(struct _GtkEntry*);
     * }
     */
    public static MemorySegment insert_emoji$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2455.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*insert_emoji)(struct _GtkEntry*);
     * }
     */
    public static void insert_emoji$set(MemorySegment seg, MemorySegment x) {
        constants$2455.const$5.set(seg, x);
    }
    public static MemorySegment insert_emoji$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2455.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_emoji$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2455.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_emoji insert_emoji(MemorySegment segment, Arena scope) {
        return insert_emoji.ofAddress(insert_emoji$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2456.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2456.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2456.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2456.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2456.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2456.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2456.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2456.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2456.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2456.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2456.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2456.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2456.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2456.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2456.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2456.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2456.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2456.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2457.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2457.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2457.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2457.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2457.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2457.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2457.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved5$VH() {
        return constants$2457.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2457.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$2457.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2457.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2457.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, Arena scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2457.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved6$VH() {
        return constants$2457.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2457.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$2457.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2457.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2457.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, Arena scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


