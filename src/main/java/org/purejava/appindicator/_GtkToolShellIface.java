// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkToolShellIface {
 *     struct _GTypeInterface g_iface;
 *     enum GtkIconSize (*get_icon_size)(struct _GtkToolShell*);
 *     enum GtkOrientation (*get_orientation)(struct _GtkToolShell*);
 *     enum GtkToolbarStyle (*get_style)(struct _GtkToolShell*);
 *     enum GtkReliefStyle (*get_relief_style)(struct _GtkToolShell*);
 *     void (*rebuild_menu)(struct _GtkToolShell*);
 *     enum GtkOrientation (*get_text_orientation)(struct _GtkToolShell*);
 *     float (*get_text_alignment)(struct _GtkToolShell*);
 *     enum PangoEllipsizeMode (*get_ellipsize_mode)(struct _GtkToolShell*);
 *     struct _GtkSizeGroup* (*get_text_size_group)(struct _GtkToolShell*);
 * };
 * }
 */
public class _GtkToolShellIface {

    public static MemoryLayout $LAYOUT() {
        return constants$3179.const$2;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * enum GtkIconSize (*get_icon_size)(struct _GtkToolShell*);
     * }
     */
    public interface get_icon_size {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_icon_size fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3179.const$3, fi, constants$10.const$5, scope);
        }
        static get_icon_size ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_icon_size$VH() {
        return constants$3179.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GtkIconSize (*get_icon_size)(struct _GtkToolShell*);
     * }
     */
    public static MemorySegment get_icon_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3179.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GtkIconSize (*get_icon_size)(struct _GtkToolShell*);
     * }
     */
    public static void get_icon_size$set(MemorySegment seg, MemorySegment x) {
        constants$3179.const$4.set(seg, x);
    }
    public static MemorySegment get_icon_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3179.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_icon_size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3179.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_icon_size get_icon_size(MemorySegment segment, Arena scope) {
        return get_icon_size.ofAddress(get_icon_size$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum GtkOrientation (*get_orientation)(struct _GtkToolShell*);
     * }
     */
    public interface get_orientation {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_orientation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3179.const$5, fi, constants$10.const$5, scope);
        }
        static get_orientation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_orientation$VH() {
        return constants$3180.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GtkOrientation (*get_orientation)(struct _GtkToolShell*);
     * }
     */
    public static MemorySegment get_orientation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3180.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GtkOrientation (*get_orientation)(struct _GtkToolShell*);
     * }
     */
    public static void get_orientation$set(MemorySegment seg, MemorySegment x) {
        constants$3180.const$0.set(seg, x);
    }
    public static MemorySegment get_orientation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3180.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_orientation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3180.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_orientation get_orientation(MemorySegment segment, Arena scope) {
        return get_orientation.ofAddress(get_orientation$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum GtkToolbarStyle (*get_style)(struct _GtkToolShell*);
     * }
     */
    public interface get_style {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_style fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3180.const$1, fi, constants$10.const$5, scope);
        }
        static get_style ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_style$VH() {
        return constants$3180.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GtkToolbarStyle (*get_style)(struct _GtkToolShell*);
     * }
     */
    public static MemorySegment get_style$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3180.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GtkToolbarStyle (*get_style)(struct _GtkToolShell*);
     * }
     */
    public static void get_style$set(MemorySegment seg, MemorySegment x) {
        constants$3180.const$2.set(seg, x);
    }
    public static MemorySegment get_style$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3180.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_style$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3180.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_style get_style(MemorySegment segment, Arena scope) {
        return get_style.ofAddress(get_style$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum GtkReliefStyle (*get_relief_style)(struct _GtkToolShell*);
     * }
     */
    public interface get_relief_style {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_relief_style fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3180.const$3, fi, constants$10.const$5, scope);
        }
        static get_relief_style ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_relief_style$VH() {
        return constants$3180.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GtkReliefStyle (*get_relief_style)(struct _GtkToolShell*);
     * }
     */
    public static MemorySegment get_relief_style$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3180.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GtkReliefStyle (*get_relief_style)(struct _GtkToolShell*);
     * }
     */
    public static void get_relief_style$set(MemorySegment seg, MemorySegment x) {
        constants$3180.const$4.set(seg, x);
    }
    public static MemorySegment get_relief_style$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3180.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_relief_style$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3180.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_relief_style get_relief_style(MemorySegment segment, Arena scope) {
        return get_relief_style.ofAddress(get_relief_style$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*rebuild_menu)(struct _GtkToolShell*);
     * }
     */
    public interface rebuild_menu {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(rebuild_menu fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3180.const$5, fi, constants$13.const$1, scope);
        }
        static rebuild_menu ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle rebuild_menu$VH() {
        return constants$3181.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*rebuild_menu)(struct _GtkToolShell*);
     * }
     */
    public static MemorySegment rebuild_menu$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3181.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*rebuild_menu)(struct _GtkToolShell*);
     * }
     */
    public static void rebuild_menu$set(MemorySegment seg, MemorySegment x) {
        constants$3181.const$0.set(seg, x);
    }
    public static MemorySegment rebuild_menu$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3181.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void rebuild_menu$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3181.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static rebuild_menu rebuild_menu(MemorySegment segment, Arena scope) {
        return rebuild_menu.ofAddress(rebuild_menu$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum GtkOrientation (*get_text_orientation)(struct _GtkToolShell*);
     * }
     */
    public interface get_text_orientation {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_text_orientation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3181.const$1, fi, constants$10.const$5, scope);
        }
        static get_text_orientation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_text_orientation$VH() {
        return constants$3181.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GtkOrientation (*get_text_orientation)(struct _GtkToolShell*);
     * }
     */
    public static MemorySegment get_text_orientation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3181.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GtkOrientation (*get_text_orientation)(struct _GtkToolShell*);
     * }
     */
    public static void get_text_orientation$set(MemorySegment seg, MemorySegment x) {
        constants$3181.const$2.set(seg, x);
    }
    public static MemorySegment get_text_orientation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3181.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text_orientation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3181.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text_orientation get_text_orientation(MemorySegment segment, Arena scope) {
        return get_text_orientation.ofAddress(get_text_orientation$get(segment), scope);
    }
    /**
     * {@snippet :
 * float (*get_text_alignment)(struct _GtkToolShell*);
     * }
     */
    public interface get_text_alignment {

        float apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_text_alignment fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3181.const$3, fi, constants$689.const$3, scope);
        }
        static get_text_alignment ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (float)constants$3181.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_text_alignment$VH() {
        return constants$3181.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*get_text_alignment)(struct _GtkToolShell*);
     * }
     */
    public static MemorySegment get_text_alignment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3181.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*get_text_alignment)(struct _GtkToolShell*);
     * }
     */
    public static void get_text_alignment$set(MemorySegment seg, MemorySegment x) {
        constants$3181.const$5.set(seg, x);
    }
    public static MemorySegment get_text_alignment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3181.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text_alignment$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3181.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text_alignment get_text_alignment(MemorySegment segment, Arena scope) {
        return get_text_alignment.ofAddress(get_text_alignment$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum PangoEllipsizeMode (*get_ellipsize_mode)(struct _GtkToolShell*);
     * }
     */
    public interface get_ellipsize_mode {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_ellipsize_mode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3182.const$0, fi, constants$10.const$5, scope);
        }
        static get_ellipsize_mode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_ellipsize_mode$VH() {
        return constants$3182.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum PangoEllipsizeMode (*get_ellipsize_mode)(struct _GtkToolShell*);
     * }
     */
    public static MemorySegment get_ellipsize_mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3182.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum PangoEllipsizeMode (*get_ellipsize_mode)(struct _GtkToolShell*);
     * }
     */
    public static void get_ellipsize_mode$set(MemorySegment seg, MemorySegment x) {
        constants$3182.const$1.set(seg, x);
    }
    public static MemorySegment get_ellipsize_mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3182.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_ellipsize_mode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3182.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_ellipsize_mode get_ellipsize_mode(MemorySegment segment, Arena scope) {
        return get_ellipsize_mode.ofAddress(get_ellipsize_mode$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkSizeGroup* (*get_text_size_group)(struct _GtkToolShell*);
     * }
     */
    public interface get_text_size_group {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_text_size_group fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3182.const$2, fi, constants$5.const$2, scope);
        }
        static get_text_size_group ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_text_size_group$VH() {
        return constants$3182.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkSizeGroup* (*get_text_size_group)(struct _GtkToolShell*);
     * }
     */
    public static MemorySegment get_text_size_group$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3182.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkSizeGroup* (*get_text_size_group)(struct _GtkToolShell*);
     * }
     */
    public static void get_text_size_group$set(MemorySegment seg, MemorySegment x) {
        constants$3182.const$3.set(seg, x);
    }
    public static MemorySegment get_text_size_group$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3182.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text_size_group$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3182.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text_size_group get_text_size_group(MemorySegment segment, Arena scope) {
        return get_text_size_group.ofAddress(get_text_size_group$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


