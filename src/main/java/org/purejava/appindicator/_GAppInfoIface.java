// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GAppInfoIface {
 *     struct _GTypeInterface g_iface;
 *     struct _GAppInfo* (*dup)(struct _GAppInfo*);
 *     int (*equal)(struct _GAppInfo*,struct _GAppInfo*);
 *     char* (*get_id)(struct _GAppInfo*);
 *     char* (*get_name)(struct _GAppInfo*);
 *     char* (*get_description)(struct _GAppInfo*);
 *     char* (*get_executable)(struct _GAppInfo*);
 *     struct _GIcon* (*get_icon)(struct _GAppInfo*);
 *     int (*launch)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GError**);
 *     int (*supports_uris)(struct _GAppInfo*);
 *     int (*supports_files)(struct _GAppInfo*);
 *     int (*launch_uris)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GError**);
 *     int (*should_show)(struct _GAppInfo*);
 *     int (*set_as_default_for_type)(struct _GAppInfo*,char*,struct _GError**);
 *     int (*set_as_default_for_extension)(struct _GAppInfo*,char*,struct _GError**);
 *     int (*add_supports_type)(struct _GAppInfo*,char*,struct _GError**);
 *     int (*can_remove_supports_type)(struct _GAppInfo*);
 *     int (*remove_supports_type)(struct _GAppInfo*,char*,struct _GError**);
 *     int (*can_delete)(struct _GAppInfo*);
 *     int (*do_delete)(struct _GAppInfo*);
 *     char* (*get_commandline)(struct _GAppInfo*);
 *     char* (*get_display_name)(struct _GAppInfo*);
 *     int (*set_as_last_used_for_type)(struct _GAppInfo*,char*,struct _GError**);
 *     char** (*get_supported_types)(struct _GAppInfo*);
 *     void (*launch_uris_async)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*launch_uris_finish)(struct _GAppInfo*,struct _GAsyncResult*,struct _GError**);
 * };
 * }
 */
public class _GAppInfoIface {

    public static MemoryLayout $LAYOUT() {
        return constants$715.const$2;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * struct _GAppInfo* (*dup)(struct _GAppInfo*);
     * }
     */
    public interface dup {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(dup fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$715.const$3, fi, constants$5.const$2, scope);
        }
        static dup ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle dup$VH() {
        return constants$715.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GAppInfo* (*dup)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment dup$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$715.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GAppInfo* (*dup)(struct _GAppInfo*);
     * }
     */
    public static void dup$set(MemorySegment seg, MemorySegment x) {
        constants$715.const$4.set(seg, x);
    }
    public static MemorySegment dup$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$715.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dup$set(MemorySegment seg, long index, MemorySegment x) {
        constants$715.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static dup dup(MemorySegment segment, Arena scope) {
        return dup.ofAddress(dup$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*equal)(struct _GAppInfo*,struct _GAppInfo*);
     * }
     */
    public interface equal {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(equal fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$715.const$5, fi, constants$9.const$0, scope);
        }
        static equal ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle equal$VH() {
        return constants$716.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*equal)(struct _GAppInfo*,struct _GAppInfo*);
     * }
     */
    public static MemorySegment equal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$716.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*equal)(struct _GAppInfo*,struct _GAppInfo*);
     * }
     */
    public static void equal$set(MemorySegment seg, MemorySegment x) {
        constants$716.const$0.set(seg, x);
    }
    public static MemorySegment equal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$716.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void equal$set(MemorySegment seg, long index, MemorySegment x) {
        constants$716.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static equal equal(MemorySegment segment, Arena scope) {
        return equal.ofAddress(equal$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_id)(struct _GAppInfo*);
     * }
     */
    public interface get_id {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_id fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$716.const$1, fi, constants$5.const$2, scope);
        }
        static get_id ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_id$VH() {
        return constants$716.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_id)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment get_id$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$716.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_id)(struct _GAppInfo*);
     * }
     */
    public static void get_id$set(MemorySegment seg, MemorySegment x) {
        constants$716.const$2.set(seg, x);
    }
    public static MemorySegment get_id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$716.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_id$set(MemorySegment seg, long index, MemorySegment x) {
        constants$716.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_id get_id(MemorySegment segment, Arena scope) {
        return get_id.ofAddress(get_id$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_name)(struct _GAppInfo*);
     * }
     */
    public interface get_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$716.const$3, fi, constants$5.const$2, scope);
        }
        static get_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_name$VH() {
        return constants$716.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_name)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment get_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$716.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_name)(struct _GAppInfo*);
     * }
     */
    public static void get_name$set(MemorySegment seg, MemorySegment x) {
        constants$716.const$4.set(seg, x);
    }
    public static MemorySegment get_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$716.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$716.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name(MemorySegment segment, Arena scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_description)(struct _GAppInfo*);
     * }
     */
    public interface get_description {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_description fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$716.const$5, fi, constants$5.const$2, scope);
        }
        static get_description ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_description$VH() {
        return constants$717.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_description)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment get_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$717.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_description)(struct _GAppInfo*);
     * }
     */
    public static void get_description$set(MemorySegment seg, MemorySegment x) {
        constants$717.const$0.set(seg, x);
    }
    public static MemorySegment get_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$717.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_description$set(MemorySegment seg, long index, MemorySegment x) {
        constants$717.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_description get_description(MemorySegment segment, Arena scope) {
        return get_description.ofAddress(get_description$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_executable)(struct _GAppInfo*);
     * }
     */
    public interface get_executable {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_executable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$717.const$1, fi, constants$5.const$2, scope);
        }
        static get_executable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_executable$VH() {
        return constants$717.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_executable)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment get_executable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$717.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_executable)(struct _GAppInfo*);
     * }
     */
    public static void get_executable$set(MemorySegment seg, MemorySegment x) {
        constants$717.const$2.set(seg, x);
    }
    public static MemorySegment get_executable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$717.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_executable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$717.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_executable get_executable(MemorySegment segment, Arena scope) {
        return get_executable.ofAddress(get_executable$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GIcon* (*get_icon)(struct _GAppInfo*);
     * }
     */
    public interface get_icon {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_icon fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$717.const$3, fi, constants$5.const$2, scope);
        }
        static get_icon ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_icon$VH() {
        return constants$717.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GIcon* (*get_icon)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment get_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$717.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GIcon* (*get_icon)(struct _GAppInfo*);
     * }
     */
    public static void get_icon$set(MemorySegment seg, MemorySegment x) {
        constants$717.const$4.set(seg, x);
    }
    public static MemorySegment get_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$717.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_icon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$717.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_icon get_icon(MemorySegment segment, Arena scope) {
        return get_icon.ofAddress(get_icon$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*launch)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GError**);
     * }
     */
    public interface launch {

        int apply(java.lang.foreign.MemorySegment completion, java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(launch fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$717.const$5, fi, constants$34.const$5, scope);
        }
        static launch ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _completion, java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$382.const$0.invokeExact(symbol, _completion, _key, _iter, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle launch$VH() {
        return constants$718.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*launch)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GError**);
     * }
     */
    public static MemorySegment launch$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$718.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*launch)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GError**);
     * }
     */
    public static void launch$set(MemorySegment seg, MemorySegment x) {
        constants$718.const$0.set(seg, x);
    }
    public static MemorySegment launch$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$718.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void launch$set(MemorySegment seg, long index, MemorySegment x) {
        constants$718.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static launch launch(MemorySegment segment, Arena scope) {
        return launch.ofAddress(launch$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*supports_uris)(struct _GAppInfo*);
     * }
     */
    public interface supports_uris {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(supports_uris fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$718.const$1, fi, constants$10.const$5, scope);
        }
        static supports_uris ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle supports_uris$VH() {
        return constants$718.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*supports_uris)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment supports_uris$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$718.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*supports_uris)(struct _GAppInfo*);
     * }
     */
    public static void supports_uris$set(MemorySegment seg, MemorySegment x) {
        constants$718.const$2.set(seg, x);
    }
    public static MemorySegment supports_uris$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$718.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void supports_uris$set(MemorySegment seg, long index, MemorySegment x) {
        constants$718.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static supports_uris supports_uris(MemorySegment segment, Arena scope) {
        return supports_uris.ofAddress(supports_uris$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*supports_files)(struct _GAppInfo*);
     * }
     */
    public interface supports_files {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(supports_files fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$718.const$3, fi, constants$10.const$5, scope);
        }
        static supports_files ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle supports_files$VH() {
        return constants$718.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*supports_files)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment supports_files$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$718.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*supports_files)(struct _GAppInfo*);
     * }
     */
    public static void supports_files$set(MemorySegment seg, MemorySegment x) {
        constants$718.const$4.set(seg, x);
    }
    public static MemorySegment supports_files$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$718.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void supports_files$set(MemorySegment seg, long index, MemorySegment x) {
        constants$718.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static supports_files supports_files(MemorySegment segment, Arena scope) {
        return supports_files.ofAddress(supports_files$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*launch_uris)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GError**);
     * }
     */
    public interface launch_uris {

        int apply(java.lang.foreign.MemorySegment completion, java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(launch_uris fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$718.const$5, fi, constants$34.const$5, scope);
        }
        static launch_uris ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _completion, java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$382.const$0.invokeExact(symbol, _completion, _key, _iter, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle launch_uris$VH() {
        return constants$719.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*launch_uris)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GError**);
     * }
     */
    public static MemorySegment launch_uris$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$719.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*launch_uris)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GError**);
     * }
     */
    public static void launch_uris$set(MemorySegment seg, MemorySegment x) {
        constants$719.const$0.set(seg, x);
    }
    public static MemorySegment launch_uris$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$719.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void launch_uris$set(MemorySegment seg, long index, MemorySegment x) {
        constants$719.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static launch_uris launch_uris(MemorySegment segment, Arena scope) {
        return launch_uris.ofAddress(launch_uris$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*should_show)(struct _GAppInfo*);
     * }
     */
    public interface should_show {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(should_show fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$719.const$1, fi, constants$10.const$5, scope);
        }
        static should_show ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle should_show$VH() {
        return constants$719.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*should_show)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment should_show$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$719.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*should_show)(struct _GAppInfo*);
     * }
     */
    public static void should_show$set(MemorySegment seg, MemorySegment x) {
        constants$719.const$2.set(seg, x);
    }
    public static MemorySegment should_show$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$719.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void should_show$set(MemorySegment seg, long index, MemorySegment x) {
        constants$719.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static should_show should_show(MemorySegment segment, Arena scope) {
        return should_show.ofAddress(should_show$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_as_default_for_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public interface set_as_default_for_type {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_as_default_for_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$719.const$3, fi, constants$12.const$2, scope);
        }
        static set_as_default_for_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_as_default_for_type$VH() {
        return constants$719.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_as_default_for_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public static MemorySegment set_as_default_for_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$719.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_as_default_for_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public static void set_as_default_for_type$set(MemorySegment seg, MemorySegment x) {
        constants$719.const$4.set(seg, x);
    }
    public static MemorySegment set_as_default_for_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$719.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void set_as_default_for_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$719.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_as_default_for_type set_as_default_for_type(MemorySegment segment, Arena scope) {
        return set_as_default_for_type.ofAddress(set_as_default_for_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_as_default_for_extension)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public interface set_as_default_for_extension {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_as_default_for_extension fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$719.const$5, fi, constants$12.const$2, scope);
        }
        static set_as_default_for_extension ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_as_default_for_extension$VH() {
        return constants$720.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_as_default_for_extension)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public static MemorySegment set_as_default_for_extension$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$720.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_as_default_for_extension)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public static void set_as_default_for_extension$set(MemorySegment seg, MemorySegment x) {
        constants$720.const$0.set(seg, x);
    }
    public static MemorySegment set_as_default_for_extension$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$720.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void set_as_default_for_extension$set(MemorySegment seg, long index, MemorySegment x) {
        constants$720.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_as_default_for_extension set_as_default_for_extension(MemorySegment segment, Arena scope) {
        return set_as_default_for_extension.ofAddress(set_as_default_for_extension$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*add_supports_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public interface add_supports_type {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(add_supports_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$720.const$1, fi, constants$12.const$2, scope);
        }
        static add_supports_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle add_supports_type$VH() {
        return constants$720.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*add_supports_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public static MemorySegment add_supports_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$720.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*add_supports_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public static void add_supports_type$set(MemorySegment seg, MemorySegment x) {
        constants$720.const$2.set(seg, x);
    }
    public static MemorySegment add_supports_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$720.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void add_supports_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$720.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_supports_type add_supports_type(MemorySegment segment, Arena scope) {
        return add_supports_type.ofAddress(add_supports_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_remove_supports_type)(struct _GAppInfo*);
     * }
     */
    public interface can_remove_supports_type {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(can_remove_supports_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$720.const$3, fi, constants$10.const$5, scope);
        }
        static can_remove_supports_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_remove_supports_type$VH() {
        return constants$720.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_remove_supports_type)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment can_remove_supports_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$720.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_remove_supports_type)(struct _GAppInfo*);
     * }
     */
    public static void can_remove_supports_type$set(MemorySegment seg, MemorySegment x) {
        constants$720.const$4.set(seg, x);
    }
    public static MemorySegment can_remove_supports_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$720.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void can_remove_supports_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$720.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_remove_supports_type can_remove_supports_type(MemorySegment segment, Arena scope) {
        return can_remove_supports_type.ofAddress(can_remove_supports_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*remove_supports_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public interface remove_supports_type {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(remove_supports_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$720.const$5, fi, constants$12.const$2, scope);
        }
        static remove_supports_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remove_supports_type$VH() {
        return constants$721.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*remove_supports_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public static MemorySegment remove_supports_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$721.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*remove_supports_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public static void remove_supports_type$set(MemorySegment seg, MemorySegment x) {
        constants$721.const$0.set(seg, x);
    }
    public static MemorySegment remove_supports_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$721.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_supports_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$721.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_supports_type remove_supports_type(MemorySegment segment, Arena scope) {
        return remove_supports_type.ofAddress(remove_supports_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_delete)(struct _GAppInfo*);
     * }
     */
    public interface can_delete {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(can_delete fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$721.const$1, fi, constants$10.const$5, scope);
        }
        static can_delete ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_delete$VH() {
        return constants$721.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_delete)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment can_delete$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$721.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_delete)(struct _GAppInfo*);
     * }
     */
    public static void can_delete$set(MemorySegment seg, MemorySegment x) {
        constants$721.const$2.set(seg, x);
    }
    public static MemorySegment can_delete$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$721.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void can_delete$set(MemorySegment seg, long index, MemorySegment x) {
        constants$721.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_delete can_delete(MemorySegment segment, Arena scope) {
        return can_delete.ofAddress(can_delete$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*do_delete)(struct _GAppInfo*);
     * }
     */
    public interface do_delete {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(do_delete fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$721.const$3, fi, constants$10.const$5, scope);
        }
        static do_delete ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle do_delete$VH() {
        return constants$721.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*do_delete)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment do_delete$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$721.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*do_delete)(struct _GAppInfo*);
     * }
     */
    public static void do_delete$set(MemorySegment seg, MemorySegment x) {
        constants$721.const$4.set(seg, x);
    }
    public static MemorySegment do_delete$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$721.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void do_delete$set(MemorySegment seg, long index, MemorySegment x) {
        constants$721.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static do_delete do_delete(MemorySegment segment, Arena scope) {
        return do_delete.ofAddress(do_delete$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_commandline)(struct _GAppInfo*);
     * }
     */
    public interface get_commandline {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_commandline fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$721.const$5, fi, constants$5.const$2, scope);
        }
        static get_commandline ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_commandline$VH() {
        return constants$722.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_commandline)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment get_commandline$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$722.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_commandline)(struct _GAppInfo*);
     * }
     */
    public static void get_commandline$set(MemorySegment seg, MemorySegment x) {
        constants$722.const$0.set(seg, x);
    }
    public static MemorySegment get_commandline$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$722.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_commandline$set(MemorySegment seg, long index, MemorySegment x) {
        constants$722.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_commandline get_commandline(MemorySegment segment, Arena scope) {
        return get_commandline.ofAddress(get_commandline$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_display_name)(struct _GAppInfo*);
     * }
     */
    public interface get_display_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_display_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$722.const$1, fi, constants$5.const$2, scope);
        }
        static get_display_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_display_name$VH() {
        return constants$722.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_display_name)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment get_display_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$722.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_display_name)(struct _GAppInfo*);
     * }
     */
    public static void get_display_name$set(MemorySegment seg, MemorySegment x) {
        constants$722.const$2.set(seg, x);
    }
    public static MemorySegment get_display_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$722.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_display_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$722.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_display_name get_display_name(MemorySegment segment, Arena scope) {
        return get_display_name.ofAddress(get_display_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_as_last_used_for_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public interface set_as_last_used_for_type {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_as_last_used_for_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$722.const$3, fi, constants$12.const$2, scope);
        }
        static set_as_last_used_for_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_as_last_used_for_type$VH() {
        return constants$722.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_as_last_used_for_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public static MemorySegment set_as_last_used_for_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$722.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_as_last_used_for_type)(struct _GAppInfo*,char*,struct _GError**);
     * }
     */
    public static void set_as_last_used_for_type$set(MemorySegment seg, MemorySegment x) {
        constants$722.const$4.set(seg, x);
    }
    public static MemorySegment set_as_last_used_for_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$722.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void set_as_last_used_for_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$722.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_as_last_used_for_type set_as_last_used_for_type(MemorySegment segment, Arena scope) {
        return set_as_last_used_for_type.ofAddress(set_as_last_used_for_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * char** (*get_supported_types)(struct _GAppInfo*);
     * }
     */
    public interface get_supported_types {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_supported_types fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$722.const$5, fi, constants$5.const$2, scope);
        }
        static get_supported_types ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_supported_types$VH() {
        return constants$723.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** (*get_supported_types)(struct _GAppInfo*);
     * }
     */
    public static MemorySegment get_supported_types$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$723.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** (*get_supported_types)(struct _GAppInfo*);
     * }
     */
    public static void get_supported_types$set(MemorySegment seg, MemorySegment x) {
        constants$723.const$0.set(seg, x);
    }
    public static MemorySegment get_supported_types$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$723.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_supported_types$set(MemorySegment seg, long index, MemorySegment x) {
        constants$723.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_supported_types get_supported_types(MemorySegment segment, Arena scope) {
        return get_supported_types.ofAddress(get_supported_types$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*launch_uris_async)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface launch_uris_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(launch_uris_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$723.const$1, fi, constants$338.const$3, scope);
        }
        static launch_uris_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$338.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle launch_uris_async$VH() {
        return constants$723.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*launch_uris_async)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment launch_uris_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$723.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*launch_uris_async)(struct _GAppInfo*,struct _GList*,struct _GAppLaunchContext*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void launch_uris_async$set(MemorySegment seg, MemorySegment x) {
        constants$723.const$2.set(seg, x);
    }
    public static MemorySegment launch_uris_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$723.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void launch_uris_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$723.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static launch_uris_async launch_uris_async(MemorySegment segment, Arena scope) {
        return launch_uris_async.ofAddress(launch_uris_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*launch_uris_finish)(struct _GAppInfo*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface launch_uris_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(launch_uris_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$723.const$3, fi, constants$12.const$2, scope);
        }
        static launch_uris_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle launch_uris_finish$VH() {
        return constants$723.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*launch_uris_finish)(struct _GAppInfo*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment launch_uris_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$723.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*launch_uris_finish)(struct _GAppInfo*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void launch_uris_finish$set(MemorySegment seg, MemorySegment x) {
        constants$723.const$4.set(seg, x);
    }
    public static MemorySegment launch_uris_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$723.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void launch_uris_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$723.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static launch_uris_finish launch_uris_finish(MemorySegment segment, Arena scope) {
        return launch_uris_finish.ofAddress(launch_uris_finish$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


