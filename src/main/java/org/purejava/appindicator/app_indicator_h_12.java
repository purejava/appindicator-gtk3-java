// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_12 extends app_indicator_h_13 {

    app_indicator_h_12() {
        // Should not be called directly
    }

    private static class g_notification_add_button_with_target_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_add_button_with_target_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_notification_add_button_with_target_value(GNotification *notification, const gchar *label, const gchar *action, GVariant *target)
     * }
     */
    public static FunctionDescriptor g_notification_add_button_with_target_value$descriptor() {
        return g_notification_add_button_with_target_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_notification_add_button_with_target_value(GNotification *notification, const gchar *label, const gchar *action, GVariant *target)
     * }
     */
    public static MethodHandle g_notification_add_button_with_target_value$handle() {
        return g_notification_add_button_with_target_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_notification_add_button_with_target_value(GNotification *notification, const gchar *label, const gchar *action, GVariant *target)
     * }
     */
    public static void g_notification_add_button_with_target_value(MemorySegment notification, MemorySegment label, MemorySegment action, MemorySegment target) {
        var mh$ = g_notification_add_button_with_target_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_add_button_with_target_value", notification, label, action, target);
            }
            mh$.invokeExact(notification, label, action, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_notification_set_default_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_set_default_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_notification_set_default_action(GNotification *notification, const gchar *detailed_action)
     * }
     */
    public static FunctionDescriptor g_notification_set_default_action$descriptor() {
        return g_notification_set_default_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_notification_set_default_action(GNotification *notification, const gchar *detailed_action)
     * }
     */
    public static MethodHandle g_notification_set_default_action$handle() {
        return g_notification_set_default_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_notification_set_default_action(GNotification *notification, const gchar *detailed_action)
     * }
     */
    public static void g_notification_set_default_action(MemorySegment notification, MemorySegment detailed_action) {
        var mh$ = g_notification_set_default_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_set_default_action", notification, detailed_action);
            }
            mh$.invokeExact(notification, detailed_action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_notification_set_default_action_and_target(GNotification *notification, const gchar *action, const gchar *target_format, ...)
     * }
     */
    public static class g_notification_set_default_action_and_target {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_notification_set_default_action_and_target");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_notification_set_default_action_and_target(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_notification_set_default_action_and_target(GNotification *notification, const gchar *action, const gchar *target_format, ...)
         * }
         */
        public static g_notification_set_default_action_and_target makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_notification_set_default_action_and_target(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment notification, MemorySegment action, MemorySegment target_format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_notification_set_default_action_and_target", notification, action, target_format, x3);
                }
                spreader.invokeExact(notification, action, target_format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_notification_set_default_action_and_target_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_notification_set_default_action_and_target_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_notification_set_default_action_and_target_value(GNotification *notification, const gchar *action, GVariant *target)
     * }
     */
    public static FunctionDescriptor g_notification_set_default_action_and_target_value$descriptor() {
        return g_notification_set_default_action_and_target_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_notification_set_default_action_and_target_value(GNotification *notification, const gchar *action, GVariant *target)
     * }
     */
    public static MethodHandle g_notification_set_default_action_and_target_value$handle() {
        return g_notification_set_default_action_and_target_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_notification_set_default_action_and_target_value(GNotification *notification, const gchar *action, GVariant *target)
     * }
     */
    public static void g_notification_set_default_action_and_target_value(MemorySegment notification, MemorySegment action, MemorySegment target) {
        var mh$ = g_notification_set_default_action_and_target_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_notification_set_default_action_and_target_value", notification, action, target);
            }
            mh$.invokeExact(notification, action, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_permission_get_type()
     * }
     */
    public static FunctionDescriptor g_permission_get_type$descriptor() {
        return g_permission_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_permission_get_type()
     * }
     */
    public static MethodHandle g_permission_get_type$handle() {
        return g_permission_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_permission_get_type()
     * }
     */
    public static long g_permission_get_type() {
        var mh$ = g_permission_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_acquire {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_acquire"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_permission_acquire(GPermission *permission, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_permission_acquire$descriptor() {
        return g_permission_acquire.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_permission_acquire(GPermission *permission, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_permission_acquire$handle() {
        return g_permission_acquire.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_permission_acquire(GPermission *permission, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_permission_acquire(MemorySegment permission, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_permission_acquire.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_acquire", permission, cancellable, error);
            }
            return (int)mh$.invokeExact(permission, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_acquire_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_acquire_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_permission_acquire_async(GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_permission_acquire_async$descriptor() {
        return g_permission_acquire_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_permission_acquire_async(GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_permission_acquire_async$handle() {
        return g_permission_acquire_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_permission_acquire_async(GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_permission_acquire_async(MemorySegment permission, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_permission_acquire_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_acquire_async", permission, cancellable, callback, user_data);
            }
            mh$.invokeExact(permission, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_acquire_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_acquire_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_permission_acquire_finish(GPermission *permission, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_permission_acquire_finish$descriptor() {
        return g_permission_acquire_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_permission_acquire_finish(GPermission *permission, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_permission_acquire_finish$handle() {
        return g_permission_acquire_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_permission_acquire_finish(GPermission *permission, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_permission_acquire_finish(MemorySegment permission, MemorySegment result, MemorySegment error) {
        var mh$ = g_permission_acquire_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_acquire_finish", permission, result, error);
            }
            return (int)mh$.invokeExact(permission, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_permission_release(GPermission *permission, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_permission_release$descriptor() {
        return g_permission_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_permission_release(GPermission *permission, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_permission_release$handle() {
        return g_permission_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_permission_release(GPermission *permission, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_permission_release(MemorySegment permission, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_permission_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_release", permission, cancellable, error);
            }
            return (int)mh$.invokeExact(permission, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_release_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_release_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_permission_release_async(GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_permission_release_async$descriptor() {
        return g_permission_release_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_permission_release_async(GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_permission_release_async$handle() {
        return g_permission_release_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_permission_release_async(GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_permission_release_async(MemorySegment permission, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_permission_release_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_release_async", permission, cancellable, callback, user_data);
            }
            mh$.invokeExact(permission, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_release_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_release_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_permission_release_finish(GPermission *permission, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_permission_release_finish$descriptor() {
        return g_permission_release_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_permission_release_finish(GPermission *permission, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_permission_release_finish$handle() {
        return g_permission_release_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_permission_release_finish(GPermission *permission, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_permission_release_finish(MemorySegment permission, MemorySegment result, MemorySegment error) {
        var mh$ = g_permission_release_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_release_finish", permission, result, error);
            }
            return (int)mh$.invokeExact(permission, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_get_allowed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_get_allowed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_permission_get_allowed(GPermission *permission)
     * }
     */
    public static FunctionDescriptor g_permission_get_allowed$descriptor() {
        return g_permission_get_allowed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_permission_get_allowed(GPermission *permission)
     * }
     */
    public static MethodHandle g_permission_get_allowed$handle() {
        return g_permission_get_allowed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_permission_get_allowed(GPermission *permission)
     * }
     */
    public static int g_permission_get_allowed(MemorySegment permission) {
        var mh$ = g_permission_get_allowed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_get_allowed", permission);
            }
            return (int)mh$.invokeExact(permission);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_get_can_acquire {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_get_can_acquire"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_permission_get_can_acquire(GPermission *permission)
     * }
     */
    public static FunctionDescriptor g_permission_get_can_acquire$descriptor() {
        return g_permission_get_can_acquire.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_permission_get_can_acquire(GPermission *permission)
     * }
     */
    public static MethodHandle g_permission_get_can_acquire$handle() {
        return g_permission_get_can_acquire.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_permission_get_can_acquire(GPermission *permission)
     * }
     */
    public static int g_permission_get_can_acquire(MemorySegment permission) {
        var mh$ = g_permission_get_can_acquire.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_get_can_acquire", permission);
            }
            return (int)mh$.invokeExact(permission);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_get_can_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_get_can_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_permission_get_can_release(GPermission *permission)
     * }
     */
    public static FunctionDescriptor g_permission_get_can_release$descriptor() {
        return g_permission_get_can_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_permission_get_can_release(GPermission *permission)
     * }
     */
    public static MethodHandle g_permission_get_can_release$handle() {
        return g_permission_get_can_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_permission_get_can_release(GPermission *permission)
     * }
     */
    public static int g_permission_get_can_release(MemorySegment permission) {
        var mh$ = g_permission_get_can_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_get_can_release", permission);
            }
            return (int)mh$.invokeExact(permission);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_permission_impl_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_permission_impl_update"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_permission_impl_update(GPermission *permission, gboolean allowed, gboolean can_acquire, gboolean can_release)
     * }
     */
    public static FunctionDescriptor g_permission_impl_update$descriptor() {
        return g_permission_impl_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_permission_impl_update(GPermission *permission, gboolean allowed, gboolean can_acquire, gboolean can_release)
     * }
     */
    public static MethodHandle g_permission_impl_update$handle() {
        return g_permission_impl_update.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_permission_impl_update(GPermission *permission, gboolean allowed, gboolean can_acquire, gboolean can_release)
     * }
     */
    public static void g_permission_impl_update(MemorySegment permission, int allowed, int can_acquire, int can_release) {
        var mh$ = g_permission_impl_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_permission_impl_update", permission, allowed, can_acquire, can_release);
            }
            mh$.invokeExact(permission, allowed, can_acquire, can_release);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_input_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_input_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_pollable_input_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_pollable_input_stream_get_type$descriptor() {
        return g_pollable_input_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_pollable_input_stream_get_type()
     * }
     */
    public static MethodHandle g_pollable_input_stream_get_type$handle() {
        return g_pollable_input_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_pollable_input_stream_get_type()
     * }
     */
    public static long g_pollable_input_stream_get_type() {
        var mh$ = g_pollable_input_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_input_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_input_stream_can_poll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_input_stream_can_poll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pollable_input_stream_can_poll(GPollableInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_pollable_input_stream_can_poll$descriptor() {
        return g_pollable_input_stream_can_poll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pollable_input_stream_can_poll(GPollableInputStream *stream)
     * }
     */
    public static MethodHandle g_pollable_input_stream_can_poll$handle() {
        return g_pollable_input_stream_can_poll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pollable_input_stream_can_poll(GPollableInputStream *stream)
     * }
     */
    public static int g_pollable_input_stream_can_poll(MemorySegment stream) {
        var mh$ = g_pollable_input_stream_can_poll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_input_stream_can_poll", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_input_stream_is_readable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_input_stream_is_readable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pollable_input_stream_is_readable(GPollableInputStream *stream)
     * }
     */
    public static FunctionDescriptor g_pollable_input_stream_is_readable$descriptor() {
        return g_pollable_input_stream_is_readable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pollable_input_stream_is_readable(GPollableInputStream *stream)
     * }
     */
    public static MethodHandle g_pollable_input_stream_is_readable$handle() {
        return g_pollable_input_stream_is_readable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pollable_input_stream_is_readable(GPollableInputStream *stream)
     * }
     */
    public static int g_pollable_input_stream_is_readable(MemorySegment stream) {
        var mh$ = g_pollable_input_stream_is_readable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_input_stream_is_readable", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_input_stream_create_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_input_stream_create_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_pollable_input_stream_create_source(GPollableInputStream *stream, GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_pollable_input_stream_create_source$descriptor() {
        return g_pollable_input_stream_create_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_pollable_input_stream_create_source(GPollableInputStream *stream, GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_pollable_input_stream_create_source$handle() {
        return g_pollable_input_stream_create_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_pollable_input_stream_create_source(GPollableInputStream *stream, GCancellable *cancellable)
     * }
     */
    public static MemorySegment g_pollable_input_stream_create_source(MemorySegment stream, MemorySegment cancellable) {
        var mh$ = g_pollable_input_stream_create_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_input_stream_create_source", stream, cancellable);
            }
            return (MemorySegment)mh$.invokeExact(stream, cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_input_stream_read_nonblocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_input_stream_read_nonblocking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_pollable_input_stream_read_nonblocking(GPollableInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_pollable_input_stream_read_nonblocking$descriptor() {
        return g_pollable_input_stream_read_nonblocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_pollable_input_stream_read_nonblocking(GPollableInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_pollable_input_stream_read_nonblocking$handle() {
        return g_pollable_input_stream_read_nonblocking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_pollable_input_stream_read_nonblocking(GPollableInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_pollable_input_stream_read_nonblocking(MemorySegment stream, MemorySegment buffer, long count, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_pollable_input_stream_read_nonblocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_input_stream_read_nonblocking", stream, buffer, count, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, buffer, count, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_output_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_output_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_pollable_output_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_pollable_output_stream_get_type$descriptor() {
        return g_pollable_output_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_pollable_output_stream_get_type()
     * }
     */
    public static MethodHandle g_pollable_output_stream_get_type$handle() {
        return g_pollable_output_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_pollable_output_stream_get_type()
     * }
     */
    public static long g_pollable_output_stream_get_type() {
        var mh$ = g_pollable_output_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_output_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_output_stream_can_poll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_output_stream_can_poll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pollable_output_stream_can_poll(GPollableOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_pollable_output_stream_can_poll$descriptor() {
        return g_pollable_output_stream_can_poll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pollable_output_stream_can_poll(GPollableOutputStream *stream)
     * }
     */
    public static MethodHandle g_pollable_output_stream_can_poll$handle() {
        return g_pollable_output_stream_can_poll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pollable_output_stream_can_poll(GPollableOutputStream *stream)
     * }
     */
    public static int g_pollable_output_stream_can_poll(MemorySegment stream) {
        var mh$ = g_pollable_output_stream_can_poll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_output_stream_can_poll", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_output_stream_is_writable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_output_stream_is_writable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pollable_output_stream_is_writable(GPollableOutputStream *stream)
     * }
     */
    public static FunctionDescriptor g_pollable_output_stream_is_writable$descriptor() {
        return g_pollable_output_stream_is_writable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pollable_output_stream_is_writable(GPollableOutputStream *stream)
     * }
     */
    public static MethodHandle g_pollable_output_stream_is_writable$handle() {
        return g_pollable_output_stream_is_writable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pollable_output_stream_is_writable(GPollableOutputStream *stream)
     * }
     */
    public static int g_pollable_output_stream_is_writable(MemorySegment stream) {
        var mh$ = g_pollable_output_stream_is_writable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_output_stream_is_writable", stream);
            }
            return (int)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_output_stream_create_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_output_stream_create_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_pollable_output_stream_create_source(GPollableOutputStream *stream, GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_pollable_output_stream_create_source$descriptor() {
        return g_pollable_output_stream_create_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_pollable_output_stream_create_source(GPollableOutputStream *stream, GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_pollable_output_stream_create_source$handle() {
        return g_pollable_output_stream_create_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_pollable_output_stream_create_source(GPollableOutputStream *stream, GCancellable *cancellable)
     * }
     */
    public static MemorySegment g_pollable_output_stream_create_source(MemorySegment stream, MemorySegment cancellable) {
        var mh$ = g_pollable_output_stream_create_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_output_stream_create_source", stream, cancellable);
            }
            return (MemorySegment)mh$.invokeExact(stream, cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_output_stream_write_nonblocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_output_stream_write_nonblocking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_pollable_output_stream_write_nonblocking(GPollableOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_pollable_output_stream_write_nonblocking$descriptor() {
        return g_pollable_output_stream_write_nonblocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_pollable_output_stream_write_nonblocking(GPollableOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_pollable_output_stream_write_nonblocking$handle() {
        return g_pollable_output_stream_write_nonblocking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_pollable_output_stream_write_nonblocking(GPollableOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_pollable_output_stream_write_nonblocking(MemorySegment stream, MemorySegment buffer, long count, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_pollable_output_stream_write_nonblocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_output_stream_write_nonblocking", stream, buffer, count, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, buffer, count, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_output_stream_writev_nonblocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_output_stream_writev_nonblocking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPollableReturn g_pollable_output_stream_writev_nonblocking(GPollableOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_pollable_output_stream_writev_nonblocking$descriptor() {
        return g_pollable_output_stream_writev_nonblocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPollableReturn g_pollable_output_stream_writev_nonblocking(GPollableOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_pollable_output_stream_writev_nonblocking$handle() {
        return g_pollable_output_stream_writev_nonblocking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPollableReturn g_pollable_output_stream_writev_nonblocking(GPollableOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_pollable_output_stream_writev_nonblocking(MemorySegment stream, MemorySegment vectors, long n_vectors, MemorySegment bytes_written, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_pollable_output_stream_writev_nonblocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_output_stream_writev_nonblocking", stream, vectors, n_vectors, bytes_written, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, vectors, n_vectors, bytes_written, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_source_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_source_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_pollable_source_new(GObject *pollable_stream)
     * }
     */
    public static FunctionDescriptor g_pollable_source_new$descriptor() {
        return g_pollable_source_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_pollable_source_new(GObject *pollable_stream)
     * }
     */
    public static MethodHandle g_pollable_source_new$handle() {
        return g_pollable_source_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_pollable_source_new(GObject *pollable_stream)
     * }
     */
    public static MemorySegment g_pollable_source_new(MemorySegment pollable_stream) {
        var mh$ = g_pollable_source_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_source_new", pollable_stream);
            }
            return (MemorySegment)mh$.invokeExact(pollable_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_source_new_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_source_new_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_pollable_source_new_full(gpointer pollable_stream, GSource *child_source, GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_pollable_source_new_full$descriptor() {
        return g_pollable_source_new_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_pollable_source_new_full(gpointer pollable_stream, GSource *child_source, GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_pollable_source_new_full$handle() {
        return g_pollable_source_new_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_pollable_source_new_full(gpointer pollable_stream, GSource *child_source, GCancellable *cancellable)
     * }
     */
    public static MemorySegment g_pollable_source_new_full(MemorySegment pollable_stream, MemorySegment child_source, MemorySegment cancellable) {
        var mh$ = g_pollable_source_new_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_source_new_full", pollable_stream, child_source, cancellable);
            }
            return (MemorySegment)mh$.invokeExact(pollable_stream, child_source, cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_stream_read {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_stream_read"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_pollable_stream_read(GInputStream *stream, void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_pollable_stream_read$descriptor() {
        return g_pollable_stream_read.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_pollable_stream_read(GInputStream *stream, void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_pollable_stream_read$handle() {
        return g_pollable_stream_read.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_pollable_stream_read(GInputStream *stream, void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_pollable_stream_read(MemorySegment stream, MemorySegment buffer, long count, int blocking, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_pollable_stream_read.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_stream_read", stream, buffer, count, blocking, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, buffer, count, blocking, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_stream_write {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_stream_write"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_pollable_stream_write(GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_pollable_stream_write$descriptor() {
        return g_pollable_stream_write.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_pollable_stream_write(GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_pollable_stream_write$handle() {
        return g_pollable_stream_write.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_pollable_stream_write(GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_pollable_stream_write(MemorySegment stream, MemorySegment buffer, long count, int blocking, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_pollable_stream_write.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_stream_write", stream, buffer, count, blocking, cancellable, error);
            }
            return (long)mh$.invokeExact(stream, buffer, count, blocking, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollable_stream_write_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollable_stream_write_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pollable_stream_write_all(GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_pollable_stream_write_all$descriptor() {
        return g_pollable_stream_write_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pollable_stream_write_all(GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_pollable_stream_write_all$handle() {
        return g_pollable_stream_write_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pollable_stream_write_all(GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_pollable_stream_write_all(MemorySegment stream, MemorySegment buffer, long count, int blocking, MemorySegment bytes_written, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_pollable_stream_write_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollable_stream_write_all", stream, buffer, count, blocking, bytes_written, cancellable, error);
            }
            return (int)mh$.invokeExact(stream, buffer, count, blocking, bytes_written, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_power_profile_monitor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_power_profile_monitor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_power_profile_monitor_get_type()
     * }
     */
    public static FunctionDescriptor g_power_profile_monitor_get_type$descriptor() {
        return g_power_profile_monitor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_power_profile_monitor_get_type()
     * }
     */
    public static MethodHandle g_power_profile_monitor_get_type$handle() {
        return g_power_profile_monitor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_power_profile_monitor_get_type()
     * }
     */
    public static long g_power_profile_monitor_get_type() {
        var mh$ = g_power_profile_monitor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_power_profile_monitor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GPowerProfileMonitor *GPowerProfileMonitor_autoptr
     * }
     */
    public static final AddressLayout GPowerProfileMonitor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GPowerProfileMonitor_listautoptr
     * }
     */
    public static final AddressLayout GPowerProfileMonitor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GPowerProfileMonitor_slistautoptr
     * }
     */
    public static final AddressLayout GPowerProfileMonitor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GPowerProfileMonitor_queueautoptr
     * }
     */
    public static final AddressLayout GPowerProfileMonitor_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_power_profile_monitor_dup_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_power_profile_monitor_dup_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPowerProfileMonitor *g_power_profile_monitor_dup_default()
     * }
     */
    public static FunctionDescriptor g_power_profile_monitor_dup_default$descriptor() {
        return g_power_profile_monitor_dup_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPowerProfileMonitor *g_power_profile_monitor_dup_default()
     * }
     */
    public static MethodHandle g_power_profile_monitor_dup_default$handle() {
        return g_power_profile_monitor_dup_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPowerProfileMonitor *g_power_profile_monitor_dup_default()
     * }
     */
    public static MemorySegment g_power_profile_monitor_dup_default() {
        var mh$ = g_power_profile_monitor_dup_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_power_profile_monitor_dup_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_power_profile_monitor_get_power_saver_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_power_profile_monitor_get_power_saver_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_power_profile_monitor_get_power_saver_enabled(GPowerProfileMonitor *monitor)
     * }
     */
    public static FunctionDescriptor g_power_profile_monitor_get_power_saver_enabled$descriptor() {
        return g_power_profile_monitor_get_power_saver_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_power_profile_monitor_get_power_saver_enabled(GPowerProfileMonitor *monitor)
     * }
     */
    public static MethodHandle g_power_profile_monitor_get_power_saver_enabled$handle() {
        return g_power_profile_monitor_get_power_saver_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_power_profile_monitor_get_power_saver_enabled(GPowerProfileMonitor *monitor)
     * }
     */
    public static int g_power_profile_monitor_get_power_saver_enabled(MemorySegment monitor) {
        var mh$ = g_power_profile_monitor_get_power_saver_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_power_profile_monitor_get_power_saver_enabled", monitor);
            }
            return (int)mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_property_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_property_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_property_action_get_type()
     * }
     */
    public static FunctionDescriptor g_property_action_get_type$descriptor() {
        return g_property_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_property_action_get_type()
     * }
     */
    public static MethodHandle g_property_action_get_type$handle() {
        return g_property_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_property_action_get_type()
     * }
     */
    public static long g_property_action_get_type() {
        var mh$ = g_property_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_property_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_property_action_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_property_action_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPropertyAction *g_property_action_new(const gchar *name, gpointer object, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor g_property_action_new$descriptor() {
        return g_property_action_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPropertyAction *g_property_action_new(const gchar *name, gpointer object, const gchar *property_name)
     * }
     */
    public static MethodHandle g_property_action_new$handle() {
        return g_property_action_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPropertyAction *g_property_action_new(const gchar *name, gpointer object, const gchar *property_name)
     * }
     */
    public static MemorySegment g_property_action_new(MemorySegment name, MemorySegment object, MemorySegment property_name) {
        var mh$ = g_property_action_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_property_action_new", name, object, property_name);
            }
            return (MemorySegment)mh$.invokeExact(name, object, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_proxy_get_type()
     * }
     */
    public static FunctionDescriptor g_proxy_get_type$descriptor() {
        return g_proxy_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_proxy_get_type()
     * }
     */
    public static MethodHandle g_proxy_get_type$handle() {
        return g_proxy_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_proxy_get_type()
     * }
     */
    public static long g_proxy_get_type() {
        var mh$ = g_proxy_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_get_default_for_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_get_default_for_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GProxy *g_proxy_get_default_for_protocol(const gchar *protocol)
     * }
     */
    public static FunctionDescriptor g_proxy_get_default_for_protocol$descriptor() {
        return g_proxy_get_default_for_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GProxy *g_proxy_get_default_for_protocol(const gchar *protocol)
     * }
     */
    public static MethodHandle g_proxy_get_default_for_protocol$handle() {
        return g_proxy_get_default_for_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GProxy *g_proxy_get_default_for_protocol(const gchar *protocol)
     * }
     */
    public static MemorySegment g_proxy_get_default_for_protocol(MemorySegment protocol) {
        var mh$ = g_proxy_get_default_for_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_get_default_for_protocol", protocol);
            }
            return (MemorySegment)mh$.invokeExact(protocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_connect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStream *g_proxy_connect(GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_proxy_connect$descriptor() {
        return g_proxy_connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStream *g_proxy_connect(GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_proxy_connect$handle() {
        return g_proxy_connect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStream *g_proxy_connect(GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_proxy_connect(MemorySegment proxy, MemorySegment connection, MemorySegment proxy_address, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_proxy_connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_connect", proxy, connection, proxy_address, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(proxy, connection, proxy_address, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_connect_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_connect_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_proxy_connect_async(GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_proxy_connect_async$descriptor() {
        return g_proxy_connect_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_proxy_connect_async(GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_proxy_connect_async$handle() {
        return g_proxy_connect_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_proxy_connect_async(GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_proxy_connect_async(MemorySegment proxy, MemorySegment connection, MemorySegment proxy_address, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_proxy_connect_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_connect_async", proxy, connection, proxy_address, cancellable, callback, user_data);
            }
            mh$.invokeExact(proxy, connection, proxy_address, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_connect_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_connect_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStream *g_proxy_connect_finish(GProxy *proxy, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_proxy_connect_finish$descriptor() {
        return g_proxy_connect_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStream *g_proxy_connect_finish(GProxy *proxy, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_proxy_connect_finish$handle() {
        return g_proxy_connect_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStream *g_proxy_connect_finish(GProxy *proxy, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_proxy_connect_finish(MemorySegment proxy, MemorySegment result, MemorySegment error) {
        var mh$ = g_proxy_connect_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_connect_finish", proxy, result, error);
            }
            return (MemorySegment)mh$.invokeExact(proxy, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_supports_hostname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_supports_hostname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_proxy_supports_hostname(GProxy *proxy)
     * }
     */
    public static FunctionDescriptor g_proxy_supports_hostname$descriptor() {
        return g_proxy_supports_hostname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_proxy_supports_hostname(GProxy *proxy)
     * }
     */
    public static MethodHandle g_proxy_supports_hostname$handle() {
        return g_proxy_supports_hostname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_proxy_supports_hostname(GProxy *proxy)
     * }
     */
    public static int g_proxy_supports_hostname(MemorySegment proxy) {
        var mh$ = g_proxy_supports_hostname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_supports_hostname", proxy);
            }
            return (int)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_address_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_address_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_proxy_address_get_type()
     * }
     */
    public static FunctionDescriptor g_proxy_address_get_type$descriptor() {
        return g_proxy_address_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_proxy_address_get_type()
     * }
     */
    public static MethodHandle g_proxy_address_get_type$handle() {
        return g_proxy_address_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_proxy_address_get_type()
     * }
     */
    public static long g_proxy_address_get_type() {
        var mh$ = g_proxy_address_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_address_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_address_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_address_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_proxy_address_new(GInetAddress *inetaddr, guint16 port, const gchar *protocol, const gchar *dest_hostname, guint16 dest_port, const gchar *username, const gchar *password)
     * }
     */
    public static FunctionDescriptor g_proxy_address_new$descriptor() {
        return g_proxy_address_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_proxy_address_new(GInetAddress *inetaddr, guint16 port, const gchar *protocol, const gchar *dest_hostname, guint16 dest_port, const gchar *username, const gchar *password)
     * }
     */
    public static MethodHandle g_proxy_address_new$handle() {
        return g_proxy_address_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_proxy_address_new(GInetAddress *inetaddr, guint16 port, const gchar *protocol, const gchar *dest_hostname, guint16 dest_port, const gchar *username, const gchar *password)
     * }
     */
    public static MemorySegment g_proxy_address_new(MemorySegment inetaddr, short port, MemorySegment protocol, MemorySegment dest_hostname, short dest_port, MemorySegment username, MemorySegment password) {
        var mh$ = g_proxy_address_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_address_new", inetaddr, port, protocol, dest_hostname, dest_port, username, password);
            }
            return (MemorySegment)mh$.invokeExact(inetaddr, port, protocol, dest_hostname, dest_port, username, password);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_address_get_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_address_get_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_protocol(GProxyAddress *proxy)
     * }
     */
    public static FunctionDescriptor g_proxy_address_get_protocol$descriptor() {
        return g_proxy_address_get_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_protocol(GProxyAddress *proxy)
     * }
     */
    public static MethodHandle g_proxy_address_get_protocol$handle() {
        return g_proxy_address_get_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_protocol(GProxyAddress *proxy)
     * }
     */
    public static MemorySegment g_proxy_address_get_protocol(MemorySegment proxy) {
        var mh$ = g_proxy_address_get_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_address_get_protocol", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_address_get_destination_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_address_get_destination_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_destination_protocol(GProxyAddress *proxy)
     * }
     */
    public static FunctionDescriptor g_proxy_address_get_destination_protocol$descriptor() {
        return g_proxy_address_get_destination_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_destination_protocol(GProxyAddress *proxy)
     * }
     */
    public static MethodHandle g_proxy_address_get_destination_protocol$handle() {
        return g_proxy_address_get_destination_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_destination_protocol(GProxyAddress *proxy)
     * }
     */
    public static MemorySegment g_proxy_address_get_destination_protocol(MemorySegment proxy) {
        var mh$ = g_proxy_address_get_destination_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_address_get_destination_protocol", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_address_get_destination_hostname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_address_get_destination_hostname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_destination_hostname(GProxyAddress *proxy)
     * }
     */
    public static FunctionDescriptor g_proxy_address_get_destination_hostname$descriptor() {
        return g_proxy_address_get_destination_hostname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_destination_hostname(GProxyAddress *proxy)
     * }
     */
    public static MethodHandle g_proxy_address_get_destination_hostname$handle() {
        return g_proxy_address_get_destination_hostname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_destination_hostname(GProxyAddress *proxy)
     * }
     */
    public static MemorySegment g_proxy_address_get_destination_hostname(MemorySegment proxy) {
        var mh$ = g_proxy_address_get_destination_hostname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_address_get_destination_hostname", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_address_get_destination_port {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_address_get_destination_port"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 g_proxy_address_get_destination_port(GProxyAddress *proxy)
     * }
     */
    public static FunctionDescriptor g_proxy_address_get_destination_port$descriptor() {
        return g_proxy_address_get_destination_port.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 g_proxy_address_get_destination_port(GProxyAddress *proxy)
     * }
     */
    public static MethodHandle g_proxy_address_get_destination_port$handle() {
        return g_proxy_address_get_destination_port.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 g_proxy_address_get_destination_port(GProxyAddress *proxy)
     * }
     */
    public static short g_proxy_address_get_destination_port(MemorySegment proxy) {
        var mh$ = g_proxy_address_get_destination_port.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_address_get_destination_port", proxy);
            }
            return (short)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_address_get_username {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_address_get_username"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_username(GProxyAddress *proxy)
     * }
     */
    public static FunctionDescriptor g_proxy_address_get_username$descriptor() {
        return g_proxy_address_get_username.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_username(GProxyAddress *proxy)
     * }
     */
    public static MethodHandle g_proxy_address_get_username$handle() {
        return g_proxy_address_get_username.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_username(GProxyAddress *proxy)
     * }
     */
    public static MemorySegment g_proxy_address_get_username(MemorySegment proxy) {
        var mh$ = g_proxy_address_get_username.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_address_get_username", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_address_get_password {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_address_get_password"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_password(GProxyAddress *proxy)
     * }
     */
    public static FunctionDescriptor g_proxy_address_get_password$descriptor() {
        return g_proxy_address_get_password.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_password(GProxyAddress *proxy)
     * }
     */
    public static MethodHandle g_proxy_address_get_password$handle() {
        return g_proxy_address_get_password.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_password(GProxyAddress *proxy)
     * }
     */
    public static MemorySegment g_proxy_address_get_password(MemorySegment proxy) {
        var mh$ = g_proxy_address_get_password.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_address_get_password", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_address_get_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_address_get_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_uri(GProxyAddress *proxy)
     * }
     */
    public static FunctionDescriptor g_proxy_address_get_uri$descriptor() {
        return g_proxy_address_get_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_uri(GProxyAddress *proxy)
     * }
     */
    public static MethodHandle g_proxy_address_get_uri$handle() {
        return g_proxy_address_get_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_proxy_address_get_uri(GProxyAddress *proxy)
     * }
     */
    public static MemorySegment g_proxy_address_get_uri(MemorySegment proxy) {
        var mh$ = g_proxy_address_get_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_address_get_uri", proxy);
            }
            return (MemorySegment)mh$.invokeExact(proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_address_enumerator_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_address_enumerator_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_address_enumerator_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_address_enumerator_get_type$descriptor() {
        return g_socket_address_enumerator_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_address_enumerator_get_type()
     * }
     */
    public static MethodHandle g_socket_address_enumerator_get_type$handle() {
        return g_socket_address_enumerator_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_address_enumerator_get_type()
     * }
     */
    public static long g_socket_address_enumerator_get_type() {
        var mh$ = g_socket_address_enumerator_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_address_enumerator_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_address_enumerator_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_address_enumerator_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_address_enumerator_next(GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_address_enumerator_next$descriptor() {
        return g_socket_address_enumerator_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_address_enumerator_next(GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_address_enumerator_next$handle() {
        return g_socket_address_enumerator_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_address_enumerator_next(GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_socket_address_enumerator_next(MemorySegment enumerator, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_address_enumerator_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_address_enumerator_next", enumerator, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(enumerator, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_address_enumerator_next_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_address_enumerator_next_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_address_enumerator_next_async(GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_socket_address_enumerator_next_async$descriptor() {
        return g_socket_address_enumerator_next_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_address_enumerator_next_async(GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_socket_address_enumerator_next_async$handle() {
        return g_socket_address_enumerator_next_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_address_enumerator_next_async(GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_socket_address_enumerator_next_async(MemorySegment enumerator, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_socket_address_enumerator_next_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_address_enumerator_next_async", enumerator, cancellable, callback, user_data);
            }
            mh$.invokeExact(enumerator, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_address_enumerator_next_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_address_enumerator_next_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_address_enumerator_next_finish(GSocketAddressEnumerator *enumerator, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_address_enumerator_next_finish$descriptor() {
        return g_socket_address_enumerator_next_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_address_enumerator_next_finish(GSocketAddressEnumerator *enumerator, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_socket_address_enumerator_next_finish$handle() {
        return g_socket_address_enumerator_next_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_address_enumerator_next_finish(GSocketAddressEnumerator *enumerator, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_socket_address_enumerator_next_finish(MemorySegment enumerator, MemorySegment result, MemorySegment error) {
        var mh$ = g_socket_address_enumerator_next_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_address_enumerator_next_finish", enumerator, result, error);
            }
            return (MemorySegment)mh$.invokeExact(enumerator, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_address_enumerator_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_address_enumerator_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_proxy_address_enumerator_get_type()
     * }
     */
    public static FunctionDescriptor g_proxy_address_enumerator_get_type$descriptor() {
        return g_proxy_address_enumerator_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_proxy_address_enumerator_get_type()
     * }
     */
    public static MethodHandle g_proxy_address_enumerator_get_type$handle() {
        return g_proxy_address_enumerator_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_proxy_address_enumerator_get_type()
     * }
     */
    public static long g_proxy_address_enumerator_get_type() {
        var mh$ = g_proxy_address_enumerator_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_address_enumerator_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_resolver_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_resolver_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_proxy_resolver_get_type()
     * }
     */
    public static FunctionDescriptor g_proxy_resolver_get_type$descriptor() {
        return g_proxy_resolver_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_proxy_resolver_get_type()
     * }
     */
    public static MethodHandle g_proxy_resolver_get_type$handle() {
        return g_proxy_resolver_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_proxy_resolver_get_type()
     * }
     */
    public static long g_proxy_resolver_get_type() {
        var mh$ = g_proxy_resolver_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_resolver_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_resolver_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_resolver_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GProxyResolver *g_proxy_resolver_get_default()
     * }
     */
    public static FunctionDescriptor g_proxy_resolver_get_default$descriptor() {
        return g_proxy_resolver_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GProxyResolver *g_proxy_resolver_get_default()
     * }
     */
    public static MethodHandle g_proxy_resolver_get_default$handle() {
        return g_proxy_resolver_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GProxyResolver *g_proxy_resolver_get_default()
     * }
     */
    public static MemorySegment g_proxy_resolver_get_default() {
        var mh$ = g_proxy_resolver_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_resolver_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_resolver_is_supported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_resolver_is_supported"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_proxy_resolver_is_supported(GProxyResolver *resolver)
     * }
     */
    public static FunctionDescriptor g_proxy_resolver_is_supported$descriptor() {
        return g_proxy_resolver_is_supported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_proxy_resolver_is_supported(GProxyResolver *resolver)
     * }
     */
    public static MethodHandle g_proxy_resolver_is_supported$handle() {
        return g_proxy_resolver_is_supported.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_proxy_resolver_is_supported(GProxyResolver *resolver)
     * }
     */
    public static int g_proxy_resolver_is_supported(MemorySegment resolver) {
        var mh$ = g_proxy_resolver_is_supported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_resolver_is_supported", resolver);
            }
            return (int)mh$.invokeExact(resolver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_resolver_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_resolver_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_proxy_resolver_lookup(GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_proxy_resolver_lookup$descriptor() {
        return g_proxy_resolver_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_proxy_resolver_lookup(GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_proxy_resolver_lookup$handle() {
        return g_proxy_resolver_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_proxy_resolver_lookup(GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_proxy_resolver_lookup(MemorySegment resolver, MemorySegment uri, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_proxy_resolver_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_resolver_lookup", resolver, uri, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, uri, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_resolver_lookup_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_resolver_lookup_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_proxy_resolver_lookup_async(GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_proxy_resolver_lookup_async$descriptor() {
        return g_proxy_resolver_lookup_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_proxy_resolver_lookup_async(GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_proxy_resolver_lookup_async$handle() {
        return g_proxy_resolver_lookup_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_proxy_resolver_lookup_async(GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_proxy_resolver_lookup_async(MemorySegment resolver, MemorySegment uri, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_proxy_resolver_lookup_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_resolver_lookup_async", resolver, uri, cancellable, callback, user_data);
            }
            mh$.invokeExact(resolver, uri, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_proxy_resolver_lookup_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_proxy_resolver_lookup_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_proxy_resolver_lookup_finish(GProxyResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_proxy_resolver_lookup_finish$descriptor() {
        return g_proxy_resolver_lookup_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_proxy_resolver_lookup_finish(GProxyResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_proxy_resolver_lookup_finish$handle() {
        return g_proxy_resolver_lookup_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_proxy_resolver_lookup_finish(GProxyResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_proxy_resolver_lookup_finish(MemorySegment resolver, MemorySegment result, MemorySegment error) {
        var mh$ = g_proxy_resolver_lookup_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_proxy_resolver_lookup_finish", resolver, result, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_remote_action_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_remote_action_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_remote_action_group_get_type()
     * }
     */
    public static FunctionDescriptor g_remote_action_group_get_type$descriptor() {
        return g_remote_action_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_remote_action_group_get_type()
     * }
     */
    public static MethodHandle g_remote_action_group_get_type$handle() {
        return g_remote_action_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_remote_action_group_get_type()
     * }
     */
    public static long g_remote_action_group_get_type() {
        var mh$ = g_remote_action_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_remote_action_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_remote_action_group_activate_action_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_remote_action_group_activate_action_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_remote_action_group_activate_action_full(GRemoteActionGroup *remote, const gchar *action_name, GVariant *parameter, GVariant *platform_data)
     * }
     */
    public static FunctionDescriptor g_remote_action_group_activate_action_full$descriptor() {
        return g_remote_action_group_activate_action_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_remote_action_group_activate_action_full(GRemoteActionGroup *remote, const gchar *action_name, GVariant *parameter, GVariant *platform_data)
     * }
     */
    public static MethodHandle g_remote_action_group_activate_action_full$handle() {
        return g_remote_action_group_activate_action_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_remote_action_group_activate_action_full(GRemoteActionGroup *remote, const gchar *action_name, GVariant *parameter, GVariant *platform_data)
     * }
     */
    public static void g_remote_action_group_activate_action_full(MemorySegment remote, MemorySegment action_name, MemorySegment parameter, MemorySegment platform_data) {
        var mh$ = g_remote_action_group_activate_action_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_remote_action_group_activate_action_full", remote, action_name, parameter, platform_data);
            }
            mh$.invokeExact(remote, action_name, parameter, platform_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_remote_action_group_change_action_state_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_remote_action_group_change_action_state_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_remote_action_group_change_action_state_full(GRemoteActionGroup *remote, const gchar *action_name, GVariant *value, GVariant *platform_data)
     * }
     */
    public static FunctionDescriptor g_remote_action_group_change_action_state_full$descriptor() {
        return g_remote_action_group_change_action_state_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_remote_action_group_change_action_state_full(GRemoteActionGroup *remote, const gchar *action_name, GVariant *value, GVariant *platform_data)
     * }
     */
    public static MethodHandle g_remote_action_group_change_action_state_full$handle() {
        return g_remote_action_group_change_action_state_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_remote_action_group_change_action_state_full(GRemoteActionGroup *remote, const gchar *action_name, GVariant *value, GVariant *platform_data)
     * }
     */
    public static void g_remote_action_group_change_action_state_full(MemorySegment remote, MemorySegment action_name, MemorySegment value, MemorySegment platform_data) {
        var mh$ = g_remote_action_group_change_action_state_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_remote_action_group_change_action_state_full", remote, action_name, value, platform_data);
            }
            mh$.invokeExact(remote, action_name, value, platform_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT = 0
     * }
     */
    public static int G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT() {
        return G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT;
    }
    private static final int G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY = 1
     * }
     */
    public static int G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY() {
        return G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY;
    }
    private static final int G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY = 2
     * }
     */
    public static int G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY() {
        return G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY;
    }

    private static class g_resolver_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_resolver_get_type()
     * }
     */
    public static FunctionDescriptor g_resolver_get_type$descriptor() {
        return g_resolver_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_resolver_get_type()
     * }
     */
    public static MethodHandle g_resolver_get_type$handle() {
        return g_resolver_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_resolver_get_type()
     * }
     */
    public static long g_resolver_get_type() {
        var mh$ = g_resolver_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GResolver *g_resolver_get_default()
     * }
     */
    public static FunctionDescriptor g_resolver_get_default$descriptor() {
        return g_resolver_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GResolver *g_resolver_get_default()
     * }
     */
    public static MethodHandle g_resolver_get_default$handle() {
        return g_resolver_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GResolver *g_resolver_get_default()
     * }
     */
    public static MemorySegment g_resolver_get_default() {
        var mh$ = g_resolver_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_set_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_set_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resolver_set_default(GResolver *resolver)
     * }
     */
    public static FunctionDescriptor g_resolver_set_default$descriptor() {
        return g_resolver_set_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resolver_set_default(GResolver *resolver)
     * }
     */
    public static MethodHandle g_resolver_set_default$handle() {
        return g_resolver_set_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resolver_set_default(GResolver *resolver)
     * }
     */
    public static void g_resolver_set_default(MemorySegment resolver) {
        var mh$ = g_resolver_set_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_set_default", resolver);
            }
            mh$.invokeExact(resolver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name(GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_by_name$descriptor() {
        return g_resolver_lookup_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name(GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_resolver_lookup_by_name$handle() {
        return g_resolver_lookup_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name(GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_resolver_lookup_by_name(MemorySegment resolver, MemorySegment hostname, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_resolver_lookup_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_by_name", resolver, hostname, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, hostname, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_by_name_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_by_name_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resolver_lookup_by_name_async(GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_by_name_async$descriptor() {
        return g_resolver_lookup_by_name_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resolver_lookup_by_name_async(GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_resolver_lookup_by_name_async$handle() {
        return g_resolver_lookup_by_name_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resolver_lookup_by_name_async(GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_resolver_lookup_by_name_async(MemorySegment resolver, MemorySegment hostname, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_resolver_lookup_by_name_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_by_name_async", resolver, hostname, cancellable, callback, user_data);
            }
            mh$.invokeExact(resolver, hostname, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_by_name_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_by_name_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_by_name_finish$descriptor() {
        return g_resolver_lookup_by_name_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_resolver_lookup_by_name_finish$handle() {
        return g_resolver_lookup_by_name_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_resolver_lookup_by_name_finish(MemorySegment resolver, MemorySegment result, MemorySegment error) {
        var mh$ = g_resolver_lookup_by_name_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_by_name_finish", resolver, result, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_by_name_with_flags_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_by_name_with_flags_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resolver_lookup_by_name_with_flags_async(GResolver *resolver, const gchar *hostname, GResolverNameLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_by_name_with_flags_async$descriptor() {
        return g_resolver_lookup_by_name_with_flags_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resolver_lookup_by_name_with_flags_async(GResolver *resolver, const gchar *hostname, GResolverNameLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_resolver_lookup_by_name_with_flags_async$handle() {
        return g_resolver_lookup_by_name_with_flags_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resolver_lookup_by_name_with_flags_async(GResolver *resolver, const gchar *hostname, GResolverNameLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_resolver_lookup_by_name_with_flags_async(MemorySegment resolver, MemorySegment hostname, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_resolver_lookup_by_name_with_flags_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_by_name_with_flags_async", resolver, hostname, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(resolver, hostname, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_by_name_with_flags_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_by_name_with_flags_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name_with_flags_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_by_name_with_flags_finish$descriptor() {
        return g_resolver_lookup_by_name_with_flags_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name_with_flags_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_resolver_lookup_by_name_with_flags_finish$handle() {
        return g_resolver_lookup_by_name_with_flags_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name_with_flags_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_resolver_lookup_by_name_with_flags_finish(MemorySegment resolver, MemorySegment result, MemorySegment error) {
        var mh$ = g_resolver_lookup_by_name_with_flags_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_by_name_with_flags_finish", resolver, result, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_by_name_with_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_by_name_with_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name_with_flags(GResolver *resolver, const gchar *hostname, GResolverNameLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_by_name_with_flags$descriptor() {
        return g_resolver_lookup_by_name_with_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name_with_flags(GResolver *resolver, const gchar *hostname, GResolverNameLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_resolver_lookup_by_name_with_flags$handle() {
        return g_resolver_lookup_by_name_with_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_by_name_with_flags(GResolver *resolver, const gchar *hostname, GResolverNameLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_resolver_lookup_by_name_with_flags(MemorySegment resolver, MemorySegment hostname, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_resolver_lookup_by_name_with_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_by_name_with_flags", resolver, hostname, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, hostname, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_free_addresses {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_free_addresses"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resolver_free_addresses(GList *addresses)
     * }
     */
    public static FunctionDescriptor g_resolver_free_addresses$descriptor() {
        return g_resolver_free_addresses.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resolver_free_addresses(GList *addresses)
     * }
     */
    public static MethodHandle g_resolver_free_addresses$handle() {
        return g_resolver_free_addresses.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resolver_free_addresses(GList *addresses)
     * }
     */
    public static void g_resolver_free_addresses(MemorySegment addresses) {
        var mh$ = g_resolver_free_addresses.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_free_addresses", addresses);
            }
            mh$.invokeExact(addresses);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_by_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_by_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_resolver_lookup_by_address(GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_by_address$descriptor() {
        return g_resolver_lookup_by_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_resolver_lookup_by_address(GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_resolver_lookup_by_address$handle() {
        return g_resolver_lookup_by_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_resolver_lookup_by_address(GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_resolver_lookup_by_address(MemorySegment resolver, MemorySegment address, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_resolver_lookup_by_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_by_address", resolver, address, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, address, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_by_address_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_by_address_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resolver_lookup_by_address_async(GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_by_address_async$descriptor() {
        return g_resolver_lookup_by_address_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resolver_lookup_by_address_async(GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_resolver_lookup_by_address_async$handle() {
        return g_resolver_lookup_by_address_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resolver_lookup_by_address_async(GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_resolver_lookup_by_address_async(MemorySegment resolver, MemorySegment address, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_resolver_lookup_by_address_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_by_address_async", resolver, address, cancellable, callback, user_data);
            }
            mh$.invokeExact(resolver, address, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_by_address_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_by_address_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_resolver_lookup_by_address_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_by_address_finish$descriptor() {
        return g_resolver_lookup_by_address_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_resolver_lookup_by_address_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_resolver_lookup_by_address_finish$handle() {
        return g_resolver_lookup_by_address_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_resolver_lookup_by_address_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_resolver_lookup_by_address_finish(MemorySegment resolver, MemorySegment result, MemorySegment error) {
        var mh$ = g_resolver_lookup_by_address_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_by_address_finish", resolver, result, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_service {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_service"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_service(GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_service$descriptor() {
        return g_resolver_lookup_service.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_service(GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_resolver_lookup_service$handle() {
        return g_resolver_lookup_service.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_service(GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_resolver_lookup_service(MemorySegment resolver, MemorySegment service, MemorySegment protocol, MemorySegment domain, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_resolver_lookup_service.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_service", resolver, service, protocol, domain, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, service, protocol, domain, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_service_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_service_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resolver_lookup_service_async(GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_service_async$descriptor() {
        return g_resolver_lookup_service_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resolver_lookup_service_async(GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_resolver_lookup_service_async$handle() {
        return g_resolver_lookup_service_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resolver_lookup_service_async(GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_resolver_lookup_service_async(MemorySegment resolver, MemorySegment service, MemorySegment protocol, MemorySegment domain, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_resolver_lookup_service_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_service_async", resolver, service, protocol, domain, cancellable, callback, user_data);
            }
            mh$.invokeExact(resolver, service, protocol, domain, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_service_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_service_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_service_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_service_finish$descriptor() {
        return g_resolver_lookup_service_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_service_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_resolver_lookup_service_finish$handle() {
        return g_resolver_lookup_service_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_service_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_resolver_lookup_service_finish(MemorySegment resolver, MemorySegment result, MemorySegment error) {
        var mh$ = g_resolver_lookup_service_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_service_finish", resolver, result, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_records {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_records"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_records(GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_records$descriptor() {
        return g_resolver_lookup_records.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_records(GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_resolver_lookup_records$handle() {
        return g_resolver_lookup_records.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_records(GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_resolver_lookup_records(MemorySegment resolver, MemorySegment rrname, int record_type, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_resolver_lookup_records.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_records", resolver, rrname, record_type, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, rrname, record_type, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_records_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_records_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resolver_lookup_records_async(GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_records_async$descriptor() {
        return g_resolver_lookup_records_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resolver_lookup_records_async(GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_resolver_lookup_records_async$handle() {
        return g_resolver_lookup_records_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resolver_lookup_records_async(GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_resolver_lookup_records_async(MemorySegment resolver, MemorySegment rrname, int record_type, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_resolver_lookup_records_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_records_async", resolver, rrname, record_type, cancellable, callback, user_data);
            }
            mh$.invokeExact(resolver, rrname, record_type, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_lookup_records_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_lookup_records_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_records_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_resolver_lookup_records_finish$descriptor() {
        return g_resolver_lookup_records_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_records_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_resolver_lookup_records_finish$handle() {
        return g_resolver_lookup_records_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_resolver_lookup_records_finish(GResolver *resolver, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_resolver_lookup_records_finish(MemorySegment resolver, MemorySegment result, MemorySegment error) {
        var mh$ = g_resolver_lookup_records_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_lookup_records_finish", resolver, result, error);
            }
            return (MemorySegment)mh$.invokeExact(resolver, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_free_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_free_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resolver_free_targets(GList *targets)
     * }
     */
    public static FunctionDescriptor g_resolver_free_targets$descriptor() {
        return g_resolver_free_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resolver_free_targets(GList *targets)
     * }
     */
    public static MethodHandle g_resolver_free_targets$handle() {
        return g_resolver_free_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resolver_free_targets(GList *targets)
     * }
     */
    public static void g_resolver_free_targets(MemorySegment targets) {
        var mh$ = g_resolver_free_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_free_targets", targets);
            }
            mh$.invokeExact(targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_get_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_get_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int g_resolver_get_timeout(GResolver *resolver)
     * }
     */
    public static FunctionDescriptor g_resolver_get_timeout$descriptor() {
        return g_resolver_get_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int g_resolver_get_timeout(GResolver *resolver)
     * }
     */
    public static MethodHandle g_resolver_get_timeout$handle() {
        return g_resolver_get_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int g_resolver_get_timeout(GResolver *resolver)
     * }
     */
    public static int g_resolver_get_timeout(MemorySegment resolver) {
        var mh$ = g_resolver_get_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_get_timeout", resolver);
            }
            return (int)mh$.invokeExact(resolver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_set_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_set_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resolver_set_timeout(GResolver *resolver, unsigned int timeout_ms)
     * }
     */
    public static FunctionDescriptor g_resolver_set_timeout$descriptor() {
        return g_resolver_set_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resolver_set_timeout(GResolver *resolver, unsigned int timeout_ms)
     * }
     */
    public static MethodHandle g_resolver_set_timeout$handle() {
        return g_resolver_set_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resolver_set_timeout(GResolver *resolver, unsigned int timeout_ms)
     * }
     */
    public static void g_resolver_set_timeout(MemorySegment resolver, int timeout_ms) {
        var mh$ = g_resolver_set_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_set_timeout", resolver, timeout_ms);
            }
            mh$.invokeExact(resolver, timeout_ms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resolver_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resolver_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_resolver_error_quark()
     * }
     */
    public static FunctionDescriptor g_resolver_error_quark$descriptor() {
        return g_resolver_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_resolver_error_quark()
     * }
     */
    public static MethodHandle g_resolver_error_quark$handle() {
        return g_resolver_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_resolver_error_quark()
     * }
     */
    public static int g_resolver_error_quark() {
        var mh$ = g_resolver_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resolver_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_resource_error_quark()
     * }
     */
    public static FunctionDescriptor g_resource_error_quark$descriptor() {
        return g_resource_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_resource_error_quark()
     * }
     */
    public static MethodHandle g_resource_error_quark$handle() {
        return g_resource_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_resource_error_quark()
     * }
     */
    public static int g_resource_error_quark() {
        var mh$ = g_resource_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_resource_get_type()
     * }
     */
    public static FunctionDescriptor g_resource_get_type$descriptor() {
        return g_resource_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_resource_get_type()
     * }
     */
    public static MethodHandle g_resource_get_type$handle() {
        return g_resource_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_resource_get_type()
     * }
     */
    public static long g_resource_get_type() {
        var mh$ = g_resource_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_new_from_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_new_from_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GResource *g_resource_new_from_data(GBytes *data, GError **error)
     * }
     */
    public static FunctionDescriptor g_resource_new_from_data$descriptor() {
        return g_resource_new_from_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GResource *g_resource_new_from_data(GBytes *data, GError **error)
     * }
     */
    public static MethodHandle g_resource_new_from_data$handle() {
        return g_resource_new_from_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GResource *g_resource_new_from_data(GBytes *data, GError **error)
     * }
     */
    public static MemorySegment g_resource_new_from_data(MemorySegment data, MemorySegment error) {
        var mh$ = g_resource_new_from_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_new_from_data", data, error);
            }
            return (MemorySegment)mh$.invokeExact(data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GResource *g_resource_ref(GResource *resource)
     * }
     */
    public static FunctionDescriptor g_resource_ref$descriptor() {
        return g_resource_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GResource *g_resource_ref(GResource *resource)
     * }
     */
    public static MethodHandle g_resource_ref$handle() {
        return g_resource_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GResource *g_resource_ref(GResource *resource)
     * }
     */
    public static MemorySegment g_resource_ref(MemorySegment resource) {
        var mh$ = g_resource_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_ref", resource);
            }
            return (MemorySegment)mh$.invokeExact(resource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resource_unref(GResource *resource)
     * }
     */
    public static FunctionDescriptor g_resource_unref$descriptor() {
        return g_resource_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resource_unref(GResource *resource)
     * }
     */
    public static MethodHandle g_resource_unref$handle() {
        return g_resource_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resource_unref(GResource *resource)
     * }
     */
    public static void g_resource_unref(MemorySegment resource) {
        var mh$ = g_resource_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_unref", resource);
            }
            mh$.invokeExact(resource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_load {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_load"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GResource *g_resource_load(const gchar *filename, GError **error)
     * }
     */
    public static FunctionDescriptor g_resource_load$descriptor() {
        return g_resource_load.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GResource *g_resource_load(const gchar *filename, GError **error)
     * }
     */
    public static MethodHandle g_resource_load$handle() {
        return g_resource_load.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GResource *g_resource_load(const gchar *filename, GError **error)
     * }
     */
    public static MemorySegment g_resource_load(MemorySegment filename, MemorySegment error) {
        var mh$ = g_resource_load.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_load", filename, error);
            }
            return (MemorySegment)mh$.invokeExact(filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_open_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_open_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_resource_open_stream(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_resource_open_stream$descriptor() {
        return g_resource_open_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_resource_open_stream(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MethodHandle g_resource_open_stream$handle() {
        return g_resource_open_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_resource_open_stream(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MemorySegment g_resource_open_stream(MemorySegment resource, MemorySegment path, int lookup_flags, MemorySegment error) {
        var mh$ = g_resource_open_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_open_stream", resource, path, lookup_flags, error);
            }
            return (MemorySegment)mh$.invokeExact(resource, path, lookup_flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_lookup_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_lookup_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_resource_lookup_data(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_resource_lookup_data$descriptor() {
        return g_resource_lookup_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_resource_lookup_data(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MethodHandle g_resource_lookup_data$handle() {
        return g_resource_lookup_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_resource_lookup_data(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MemorySegment g_resource_lookup_data(MemorySegment resource, MemorySegment path, int lookup_flags, MemorySegment error) {
        var mh$ = g_resource_lookup_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_lookup_data", resource, path, lookup_flags, error);
            }
            return (MemorySegment)mh$.invokeExact(resource, path, lookup_flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_enumerate_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_enumerate_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **g_resource_enumerate_children(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_resource_enumerate_children$descriptor() {
        return g_resource_enumerate_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **g_resource_enumerate_children(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MethodHandle g_resource_enumerate_children$handle() {
        return g_resource_enumerate_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **g_resource_enumerate_children(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MemorySegment g_resource_enumerate_children(MemorySegment resource, MemorySegment path, int lookup_flags, MemorySegment error) {
        var mh$ = g_resource_enumerate_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_enumerate_children", resource, path, lookup_flags, error);
            }
            return (MemorySegment)mh$.invokeExact(resource, path, lookup_flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resource_get_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resource_get_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_resource_get_info(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_resource_get_info$descriptor() {
        return g_resource_get_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_resource_get_info(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error)
     * }
     */
    public static MethodHandle g_resource_get_info$handle() {
        return g_resource_get_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_resource_get_info(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error)
     * }
     */
    public static int g_resource_get_info(MemorySegment resource, MemorySegment path, int lookup_flags, MemorySegment size, MemorySegment flags, MemorySegment error) {
        var mh$ = g_resource_get_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resource_get_info", resource, path, lookup_flags, size, flags, error);
            }
            return (int)mh$.invokeExact(resource, path, lookup_flags, size, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resources_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resources_register"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resources_register(GResource *resource)
     * }
     */
    public static FunctionDescriptor g_resources_register$descriptor() {
        return g_resources_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resources_register(GResource *resource)
     * }
     */
    public static MethodHandle g_resources_register$handle() {
        return g_resources_register.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resources_register(GResource *resource)
     * }
     */
    public static void g_resources_register(MemorySegment resource) {
        var mh$ = g_resources_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resources_register", resource);
            }
            mh$.invokeExact(resource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resources_unregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resources_unregister"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_resources_unregister(GResource *resource)
     * }
     */
    public static FunctionDescriptor g_resources_unregister$descriptor() {
        return g_resources_unregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_resources_unregister(GResource *resource)
     * }
     */
    public static MethodHandle g_resources_unregister$handle() {
        return g_resources_unregister.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_resources_unregister(GResource *resource)
     * }
     */
    public static void g_resources_unregister(MemorySegment resource) {
        var mh$ = g_resources_unregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resources_unregister", resource);
            }
            mh$.invokeExact(resource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resources_open_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resources_open_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_resources_open_stream(const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_resources_open_stream$descriptor() {
        return g_resources_open_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_resources_open_stream(const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MethodHandle g_resources_open_stream$handle() {
        return g_resources_open_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_resources_open_stream(const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MemorySegment g_resources_open_stream(MemorySegment path, int lookup_flags, MemorySegment error) {
        var mh$ = g_resources_open_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resources_open_stream", path, lookup_flags, error);
            }
            return (MemorySegment)mh$.invokeExact(path, lookup_flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resources_lookup_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resources_lookup_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_resources_lookup_data(const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_resources_lookup_data$descriptor() {
        return g_resources_lookup_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_resources_lookup_data(const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MethodHandle g_resources_lookup_data$handle() {
        return g_resources_lookup_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_resources_lookup_data(const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MemorySegment g_resources_lookup_data(MemorySegment path, int lookup_flags, MemorySegment error) {
        var mh$ = g_resources_lookup_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resources_lookup_data", path, lookup_flags, error);
            }
            return (MemorySegment)mh$.invokeExact(path, lookup_flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resources_enumerate_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resources_enumerate_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **g_resources_enumerate_children(const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_resources_enumerate_children$descriptor() {
        return g_resources_enumerate_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **g_resources_enumerate_children(const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MethodHandle g_resources_enumerate_children$handle() {
        return g_resources_enumerate_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **g_resources_enumerate_children(const char *path, GResourceLookupFlags lookup_flags, GError **error)
     * }
     */
    public static MemorySegment g_resources_enumerate_children(MemorySegment path, int lookup_flags, MemorySegment error) {
        var mh$ = g_resources_enumerate_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resources_enumerate_children", path, lookup_flags, error);
            }
            return (MemorySegment)mh$.invokeExact(path, lookup_flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_resources_get_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_resources_get_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_resources_get_info(const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_resources_get_info$descriptor() {
        return g_resources_get_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_resources_get_info(const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error)
     * }
     */
    public static MethodHandle g_resources_get_info$handle() {
        return g_resources_get_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_resources_get_info(const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error)
     * }
     */
    public static int g_resources_get_info(MemorySegment path, int lookup_flags, MemorySegment size, MemorySegment flags, MemorySegment error) {
        var mh$ = g_resources_get_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_resources_get_info", path, lookup_flags, size, flags, error);
            }
            return (int)mh$.invokeExact(path, lookup_flags, size, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_resource_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_resource_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_resource_init(GStaticResource *static_resource)
     * }
     */
    public static FunctionDescriptor g_static_resource_init$descriptor() {
        return g_static_resource_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_resource_init(GStaticResource *static_resource)
     * }
     */
    public static MethodHandle g_static_resource_init$handle() {
        return g_static_resource_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_resource_init(GStaticResource *static_resource)
     * }
     */
    public static void g_static_resource_init(MemorySegment static_resource) {
        var mh$ = g_static_resource_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_resource_init", static_resource);
            }
            mh$.invokeExact(static_resource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_resource_fini {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_resource_fini"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_resource_fini(GStaticResource *static_resource)
     * }
     */
    public static FunctionDescriptor g_static_resource_fini$descriptor() {
        return g_static_resource_fini.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_resource_fini(GStaticResource *static_resource)
     * }
     */
    public static MethodHandle g_static_resource_fini$handle() {
        return g_static_resource_fini.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_resource_fini(GStaticResource *static_resource)
     * }
     */
    public static void g_static_resource_fini(MemorySegment static_resource) {
        var mh$ = g_static_resource_fini.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_resource_fini", static_resource);
            }
            mh$.invokeExact(static_resource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_resource_get_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_resource_get_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GResource *g_static_resource_get_resource(GStaticResource *static_resource)
     * }
     */
    public static FunctionDescriptor g_static_resource_get_resource$descriptor() {
        return g_static_resource_get_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GResource *g_static_resource_get_resource(GStaticResource *static_resource)
     * }
     */
    public static MethodHandle g_static_resource_get_resource$handle() {
        return g_static_resource_get_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GResource *g_static_resource_get_resource(GStaticResource *static_resource)
     * }
     */
    public static MemorySegment g_static_resource_get_resource(MemorySegment static_resource) {
        var mh$ = g_static_resource_get_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_resource_get_resource", static_resource);
            }
            return (MemorySegment)mh$.invokeExact(static_resource);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_seekable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_seekable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_seekable_get_type()
     * }
     */
    public static FunctionDescriptor g_seekable_get_type$descriptor() {
        return g_seekable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_seekable_get_type()
     * }
     */
    public static MethodHandle g_seekable_get_type$handle() {
        return g_seekable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_seekable_get_type()
     * }
     */
    public static long g_seekable_get_type() {
        var mh$ = g_seekable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_seekable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_seekable_tell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_seekable_tell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern goffset g_seekable_tell(GSeekable *seekable)
     * }
     */
    public static FunctionDescriptor g_seekable_tell$descriptor() {
        return g_seekable_tell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern goffset g_seekable_tell(GSeekable *seekable)
     * }
     */
    public static MethodHandle g_seekable_tell$handle() {
        return g_seekable_tell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern goffset g_seekable_tell(GSeekable *seekable)
     * }
     */
    public static long g_seekable_tell(MemorySegment seekable) {
        var mh$ = g_seekable_tell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_seekable_tell", seekable);
            }
            return (long)mh$.invokeExact(seekable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_seekable_can_seek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_seekable_can_seek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_seekable_can_seek(GSeekable *seekable)
     * }
     */
    public static FunctionDescriptor g_seekable_can_seek$descriptor() {
        return g_seekable_can_seek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_seekable_can_seek(GSeekable *seekable)
     * }
     */
    public static MethodHandle g_seekable_can_seek$handle() {
        return g_seekable_can_seek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_seekable_can_seek(GSeekable *seekable)
     * }
     */
    public static int g_seekable_can_seek(MemorySegment seekable) {
        var mh$ = g_seekable_can_seek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_seekable_can_seek", seekable);
            }
            return (int)mh$.invokeExact(seekable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_seekable_seek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_seekable_seek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_seekable_seek(GSeekable *seekable, goffset offset, GSeekType type, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_seekable_seek$descriptor() {
        return g_seekable_seek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_seekable_seek(GSeekable *seekable, goffset offset, GSeekType type, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_seekable_seek$handle() {
        return g_seekable_seek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_seekable_seek(GSeekable *seekable, goffset offset, GSeekType type, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_seekable_seek(MemorySegment seekable, long offset, int type, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_seekable_seek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_seekable_seek", seekable, offset, type, cancellable, error);
            }
            return (int)mh$.invokeExact(seekable, offset, type, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_seekable_can_truncate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_seekable_can_truncate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_seekable_can_truncate(GSeekable *seekable)
     * }
     */
    public static FunctionDescriptor g_seekable_can_truncate$descriptor() {
        return g_seekable_can_truncate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_seekable_can_truncate(GSeekable *seekable)
     * }
     */
    public static MethodHandle g_seekable_can_truncate$handle() {
        return g_seekable_can_truncate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_seekable_can_truncate(GSeekable *seekable)
     * }
     */
    public static int g_seekable_can_truncate(MemorySegment seekable) {
        var mh$ = g_seekable_can_truncate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_seekable_can_truncate", seekable);
            }
            return (int)mh$.invokeExact(seekable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_seekable_truncate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_seekable_truncate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_seekable_truncate(GSeekable *seekable, goffset offset, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_seekable_truncate$descriptor() {
        return g_seekable_truncate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_seekable_truncate(GSeekable *seekable, goffset offset, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_seekable_truncate$handle() {
        return g_seekable_truncate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_seekable_truncate(GSeekable *seekable, goffset offset, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_seekable_truncate(MemorySegment seekable, long offset, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_seekable_truncate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_seekable_truncate", seekable, offset, cancellable, error);
            }
            return (int)mh$.invokeExact(seekable, offset, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_source_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_source_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_settings_schema_source_get_type()
     * }
     */
    public static FunctionDescriptor g_settings_schema_source_get_type$descriptor() {
        return g_settings_schema_source_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_settings_schema_source_get_type()
     * }
     */
    public static MethodHandle g_settings_schema_source_get_type$handle() {
        return g_settings_schema_source_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_settings_schema_source_get_type()
     * }
     */
    public static long g_settings_schema_source_get_type() {
        var mh$ = g_settings_schema_source_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_source_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_source_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_source_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettingsSchemaSource *g_settings_schema_source_get_default()
     * }
     */
    public static FunctionDescriptor g_settings_schema_source_get_default$descriptor() {
        return g_settings_schema_source_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettingsSchemaSource *g_settings_schema_source_get_default()
     * }
     */
    public static MethodHandle g_settings_schema_source_get_default$handle() {
        return g_settings_schema_source_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettingsSchemaSource *g_settings_schema_source_get_default()
     * }
     */
    public static MemorySegment g_settings_schema_source_get_default() {
        var mh$ = g_settings_schema_source_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_source_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_source_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_source_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettingsSchemaSource *g_settings_schema_source_ref(GSettingsSchemaSource *source)
     * }
     */
    public static FunctionDescriptor g_settings_schema_source_ref$descriptor() {
        return g_settings_schema_source_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettingsSchemaSource *g_settings_schema_source_ref(GSettingsSchemaSource *source)
     * }
     */
    public static MethodHandle g_settings_schema_source_ref$handle() {
        return g_settings_schema_source_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettingsSchemaSource *g_settings_schema_source_ref(GSettingsSchemaSource *source)
     * }
     */
    public static MemorySegment g_settings_schema_source_ref(MemorySegment source) {
        var mh$ = g_settings_schema_source_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_source_ref", source);
            }
            return (MemorySegment)mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_source_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_source_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_schema_source_unref(GSettingsSchemaSource *source)
     * }
     */
    public static FunctionDescriptor g_settings_schema_source_unref$descriptor() {
        return g_settings_schema_source_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_schema_source_unref(GSettingsSchemaSource *source)
     * }
     */
    public static MethodHandle g_settings_schema_source_unref$handle() {
        return g_settings_schema_source_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_schema_source_unref(GSettingsSchemaSource *source)
     * }
     */
    public static void g_settings_schema_source_unref(MemorySegment source) {
        var mh$ = g_settings_schema_source_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_source_unref", source);
            }
            mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_source_new_from_directory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_source_new_from_directory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettingsSchemaSource *g_settings_schema_source_new_from_directory(const gchar *directory, GSettingsSchemaSource *parent, gboolean trusted, GError **error)
     * }
     */
    public static FunctionDescriptor g_settings_schema_source_new_from_directory$descriptor() {
        return g_settings_schema_source_new_from_directory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettingsSchemaSource *g_settings_schema_source_new_from_directory(const gchar *directory, GSettingsSchemaSource *parent, gboolean trusted, GError **error)
     * }
     */
    public static MethodHandle g_settings_schema_source_new_from_directory$handle() {
        return g_settings_schema_source_new_from_directory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettingsSchemaSource *g_settings_schema_source_new_from_directory(const gchar *directory, GSettingsSchemaSource *parent, gboolean trusted, GError **error)
     * }
     */
    public static MemorySegment g_settings_schema_source_new_from_directory(MemorySegment directory, MemorySegment parent, int trusted, MemorySegment error) {
        var mh$ = g_settings_schema_source_new_from_directory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_source_new_from_directory", directory, parent, trusted, error);
            }
            return (MemorySegment)mh$.invokeExact(directory, parent, trusted, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_source_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_source_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettingsSchema *g_settings_schema_source_lookup(GSettingsSchemaSource *source, const gchar *schema_id, gboolean recursive)
     * }
     */
    public static FunctionDescriptor g_settings_schema_source_lookup$descriptor() {
        return g_settings_schema_source_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettingsSchema *g_settings_schema_source_lookup(GSettingsSchemaSource *source, const gchar *schema_id, gboolean recursive)
     * }
     */
    public static MethodHandle g_settings_schema_source_lookup$handle() {
        return g_settings_schema_source_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettingsSchema *g_settings_schema_source_lookup(GSettingsSchemaSource *source, const gchar *schema_id, gboolean recursive)
     * }
     */
    public static MemorySegment g_settings_schema_source_lookup(MemorySegment source, MemorySegment schema_id, int recursive) {
        var mh$ = g_settings_schema_source_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_source_lookup", source, schema_id, recursive);
            }
            return (MemorySegment)mh$.invokeExact(source, schema_id, recursive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_source_list_schemas {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_source_list_schemas"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_schema_source_list_schemas(GSettingsSchemaSource *source, gboolean recursive, gchar ***non_relocatable, gchar ***relocatable)
     * }
     */
    public static FunctionDescriptor g_settings_schema_source_list_schemas$descriptor() {
        return g_settings_schema_source_list_schemas.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_schema_source_list_schemas(GSettingsSchemaSource *source, gboolean recursive, gchar ***non_relocatable, gchar ***relocatable)
     * }
     */
    public static MethodHandle g_settings_schema_source_list_schemas$handle() {
        return g_settings_schema_source_list_schemas.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_schema_source_list_schemas(GSettingsSchemaSource *source, gboolean recursive, gchar ***non_relocatable, gchar ***relocatable)
     * }
     */
    public static void g_settings_schema_source_list_schemas(MemorySegment source, int recursive, MemorySegment non_relocatable, MemorySegment relocatable) {
        var mh$ = g_settings_schema_source_list_schemas.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_source_list_schemas", source, recursive, non_relocatable, relocatable);
            }
            mh$.invokeExact(source, recursive, non_relocatable, relocatable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_settings_schema_get_type()
     * }
     */
    public static FunctionDescriptor g_settings_schema_get_type$descriptor() {
        return g_settings_schema_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_settings_schema_get_type()
     * }
     */
    public static MethodHandle g_settings_schema_get_type$handle() {
        return g_settings_schema_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_settings_schema_get_type()
     * }
     */
    public static long g_settings_schema_get_type() {
        var mh$ = g_settings_schema_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettingsSchema *g_settings_schema_ref(GSettingsSchema *schema)
     * }
     */
    public static FunctionDescriptor g_settings_schema_ref$descriptor() {
        return g_settings_schema_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettingsSchema *g_settings_schema_ref(GSettingsSchema *schema)
     * }
     */
    public static MethodHandle g_settings_schema_ref$handle() {
        return g_settings_schema_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettingsSchema *g_settings_schema_ref(GSettingsSchema *schema)
     * }
     */
    public static MemorySegment g_settings_schema_ref(MemorySegment schema) {
        var mh$ = g_settings_schema_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_ref", schema);
            }
            return (MemorySegment)mh$.invokeExact(schema);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_schema_unref(GSettingsSchema *schema)
     * }
     */
    public static FunctionDescriptor g_settings_schema_unref$descriptor() {
        return g_settings_schema_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_schema_unref(GSettingsSchema *schema)
     * }
     */
    public static MethodHandle g_settings_schema_unref$handle() {
        return g_settings_schema_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_schema_unref(GSettingsSchema *schema)
     * }
     */
    public static void g_settings_schema_unref(MemorySegment schema) {
        var mh$ = g_settings_schema_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_unref", schema);
            }
            mh$.invokeExact(schema);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_get_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_get_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_get_id(GSettingsSchema *schema)
     * }
     */
    public static FunctionDescriptor g_settings_schema_get_id$descriptor() {
        return g_settings_schema_get_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_get_id(GSettingsSchema *schema)
     * }
     */
    public static MethodHandle g_settings_schema_get_id$handle() {
        return g_settings_schema_get_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_get_id(GSettingsSchema *schema)
     * }
     */
    public static MemorySegment g_settings_schema_get_id(MemorySegment schema) {
        var mh$ = g_settings_schema_get_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_get_id", schema);
            }
            return (MemorySegment)mh$.invokeExact(schema);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_get_path(GSettingsSchema *schema)
     * }
     */
    public static FunctionDescriptor g_settings_schema_get_path$descriptor() {
        return g_settings_schema_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_get_path(GSettingsSchema *schema)
     * }
     */
    public static MethodHandle g_settings_schema_get_path$handle() {
        return g_settings_schema_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_get_path(GSettingsSchema *schema)
     * }
     */
    public static MemorySegment g_settings_schema_get_path(MemorySegment schema) {
        var mh$ = g_settings_schema_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_get_path", schema);
            }
            return (MemorySegment)mh$.invokeExact(schema);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_get_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_get_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettingsSchemaKey *g_settings_schema_get_key(GSettingsSchema *schema, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_settings_schema_get_key$descriptor() {
        return g_settings_schema_get_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettingsSchemaKey *g_settings_schema_get_key(GSettingsSchema *schema, const gchar *name)
     * }
     */
    public static MethodHandle g_settings_schema_get_key$handle() {
        return g_settings_schema_get_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettingsSchemaKey *g_settings_schema_get_key(GSettingsSchema *schema, const gchar *name)
     * }
     */
    public static MemorySegment g_settings_schema_get_key(MemorySegment schema, MemorySegment name) {
        var mh$ = g_settings_schema_get_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_get_key", schema, name);
            }
            return (MemorySegment)mh$.invokeExact(schema, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_has_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_has_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_schema_has_key(GSettingsSchema *schema, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_settings_schema_has_key$descriptor() {
        return g_settings_schema_has_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_schema_has_key(GSettingsSchema *schema, const gchar *name)
     * }
     */
    public static MethodHandle g_settings_schema_has_key$handle() {
        return g_settings_schema_has_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_schema_has_key(GSettingsSchema *schema, const gchar *name)
     * }
     */
    public static int g_settings_schema_has_key(MemorySegment schema, MemorySegment name) {
        var mh$ = g_settings_schema_has_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_has_key", schema, name);
            }
            return (int)mh$.invokeExact(schema, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_list_keys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_list_keys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_settings_schema_list_keys(GSettingsSchema *schema)
     * }
     */
    public static FunctionDescriptor g_settings_schema_list_keys$descriptor() {
        return g_settings_schema_list_keys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_settings_schema_list_keys(GSettingsSchema *schema)
     * }
     */
    public static MethodHandle g_settings_schema_list_keys$handle() {
        return g_settings_schema_list_keys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_settings_schema_list_keys(GSettingsSchema *schema)
     * }
     */
    public static MemorySegment g_settings_schema_list_keys(MemorySegment schema) {
        var mh$ = g_settings_schema_list_keys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_list_keys", schema);
            }
            return (MemorySegment)mh$.invokeExact(schema);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_list_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_list_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_settings_schema_list_children(GSettingsSchema *schema)
     * }
     */
    public static FunctionDescriptor g_settings_schema_list_children$descriptor() {
        return g_settings_schema_list_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_settings_schema_list_children(GSettingsSchema *schema)
     * }
     */
    public static MethodHandle g_settings_schema_list_children$handle() {
        return g_settings_schema_list_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_settings_schema_list_children(GSettingsSchema *schema)
     * }
     */
    public static MemorySegment g_settings_schema_list_children(MemorySegment schema) {
        var mh$ = g_settings_schema_list_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_list_children", schema);
            }
            return (MemorySegment)mh$.invokeExact(schema);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_key_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_key_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_settings_schema_key_get_type()
     * }
     */
    public static FunctionDescriptor g_settings_schema_key_get_type$descriptor() {
        return g_settings_schema_key_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_settings_schema_key_get_type()
     * }
     */
    public static MethodHandle g_settings_schema_key_get_type$handle() {
        return g_settings_schema_key_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_settings_schema_key_get_type()
     * }
     */
    public static long g_settings_schema_key_get_type() {
        var mh$ = g_settings_schema_key_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_key_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_key_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_key_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettingsSchemaKey *g_settings_schema_key_ref(GSettingsSchemaKey *key)
     * }
     */
    public static FunctionDescriptor g_settings_schema_key_ref$descriptor() {
        return g_settings_schema_key_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettingsSchemaKey *g_settings_schema_key_ref(GSettingsSchemaKey *key)
     * }
     */
    public static MethodHandle g_settings_schema_key_ref$handle() {
        return g_settings_schema_key_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettingsSchemaKey *g_settings_schema_key_ref(GSettingsSchemaKey *key)
     * }
     */
    public static MemorySegment g_settings_schema_key_ref(MemorySegment key) {
        var mh$ = g_settings_schema_key_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_key_ref", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_key_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_key_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_schema_key_unref(GSettingsSchemaKey *key)
     * }
     */
    public static FunctionDescriptor g_settings_schema_key_unref$descriptor() {
        return g_settings_schema_key_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_schema_key_unref(GSettingsSchemaKey *key)
     * }
     */
    public static MethodHandle g_settings_schema_key_unref$handle() {
        return g_settings_schema_key_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_schema_key_unref(GSettingsSchemaKey *key)
     * }
     */
    public static void g_settings_schema_key_unref(MemorySegment key) {
        var mh$ = g_settings_schema_key_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_key_unref", key);
            }
            mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_key_get_value_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_key_get_value_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GVariantType *g_settings_schema_key_get_value_type(GSettingsSchemaKey *key)
     * }
     */
    public static FunctionDescriptor g_settings_schema_key_get_value_type$descriptor() {
        return g_settings_schema_key_get_value_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GVariantType *g_settings_schema_key_get_value_type(GSettingsSchemaKey *key)
     * }
     */
    public static MethodHandle g_settings_schema_key_get_value_type$handle() {
        return g_settings_schema_key_get_value_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GVariantType *g_settings_schema_key_get_value_type(GSettingsSchemaKey *key)
     * }
     */
    public static MemorySegment g_settings_schema_key_get_value_type(MemorySegment key) {
        var mh$ = g_settings_schema_key_get_value_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_key_get_value_type", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_key_get_default_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_key_get_default_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_schema_key_get_default_value(GSettingsSchemaKey *key)
     * }
     */
    public static FunctionDescriptor g_settings_schema_key_get_default_value$descriptor() {
        return g_settings_schema_key_get_default_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_schema_key_get_default_value(GSettingsSchemaKey *key)
     * }
     */
    public static MethodHandle g_settings_schema_key_get_default_value$handle() {
        return g_settings_schema_key_get_default_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_settings_schema_key_get_default_value(GSettingsSchemaKey *key)
     * }
     */
    public static MemorySegment g_settings_schema_key_get_default_value(MemorySegment key) {
        var mh$ = g_settings_schema_key_get_default_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_key_get_default_value", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_key_get_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_key_get_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_schema_key_get_range(GSettingsSchemaKey *key)
     * }
     */
    public static FunctionDescriptor g_settings_schema_key_get_range$descriptor() {
        return g_settings_schema_key_get_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_schema_key_get_range(GSettingsSchemaKey *key)
     * }
     */
    public static MethodHandle g_settings_schema_key_get_range$handle() {
        return g_settings_schema_key_get_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_settings_schema_key_get_range(GSettingsSchemaKey *key)
     * }
     */
    public static MemorySegment g_settings_schema_key_get_range(MemorySegment key) {
        var mh$ = g_settings_schema_key_get_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_key_get_range", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_key_range_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_key_range_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_schema_key_range_check(GSettingsSchemaKey *key, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_settings_schema_key_range_check$descriptor() {
        return g_settings_schema_key_range_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_schema_key_range_check(GSettingsSchemaKey *key, GVariant *value)
     * }
     */
    public static MethodHandle g_settings_schema_key_range_check$handle() {
        return g_settings_schema_key_range_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_schema_key_range_check(GSettingsSchemaKey *key, GVariant *value)
     * }
     */
    public static int g_settings_schema_key_range_check(MemorySegment key, MemorySegment value) {
        var mh$ = g_settings_schema_key_range_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_key_range_check", key, value);
            }
            return (int)mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_key_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_key_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_key_get_name(GSettingsSchemaKey *key)
     * }
     */
    public static FunctionDescriptor g_settings_schema_key_get_name$descriptor() {
        return g_settings_schema_key_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_key_get_name(GSettingsSchemaKey *key)
     * }
     */
    public static MethodHandle g_settings_schema_key_get_name$handle() {
        return g_settings_schema_key_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_key_get_name(GSettingsSchemaKey *key)
     * }
     */
    public static MemorySegment g_settings_schema_key_get_name(MemorySegment key) {
        var mh$ = g_settings_schema_key_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_key_get_name", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_key_get_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_key_get_summary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_key_get_summary(GSettingsSchemaKey *key)
     * }
     */
    public static FunctionDescriptor g_settings_schema_key_get_summary$descriptor() {
        return g_settings_schema_key_get_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_key_get_summary(GSettingsSchemaKey *key)
     * }
     */
    public static MethodHandle g_settings_schema_key_get_summary$handle() {
        return g_settings_schema_key_get_summary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_key_get_summary(GSettingsSchemaKey *key)
     * }
     */
    public static MemorySegment g_settings_schema_key_get_summary(MemorySegment key) {
        var mh$ = g_settings_schema_key_get_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_key_get_summary", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_schema_key_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_schema_key_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_key_get_description(GSettingsSchemaKey *key)
     * }
     */
    public static FunctionDescriptor g_settings_schema_key_get_description$descriptor() {
        return g_settings_schema_key_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_key_get_description(GSettingsSchemaKey *key)
     * }
     */
    public static MethodHandle g_settings_schema_key_get_description$handle() {
        return g_settings_schema_key_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_settings_schema_key_get_description(GSettingsSchemaKey *key)
     * }
     */
    public static MemorySegment g_settings_schema_key_get_description(MemorySegment key) {
        var mh$ = g_settings_schema_key_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_schema_key_get_description", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_settings_get_type()
     * }
     */
    public static FunctionDescriptor g_settings_get_type$descriptor() {
        return g_settings_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_settings_get_type()
     * }
     */
    public static MethodHandle g_settings_get_type$handle() {
        return g_settings_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_settings_get_type()
     * }
     */
    public static long g_settings_get_type() {
        var mh$ = g_settings_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_list_schemas {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_list_schemas"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *g_settings_list_schemas()
     * }
     */
    public static FunctionDescriptor g_settings_list_schemas$descriptor() {
        return g_settings_list_schemas.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *g_settings_list_schemas()
     * }
     */
    public static MethodHandle g_settings_list_schemas$handle() {
        return g_settings_list_schemas.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *g_settings_list_schemas()
     * }
     */
    public static MemorySegment g_settings_list_schemas() {
        var mh$ = g_settings_list_schemas.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_list_schemas");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_list_relocatable_schemas {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_list_relocatable_schemas"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *g_settings_list_relocatable_schemas()
     * }
     */
    public static FunctionDescriptor g_settings_list_relocatable_schemas$descriptor() {
        return g_settings_list_relocatable_schemas.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *g_settings_list_relocatable_schemas()
     * }
     */
    public static MethodHandle g_settings_list_relocatable_schemas$handle() {
        return g_settings_list_relocatable_schemas.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *g_settings_list_relocatable_schemas()
     * }
     */
    public static MemorySegment g_settings_list_relocatable_schemas() {
        var mh$ = g_settings_list_relocatable_schemas.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_list_relocatable_schemas");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_new(const gchar *schema_id)
     * }
     */
    public static FunctionDescriptor g_settings_new$descriptor() {
        return g_settings_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_new(const gchar *schema_id)
     * }
     */
    public static MethodHandle g_settings_new$handle() {
        return g_settings_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettings *g_settings_new(const gchar *schema_id)
     * }
     */
    public static MemorySegment g_settings_new(MemorySegment schema_id) {
        var mh$ = g_settings_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_new", schema_id);
            }
            return (MemorySegment)mh$.invokeExact(schema_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_new_with_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_new_with_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_with_path(const gchar *schema_id, const gchar *path)
     * }
     */
    public static FunctionDescriptor g_settings_new_with_path$descriptor() {
        return g_settings_new_with_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_with_path(const gchar *schema_id, const gchar *path)
     * }
     */
    public static MethodHandle g_settings_new_with_path$handle() {
        return g_settings_new_with_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_with_path(const gchar *schema_id, const gchar *path)
     * }
     */
    public static MemorySegment g_settings_new_with_path(MemorySegment schema_id, MemorySegment path) {
        var mh$ = g_settings_new_with_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_new_with_path", schema_id, path);
            }
            return (MemorySegment)mh$.invokeExact(schema_id, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_new_with_backend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_new_with_backend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_with_backend(const gchar *schema_id, GSettingsBackend *backend)
     * }
     */
    public static FunctionDescriptor g_settings_new_with_backend$descriptor() {
        return g_settings_new_with_backend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_with_backend(const gchar *schema_id, GSettingsBackend *backend)
     * }
     */
    public static MethodHandle g_settings_new_with_backend$handle() {
        return g_settings_new_with_backend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_with_backend(const gchar *schema_id, GSettingsBackend *backend)
     * }
     */
    public static MemorySegment g_settings_new_with_backend(MemorySegment schema_id, MemorySegment backend) {
        var mh$ = g_settings_new_with_backend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_new_with_backend", schema_id, backend);
            }
            return (MemorySegment)mh$.invokeExact(schema_id, backend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_new_with_backend_and_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_new_with_backend_and_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_with_backend_and_path(const gchar *schema_id, GSettingsBackend *backend, const gchar *path)
     * }
     */
    public static FunctionDescriptor g_settings_new_with_backend_and_path$descriptor() {
        return g_settings_new_with_backend_and_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_with_backend_and_path(const gchar *schema_id, GSettingsBackend *backend, const gchar *path)
     * }
     */
    public static MethodHandle g_settings_new_with_backend_and_path$handle() {
        return g_settings_new_with_backend_and_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_with_backend_and_path(const gchar *schema_id, GSettingsBackend *backend, const gchar *path)
     * }
     */
    public static MemorySegment g_settings_new_with_backend_and_path(MemorySegment schema_id, MemorySegment backend, MemorySegment path) {
        var mh$ = g_settings_new_with_backend_and_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_new_with_backend_and_path", schema_id, backend, path);
            }
            return (MemorySegment)mh$.invokeExact(schema_id, backend, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_new_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_new_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_full(GSettingsSchema *schema, GSettingsBackend *backend, const gchar *path)
     * }
     */
    public static FunctionDescriptor g_settings_new_full$descriptor() {
        return g_settings_new_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_full(GSettingsSchema *schema, GSettingsBackend *backend, const gchar *path)
     * }
     */
    public static MethodHandle g_settings_new_full$handle() {
        return g_settings_new_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettings *g_settings_new_full(GSettingsSchema *schema, GSettingsBackend *backend, const gchar *path)
     * }
     */
    public static MemorySegment g_settings_new_full(MemorySegment schema, MemorySegment backend, MemorySegment path) {
        var mh$ = g_settings_new_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_new_full", schema, backend, path);
            }
            return (MemorySegment)mh$.invokeExact(schema, backend, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_list_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_list_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_settings_list_children(GSettings *settings)
     * }
     */
    public static FunctionDescriptor g_settings_list_children$descriptor() {
        return g_settings_list_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_settings_list_children(GSettings *settings)
     * }
     */
    public static MethodHandle g_settings_list_children$handle() {
        return g_settings_list_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_settings_list_children(GSettings *settings)
     * }
     */
    public static MemorySegment g_settings_list_children(MemorySegment settings) {
        var mh$ = g_settings_list_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_list_children", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_list_keys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_list_keys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_settings_list_keys(GSettings *settings)
     * }
     */
    public static FunctionDescriptor g_settings_list_keys$descriptor() {
        return g_settings_list_keys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_settings_list_keys(GSettings *settings)
     * }
     */
    public static MethodHandle g_settings_list_keys$handle() {
        return g_settings_list_keys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_settings_list_keys(GSettings *settings)
     * }
     */
    public static MemorySegment g_settings_list_keys(MemorySegment settings) {
        var mh$ = g_settings_list_keys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_list_keys", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_range(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_range$descriptor() {
        return g_settings_get_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_range(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_range$handle() {
        return g_settings_get_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_range(GSettings *settings, const gchar *key)
     * }
     */
    public static MemorySegment g_settings_get_range(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_range", settings, key);
            }
            return (MemorySegment)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_range_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_range_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_range_check(GSettings *settings, const gchar *key, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_settings_range_check$descriptor() {
        return g_settings_range_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_range_check(GSettings *settings, const gchar *key, GVariant *value)
     * }
     */
    public static MethodHandle g_settings_range_check$handle() {
        return g_settings_range_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_range_check(GSettings *settings, const gchar *key, GVariant *value)
     * }
     */
    public static int g_settings_range_check(MemorySegment settings, MemorySegment key, MemorySegment value) {
        var mh$ = g_settings_range_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_range_check", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_value(GSettings *settings, const gchar *key, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_settings_set_value$descriptor() {
        return g_settings_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_value(GSettings *settings, const gchar *key, GVariant *value)
     * }
     */
    public static MethodHandle g_settings_set_value$handle() {
        return g_settings_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_value(GSettings *settings, const gchar *key, GVariant *value)
     * }
     */
    public static int g_settings_set_value(MemorySegment settings, MemorySegment key, MemorySegment value) {
        var mh$ = g_settings_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_value", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_value(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_value$descriptor() {
        return g_settings_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_value(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_value$handle() {
        return g_settings_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_value(GSettings *settings, const gchar *key)
     * }
     */
    public static MemorySegment g_settings_get_value(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_value", settings, key);
            }
            return (MemorySegment)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_user_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_user_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_user_value(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_user_value$descriptor() {
        return g_settings_get_user_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_user_value(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_user_value$handle() {
        return g_settings_get_user_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_user_value(GSettings *settings, const gchar *key)
     * }
     */
    public static MemorySegment g_settings_get_user_value(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_user_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_user_value", settings, key);
            }
            return (MemorySegment)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_default_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_default_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_default_value(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_default_value$descriptor() {
        return g_settings_get_default_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_default_value(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_default_value$handle() {
        return g_settings_get_default_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_settings_get_default_value(GSettings *settings, const gchar *key)
     * }
     */
    public static MemorySegment g_settings_get_default_value(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_default_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_default_value", settings, key);
            }
            return (MemorySegment)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set(GSettings *settings, const gchar *key, const gchar *format, ...)
     * }
     */
    public static class g_settings_set {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_settings_set");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_settings_set(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean g_settings_set(GSettings *settings, const gchar *key, const gchar *format, ...)
         * }
         */
        public static g_settings_set makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_settings_set(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment settings, MemorySegment key, MemorySegment format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_settings_set", settings, key, format, x3);
                }
                return (int)spreader.invokeExact(settings, key, format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_settings_get(GSettings *settings, const gchar *key, const gchar *format, ...)
     * }
     */
    public static class g_settings_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_settings_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_settings_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_settings_get(GSettings *settings, const gchar *key, const gchar *format, ...)
         * }
         */
        public static g_settings_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_settings_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment settings, MemorySegment key, MemorySegment format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_settings_get", settings, key, format, x3);
                }
                spreader.invokeExact(settings, key, format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_settings_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_reset(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_reset$descriptor() {
        return g_settings_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_reset(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_reset$handle() {
        return g_settings_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_reset(GSettings *settings, const gchar *key)
     * }
     */
    public static void g_settings_reset(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_reset", settings, key);
            }
            mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_settings_get_int(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_int$descriptor() {
        return g_settings_get_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_settings_get_int(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_int$handle() {
        return g_settings_get_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_settings_get_int(GSettings *settings, const gchar *key)
     * }
     */
    public static int g_settings_get_int(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_int", settings, key);
            }
            return (int)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_int(GSettings *settings, const gchar *key, gint value)
     * }
     */
    public static FunctionDescriptor g_settings_set_int$descriptor() {
        return g_settings_set_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_int(GSettings *settings, const gchar *key, gint value)
     * }
     */
    public static MethodHandle g_settings_set_int$handle() {
        return g_settings_set_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_int(GSettings *settings, const gchar *key, gint value)
     * }
     */
    public static int g_settings_set_int(MemorySegment settings, MemorySegment key, int value) {
        var mh$ = g_settings_set_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_int", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_settings_get_int64(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_int64$descriptor() {
        return g_settings_get_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_settings_get_int64(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_int64$handle() {
        return g_settings_get_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_settings_get_int64(GSettings *settings, const gchar *key)
     * }
     */
    public static long g_settings_get_int64(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_int64", settings, key);
            }
            return (long)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_int64(GSettings *settings, const gchar *key, gint64 value)
     * }
     */
    public static FunctionDescriptor g_settings_set_int64$descriptor() {
        return g_settings_set_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_int64(GSettings *settings, const gchar *key, gint64 value)
     * }
     */
    public static MethodHandle g_settings_set_int64$handle() {
        return g_settings_set_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_int64(GSettings *settings, const gchar *key, gint64 value)
     * }
     */
    public static int g_settings_set_int64(MemorySegment settings, MemorySegment key, long value) {
        var mh$ = g_settings_set_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_int64", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_uint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_uint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_settings_get_uint(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_uint$descriptor() {
        return g_settings_get_uint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_settings_get_uint(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_uint$handle() {
        return g_settings_get_uint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_settings_get_uint(GSettings *settings, const gchar *key)
     * }
     */
    public static int g_settings_get_uint(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_uint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_uint", settings, key);
            }
            return (int)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_uint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_uint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_uint(GSettings *settings, const gchar *key, guint value)
     * }
     */
    public static FunctionDescriptor g_settings_set_uint$descriptor() {
        return g_settings_set_uint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_uint(GSettings *settings, const gchar *key, guint value)
     * }
     */
    public static MethodHandle g_settings_set_uint$handle() {
        return g_settings_set_uint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_uint(GSettings *settings, const gchar *key, guint value)
     * }
     */
    public static int g_settings_set_uint(MemorySegment settings, MemorySegment key, int value) {
        var mh$ = g_settings_set_uint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_uint", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 g_settings_get_uint64(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_uint64$descriptor() {
        return g_settings_get_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 g_settings_get_uint64(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_uint64$handle() {
        return g_settings_get_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint64 g_settings_get_uint64(GSettings *settings, const gchar *key)
     * }
     */
    public static long g_settings_get_uint64(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_uint64", settings, key);
            }
            return (long)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_uint64(GSettings *settings, const gchar *key, guint64 value)
     * }
     */
    public static FunctionDescriptor g_settings_set_uint64$descriptor() {
        return g_settings_set_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_uint64(GSettings *settings, const gchar *key, guint64 value)
     * }
     */
    public static MethodHandle g_settings_set_uint64$handle() {
        return g_settings_set_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_uint64(GSettings *settings, const gchar *key, guint64 value)
     * }
     */
    public static int g_settings_set_uint64(MemorySegment settings, MemorySegment key, long value) {
        var mh$ = g_settings_set_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_uint64", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_settings_get_string(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_string$descriptor() {
        return g_settings_get_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_settings_get_string(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_string$handle() {
        return g_settings_get_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_settings_get_string(GSettings *settings, const gchar *key)
     * }
     */
    public static MemorySegment g_settings_get_string(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_string", settings, key);
            }
            return (MemorySegment)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_string(GSettings *settings, const gchar *key, const gchar *value)
     * }
     */
    public static FunctionDescriptor g_settings_set_string$descriptor() {
        return g_settings_set_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_string(GSettings *settings, const gchar *key, const gchar *value)
     * }
     */
    public static MethodHandle g_settings_set_string$handle() {
        return g_settings_set_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_string(GSettings *settings, const gchar *key, const gchar *value)
     * }
     */
    public static int g_settings_set_string(MemorySegment settings, MemorySegment key, MemorySegment value) {
        var mh$ = g_settings_set_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_string", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_get_boolean(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_boolean$descriptor() {
        return g_settings_get_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_get_boolean(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_boolean$handle() {
        return g_settings_get_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_get_boolean(GSettings *settings, const gchar *key)
     * }
     */
    public static int g_settings_get_boolean(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_boolean", settings, key);
            }
            return (int)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_boolean(GSettings *settings, const gchar *key, gboolean value)
     * }
     */
    public static FunctionDescriptor g_settings_set_boolean$descriptor() {
        return g_settings_set_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_boolean(GSettings *settings, const gchar *key, gboolean value)
     * }
     */
    public static MethodHandle g_settings_set_boolean$handle() {
        return g_settings_set_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_boolean(GSettings *settings, const gchar *key, gboolean value)
     * }
     */
    public static int g_settings_set_boolean(MemorySegment settings, MemorySegment key, int value) {
        var mh$ = g_settings_set_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_boolean", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_settings_get_double(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_double$descriptor() {
        return g_settings_get_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_settings_get_double(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_double$handle() {
        return g_settings_get_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_settings_get_double(GSettings *settings, const gchar *key)
     * }
     */
    public static double g_settings_get_double(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_double", settings, key);
            }
            return (double)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_double(GSettings *settings, const gchar *key, gdouble value)
     * }
     */
    public static FunctionDescriptor g_settings_set_double$descriptor() {
        return g_settings_set_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_double(GSettings *settings, const gchar *key, gdouble value)
     * }
     */
    public static MethodHandle g_settings_set_double$handle() {
        return g_settings_set_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_double(GSettings *settings, const gchar *key, gdouble value)
     * }
     */
    public static int g_settings_set_double(MemorySegment settings, MemorySegment key, double value) {
        var mh$ = g_settings_set_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_double", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_strv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_strv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_settings_get_strv(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_strv$descriptor() {
        return g_settings_get_strv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_settings_get_strv(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_strv$handle() {
        return g_settings_get_strv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_settings_get_strv(GSettings *settings, const gchar *key)
     * }
     */
    public static MemorySegment g_settings_get_strv(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_strv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_strv", settings, key);
            }
            return (MemorySegment)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_strv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_strv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_strv(GSettings *settings, const gchar *key, const gchar *const *value)
     * }
     */
    public static FunctionDescriptor g_settings_set_strv$descriptor() {
        return g_settings_set_strv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_strv(GSettings *settings, const gchar *key, const gchar *const *value)
     * }
     */
    public static MethodHandle g_settings_set_strv$handle() {
        return g_settings_set_strv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_strv(GSettings *settings, const gchar *key, const gchar *const *value)
     * }
     */
    public static int g_settings_set_strv(MemorySegment settings, MemorySegment key, MemorySegment value) {
        var mh$ = g_settings_set_strv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_strv", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_enum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_settings_get_enum(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_enum$descriptor() {
        return g_settings_get_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_settings_get_enum(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_enum$handle() {
        return g_settings_get_enum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_settings_get_enum(GSettings *settings, const gchar *key)
     * }
     */
    public static int g_settings_get_enum(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_enum", settings, key);
            }
            return (int)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_enum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_enum(GSettings *settings, const gchar *key, gint value)
     * }
     */
    public static FunctionDescriptor g_settings_set_enum$descriptor() {
        return g_settings_set_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_enum(GSettings *settings, const gchar *key, gint value)
     * }
     */
    public static MethodHandle g_settings_set_enum$handle() {
        return g_settings_set_enum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_enum(GSettings *settings, const gchar *key, gint value)
     * }
     */
    public static int g_settings_set_enum(MemorySegment settings, MemorySegment key, int value) {
        var mh$ = g_settings_set_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_enum", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_settings_get_flags(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_get_flags$descriptor() {
        return g_settings_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_settings_get_flags(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_get_flags$handle() {
        return g_settings_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_settings_get_flags(GSettings *settings, const gchar *key)
     * }
     */
    public static int g_settings_get_flags(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_flags", settings, key);
            }
            return (int)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_flags(GSettings *settings, const gchar *key, guint value)
     * }
     */
    public static FunctionDescriptor g_settings_set_flags$descriptor() {
        return g_settings_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_set_flags(GSettings *settings, const gchar *key, guint value)
     * }
     */
    public static MethodHandle g_settings_set_flags$handle() {
        return g_settings_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_set_flags(GSettings *settings, const gchar *key, guint value)
     * }
     */
    public static int g_settings_set_flags(MemorySegment settings, MemorySegment key, int value) {
        var mh$ = g_settings_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_set_flags", settings, key, value);
            }
            return (int)mh$.invokeExact(settings, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_get_child(GSettings *settings, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_settings_get_child$descriptor() {
        return g_settings_get_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSettings *g_settings_get_child(GSettings *settings, const gchar *name)
     * }
     */
    public static MethodHandle g_settings_get_child$handle() {
        return g_settings_get_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSettings *g_settings_get_child(GSettings *settings, const gchar *name)
     * }
     */
    public static MemorySegment g_settings_get_child(MemorySegment settings, MemorySegment name) {
        var mh$ = g_settings_get_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_child", settings, name);
            }
            return (MemorySegment)mh$.invokeExact(settings, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_is_writable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_is_writable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_is_writable(GSettings *settings, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_settings_is_writable$descriptor() {
        return g_settings_is_writable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_is_writable(GSettings *settings, const gchar *name)
     * }
     */
    public static MethodHandle g_settings_is_writable$handle() {
        return g_settings_is_writable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_is_writable(GSettings *settings, const gchar *name)
     * }
     */
    public static int g_settings_is_writable(MemorySegment settings, MemorySegment name) {
        var mh$ = g_settings_is_writable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_is_writable", settings, name);
            }
            return (int)mh$.invokeExact(settings, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_delay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_delay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_delay(GSettings *settings)
     * }
     */
    public static FunctionDescriptor g_settings_delay$descriptor() {
        return g_settings_delay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_delay(GSettings *settings)
     * }
     */
    public static MethodHandle g_settings_delay$handle() {
        return g_settings_delay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_delay(GSettings *settings)
     * }
     */
    public static void g_settings_delay(MemorySegment settings) {
        var mh$ = g_settings_delay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_delay", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_apply {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_apply"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_apply(GSettings *settings)
     * }
     */
    public static FunctionDescriptor g_settings_apply$descriptor() {
        return g_settings_apply.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_apply(GSettings *settings)
     * }
     */
    public static MethodHandle g_settings_apply$handle() {
        return g_settings_apply.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_apply(GSettings *settings)
     * }
     */
    public static void g_settings_apply(MemorySegment settings) {
        var mh$ = g_settings_apply.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_apply", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_revert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_revert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_revert(GSettings *settings)
     * }
     */
    public static FunctionDescriptor g_settings_revert$descriptor() {
        return g_settings_revert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_revert(GSettings *settings)
     * }
     */
    public static MethodHandle g_settings_revert$handle() {
        return g_settings_revert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_revert(GSettings *settings)
     * }
     */
    public static void g_settings_revert(MemorySegment settings) {
        var mh$ = g_settings_revert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_revert", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_has_unapplied {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_has_unapplied"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_settings_get_has_unapplied(GSettings *settings)
     * }
     */
    public static FunctionDescriptor g_settings_get_has_unapplied$descriptor() {
        return g_settings_get_has_unapplied.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_settings_get_has_unapplied(GSettings *settings)
     * }
     */
    public static MethodHandle g_settings_get_has_unapplied$handle() {
        return g_settings_get_has_unapplied.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_settings_get_has_unapplied(GSettings *settings)
     * }
     */
    public static int g_settings_get_has_unapplied(MemorySegment settings) {
        var mh$ = g_settings_get_has_unapplied.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_has_unapplied", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_sync()
     * }
     */
    public static FunctionDescriptor g_settings_sync$descriptor() {
        return g_settings_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_sync()
     * }
     */
    public static MethodHandle g_settings_sync$handle() {
        return g_settings_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_sync()
     * }
     */
    public static void g_settings_sync() {
        var mh$ = g_settings_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_sync");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_SETTINGS_BIND_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SETTINGS_BIND_DEFAULT = 0
     * }
     */
    public static int G_SETTINGS_BIND_DEFAULT() {
        return G_SETTINGS_BIND_DEFAULT;
    }
    private static final int G_SETTINGS_BIND_GET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SETTINGS_BIND_GET = 1
     * }
     */
    public static int G_SETTINGS_BIND_GET() {
        return G_SETTINGS_BIND_GET;
    }
    private static final int G_SETTINGS_BIND_SET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SETTINGS_BIND_SET = 2
     * }
     */
    public static int G_SETTINGS_BIND_SET() {
        return G_SETTINGS_BIND_SET;
    }
    private static final int G_SETTINGS_BIND_NO_SENSITIVITY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SETTINGS_BIND_NO_SENSITIVITY = 4
     * }
     */
    public static int G_SETTINGS_BIND_NO_SENSITIVITY() {
        return G_SETTINGS_BIND_NO_SENSITIVITY;
    }
    private static final int G_SETTINGS_BIND_GET_NO_CHANGES = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SETTINGS_BIND_GET_NO_CHANGES = 8
     * }
     */
    public static int G_SETTINGS_BIND_GET_NO_CHANGES() {
        return G_SETTINGS_BIND_GET_NO_CHANGES;
    }
    private static final int G_SETTINGS_BIND_INVERT_BOOLEAN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SETTINGS_BIND_INVERT_BOOLEAN = 16
     * }
     */
    public static int G_SETTINGS_BIND_INVERT_BOOLEAN() {
        return G_SETTINGS_BIND_INVERT_BOOLEAN;
    }

    private static class g_settings_bind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_bind"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_bind(GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags)
     * }
     */
    public static FunctionDescriptor g_settings_bind$descriptor() {
        return g_settings_bind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_bind(GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags)
     * }
     */
    public static MethodHandle g_settings_bind$handle() {
        return g_settings_bind.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_bind(GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags)
     * }
     */
    public static void g_settings_bind(MemorySegment settings, MemorySegment key, MemorySegment object, MemorySegment property, int flags) {
        var mh$ = g_settings_bind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_bind", settings, key, object, property, flags);
            }
            mh$.invokeExact(settings, key, object, property, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_bind_with_mapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_bind_with_mapping"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_bind_with_mapping(GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags, GSettingsBindGetMapping get_mapping, GSettingsBindSetMapping set_mapping, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_settings_bind_with_mapping$descriptor() {
        return g_settings_bind_with_mapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_bind_with_mapping(GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags, GSettingsBindGetMapping get_mapping, GSettingsBindSetMapping set_mapping, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_settings_bind_with_mapping$handle() {
        return g_settings_bind_with_mapping.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_bind_with_mapping(GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags, GSettingsBindGetMapping get_mapping, GSettingsBindSetMapping set_mapping, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void g_settings_bind_with_mapping(MemorySegment settings, MemorySegment key, MemorySegment object, MemorySegment property, int flags, MemorySegment get_mapping, MemorySegment set_mapping, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = g_settings_bind_with_mapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_bind_with_mapping", settings, key, object, property, flags, get_mapping, set_mapping, user_data, destroy);
            }
            mh$.invokeExact(settings, key, object, property, flags, get_mapping, set_mapping, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_bind_writable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_bind_writable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_bind_writable(GSettings *settings, const gchar *key, gpointer object, const gchar *property, gboolean inverted)
     * }
     */
    public static FunctionDescriptor g_settings_bind_writable$descriptor() {
        return g_settings_bind_writable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_bind_writable(GSettings *settings, const gchar *key, gpointer object, const gchar *property, gboolean inverted)
     * }
     */
    public static MethodHandle g_settings_bind_writable$handle() {
        return g_settings_bind_writable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_bind_writable(GSettings *settings, const gchar *key, gpointer object, const gchar *property, gboolean inverted)
     * }
     */
    public static void g_settings_bind_writable(MemorySegment settings, MemorySegment key, MemorySegment object, MemorySegment property, int inverted) {
        var mh$ = g_settings_bind_writable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_bind_writable", settings, key, object, property, inverted);
            }
            mh$.invokeExact(settings, key, object, property, inverted);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_unbind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_unbind"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_settings_unbind(gpointer object, const gchar *property)
     * }
     */
    public static FunctionDescriptor g_settings_unbind$descriptor() {
        return g_settings_unbind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_settings_unbind(gpointer object, const gchar *property)
     * }
     */
    public static MethodHandle g_settings_unbind$handle() {
        return g_settings_unbind.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_settings_unbind(gpointer object, const gchar *property)
     * }
     */
    public static void g_settings_unbind(MemorySegment object, MemorySegment property) {
        var mh$ = g_settings_unbind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_unbind", object, property);
            }
            mh$.invokeExact(object, property);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_create_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_create_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAction *g_settings_create_action(GSettings *settings, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_settings_create_action$descriptor() {
        return g_settings_create_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAction *g_settings_create_action(GSettings *settings, const gchar *key)
     * }
     */
    public static MethodHandle g_settings_create_action$handle() {
        return g_settings_create_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAction *g_settings_create_action(GSettings *settings, const gchar *key)
     * }
     */
    public static MemorySegment g_settings_create_action(MemorySegment settings, MemorySegment key) {
        var mh$ = g_settings_create_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_create_action", settings, key);
            }
            return (MemorySegment)mh$.invokeExact(settings, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_settings_get_mapped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_settings_get_mapped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_settings_get_mapped(GSettings *settings, const gchar *key, GSettingsGetMapping mapping, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_settings_get_mapped$descriptor() {
        return g_settings_get_mapped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_settings_get_mapped(GSettings *settings, const gchar *key, GSettingsGetMapping mapping, gpointer user_data)
     * }
     */
    public static MethodHandle g_settings_get_mapped$handle() {
        return g_settings_get_mapped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_settings_get_mapped(GSettings *settings, const gchar *key, GSettingsGetMapping mapping, gpointer user_data)
     * }
     */
    public static MemorySegment g_settings_get_mapped(MemorySegment settings, MemorySegment key, MemorySegment mapping, MemorySegment user_data) {
        var mh$ = g_settings_get_mapped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_settings_get_mapped", settings, key, mapping, user_data);
            }
            return (MemorySegment)mh$.invokeExact(settings, key, mapping, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_simple_action_get_type()
     * }
     */
    public static FunctionDescriptor g_simple_action_get_type$descriptor() {
        return g_simple_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_simple_action_get_type()
     * }
     */
    public static MethodHandle g_simple_action_get_type$handle() {
        return g_simple_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_simple_action_get_type()
     * }
     */
    public static long g_simple_action_get_type() {
        var mh$ = g_simple_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSimpleAction *g_simple_action_new(const gchar *name, const GVariantType *parameter_type)
     * }
     */
    public static FunctionDescriptor g_simple_action_new$descriptor() {
        return g_simple_action_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSimpleAction *g_simple_action_new(const gchar *name, const GVariantType *parameter_type)
     * }
     */
    public static MethodHandle g_simple_action_new$handle() {
        return g_simple_action_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSimpleAction *g_simple_action_new(const gchar *name, const GVariantType *parameter_type)
     * }
     */
    public static MemorySegment g_simple_action_new(MemorySegment name, MemorySegment parameter_type) {
        var mh$ = g_simple_action_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_new", name, parameter_type);
            }
            return (MemorySegment)mh$.invokeExact(name, parameter_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_new_stateful {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_new_stateful"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSimpleAction *g_simple_action_new_stateful(const gchar *name, const GVariantType *parameter_type, GVariant *state)
     * }
     */
    public static FunctionDescriptor g_simple_action_new_stateful$descriptor() {
        return g_simple_action_new_stateful.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSimpleAction *g_simple_action_new_stateful(const gchar *name, const GVariantType *parameter_type, GVariant *state)
     * }
     */
    public static MethodHandle g_simple_action_new_stateful$handle() {
        return g_simple_action_new_stateful.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSimpleAction *g_simple_action_new_stateful(const gchar *name, const GVariantType *parameter_type, GVariant *state)
     * }
     */
    public static MemorySegment g_simple_action_new_stateful(MemorySegment name, MemorySegment parameter_type, MemorySegment state) {
        var mh$ = g_simple_action_new_stateful.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_new_stateful", name, parameter_type, state);
            }
            return (MemorySegment)mh$.invokeExact(name, parameter_type, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_set_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_set_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_action_set_enabled(GSimpleAction *simple, gboolean enabled)
     * }
     */
    public static FunctionDescriptor g_simple_action_set_enabled$descriptor() {
        return g_simple_action_set_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_action_set_enabled(GSimpleAction *simple, gboolean enabled)
     * }
     */
    public static MethodHandle g_simple_action_set_enabled$handle() {
        return g_simple_action_set_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_action_set_enabled(GSimpleAction *simple, gboolean enabled)
     * }
     */
    public static void g_simple_action_set_enabled(MemorySegment simple, int enabled) {
        var mh$ = g_simple_action_set_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_set_enabled", simple, enabled);
            }
            mh$.invokeExact(simple, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_set_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_set_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_action_set_state(GSimpleAction *simple, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_simple_action_set_state$descriptor() {
        return g_simple_action_set_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_action_set_state(GSimpleAction *simple, GVariant *value)
     * }
     */
    public static MethodHandle g_simple_action_set_state$handle() {
        return g_simple_action_set_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_action_set_state(GSimpleAction *simple, GVariant *value)
     * }
     */
    public static void g_simple_action_set_state(MemorySegment simple, MemorySegment value) {
        var mh$ = g_simple_action_set_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_set_state", simple, value);
            }
            mh$.invokeExact(simple, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_set_state_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_set_state_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_action_set_state_hint(GSimpleAction *simple, GVariant *state_hint)
     * }
     */
    public static FunctionDescriptor g_simple_action_set_state_hint$descriptor() {
        return g_simple_action_set_state_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_action_set_state_hint(GSimpleAction *simple, GVariant *state_hint)
     * }
     */
    public static MethodHandle g_simple_action_set_state_hint$handle() {
        return g_simple_action_set_state_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_action_set_state_hint(GSimpleAction *simple, GVariant *state_hint)
     * }
     */
    public static void g_simple_action_set_state_hint(MemorySegment simple, MemorySegment state_hint) {
        var mh$ = g_simple_action_set_state_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_set_state_hint", simple, state_hint);
            }
            mh$.invokeExact(simple, state_hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_simple_action_group_get_type()
     * }
     */
    public static FunctionDescriptor g_simple_action_group_get_type$descriptor() {
        return g_simple_action_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_simple_action_group_get_type()
     * }
     */
    public static MethodHandle g_simple_action_group_get_type$handle() {
        return g_simple_action_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_simple_action_group_get_type()
     * }
     */
    public static long g_simple_action_group_get_type() {
        var mh$ = g_simple_action_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_group_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_group_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSimpleActionGroup *g_simple_action_group_new()
     * }
     */
    public static FunctionDescriptor g_simple_action_group_new$descriptor() {
        return g_simple_action_group_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSimpleActionGroup *g_simple_action_group_new()
     * }
     */
    public static MethodHandle g_simple_action_group_new$handle() {
        return g_simple_action_group_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSimpleActionGroup *g_simple_action_group_new()
     * }
     */
    public static MemorySegment g_simple_action_group_new() {
        var mh$ = g_simple_action_group_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_group_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_group_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_group_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAction *g_simple_action_group_lookup(GSimpleActionGroup *simple, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_simple_action_group_lookup$descriptor() {
        return g_simple_action_group_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAction *g_simple_action_group_lookup(GSimpleActionGroup *simple, const gchar *action_name)
     * }
     */
    public static MethodHandle g_simple_action_group_lookup$handle() {
        return g_simple_action_group_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAction *g_simple_action_group_lookup(GSimpleActionGroup *simple, const gchar *action_name)
     * }
     */
    public static MemorySegment g_simple_action_group_lookup(MemorySegment simple, MemorySegment action_name) {
        var mh$ = g_simple_action_group_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_group_lookup", simple, action_name);
            }
            return (MemorySegment)mh$.invokeExact(simple, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_group_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_group_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_action_group_insert(GSimpleActionGroup *simple, GAction *action)
     * }
     */
    public static FunctionDescriptor g_simple_action_group_insert$descriptor() {
        return g_simple_action_group_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_action_group_insert(GSimpleActionGroup *simple, GAction *action)
     * }
     */
    public static MethodHandle g_simple_action_group_insert$handle() {
        return g_simple_action_group_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_action_group_insert(GSimpleActionGroup *simple, GAction *action)
     * }
     */
    public static void g_simple_action_group_insert(MemorySegment simple, MemorySegment action) {
        var mh$ = g_simple_action_group_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_group_insert", simple, action);
            }
            mh$.invokeExact(simple, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_group_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_group_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_action_group_remove(GSimpleActionGroup *simple, const gchar *action_name)
     * }
     */
    public static FunctionDescriptor g_simple_action_group_remove$descriptor() {
        return g_simple_action_group_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_action_group_remove(GSimpleActionGroup *simple, const gchar *action_name)
     * }
     */
    public static MethodHandle g_simple_action_group_remove$handle() {
        return g_simple_action_group_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_action_group_remove(GSimpleActionGroup *simple, const gchar *action_name)
     * }
     */
    public static void g_simple_action_group_remove(MemorySegment simple, MemorySegment action_name) {
        var mh$ = g_simple_action_group_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_group_remove", simple, action_name);
            }
            mh$.invokeExact(simple, action_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_action_group_add_entries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_action_group_add_entries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_action_group_add_entries(GSimpleActionGroup *simple, const GActionEntry *entries, gint n_entries, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_simple_action_group_add_entries$descriptor() {
        return g_simple_action_group_add_entries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_action_group_add_entries(GSimpleActionGroup *simple, const GActionEntry *entries, gint n_entries, gpointer user_data)
     * }
     */
    public static MethodHandle g_simple_action_group_add_entries$handle() {
        return g_simple_action_group_add_entries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_action_group_add_entries(GSimpleActionGroup *simple, const GActionEntry *entries, gint n_entries, gpointer user_data)
     * }
     */
    public static void g_simple_action_group_add_entries(MemorySegment simple, MemorySegment entries, int n_entries, MemorySegment user_data) {
        var mh$ = g_simple_action_group_add_entries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_action_group_add_entries", simple, entries, n_entries, user_data);
            }
            mh$.invokeExact(simple, entries, n_entries, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_simple_async_result_get_type()
     * }
     */
    public static FunctionDescriptor g_simple_async_result_get_type$descriptor() {
        return g_simple_async_result_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_simple_async_result_get_type()
     * }
     */
    public static MethodHandle g_simple_async_result_get_type$handle() {
        return g_simple_async_result_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_simple_async_result_get_type()
     * }
     */
    public static long g_simple_async_result_get_type() {
        var mh$ = g_simple_async_result_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSimpleAsyncResult *g_simple_async_result_new(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, gpointer source_tag)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_new$descriptor() {
        return g_simple_async_result_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSimpleAsyncResult *g_simple_async_result_new(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, gpointer source_tag)
     * }
     */
    public static MethodHandle g_simple_async_result_new$handle() {
        return g_simple_async_result_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSimpleAsyncResult *g_simple_async_result_new(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, gpointer source_tag)
     * }
     */
    public static MemorySegment g_simple_async_result_new(MemorySegment source_object, MemorySegment callback, MemorySegment user_data, MemorySegment source_tag) {
        var mh$ = g_simple_async_result_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_new", source_object, callback, user_data, source_tag);
            }
            return (MemorySegment)mh$.invokeExact(source_object, callback, user_data, source_tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GSimpleAsyncResult *g_simple_async_result_new_error(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, GQuark domain, gint code, const char *format, ...)
     * }
     */
    public static class g_simple_async_result_new_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_simple_async_result_new_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_simple_async_result_new_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GSimpleAsyncResult *g_simple_async_result_new_error(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, GQuark domain, gint code, const char *format, ...)
         * }
         */
        public static g_simple_async_result_new_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_simple_async_result_new_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment source_object, MemorySegment callback, MemorySegment user_data, int domain, int code, MemorySegment format, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_simple_async_result_new_error", source_object, callback, user_data, domain, code, format, x6);
                }
                return (MemorySegment)spreader.invokeExact(source_object, callback, user_data, domain, code, format, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_simple_async_result_new_from_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_new_from_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSimpleAsyncResult *g_simple_async_result_new_from_error(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, const GError *error)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_new_from_error$descriptor() {
        return g_simple_async_result_new_from_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSimpleAsyncResult *g_simple_async_result_new_from_error(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, const GError *error)
     * }
     */
    public static MethodHandle g_simple_async_result_new_from_error$handle() {
        return g_simple_async_result_new_from_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSimpleAsyncResult *g_simple_async_result_new_from_error(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, const GError *error)
     * }
     */
    public static MemorySegment g_simple_async_result_new_from_error(MemorySegment source_object, MemorySegment callback, MemorySegment user_data, MemorySegment error) {
        var mh$ = g_simple_async_result_new_from_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_new_from_error", source_object, callback, user_data, error);
            }
            return (MemorySegment)mh$.invokeExact(source_object, callback, user_data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_new_take_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_new_take_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSimpleAsyncResult *g_simple_async_result_new_take_error(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, GError *error)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_new_take_error$descriptor() {
        return g_simple_async_result_new_take_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSimpleAsyncResult *g_simple_async_result_new_take_error(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, GError *error)
     * }
     */
    public static MethodHandle g_simple_async_result_new_take_error$handle() {
        return g_simple_async_result_new_take_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSimpleAsyncResult *g_simple_async_result_new_take_error(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, GError *error)
     * }
     */
    public static MemorySegment g_simple_async_result_new_take_error(MemorySegment source_object, MemorySegment callback, MemorySegment user_data, MemorySegment error) {
        var mh$ = g_simple_async_result_new_take_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_new_take_error", source_object, callback, user_data, error);
            }
            return (MemorySegment)mh$.invokeExact(source_object, callback, user_data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_set_op_res_gpointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_set_op_res_gpointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_op_res_gpointer(GSimpleAsyncResult *simple, gpointer op_res, GDestroyNotify destroy_op_res)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_set_op_res_gpointer$descriptor() {
        return g_simple_async_result_set_op_res_gpointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_op_res_gpointer(GSimpleAsyncResult *simple, gpointer op_res, GDestroyNotify destroy_op_res)
     * }
     */
    public static MethodHandle g_simple_async_result_set_op_res_gpointer$handle() {
        return g_simple_async_result_set_op_res_gpointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_op_res_gpointer(GSimpleAsyncResult *simple, gpointer op_res, GDestroyNotify destroy_op_res)
     * }
     */
    public static void g_simple_async_result_set_op_res_gpointer(MemorySegment simple, MemorySegment op_res, MemorySegment destroy_op_res) {
        var mh$ = g_simple_async_result_set_op_res_gpointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_set_op_res_gpointer", simple, op_res, destroy_op_res);
            }
            mh$.invokeExact(simple, op_res, destroy_op_res);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_get_op_res_gpointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_get_op_res_gpointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_simple_async_result_get_op_res_gpointer(GSimpleAsyncResult *simple)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_get_op_res_gpointer$descriptor() {
        return g_simple_async_result_get_op_res_gpointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_simple_async_result_get_op_res_gpointer(GSimpleAsyncResult *simple)
     * }
     */
    public static MethodHandle g_simple_async_result_get_op_res_gpointer$handle() {
        return g_simple_async_result_get_op_res_gpointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_simple_async_result_get_op_res_gpointer(GSimpleAsyncResult *simple)
     * }
     */
    public static MemorySegment g_simple_async_result_get_op_res_gpointer(MemorySegment simple) {
        var mh$ = g_simple_async_result_get_op_res_gpointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_get_op_res_gpointer", simple);
            }
            return (MemorySegment)mh$.invokeExact(simple);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_set_op_res_gssize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_set_op_res_gssize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_op_res_gssize(GSimpleAsyncResult *simple, gssize op_res)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_set_op_res_gssize$descriptor() {
        return g_simple_async_result_set_op_res_gssize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_op_res_gssize(GSimpleAsyncResult *simple, gssize op_res)
     * }
     */
    public static MethodHandle g_simple_async_result_set_op_res_gssize$handle() {
        return g_simple_async_result_set_op_res_gssize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_op_res_gssize(GSimpleAsyncResult *simple, gssize op_res)
     * }
     */
    public static void g_simple_async_result_set_op_res_gssize(MemorySegment simple, long op_res) {
        var mh$ = g_simple_async_result_set_op_res_gssize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_set_op_res_gssize", simple, op_res);
            }
            mh$.invokeExact(simple, op_res);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_get_op_res_gssize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_get_op_res_gssize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_simple_async_result_get_op_res_gssize(GSimpleAsyncResult *simple)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_get_op_res_gssize$descriptor() {
        return g_simple_async_result_get_op_res_gssize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_simple_async_result_get_op_res_gssize(GSimpleAsyncResult *simple)
     * }
     */
    public static MethodHandle g_simple_async_result_get_op_res_gssize$handle() {
        return g_simple_async_result_get_op_res_gssize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_simple_async_result_get_op_res_gssize(GSimpleAsyncResult *simple)
     * }
     */
    public static long g_simple_async_result_get_op_res_gssize(MemorySegment simple) {
        var mh$ = g_simple_async_result_get_op_res_gssize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_get_op_res_gssize", simple);
            }
            return (long)mh$.invokeExact(simple);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_set_op_res_gboolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_set_op_res_gboolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_op_res_gboolean(GSimpleAsyncResult *simple, gboolean op_res)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_set_op_res_gboolean$descriptor() {
        return g_simple_async_result_set_op_res_gboolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_op_res_gboolean(GSimpleAsyncResult *simple, gboolean op_res)
     * }
     */
    public static MethodHandle g_simple_async_result_set_op_res_gboolean$handle() {
        return g_simple_async_result_set_op_res_gboolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_op_res_gboolean(GSimpleAsyncResult *simple, gboolean op_res)
     * }
     */
    public static void g_simple_async_result_set_op_res_gboolean(MemorySegment simple, int op_res) {
        var mh$ = g_simple_async_result_set_op_res_gboolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_set_op_res_gboolean", simple, op_res);
            }
            mh$.invokeExact(simple, op_res);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_get_op_res_gboolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_get_op_res_gboolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_simple_async_result_get_op_res_gboolean(GSimpleAsyncResult *simple)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_get_op_res_gboolean$descriptor() {
        return g_simple_async_result_get_op_res_gboolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_simple_async_result_get_op_res_gboolean(GSimpleAsyncResult *simple)
     * }
     */
    public static MethodHandle g_simple_async_result_get_op_res_gboolean$handle() {
        return g_simple_async_result_get_op_res_gboolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_simple_async_result_get_op_res_gboolean(GSimpleAsyncResult *simple)
     * }
     */
    public static int g_simple_async_result_get_op_res_gboolean(MemorySegment simple) {
        var mh$ = g_simple_async_result_get_op_res_gboolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_get_op_res_gboolean", simple);
            }
            return (int)mh$.invokeExact(simple);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_set_check_cancellable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_set_check_cancellable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_check_cancellable(GSimpleAsyncResult *simple, GCancellable *check_cancellable)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_set_check_cancellable$descriptor() {
        return g_simple_async_result_set_check_cancellable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_check_cancellable(GSimpleAsyncResult *simple, GCancellable *check_cancellable)
     * }
     */
    public static MethodHandle g_simple_async_result_set_check_cancellable$handle() {
        return g_simple_async_result_set_check_cancellable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_check_cancellable(GSimpleAsyncResult *simple, GCancellable *check_cancellable)
     * }
     */
    public static void g_simple_async_result_set_check_cancellable(MemorySegment simple, MemorySegment check_cancellable) {
        var mh$ = g_simple_async_result_set_check_cancellable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_set_check_cancellable", simple, check_cancellable);
            }
            mh$.invokeExact(simple, check_cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_get_source_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_get_source_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_simple_async_result_get_source_tag(GSimpleAsyncResult *simple)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_get_source_tag$descriptor() {
        return g_simple_async_result_get_source_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_simple_async_result_get_source_tag(GSimpleAsyncResult *simple)
     * }
     */
    public static MethodHandle g_simple_async_result_get_source_tag$handle() {
        return g_simple_async_result_get_source_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_simple_async_result_get_source_tag(GSimpleAsyncResult *simple)
     * }
     */
    public static MemorySegment g_simple_async_result_get_source_tag(MemorySegment simple) {
        var mh$ = g_simple_async_result_get_source_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_get_source_tag", simple);
            }
            return (MemorySegment)mh$.invokeExact(simple);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_set_handle_cancellation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_set_handle_cancellation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_handle_cancellation(GSimpleAsyncResult *simple, gboolean handle_cancellation)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_set_handle_cancellation$descriptor() {
        return g_simple_async_result_set_handle_cancellation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_handle_cancellation(GSimpleAsyncResult *simple, gboolean handle_cancellation)
     * }
     */
    public static MethodHandle g_simple_async_result_set_handle_cancellation$handle() {
        return g_simple_async_result_set_handle_cancellation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_handle_cancellation(GSimpleAsyncResult *simple, gboolean handle_cancellation)
     * }
     */
    public static void g_simple_async_result_set_handle_cancellation(MemorySegment simple, int handle_cancellation) {
        var mh$ = g_simple_async_result_set_handle_cancellation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_set_handle_cancellation", simple, handle_cancellation);
            }
            mh$.invokeExact(simple, handle_cancellation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_complete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_complete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_complete(GSimpleAsyncResult *simple)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_complete$descriptor() {
        return g_simple_async_result_complete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_complete(GSimpleAsyncResult *simple)
     * }
     */
    public static MethodHandle g_simple_async_result_complete$handle() {
        return g_simple_async_result_complete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_result_complete(GSimpleAsyncResult *simple)
     * }
     */
    public static void g_simple_async_result_complete(MemorySegment simple) {
        var mh$ = g_simple_async_result_complete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_complete", simple);
            }
            mh$.invokeExact(simple);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_complete_in_idle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_complete_in_idle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_complete_in_idle(GSimpleAsyncResult *simple)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_complete_in_idle$descriptor() {
        return g_simple_async_result_complete_in_idle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_complete_in_idle(GSimpleAsyncResult *simple)
     * }
     */
    public static MethodHandle g_simple_async_result_complete_in_idle$handle() {
        return g_simple_async_result_complete_in_idle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_result_complete_in_idle(GSimpleAsyncResult *simple)
     * }
     */
    public static void g_simple_async_result_complete_in_idle(MemorySegment simple) {
        var mh$ = g_simple_async_result_complete_in_idle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_complete_in_idle", simple);
            }
            mh$.invokeExact(simple);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_run_in_thread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_run_in_thread"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_run_in_thread(GSimpleAsyncResult *simple, GSimpleAsyncThreadFunc func, int io_priority, GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_run_in_thread$descriptor() {
        return g_simple_async_result_run_in_thread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_run_in_thread(GSimpleAsyncResult *simple, GSimpleAsyncThreadFunc func, int io_priority, GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_simple_async_result_run_in_thread$handle() {
        return g_simple_async_result_run_in_thread.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_result_run_in_thread(GSimpleAsyncResult *simple, GSimpleAsyncThreadFunc func, int io_priority, GCancellable *cancellable)
     * }
     */
    public static void g_simple_async_result_run_in_thread(MemorySegment simple, MemorySegment func, int io_priority, MemorySegment cancellable) {
        var mh$ = g_simple_async_result_run_in_thread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_run_in_thread", simple, func, io_priority, cancellable);
            }
            mh$.invokeExact(simple, func, io_priority, cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_set_from_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_set_from_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_from_error(GSimpleAsyncResult *simple, const GError *error)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_set_from_error$descriptor() {
        return g_simple_async_result_set_from_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_from_error(GSimpleAsyncResult *simple, const GError *error)
     * }
     */
    public static MethodHandle g_simple_async_result_set_from_error$handle() {
        return g_simple_async_result_set_from_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_from_error(GSimpleAsyncResult *simple, const GError *error)
     * }
     */
    public static void g_simple_async_result_set_from_error(MemorySegment simple, MemorySegment error) {
        var mh$ = g_simple_async_result_set_from_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_set_from_error", simple, error);
            }
            mh$.invokeExact(simple, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_take_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_take_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_take_error(GSimpleAsyncResult *simple, GError *error)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_take_error$descriptor() {
        return g_simple_async_result_take_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_take_error(GSimpleAsyncResult *simple, GError *error)
     * }
     */
    public static MethodHandle g_simple_async_result_take_error$handle() {
        return g_simple_async_result_take_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_result_take_error(GSimpleAsyncResult *simple, GError *error)
     * }
     */
    public static void g_simple_async_result_take_error(MemorySegment simple, MemorySegment error) {
        var mh$ = g_simple_async_result_take_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_take_error", simple, error);
            }
            mh$.invokeExact(simple, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_result_propagate_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_propagate_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_simple_async_result_propagate_error(GSimpleAsyncResult *simple, GError **dest)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_propagate_error$descriptor() {
        return g_simple_async_result_propagate_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_simple_async_result_propagate_error(GSimpleAsyncResult *simple, GError **dest)
     * }
     */
    public static MethodHandle g_simple_async_result_propagate_error$handle() {
        return g_simple_async_result_propagate_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_simple_async_result_propagate_error(GSimpleAsyncResult *simple, GError **dest)
     * }
     */
    public static int g_simple_async_result_propagate_error(MemorySegment simple, MemorySegment dest) {
        var mh$ = g_simple_async_result_propagate_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_propagate_error", simple, dest);
            }
            return (int)mh$.invokeExact(simple, dest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_simple_async_result_set_error(GSimpleAsyncResult *simple, GQuark domain, gint code, const char *format, ...)
     * }
     */
    public static class g_simple_async_result_set_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_simple_async_result_set_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_simple_async_result_set_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_simple_async_result_set_error(GSimpleAsyncResult *simple, GQuark domain, gint code, const char *format, ...)
         * }
         */
        public static g_simple_async_result_set_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_simple_async_result_set_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment simple, int domain, int code, MemorySegment format, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_simple_async_result_set_error", simple, domain, code, format, x4);
                }
                spreader.invokeExact(simple, domain, code, format, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_simple_async_result_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_result_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_simple_async_result_is_valid(GAsyncResult *result, GObject *source, gpointer source_tag)
     * }
     */
    public static FunctionDescriptor g_simple_async_result_is_valid$descriptor() {
        return g_simple_async_result_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_simple_async_result_is_valid(GAsyncResult *result, GObject *source, gpointer source_tag)
     * }
     */
    public static MethodHandle g_simple_async_result_is_valid$handle() {
        return g_simple_async_result_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_simple_async_result_is_valid(GAsyncResult *result, GObject *source, gpointer source_tag)
     * }
     */
    public static int g_simple_async_result_is_valid(MemorySegment result, MemorySegment source, MemorySegment source_tag) {
        var mh$ = g_simple_async_result_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_result_is_valid", result, source, source_tag);
            }
            return (int)mh$.invokeExact(result, source, source_tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_simple_async_report_error_in_idle(GObject *object, GAsyncReadyCallback callback, gpointer user_data, GQuark domain, gint code, const char *format, ...)
     * }
     */
    public static class g_simple_async_report_error_in_idle {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_simple_async_report_error_in_idle");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_simple_async_report_error_in_idle(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_simple_async_report_error_in_idle(GObject *object, GAsyncReadyCallback callback, gpointer user_data, GQuark domain, gint code, const char *format, ...)
         * }
         */
        public static g_simple_async_report_error_in_idle makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_simple_async_report_error_in_idle(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment object, MemorySegment callback, MemorySegment user_data, int domain, int code, MemorySegment format, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_simple_async_report_error_in_idle", object, callback, user_data, domain, code, format, x6);
                }
                spreader.invokeExact(object, callback, user_data, domain, code, format, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_simple_async_report_gerror_in_idle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_report_gerror_in_idle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_report_gerror_in_idle(GObject *object, GAsyncReadyCallback callback, gpointer user_data, const GError *error)
     * }
     */
    public static FunctionDescriptor g_simple_async_report_gerror_in_idle$descriptor() {
        return g_simple_async_report_gerror_in_idle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_report_gerror_in_idle(GObject *object, GAsyncReadyCallback callback, gpointer user_data, const GError *error)
     * }
     */
    public static MethodHandle g_simple_async_report_gerror_in_idle$handle() {
        return g_simple_async_report_gerror_in_idle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_report_gerror_in_idle(GObject *object, GAsyncReadyCallback callback, gpointer user_data, const GError *error)
     * }
     */
    public static void g_simple_async_report_gerror_in_idle(MemorySegment object, MemorySegment callback, MemorySegment user_data, MemorySegment error) {
        var mh$ = g_simple_async_report_gerror_in_idle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_report_gerror_in_idle", object, callback, user_data, error);
            }
            mh$.invokeExact(object, callback, user_data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_async_report_take_gerror_in_idle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_async_report_take_gerror_in_idle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_async_report_take_gerror_in_idle(GObject *object, GAsyncReadyCallback callback, gpointer user_data, GError *error)
     * }
     */
    public static FunctionDescriptor g_simple_async_report_take_gerror_in_idle$descriptor() {
        return g_simple_async_report_take_gerror_in_idle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_async_report_take_gerror_in_idle(GObject *object, GAsyncReadyCallback callback, gpointer user_data, GError *error)
     * }
     */
    public static MethodHandle g_simple_async_report_take_gerror_in_idle$handle() {
        return g_simple_async_report_take_gerror_in_idle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_async_report_take_gerror_in_idle(GObject *object, GAsyncReadyCallback callback, gpointer user_data, GError *error)
     * }
     */
    public static void g_simple_async_report_take_gerror_in_idle(MemorySegment object, MemorySegment callback, MemorySegment user_data, MemorySegment error) {
        var mh$ = g_simple_async_report_take_gerror_in_idle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_async_report_take_gerror_in_idle", object, callback, user_data, error);
            }
            mh$.invokeExact(object, callback, user_data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_io_stream_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_io_stream_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_simple_io_stream_get_type()
     * }
     */
    public static FunctionDescriptor g_simple_io_stream_get_type$descriptor() {
        return g_simple_io_stream_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_simple_io_stream_get_type()
     * }
     */
    public static MethodHandle g_simple_io_stream_get_type$handle() {
        return g_simple_io_stream_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_simple_io_stream_get_type()
     * }
     */
    public static long g_simple_io_stream_get_type() {
        var mh$ = g_simple_io_stream_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_io_stream_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_io_stream_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_io_stream_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStream *g_simple_io_stream_new(GInputStream *input_stream, GOutputStream *output_stream)
     * }
     */
    public static FunctionDescriptor g_simple_io_stream_new$descriptor() {
        return g_simple_io_stream_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStream *g_simple_io_stream_new(GInputStream *input_stream, GOutputStream *output_stream)
     * }
     */
    public static MethodHandle g_simple_io_stream_new$handle() {
        return g_simple_io_stream_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStream *g_simple_io_stream_new(GInputStream *input_stream, GOutputStream *output_stream)
     * }
     */
    public static MemorySegment g_simple_io_stream_new(MemorySegment input_stream, MemorySegment output_stream) {
        var mh$ = g_simple_io_stream_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_io_stream_new", input_stream, output_stream);
            }
            return (MemorySegment)mh$.invokeExact(input_stream, output_stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_permission_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_permission_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_simple_permission_get_type()
     * }
     */
    public static FunctionDescriptor g_simple_permission_get_type$descriptor() {
        return g_simple_permission_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_simple_permission_get_type()
     * }
     */
    public static MethodHandle g_simple_permission_get_type$handle() {
        return g_simple_permission_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_simple_permission_get_type()
     * }
     */
    public static long g_simple_permission_get_type() {
        var mh$ = g_simple_permission_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_permission_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_permission_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_permission_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPermission *g_simple_permission_new(gboolean allowed)
     * }
     */
    public static FunctionDescriptor g_simple_permission_new$descriptor() {
        return g_simple_permission_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPermission *g_simple_permission_new(gboolean allowed)
     * }
     */
    public static MethodHandle g_simple_permission_new$handle() {
        return g_simple_permission_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPermission *g_simple_permission_new(gboolean allowed)
     * }
     */
    public static MemorySegment g_simple_permission_new(int allowed) {
        var mh$ = g_simple_permission_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_permission_new", allowed);
            }
            return (MemorySegment)mh$.invokeExact(allowed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_proxy_resolver_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_proxy_resolver_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_simple_proxy_resolver_get_type()
     * }
     */
    public static FunctionDescriptor g_simple_proxy_resolver_get_type$descriptor() {
        return g_simple_proxy_resolver_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_simple_proxy_resolver_get_type()
     * }
     */
    public static MethodHandle g_simple_proxy_resolver_get_type$handle() {
        return g_simple_proxy_resolver_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_simple_proxy_resolver_get_type()
     * }
     */
    public static long g_simple_proxy_resolver_get_type() {
        var mh$ = g_simple_proxy_resolver_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_proxy_resolver_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_proxy_resolver_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_proxy_resolver_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GProxyResolver *g_simple_proxy_resolver_new(const gchar *default_proxy, gchar **ignore_hosts)
     * }
     */
    public static FunctionDescriptor g_simple_proxy_resolver_new$descriptor() {
        return g_simple_proxy_resolver_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GProxyResolver *g_simple_proxy_resolver_new(const gchar *default_proxy, gchar **ignore_hosts)
     * }
     */
    public static MethodHandle g_simple_proxy_resolver_new$handle() {
        return g_simple_proxy_resolver_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GProxyResolver *g_simple_proxy_resolver_new(const gchar *default_proxy, gchar **ignore_hosts)
     * }
     */
    public static MemorySegment g_simple_proxy_resolver_new(MemorySegment default_proxy, MemorySegment ignore_hosts) {
        var mh$ = g_simple_proxy_resolver_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_proxy_resolver_new", default_proxy, ignore_hosts);
            }
            return (MemorySegment)mh$.invokeExact(default_proxy, ignore_hosts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_proxy_resolver_set_default_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_proxy_resolver_set_default_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_proxy_resolver_set_default_proxy(GSimpleProxyResolver *resolver, const gchar *default_proxy)
     * }
     */
    public static FunctionDescriptor g_simple_proxy_resolver_set_default_proxy$descriptor() {
        return g_simple_proxy_resolver_set_default_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_proxy_resolver_set_default_proxy(GSimpleProxyResolver *resolver, const gchar *default_proxy)
     * }
     */
    public static MethodHandle g_simple_proxy_resolver_set_default_proxy$handle() {
        return g_simple_proxy_resolver_set_default_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_proxy_resolver_set_default_proxy(GSimpleProxyResolver *resolver, const gchar *default_proxy)
     * }
     */
    public static void g_simple_proxy_resolver_set_default_proxy(MemorySegment resolver, MemorySegment default_proxy) {
        var mh$ = g_simple_proxy_resolver_set_default_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_proxy_resolver_set_default_proxy", resolver, default_proxy);
            }
            mh$.invokeExact(resolver, default_proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_proxy_resolver_set_ignore_hosts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_proxy_resolver_set_ignore_hosts"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_proxy_resolver_set_ignore_hosts(GSimpleProxyResolver *resolver, gchar **ignore_hosts)
     * }
     */
    public static FunctionDescriptor g_simple_proxy_resolver_set_ignore_hosts$descriptor() {
        return g_simple_proxy_resolver_set_ignore_hosts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_proxy_resolver_set_ignore_hosts(GSimpleProxyResolver *resolver, gchar **ignore_hosts)
     * }
     */
    public static MethodHandle g_simple_proxy_resolver_set_ignore_hosts$handle() {
        return g_simple_proxy_resolver_set_ignore_hosts.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_proxy_resolver_set_ignore_hosts(GSimpleProxyResolver *resolver, gchar **ignore_hosts)
     * }
     */
    public static void g_simple_proxy_resolver_set_ignore_hosts(MemorySegment resolver, MemorySegment ignore_hosts) {
        var mh$ = g_simple_proxy_resolver_set_ignore_hosts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_proxy_resolver_set_ignore_hosts", resolver, ignore_hosts);
            }
            mh$.invokeExact(resolver, ignore_hosts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_simple_proxy_resolver_set_uri_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_simple_proxy_resolver_set_uri_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_simple_proxy_resolver_set_uri_proxy(GSimpleProxyResolver *resolver, const gchar *uri_scheme, const gchar *proxy)
     * }
     */
    public static FunctionDescriptor g_simple_proxy_resolver_set_uri_proxy$descriptor() {
        return g_simple_proxy_resolver_set_uri_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_simple_proxy_resolver_set_uri_proxy(GSimpleProxyResolver *resolver, const gchar *uri_scheme, const gchar *proxy)
     * }
     */
    public static MethodHandle g_simple_proxy_resolver_set_uri_proxy$handle() {
        return g_simple_proxy_resolver_set_uri_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_simple_proxy_resolver_set_uri_proxy(GSimpleProxyResolver *resolver, const gchar *uri_scheme, const gchar *proxy)
     * }
     */
    public static void g_simple_proxy_resolver_set_uri_proxy(MemorySegment resolver, MemorySegment uri_scheme, MemorySegment proxy) {
        var mh$ = g_simple_proxy_resolver_set_uri_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_simple_proxy_resolver_set_uri_proxy", resolver, uri_scheme, proxy);
            }
            mh$.invokeExact(resolver, uri_scheme, proxy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_get_type$descriptor() {
        return g_socket_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_get_type()
     * }
     */
    public static MethodHandle g_socket_get_type$handle() {
        return g_socket_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_get_type()
     * }
     */
    public static long g_socket_get_type() {
        var mh$ = g_socket_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_new(GSocketFamily family, GSocketType type, GSocketProtocol protocol, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_new$descriptor() {
        return g_socket_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_new(GSocketFamily family, GSocketType type, GSocketProtocol protocol, GError **error)
     * }
     */
    public static MethodHandle g_socket_new$handle() {
        return g_socket_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocket *g_socket_new(GSocketFamily family, GSocketType type, GSocketProtocol protocol, GError **error)
     * }
     */
    public static MemorySegment g_socket_new(int family, int type, int protocol, MemorySegment error) {
        var mh$ = g_socket_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_new", family, type, protocol, error);
            }
            return (MemorySegment)mh$.invokeExact(family, type, protocol, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_new_from_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_new_from_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_new_from_fd(gint fd, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_new_from_fd$descriptor() {
        return g_socket_new_from_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_new_from_fd(gint fd, GError **error)
     * }
     */
    public static MethodHandle g_socket_new_from_fd$handle() {
        return g_socket_new_from_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocket *g_socket_new_from_fd(gint fd, GError **error)
     * }
     */
    public static MemorySegment g_socket_new_from_fd(int fd, MemorySegment error) {
        var mh$ = g_socket_new_from_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_new_from_fd", fd, error);
            }
            return (MemorySegment)mh$.invokeExact(fd, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_socket_get_fd(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_fd$descriptor() {
        return g_socket_get_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_socket_get_fd(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_fd$handle() {
        return g_socket_get_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_socket_get_fd(GSocket *socket)
     * }
     */
    public static int g_socket_get_fd(MemorySegment socket) {
        var mh$ = g_socket_get_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_fd", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketFamily g_socket_get_family(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_family$descriptor() {
        return g_socket_get_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketFamily g_socket_get_family(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_family$handle() {
        return g_socket_get_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketFamily g_socket_get_family(GSocket *socket)
     * }
     */
    public static int g_socket_get_family(MemorySegment socket) {
        var mh$ = g_socket_get_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_family", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_socket_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_socket_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketType g_socket_get_socket_type(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_socket_type$descriptor() {
        return g_socket_get_socket_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketType g_socket_get_socket_type(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_socket_type$handle() {
        return g_socket_get_socket_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketType g_socket_get_socket_type(GSocket *socket)
     * }
     */
    public static int g_socket_get_socket_type(MemorySegment socket) {
        var mh$ = g_socket_get_socket_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_socket_type", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketProtocol g_socket_get_protocol(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_protocol$descriptor() {
        return g_socket_get_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketProtocol g_socket_get_protocol(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_protocol$handle() {
        return g_socket_get_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketProtocol g_socket_get_protocol(GSocket *socket)
     * }
     */
    public static int g_socket_get_protocol(MemorySegment socket) {
        var mh$ = g_socket_get_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_protocol", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_local_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_local_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_get_local_address(GSocket *socket, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_get_local_address$descriptor() {
        return g_socket_get_local_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_get_local_address(GSocket *socket, GError **error)
     * }
     */
    public static MethodHandle g_socket_get_local_address$handle() {
        return g_socket_get_local_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_get_local_address(GSocket *socket, GError **error)
     * }
     */
    public static MemorySegment g_socket_get_local_address(MemorySegment socket, MemorySegment error) {
        var mh$ = g_socket_get_local_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_local_address", socket, error);
            }
            return (MemorySegment)mh$.invokeExact(socket, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_remote_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_remote_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_get_remote_address(GSocket *socket, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_get_remote_address$descriptor() {
        return g_socket_get_remote_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_get_remote_address(GSocket *socket, GError **error)
     * }
     */
    public static MethodHandle g_socket_get_remote_address$handle() {
        return g_socket_get_remote_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_get_remote_address(GSocket *socket, GError **error)
     * }
     */
    public static MemorySegment g_socket_get_remote_address(MemorySegment socket, MemorySegment error) {
        var mh$ = g_socket_get_remote_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_remote_address", socket, error);
            }
            return (MemorySegment)mh$.invokeExact(socket, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_set_blocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_set_blocking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_set_blocking(GSocket *socket, gboolean blocking)
     * }
     */
    public static FunctionDescriptor g_socket_set_blocking$descriptor() {
        return g_socket_set_blocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_set_blocking(GSocket *socket, gboolean blocking)
     * }
     */
    public static MethodHandle g_socket_set_blocking$handle() {
        return g_socket_set_blocking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_set_blocking(GSocket *socket, gboolean blocking)
     * }
     */
    public static void g_socket_set_blocking(MemorySegment socket, int blocking) {
        var mh$ = g_socket_set_blocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_set_blocking", socket, blocking);
            }
            mh$.invokeExact(socket, blocking);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_blocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_blocking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_get_blocking(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_blocking$descriptor() {
        return g_socket_get_blocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_get_blocking(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_blocking$handle() {
        return g_socket_get_blocking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_get_blocking(GSocket *socket)
     * }
     */
    public static int g_socket_get_blocking(MemorySegment socket) {
        var mh$ = g_socket_get_blocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_blocking", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_set_keepalive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_set_keepalive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_set_keepalive(GSocket *socket, gboolean keepalive)
     * }
     */
    public static FunctionDescriptor g_socket_set_keepalive$descriptor() {
        return g_socket_set_keepalive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_set_keepalive(GSocket *socket, gboolean keepalive)
     * }
     */
    public static MethodHandle g_socket_set_keepalive$handle() {
        return g_socket_set_keepalive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_set_keepalive(GSocket *socket, gboolean keepalive)
     * }
     */
    public static void g_socket_set_keepalive(MemorySegment socket, int keepalive) {
        var mh$ = g_socket_set_keepalive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_set_keepalive", socket, keepalive);
            }
            mh$.invokeExact(socket, keepalive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_keepalive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_keepalive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_get_keepalive(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_keepalive$descriptor() {
        return g_socket_get_keepalive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_get_keepalive(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_keepalive$handle() {
        return g_socket_get_keepalive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_get_keepalive(GSocket *socket)
     * }
     */
    public static int g_socket_get_keepalive(MemorySegment socket) {
        var mh$ = g_socket_get_keepalive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_keepalive", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_listen_backlog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_listen_backlog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_socket_get_listen_backlog(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_listen_backlog$descriptor() {
        return g_socket_get_listen_backlog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_socket_get_listen_backlog(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_listen_backlog$handle() {
        return g_socket_get_listen_backlog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_socket_get_listen_backlog(GSocket *socket)
     * }
     */
    public static int g_socket_get_listen_backlog(MemorySegment socket) {
        var mh$ = g_socket_get_listen_backlog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_listen_backlog", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_set_listen_backlog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_set_listen_backlog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_set_listen_backlog(GSocket *socket, gint backlog)
     * }
     */
    public static FunctionDescriptor g_socket_set_listen_backlog$descriptor() {
        return g_socket_set_listen_backlog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_set_listen_backlog(GSocket *socket, gint backlog)
     * }
     */
    public static MethodHandle g_socket_set_listen_backlog$handle() {
        return g_socket_set_listen_backlog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_set_listen_backlog(GSocket *socket, gint backlog)
     * }
     */
    public static void g_socket_set_listen_backlog(MemorySegment socket, int backlog) {
        var mh$ = g_socket_set_listen_backlog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_set_listen_backlog", socket, backlog);
            }
            mh$.invokeExact(socket, backlog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_socket_get_timeout(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_timeout$descriptor() {
        return g_socket_get_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_socket_get_timeout(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_timeout$handle() {
        return g_socket_get_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_socket_get_timeout(GSocket *socket)
     * }
     */
    public static int g_socket_get_timeout(MemorySegment socket) {
        var mh$ = g_socket_get_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_timeout", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_set_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_set_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_set_timeout(GSocket *socket, guint timeout)
     * }
     */
    public static FunctionDescriptor g_socket_set_timeout$descriptor() {
        return g_socket_set_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_set_timeout(GSocket *socket, guint timeout)
     * }
     */
    public static MethodHandle g_socket_set_timeout$handle() {
        return g_socket_set_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_set_timeout(GSocket *socket, guint timeout)
     * }
     */
    public static void g_socket_set_timeout(MemorySegment socket, int timeout) {
        var mh$ = g_socket_set_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_set_timeout", socket, timeout);
            }
            mh$.invokeExact(socket, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_ttl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_ttl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_socket_get_ttl(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_ttl$descriptor() {
        return g_socket_get_ttl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_socket_get_ttl(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_ttl$handle() {
        return g_socket_get_ttl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_socket_get_ttl(GSocket *socket)
     * }
     */
    public static int g_socket_get_ttl(MemorySegment socket) {
        var mh$ = g_socket_get_ttl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_ttl", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_set_ttl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_set_ttl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_set_ttl(GSocket *socket, guint ttl)
     * }
     */
    public static FunctionDescriptor g_socket_set_ttl$descriptor() {
        return g_socket_set_ttl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_set_ttl(GSocket *socket, guint ttl)
     * }
     */
    public static MethodHandle g_socket_set_ttl$handle() {
        return g_socket_set_ttl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_set_ttl(GSocket *socket, guint ttl)
     * }
     */
    public static void g_socket_set_ttl(MemorySegment socket, int ttl) {
        var mh$ = g_socket_set_ttl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_set_ttl", socket, ttl);
            }
            mh$.invokeExact(socket, ttl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_broadcast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_broadcast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_get_broadcast(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_broadcast$descriptor() {
        return g_socket_get_broadcast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_get_broadcast(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_broadcast$handle() {
        return g_socket_get_broadcast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_get_broadcast(GSocket *socket)
     * }
     */
    public static int g_socket_get_broadcast(MemorySegment socket) {
        var mh$ = g_socket_get_broadcast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_broadcast", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_set_broadcast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_set_broadcast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_set_broadcast(GSocket *socket, gboolean broadcast)
     * }
     */
    public static FunctionDescriptor g_socket_set_broadcast$descriptor() {
        return g_socket_set_broadcast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_set_broadcast(GSocket *socket, gboolean broadcast)
     * }
     */
    public static MethodHandle g_socket_set_broadcast$handle() {
        return g_socket_set_broadcast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_set_broadcast(GSocket *socket, gboolean broadcast)
     * }
     */
    public static void g_socket_set_broadcast(MemorySegment socket, int broadcast) {
        var mh$ = g_socket_set_broadcast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_set_broadcast", socket, broadcast);
            }
            mh$.invokeExact(socket, broadcast);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_multicast_loopback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_multicast_loopback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_get_multicast_loopback(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_multicast_loopback$descriptor() {
        return g_socket_get_multicast_loopback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_get_multicast_loopback(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_multicast_loopback$handle() {
        return g_socket_get_multicast_loopback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_get_multicast_loopback(GSocket *socket)
     * }
     */
    public static int g_socket_get_multicast_loopback(MemorySegment socket) {
        var mh$ = g_socket_get_multicast_loopback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_multicast_loopback", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_set_multicast_loopback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_set_multicast_loopback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_set_multicast_loopback(GSocket *socket, gboolean loopback)
     * }
     */
    public static FunctionDescriptor g_socket_set_multicast_loopback$descriptor() {
        return g_socket_set_multicast_loopback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_set_multicast_loopback(GSocket *socket, gboolean loopback)
     * }
     */
    public static MethodHandle g_socket_set_multicast_loopback$handle() {
        return g_socket_set_multicast_loopback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_set_multicast_loopback(GSocket *socket, gboolean loopback)
     * }
     */
    public static void g_socket_set_multicast_loopback(MemorySegment socket, int loopback) {
        var mh$ = g_socket_set_multicast_loopback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_set_multicast_loopback", socket, loopback);
            }
            mh$.invokeExact(socket, loopback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_multicast_ttl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_multicast_ttl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_socket_get_multicast_ttl(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_multicast_ttl$descriptor() {
        return g_socket_get_multicast_ttl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_socket_get_multicast_ttl(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_multicast_ttl$handle() {
        return g_socket_get_multicast_ttl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_socket_get_multicast_ttl(GSocket *socket)
     * }
     */
    public static int g_socket_get_multicast_ttl(MemorySegment socket) {
        var mh$ = g_socket_get_multicast_ttl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_multicast_ttl", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_set_multicast_ttl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_set_multicast_ttl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_set_multicast_ttl(GSocket *socket, guint ttl)
     * }
     */
    public static FunctionDescriptor g_socket_set_multicast_ttl$descriptor() {
        return g_socket_set_multicast_ttl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_set_multicast_ttl(GSocket *socket, guint ttl)
     * }
     */
    public static MethodHandle g_socket_set_multicast_ttl$handle() {
        return g_socket_set_multicast_ttl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_set_multicast_ttl(GSocket *socket, guint ttl)
     * }
     */
    public static void g_socket_set_multicast_ttl(MemorySegment socket, int ttl) {
        var mh$ = g_socket_set_multicast_ttl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_set_multicast_ttl", socket, ttl);
            }
            mh$.invokeExact(socket, ttl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_is_connected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_is_connected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_is_connected(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_is_connected$descriptor() {
        return g_socket_is_connected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_is_connected(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_is_connected$handle() {
        return g_socket_is_connected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_is_connected(GSocket *socket)
     * }
     */
    public static int g_socket_is_connected(MemorySegment socket) {
        var mh$ = g_socket_is_connected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_is_connected", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_bind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_bind"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_bind(GSocket *socket, GSocketAddress *address, gboolean allow_reuse, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_bind$descriptor() {
        return g_socket_bind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_bind(GSocket *socket, GSocketAddress *address, gboolean allow_reuse, GError **error)
     * }
     */
    public static MethodHandle g_socket_bind$handle() {
        return g_socket_bind.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_bind(GSocket *socket, GSocketAddress *address, gboolean allow_reuse, GError **error)
     * }
     */
    public static int g_socket_bind(MemorySegment socket, MemorySegment address, int allow_reuse, MemorySegment error) {
        var mh$ = g_socket_bind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_bind", socket, address, allow_reuse, error);
            }
            return (int)mh$.invokeExact(socket, address, allow_reuse, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_join_multicast_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_join_multicast_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_join_multicast_group(GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_join_multicast_group$descriptor() {
        return g_socket_join_multicast_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_join_multicast_group(GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error)
     * }
     */
    public static MethodHandle g_socket_join_multicast_group$handle() {
        return g_socket_join_multicast_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_join_multicast_group(GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error)
     * }
     */
    public static int g_socket_join_multicast_group(MemorySegment socket, MemorySegment group, int source_specific, MemorySegment iface, MemorySegment error) {
        var mh$ = g_socket_join_multicast_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_join_multicast_group", socket, group, source_specific, iface, error);
            }
            return (int)mh$.invokeExact(socket, group, source_specific, iface, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_leave_multicast_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_leave_multicast_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_leave_multicast_group(GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_leave_multicast_group$descriptor() {
        return g_socket_leave_multicast_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_leave_multicast_group(GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error)
     * }
     */
    public static MethodHandle g_socket_leave_multicast_group$handle() {
        return g_socket_leave_multicast_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_leave_multicast_group(GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error)
     * }
     */
    public static int g_socket_leave_multicast_group(MemorySegment socket, MemorySegment group, int source_specific, MemorySegment iface, MemorySegment error) {
        var mh$ = g_socket_leave_multicast_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_leave_multicast_group", socket, group, source_specific, iface, error);
            }
            return (int)mh$.invokeExact(socket, group, source_specific, iface, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_join_multicast_group_ssm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_join_multicast_group_ssm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_join_multicast_group_ssm(GSocket *socket, GInetAddress *group, GInetAddress *source_specific, const gchar *iface, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_join_multicast_group_ssm$descriptor() {
        return g_socket_join_multicast_group_ssm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_join_multicast_group_ssm(GSocket *socket, GInetAddress *group, GInetAddress *source_specific, const gchar *iface, GError **error)
     * }
     */
    public static MethodHandle g_socket_join_multicast_group_ssm$handle() {
        return g_socket_join_multicast_group_ssm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_join_multicast_group_ssm(GSocket *socket, GInetAddress *group, GInetAddress *source_specific, const gchar *iface, GError **error)
     * }
     */
    public static int g_socket_join_multicast_group_ssm(MemorySegment socket, MemorySegment group, MemorySegment source_specific, MemorySegment iface, MemorySegment error) {
        var mh$ = g_socket_join_multicast_group_ssm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_join_multicast_group_ssm", socket, group, source_specific, iface, error);
            }
            return (int)mh$.invokeExact(socket, group, source_specific, iface, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_leave_multicast_group_ssm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_leave_multicast_group_ssm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_leave_multicast_group_ssm(GSocket *socket, GInetAddress *group, GInetAddress *source_specific, const gchar *iface, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_leave_multicast_group_ssm$descriptor() {
        return g_socket_leave_multicast_group_ssm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_leave_multicast_group_ssm(GSocket *socket, GInetAddress *group, GInetAddress *source_specific, const gchar *iface, GError **error)
     * }
     */
    public static MethodHandle g_socket_leave_multicast_group_ssm$handle() {
        return g_socket_leave_multicast_group_ssm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_leave_multicast_group_ssm(GSocket *socket, GInetAddress *group, GInetAddress *source_specific, const gchar *iface, GError **error)
     * }
     */
    public static int g_socket_leave_multicast_group_ssm(MemorySegment socket, MemorySegment group, MemorySegment source_specific, MemorySegment iface, MemorySegment error) {
        var mh$ = g_socket_leave_multicast_group_ssm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_leave_multicast_group_ssm", socket, group, source_specific, iface, error);
            }
            return (int)mh$.invokeExact(socket, group, source_specific, iface, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_connect(GSocket *socket, GSocketAddress *address, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_connect$descriptor() {
        return g_socket_connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_connect(GSocket *socket, GSocketAddress *address, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_connect$handle() {
        return g_socket_connect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_connect(GSocket *socket, GSocketAddress *address, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_socket_connect(MemorySegment socket, MemorySegment address, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connect", socket, address, cancellable, error);
            }
            return (int)mh$.invokeExact(socket, address, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_check_connect_result {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_check_connect_result"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_check_connect_result(GSocket *socket, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_check_connect_result$descriptor() {
        return g_socket_check_connect_result.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_check_connect_result(GSocket *socket, GError **error)
     * }
     */
    public static MethodHandle g_socket_check_connect_result$handle() {
        return g_socket_check_connect_result.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_check_connect_result(GSocket *socket, GError **error)
     * }
     */
    public static int g_socket_check_connect_result(MemorySegment socket, MemorySegment error) {
        var mh$ = g_socket_check_connect_result.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_check_connect_result", socket, error);
            }
            return (int)mh$.invokeExact(socket, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_available_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_available_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_socket_get_available_bytes(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_get_available_bytes$descriptor() {
        return g_socket_get_available_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_socket_get_available_bytes(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_get_available_bytes$handle() {
        return g_socket_get_available_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_socket_get_available_bytes(GSocket *socket)
     * }
     */
    public static long g_socket_get_available_bytes(MemorySegment socket) {
        var mh$ = g_socket_get_available_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_available_bytes", socket);
            }
            return (long)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_condition_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_condition_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOCondition g_socket_condition_check(GSocket *socket, GIOCondition condition)
     * }
     */
    public static FunctionDescriptor g_socket_condition_check$descriptor() {
        return g_socket_condition_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOCondition g_socket_condition_check(GSocket *socket, GIOCondition condition)
     * }
     */
    public static MethodHandle g_socket_condition_check$handle() {
        return g_socket_condition_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOCondition g_socket_condition_check(GSocket *socket, GIOCondition condition)
     * }
     */
    public static int g_socket_condition_check(MemorySegment socket, int condition) {
        var mh$ = g_socket_condition_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_condition_check", socket, condition);
            }
            return (int)mh$.invokeExact(socket, condition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_condition_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_condition_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_condition_wait(GSocket *socket, GIOCondition condition, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_condition_wait$descriptor() {
        return g_socket_condition_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_condition_wait(GSocket *socket, GIOCondition condition, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_condition_wait$handle() {
        return g_socket_condition_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_condition_wait(GSocket *socket, GIOCondition condition, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_socket_condition_wait(MemorySegment socket, int condition, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_condition_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_condition_wait", socket, condition, cancellable, error);
            }
            return (int)mh$.invokeExact(socket, condition, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_condition_timed_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_condition_timed_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_condition_timed_wait(GSocket *socket, GIOCondition condition, gint64 timeout_us, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_condition_timed_wait$descriptor() {
        return g_socket_condition_timed_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_condition_timed_wait(GSocket *socket, GIOCondition condition, gint64 timeout_us, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_condition_timed_wait$handle() {
        return g_socket_condition_timed_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_condition_timed_wait(GSocket *socket, GIOCondition condition, gint64 timeout_us, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_socket_condition_timed_wait(MemorySegment socket, int condition, long timeout_us, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_condition_timed_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_condition_timed_wait", socket, condition, timeout_us, cancellable, error);
            }
            return (int)mh$.invokeExact(socket, condition, timeout_us, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_accept {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_accept"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_accept(GSocket *socket, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_accept$descriptor() {
        return g_socket_accept.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_accept(GSocket *socket, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_accept$handle() {
        return g_socket_accept.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocket *g_socket_accept(GSocket *socket, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_socket_accept(MemorySegment socket, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_accept.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_accept", socket, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(socket, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_listen(GSocket *socket, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_listen$descriptor() {
        return g_socket_listen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_listen(GSocket *socket, GError **error)
     * }
     */
    public static MethodHandle g_socket_listen$handle() {
        return g_socket_listen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_listen(GSocket *socket, GError **error)
     * }
     */
    public static int g_socket_listen(MemorySegment socket, MemorySegment error) {
        var mh$ = g_socket_listen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listen", socket, error);
            }
            return (int)mh$.invokeExact(socket, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_receive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_receive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_socket_receive(GSocket *socket, gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_receive$descriptor() {
        return g_socket_receive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_socket_receive(GSocket *socket, gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_receive$handle() {
        return g_socket_receive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_socket_receive(GSocket *socket, gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_socket_receive(MemorySegment socket, MemorySegment buffer, long size, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_receive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_receive", socket, buffer, size, cancellable, error);
            }
            return (long)mh$.invokeExact(socket, buffer, size, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_receive_from {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_receive_from"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_socket_receive_from(GSocket *socket, GSocketAddress **address, gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_receive_from$descriptor() {
        return g_socket_receive_from.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_socket_receive_from(GSocket *socket, GSocketAddress **address, gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_receive_from$handle() {
        return g_socket_receive_from.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_socket_receive_from(GSocket *socket, GSocketAddress **address, gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_socket_receive_from(MemorySegment socket, MemorySegment address, MemorySegment buffer, long size, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_receive_from.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_receive_from", socket, address, buffer, size, cancellable, error);
            }
            return (long)mh$.invokeExact(socket, address, buffer, size, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_send {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_send"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_socket_send(GSocket *socket, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_send$descriptor() {
        return g_socket_send.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_socket_send(GSocket *socket, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_send$handle() {
        return g_socket_send.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_socket_send(GSocket *socket, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_socket_send(MemorySegment socket, MemorySegment buffer, long size, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_send.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_send", socket, buffer, size, cancellable, error);
            }
            return (long)mh$.invokeExact(socket, buffer, size, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_send_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_send_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_socket_send_to(GSocket *socket, GSocketAddress *address, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_send_to$descriptor() {
        return g_socket_send_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_socket_send_to(GSocket *socket, GSocketAddress *address, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_send_to$handle() {
        return g_socket_send_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_socket_send_to(GSocket *socket, GSocketAddress *address, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_socket_send_to(MemorySegment socket, MemorySegment address, MemorySegment buffer, long size, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_send_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_send_to", socket, address, buffer, size, cancellable, error);
            }
            return (long)mh$.invokeExact(socket, address, buffer, size, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_receive_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_receive_message"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_socket_receive_message(GSocket *socket, GSocketAddress **address, GInputVector *vectors, gint num_vectors, GSocketControlMessage ***messages, gint *num_messages, gint *flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_receive_message$descriptor() {
        return g_socket_receive_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_socket_receive_message(GSocket *socket, GSocketAddress **address, GInputVector *vectors, gint num_vectors, GSocketControlMessage ***messages, gint *num_messages, gint *flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_receive_message$handle() {
        return g_socket_receive_message.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_socket_receive_message(GSocket *socket, GSocketAddress **address, GInputVector *vectors, gint num_vectors, GSocketControlMessage ***messages, gint *num_messages, gint *flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_socket_receive_message(MemorySegment socket, MemorySegment address, MemorySegment vectors, int num_vectors, MemorySegment messages, MemorySegment num_messages, MemorySegment flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_receive_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_receive_message", socket, address, vectors, num_vectors, messages, num_messages, flags, cancellable, error);
            }
            return (long)mh$.invokeExact(socket, address, vectors, num_vectors, messages, num_messages, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_send_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_send_message"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_socket_send_message(GSocket *socket, GSocketAddress *address, GOutputVector *vectors, gint num_vectors, GSocketControlMessage **messages, gint num_messages, gint flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_send_message$descriptor() {
        return g_socket_send_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_socket_send_message(GSocket *socket, GSocketAddress *address, GOutputVector *vectors, gint num_vectors, GSocketControlMessage **messages, gint num_messages, gint flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_send_message$handle() {
        return g_socket_send_message.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_socket_send_message(GSocket *socket, GSocketAddress *address, GOutputVector *vectors, gint num_vectors, GSocketControlMessage **messages, gint num_messages, gint flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_socket_send_message(MemorySegment socket, MemorySegment address, MemorySegment vectors, int num_vectors, MemorySegment messages, int num_messages, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_send_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_send_message", socket, address, vectors, num_vectors, messages, num_messages, flags, cancellable, error);
            }
            return (long)mh$.invokeExact(socket, address, vectors, num_vectors, messages, num_messages, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_receive_messages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_receive_messages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_socket_receive_messages(GSocket *socket, GInputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_receive_messages$descriptor() {
        return g_socket_receive_messages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_socket_receive_messages(GSocket *socket, GInputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_receive_messages$handle() {
        return g_socket_receive_messages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_socket_receive_messages(GSocket *socket, GInputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_socket_receive_messages(MemorySegment socket, MemorySegment messages, int num_messages, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_receive_messages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_receive_messages", socket, messages, num_messages, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(socket, messages, num_messages, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_send_messages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_send_messages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_socket_send_messages(GSocket *socket, GOutputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_send_messages$descriptor() {
        return g_socket_send_messages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_socket_send_messages(GSocket *socket, GOutputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_send_messages$handle() {
        return g_socket_send_messages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_socket_send_messages(GSocket *socket, GOutputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_socket_send_messages(MemorySegment socket, MemorySegment messages, int num_messages, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_send_messages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_send_messages", socket, messages, num_messages, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(socket, messages, num_messages, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_close(GSocket *socket, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_close$descriptor() {
        return g_socket_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_close(GSocket *socket, GError **error)
     * }
     */
    public static MethodHandle g_socket_close$handle() {
        return g_socket_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_close(GSocket *socket, GError **error)
     * }
     */
    public static int g_socket_close(MemorySegment socket, MemorySegment error) {
        var mh$ = g_socket_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_close", socket, error);
            }
            return (int)mh$.invokeExact(socket, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_shutdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_shutdown(GSocket *socket, gboolean shutdown_read, gboolean shutdown_write, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_shutdown$descriptor() {
        return g_socket_shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_shutdown(GSocket *socket, gboolean shutdown_read, gboolean shutdown_write, GError **error)
     * }
     */
    public static MethodHandle g_socket_shutdown$handle() {
        return g_socket_shutdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_shutdown(GSocket *socket, gboolean shutdown_read, gboolean shutdown_write, GError **error)
     * }
     */
    public static int g_socket_shutdown(MemorySegment socket, int shutdown_read, int shutdown_write, MemorySegment error) {
        var mh$ = g_socket_shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_shutdown", socket, shutdown_read, shutdown_write, error);
            }
            return (int)mh$.invokeExact(socket, shutdown_read, shutdown_write, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_is_closed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_is_closed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_is_closed(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_is_closed$descriptor() {
        return g_socket_is_closed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_is_closed(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_is_closed$handle() {
        return g_socket_is_closed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_is_closed(GSocket *socket)
     * }
     */
    public static int g_socket_is_closed(MemorySegment socket) {
        var mh$ = g_socket_is_closed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_is_closed", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_create_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_create_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSource *g_socket_create_source(GSocket *socket, GIOCondition condition, GCancellable *cancellable)
     * }
     */
    public static FunctionDescriptor g_socket_create_source$descriptor() {
        return g_socket_create_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSource *g_socket_create_source(GSocket *socket, GIOCondition condition, GCancellable *cancellable)
     * }
     */
    public static MethodHandle g_socket_create_source$handle() {
        return g_socket_create_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSource *g_socket_create_source(GSocket *socket, GIOCondition condition, GCancellable *cancellable)
     * }
     */
    public static MemorySegment g_socket_create_source(MemorySegment socket, int condition, MemorySegment cancellable) {
        var mh$ = g_socket_create_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_create_source", socket, condition, cancellable);
            }
            return (MemorySegment)mh$.invokeExact(socket, condition, cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_speaks_ipv4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_speaks_ipv4"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_speaks_ipv4(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_speaks_ipv4$descriptor() {
        return g_socket_speaks_ipv4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_speaks_ipv4(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_speaks_ipv4$handle() {
        return g_socket_speaks_ipv4.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_speaks_ipv4(GSocket *socket)
     * }
     */
    public static int g_socket_speaks_ipv4(MemorySegment socket) {
        var mh$ = g_socket_speaks_ipv4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_speaks_ipv4", socket);
            }
            return (int)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_credentials {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_credentials"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCredentials *g_socket_get_credentials(GSocket *socket, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_get_credentials$descriptor() {
        return g_socket_get_credentials.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCredentials *g_socket_get_credentials(GSocket *socket, GError **error)
     * }
     */
    public static MethodHandle g_socket_get_credentials$handle() {
        return g_socket_get_credentials.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCredentials *g_socket_get_credentials(GSocket *socket, GError **error)
     * }
     */
    public static MemorySegment g_socket_get_credentials(MemorySegment socket, MemorySegment error) {
        var mh$ = g_socket_get_credentials.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_credentials", socket, error);
            }
            return (MemorySegment)mh$.invokeExact(socket, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_receive_with_blocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_receive_with_blocking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_socket_receive_with_blocking(GSocket *socket, gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_receive_with_blocking$descriptor() {
        return g_socket_receive_with_blocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_socket_receive_with_blocking(GSocket *socket, gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_receive_with_blocking$handle() {
        return g_socket_receive_with_blocking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_socket_receive_with_blocking(GSocket *socket, gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_socket_receive_with_blocking(MemorySegment socket, MemorySegment buffer, long size, int blocking, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_receive_with_blocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_receive_with_blocking", socket, buffer, size, blocking, cancellable, error);
            }
            return (long)mh$.invokeExact(socket, buffer, size, blocking, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_send_with_blocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_send_with_blocking"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_socket_send_with_blocking(GSocket *socket, const gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_send_with_blocking$descriptor() {
        return g_socket_send_with_blocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_socket_send_with_blocking(GSocket *socket, const gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_send_with_blocking$handle() {
        return g_socket_send_with_blocking.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_socket_send_with_blocking(GSocket *socket, const gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error)
     * }
     */
    public static long g_socket_send_with_blocking(MemorySegment socket, MemorySegment buffer, long size, int blocking, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_send_with_blocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_send_with_blocking", socket, buffer, size, blocking, cancellable, error);
            }
            return (long)mh$.invokeExact(socket, buffer, size, blocking, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_send_message_with_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_send_message_with_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPollableReturn g_socket_send_message_with_timeout(GSocket *socket, GSocketAddress *address, const GOutputVector *vectors, gint num_vectors, GSocketControlMessage **messages, gint num_messages, gint flags, gint64 timeout_us, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_send_message_with_timeout$descriptor() {
        return g_socket_send_message_with_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPollableReturn g_socket_send_message_with_timeout(GSocket *socket, GSocketAddress *address, const GOutputVector *vectors, gint num_vectors, GSocketControlMessage **messages, gint num_messages, gint flags, gint64 timeout_us, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_send_message_with_timeout$handle() {
        return g_socket_send_message_with_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPollableReturn g_socket_send_message_with_timeout(GSocket *socket, GSocketAddress *address, const GOutputVector *vectors, gint num_vectors, GSocketControlMessage **messages, gint num_messages, gint flags, gint64 timeout_us, gsize *bytes_written, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_socket_send_message_with_timeout(MemorySegment socket, MemorySegment address, MemorySegment vectors, int num_vectors, MemorySegment messages, int num_messages, int flags, long timeout_us, MemorySegment bytes_written, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_send_message_with_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_send_message_with_timeout", socket, address, vectors, num_vectors, messages, num_messages, flags, timeout_us, bytes_written, cancellable, error);
            }
            return (int)mh$.invokeExact(socket, address, vectors, num_vectors, messages, num_messages, flags, timeout_us, bytes_written, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_get_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_get_option"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_get_option(GSocket *socket, gint level, gint optname, gint *value, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_get_option$descriptor() {
        return g_socket_get_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_get_option(GSocket *socket, gint level, gint optname, gint *value, GError **error)
     * }
     */
    public static MethodHandle g_socket_get_option$handle() {
        return g_socket_get_option.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_get_option(GSocket *socket, gint level, gint optname, gint *value, GError **error)
     * }
     */
    public static int g_socket_get_option(MemorySegment socket, int level, int optname, MemorySegment value, MemorySegment error) {
        var mh$ = g_socket_get_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_get_option", socket, level, optname, value, error);
            }
            return (int)mh$.invokeExact(socket, level, optname, value, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_set_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_set_option"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_set_option(GSocket *socket, gint level, gint optname, gint value, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_set_option$descriptor() {
        return g_socket_set_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_set_option(GSocket *socket, gint level, gint optname, gint value, GError **error)
     * }
     */
    public static MethodHandle g_socket_set_option$handle() {
        return g_socket_set_option.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_set_option(GSocket *socket, gint level, gint optname, gint value, GError **error)
     * }
     */
    public static int g_socket_set_option(MemorySegment socket, int level, int optname, int value, MemorySegment error) {
        var mh$ = g_socket_set_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_set_option", socket, level, optname, value, error);
            }
            return (int)mh$.invokeExact(socket, level, optname, value, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_client_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_client_get_type$descriptor() {
        return g_socket_client_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_client_get_type()
     * }
     */
    public static MethodHandle g_socket_client_get_type$handle() {
        return g_socket_client_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_client_get_type()
     * }
     */
    public static long g_socket_client_get_type() {
        var mh$ = g_socket_client_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketClient *g_socket_client_new()
     * }
     */
    public static FunctionDescriptor g_socket_client_new$descriptor() {
        return g_socket_client_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketClient *g_socket_client_new()
     * }
     */
    public static MethodHandle g_socket_client_new$handle() {
        return g_socket_client_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketClient *g_socket_client_new()
     * }
     */
    public static MemorySegment g_socket_client_new() {
        var mh$ = g_socket_client_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_get_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_get_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketFamily g_socket_client_get_family(GSocketClient *client)
     * }
     */
    public static FunctionDescriptor g_socket_client_get_family$descriptor() {
        return g_socket_client_get_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketFamily g_socket_client_get_family(GSocketClient *client)
     * }
     */
    public static MethodHandle g_socket_client_get_family$handle() {
        return g_socket_client_get_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketFamily g_socket_client_get_family(GSocketClient *client)
     * }
     */
    public static int g_socket_client_get_family(MemorySegment client) {
        var mh$ = g_socket_client_get_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_get_family", client);
            }
            return (int)mh$.invokeExact(client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_set_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_set_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_family(GSocketClient *client, GSocketFamily family)
     * }
     */
    public static FunctionDescriptor g_socket_client_set_family$descriptor() {
        return g_socket_client_set_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_family(GSocketClient *client, GSocketFamily family)
     * }
     */
    public static MethodHandle g_socket_client_set_family$handle() {
        return g_socket_client_set_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_set_family(GSocketClient *client, GSocketFamily family)
     * }
     */
    public static void g_socket_client_set_family(MemorySegment client, int family) {
        var mh$ = g_socket_client_set_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_set_family", client, family);
            }
            mh$.invokeExact(client, family);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_get_socket_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_get_socket_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketType g_socket_client_get_socket_type(GSocketClient *client)
     * }
     */
    public static FunctionDescriptor g_socket_client_get_socket_type$descriptor() {
        return g_socket_client_get_socket_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketType g_socket_client_get_socket_type(GSocketClient *client)
     * }
     */
    public static MethodHandle g_socket_client_get_socket_type$handle() {
        return g_socket_client_get_socket_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketType g_socket_client_get_socket_type(GSocketClient *client)
     * }
     */
    public static int g_socket_client_get_socket_type(MemorySegment client) {
        var mh$ = g_socket_client_get_socket_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_get_socket_type", client);
            }
            return (int)mh$.invokeExact(client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_set_socket_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_set_socket_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_socket_type(GSocketClient *client, GSocketType type)
     * }
     */
    public static FunctionDescriptor g_socket_client_set_socket_type$descriptor() {
        return g_socket_client_set_socket_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_socket_type(GSocketClient *client, GSocketType type)
     * }
     */
    public static MethodHandle g_socket_client_set_socket_type$handle() {
        return g_socket_client_set_socket_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_set_socket_type(GSocketClient *client, GSocketType type)
     * }
     */
    public static void g_socket_client_set_socket_type(MemorySegment client, int type) {
        var mh$ = g_socket_client_set_socket_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_set_socket_type", client, type);
            }
            mh$.invokeExact(client, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_get_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_get_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketProtocol g_socket_client_get_protocol(GSocketClient *client)
     * }
     */
    public static FunctionDescriptor g_socket_client_get_protocol$descriptor() {
        return g_socket_client_get_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketProtocol g_socket_client_get_protocol(GSocketClient *client)
     * }
     */
    public static MethodHandle g_socket_client_get_protocol$handle() {
        return g_socket_client_get_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketProtocol g_socket_client_get_protocol(GSocketClient *client)
     * }
     */
    public static int g_socket_client_get_protocol(MemorySegment client) {
        var mh$ = g_socket_client_get_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_get_protocol", client);
            }
            return (int)mh$.invokeExact(client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_set_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_set_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_protocol(GSocketClient *client, GSocketProtocol protocol)
     * }
     */
    public static FunctionDescriptor g_socket_client_set_protocol$descriptor() {
        return g_socket_client_set_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_protocol(GSocketClient *client, GSocketProtocol protocol)
     * }
     */
    public static MethodHandle g_socket_client_set_protocol$handle() {
        return g_socket_client_set_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_set_protocol(GSocketClient *client, GSocketProtocol protocol)
     * }
     */
    public static void g_socket_client_set_protocol(MemorySegment client, int protocol) {
        var mh$ = g_socket_client_set_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_set_protocol", client, protocol);
            }
            mh$.invokeExact(client, protocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_get_local_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_get_local_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_client_get_local_address(GSocketClient *client)
     * }
     */
    public static FunctionDescriptor g_socket_client_get_local_address$descriptor() {
        return g_socket_client_get_local_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_client_get_local_address(GSocketClient *client)
     * }
     */
    public static MethodHandle g_socket_client_get_local_address$handle() {
        return g_socket_client_get_local_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_client_get_local_address(GSocketClient *client)
     * }
     */
    public static MemorySegment g_socket_client_get_local_address(MemorySegment client) {
        var mh$ = g_socket_client_get_local_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_get_local_address", client);
            }
            return (MemorySegment)mh$.invokeExact(client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_set_local_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_set_local_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_local_address(GSocketClient *client, GSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_socket_client_set_local_address$descriptor() {
        return g_socket_client_set_local_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_local_address(GSocketClient *client, GSocketAddress *address)
     * }
     */
    public static MethodHandle g_socket_client_set_local_address$handle() {
        return g_socket_client_set_local_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_set_local_address(GSocketClient *client, GSocketAddress *address)
     * }
     */
    public static void g_socket_client_set_local_address(MemorySegment client, MemorySegment address) {
        var mh$ = g_socket_client_set_local_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_set_local_address", client, address);
            }
            mh$.invokeExact(client, address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_get_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_get_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_socket_client_get_timeout(GSocketClient *client)
     * }
     */
    public static FunctionDescriptor g_socket_client_get_timeout$descriptor() {
        return g_socket_client_get_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_socket_client_get_timeout(GSocketClient *client)
     * }
     */
    public static MethodHandle g_socket_client_get_timeout$handle() {
        return g_socket_client_get_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_socket_client_get_timeout(GSocketClient *client)
     * }
     */
    public static int g_socket_client_get_timeout(MemorySegment client) {
        var mh$ = g_socket_client_get_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_get_timeout", client);
            }
            return (int)mh$.invokeExact(client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_set_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_set_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_timeout(GSocketClient *client, guint timeout)
     * }
     */
    public static FunctionDescriptor g_socket_client_set_timeout$descriptor() {
        return g_socket_client_set_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_timeout(GSocketClient *client, guint timeout)
     * }
     */
    public static MethodHandle g_socket_client_set_timeout$handle() {
        return g_socket_client_set_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_set_timeout(GSocketClient *client, guint timeout)
     * }
     */
    public static void g_socket_client_set_timeout(MemorySegment client, int timeout) {
        var mh$ = g_socket_client_set_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_set_timeout", client, timeout);
            }
            mh$.invokeExact(client, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_get_enable_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_get_enable_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_client_get_enable_proxy(GSocketClient *client)
     * }
     */
    public static FunctionDescriptor g_socket_client_get_enable_proxy$descriptor() {
        return g_socket_client_get_enable_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_client_get_enable_proxy(GSocketClient *client)
     * }
     */
    public static MethodHandle g_socket_client_get_enable_proxy$handle() {
        return g_socket_client_get_enable_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_client_get_enable_proxy(GSocketClient *client)
     * }
     */
    public static int g_socket_client_get_enable_proxy(MemorySegment client) {
        var mh$ = g_socket_client_get_enable_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_get_enable_proxy", client);
            }
            return (int)mh$.invokeExact(client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_set_enable_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_set_enable_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_enable_proxy(GSocketClient *client, gboolean enable)
     * }
     */
    public static FunctionDescriptor g_socket_client_set_enable_proxy$descriptor() {
        return g_socket_client_set_enable_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_enable_proxy(GSocketClient *client, gboolean enable)
     * }
     */
    public static MethodHandle g_socket_client_set_enable_proxy$handle() {
        return g_socket_client_set_enable_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_set_enable_proxy(GSocketClient *client, gboolean enable)
     * }
     */
    public static void g_socket_client_set_enable_proxy(MemorySegment client, int enable) {
        var mh$ = g_socket_client_set_enable_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_set_enable_proxy", client, enable);
            }
            mh$.invokeExact(client, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_get_tls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_get_tls"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_client_get_tls(GSocketClient *client)
     * }
     */
    public static FunctionDescriptor g_socket_client_get_tls$descriptor() {
        return g_socket_client_get_tls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_client_get_tls(GSocketClient *client)
     * }
     */
    public static MethodHandle g_socket_client_get_tls$handle() {
        return g_socket_client_get_tls.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_client_get_tls(GSocketClient *client)
     * }
     */
    public static int g_socket_client_get_tls(MemorySegment client) {
        var mh$ = g_socket_client_get_tls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_get_tls", client);
            }
            return (int)mh$.invokeExact(client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_set_tls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_set_tls"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_tls(GSocketClient *client, gboolean tls)
     * }
     */
    public static FunctionDescriptor g_socket_client_set_tls$descriptor() {
        return g_socket_client_set_tls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_tls(GSocketClient *client, gboolean tls)
     * }
     */
    public static MethodHandle g_socket_client_set_tls$handle() {
        return g_socket_client_set_tls.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_set_tls(GSocketClient *client, gboolean tls)
     * }
     */
    public static void g_socket_client_set_tls(MemorySegment client, int tls) {
        var mh$ = g_socket_client_set_tls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_set_tls", client, tls);
            }
            mh$.invokeExact(client, tls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_get_tls_validation_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_get_tls_validation_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_socket_client_get_tls_validation_flags(GSocketClient *client)
     * }
     */
    public static FunctionDescriptor g_socket_client_get_tls_validation_flags$descriptor() {
        return g_socket_client_get_tls_validation_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_socket_client_get_tls_validation_flags(GSocketClient *client)
     * }
     */
    public static MethodHandle g_socket_client_get_tls_validation_flags$handle() {
        return g_socket_client_get_tls_validation_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_socket_client_get_tls_validation_flags(GSocketClient *client)
     * }
     */
    public static int g_socket_client_get_tls_validation_flags(MemorySegment client) {
        var mh$ = g_socket_client_get_tls_validation_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_get_tls_validation_flags", client);
            }
            return (int)mh$.invokeExact(client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_set_tls_validation_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_set_tls_validation_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_tls_validation_flags(GSocketClient *client, GTlsCertificateFlags flags)
     * }
     */
    public static FunctionDescriptor g_socket_client_set_tls_validation_flags$descriptor() {
        return g_socket_client_set_tls_validation_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_tls_validation_flags(GSocketClient *client, GTlsCertificateFlags flags)
     * }
     */
    public static MethodHandle g_socket_client_set_tls_validation_flags$handle() {
        return g_socket_client_set_tls_validation_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_set_tls_validation_flags(GSocketClient *client, GTlsCertificateFlags flags)
     * }
     */
    public static void g_socket_client_set_tls_validation_flags(MemorySegment client, int flags) {
        var mh$ = g_socket_client_set_tls_validation_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_set_tls_validation_flags", client, flags);
            }
            mh$.invokeExact(client, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_get_proxy_resolver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_get_proxy_resolver"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GProxyResolver *g_socket_client_get_proxy_resolver(GSocketClient *client)
     * }
     */
    public static FunctionDescriptor g_socket_client_get_proxy_resolver$descriptor() {
        return g_socket_client_get_proxy_resolver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GProxyResolver *g_socket_client_get_proxy_resolver(GSocketClient *client)
     * }
     */
    public static MethodHandle g_socket_client_get_proxy_resolver$handle() {
        return g_socket_client_get_proxy_resolver.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GProxyResolver *g_socket_client_get_proxy_resolver(GSocketClient *client)
     * }
     */
    public static MemorySegment g_socket_client_get_proxy_resolver(MemorySegment client) {
        var mh$ = g_socket_client_get_proxy_resolver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_get_proxy_resolver", client);
            }
            return (MemorySegment)mh$.invokeExact(client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_set_proxy_resolver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_set_proxy_resolver"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_proxy_resolver(GSocketClient *client, GProxyResolver *proxy_resolver)
     * }
     */
    public static FunctionDescriptor g_socket_client_set_proxy_resolver$descriptor() {
        return g_socket_client_set_proxy_resolver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_set_proxy_resolver(GSocketClient *client, GProxyResolver *proxy_resolver)
     * }
     */
    public static MethodHandle g_socket_client_set_proxy_resolver$handle() {
        return g_socket_client_set_proxy_resolver.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_set_proxy_resolver(GSocketClient *client, GProxyResolver *proxy_resolver)
     * }
     */
    public static void g_socket_client_set_proxy_resolver(MemorySegment client, MemorySegment proxy_resolver) {
        var mh$ = g_socket_client_set_proxy_resolver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_set_proxy_resolver", client, proxy_resolver);
            }
            mh$.invokeExact(client, proxy_resolver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect(GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect$descriptor() {
        return g_socket_client_connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect(GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_client_connect$handle() {
        return g_socket_client_connect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect(GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_socket_client_connect(MemorySegment client, MemorySegment connectable, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_client_connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect", client, connectable, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(client, connectable, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_to_host {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_to_host"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_host(GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_to_host$descriptor() {
        return g_socket_client_connect_to_host.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_host(GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_client_connect_to_host$handle() {
        return g_socket_client_connect_to_host.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_host(GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_socket_client_connect_to_host(MemorySegment client, MemorySegment host_and_port, short default_port, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_client_connect_to_host.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_to_host", client, host_and_port, default_port, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(client, host_and_port, default_port, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_to_service {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_to_service"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_service(GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_to_service$descriptor() {
        return g_socket_client_connect_to_service.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_service(GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_client_connect_to_service$handle() {
        return g_socket_client_connect_to_service.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_service(GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_socket_client_connect_to_service(MemorySegment client, MemorySegment domain, MemorySegment service, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_client_connect_to_service.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_to_service", client, domain, service, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(client, domain, service, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_to_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_to_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_uri(GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_to_uri$descriptor() {
        return g_socket_client_connect_to_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_uri(GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_client_connect_to_uri$handle() {
        return g_socket_client_connect_to_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_uri(GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_socket_client_connect_to_uri(MemorySegment client, MemorySegment uri, short default_port, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_client_connect_to_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_to_uri", client, uri, default_port, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(client, uri, default_port, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_connect_async(GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_async$descriptor() {
        return g_socket_client_connect_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_connect_async(GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_socket_client_connect_async$handle() {
        return g_socket_client_connect_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_connect_async(GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_socket_client_connect_async(MemorySegment client, MemorySegment connectable, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_socket_client_connect_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_async", client, connectable, cancellable, callback, user_data);
            }
            mh$.invokeExact(client, connectable, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_finish$descriptor() {
        return g_socket_client_connect_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_socket_client_connect_finish$handle() {
        return g_socket_client_connect_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_socket_client_connect_finish(MemorySegment client, MemorySegment result, MemorySegment error) {
        var mh$ = g_socket_client_connect_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_finish", client, result, error);
            }
            return (MemorySegment)mh$.invokeExact(client, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_to_host_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_to_host_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_connect_to_host_async(GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_to_host_async$descriptor() {
        return g_socket_client_connect_to_host_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_connect_to_host_async(GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_socket_client_connect_to_host_async$handle() {
        return g_socket_client_connect_to_host_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_connect_to_host_async(GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_socket_client_connect_to_host_async(MemorySegment client, MemorySegment host_and_port, short default_port, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_socket_client_connect_to_host_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_to_host_async", client, host_and_port, default_port, cancellable, callback, user_data);
            }
            mh$.invokeExact(client, host_and_port, default_port, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_to_host_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_to_host_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_host_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_to_host_finish$descriptor() {
        return g_socket_client_connect_to_host_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_host_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_socket_client_connect_to_host_finish$handle() {
        return g_socket_client_connect_to_host_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_host_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_socket_client_connect_to_host_finish(MemorySegment client, MemorySegment result, MemorySegment error) {
        var mh$ = g_socket_client_connect_to_host_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_to_host_finish", client, result, error);
            }
            return (MemorySegment)mh$.invokeExact(client, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_to_service_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_to_service_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_connect_to_service_async(GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_to_service_async$descriptor() {
        return g_socket_client_connect_to_service_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_connect_to_service_async(GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_socket_client_connect_to_service_async$handle() {
        return g_socket_client_connect_to_service_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_connect_to_service_async(GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_socket_client_connect_to_service_async(MemorySegment client, MemorySegment domain, MemorySegment service, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_socket_client_connect_to_service_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_to_service_async", client, domain, service, cancellable, callback, user_data);
            }
            mh$.invokeExact(client, domain, service, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_to_service_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_to_service_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_service_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_to_service_finish$descriptor() {
        return g_socket_client_connect_to_service_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_service_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_socket_client_connect_to_service_finish$handle() {
        return g_socket_client_connect_to_service_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_service_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_socket_client_connect_to_service_finish(MemorySegment client, MemorySegment result, MemorySegment error) {
        var mh$ = g_socket_client_connect_to_service_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_to_service_finish", client, result, error);
            }
            return (MemorySegment)mh$.invokeExact(client, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_to_uri_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_to_uri_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_connect_to_uri_async(GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_to_uri_async$descriptor() {
        return g_socket_client_connect_to_uri_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_connect_to_uri_async(GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_socket_client_connect_to_uri_async$handle() {
        return g_socket_client_connect_to_uri_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_connect_to_uri_async(GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_socket_client_connect_to_uri_async(MemorySegment client, MemorySegment uri, short default_port, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_socket_client_connect_to_uri_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_to_uri_async", client, uri, default_port, cancellable, callback, user_data);
            }
            mh$.invokeExact(client, uri, default_port, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_connect_to_uri_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_connect_to_uri_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_uri_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_client_connect_to_uri_finish$descriptor() {
        return g_socket_client_connect_to_uri_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_uri_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_socket_client_connect_to_uri_finish$handle() {
        return g_socket_client_connect_to_uri_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_client_connect_to_uri_finish(GSocketClient *client, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_socket_client_connect_to_uri_finish(MemorySegment client, MemorySegment result, MemorySegment error) {
        var mh$ = g_socket_client_connect_to_uri_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_connect_to_uri_finish", client, result, error);
            }
            return (MemorySegment)mh$.invokeExact(client, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_client_add_application_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_client_add_application_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_client_add_application_proxy(GSocketClient *client, const gchar *protocol)
     * }
     */
    public static FunctionDescriptor g_socket_client_add_application_proxy$descriptor() {
        return g_socket_client_add_application_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_client_add_application_proxy(GSocketClient *client, const gchar *protocol)
     * }
     */
    public static MethodHandle g_socket_client_add_application_proxy$handle() {
        return g_socket_client_add_application_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_client_add_application_proxy(GSocketClient *client, const gchar *protocol)
     * }
     */
    public static void g_socket_client_add_application_proxy(MemorySegment client, MemorySegment protocol) {
        var mh$ = g_socket_client_add_application_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_client_add_application_proxy", client, protocol);
            }
            mh$.invokeExact(client, protocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connectable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connectable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_connectable_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_connectable_get_type$descriptor() {
        return g_socket_connectable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_connectable_get_type()
     * }
     */
    public static MethodHandle g_socket_connectable_get_type$handle() {
        return g_socket_connectable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_connectable_get_type()
     * }
     */
    public static long g_socket_connectable_get_type() {
        var mh$ = g_socket_connectable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connectable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connectable_enumerate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connectable_enumerate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddressEnumerator *g_socket_connectable_enumerate(GSocketConnectable *connectable)
     * }
     */
    public static FunctionDescriptor g_socket_connectable_enumerate$descriptor() {
        return g_socket_connectable_enumerate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddressEnumerator *g_socket_connectable_enumerate(GSocketConnectable *connectable)
     * }
     */
    public static MethodHandle g_socket_connectable_enumerate$handle() {
        return g_socket_connectable_enumerate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddressEnumerator *g_socket_connectable_enumerate(GSocketConnectable *connectable)
     * }
     */
    public static MemorySegment g_socket_connectable_enumerate(MemorySegment connectable) {
        var mh$ = g_socket_connectable_enumerate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connectable_enumerate", connectable);
            }
            return (MemorySegment)mh$.invokeExact(connectable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connectable_proxy_enumerate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connectable_proxy_enumerate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddressEnumerator *g_socket_connectable_proxy_enumerate(GSocketConnectable *connectable)
     * }
     */
    public static FunctionDescriptor g_socket_connectable_proxy_enumerate$descriptor() {
        return g_socket_connectable_proxy_enumerate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddressEnumerator *g_socket_connectable_proxy_enumerate(GSocketConnectable *connectable)
     * }
     */
    public static MethodHandle g_socket_connectable_proxy_enumerate$handle() {
        return g_socket_connectable_proxy_enumerate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddressEnumerator *g_socket_connectable_proxy_enumerate(GSocketConnectable *connectable)
     * }
     */
    public static MemorySegment g_socket_connectable_proxy_enumerate(MemorySegment connectable) {
        var mh$ = g_socket_connectable_proxy_enumerate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connectable_proxy_enumerate", connectable);
            }
            return (MemorySegment)mh$.invokeExact(connectable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connectable_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connectable_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_socket_connectable_to_string(GSocketConnectable *connectable)
     * }
     */
    public static FunctionDescriptor g_socket_connectable_to_string$descriptor() {
        return g_socket_connectable_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_socket_connectable_to_string(GSocketConnectable *connectable)
     * }
     */
    public static MethodHandle g_socket_connectable_to_string$handle() {
        return g_socket_connectable_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_socket_connectable_to_string(GSocketConnectable *connectable)
     * }
     */
    public static MemorySegment g_socket_connectable_to_string(MemorySegment connectable) {
        var mh$ = g_socket_connectable_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connectable_to_string", connectable);
            }
            return (MemorySegment)mh$.invokeExact(connectable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_connection_get_type$descriptor() {
        return g_socket_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_connection_get_type()
     * }
     */
    public static MethodHandle g_socket_connection_get_type$handle() {
        return g_socket_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_connection_get_type()
     * }
     */
    public static long g_socket_connection_get_type() {
        var mh$ = g_socket_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_is_connected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_is_connected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_connection_is_connected(GSocketConnection *connection)
     * }
     */
    public static FunctionDescriptor g_socket_connection_is_connected$descriptor() {
        return g_socket_connection_is_connected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_connection_is_connected(GSocketConnection *connection)
     * }
     */
    public static MethodHandle g_socket_connection_is_connected$handle() {
        return g_socket_connection_is_connected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_connection_is_connected(GSocketConnection *connection)
     * }
     */
    public static int g_socket_connection_is_connected(MemorySegment connection) {
        var mh$ = g_socket_connection_is_connected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_is_connected", connection);
            }
            return (int)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_connect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_connection_connect(GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_connection_connect$descriptor() {
        return g_socket_connection_connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_connection_connect(GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_connection_connect$handle() {
        return g_socket_connection_connect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_connection_connect(GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_socket_connection_connect(MemorySegment connection, MemorySegment address, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_connection_connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_connect", connection, address, cancellable, error);
            }
            return (int)mh$.invokeExact(connection, address, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_connect_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_connect_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_connection_connect_async(GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_socket_connection_connect_async$descriptor() {
        return g_socket_connection_connect_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_connection_connect_async(GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_socket_connection_connect_async$handle() {
        return g_socket_connection_connect_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_connection_connect_async(GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_socket_connection_connect_async(MemorySegment connection, MemorySegment address, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_socket_connection_connect_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_connect_async", connection, address, cancellable, callback, user_data);
            }
            mh$.invokeExact(connection, address, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_connect_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_connect_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_connection_connect_finish(GSocketConnection *connection, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_connection_connect_finish$descriptor() {
        return g_socket_connection_connect_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_connection_connect_finish(GSocketConnection *connection, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_socket_connection_connect_finish$handle() {
        return g_socket_connection_connect_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_connection_connect_finish(GSocketConnection *connection, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_socket_connection_connect_finish(MemorySegment connection, MemorySegment result, MemorySegment error) {
        var mh$ = g_socket_connection_connect_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_connect_finish", connection, result, error);
            }
            return (int)mh$.invokeExact(connection, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_get_socket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_get_socket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_connection_get_socket(GSocketConnection *connection)
     * }
     */
    public static FunctionDescriptor g_socket_connection_get_socket$descriptor() {
        return g_socket_connection_get_socket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_connection_get_socket(GSocketConnection *connection)
     * }
     */
    public static MethodHandle g_socket_connection_get_socket$handle() {
        return g_socket_connection_get_socket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocket *g_socket_connection_get_socket(GSocketConnection *connection)
     * }
     */
    public static MemorySegment g_socket_connection_get_socket(MemorySegment connection) {
        var mh$ = g_socket_connection_get_socket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_get_socket", connection);
            }
            return (MemorySegment)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_get_local_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_get_local_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_connection_get_local_address(GSocketConnection *connection, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_connection_get_local_address$descriptor() {
        return g_socket_connection_get_local_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_connection_get_local_address(GSocketConnection *connection, GError **error)
     * }
     */
    public static MethodHandle g_socket_connection_get_local_address$handle() {
        return g_socket_connection_get_local_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_connection_get_local_address(GSocketConnection *connection, GError **error)
     * }
     */
    public static MemorySegment g_socket_connection_get_local_address(MemorySegment connection, MemorySegment error) {
        var mh$ = g_socket_connection_get_local_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_get_local_address", connection, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_get_remote_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_get_remote_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_connection_get_remote_address(GSocketConnection *connection, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_connection_get_remote_address$descriptor() {
        return g_socket_connection_get_remote_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_connection_get_remote_address(GSocketConnection *connection, GError **error)
     * }
     */
    public static MethodHandle g_socket_connection_get_remote_address$handle() {
        return g_socket_connection_get_remote_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_socket_connection_get_remote_address(GSocketConnection *connection, GError **error)
     * }
     */
    public static MemorySegment g_socket_connection_get_remote_address(MemorySegment connection, MemorySegment error) {
        var mh$ = g_socket_connection_get_remote_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_get_remote_address", connection, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_factory_register_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_factory_register_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_connection_factory_register_type(GType g_type, GSocketFamily family, GSocketType type, gint protocol)
     * }
     */
    public static FunctionDescriptor g_socket_connection_factory_register_type$descriptor() {
        return g_socket_connection_factory_register_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_connection_factory_register_type(GType g_type, GSocketFamily family, GSocketType type, gint protocol)
     * }
     */
    public static MethodHandle g_socket_connection_factory_register_type$handle() {
        return g_socket_connection_factory_register_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_connection_factory_register_type(GType g_type, GSocketFamily family, GSocketType type, gint protocol)
     * }
     */
    public static void g_socket_connection_factory_register_type(long g_type, int family, int type, int protocol) {
        var mh$ = g_socket_connection_factory_register_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_factory_register_type", g_type, family, type, protocol);
            }
            mh$.invokeExact(g_type, family, type, protocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_factory_lookup_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_factory_lookup_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_connection_factory_lookup_type(GSocketFamily family, GSocketType type, gint protocol_id)
     * }
     */
    public static FunctionDescriptor g_socket_connection_factory_lookup_type$descriptor() {
        return g_socket_connection_factory_lookup_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_connection_factory_lookup_type(GSocketFamily family, GSocketType type, gint protocol_id)
     * }
     */
    public static MethodHandle g_socket_connection_factory_lookup_type$handle() {
        return g_socket_connection_factory_lookup_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_connection_factory_lookup_type(GSocketFamily family, GSocketType type, gint protocol_id)
     * }
     */
    public static long g_socket_connection_factory_lookup_type(int family, int type, int protocol_id) {
        var mh$ = g_socket_connection_factory_lookup_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_factory_lookup_type", family, type, protocol_id);
            }
            return (long)mh$.invokeExact(family, type, protocol_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_connection_factory_create_connection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_connection_factory_create_connection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_connection_factory_create_connection(GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_socket_connection_factory_create_connection$descriptor() {
        return g_socket_connection_factory_create_connection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_connection_factory_create_connection(GSocket *socket)
     * }
     */
    public static MethodHandle g_socket_connection_factory_create_connection$handle() {
        return g_socket_connection_factory_create_connection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_connection_factory_create_connection(GSocket *socket)
     * }
     */
    public static MemorySegment g_socket_connection_factory_create_connection(MemorySegment socket) {
        var mh$ = g_socket_connection_factory_create_connection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_connection_factory_create_connection", socket);
            }
            return (MemorySegment)mh$.invokeExact(socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_control_message_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_control_message_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_control_message_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_control_message_get_type$descriptor() {
        return g_socket_control_message_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_control_message_get_type()
     * }
     */
    public static MethodHandle g_socket_control_message_get_type$handle() {
        return g_socket_control_message_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_control_message_get_type()
     * }
     */
    public static long g_socket_control_message_get_type() {
        var mh$ = g_socket_control_message_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_control_message_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_control_message_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_control_message_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_socket_control_message_get_size(GSocketControlMessage *message)
     * }
     */
    public static FunctionDescriptor g_socket_control_message_get_size$descriptor() {
        return g_socket_control_message_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_socket_control_message_get_size(GSocketControlMessage *message)
     * }
     */
    public static MethodHandle g_socket_control_message_get_size$handle() {
        return g_socket_control_message_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_socket_control_message_get_size(GSocketControlMessage *message)
     * }
     */
    public static long g_socket_control_message_get_size(MemorySegment message) {
        var mh$ = g_socket_control_message_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_control_message_get_size", message);
            }
            return (long)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_control_message_get_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_control_message_get_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_socket_control_message_get_level(GSocketControlMessage *message)
     * }
     */
    public static FunctionDescriptor g_socket_control_message_get_level$descriptor() {
        return g_socket_control_message_get_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_socket_control_message_get_level(GSocketControlMessage *message)
     * }
     */
    public static MethodHandle g_socket_control_message_get_level$handle() {
        return g_socket_control_message_get_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_socket_control_message_get_level(GSocketControlMessage *message)
     * }
     */
    public static int g_socket_control_message_get_level(MemorySegment message) {
        var mh$ = g_socket_control_message_get_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_control_message_get_level", message);
            }
            return (int)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_control_message_get_msg_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_control_message_get_msg_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_socket_control_message_get_msg_type(GSocketControlMessage *message)
     * }
     */
    public static FunctionDescriptor g_socket_control_message_get_msg_type$descriptor() {
        return g_socket_control_message_get_msg_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_socket_control_message_get_msg_type(GSocketControlMessage *message)
     * }
     */
    public static MethodHandle g_socket_control_message_get_msg_type$handle() {
        return g_socket_control_message_get_msg_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_socket_control_message_get_msg_type(GSocketControlMessage *message)
     * }
     */
    public static int g_socket_control_message_get_msg_type(MemorySegment message) {
        var mh$ = g_socket_control_message_get_msg_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_control_message_get_msg_type", message);
            }
            return (int)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_control_message_serialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_control_message_serialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_control_message_serialize(GSocketControlMessage *message, gpointer data)
     * }
     */
    public static FunctionDescriptor g_socket_control_message_serialize$descriptor() {
        return g_socket_control_message_serialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_control_message_serialize(GSocketControlMessage *message, gpointer data)
     * }
     */
    public static MethodHandle g_socket_control_message_serialize$handle() {
        return g_socket_control_message_serialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_control_message_serialize(GSocketControlMessage *message, gpointer data)
     * }
     */
    public static void g_socket_control_message_serialize(MemorySegment message, MemorySegment data) {
        var mh$ = g_socket_control_message_serialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_control_message_serialize", message, data);
            }
            mh$.invokeExact(message, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_control_message_deserialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_control_message_deserialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketControlMessage *g_socket_control_message_deserialize(int level, int type, gsize size, gpointer data)
     * }
     */
    public static FunctionDescriptor g_socket_control_message_deserialize$descriptor() {
        return g_socket_control_message_deserialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketControlMessage *g_socket_control_message_deserialize(int level, int type, gsize size, gpointer data)
     * }
     */
    public static MethodHandle g_socket_control_message_deserialize$handle() {
        return g_socket_control_message_deserialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketControlMessage *g_socket_control_message_deserialize(int level, int type, gsize size, gpointer data)
     * }
     */
    public static MemorySegment g_socket_control_message_deserialize(int level, int type, long size, MemorySegment data) {
        var mh$ = g_socket_control_message_deserialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_control_message_deserialize", level, type, size, data);
            }
            return (MemorySegment)mh$.invokeExact(level, type, size, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_listener_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_listener_get_type$descriptor() {
        return g_socket_listener_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_listener_get_type()
     * }
     */
    public static MethodHandle g_socket_listener_get_type$handle() {
        return g_socket_listener_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_listener_get_type()
     * }
     */
    public static long g_socket_listener_get_type() {
        var mh$ = g_socket_listener_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketListener *g_socket_listener_new()
     * }
     */
    public static FunctionDescriptor g_socket_listener_new$descriptor() {
        return g_socket_listener_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketListener *g_socket_listener_new()
     * }
     */
    public static MethodHandle g_socket_listener_new$handle() {
        return g_socket_listener_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketListener *g_socket_listener_new()
     * }
     */
    public static MemorySegment g_socket_listener_new() {
        var mh$ = g_socket_listener_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_set_backlog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_set_backlog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_listener_set_backlog(GSocketListener *listener, int listen_backlog)
     * }
     */
    public static FunctionDescriptor g_socket_listener_set_backlog$descriptor() {
        return g_socket_listener_set_backlog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_listener_set_backlog(GSocketListener *listener, int listen_backlog)
     * }
     */
    public static MethodHandle g_socket_listener_set_backlog$handle() {
        return g_socket_listener_set_backlog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_listener_set_backlog(GSocketListener *listener, int listen_backlog)
     * }
     */
    public static void g_socket_listener_set_backlog(MemorySegment listener, int listen_backlog) {
        var mh$ = g_socket_listener_set_backlog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_set_backlog", listener, listen_backlog);
            }
            mh$.invokeExact(listener, listen_backlog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_add_socket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_add_socket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_listener_add_socket(GSocketListener *listener, GSocket *socket, GObject *source_object, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_listener_add_socket$descriptor() {
        return g_socket_listener_add_socket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_listener_add_socket(GSocketListener *listener, GSocket *socket, GObject *source_object, GError **error)
     * }
     */
    public static MethodHandle g_socket_listener_add_socket$handle() {
        return g_socket_listener_add_socket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_listener_add_socket(GSocketListener *listener, GSocket *socket, GObject *source_object, GError **error)
     * }
     */
    public static int g_socket_listener_add_socket(MemorySegment listener, MemorySegment socket, MemorySegment source_object, MemorySegment error) {
        var mh$ = g_socket_listener_add_socket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_add_socket", listener, socket, source_object, error);
            }
            return (int)mh$.invokeExact(listener, socket, source_object, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_add_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_add_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_listener_add_address(GSocketListener *listener, GSocketAddress *address, GSocketType type, GSocketProtocol protocol, GObject *source_object, GSocketAddress **effective_address, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_listener_add_address$descriptor() {
        return g_socket_listener_add_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_listener_add_address(GSocketListener *listener, GSocketAddress *address, GSocketType type, GSocketProtocol protocol, GObject *source_object, GSocketAddress **effective_address, GError **error)
     * }
     */
    public static MethodHandle g_socket_listener_add_address$handle() {
        return g_socket_listener_add_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_listener_add_address(GSocketListener *listener, GSocketAddress *address, GSocketType type, GSocketProtocol protocol, GObject *source_object, GSocketAddress **effective_address, GError **error)
     * }
     */
    public static int g_socket_listener_add_address(MemorySegment listener, MemorySegment address, int type, int protocol, MemorySegment source_object, MemorySegment effective_address, MemorySegment error) {
        var mh$ = g_socket_listener_add_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_add_address", listener, address, type, protocol, source_object, effective_address, error);
            }
            return (int)mh$.invokeExact(listener, address, type, protocol, source_object, effective_address, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_add_inet_port {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_add_inet_port"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_listener_add_inet_port(GSocketListener *listener, guint16 port, GObject *source_object, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_listener_add_inet_port$descriptor() {
        return g_socket_listener_add_inet_port.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_listener_add_inet_port(GSocketListener *listener, guint16 port, GObject *source_object, GError **error)
     * }
     */
    public static MethodHandle g_socket_listener_add_inet_port$handle() {
        return g_socket_listener_add_inet_port.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_listener_add_inet_port(GSocketListener *listener, guint16 port, GObject *source_object, GError **error)
     * }
     */
    public static int g_socket_listener_add_inet_port(MemorySegment listener, short port, MemorySegment source_object, MemorySegment error) {
        var mh$ = g_socket_listener_add_inet_port.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_add_inet_port", listener, port, source_object, error);
            }
            return (int)mh$.invokeExact(listener, port, source_object, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_add_any_inet_port {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_add_any_inet_port"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 g_socket_listener_add_any_inet_port(GSocketListener *listener, GObject *source_object, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_listener_add_any_inet_port$descriptor() {
        return g_socket_listener_add_any_inet_port.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 g_socket_listener_add_any_inet_port(GSocketListener *listener, GObject *source_object, GError **error)
     * }
     */
    public static MethodHandle g_socket_listener_add_any_inet_port$handle() {
        return g_socket_listener_add_any_inet_port.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 g_socket_listener_add_any_inet_port(GSocketListener *listener, GObject *source_object, GError **error)
     * }
     */
    public static short g_socket_listener_add_any_inet_port(MemorySegment listener, MemorySegment source_object, MemorySegment error) {
        var mh$ = g_socket_listener_add_any_inet_port.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_add_any_inet_port", listener, source_object, error);
            }
            return (short)mh$.invokeExact(listener, source_object, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_accept_socket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_accept_socket"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_listener_accept_socket(GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_listener_accept_socket$descriptor() {
        return g_socket_listener_accept_socket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_listener_accept_socket(GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_listener_accept_socket$handle() {
        return g_socket_listener_accept_socket.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocket *g_socket_listener_accept_socket(GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_socket_listener_accept_socket(MemorySegment listener, MemorySegment source_object, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_listener_accept_socket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_accept_socket", listener, source_object, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(listener, source_object, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_accept_socket_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_accept_socket_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_listener_accept_socket_async(GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_socket_listener_accept_socket_async$descriptor() {
        return g_socket_listener_accept_socket_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_listener_accept_socket_async(GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_socket_listener_accept_socket_async$handle() {
        return g_socket_listener_accept_socket_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_listener_accept_socket_async(GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_socket_listener_accept_socket_async(MemorySegment listener, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_socket_listener_accept_socket_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_accept_socket_async", listener, cancellable, callback, user_data);
            }
            mh$.invokeExact(listener, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_accept_socket_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_accept_socket_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_listener_accept_socket_finish(GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_listener_accept_socket_finish$descriptor() {
        return g_socket_listener_accept_socket_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocket *g_socket_listener_accept_socket_finish(GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error)
     * }
     */
    public static MethodHandle g_socket_listener_accept_socket_finish$handle() {
        return g_socket_listener_accept_socket_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocket *g_socket_listener_accept_socket_finish(GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error)
     * }
     */
    public static MemorySegment g_socket_listener_accept_socket_finish(MemorySegment listener, MemorySegment result, MemorySegment source_object, MemorySegment error) {
        var mh$ = g_socket_listener_accept_socket_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_accept_socket_finish", listener, result, source_object, error);
            }
            return (MemorySegment)mh$.invokeExact(listener, result, source_object, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_accept {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_accept"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_listener_accept(GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_listener_accept$descriptor() {
        return g_socket_listener_accept.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_listener_accept(GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_socket_listener_accept$handle() {
        return g_socket_listener_accept.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_listener_accept(GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_socket_listener_accept(MemorySegment listener, MemorySegment source_object, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_socket_listener_accept.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_accept", listener, source_object, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(listener, source_object, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_accept_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_accept_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_listener_accept_async(GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_socket_listener_accept_async$descriptor() {
        return g_socket_listener_accept_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_listener_accept_async(GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_socket_listener_accept_async$handle() {
        return g_socket_listener_accept_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_listener_accept_async(GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_socket_listener_accept_async(MemorySegment listener, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_socket_listener_accept_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_accept_async", listener, cancellable, callback, user_data);
            }
            mh$.invokeExact(listener, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_accept_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_accept_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_listener_accept_finish(GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error)
     * }
     */
    public static FunctionDescriptor g_socket_listener_accept_finish$descriptor() {
        return g_socket_listener_accept_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_listener_accept_finish(GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error)
     * }
     */
    public static MethodHandle g_socket_listener_accept_finish$handle() {
        return g_socket_listener_accept_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_socket_listener_accept_finish(GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error)
     * }
     */
    public static MemorySegment g_socket_listener_accept_finish(MemorySegment listener, MemorySegment result, MemorySegment source_object, MemorySegment error) {
        var mh$ = g_socket_listener_accept_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_accept_finish", listener, result, source_object, error);
            }
            return (MemorySegment)mh$.invokeExact(listener, result, source_object, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_listener_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_listener_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_listener_close(GSocketListener *listener)
     * }
     */
    public static FunctionDescriptor g_socket_listener_close$descriptor() {
        return g_socket_listener_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_listener_close(GSocketListener *listener)
     * }
     */
    public static MethodHandle g_socket_listener_close$handle() {
        return g_socket_listener_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_listener_close(GSocketListener *listener)
     * }
     */
    public static void g_socket_listener_close(MemorySegment listener) {
        var mh$ = g_socket_listener_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_listener_close", listener);
            }
            mh$.invokeExact(listener);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_service_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_service_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_socket_service_get_type()
     * }
     */
    public static FunctionDescriptor g_socket_service_get_type$descriptor() {
        return g_socket_service_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_socket_service_get_type()
     * }
     */
    public static MethodHandle g_socket_service_get_type$handle() {
        return g_socket_service_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_socket_service_get_type()
     * }
     */
    public static long g_socket_service_get_type() {
        var mh$ = g_socket_service_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_service_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_service_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_service_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketService *g_socket_service_new()
     * }
     */
    public static FunctionDescriptor g_socket_service_new$descriptor() {
        return g_socket_service_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketService *g_socket_service_new()
     * }
     */
    public static MethodHandle g_socket_service_new$handle() {
        return g_socket_service_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketService *g_socket_service_new()
     * }
     */
    public static MemorySegment g_socket_service_new() {
        var mh$ = g_socket_service_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_service_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_service_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_service_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_service_start(GSocketService *service)
     * }
     */
    public static FunctionDescriptor g_socket_service_start$descriptor() {
        return g_socket_service_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_service_start(GSocketService *service)
     * }
     */
    public static MethodHandle g_socket_service_start$handle() {
        return g_socket_service_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_service_start(GSocketService *service)
     * }
     */
    public static void g_socket_service_start(MemorySegment service) {
        var mh$ = g_socket_service_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_service_start", service);
            }
            mh$.invokeExact(service);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_service_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_service_stop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_socket_service_stop(GSocketService *service)
     * }
     */
    public static FunctionDescriptor g_socket_service_stop$descriptor() {
        return g_socket_service_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_socket_service_stop(GSocketService *service)
     * }
     */
    public static MethodHandle g_socket_service_stop$handle() {
        return g_socket_service_stop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_socket_service_stop(GSocketService *service)
     * }
     */
    public static void g_socket_service_stop(MemorySegment service) {
        var mh$ = g_socket_service_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_service_stop", service);
            }
            mh$.invokeExact(service);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_socket_service_is_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_socket_service_is_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_socket_service_is_active(GSocketService *service)
     * }
     */
    public static FunctionDescriptor g_socket_service_is_active$descriptor() {
        return g_socket_service_is_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_socket_service_is_active(GSocketService *service)
     * }
     */
    public static MethodHandle g_socket_service_is_active$handle() {
        return g_socket_service_is_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_socket_service_is_active(GSocketService *service)
     * }
     */
    public static int g_socket_service_is_active(MemorySegment service) {
        var mh$ = g_socket_service_is_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_socket_service_is_active", service);
            }
            return (int)mh$.invokeExact(service);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_srv_target_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_srv_target_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_srv_target_get_type()
     * }
     */
    public static FunctionDescriptor g_srv_target_get_type$descriptor() {
        return g_srv_target_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_srv_target_get_type()
     * }
     */
    public static MethodHandle g_srv_target_get_type$handle() {
        return g_srv_target_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_srv_target_get_type()
     * }
     */
    public static long g_srv_target_get_type() {
        var mh$ = g_srv_target_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_srv_target_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_srv_target_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_srv_target_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSrvTarget *g_srv_target_new(const gchar *hostname, guint16 port, guint16 priority, guint16 weight)
     * }
     */
    public static FunctionDescriptor g_srv_target_new$descriptor() {
        return g_srv_target_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSrvTarget *g_srv_target_new(const gchar *hostname, guint16 port, guint16 priority, guint16 weight)
     * }
     */
    public static MethodHandle g_srv_target_new$handle() {
        return g_srv_target_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSrvTarget *g_srv_target_new(const gchar *hostname, guint16 port, guint16 priority, guint16 weight)
     * }
     */
    public static MemorySegment g_srv_target_new(MemorySegment hostname, short port, short priority, short weight) {
        var mh$ = g_srv_target_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_srv_target_new", hostname, port, priority, weight);
            }
            return (MemorySegment)mh$.invokeExact(hostname, port, priority, weight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_srv_target_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_srv_target_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSrvTarget *g_srv_target_copy(GSrvTarget *target)
     * }
     */
    public static FunctionDescriptor g_srv_target_copy$descriptor() {
        return g_srv_target_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSrvTarget *g_srv_target_copy(GSrvTarget *target)
     * }
     */
    public static MethodHandle g_srv_target_copy$handle() {
        return g_srv_target_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSrvTarget *g_srv_target_copy(GSrvTarget *target)
     * }
     */
    public static MemorySegment g_srv_target_copy(MemorySegment target) {
        var mh$ = g_srv_target_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_srv_target_copy", target);
            }
            return (MemorySegment)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_srv_target_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_srv_target_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_srv_target_free(GSrvTarget *target)
     * }
     */
    public static FunctionDescriptor g_srv_target_free$descriptor() {
        return g_srv_target_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_srv_target_free(GSrvTarget *target)
     * }
     */
    public static MethodHandle g_srv_target_free$handle() {
        return g_srv_target_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_srv_target_free(GSrvTarget *target)
     * }
     */
    public static void g_srv_target_free(MemorySegment target) {
        var mh$ = g_srv_target_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_srv_target_free", target);
            }
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_srv_target_get_hostname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_srv_target_get_hostname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_srv_target_get_hostname(GSrvTarget *target)
     * }
     */
    public static FunctionDescriptor g_srv_target_get_hostname$descriptor() {
        return g_srv_target_get_hostname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_srv_target_get_hostname(GSrvTarget *target)
     * }
     */
    public static MethodHandle g_srv_target_get_hostname$handle() {
        return g_srv_target_get_hostname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_srv_target_get_hostname(GSrvTarget *target)
     * }
     */
    public static MemorySegment g_srv_target_get_hostname(MemorySegment target) {
        var mh$ = g_srv_target_get_hostname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_srv_target_get_hostname", target);
            }
            return (MemorySegment)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_srv_target_get_port {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_srv_target_get_port"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 g_srv_target_get_port(GSrvTarget *target)
     * }
     */
    public static FunctionDescriptor g_srv_target_get_port$descriptor() {
        return g_srv_target_get_port.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 g_srv_target_get_port(GSrvTarget *target)
     * }
     */
    public static MethodHandle g_srv_target_get_port$handle() {
        return g_srv_target_get_port.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 g_srv_target_get_port(GSrvTarget *target)
     * }
     */
    public static short g_srv_target_get_port(MemorySegment target) {
        var mh$ = g_srv_target_get_port.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_srv_target_get_port", target);
            }
            return (short)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_srv_target_get_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_srv_target_get_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 g_srv_target_get_priority(GSrvTarget *target)
     * }
     */
    public static FunctionDescriptor g_srv_target_get_priority$descriptor() {
        return g_srv_target_get_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 g_srv_target_get_priority(GSrvTarget *target)
     * }
     */
    public static MethodHandle g_srv_target_get_priority$handle() {
        return g_srv_target_get_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 g_srv_target_get_priority(GSrvTarget *target)
     * }
     */
    public static short g_srv_target_get_priority(MemorySegment target) {
        var mh$ = g_srv_target_get_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_srv_target_get_priority", target);
            }
            return (short)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_srv_target_get_weight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_srv_target_get_weight"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 g_srv_target_get_weight(GSrvTarget *target)
     * }
     */
    public static FunctionDescriptor g_srv_target_get_weight$descriptor() {
        return g_srv_target_get_weight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 g_srv_target_get_weight(GSrvTarget *target)
     * }
     */
    public static MethodHandle g_srv_target_get_weight$handle() {
        return g_srv_target_get_weight.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 g_srv_target_get_weight(GSrvTarget *target)
     * }
     */
    public static short g_srv_target_get_weight(MemorySegment target) {
        var mh$ = g_srv_target_get_weight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_srv_target_get_weight", target);
            }
            return (short)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_srv_target_list_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_srv_target_list_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_srv_target_list_sort(GList *targets)
     * }
     */
    public static FunctionDescriptor g_srv_target_list_sort$descriptor() {
        return g_srv_target_list_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_srv_target_list_sort(GList *targets)
     * }
     */
    public static MethodHandle g_srv_target_list_sort$handle() {
        return g_srv_target_list_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_srv_target_list_sort(GList *targets)
     * }
     */
    public static MemorySegment g_srv_target_list_sort(MemorySegment targets) {
        var mh$ = g_srv_target_list_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_srv_target_list_sort", targets);
            }
            return (MemorySegment)mh$.invokeExact(targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_subprocess_get_type()
     * }
     */
    public static FunctionDescriptor g_subprocess_get_type$descriptor() {
        return g_subprocess_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_subprocess_get_type()
     * }
     */
    public static MethodHandle g_subprocess_get_type$handle() {
        return g_subprocess_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_subprocess_get_type()
     * }
     */
    public static long g_subprocess_get_type() {
        var mh$ = g_subprocess_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GSubprocess *g_subprocess_new(GSubprocessFlags flags, GError **error, const gchar *argv0, ...)
     * }
     */
    public static class g_subprocess_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_subprocess_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_subprocess_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GSubprocess *g_subprocess_new(GSubprocessFlags flags, GError **error, const gchar *argv0, ...)
         * }
         */
        public static g_subprocess_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_subprocess_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int flags, MemorySegment error, MemorySegment argv0, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_subprocess_new", flags, error, argv0, x3);
                }
                return (MemorySegment)spreader.invokeExact(flags, error, argv0, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_subprocess_newv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_newv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSubprocess *g_subprocess_newv(const gchar *const *argv, GSubprocessFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_subprocess_newv$descriptor() {
        return g_subprocess_newv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSubprocess *g_subprocess_newv(const gchar *const *argv, GSubprocessFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_subprocess_newv$handle() {
        return g_subprocess_newv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSubprocess *g_subprocess_newv(const gchar *const *argv, GSubprocessFlags flags, GError **error)
     * }
     */
    public static MemorySegment g_subprocess_newv(MemorySegment argv, int flags, MemorySegment error) {
        var mh$ = g_subprocess_newv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_newv", argv, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(argv, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_stdin_pipe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_stdin_pipe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOutputStream *g_subprocess_get_stdin_pipe(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_get_stdin_pipe$descriptor() {
        return g_subprocess_get_stdin_pipe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOutputStream *g_subprocess_get_stdin_pipe(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_get_stdin_pipe$handle() {
        return g_subprocess_get_stdin_pipe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOutputStream *g_subprocess_get_stdin_pipe(GSubprocess *subprocess)
     * }
     */
    public static MemorySegment g_subprocess_get_stdin_pipe(MemorySegment subprocess) {
        var mh$ = g_subprocess_get_stdin_pipe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_stdin_pipe", subprocess);
            }
            return (MemorySegment)mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_stdout_pipe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_stdout_pipe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_subprocess_get_stdout_pipe(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_get_stdout_pipe$descriptor() {
        return g_subprocess_get_stdout_pipe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_subprocess_get_stdout_pipe(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_get_stdout_pipe$handle() {
        return g_subprocess_get_stdout_pipe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_subprocess_get_stdout_pipe(GSubprocess *subprocess)
     * }
     */
    public static MemorySegment g_subprocess_get_stdout_pipe(MemorySegment subprocess) {
        var mh$ = g_subprocess_get_stdout_pipe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_stdout_pipe", subprocess);
            }
            return (MemorySegment)mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_stderr_pipe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_stderr_pipe"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GInputStream *g_subprocess_get_stderr_pipe(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_get_stderr_pipe$descriptor() {
        return g_subprocess_get_stderr_pipe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GInputStream *g_subprocess_get_stderr_pipe(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_get_stderr_pipe$handle() {
        return g_subprocess_get_stderr_pipe.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GInputStream *g_subprocess_get_stderr_pipe(GSubprocess *subprocess)
     * }
     */
    public static MemorySegment g_subprocess_get_stderr_pipe(MemorySegment subprocess) {
        var mh$ = g_subprocess_get_stderr_pipe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_stderr_pipe", subprocess);
            }
            return (MemorySegment)mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_identifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_identifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_subprocess_get_identifier(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_get_identifier$descriptor() {
        return g_subprocess_get_identifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_subprocess_get_identifier(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_get_identifier$handle() {
        return g_subprocess_get_identifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_subprocess_get_identifier(GSubprocess *subprocess)
     * }
     */
    public static MemorySegment g_subprocess_get_identifier(MemorySegment subprocess) {
        var mh$ = g_subprocess_get_identifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_identifier", subprocess);
            }
            return (MemorySegment)mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_send_signal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_send_signal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_send_signal(GSubprocess *subprocess, gint signal_num)
     * }
     */
    public static FunctionDescriptor g_subprocess_send_signal$descriptor() {
        return g_subprocess_send_signal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_send_signal(GSubprocess *subprocess, gint signal_num)
     * }
     */
    public static MethodHandle g_subprocess_send_signal$handle() {
        return g_subprocess_send_signal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_send_signal(GSubprocess *subprocess, gint signal_num)
     * }
     */
    public static void g_subprocess_send_signal(MemorySegment subprocess, int signal_num) {
        var mh$ = g_subprocess_send_signal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_send_signal", subprocess, signal_num);
            }
            mh$.invokeExact(subprocess, signal_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_force_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_force_exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_force_exit(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_force_exit$descriptor() {
        return g_subprocess_force_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_force_exit(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_force_exit$handle() {
        return g_subprocess_force_exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_force_exit(GSubprocess *subprocess)
     * }
     */
    public static void g_subprocess_force_exit(MemorySegment subprocess) {
        var mh$ = g_subprocess_force_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_force_exit", subprocess);
            }
            mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait(GSubprocess *subprocess, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_subprocess_wait$descriptor() {
        return g_subprocess_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait(GSubprocess *subprocess, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_subprocess_wait$handle() {
        return g_subprocess_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait(GSubprocess *subprocess, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_subprocess_wait(MemorySegment subprocess, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_subprocess_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_wait", subprocess, cancellable, error);
            }
            return (int)mh$.invokeExact(subprocess, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_wait_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_wait_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_wait_async(GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_subprocess_wait_async$descriptor() {
        return g_subprocess_wait_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_wait_async(GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_subprocess_wait_async$handle() {
        return g_subprocess_wait_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_wait_async(GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_subprocess_wait_async(MemorySegment subprocess, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_subprocess_wait_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_wait_async", subprocess, cancellable, callback, user_data);
            }
            mh$.invokeExact(subprocess, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_wait_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_wait_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait_finish(GSubprocess *subprocess, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_subprocess_wait_finish$descriptor() {
        return g_subprocess_wait_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait_finish(GSubprocess *subprocess, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_subprocess_wait_finish$handle() {
        return g_subprocess_wait_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait_finish(GSubprocess *subprocess, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_subprocess_wait_finish(MemorySegment subprocess, MemorySegment result, MemorySegment error) {
        var mh$ = g_subprocess_wait_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_wait_finish", subprocess, result, error);
            }
            return (int)mh$.invokeExact(subprocess, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_wait_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_wait_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait_check(GSubprocess *subprocess, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_subprocess_wait_check$descriptor() {
        return g_subprocess_wait_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait_check(GSubprocess *subprocess, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_subprocess_wait_check$handle() {
        return g_subprocess_wait_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait_check(GSubprocess *subprocess, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_subprocess_wait_check(MemorySegment subprocess, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_subprocess_wait_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_wait_check", subprocess, cancellable, error);
            }
            return (int)mh$.invokeExact(subprocess, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_wait_check_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_wait_check_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_wait_check_async(GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_subprocess_wait_check_async$descriptor() {
        return g_subprocess_wait_check_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_wait_check_async(GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_subprocess_wait_check_async$handle() {
        return g_subprocess_wait_check_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_wait_check_async(GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_subprocess_wait_check_async(MemorySegment subprocess, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_subprocess_wait_check_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_wait_check_async", subprocess, cancellable, callback, user_data);
            }
            mh$.invokeExact(subprocess, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_wait_check_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_wait_check_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait_check_finish(GSubprocess *subprocess, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_subprocess_wait_check_finish$descriptor() {
        return g_subprocess_wait_check_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait_check_finish(GSubprocess *subprocess, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_subprocess_wait_check_finish$handle() {
        return g_subprocess_wait_check_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_wait_check_finish(GSubprocess *subprocess, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_subprocess_wait_check_finish(MemorySegment subprocess, MemorySegment result, MemorySegment error) {
        var mh$ = g_subprocess_wait_check_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_wait_check_finish", subprocess, result, error);
            }
            return (int)mh$.invokeExact(subprocess, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_subprocess_get_status(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_get_status$descriptor() {
        return g_subprocess_get_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_subprocess_get_status(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_get_status$handle() {
        return g_subprocess_get_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_subprocess_get_status(GSubprocess *subprocess)
     * }
     */
    public static int g_subprocess_get_status(MemorySegment subprocess) {
        var mh$ = g_subprocess_get_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_status", subprocess);
            }
            return (int)mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_successful {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_successful"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_get_successful(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_get_successful$descriptor() {
        return g_subprocess_get_successful.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_get_successful(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_get_successful$handle() {
        return g_subprocess_get_successful.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_get_successful(GSubprocess *subprocess)
     * }
     */
    public static int g_subprocess_get_successful(MemorySegment subprocess) {
        var mh$ = g_subprocess_get_successful.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_successful", subprocess);
            }
            return (int)mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_if_exited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_if_exited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_get_if_exited(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_get_if_exited$descriptor() {
        return g_subprocess_get_if_exited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_get_if_exited(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_get_if_exited$handle() {
        return g_subprocess_get_if_exited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_get_if_exited(GSubprocess *subprocess)
     * }
     */
    public static int g_subprocess_get_if_exited(MemorySegment subprocess) {
        var mh$ = g_subprocess_get_if_exited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_if_exited", subprocess);
            }
            return (int)mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_exit_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_exit_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_subprocess_get_exit_status(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_get_exit_status$descriptor() {
        return g_subprocess_get_exit_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_subprocess_get_exit_status(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_get_exit_status$handle() {
        return g_subprocess_get_exit_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_subprocess_get_exit_status(GSubprocess *subprocess)
     * }
     */
    public static int g_subprocess_get_exit_status(MemorySegment subprocess) {
        var mh$ = g_subprocess_get_exit_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_exit_status", subprocess);
            }
            return (int)mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_if_signaled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_if_signaled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_get_if_signaled(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_get_if_signaled$descriptor() {
        return g_subprocess_get_if_signaled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_get_if_signaled(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_get_if_signaled$handle() {
        return g_subprocess_get_if_signaled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_get_if_signaled(GSubprocess *subprocess)
     * }
     */
    public static int g_subprocess_get_if_signaled(MemorySegment subprocess) {
        var mh$ = g_subprocess_get_if_signaled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_if_signaled", subprocess);
            }
            return (int)mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_get_term_sig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_get_term_sig"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_subprocess_get_term_sig(GSubprocess *subprocess)
     * }
     */
    public static FunctionDescriptor g_subprocess_get_term_sig$descriptor() {
        return g_subprocess_get_term_sig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_subprocess_get_term_sig(GSubprocess *subprocess)
     * }
     */
    public static MethodHandle g_subprocess_get_term_sig$handle() {
        return g_subprocess_get_term_sig.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_subprocess_get_term_sig(GSubprocess *subprocess)
     * }
     */
    public static int g_subprocess_get_term_sig(MemorySegment subprocess) {
        var mh$ = g_subprocess_get_term_sig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_get_term_sig", subprocess);
            }
            return (int)mh$.invokeExact(subprocess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_communicate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_communicate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate(GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GBytes **stdout_buf, GBytes **stderr_buf, GError **error)
     * }
     */
    public static FunctionDescriptor g_subprocess_communicate$descriptor() {
        return g_subprocess_communicate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate(GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GBytes **stdout_buf, GBytes **stderr_buf, GError **error)
     * }
     */
    public static MethodHandle g_subprocess_communicate$handle() {
        return g_subprocess_communicate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate(GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GBytes **stdout_buf, GBytes **stderr_buf, GError **error)
     * }
     */
    public static int g_subprocess_communicate(MemorySegment subprocess, MemorySegment stdin_buf, MemorySegment cancellable, MemorySegment stdout_buf, MemorySegment stderr_buf, MemorySegment error) {
        var mh$ = g_subprocess_communicate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_communicate", subprocess, stdin_buf, cancellable, stdout_buf, stderr_buf, error);
            }
            return (int)mh$.invokeExact(subprocess, stdin_buf, cancellable, stdout_buf, stderr_buf, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_communicate_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_communicate_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_communicate_async(GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_subprocess_communicate_async$descriptor() {
        return g_subprocess_communicate_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_communicate_async(GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_subprocess_communicate_async$handle() {
        return g_subprocess_communicate_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_communicate_async(GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_subprocess_communicate_async(MemorySegment subprocess, MemorySegment stdin_buf, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_subprocess_communicate_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_communicate_async", subprocess, stdin_buf, cancellable, callback, user_data);
            }
            mh$.invokeExact(subprocess, stdin_buf, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_communicate_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_communicate_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate_finish(GSubprocess *subprocess, GAsyncResult *result, GBytes **stdout_buf, GBytes **stderr_buf, GError **error)
     * }
     */
    public static FunctionDescriptor g_subprocess_communicate_finish$descriptor() {
        return g_subprocess_communicate_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate_finish(GSubprocess *subprocess, GAsyncResult *result, GBytes **stdout_buf, GBytes **stderr_buf, GError **error)
     * }
     */
    public static MethodHandle g_subprocess_communicate_finish$handle() {
        return g_subprocess_communicate_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate_finish(GSubprocess *subprocess, GAsyncResult *result, GBytes **stdout_buf, GBytes **stderr_buf, GError **error)
     * }
     */
    public static int g_subprocess_communicate_finish(MemorySegment subprocess, MemorySegment result, MemorySegment stdout_buf, MemorySegment stderr_buf, MemorySegment error) {
        var mh$ = g_subprocess_communicate_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_communicate_finish", subprocess, result, stdout_buf, stderr_buf, error);
            }
            return (int)mh$.invokeExact(subprocess, result, stdout_buf, stderr_buf, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_communicate_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_communicate_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate_utf8(GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, char **stdout_buf, char **stderr_buf, GError **error)
     * }
     */
    public static FunctionDescriptor g_subprocess_communicate_utf8$descriptor() {
        return g_subprocess_communicate_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate_utf8(GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, char **stdout_buf, char **stderr_buf, GError **error)
     * }
     */
    public static MethodHandle g_subprocess_communicate_utf8$handle() {
        return g_subprocess_communicate_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate_utf8(GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, char **stdout_buf, char **stderr_buf, GError **error)
     * }
     */
    public static int g_subprocess_communicate_utf8(MemorySegment subprocess, MemorySegment stdin_buf, MemorySegment cancellable, MemorySegment stdout_buf, MemorySegment stderr_buf, MemorySegment error) {
        var mh$ = g_subprocess_communicate_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_communicate_utf8", subprocess, stdin_buf, cancellable, stdout_buf, stderr_buf, error);
            }
            return (int)mh$.invokeExact(subprocess, stdin_buf, cancellable, stdout_buf, stderr_buf, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_communicate_utf8_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_communicate_utf8_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_communicate_utf8_async(GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_subprocess_communicate_utf8_async$descriptor() {
        return g_subprocess_communicate_utf8_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_communicate_utf8_async(GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_subprocess_communicate_utf8_async$handle() {
        return g_subprocess_communicate_utf8_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_communicate_utf8_async(GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_subprocess_communicate_utf8_async(MemorySegment subprocess, MemorySegment stdin_buf, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_subprocess_communicate_utf8_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_communicate_utf8_async", subprocess, stdin_buf, cancellable, callback, user_data);
            }
            mh$.invokeExact(subprocess, stdin_buf, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_communicate_utf8_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_communicate_utf8_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate_utf8_finish(GSubprocess *subprocess, GAsyncResult *result, char **stdout_buf, char **stderr_buf, GError **error)
     * }
     */
    public static FunctionDescriptor g_subprocess_communicate_utf8_finish$descriptor() {
        return g_subprocess_communicate_utf8_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate_utf8_finish(GSubprocess *subprocess, GAsyncResult *result, char **stdout_buf, char **stderr_buf, GError **error)
     * }
     */
    public static MethodHandle g_subprocess_communicate_utf8_finish$handle() {
        return g_subprocess_communicate_utf8_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_subprocess_communicate_utf8_finish(GSubprocess *subprocess, GAsyncResult *result, char **stdout_buf, char **stderr_buf, GError **error)
     * }
     */
    public static int g_subprocess_communicate_utf8_finish(MemorySegment subprocess, MemorySegment result, MemorySegment stdout_buf, MemorySegment stderr_buf, MemorySegment error) {
        var mh$ = g_subprocess_communicate_utf8_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_communicate_utf8_finish", subprocess, result, stdout_buf, stderr_buf, error);
            }
            return (int)mh$.invokeExact(subprocess, result, stdout_buf, stderr_buf, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_subprocess_launcher_get_type()
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_get_type$descriptor() {
        return g_subprocess_launcher_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_subprocess_launcher_get_type()
     * }
     */
    public static MethodHandle g_subprocess_launcher_get_type$handle() {
        return g_subprocess_launcher_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_subprocess_launcher_get_type()
     * }
     */
    public static long g_subprocess_launcher_get_type() {
        var mh$ = g_subprocess_launcher_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSubprocessLauncher *g_subprocess_launcher_new(GSubprocessFlags flags)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_new$descriptor() {
        return g_subprocess_launcher_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSubprocessLauncher *g_subprocess_launcher_new(GSubprocessFlags flags)
     * }
     */
    public static MethodHandle g_subprocess_launcher_new$handle() {
        return g_subprocess_launcher_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSubprocessLauncher *g_subprocess_launcher_new(GSubprocessFlags flags)
     * }
     */
    public static MemorySegment g_subprocess_launcher_new(int flags) {
        var mh$ = g_subprocess_launcher_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_new", flags);
            }
            return (MemorySegment)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GSubprocess *g_subprocess_launcher_spawn(GSubprocessLauncher *self, GError **error, const gchar *argv0, ...)
     * }
     */
    public static class g_subprocess_launcher_spawn {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_subprocess_launcher_spawn");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_subprocess_launcher_spawn(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GSubprocess *g_subprocess_launcher_spawn(GSubprocessLauncher *self, GError **error, const gchar *argv0, ...)
         * }
         */
        public static g_subprocess_launcher_spawn makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_subprocess_launcher_spawn(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment self, MemorySegment error, MemorySegment argv0, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_subprocess_launcher_spawn", self, error, argv0, x3);
                }
                return (MemorySegment)spreader.invokeExact(self, error, argv0, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_subprocess_launcher_spawnv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_spawnv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSubprocess *g_subprocess_launcher_spawnv(GSubprocessLauncher *self, const gchar *const *argv, GError **error)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_spawnv$descriptor() {
        return g_subprocess_launcher_spawnv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSubprocess *g_subprocess_launcher_spawnv(GSubprocessLauncher *self, const gchar *const *argv, GError **error)
     * }
     */
    public static MethodHandle g_subprocess_launcher_spawnv$handle() {
        return g_subprocess_launcher_spawnv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSubprocess *g_subprocess_launcher_spawnv(GSubprocessLauncher *self, const gchar *const *argv, GError **error)
     * }
     */
    public static MemorySegment g_subprocess_launcher_spawnv(MemorySegment self, MemorySegment argv, MemorySegment error) {
        var mh$ = g_subprocess_launcher_spawnv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_spawnv", self, argv, error);
            }
            return (MemorySegment)mh$.invokeExact(self, argv, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_set_environ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_set_environ"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_environ(GSubprocessLauncher *self, gchar **env)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_set_environ$descriptor() {
        return g_subprocess_launcher_set_environ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_environ(GSubprocessLauncher *self, gchar **env)
     * }
     */
    public static MethodHandle g_subprocess_launcher_set_environ$handle() {
        return g_subprocess_launcher_set_environ.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_environ(GSubprocessLauncher *self, gchar **env)
     * }
     */
    public static void g_subprocess_launcher_set_environ(MemorySegment self, MemorySegment env) {
        var mh$ = g_subprocess_launcher_set_environ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_set_environ", self, env);
            }
            mh$.invokeExact(self, env);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_setenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_setenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_setenv(GSubprocessLauncher *self, const gchar *variable, const gchar *value, gboolean overwrite)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_setenv$descriptor() {
        return g_subprocess_launcher_setenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_setenv(GSubprocessLauncher *self, const gchar *variable, const gchar *value, gboolean overwrite)
     * }
     */
    public static MethodHandle g_subprocess_launcher_setenv$handle() {
        return g_subprocess_launcher_setenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_setenv(GSubprocessLauncher *self, const gchar *variable, const gchar *value, gboolean overwrite)
     * }
     */
    public static void g_subprocess_launcher_setenv(MemorySegment self, MemorySegment variable, MemorySegment value, int overwrite) {
        var mh$ = g_subprocess_launcher_setenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_setenv", self, variable, value, overwrite);
            }
            mh$.invokeExact(self, variable, value, overwrite);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_unsetenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_unsetenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_unsetenv(GSubprocessLauncher *self, const gchar *variable)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_unsetenv$descriptor() {
        return g_subprocess_launcher_unsetenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_unsetenv(GSubprocessLauncher *self, const gchar *variable)
     * }
     */
    public static MethodHandle g_subprocess_launcher_unsetenv$handle() {
        return g_subprocess_launcher_unsetenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_unsetenv(GSubprocessLauncher *self, const gchar *variable)
     * }
     */
    public static void g_subprocess_launcher_unsetenv(MemorySegment self, MemorySegment variable) {
        var mh$ = g_subprocess_launcher_unsetenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_unsetenv", self, variable);
            }
            mh$.invokeExact(self, variable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_getenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_getenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_subprocess_launcher_getenv(GSubprocessLauncher *self, const gchar *variable)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_getenv$descriptor() {
        return g_subprocess_launcher_getenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_subprocess_launcher_getenv(GSubprocessLauncher *self, const gchar *variable)
     * }
     */
    public static MethodHandle g_subprocess_launcher_getenv$handle() {
        return g_subprocess_launcher_getenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_subprocess_launcher_getenv(GSubprocessLauncher *self, const gchar *variable)
     * }
     */
    public static MemorySegment g_subprocess_launcher_getenv(MemorySegment self, MemorySegment variable) {
        var mh$ = g_subprocess_launcher_getenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_getenv", self, variable);
            }
            return (MemorySegment)mh$.invokeExact(self, variable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_set_cwd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_set_cwd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_cwd(GSubprocessLauncher *self, const gchar *cwd)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_set_cwd$descriptor() {
        return g_subprocess_launcher_set_cwd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_cwd(GSubprocessLauncher *self, const gchar *cwd)
     * }
     */
    public static MethodHandle g_subprocess_launcher_set_cwd$handle() {
        return g_subprocess_launcher_set_cwd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_cwd(GSubprocessLauncher *self, const gchar *cwd)
     * }
     */
    public static void g_subprocess_launcher_set_cwd(MemorySegment self, MemorySegment cwd) {
        var mh$ = g_subprocess_launcher_set_cwd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_set_cwd", self, cwd);
            }
            mh$.invokeExact(self, cwd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_flags(GSubprocessLauncher *self, GSubprocessFlags flags)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_set_flags$descriptor() {
        return g_subprocess_launcher_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_flags(GSubprocessLauncher *self, GSubprocessFlags flags)
     * }
     */
    public static MethodHandle g_subprocess_launcher_set_flags$handle() {
        return g_subprocess_launcher_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_flags(GSubprocessLauncher *self, GSubprocessFlags flags)
     * }
     */
    public static void g_subprocess_launcher_set_flags(MemorySegment self, int flags) {
        var mh$ = g_subprocess_launcher_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_set_flags", self, flags);
            }
            mh$.invokeExact(self, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_set_stdin_file_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_set_stdin_file_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_stdin_file_path(GSubprocessLauncher *self, const gchar *path)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_set_stdin_file_path$descriptor() {
        return g_subprocess_launcher_set_stdin_file_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_stdin_file_path(GSubprocessLauncher *self, const gchar *path)
     * }
     */
    public static MethodHandle g_subprocess_launcher_set_stdin_file_path$handle() {
        return g_subprocess_launcher_set_stdin_file_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_stdin_file_path(GSubprocessLauncher *self, const gchar *path)
     * }
     */
    public static void g_subprocess_launcher_set_stdin_file_path(MemorySegment self, MemorySegment path) {
        var mh$ = g_subprocess_launcher_set_stdin_file_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_set_stdin_file_path", self, path);
            }
            mh$.invokeExact(self, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_take_stdin_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_take_stdin_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_stdin_fd(GSubprocessLauncher *self, gint fd)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_take_stdin_fd$descriptor() {
        return g_subprocess_launcher_take_stdin_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_stdin_fd(GSubprocessLauncher *self, gint fd)
     * }
     */
    public static MethodHandle g_subprocess_launcher_take_stdin_fd$handle() {
        return g_subprocess_launcher_take_stdin_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_stdin_fd(GSubprocessLauncher *self, gint fd)
     * }
     */
    public static void g_subprocess_launcher_take_stdin_fd(MemorySegment self, int fd) {
        var mh$ = g_subprocess_launcher_take_stdin_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_take_stdin_fd", self, fd);
            }
            mh$.invokeExact(self, fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_set_stdout_file_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_set_stdout_file_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_stdout_file_path(GSubprocessLauncher *self, const gchar *path)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_set_stdout_file_path$descriptor() {
        return g_subprocess_launcher_set_stdout_file_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_stdout_file_path(GSubprocessLauncher *self, const gchar *path)
     * }
     */
    public static MethodHandle g_subprocess_launcher_set_stdout_file_path$handle() {
        return g_subprocess_launcher_set_stdout_file_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_stdout_file_path(GSubprocessLauncher *self, const gchar *path)
     * }
     */
    public static void g_subprocess_launcher_set_stdout_file_path(MemorySegment self, MemorySegment path) {
        var mh$ = g_subprocess_launcher_set_stdout_file_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_set_stdout_file_path", self, path);
            }
            mh$.invokeExact(self, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_take_stdout_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_take_stdout_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_stdout_fd(GSubprocessLauncher *self, gint fd)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_take_stdout_fd$descriptor() {
        return g_subprocess_launcher_take_stdout_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_stdout_fd(GSubprocessLauncher *self, gint fd)
     * }
     */
    public static MethodHandle g_subprocess_launcher_take_stdout_fd$handle() {
        return g_subprocess_launcher_take_stdout_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_stdout_fd(GSubprocessLauncher *self, gint fd)
     * }
     */
    public static void g_subprocess_launcher_take_stdout_fd(MemorySegment self, int fd) {
        var mh$ = g_subprocess_launcher_take_stdout_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_take_stdout_fd", self, fd);
            }
            mh$.invokeExact(self, fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_set_stderr_file_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_set_stderr_file_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_stderr_file_path(GSubprocessLauncher *self, const gchar *path)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_set_stderr_file_path$descriptor() {
        return g_subprocess_launcher_set_stderr_file_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_stderr_file_path(GSubprocessLauncher *self, const gchar *path)
     * }
     */
    public static MethodHandle g_subprocess_launcher_set_stderr_file_path$handle() {
        return g_subprocess_launcher_set_stderr_file_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_stderr_file_path(GSubprocessLauncher *self, const gchar *path)
     * }
     */
    public static void g_subprocess_launcher_set_stderr_file_path(MemorySegment self, MemorySegment path) {
        var mh$ = g_subprocess_launcher_set_stderr_file_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_set_stderr_file_path", self, path);
            }
            mh$.invokeExact(self, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_take_stderr_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_take_stderr_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_stderr_fd(GSubprocessLauncher *self, gint fd)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_take_stderr_fd$descriptor() {
        return g_subprocess_launcher_take_stderr_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_stderr_fd(GSubprocessLauncher *self, gint fd)
     * }
     */
    public static MethodHandle g_subprocess_launcher_take_stderr_fd$handle() {
        return g_subprocess_launcher_take_stderr_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_stderr_fd(GSubprocessLauncher *self, gint fd)
     * }
     */
    public static void g_subprocess_launcher_take_stderr_fd(MemorySegment self, int fd) {
        var mh$ = g_subprocess_launcher_take_stderr_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_take_stderr_fd", self, fd);
            }
            mh$.invokeExact(self, fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_take_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_take_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_fd(GSubprocessLauncher *self, gint source_fd, gint target_fd)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_take_fd$descriptor() {
        return g_subprocess_launcher_take_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_fd(GSubprocessLauncher *self, gint source_fd, gint target_fd)
     * }
     */
    public static MethodHandle g_subprocess_launcher_take_fd$handle() {
        return g_subprocess_launcher_take_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_take_fd(GSubprocessLauncher *self, gint source_fd, gint target_fd)
     * }
     */
    public static void g_subprocess_launcher_take_fd(MemorySegment self, int source_fd, int target_fd) {
        var mh$ = g_subprocess_launcher_take_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_take_fd", self, source_fd, target_fd);
            }
            mh$.invokeExact(self, source_fd, target_fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_close(GSubprocessLauncher *self)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_close$descriptor() {
        return g_subprocess_launcher_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_close(GSubprocessLauncher *self)
     * }
     */
    public static MethodHandle g_subprocess_launcher_close$handle() {
        return g_subprocess_launcher_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_close(GSubprocessLauncher *self)
     * }
     */
    public static void g_subprocess_launcher_close(MemorySegment self) {
        var mh$ = g_subprocess_launcher_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_close", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_subprocess_launcher_set_child_setup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_subprocess_launcher_set_child_setup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_child_setup(GSubprocessLauncher *self, GSpawnChildSetupFunc child_setup, gpointer user_data, GDestroyNotify destroy_notify)
     * }
     */
    public static FunctionDescriptor g_subprocess_launcher_set_child_setup$descriptor() {
        return g_subprocess_launcher_set_child_setup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_child_setup(GSubprocessLauncher *self, GSpawnChildSetupFunc child_setup, gpointer user_data, GDestroyNotify destroy_notify)
     * }
     */
    public static MethodHandle g_subprocess_launcher_set_child_setup$handle() {
        return g_subprocess_launcher_set_child_setup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_subprocess_launcher_set_child_setup(GSubprocessLauncher *self, GSpawnChildSetupFunc child_setup, gpointer user_data, GDestroyNotify destroy_notify)
     * }
     */
    public static void g_subprocess_launcher_set_child_setup(MemorySegment self, MemorySegment child_setup, MemorySegment user_data, MemorySegment destroy_notify) {
        var mh$ = g_subprocess_launcher_set_child_setup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_subprocess_launcher_set_child_setup", self, child_setup, user_data, destroy_notify);
            }
            mh$.invokeExact(self, child_setup, user_data, destroy_notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_task_get_type()
     * }
     */
    public static FunctionDescriptor g_task_get_type$descriptor() {
        return g_task_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_task_get_type()
     * }
     */
    public static MethodHandle g_task_get_type$handle() {
        return g_task_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_task_get_type()
     * }
     */
    public static long g_task_get_type() {
        var mh$ = g_task_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTask *g_task_new(gpointer source_object, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer callback_data)
     * }
     */
    public static FunctionDescriptor g_task_new$descriptor() {
        return g_task_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTask *g_task_new(gpointer source_object, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer callback_data)
     * }
     */
    public static MethodHandle g_task_new$handle() {
        return g_task_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTask *g_task_new(gpointer source_object, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer callback_data)
     * }
     */
    public static MemorySegment g_task_new(MemorySegment source_object, MemorySegment cancellable, MemorySegment callback, MemorySegment callback_data) {
        var mh$ = g_task_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_new", source_object, cancellable, callback, callback_data);
            }
            return (MemorySegment)mh$.invokeExact(source_object, cancellable, callback, callback_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_report_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_report_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_report_error(gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GError *error)
     * }
     */
    public static FunctionDescriptor g_task_report_error$descriptor() {
        return g_task_report_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_report_error(gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GError *error)
     * }
     */
    public static MethodHandle g_task_report_error$handle() {
        return g_task_report_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_report_error(gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GError *error)
     * }
     */
    public static void g_task_report_error(MemorySegment source_object, MemorySegment callback, MemorySegment callback_data, MemorySegment source_tag, MemorySegment error) {
        var mh$ = g_task_report_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_report_error", source_object, callback, callback_data, source_tag, error);
            }
            mh$.invokeExact(source_object, callback, callback_data, source_tag, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_task_report_new_error(gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GQuark domain, gint code, const char *format, ...)
     * }
     */
    public static class g_task_report_new_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_task_report_new_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_task_report_new_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_task_report_new_error(gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GQuark domain, gint code, const char *format, ...)
         * }
         */
        public static g_task_report_new_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_task_report_new_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment source_object, MemorySegment callback, MemorySegment callback_data, MemorySegment source_tag, int domain, int code, MemorySegment format, Object... x7) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_task_report_new_error", source_object, callback, callback_data, source_tag, domain, code, format, x7);
                }
                spreader.invokeExact(source_object, callback, callback_data, source_tag, domain, code, format, x7);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_task_set_task_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_set_task_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_set_task_data(GTask *task, gpointer task_data, GDestroyNotify task_data_destroy)
     * }
     */
    public static FunctionDescriptor g_task_set_task_data$descriptor() {
        return g_task_set_task_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_set_task_data(GTask *task, gpointer task_data, GDestroyNotify task_data_destroy)
     * }
     */
    public static MethodHandle g_task_set_task_data$handle() {
        return g_task_set_task_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_set_task_data(GTask *task, gpointer task_data, GDestroyNotify task_data_destroy)
     * }
     */
    public static void g_task_set_task_data(MemorySegment task, MemorySegment task_data, MemorySegment task_data_destroy) {
        var mh$ = g_task_set_task_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_set_task_data", task, task_data, task_data_destroy);
            }
            mh$.invokeExact(task, task_data, task_data_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_set_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_set_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_set_priority(GTask *task, gint priority)
     * }
     */
    public static FunctionDescriptor g_task_set_priority$descriptor() {
        return g_task_set_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_set_priority(GTask *task, gint priority)
     * }
     */
    public static MethodHandle g_task_set_priority$handle() {
        return g_task_set_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_set_priority(GTask *task, gint priority)
     * }
     */
    public static void g_task_set_priority(MemorySegment task, int priority) {
        var mh$ = g_task_set_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_set_priority", task, priority);
            }
            mh$.invokeExact(task, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_set_check_cancellable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_set_check_cancellable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_set_check_cancellable(GTask *task, gboolean check_cancellable)
     * }
     */
    public static FunctionDescriptor g_task_set_check_cancellable$descriptor() {
        return g_task_set_check_cancellable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_set_check_cancellable(GTask *task, gboolean check_cancellable)
     * }
     */
    public static MethodHandle g_task_set_check_cancellable$handle() {
        return g_task_set_check_cancellable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_set_check_cancellable(GTask *task, gboolean check_cancellable)
     * }
     */
    public static void g_task_set_check_cancellable(MemorySegment task, int check_cancellable) {
        var mh$ = g_task_set_check_cancellable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_set_check_cancellable", task, check_cancellable);
            }
            mh$.invokeExact(task, check_cancellable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_set_source_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_set_source_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_set_source_tag(GTask *task, gpointer source_tag)
     * }
     */
    public static FunctionDescriptor g_task_set_source_tag$descriptor() {
        return g_task_set_source_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_set_source_tag(GTask *task, gpointer source_tag)
     * }
     */
    public static MethodHandle g_task_set_source_tag$handle() {
        return g_task_set_source_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_set_source_tag(GTask *task, gpointer source_tag)
     * }
     */
    public static void g_task_set_source_tag(MemorySegment task, MemorySegment source_tag) {
        var mh$ = g_task_set_source_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_set_source_tag", task, source_tag);
            }
            mh$.invokeExact(task, source_tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_set_name(GTask *task, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_task_set_name$descriptor() {
        return g_task_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_set_name(GTask *task, const gchar *name)
     * }
     */
    public static MethodHandle g_task_set_name$handle() {
        return g_task_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_set_name(GTask *task, const gchar *name)
     * }
     */
    public static void g_task_set_name(MemorySegment task, MemorySegment name) {
        var mh$ = g_task_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_set_name", task, name);
            }
            mh$.invokeExact(task, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_set_static_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_set_static_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_set_static_name(GTask *task, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_task_set_static_name$descriptor() {
        return g_task_set_static_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_set_static_name(GTask *task, const gchar *name)
     * }
     */
    public static MethodHandle g_task_set_static_name$handle() {
        return g_task_set_static_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_set_static_name(GTask *task, const gchar *name)
     * }
     */
    public static void g_task_set_static_name(MemorySegment task, MemorySegment name) {
        var mh$ = g_task_set_static_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_set_static_name", task, name);
            }
            mh$.invokeExact(task, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_source_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_source_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_task_get_source_object(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_get_source_object$descriptor() {
        return g_task_get_source_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_task_get_source_object(GTask *task)
     * }
     */
    public static MethodHandle g_task_get_source_object$handle() {
        return g_task_get_source_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_task_get_source_object(GTask *task)
     * }
     */
    public static MemorySegment g_task_get_source_object(MemorySegment task) {
        var mh$ = g_task_get_source_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_source_object", task);
            }
            return (MemorySegment)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_task_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_task_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_task_get_task_data(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_get_task_data$descriptor() {
        return g_task_get_task_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_task_get_task_data(GTask *task)
     * }
     */
    public static MethodHandle g_task_get_task_data$handle() {
        return g_task_get_task_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_task_get_task_data(GTask *task)
     * }
     */
    public static MemorySegment g_task_get_task_data(MemorySegment task) {
        var mh$ = g_task_get_task_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_task_data", task);
            }
            return (MemorySegment)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_task_get_priority(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_get_priority$descriptor() {
        return g_task_get_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_task_get_priority(GTask *task)
     * }
     */
    public static MethodHandle g_task_get_priority$handle() {
        return g_task_get_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_task_get_priority(GTask *task)
     * }
     */
    public static int g_task_get_priority(MemorySegment task) {
        var mh$ = g_task_get_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_priority", task);
            }
            return (int)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMainContext *g_task_get_context(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_get_context$descriptor() {
        return g_task_get_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMainContext *g_task_get_context(GTask *task)
     * }
     */
    public static MethodHandle g_task_get_context$handle() {
        return g_task_get_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMainContext *g_task_get_context(GTask *task)
     * }
     */
    public static MemorySegment g_task_get_context(MemorySegment task) {
        var mh$ = g_task_get_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_context", task);
            }
            return (MemorySegment)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_cancellable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_cancellable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCancellable *g_task_get_cancellable(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_get_cancellable$descriptor() {
        return g_task_get_cancellable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCancellable *g_task_get_cancellable(GTask *task)
     * }
     */
    public static MethodHandle g_task_get_cancellable$handle() {
        return g_task_get_cancellable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCancellable *g_task_get_cancellable(GTask *task)
     * }
     */
    public static MemorySegment g_task_get_cancellable(MemorySegment task) {
        var mh$ = g_task_get_cancellable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_cancellable", task);
            }
            return (MemorySegment)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_check_cancellable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_check_cancellable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_task_get_check_cancellable(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_get_check_cancellable$descriptor() {
        return g_task_get_check_cancellable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_task_get_check_cancellable(GTask *task)
     * }
     */
    public static MethodHandle g_task_get_check_cancellable$handle() {
        return g_task_get_check_cancellable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_task_get_check_cancellable(GTask *task)
     * }
     */
    public static int g_task_get_check_cancellable(MemorySegment task) {
        var mh$ = g_task_get_check_cancellable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_check_cancellable", task);
            }
            return (int)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_source_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_source_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_task_get_source_tag(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_get_source_tag$descriptor() {
        return g_task_get_source_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_task_get_source_tag(GTask *task)
     * }
     */
    public static MethodHandle g_task_get_source_tag$handle() {
        return g_task_get_source_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_task_get_source_tag(GTask *task)
     * }
     */
    public static MemorySegment g_task_get_source_tag(MemorySegment task) {
        var mh$ = g_task_get_source_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_source_tag", task);
            }
            return (MemorySegment)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_task_get_name(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_get_name$descriptor() {
        return g_task_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_task_get_name(GTask *task)
     * }
     */
    public static MethodHandle g_task_get_name$handle() {
        return g_task_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_task_get_name(GTask *task)
     * }
     */
    public static MemorySegment g_task_get_name(MemorySegment task) {
        var mh$ = g_task_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_name", task);
            }
            return (MemorySegment)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_task_is_valid(gpointer result, gpointer source_object)
     * }
     */
    public static FunctionDescriptor g_task_is_valid$descriptor() {
        return g_task_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_task_is_valid(gpointer result, gpointer source_object)
     * }
     */
    public static MethodHandle g_task_is_valid$handle() {
        return g_task_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_task_is_valid(gpointer result, gpointer source_object)
     * }
     */
    public static int g_task_is_valid(MemorySegment result, MemorySegment source_object) {
        var mh$ = g_task_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_is_valid", result, source_object);
            }
            return (int)mh$.invokeExact(result, source_object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_run_in_thread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_run_in_thread"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_run_in_thread(GTask *task, GTaskThreadFunc task_func)
     * }
     */
    public static FunctionDescriptor g_task_run_in_thread$descriptor() {
        return g_task_run_in_thread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_run_in_thread(GTask *task, GTaskThreadFunc task_func)
     * }
     */
    public static MethodHandle g_task_run_in_thread$handle() {
        return g_task_run_in_thread.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_run_in_thread(GTask *task, GTaskThreadFunc task_func)
     * }
     */
    public static void g_task_run_in_thread(MemorySegment task, MemorySegment task_func) {
        var mh$ = g_task_run_in_thread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_run_in_thread", task, task_func);
            }
            mh$.invokeExact(task, task_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_run_in_thread_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_run_in_thread_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_run_in_thread_sync(GTask *task, GTaskThreadFunc task_func)
     * }
     */
    public static FunctionDescriptor g_task_run_in_thread_sync$descriptor() {
        return g_task_run_in_thread_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_run_in_thread_sync(GTask *task, GTaskThreadFunc task_func)
     * }
     */
    public static MethodHandle g_task_run_in_thread_sync$handle() {
        return g_task_run_in_thread_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_run_in_thread_sync(GTask *task, GTaskThreadFunc task_func)
     * }
     */
    public static void g_task_run_in_thread_sync(MemorySegment task, MemorySegment task_func) {
        var mh$ = g_task_run_in_thread_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_run_in_thread_sync", task, task_func);
            }
            mh$.invokeExact(task, task_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_set_return_on_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_set_return_on_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_task_set_return_on_cancel(GTask *task, gboolean return_on_cancel)
     * }
     */
    public static FunctionDescriptor g_task_set_return_on_cancel$descriptor() {
        return g_task_set_return_on_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_task_set_return_on_cancel(GTask *task, gboolean return_on_cancel)
     * }
     */
    public static MethodHandle g_task_set_return_on_cancel$handle() {
        return g_task_set_return_on_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_task_set_return_on_cancel(GTask *task, gboolean return_on_cancel)
     * }
     */
    public static int g_task_set_return_on_cancel(MemorySegment task, int return_on_cancel) {
        var mh$ = g_task_set_return_on_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_set_return_on_cancel", task, return_on_cancel);
            }
            return (int)mh$.invokeExact(task, return_on_cancel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_return_on_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_return_on_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_task_get_return_on_cancel(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_get_return_on_cancel$descriptor() {
        return g_task_get_return_on_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_task_get_return_on_cancel(GTask *task)
     * }
     */
    public static MethodHandle g_task_get_return_on_cancel$handle() {
        return g_task_get_return_on_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_task_get_return_on_cancel(GTask *task)
     * }
     */
    public static int g_task_get_return_on_cancel(MemorySegment task) {
        var mh$ = g_task_get_return_on_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_return_on_cancel", task);
            }
            return (int)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_attach_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_attach_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_attach_source(GTask *task, GSource *source, GSourceFunc callback)
     * }
     */
    public static FunctionDescriptor g_task_attach_source$descriptor() {
        return g_task_attach_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_attach_source(GTask *task, GSource *source, GSourceFunc callback)
     * }
     */
    public static MethodHandle g_task_attach_source$handle() {
        return g_task_attach_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_attach_source(GTask *task, GSource *source, GSourceFunc callback)
     * }
     */
    public static void g_task_attach_source(MemorySegment task, MemorySegment source, MemorySegment callback) {
        var mh$ = g_task_attach_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_attach_source", task, source, callback);
            }
            mh$.invokeExact(task, source, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_return_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_return_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_return_pointer(GTask *task, gpointer result, GDestroyNotify result_destroy)
     * }
     */
    public static FunctionDescriptor g_task_return_pointer$descriptor() {
        return g_task_return_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_return_pointer(GTask *task, gpointer result, GDestroyNotify result_destroy)
     * }
     */
    public static MethodHandle g_task_return_pointer$handle() {
        return g_task_return_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_return_pointer(GTask *task, gpointer result, GDestroyNotify result_destroy)
     * }
     */
    public static void g_task_return_pointer(MemorySegment task, MemorySegment result, MemorySegment result_destroy) {
        var mh$ = g_task_return_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_return_pointer", task, result, result_destroy);
            }
            mh$.invokeExact(task, result, result_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_return_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_return_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_return_boolean(GTask *task, gboolean result)
     * }
     */
    public static FunctionDescriptor g_task_return_boolean$descriptor() {
        return g_task_return_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_return_boolean(GTask *task, gboolean result)
     * }
     */
    public static MethodHandle g_task_return_boolean$handle() {
        return g_task_return_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_return_boolean(GTask *task, gboolean result)
     * }
     */
    public static void g_task_return_boolean(MemorySegment task, int result) {
        var mh$ = g_task_return_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_return_boolean", task, result);
            }
            mh$.invokeExact(task, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_return_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_return_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_return_int(GTask *task, gssize result)
     * }
     */
    public static FunctionDescriptor g_task_return_int$descriptor() {
        return g_task_return_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_return_int(GTask *task, gssize result)
     * }
     */
    public static MethodHandle g_task_return_int$handle() {
        return g_task_return_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_return_int(GTask *task, gssize result)
     * }
     */
    public static void g_task_return_int(MemorySegment task, long result) {
        var mh$ = g_task_return_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_return_int", task, result);
            }
            mh$.invokeExact(task, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_return_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_return_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_return_error(GTask *task, GError *error)
     * }
     */
    public static FunctionDescriptor g_task_return_error$descriptor() {
        return g_task_return_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_return_error(GTask *task, GError *error)
     * }
     */
    public static MethodHandle g_task_return_error$handle() {
        return g_task_return_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_return_error(GTask *task, GError *error)
     * }
     */
    public static void g_task_return_error(MemorySegment task, MemorySegment error) {
        var mh$ = g_task_return_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_return_error", task, error);
            }
            mh$.invokeExact(task, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_task_return_new_error(GTask *task, GQuark domain, gint code, const char *format, ...)
     * }
     */
    public static class g_task_return_new_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_task_return_new_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_task_return_new_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_task_return_new_error(GTask *task, GQuark domain, gint code, const char *format, ...)
         * }
         */
        public static g_task_return_new_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_task_return_new_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment task, int domain, int code, MemorySegment format, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_task_return_new_error", task, domain, code, format, x4);
                }
                spreader.invokeExact(task, domain, code, format, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_task_return_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_return_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_task_return_value(GTask *task, GValue *result)
     * }
     */
    public static FunctionDescriptor g_task_return_value$descriptor() {
        return g_task_return_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_task_return_value(GTask *task, GValue *result)
     * }
     */
    public static MethodHandle g_task_return_value$handle() {
        return g_task_return_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_task_return_value(GTask *task, GValue *result)
     * }
     */
    public static void g_task_return_value(MemorySegment task, MemorySegment result) {
        var mh$ = g_task_return_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_return_value", task, result);
            }
            mh$.invokeExact(task, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_return_error_if_cancelled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_return_error_if_cancelled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_task_return_error_if_cancelled(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_return_error_if_cancelled$descriptor() {
        return g_task_return_error_if_cancelled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_task_return_error_if_cancelled(GTask *task)
     * }
     */
    public static MethodHandle g_task_return_error_if_cancelled$handle() {
        return g_task_return_error_if_cancelled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_task_return_error_if_cancelled(GTask *task)
     * }
     */
    public static int g_task_return_error_if_cancelled(MemorySegment task) {
        var mh$ = g_task_return_error_if_cancelled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_return_error_if_cancelled", task);
            }
            return (int)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_propagate_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_propagate_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_task_propagate_pointer(GTask *task, GError **error)
     * }
     */
    public static FunctionDescriptor g_task_propagate_pointer$descriptor() {
        return g_task_propagate_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_task_propagate_pointer(GTask *task, GError **error)
     * }
     */
    public static MethodHandle g_task_propagate_pointer$handle() {
        return g_task_propagate_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_task_propagate_pointer(GTask *task, GError **error)
     * }
     */
    public static MemorySegment g_task_propagate_pointer(MemorySegment task, MemorySegment error) {
        var mh$ = g_task_propagate_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_propagate_pointer", task, error);
            }
            return (MemorySegment)mh$.invokeExact(task, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_propagate_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_propagate_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_task_propagate_boolean(GTask *task, GError **error)
     * }
     */
    public static FunctionDescriptor g_task_propagate_boolean$descriptor() {
        return g_task_propagate_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_task_propagate_boolean(GTask *task, GError **error)
     * }
     */
    public static MethodHandle g_task_propagate_boolean$handle() {
        return g_task_propagate_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_task_propagate_boolean(GTask *task, GError **error)
     * }
     */
    public static int g_task_propagate_boolean(MemorySegment task, MemorySegment error) {
        var mh$ = g_task_propagate_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_propagate_boolean", task, error);
            }
            return (int)mh$.invokeExact(task, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_propagate_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_propagate_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_task_propagate_int(GTask *task, GError **error)
     * }
     */
    public static FunctionDescriptor g_task_propagate_int$descriptor() {
        return g_task_propagate_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_task_propagate_int(GTask *task, GError **error)
     * }
     */
    public static MethodHandle g_task_propagate_int$handle() {
        return g_task_propagate_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_task_propagate_int(GTask *task, GError **error)
     * }
     */
    public static long g_task_propagate_int(MemorySegment task, MemorySegment error) {
        var mh$ = g_task_propagate_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_propagate_int", task, error);
            }
            return (long)mh$.invokeExact(task, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_propagate_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_propagate_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_task_propagate_value(GTask *task, GValue *value, GError **error)
     * }
     */
    public static FunctionDescriptor g_task_propagate_value$descriptor() {
        return g_task_propagate_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_task_propagate_value(GTask *task, GValue *value, GError **error)
     * }
     */
    public static MethodHandle g_task_propagate_value$handle() {
        return g_task_propagate_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_task_propagate_value(GTask *task, GValue *value, GError **error)
     * }
     */
    public static int g_task_propagate_value(MemorySegment task, MemorySegment value, MemorySegment error) {
        var mh$ = g_task_propagate_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_propagate_value", task, value, error);
            }
            return (int)mh$.invokeExact(task, value, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_had_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_had_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_task_had_error(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_had_error$descriptor() {
        return g_task_had_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_task_had_error(GTask *task)
     * }
     */
    public static MethodHandle g_task_had_error$handle() {
        return g_task_had_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_task_had_error(GTask *task)
     * }
     */
    public static int g_task_had_error(MemorySegment task) {
        var mh$ = g_task_had_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_had_error", task);
            }
            return (int)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_get_completed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_get_completed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_task_get_completed(GTask *task)
     * }
     */
    public static FunctionDescriptor g_task_get_completed$descriptor() {
        return g_task_get_completed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_task_get_completed(GTask *task)
     * }
     */
    public static MethodHandle g_task_get_completed$handle() {
        return g_task_get_completed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_task_get_completed(GTask *task)
     * }
     */
    public static int g_task_get_completed(MemorySegment task) {
        var mh$ = g_task_get_completed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_get_completed", task);
            }
            return (int)mh$.invokeExact(task);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_task_print_alive_tasks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_task_print_alive_tasks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void g_task_print_alive_tasks()
     * }
     */
    public static FunctionDescriptor g_task_print_alive_tasks$descriptor() {
        return g_task_print_alive_tasks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void g_task_print_alive_tasks()
     * }
     */
    public static MethodHandle g_task_print_alive_tasks$handle() {
        return g_task_print_alive_tasks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void g_task_print_alive_tasks()
     * }
     */
    public static void g_task_print_alive_tasks() {
        var mh$ = g_task_print_alive_tasks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_task_print_alive_tasks");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tcp_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tcp_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tcp_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_tcp_connection_get_type$descriptor() {
        return g_tcp_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tcp_connection_get_type()
     * }
     */
    public static MethodHandle g_tcp_connection_get_type$handle() {
        return g_tcp_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tcp_connection_get_type()
     * }
     */
    public static long g_tcp_connection_get_type() {
        var mh$ = g_tcp_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tcp_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tcp_connection_set_graceful_disconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tcp_connection_set_graceful_disconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tcp_connection_set_graceful_disconnect(GTcpConnection *connection, gboolean graceful_disconnect)
     * }
     */
    public static FunctionDescriptor g_tcp_connection_set_graceful_disconnect$descriptor() {
        return g_tcp_connection_set_graceful_disconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tcp_connection_set_graceful_disconnect(GTcpConnection *connection, gboolean graceful_disconnect)
     * }
     */
    public static MethodHandle g_tcp_connection_set_graceful_disconnect$handle() {
        return g_tcp_connection_set_graceful_disconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tcp_connection_set_graceful_disconnect(GTcpConnection *connection, gboolean graceful_disconnect)
     * }
     */
    public static void g_tcp_connection_set_graceful_disconnect(MemorySegment connection, int graceful_disconnect) {
        var mh$ = g_tcp_connection_set_graceful_disconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tcp_connection_set_graceful_disconnect", connection, graceful_disconnect);
            }
            mh$.invokeExact(connection, graceful_disconnect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tcp_connection_get_graceful_disconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tcp_connection_get_graceful_disconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tcp_connection_get_graceful_disconnect(GTcpConnection *connection)
     * }
     */
    public static FunctionDescriptor g_tcp_connection_get_graceful_disconnect$descriptor() {
        return g_tcp_connection_get_graceful_disconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tcp_connection_get_graceful_disconnect(GTcpConnection *connection)
     * }
     */
    public static MethodHandle g_tcp_connection_get_graceful_disconnect$handle() {
        return g_tcp_connection_get_graceful_disconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tcp_connection_get_graceful_disconnect(GTcpConnection *connection)
     * }
     */
    public static int g_tcp_connection_get_graceful_disconnect(MemorySegment connection) {
        var mh$ = g_tcp_connection_get_graceful_disconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tcp_connection_get_graceful_disconnect", connection);
            }
            return (int)mh$.invokeExact(connection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tcp_wrapper_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tcp_wrapper_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tcp_wrapper_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_tcp_wrapper_connection_get_type$descriptor() {
        return g_tcp_wrapper_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tcp_wrapper_connection_get_type()
     * }
     */
    public static MethodHandle g_tcp_wrapper_connection_get_type$handle() {
        return g_tcp_wrapper_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tcp_wrapper_connection_get_type()
     * }
     */
    public static long g_tcp_wrapper_connection_get_type() {
        var mh$ = g_tcp_wrapper_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tcp_wrapper_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tcp_wrapper_connection_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tcp_wrapper_connection_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_tcp_wrapper_connection_new(GIOStream *base_io_stream, GSocket *socket)
     * }
     */
    public static FunctionDescriptor g_tcp_wrapper_connection_new$descriptor() {
        return g_tcp_wrapper_connection_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnection *g_tcp_wrapper_connection_new(GIOStream *base_io_stream, GSocket *socket)
     * }
     */
    public static MethodHandle g_tcp_wrapper_connection_new$handle() {
        return g_tcp_wrapper_connection_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnection *g_tcp_wrapper_connection_new(GIOStream *base_io_stream, GSocket *socket)
     * }
     */
    public static MemorySegment g_tcp_wrapper_connection_new(MemorySegment base_io_stream, MemorySegment socket) {
        var mh$ = g_tcp_wrapper_connection_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tcp_wrapper_connection_new", base_io_stream, socket);
            }
            return (MemorySegment)mh$.invokeExact(base_io_stream, socket);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tcp_wrapper_connection_get_base_io_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tcp_wrapper_connection_get_base_io_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStream *g_tcp_wrapper_connection_get_base_io_stream(GTcpWrapperConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tcp_wrapper_connection_get_base_io_stream$descriptor() {
        return g_tcp_wrapper_connection_get_base_io_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStream *g_tcp_wrapper_connection_get_base_io_stream(GTcpWrapperConnection *conn)
     * }
     */
    public static MethodHandle g_tcp_wrapper_connection_get_base_io_stream$handle() {
        return g_tcp_wrapper_connection_get_base_io_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStream *g_tcp_wrapper_connection_get_base_io_stream(GTcpWrapperConnection *conn)
     * }
     */
    public static MemorySegment g_tcp_wrapper_connection_get_base_io_stream(MemorySegment conn) {
        var mh$ = g_tcp_wrapper_connection_get_base_io_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tcp_wrapper_connection_get_base_io_stream", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_dbus_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_dbus_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_test_dbus_get_type()
     * }
     */
    public static FunctionDescriptor g_test_dbus_get_type$descriptor() {
        return g_test_dbus_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_test_dbus_get_type()
     * }
     */
    public static MethodHandle g_test_dbus_get_type$handle() {
        return g_test_dbus_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_test_dbus_get_type()
     * }
     */
    public static long g_test_dbus_get_type() {
        var mh$ = g_test_dbus_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_dbus_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_dbus_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_dbus_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTestDBus *g_test_dbus_new(GTestDBusFlags flags)
     * }
     */
    public static FunctionDescriptor g_test_dbus_new$descriptor() {
        return g_test_dbus_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTestDBus *g_test_dbus_new(GTestDBusFlags flags)
     * }
     */
    public static MethodHandle g_test_dbus_new$handle() {
        return g_test_dbus_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTestDBus *g_test_dbus_new(GTestDBusFlags flags)
     * }
     */
    public static MemorySegment g_test_dbus_new(int flags) {
        var mh$ = g_test_dbus_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_dbus_new", flags);
            }
            return (MemorySegment)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_dbus_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_dbus_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTestDBusFlags g_test_dbus_get_flags(GTestDBus *self)
     * }
     */
    public static FunctionDescriptor g_test_dbus_get_flags$descriptor() {
        return g_test_dbus_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTestDBusFlags g_test_dbus_get_flags(GTestDBus *self)
     * }
     */
    public static MethodHandle g_test_dbus_get_flags$handle() {
        return g_test_dbus_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTestDBusFlags g_test_dbus_get_flags(GTestDBus *self)
     * }
     */
    public static int g_test_dbus_get_flags(MemorySegment self) {
        var mh$ = g_test_dbus_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_dbus_get_flags", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_dbus_get_bus_address {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_dbus_get_bus_address"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_test_dbus_get_bus_address(GTestDBus *self)
     * }
     */
    public static FunctionDescriptor g_test_dbus_get_bus_address$descriptor() {
        return g_test_dbus_get_bus_address.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_test_dbus_get_bus_address(GTestDBus *self)
     * }
     */
    public static MethodHandle g_test_dbus_get_bus_address$handle() {
        return g_test_dbus_get_bus_address.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_test_dbus_get_bus_address(GTestDBus *self)
     * }
     */
    public static MemorySegment g_test_dbus_get_bus_address(MemorySegment self) {
        var mh$ = g_test_dbus_get_bus_address.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_dbus_get_bus_address", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_dbus_add_service_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_dbus_add_service_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_dbus_add_service_dir(GTestDBus *self, const gchar *path)
     * }
     */
    public static FunctionDescriptor g_test_dbus_add_service_dir$descriptor() {
        return g_test_dbus_add_service_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_dbus_add_service_dir(GTestDBus *self, const gchar *path)
     * }
     */
    public static MethodHandle g_test_dbus_add_service_dir$handle() {
        return g_test_dbus_add_service_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_dbus_add_service_dir(GTestDBus *self, const gchar *path)
     * }
     */
    public static void g_test_dbus_add_service_dir(MemorySegment self, MemorySegment path) {
        var mh$ = g_test_dbus_add_service_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_dbus_add_service_dir", self, path);
            }
            mh$.invokeExact(self, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_dbus_up {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_dbus_up"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_dbus_up(GTestDBus *self)
     * }
     */
    public static FunctionDescriptor g_test_dbus_up$descriptor() {
        return g_test_dbus_up.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_dbus_up(GTestDBus *self)
     * }
     */
    public static MethodHandle g_test_dbus_up$handle() {
        return g_test_dbus_up.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_dbus_up(GTestDBus *self)
     * }
     */
    public static void g_test_dbus_up(MemorySegment self) {
        var mh$ = g_test_dbus_up.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_dbus_up", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_dbus_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_dbus_stop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_dbus_stop(GTestDBus *self)
     * }
     */
    public static FunctionDescriptor g_test_dbus_stop$descriptor() {
        return g_test_dbus_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_dbus_stop(GTestDBus *self)
     * }
     */
    public static MethodHandle g_test_dbus_stop$handle() {
        return g_test_dbus_stop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_dbus_stop(GTestDBus *self)
     * }
     */
    public static void g_test_dbus_stop(MemorySegment self) {
        var mh$ = g_test_dbus_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_dbus_stop", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_dbus_down {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_dbus_down"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_dbus_down(GTestDBus *self)
     * }
     */
    public static FunctionDescriptor g_test_dbus_down$descriptor() {
        return g_test_dbus_down.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_dbus_down(GTestDBus *self)
     * }
     */
    public static MethodHandle g_test_dbus_down$handle() {
        return g_test_dbus_down.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_dbus_down(GTestDBus *self)
     * }
     */
    public static void g_test_dbus_down(MemorySegment self) {
        var mh$ = g_test_dbus_down.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_dbus_down", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_dbus_unset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_dbus_unset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_dbus_unset()
     * }
     */
    public static FunctionDescriptor g_test_dbus_unset$descriptor() {
        return g_test_dbus_unset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_dbus_unset()
     * }
     */
    public static MethodHandle g_test_dbus_unset$handle() {
        return g_test_dbus_unset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_dbus_unset()
     * }
     */
    public static void g_test_dbus_unset() {
        var mh$ = g_test_dbus_unset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_dbus_unset");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_themed_icon_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_themed_icon_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_themed_icon_get_type()
     * }
     */
    public static FunctionDescriptor g_themed_icon_get_type$descriptor() {
        return g_themed_icon_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_themed_icon_get_type()
     * }
     */
    public static MethodHandle g_themed_icon_get_type$handle() {
        return g_themed_icon_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_themed_icon_get_type()
     * }
     */
    public static long g_themed_icon_get_type() {
        var mh$ = g_themed_icon_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_themed_icon_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_themed_icon_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_themed_icon_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_themed_icon_new(const char *iconname)
     * }
     */
    public static FunctionDescriptor g_themed_icon_new$descriptor() {
        return g_themed_icon_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_themed_icon_new(const char *iconname)
     * }
     */
    public static MethodHandle g_themed_icon_new$handle() {
        return g_themed_icon_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_themed_icon_new(const char *iconname)
     * }
     */
    public static MemorySegment g_themed_icon_new(MemorySegment iconname) {
        var mh$ = g_themed_icon_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_themed_icon_new", iconname);
            }
            return (MemorySegment)mh$.invokeExact(iconname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_themed_icon_new_with_default_fallbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_themed_icon_new_with_default_fallbacks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_themed_icon_new_with_default_fallbacks(const char *iconname)
     * }
     */
    public static FunctionDescriptor g_themed_icon_new_with_default_fallbacks$descriptor() {
        return g_themed_icon_new_with_default_fallbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_themed_icon_new_with_default_fallbacks(const char *iconname)
     * }
     */
    public static MethodHandle g_themed_icon_new_with_default_fallbacks$handle() {
        return g_themed_icon_new_with_default_fallbacks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_themed_icon_new_with_default_fallbacks(const char *iconname)
     * }
     */
    public static MemorySegment g_themed_icon_new_with_default_fallbacks(MemorySegment iconname) {
        var mh$ = g_themed_icon_new_with_default_fallbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_themed_icon_new_with_default_fallbacks", iconname);
            }
            return (MemorySegment)mh$.invokeExact(iconname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_themed_icon_new_from_names {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_themed_icon_new_from_names"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_themed_icon_new_from_names(char **iconnames, int len)
     * }
     */
    public static FunctionDescriptor g_themed_icon_new_from_names$descriptor() {
        return g_themed_icon_new_from_names.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_themed_icon_new_from_names(char **iconnames, int len)
     * }
     */
    public static MethodHandle g_themed_icon_new_from_names$handle() {
        return g_themed_icon_new_from_names.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_themed_icon_new_from_names(char **iconnames, int len)
     * }
     */
    public static MemorySegment g_themed_icon_new_from_names(MemorySegment iconnames, int len) {
        var mh$ = g_themed_icon_new_from_names.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_themed_icon_new_from_names", iconnames, len);
            }
            return (MemorySegment)mh$.invokeExact(iconnames, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_themed_icon_prepend_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_themed_icon_prepend_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_themed_icon_prepend_name(GThemedIcon *icon, const char *iconname)
     * }
     */
    public static FunctionDescriptor g_themed_icon_prepend_name$descriptor() {
        return g_themed_icon_prepend_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_themed_icon_prepend_name(GThemedIcon *icon, const char *iconname)
     * }
     */
    public static MethodHandle g_themed_icon_prepend_name$handle() {
        return g_themed_icon_prepend_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_themed_icon_prepend_name(GThemedIcon *icon, const char *iconname)
     * }
     */
    public static void g_themed_icon_prepend_name(MemorySegment icon, MemorySegment iconname) {
        var mh$ = g_themed_icon_prepend_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_themed_icon_prepend_name", icon, iconname);
            }
            mh$.invokeExact(icon, iconname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_themed_icon_append_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_themed_icon_append_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_themed_icon_append_name(GThemedIcon *icon, const char *iconname)
     * }
     */
    public static FunctionDescriptor g_themed_icon_append_name$descriptor() {
        return g_themed_icon_append_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_themed_icon_append_name(GThemedIcon *icon, const char *iconname)
     * }
     */
    public static MethodHandle g_themed_icon_append_name$handle() {
        return g_themed_icon_append_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_themed_icon_append_name(GThemedIcon *icon, const char *iconname)
     * }
     */
    public static void g_themed_icon_append_name(MemorySegment icon, MemorySegment iconname) {
        var mh$ = g_themed_icon_append_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_themed_icon_append_name", icon, iconname);
            }
            mh$.invokeExact(icon, iconname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_themed_icon_get_names {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_themed_icon_get_names"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *g_themed_icon_get_names(GThemedIcon *icon)
     * }
     */
    public static FunctionDescriptor g_themed_icon_get_names$descriptor() {
        return g_themed_icon_get_names.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *g_themed_icon_get_names(GThemedIcon *icon)
     * }
     */
    public static MethodHandle g_themed_icon_get_names$handle() {
        return g_themed_icon_get_names.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *g_themed_icon_get_names(GThemedIcon *icon)
     * }
     */
    public static MemorySegment g_themed_icon_get_names(MemorySegment icon) {
        var mh$ = g_themed_icon_get_names.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_themed_icon_get_names", icon);
            }
            return (MemorySegment)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_threaded_socket_service_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_threaded_socket_service_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_threaded_socket_service_get_type()
     * }
     */
    public static FunctionDescriptor g_threaded_socket_service_get_type$descriptor() {
        return g_threaded_socket_service_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_threaded_socket_service_get_type()
     * }
     */
    public static MethodHandle g_threaded_socket_service_get_type$handle() {
        return g_threaded_socket_service_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_threaded_socket_service_get_type()
     * }
     */
    public static long g_threaded_socket_service_get_type() {
        var mh$ = g_threaded_socket_service_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_threaded_socket_service_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_threaded_socket_service_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_threaded_socket_service_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketService *g_threaded_socket_service_new(int max_threads)
     * }
     */
    public static FunctionDescriptor g_threaded_socket_service_new$descriptor() {
        return g_threaded_socket_service_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketService *g_threaded_socket_service_new(int max_threads)
     * }
     */
    public static MethodHandle g_threaded_socket_service_new$handle() {
        return g_threaded_socket_service_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketService *g_threaded_socket_service_new(int max_threads)
     * }
     */
    public static MemorySegment g_threaded_socket_service_new(int max_threads) {
        var mh$ = g_threaded_socket_service_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_threaded_socket_service_new", max_threads);
            }
            return (MemorySegment)mh$.invokeExact(max_threads);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_backend_get_type$descriptor() {
        return g_tls_backend_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_type()
     * }
     */
    public static MethodHandle g_tls_backend_get_type$handle() {
        return g_tls_backend_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_type()
     * }
     */
    public static long g_tls_backend_get_type() {
        var mh$ = g_tls_backend_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsBackend *g_tls_backend_get_default()
     * }
     */
    public static FunctionDescriptor g_tls_backend_get_default$descriptor() {
        return g_tls_backend_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsBackend *g_tls_backend_get_default()
     * }
     */
    public static MethodHandle g_tls_backend_get_default$handle() {
        return g_tls_backend_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsBackend *g_tls_backend_get_default()
     * }
     */
    public static MemorySegment g_tls_backend_get_default() {
        var mh$ = g_tls_backend_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_get_default_database {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_get_default_database"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsDatabase *g_tls_backend_get_default_database(GTlsBackend *backend)
     * }
     */
    public static FunctionDescriptor g_tls_backend_get_default_database$descriptor() {
        return g_tls_backend_get_default_database.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsDatabase *g_tls_backend_get_default_database(GTlsBackend *backend)
     * }
     */
    public static MethodHandle g_tls_backend_get_default_database$handle() {
        return g_tls_backend_get_default_database.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsDatabase *g_tls_backend_get_default_database(GTlsBackend *backend)
     * }
     */
    public static MemorySegment g_tls_backend_get_default_database(MemorySegment backend) {
        var mh$ = g_tls_backend_get_default_database.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_get_default_database", backend);
            }
            return (MemorySegment)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_set_default_database {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_set_default_database"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_backend_set_default_database(GTlsBackend *backend, GTlsDatabase *database)
     * }
     */
    public static FunctionDescriptor g_tls_backend_set_default_database$descriptor() {
        return g_tls_backend_set_default_database.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_backend_set_default_database(GTlsBackend *backend, GTlsDatabase *database)
     * }
     */
    public static MethodHandle g_tls_backend_set_default_database$handle() {
        return g_tls_backend_set_default_database.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_backend_set_default_database(GTlsBackend *backend, GTlsDatabase *database)
     * }
     */
    public static void g_tls_backend_set_default_database(MemorySegment backend, MemorySegment database) {
        var mh$ = g_tls_backend_set_default_database.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_set_default_database", backend, database);
            }
            mh$.invokeExact(backend, database);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_supports_tls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_supports_tls"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tls_backend_supports_tls(GTlsBackend *backend)
     * }
     */
    public static FunctionDescriptor g_tls_backend_supports_tls$descriptor() {
        return g_tls_backend_supports_tls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tls_backend_supports_tls(GTlsBackend *backend)
     * }
     */
    public static MethodHandle g_tls_backend_supports_tls$handle() {
        return g_tls_backend_supports_tls.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tls_backend_supports_tls(GTlsBackend *backend)
     * }
     */
    public static int g_tls_backend_supports_tls(MemorySegment backend) {
        var mh$ = g_tls_backend_supports_tls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_supports_tls", backend);
            }
            return (int)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_supports_dtls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_supports_dtls"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tls_backend_supports_dtls(GTlsBackend *backend)
     * }
     */
    public static FunctionDescriptor g_tls_backend_supports_dtls$descriptor() {
        return g_tls_backend_supports_dtls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tls_backend_supports_dtls(GTlsBackend *backend)
     * }
     */
    public static MethodHandle g_tls_backend_supports_dtls$handle() {
        return g_tls_backend_supports_dtls.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tls_backend_supports_dtls(GTlsBackend *backend)
     * }
     */
    public static int g_tls_backend_supports_dtls(MemorySegment backend) {
        var mh$ = g_tls_backend_supports_dtls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_supports_dtls", backend);
            }
            return (int)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_get_certificate_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_get_certificate_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_certificate_type(GTlsBackend *backend)
     * }
     */
    public static FunctionDescriptor g_tls_backend_get_certificate_type$descriptor() {
        return g_tls_backend_get_certificate_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_certificate_type(GTlsBackend *backend)
     * }
     */
    public static MethodHandle g_tls_backend_get_certificate_type$handle() {
        return g_tls_backend_get_certificate_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_certificate_type(GTlsBackend *backend)
     * }
     */
    public static long g_tls_backend_get_certificate_type(MemorySegment backend) {
        var mh$ = g_tls_backend_get_certificate_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_get_certificate_type", backend);
            }
            return (long)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_get_client_connection_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_get_client_connection_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_client_connection_type(GTlsBackend *backend)
     * }
     */
    public static FunctionDescriptor g_tls_backend_get_client_connection_type$descriptor() {
        return g_tls_backend_get_client_connection_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_client_connection_type(GTlsBackend *backend)
     * }
     */
    public static MethodHandle g_tls_backend_get_client_connection_type$handle() {
        return g_tls_backend_get_client_connection_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_client_connection_type(GTlsBackend *backend)
     * }
     */
    public static long g_tls_backend_get_client_connection_type(MemorySegment backend) {
        var mh$ = g_tls_backend_get_client_connection_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_get_client_connection_type", backend);
            }
            return (long)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_get_server_connection_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_get_server_connection_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_server_connection_type(GTlsBackend *backend)
     * }
     */
    public static FunctionDescriptor g_tls_backend_get_server_connection_type$descriptor() {
        return g_tls_backend_get_server_connection_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_server_connection_type(GTlsBackend *backend)
     * }
     */
    public static MethodHandle g_tls_backend_get_server_connection_type$handle() {
        return g_tls_backend_get_server_connection_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_server_connection_type(GTlsBackend *backend)
     * }
     */
    public static long g_tls_backend_get_server_connection_type(MemorySegment backend) {
        var mh$ = g_tls_backend_get_server_connection_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_get_server_connection_type", backend);
            }
            return (long)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_get_file_database_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_get_file_database_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_file_database_type(GTlsBackend *backend)
     * }
     */
    public static FunctionDescriptor g_tls_backend_get_file_database_type$descriptor() {
        return g_tls_backend_get_file_database_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_file_database_type(GTlsBackend *backend)
     * }
     */
    public static MethodHandle g_tls_backend_get_file_database_type$handle() {
        return g_tls_backend_get_file_database_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_file_database_type(GTlsBackend *backend)
     * }
     */
    public static long g_tls_backend_get_file_database_type(MemorySegment backend) {
        var mh$ = g_tls_backend_get_file_database_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_get_file_database_type", backend);
            }
            return (long)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_get_dtls_client_connection_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_get_dtls_client_connection_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_dtls_client_connection_type(GTlsBackend *backend)
     * }
     */
    public static FunctionDescriptor g_tls_backend_get_dtls_client_connection_type$descriptor() {
        return g_tls_backend_get_dtls_client_connection_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_dtls_client_connection_type(GTlsBackend *backend)
     * }
     */
    public static MethodHandle g_tls_backend_get_dtls_client_connection_type$handle() {
        return g_tls_backend_get_dtls_client_connection_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_dtls_client_connection_type(GTlsBackend *backend)
     * }
     */
    public static long g_tls_backend_get_dtls_client_connection_type(MemorySegment backend) {
        var mh$ = g_tls_backend_get_dtls_client_connection_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_get_dtls_client_connection_type", backend);
            }
            return (long)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_backend_get_dtls_server_connection_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_backend_get_dtls_server_connection_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_dtls_server_connection_type(GTlsBackend *backend)
     * }
     */
    public static FunctionDescriptor g_tls_backend_get_dtls_server_connection_type$descriptor() {
        return g_tls_backend_get_dtls_server_connection_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_dtls_server_connection_type(GTlsBackend *backend)
     * }
     */
    public static MethodHandle g_tls_backend_get_dtls_server_connection_type$handle() {
        return g_tls_backend_get_dtls_server_connection_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_backend_get_dtls_server_connection_type(GTlsBackend *backend)
     * }
     */
    public static long g_tls_backend_get_dtls_server_connection_type(MemorySegment backend) {
        var mh$ = g_tls_backend_get_dtls_server_connection_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_backend_get_dtls_server_connection_type", backend);
            }
            return (long)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_certificate_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_certificate_get_type$descriptor() {
        return g_tls_certificate_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_certificate_get_type()
     * }
     */
    public static MethodHandle g_tls_certificate_get_type$handle() {
        return g_tls_certificate_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_certificate_get_type()
     * }
     */
    public static long g_tls_certificate_get_type() {
        var mh$ = g_tls_certificate_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_new_from_pem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_new_from_pem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_pem(const gchar *data, gssize length, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_new_from_pem$descriptor() {
        return g_tls_certificate_new_from_pem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_pem(const gchar *data, gssize length, GError **error)
     * }
     */
    public static MethodHandle g_tls_certificate_new_from_pem$handle() {
        return g_tls_certificate_new_from_pem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_pem(const gchar *data, gssize length, GError **error)
     * }
     */
    public static MemorySegment g_tls_certificate_new_from_pem(MemorySegment data, long length, MemorySegment error) {
        var mh$ = g_tls_certificate_new_from_pem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_new_from_pem", data, length, error);
            }
            return (MemorySegment)mh$.invokeExact(data, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_new_from_pkcs12 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_new_from_pkcs12"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_pkcs12(const guint8 *data, gsize length, const gchar *password, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_new_from_pkcs12$descriptor() {
        return g_tls_certificate_new_from_pkcs12.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_pkcs12(const guint8 *data, gsize length, const gchar *password, GError **error)
     * }
     */
    public static MethodHandle g_tls_certificate_new_from_pkcs12$handle() {
        return g_tls_certificate_new_from_pkcs12.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_pkcs12(const guint8 *data, gsize length, const gchar *password, GError **error)
     * }
     */
    public static MemorySegment g_tls_certificate_new_from_pkcs12(MemorySegment data, long length, MemorySegment password, MemorySegment error) {
        var mh$ = g_tls_certificate_new_from_pkcs12.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_new_from_pkcs12", data, length, password, error);
            }
            return (MemorySegment)mh$.invokeExact(data, length, password, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_new_from_file_with_password {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_new_from_file_with_password"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_file_with_password(const gchar *file, const gchar *password, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_new_from_file_with_password$descriptor() {
        return g_tls_certificate_new_from_file_with_password.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_file_with_password(const gchar *file, const gchar *password, GError **error)
     * }
     */
    public static MethodHandle g_tls_certificate_new_from_file_with_password$handle() {
        return g_tls_certificate_new_from_file_with_password.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_file_with_password(const gchar *file, const gchar *password, GError **error)
     * }
     */
    public static MemorySegment g_tls_certificate_new_from_file_with_password(MemorySegment file, MemorySegment password, MemorySegment error) {
        var mh$ = g_tls_certificate_new_from_file_with_password.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_new_from_file_with_password", file, password, error);
            }
            return (MemorySegment)mh$.invokeExact(file, password, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_new_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_file(const gchar *file, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_new_from_file$descriptor() {
        return g_tls_certificate_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_file(const gchar *file, GError **error)
     * }
     */
    public static MethodHandle g_tls_certificate_new_from_file$handle() {
        return g_tls_certificate_new_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_file(const gchar *file, GError **error)
     * }
     */
    public static MemorySegment g_tls_certificate_new_from_file(MemorySegment file, MemorySegment error) {
        var mh$ = g_tls_certificate_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_new_from_file", file, error);
            }
            return (MemorySegment)mh$.invokeExact(file, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_new_from_files {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_new_from_files"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_files(const gchar *cert_file, const gchar *key_file, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_new_from_files$descriptor() {
        return g_tls_certificate_new_from_files.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_files(const gchar *cert_file, const gchar *key_file, GError **error)
     * }
     */
    public static MethodHandle g_tls_certificate_new_from_files$handle() {
        return g_tls_certificate_new_from_files.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_files(const gchar *cert_file, const gchar *key_file, GError **error)
     * }
     */
    public static MemorySegment g_tls_certificate_new_from_files(MemorySegment cert_file, MemorySegment key_file, MemorySegment error) {
        var mh$ = g_tls_certificate_new_from_files.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_new_from_files", cert_file, key_file, error);
            }
            return (MemorySegment)mh$.invokeExact(cert_file, key_file, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_new_from_pkcs11_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_new_from_pkcs11_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_pkcs11_uris(const gchar *pkcs11_uri, const gchar *private_key_pkcs11_uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_new_from_pkcs11_uris$descriptor() {
        return g_tls_certificate_new_from_pkcs11_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_pkcs11_uris(const gchar *pkcs11_uri, const gchar *private_key_pkcs11_uri, GError **error)
     * }
     */
    public static MethodHandle g_tls_certificate_new_from_pkcs11_uris$handle() {
        return g_tls_certificate_new_from_pkcs11_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_new_from_pkcs11_uris(const gchar *pkcs11_uri, const gchar *private_key_pkcs11_uri, GError **error)
     * }
     */
    public static MemorySegment g_tls_certificate_new_from_pkcs11_uris(MemorySegment pkcs11_uri, MemorySegment private_key_pkcs11_uri, MemorySegment error) {
        var mh$ = g_tls_certificate_new_from_pkcs11_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_new_from_pkcs11_uris", pkcs11_uri, private_key_pkcs11_uri, error);
            }
            return (MemorySegment)mh$.invokeExact(pkcs11_uri, private_key_pkcs11_uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_list_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_list_new_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_tls_certificate_list_new_from_file(const gchar *file, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_list_new_from_file$descriptor() {
        return g_tls_certificate_list_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_tls_certificate_list_new_from_file(const gchar *file, GError **error)
     * }
     */
    public static MethodHandle g_tls_certificate_list_new_from_file$handle() {
        return g_tls_certificate_list_new_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_tls_certificate_list_new_from_file(const gchar *file, GError **error)
     * }
     */
    public static MemorySegment g_tls_certificate_list_new_from_file(MemorySegment file, MemorySegment error) {
        var mh$ = g_tls_certificate_list_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_list_new_from_file", file, error);
            }
            return (MemorySegment)mh$.invokeExact(file, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_get_issuer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_get_issuer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_get_issuer(GTlsCertificate *cert)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_get_issuer$descriptor() {
        return g_tls_certificate_get_issuer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_get_issuer(GTlsCertificate *cert)
     * }
     */
    public static MethodHandle g_tls_certificate_get_issuer$handle() {
        return g_tls_certificate_get_issuer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_certificate_get_issuer(GTlsCertificate *cert)
     * }
     */
    public static MemorySegment g_tls_certificate_get_issuer(MemorySegment cert) {
        var mh$ = g_tls_certificate_get_issuer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_get_issuer", cert);
            }
            return (MemorySegment)mh$.invokeExact(cert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_verify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_verify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_certificate_verify(GTlsCertificate *cert, GSocketConnectable *identity, GTlsCertificate *trusted_ca)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_verify$descriptor() {
        return g_tls_certificate_verify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_certificate_verify(GTlsCertificate *cert, GSocketConnectable *identity, GTlsCertificate *trusted_ca)
     * }
     */
    public static MethodHandle g_tls_certificate_verify$handle() {
        return g_tls_certificate_verify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_certificate_verify(GTlsCertificate *cert, GSocketConnectable *identity, GTlsCertificate *trusted_ca)
     * }
     */
    public static int g_tls_certificate_verify(MemorySegment cert, MemorySegment identity, MemorySegment trusted_ca) {
        var mh$ = g_tls_certificate_verify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_verify", cert, identity, trusted_ca);
            }
            return (int)mh$.invokeExact(cert, identity, trusted_ca);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_is_same {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_is_same"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tls_certificate_is_same(GTlsCertificate *cert_one, GTlsCertificate *cert_two)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_is_same$descriptor() {
        return g_tls_certificate_is_same.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tls_certificate_is_same(GTlsCertificate *cert_one, GTlsCertificate *cert_two)
     * }
     */
    public static MethodHandle g_tls_certificate_is_same$handle() {
        return g_tls_certificate_is_same.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tls_certificate_is_same(GTlsCertificate *cert_one, GTlsCertificate *cert_two)
     * }
     */
    public static int g_tls_certificate_is_same(MemorySegment cert_one, MemorySegment cert_two) {
        var mh$ = g_tls_certificate_is_same.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_is_same", cert_one, cert_two);
            }
            return (int)mh$.invokeExact(cert_one, cert_two);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_get_not_valid_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_get_not_valid_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_tls_certificate_get_not_valid_before(GTlsCertificate *cert)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_get_not_valid_before$descriptor() {
        return g_tls_certificate_get_not_valid_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_tls_certificate_get_not_valid_before(GTlsCertificate *cert)
     * }
     */
    public static MethodHandle g_tls_certificate_get_not_valid_before$handle() {
        return g_tls_certificate_get_not_valid_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_tls_certificate_get_not_valid_before(GTlsCertificate *cert)
     * }
     */
    public static MemorySegment g_tls_certificate_get_not_valid_before(MemorySegment cert) {
        var mh$ = g_tls_certificate_get_not_valid_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_get_not_valid_before", cert);
            }
            return (MemorySegment)mh$.invokeExact(cert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_get_not_valid_after {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_get_not_valid_after"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_tls_certificate_get_not_valid_after(GTlsCertificate *cert)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_get_not_valid_after$descriptor() {
        return g_tls_certificate_get_not_valid_after.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_tls_certificate_get_not_valid_after(GTlsCertificate *cert)
     * }
     */
    public static MethodHandle g_tls_certificate_get_not_valid_after$handle() {
        return g_tls_certificate_get_not_valid_after.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_tls_certificate_get_not_valid_after(GTlsCertificate *cert)
     * }
     */
    public static MemorySegment g_tls_certificate_get_not_valid_after(MemorySegment cert) {
        var mh$ = g_tls_certificate_get_not_valid_after.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_get_not_valid_after", cert);
            }
            return (MemorySegment)mh$.invokeExact(cert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_get_subject_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_get_subject_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_tls_certificate_get_subject_name(GTlsCertificate *cert)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_get_subject_name$descriptor() {
        return g_tls_certificate_get_subject_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_tls_certificate_get_subject_name(GTlsCertificate *cert)
     * }
     */
    public static MethodHandle g_tls_certificate_get_subject_name$handle() {
        return g_tls_certificate_get_subject_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_tls_certificate_get_subject_name(GTlsCertificate *cert)
     * }
     */
    public static MemorySegment g_tls_certificate_get_subject_name(MemorySegment cert) {
        var mh$ = g_tls_certificate_get_subject_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_get_subject_name", cert);
            }
            return (MemorySegment)mh$.invokeExact(cert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_get_issuer_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_get_issuer_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_tls_certificate_get_issuer_name(GTlsCertificate *cert)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_get_issuer_name$descriptor() {
        return g_tls_certificate_get_issuer_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_tls_certificate_get_issuer_name(GTlsCertificate *cert)
     * }
     */
    public static MethodHandle g_tls_certificate_get_issuer_name$handle() {
        return g_tls_certificate_get_issuer_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_tls_certificate_get_issuer_name(GTlsCertificate *cert)
     * }
     */
    public static MemorySegment g_tls_certificate_get_issuer_name(MemorySegment cert) {
        var mh$ = g_tls_certificate_get_issuer_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_get_issuer_name", cert);
            }
            return (MemorySegment)mh$.invokeExact(cert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_get_dns_names {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_get_dns_names"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_tls_certificate_get_dns_names(GTlsCertificate *cert)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_get_dns_names$descriptor() {
        return g_tls_certificate_get_dns_names.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_tls_certificate_get_dns_names(GTlsCertificate *cert)
     * }
     */
    public static MethodHandle g_tls_certificate_get_dns_names$handle() {
        return g_tls_certificate_get_dns_names.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_tls_certificate_get_dns_names(GTlsCertificate *cert)
     * }
     */
    public static MemorySegment g_tls_certificate_get_dns_names(MemorySegment cert) {
        var mh$ = g_tls_certificate_get_dns_names.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_get_dns_names", cert);
            }
            return (MemorySegment)mh$.invokeExact(cert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_certificate_get_ip_addresses {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_certificate_get_ip_addresses"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_tls_certificate_get_ip_addresses(GTlsCertificate *cert)
     * }
     */
    public static FunctionDescriptor g_tls_certificate_get_ip_addresses$descriptor() {
        return g_tls_certificate_get_ip_addresses.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_tls_certificate_get_ip_addresses(GTlsCertificate *cert)
     * }
     */
    public static MethodHandle g_tls_certificate_get_ip_addresses$handle() {
        return g_tls_certificate_get_ip_addresses.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_tls_certificate_get_ip_addresses(GTlsCertificate *cert)
     * }
     */
    public static MemorySegment g_tls_certificate_get_ip_addresses(MemorySegment cert) {
        var mh$ = g_tls_certificate_get_ip_addresses.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_certificate_get_ip_addresses", cert);
            }
            return (MemorySegment)mh$.invokeExact(cert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_type$descriptor() {
        return g_tls_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_connection_get_type()
     * }
     */
    public static MethodHandle g_tls_connection_get_type$handle() {
        return g_tls_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_connection_get_type()
     * }
     */
    public static long g_tls_connection_get_type() {
        var mh$ = g_tls_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_set_use_system_certdb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_set_use_system_certdb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_use_system_certdb(GTlsConnection *conn, gboolean use_system_certdb)
     * }
     */
    public static FunctionDescriptor g_tls_connection_set_use_system_certdb$descriptor() {
        return g_tls_connection_set_use_system_certdb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_use_system_certdb(GTlsConnection *conn, gboolean use_system_certdb)
     * }
     */
    public static MethodHandle g_tls_connection_set_use_system_certdb$handle() {
        return g_tls_connection_set_use_system_certdb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_connection_set_use_system_certdb(GTlsConnection *conn, gboolean use_system_certdb)
     * }
     */
    public static void g_tls_connection_set_use_system_certdb(MemorySegment conn, int use_system_certdb) {
        var mh$ = g_tls_connection_set_use_system_certdb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_set_use_system_certdb", conn, use_system_certdb);
            }
            mh$.invokeExact(conn, use_system_certdb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_use_system_certdb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_use_system_certdb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_get_use_system_certdb(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_use_system_certdb$descriptor() {
        return g_tls_connection_get_use_system_certdb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_get_use_system_certdb(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_use_system_certdb$handle() {
        return g_tls_connection_get_use_system_certdb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_get_use_system_certdb(GTlsConnection *conn)
     * }
     */
    public static int g_tls_connection_get_use_system_certdb(MemorySegment conn) {
        var mh$ = g_tls_connection_get_use_system_certdb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_use_system_certdb", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_set_database {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_set_database"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_database(GTlsConnection *conn, GTlsDatabase *database)
     * }
     */
    public static FunctionDescriptor g_tls_connection_set_database$descriptor() {
        return g_tls_connection_set_database.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_database(GTlsConnection *conn, GTlsDatabase *database)
     * }
     */
    public static MethodHandle g_tls_connection_set_database$handle() {
        return g_tls_connection_set_database.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_connection_set_database(GTlsConnection *conn, GTlsDatabase *database)
     * }
     */
    public static void g_tls_connection_set_database(MemorySegment conn, MemorySegment database) {
        var mh$ = g_tls_connection_set_database.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_set_database", conn, database);
            }
            mh$.invokeExact(conn, database);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_database {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_database"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsDatabase *g_tls_connection_get_database(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_database$descriptor() {
        return g_tls_connection_get_database.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsDatabase *g_tls_connection_get_database(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_database$handle() {
        return g_tls_connection_get_database.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsDatabase *g_tls_connection_get_database(GTlsConnection *conn)
     * }
     */
    public static MemorySegment g_tls_connection_get_database(MemorySegment conn) {
        var mh$ = g_tls_connection_get_database.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_database", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_set_certificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_set_certificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_certificate(GTlsConnection *conn, GTlsCertificate *certificate)
     * }
     */
    public static FunctionDescriptor g_tls_connection_set_certificate$descriptor() {
        return g_tls_connection_set_certificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_certificate(GTlsConnection *conn, GTlsCertificate *certificate)
     * }
     */
    public static MethodHandle g_tls_connection_set_certificate$handle() {
        return g_tls_connection_set_certificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_connection_set_certificate(GTlsConnection *conn, GTlsCertificate *certificate)
     * }
     */
    public static void g_tls_connection_set_certificate(MemorySegment conn, MemorySegment certificate) {
        var mh$ = g_tls_connection_set_certificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_set_certificate", conn, certificate);
            }
            mh$.invokeExact(conn, certificate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_certificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_certificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_connection_get_certificate(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_certificate$descriptor() {
        return g_tls_connection_get_certificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_connection_get_certificate(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_certificate$handle() {
        return g_tls_connection_get_certificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_connection_get_certificate(GTlsConnection *conn)
     * }
     */
    public static MemorySegment g_tls_connection_get_certificate(MemorySegment conn) {
        var mh$ = g_tls_connection_get_certificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_certificate", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_set_interaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_set_interaction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_interaction(GTlsConnection *conn, GTlsInteraction *interaction)
     * }
     */
    public static FunctionDescriptor g_tls_connection_set_interaction$descriptor() {
        return g_tls_connection_set_interaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_interaction(GTlsConnection *conn, GTlsInteraction *interaction)
     * }
     */
    public static MethodHandle g_tls_connection_set_interaction$handle() {
        return g_tls_connection_set_interaction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_connection_set_interaction(GTlsConnection *conn, GTlsInteraction *interaction)
     * }
     */
    public static void g_tls_connection_set_interaction(MemorySegment conn, MemorySegment interaction) {
        var mh$ = g_tls_connection_set_interaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_set_interaction", conn, interaction);
            }
            mh$.invokeExact(conn, interaction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_interaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_interaction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsInteraction *g_tls_connection_get_interaction(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_interaction$descriptor() {
        return g_tls_connection_get_interaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsInteraction *g_tls_connection_get_interaction(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_interaction$handle() {
        return g_tls_connection_get_interaction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsInteraction *g_tls_connection_get_interaction(GTlsConnection *conn)
     * }
     */
    public static MemorySegment g_tls_connection_get_interaction(MemorySegment conn) {
        var mh$ = g_tls_connection_get_interaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_interaction", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_peer_certificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_peer_certificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_connection_get_peer_certificate(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_peer_certificate$descriptor() {
        return g_tls_connection_get_peer_certificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_connection_get_peer_certificate(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_peer_certificate$handle() {
        return g_tls_connection_get_peer_certificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_connection_get_peer_certificate(GTlsConnection *conn)
     * }
     */
    public static MemorySegment g_tls_connection_get_peer_certificate(MemorySegment conn) {
        var mh$ = g_tls_connection_get_peer_certificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_peer_certificate", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_peer_certificate_errors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_peer_certificate_errors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_peer_certificate_errors$descriptor() {
        return g_tls_connection_get_peer_certificate_errors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_peer_certificate_errors$handle() {
        return g_tls_connection_get_peer_certificate_errors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors(GTlsConnection *conn)
     * }
     */
    public static int g_tls_connection_get_peer_certificate_errors(MemorySegment conn) {
        var mh$ = g_tls_connection_get_peer_certificate_errors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_peer_certificate_errors", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_set_require_close_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_set_require_close_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_require_close_notify(GTlsConnection *conn, gboolean require_close_notify)
     * }
     */
    public static FunctionDescriptor g_tls_connection_set_require_close_notify$descriptor() {
        return g_tls_connection_set_require_close_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_require_close_notify(GTlsConnection *conn, gboolean require_close_notify)
     * }
     */
    public static MethodHandle g_tls_connection_set_require_close_notify$handle() {
        return g_tls_connection_set_require_close_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_connection_set_require_close_notify(GTlsConnection *conn, gboolean require_close_notify)
     * }
     */
    public static void g_tls_connection_set_require_close_notify(MemorySegment conn, int require_close_notify) {
        var mh$ = g_tls_connection_set_require_close_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_set_require_close_notify", conn, require_close_notify);
            }
            mh$.invokeExact(conn, require_close_notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_require_close_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_require_close_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_get_require_close_notify(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_require_close_notify$descriptor() {
        return g_tls_connection_get_require_close_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_get_require_close_notify(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_require_close_notify$handle() {
        return g_tls_connection_get_require_close_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_get_require_close_notify(GTlsConnection *conn)
     * }
     */
    public static int g_tls_connection_get_require_close_notify(MemorySegment conn) {
        var mh$ = g_tls_connection_get_require_close_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_require_close_notify", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_set_rehandshake_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_set_rehandshake_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_rehandshake_mode(GTlsConnection *conn, GTlsRehandshakeMode mode)
     * }
     */
    public static FunctionDescriptor g_tls_connection_set_rehandshake_mode$descriptor() {
        return g_tls_connection_set_rehandshake_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_rehandshake_mode(GTlsConnection *conn, GTlsRehandshakeMode mode)
     * }
     */
    public static MethodHandle g_tls_connection_set_rehandshake_mode$handle() {
        return g_tls_connection_set_rehandshake_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_connection_set_rehandshake_mode(GTlsConnection *conn, GTlsRehandshakeMode mode)
     * }
     */
    public static void g_tls_connection_set_rehandshake_mode(MemorySegment conn, int mode) {
        var mh$ = g_tls_connection_set_rehandshake_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_set_rehandshake_mode", conn, mode);
            }
            mh$.invokeExact(conn, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_rehandshake_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_rehandshake_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_rehandshake_mode$descriptor() {
        return g_tls_connection_get_rehandshake_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_rehandshake_mode$handle() {
        return g_tls_connection_get_rehandshake_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode(GTlsConnection *conn)
     * }
     */
    public static int g_tls_connection_get_rehandshake_mode(MemorySegment conn) {
        var mh$ = g_tls_connection_get_rehandshake_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_rehandshake_mode", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_set_advertised_protocols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_set_advertised_protocols"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_advertised_protocols(GTlsConnection *conn, const gchar *const *protocols)
     * }
     */
    public static FunctionDescriptor g_tls_connection_set_advertised_protocols$descriptor() {
        return g_tls_connection_set_advertised_protocols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_connection_set_advertised_protocols(GTlsConnection *conn, const gchar *const *protocols)
     * }
     */
    public static MethodHandle g_tls_connection_set_advertised_protocols$handle() {
        return g_tls_connection_set_advertised_protocols.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_connection_set_advertised_protocols(GTlsConnection *conn, const gchar *const *protocols)
     * }
     */
    public static void g_tls_connection_set_advertised_protocols(MemorySegment conn, MemorySegment protocols) {
        var mh$ = g_tls_connection_set_advertised_protocols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_set_advertised_protocols", conn, protocols);
            }
            mh$.invokeExact(conn, protocols);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_negotiated_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_negotiated_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_tls_connection_get_negotiated_protocol(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_negotiated_protocol$descriptor() {
        return g_tls_connection_get_negotiated_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_tls_connection_get_negotiated_protocol(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_negotiated_protocol$handle() {
        return g_tls_connection_get_negotiated_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_tls_connection_get_negotiated_protocol(GTlsConnection *conn)
     * }
     */
    public static MemorySegment g_tls_connection_get_negotiated_protocol(MemorySegment conn) {
        var mh$ = g_tls_connection_get_negotiated_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_negotiated_protocol", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_channel_binding_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_channel_binding_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_get_channel_binding_data(GTlsConnection *conn, GTlsChannelBindingType type, GByteArray *data, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_channel_binding_data$descriptor() {
        return g_tls_connection_get_channel_binding_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_get_channel_binding_data(GTlsConnection *conn, GTlsChannelBindingType type, GByteArray *data, GError **error)
     * }
     */
    public static MethodHandle g_tls_connection_get_channel_binding_data$handle() {
        return g_tls_connection_get_channel_binding_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_get_channel_binding_data(GTlsConnection *conn, GTlsChannelBindingType type, GByteArray *data, GError **error)
     * }
     */
    public static int g_tls_connection_get_channel_binding_data(MemorySegment conn, int type, MemorySegment data, MemorySegment error) {
        var mh$ = g_tls_connection_get_channel_binding_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_channel_binding_data", conn, type, data, error);
            }
            return (int)mh$.invokeExact(conn, type, data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_handshake {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_handshake"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_handshake(GTlsConnection *conn, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_connection_handshake$descriptor() {
        return g_tls_connection_handshake.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_handshake(GTlsConnection *conn, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_tls_connection_handshake$handle() {
        return g_tls_connection_handshake.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_handshake(GTlsConnection *conn, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_tls_connection_handshake(MemorySegment conn, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_tls_connection_handshake.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_handshake", conn, cancellable, error);
            }
            return (int)mh$.invokeExact(conn, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_handshake_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_handshake_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_connection_handshake_async(GTlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tls_connection_handshake_async$descriptor() {
        return g_tls_connection_handshake_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_connection_handshake_async(GTlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_tls_connection_handshake_async$handle() {
        return g_tls_connection_handshake_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_connection_handshake_async(GTlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_tls_connection_handshake_async(MemorySegment conn, int io_priority, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_tls_connection_handshake_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_handshake_async", conn, io_priority, cancellable, callback, user_data);
            }
            mh$.invokeExact(conn, io_priority, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_handshake_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_handshake_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_handshake_finish(GTlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_connection_handshake_finish$descriptor() {
        return g_tls_connection_handshake_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_handshake_finish(GTlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_tls_connection_handshake_finish$handle() {
        return g_tls_connection_handshake_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_handshake_finish(GTlsConnection *conn, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_tls_connection_handshake_finish(MemorySegment conn, MemorySegment result, MemorySegment error) {
        var mh$ = g_tls_connection_handshake_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_handshake_finish", conn, result, error);
            }
            return (int)mh$.invokeExact(conn, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_protocol_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_protocol_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsProtocolVersion g_tls_connection_get_protocol_version(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_protocol_version$descriptor() {
        return g_tls_connection_get_protocol_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsProtocolVersion g_tls_connection_get_protocol_version(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_protocol_version$handle() {
        return g_tls_connection_get_protocol_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsProtocolVersion g_tls_connection_get_protocol_version(GTlsConnection *conn)
     * }
     */
    public static int g_tls_connection_get_protocol_version(MemorySegment conn) {
        var mh$ = g_tls_connection_get_protocol_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_protocol_version", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_get_ciphersuite_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_get_ciphersuite_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_tls_connection_get_ciphersuite_name(GTlsConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_connection_get_ciphersuite_name$descriptor() {
        return g_tls_connection_get_ciphersuite_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_tls_connection_get_ciphersuite_name(GTlsConnection *conn)
     * }
     */
    public static MethodHandle g_tls_connection_get_ciphersuite_name$handle() {
        return g_tls_connection_get_ciphersuite_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_tls_connection_get_ciphersuite_name(GTlsConnection *conn)
     * }
     */
    public static MemorySegment g_tls_connection_get_ciphersuite_name(MemorySegment conn) {
        var mh$ = g_tls_connection_get_ciphersuite_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_get_ciphersuite_name", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_tls_error_quark()
     * }
     */
    public static FunctionDescriptor g_tls_error_quark$descriptor() {
        return g_tls_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_tls_error_quark()
     * }
     */
    public static MethodHandle g_tls_error_quark$handle() {
        return g_tls_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_tls_error_quark()
     * }
     */
    public static int g_tls_error_quark() {
        var mh$ = g_tls_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_channel_binding_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_channel_binding_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_tls_channel_binding_error_quark()
     * }
     */
    public static FunctionDescriptor g_tls_channel_binding_error_quark$descriptor() {
        return g_tls_channel_binding_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_tls_channel_binding_error_quark()
     * }
     */
    public static MethodHandle g_tls_channel_binding_error_quark$handle() {
        return g_tls_channel_binding_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_tls_channel_binding_error_quark()
     * }
     */
    public static int g_tls_channel_binding_error_quark() {
        var mh$ = g_tls_channel_binding_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_channel_binding_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_connection_emit_accept_certificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_connection_emit_accept_certificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_emit_accept_certificate(GTlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors)
     * }
     */
    public static FunctionDescriptor g_tls_connection_emit_accept_certificate$descriptor() {
        return g_tls_connection_emit_accept_certificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_emit_accept_certificate(GTlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors)
     * }
     */
    public static MethodHandle g_tls_connection_emit_accept_certificate$handle() {
        return g_tls_connection_emit_accept_certificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tls_connection_emit_accept_certificate(GTlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors)
     * }
     */
    public static int g_tls_connection_emit_accept_certificate(MemorySegment conn, MemorySegment peer_cert, int errors) {
        var mh$ = g_tls_connection_emit_accept_certificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_connection_emit_accept_certificate", conn, peer_cert, errors);
            }
            return (int)mh$.invokeExact(conn, peer_cert, errors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_client_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_client_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_client_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_client_connection_get_type$descriptor() {
        return g_tls_client_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_client_connection_get_type()
     * }
     */
    public static MethodHandle g_tls_client_connection_get_type$handle() {
        return g_tls_client_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_client_connection_get_type()
     * }
     */
    public static long g_tls_client_connection_get_type() {
        var mh$ = g_tls_client_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_client_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_client_connection_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_client_connection_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStream *g_tls_client_connection_new(GIOStream *base_io_stream, GSocketConnectable *server_identity, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_client_connection_new$descriptor() {
        return g_tls_client_connection_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStream *g_tls_client_connection_new(GIOStream *base_io_stream, GSocketConnectable *server_identity, GError **error)
     * }
     */
    public static MethodHandle g_tls_client_connection_new$handle() {
        return g_tls_client_connection_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStream *g_tls_client_connection_new(GIOStream *base_io_stream, GSocketConnectable *server_identity, GError **error)
     * }
     */
    public static MemorySegment g_tls_client_connection_new(MemorySegment base_io_stream, MemorySegment server_identity, MemorySegment error) {
        var mh$ = g_tls_client_connection_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_client_connection_new", base_io_stream, server_identity, error);
            }
            return (MemorySegment)mh$.invokeExact(base_io_stream, server_identity, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_client_connection_get_validation_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_client_connection_get_validation_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_client_connection_get_validation_flags(GTlsClientConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_client_connection_get_validation_flags$descriptor() {
        return g_tls_client_connection_get_validation_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_client_connection_get_validation_flags(GTlsClientConnection *conn)
     * }
     */
    public static MethodHandle g_tls_client_connection_get_validation_flags$handle() {
        return g_tls_client_connection_get_validation_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_client_connection_get_validation_flags(GTlsClientConnection *conn)
     * }
     */
    public static int g_tls_client_connection_get_validation_flags(MemorySegment conn) {
        var mh$ = g_tls_client_connection_get_validation_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_client_connection_get_validation_flags", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_client_connection_set_validation_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_client_connection_set_validation_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_client_connection_set_validation_flags(GTlsClientConnection *conn, GTlsCertificateFlags flags)
     * }
     */
    public static FunctionDescriptor g_tls_client_connection_set_validation_flags$descriptor() {
        return g_tls_client_connection_set_validation_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_client_connection_set_validation_flags(GTlsClientConnection *conn, GTlsCertificateFlags flags)
     * }
     */
    public static MethodHandle g_tls_client_connection_set_validation_flags$handle() {
        return g_tls_client_connection_set_validation_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_client_connection_set_validation_flags(GTlsClientConnection *conn, GTlsCertificateFlags flags)
     * }
     */
    public static void g_tls_client_connection_set_validation_flags(MemorySegment conn, int flags) {
        var mh$ = g_tls_client_connection_set_validation_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_client_connection_set_validation_flags", conn, flags);
            }
            mh$.invokeExact(conn, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_client_connection_get_server_identity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_client_connection_get_server_identity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_tls_client_connection_get_server_identity(GTlsClientConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_client_connection_get_server_identity$descriptor() {
        return g_tls_client_connection_get_server_identity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketConnectable *g_tls_client_connection_get_server_identity(GTlsClientConnection *conn)
     * }
     */
    public static MethodHandle g_tls_client_connection_get_server_identity$handle() {
        return g_tls_client_connection_get_server_identity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketConnectable *g_tls_client_connection_get_server_identity(GTlsClientConnection *conn)
     * }
     */
    public static MemorySegment g_tls_client_connection_get_server_identity(MemorySegment conn) {
        var mh$ = g_tls_client_connection_get_server_identity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_client_connection_get_server_identity", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_client_connection_set_server_identity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_client_connection_set_server_identity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_client_connection_set_server_identity(GTlsClientConnection *conn, GSocketConnectable *identity)
     * }
     */
    public static FunctionDescriptor g_tls_client_connection_set_server_identity$descriptor() {
        return g_tls_client_connection_set_server_identity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_client_connection_set_server_identity(GTlsClientConnection *conn, GSocketConnectable *identity)
     * }
     */
    public static MethodHandle g_tls_client_connection_set_server_identity$handle() {
        return g_tls_client_connection_set_server_identity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_client_connection_set_server_identity(GTlsClientConnection *conn, GSocketConnectable *identity)
     * }
     */
    public static void g_tls_client_connection_set_server_identity(MemorySegment conn, MemorySegment identity) {
        var mh$ = g_tls_client_connection_set_server_identity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_client_connection_set_server_identity", conn, identity);
            }
            mh$.invokeExact(conn, identity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_client_connection_get_use_ssl3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_client_connection_get_use_ssl3"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tls_client_connection_get_use_ssl3(GTlsClientConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_client_connection_get_use_ssl3$descriptor() {
        return g_tls_client_connection_get_use_ssl3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tls_client_connection_get_use_ssl3(GTlsClientConnection *conn)
     * }
     */
    public static MethodHandle g_tls_client_connection_get_use_ssl3$handle() {
        return g_tls_client_connection_get_use_ssl3.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tls_client_connection_get_use_ssl3(GTlsClientConnection *conn)
     * }
     */
    public static int g_tls_client_connection_get_use_ssl3(MemorySegment conn) {
        var mh$ = g_tls_client_connection_get_use_ssl3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_client_connection_get_use_ssl3", conn);
            }
            return (int)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_client_connection_set_use_ssl3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_client_connection_set_use_ssl3"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_client_connection_set_use_ssl3(GTlsClientConnection *conn, gboolean use_ssl3)
     * }
     */
    public static FunctionDescriptor g_tls_client_connection_set_use_ssl3$descriptor() {
        return g_tls_client_connection_set_use_ssl3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_client_connection_set_use_ssl3(GTlsClientConnection *conn, gboolean use_ssl3)
     * }
     */
    public static MethodHandle g_tls_client_connection_set_use_ssl3$handle() {
        return g_tls_client_connection_set_use_ssl3.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_client_connection_set_use_ssl3(GTlsClientConnection *conn, gboolean use_ssl3)
     * }
     */
    public static void g_tls_client_connection_set_use_ssl3(MemorySegment conn, int use_ssl3) {
        var mh$ = g_tls_client_connection_set_use_ssl3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_client_connection_set_use_ssl3", conn, use_ssl3);
            }
            mh$.invokeExact(conn, use_ssl3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_client_connection_get_accepted_cas {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_client_connection_get_accepted_cas"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_tls_client_connection_get_accepted_cas(GTlsClientConnection *conn)
     * }
     */
    public static FunctionDescriptor g_tls_client_connection_get_accepted_cas$descriptor() {
        return g_tls_client_connection_get_accepted_cas.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_tls_client_connection_get_accepted_cas(GTlsClientConnection *conn)
     * }
     */
    public static MethodHandle g_tls_client_connection_get_accepted_cas$handle() {
        return g_tls_client_connection_get_accepted_cas.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_tls_client_connection_get_accepted_cas(GTlsClientConnection *conn)
     * }
     */
    public static MemorySegment g_tls_client_connection_get_accepted_cas(MemorySegment conn) {
        var mh$ = g_tls_client_connection_get_accepted_cas.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_client_connection_get_accepted_cas", conn);
            }
            return (MemorySegment)mh$.invokeExact(conn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_client_connection_copy_session_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_client_connection_copy_session_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_client_connection_copy_session_state(GTlsClientConnection *conn, GTlsClientConnection *source)
     * }
     */
    public static FunctionDescriptor g_tls_client_connection_copy_session_state$descriptor() {
        return g_tls_client_connection_copy_session_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_client_connection_copy_session_state(GTlsClientConnection *conn, GTlsClientConnection *source)
     * }
     */
    public static MethodHandle g_tls_client_connection_copy_session_state$handle() {
        return g_tls_client_connection_copy_session_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_client_connection_copy_session_state(GTlsClientConnection *conn, GTlsClientConnection *source)
     * }
     */
    public static void g_tls_client_connection_copy_session_state(MemorySegment conn, MemorySegment source) {
        var mh$ = g_tls_client_connection_copy_session_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_client_connection_copy_session_state", conn, source);
            }
            mh$.invokeExact(conn, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_database_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_database_get_type$descriptor() {
        return g_tls_database_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_database_get_type()
     * }
     */
    public static MethodHandle g_tls_database_get_type$handle() {
        return g_tls_database_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_database_get_type()
     * }
     */
    public static long g_tls_database_get_type() {
        var mh$ = g_tls_database_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_verify_chain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_verify_chain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_database_verify_chain(GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_database_verify_chain$descriptor() {
        return g_tls_database_verify_chain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_database_verify_chain(GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_tls_database_verify_chain$handle() {
        return g_tls_database_verify_chain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_database_verify_chain(GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_tls_database_verify_chain(MemorySegment self, MemorySegment chain, MemorySegment purpose, MemorySegment identity, MemorySegment interaction, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_tls_database_verify_chain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_verify_chain", self, chain, purpose, identity, interaction, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(self, chain, purpose, identity, interaction, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_verify_chain_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_verify_chain_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_database_verify_chain_async(GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tls_database_verify_chain_async$descriptor() {
        return g_tls_database_verify_chain_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_database_verify_chain_async(GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_tls_database_verify_chain_async$handle() {
        return g_tls_database_verify_chain_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_database_verify_chain_async(GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_tls_database_verify_chain_async(MemorySegment self, MemorySegment chain, MemorySegment purpose, MemorySegment identity, MemorySegment interaction, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_tls_database_verify_chain_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_verify_chain_async", self, chain, purpose, identity, interaction, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(self, chain, purpose, identity, interaction, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_verify_chain_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_verify_chain_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_database_verify_chain_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_database_verify_chain_finish$descriptor() {
        return g_tls_database_verify_chain_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_database_verify_chain_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_tls_database_verify_chain_finish$handle() {
        return g_tls_database_verify_chain_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificateFlags g_tls_database_verify_chain_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_tls_database_verify_chain_finish(MemorySegment self, MemorySegment result, MemorySegment error) {
        var mh$ = g_tls_database_verify_chain_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_verify_chain_finish", self, result, error);
            }
            return (int)mh$.invokeExact(self, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_create_certificate_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_create_certificate_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_tls_database_create_certificate_handle(GTlsDatabase *self, GTlsCertificate *certificate)
     * }
     */
    public static FunctionDescriptor g_tls_database_create_certificate_handle$descriptor() {
        return g_tls_database_create_certificate_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_tls_database_create_certificate_handle(GTlsDatabase *self, GTlsCertificate *certificate)
     * }
     */
    public static MethodHandle g_tls_database_create_certificate_handle$handle() {
        return g_tls_database_create_certificate_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_tls_database_create_certificate_handle(GTlsDatabase *self, GTlsCertificate *certificate)
     * }
     */
    public static MemorySegment g_tls_database_create_certificate_handle(MemorySegment self, MemorySegment certificate) {
        var mh$ = g_tls_database_create_certificate_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_create_certificate_handle", self, certificate);
            }
            return (MemorySegment)mh$.invokeExact(self, certificate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_lookup_certificate_for_handle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_lookup_certificate_for_handle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_for_handle(GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_database_lookup_certificate_for_handle$descriptor() {
        return g_tls_database_lookup_certificate_for_handle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_for_handle(GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_tls_database_lookup_certificate_for_handle$handle() {
        return g_tls_database_lookup_certificate_for_handle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_for_handle(GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_tls_database_lookup_certificate_for_handle(MemorySegment self, MemorySegment handle, MemorySegment interaction, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_tls_database_lookup_certificate_for_handle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_lookup_certificate_for_handle", self, handle, interaction, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(self, handle, interaction, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_lookup_certificate_for_handle_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_lookup_certificate_for_handle_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_database_lookup_certificate_for_handle_async(GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tls_database_lookup_certificate_for_handle_async$descriptor() {
        return g_tls_database_lookup_certificate_for_handle_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_database_lookup_certificate_for_handle_async(GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_tls_database_lookup_certificate_for_handle_async$handle() {
        return g_tls_database_lookup_certificate_for_handle_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_database_lookup_certificate_for_handle_async(GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_tls_database_lookup_certificate_for_handle_async(MemorySegment self, MemorySegment handle, MemorySegment interaction, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_tls_database_lookup_certificate_for_handle_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_lookup_certificate_for_handle_async", self, handle, interaction, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(self, handle, interaction, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_lookup_certificate_for_handle_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_lookup_certificate_for_handle_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_for_handle_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_database_lookup_certificate_for_handle_finish$descriptor() {
        return g_tls_database_lookup_certificate_for_handle_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_for_handle_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_tls_database_lookup_certificate_for_handle_finish$handle() {
        return g_tls_database_lookup_certificate_for_handle_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_for_handle_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_tls_database_lookup_certificate_for_handle_finish(MemorySegment self, MemorySegment result, MemorySegment error) {
        var mh$ = g_tls_database_lookup_certificate_for_handle_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_lookup_certificate_for_handle_finish", self, result, error);
            }
            return (MemorySegment)mh$.invokeExact(self, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_lookup_certificate_issuer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_lookup_certificate_issuer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_issuer(GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_database_lookup_certificate_issuer$descriptor() {
        return g_tls_database_lookup_certificate_issuer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_issuer(GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_tls_database_lookup_certificate_issuer$handle() {
        return g_tls_database_lookup_certificate_issuer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_issuer(GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_tls_database_lookup_certificate_issuer(MemorySegment self, MemorySegment certificate, MemorySegment interaction, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_tls_database_lookup_certificate_issuer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_lookup_certificate_issuer", self, certificate, interaction, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(self, certificate, interaction, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_lookup_certificate_issuer_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_lookup_certificate_issuer_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_database_lookup_certificate_issuer_async(GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tls_database_lookup_certificate_issuer_async$descriptor() {
        return g_tls_database_lookup_certificate_issuer_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_database_lookup_certificate_issuer_async(GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_tls_database_lookup_certificate_issuer_async$handle() {
        return g_tls_database_lookup_certificate_issuer_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_database_lookup_certificate_issuer_async(GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_tls_database_lookup_certificate_issuer_async(MemorySegment self, MemorySegment certificate, MemorySegment interaction, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_tls_database_lookup_certificate_issuer_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_lookup_certificate_issuer_async", self, certificate, interaction, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(self, certificate, interaction, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_lookup_certificate_issuer_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_lookup_certificate_issuer_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_issuer_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_database_lookup_certificate_issuer_finish$descriptor() {
        return g_tls_database_lookup_certificate_issuer_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_issuer_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_tls_database_lookup_certificate_issuer_finish$handle() {
        return g_tls_database_lookup_certificate_issuer_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsCertificate *g_tls_database_lookup_certificate_issuer_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_tls_database_lookup_certificate_issuer_finish(MemorySegment self, MemorySegment result, MemorySegment error) {
        var mh$ = g_tls_database_lookup_certificate_issuer_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_lookup_certificate_issuer_finish", self, result, error);
            }
            return (MemorySegment)mh$.invokeExact(self, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_lookup_certificates_issued_by {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_lookup_certificates_issued_by"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_tls_database_lookup_certificates_issued_by(GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_database_lookup_certificates_issued_by$descriptor() {
        return g_tls_database_lookup_certificates_issued_by.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_tls_database_lookup_certificates_issued_by(GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_tls_database_lookup_certificates_issued_by$handle() {
        return g_tls_database_lookup_certificates_issued_by.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_tls_database_lookup_certificates_issued_by(GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_tls_database_lookup_certificates_issued_by(MemorySegment self, MemorySegment issuer_raw_dn, MemorySegment interaction, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_tls_database_lookup_certificates_issued_by.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_lookup_certificates_issued_by", self, issuer_raw_dn, interaction, flags, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(self, issuer_raw_dn, interaction, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_lookup_certificates_issued_by_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_lookup_certificates_issued_by_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_database_lookup_certificates_issued_by_async(GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tls_database_lookup_certificates_issued_by_async$descriptor() {
        return g_tls_database_lookup_certificates_issued_by_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_database_lookup_certificates_issued_by_async(GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_tls_database_lookup_certificates_issued_by_async$handle() {
        return g_tls_database_lookup_certificates_issued_by_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_database_lookup_certificates_issued_by_async(GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_tls_database_lookup_certificates_issued_by_async(MemorySegment self, MemorySegment issuer_raw_dn, MemorySegment interaction, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_tls_database_lookup_certificates_issued_by_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_lookup_certificates_issued_by_async", self, issuer_raw_dn, interaction, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(self, issuer_raw_dn, interaction, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_database_lookup_certificates_issued_by_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_database_lookup_certificates_issued_by_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_tls_database_lookup_certificates_issued_by_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_database_lookup_certificates_issued_by_finish$descriptor() {
        return g_tls_database_lookup_certificates_issued_by_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_tls_database_lookup_certificates_issued_by_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_tls_database_lookup_certificates_issued_by_finish$handle() {
        return g_tls_database_lookup_certificates_issued_by_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_tls_database_lookup_certificates_issued_by_finish(GTlsDatabase *self, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_tls_database_lookup_certificates_issued_by_finish(MemorySegment self, MemorySegment result, MemorySegment error) {
        var mh$ = g_tls_database_lookup_certificates_issued_by_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_database_lookup_certificates_issued_by_finish", self, result, error);
            }
            return (MemorySegment)mh$.invokeExact(self, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_file_database_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_file_database_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_file_database_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_file_database_get_type$descriptor() {
        return g_tls_file_database_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_file_database_get_type()
     * }
     */
    public static MethodHandle g_tls_file_database_get_type$handle() {
        return g_tls_file_database_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_file_database_get_type()
     * }
     */
    public static long g_tls_file_database_get_type() {
        var mh$ = g_tls_file_database_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_file_database_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_file_database_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_file_database_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsDatabase *g_tls_file_database_new(const gchar *anchors, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_file_database_new$descriptor() {
        return g_tls_file_database_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsDatabase *g_tls_file_database_new(const gchar *anchors, GError **error)
     * }
     */
    public static MethodHandle g_tls_file_database_new$handle() {
        return g_tls_file_database_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsDatabase *g_tls_file_database_new(const gchar *anchors, GError **error)
     * }
     */
    public static MemorySegment g_tls_file_database_new(MemorySegment anchors, MemorySegment error) {
        var mh$ = g_tls_file_database_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_file_database_new", anchors, error);
            }
            return (MemorySegment)mh$.invokeExact(anchors, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_interaction_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_interaction_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_interaction_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_interaction_get_type$descriptor() {
        return g_tls_interaction_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_interaction_get_type()
     * }
     */
    public static MethodHandle g_tls_interaction_get_type$handle() {
        return g_tls_interaction_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_interaction_get_type()
     * }
     */
    public static long g_tls_interaction_get_type() {
        var mh$ = g_tls_interaction_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_interaction_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_interaction_invoke_ask_password {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_interaction_invoke_ask_password"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_invoke_ask_password(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_interaction_invoke_ask_password$descriptor() {
        return g_tls_interaction_invoke_ask_password.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_invoke_ask_password(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_tls_interaction_invoke_ask_password$handle() {
        return g_tls_interaction_invoke_ask_password.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_invoke_ask_password(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_tls_interaction_invoke_ask_password(MemorySegment interaction, MemorySegment password, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_tls_interaction_invoke_ask_password.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_interaction_invoke_ask_password", interaction, password, cancellable, error);
            }
            return (int)mh$.invokeExact(interaction, password, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_interaction_ask_password {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_interaction_ask_password"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_ask_password(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_interaction_ask_password$descriptor() {
        return g_tls_interaction_ask_password.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_ask_password(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_tls_interaction_ask_password$handle() {
        return g_tls_interaction_ask_password.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_ask_password(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_tls_interaction_ask_password(MemorySegment interaction, MemorySegment password, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_tls_interaction_ask_password.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_interaction_ask_password", interaction, password, cancellable, error);
            }
            return (int)mh$.invokeExact(interaction, password, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_interaction_ask_password_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_interaction_ask_password_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_interaction_ask_password_async(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tls_interaction_ask_password_async$descriptor() {
        return g_tls_interaction_ask_password_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_interaction_ask_password_async(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_tls_interaction_ask_password_async$handle() {
        return g_tls_interaction_ask_password_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_interaction_ask_password_async(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_tls_interaction_ask_password_async(MemorySegment interaction, MemorySegment password, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_tls_interaction_ask_password_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_interaction_ask_password_async", interaction, password, cancellable, callback, user_data);
            }
            mh$.invokeExact(interaction, password, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_interaction_ask_password_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_interaction_ask_password_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_ask_password_finish(GTlsInteraction *interaction, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_interaction_ask_password_finish$descriptor() {
        return g_tls_interaction_ask_password_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_ask_password_finish(GTlsInteraction *interaction, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_tls_interaction_ask_password_finish$handle() {
        return g_tls_interaction_ask_password_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_ask_password_finish(GTlsInteraction *interaction, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_tls_interaction_ask_password_finish(MemorySegment interaction, MemorySegment result, MemorySegment error) {
        var mh$ = g_tls_interaction_ask_password_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_interaction_ask_password_finish", interaction, result, error);
            }
            return (int)mh$.invokeExact(interaction, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_interaction_invoke_request_certificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_interaction_invoke_request_certificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_invoke_request_certificate(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_interaction_invoke_request_certificate$descriptor() {
        return g_tls_interaction_invoke_request_certificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_invoke_request_certificate(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_tls_interaction_invoke_request_certificate$handle() {
        return g_tls_interaction_invoke_request_certificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_invoke_request_certificate(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_tls_interaction_invoke_request_certificate(MemorySegment interaction, MemorySegment connection, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_tls_interaction_invoke_request_certificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_interaction_invoke_request_certificate", interaction, connection, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(interaction, connection, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_interaction_request_certificate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_interaction_request_certificate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_request_certificate(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_interaction_request_certificate$descriptor() {
        return g_tls_interaction_request_certificate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_request_certificate(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_tls_interaction_request_certificate$handle() {
        return g_tls_interaction_request_certificate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_request_certificate(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_tls_interaction_request_certificate(MemorySegment interaction, MemorySegment connection, int flags, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_tls_interaction_request_certificate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_interaction_request_certificate", interaction, connection, flags, cancellable, error);
            }
            return (int)mh$.invokeExact(interaction, connection, flags, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_interaction_request_certificate_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_interaction_request_certificate_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_interaction_request_certificate_async(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tls_interaction_request_certificate_async$descriptor() {
        return g_tls_interaction_request_certificate_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_interaction_request_certificate_async(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_tls_interaction_request_certificate_async$handle() {
        return g_tls_interaction_request_certificate_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_interaction_request_certificate_async(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_tls_interaction_request_certificate_async(MemorySegment interaction, MemorySegment connection, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_tls_interaction_request_certificate_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_interaction_request_certificate_async", interaction, connection, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(interaction, connection, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_interaction_request_certificate_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_interaction_request_certificate_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_request_certificate_finish(GTlsInteraction *interaction, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_interaction_request_certificate_finish$descriptor() {
        return g_tls_interaction_request_certificate_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_request_certificate_finish(GTlsInteraction *interaction, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_tls_interaction_request_certificate_finish$handle() {
        return g_tls_interaction_request_certificate_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsInteractionResult g_tls_interaction_request_certificate_finish(GTlsInteraction *interaction, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_tls_interaction_request_certificate_finish(MemorySegment interaction, MemorySegment result, MemorySegment error) {
        var mh$ = g_tls_interaction_request_certificate_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_interaction_request_certificate_finish", interaction, result, error);
            }
            return (int)mh$.invokeExact(interaction, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_password_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_password_get_type$descriptor() {
        return g_tls_password_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_password_get_type()
     * }
     */
    public static MethodHandle g_tls_password_get_type$handle() {
        return g_tls_password_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_password_get_type()
     * }
     */
    public static long g_tls_password_get_type() {
        var mh$ = g_tls_password_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsPassword *g_tls_password_new(GTlsPasswordFlags flags, const gchar *description)
     * }
     */
    public static FunctionDescriptor g_tls_password_new$descriptor() {
        return g_tls_password_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsPassword *g_tls_password_new(GTlsPasswordFlags flags, const gchar *description)
     * }
     */
    public static MethodHandle g_tls_password_new$handle() {
        return g_tls_password_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsPassword *g_tls_password_new(GTlsPasswordFlags flags, const gchar *description)
     * }
     */
    public static MemorySegment g_tls_password_new(int flags, MemorySegment description) {
        var mh$ = g_tls_password_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_new", flags, description);
            }
            return (MemorySegment)mh$.invokeExact(flags, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const guchar *g_tls_password_get_value(GTlsPassword *password, gsize *length)
     * }
     */
    public static FunctionDescriptor g_tls_password_get_value$descriptor() {
        return g_tls_password_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const guchar *g_tls_password_get_value(GTlsPassword *password, gsize *length)
     * }
     */
    public static MethodHandle g_tls_password_get_value$handle() {
        return g_tls_password_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const guchar *g_tls_password_get_value(GTlsPassword *password, gsize *length)
     * }
     */
    public static MemorySegment g_tls_password_get_value(MemorySegment password, MemorySegment length) {
        var mh$ = g_tls_password_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_get_value", password, length);
            }
            return (MemorySegment)mh$.invokeExact(password, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_password_set_value(GTlsPassword *password, const guchar *value, gssize length)
     * }
     */
    public static FunctionDescriptor g_tls_password_set_value$descriptor() {
        return g_tls_password_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_password_set_value(GTlsPassword *password, const guchar *value, gssize length)
     * }
     */
    public static MethodHandle g_tls_password_set_value$handle() {
        return g_tls_password_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_password_set_value(GTlsPassword *password, const guchar *value, gssize length)
     * }
     */
    public static void g_tls_password_set_value(MemorySegment password, MemorySegment value, long length) {
        var mh$ = g_tls_password_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_set_value", password, value, length);
            }
            mh$.invokeExact(password, value, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_set_value_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_set_value_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_password_set_value_full(GTlsPassword *password, guchar *value, gssize length, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_tls_password_set_value_full$descriptor() {
        return g_tls_password_set_value_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_password_set_value_full(GTlsPassword *password, guchar *value, gssize length, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_tls_password_set_value_full$handle() {
        return g_tls_password_set_value_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_password_set_value_full(GTlsPassword *password, guchar *value, gssize length, GDestroyNotify destroy)
     * }
     */
    public static void g_tls_password_set_value_full(MemorySegment password, MemorySegment value, long length, MemorySegment destroy) {
        var mh$ = g_tls_password_set_value_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_set_value_full", password, value, length, destroy);
            }
            mh$.invokeExact(password, value, length, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTlsPasswordFlags g_tls_password_get_flags(GTlsPassword *password)
     * }
     */
    public static FunctionDescriptor g_tls_password_get_flags$descriptor() {
        return g_tls_password_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTlsPasswordFlags g_tls_password_get_flags(GTlsPassword *password)
     * }
     */
    public static MethodHandle g_tls_password_get_flags$handle() {
        return g_tls_password_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTlsPasswordFlags g_tls_password_get_flags(GTlsPassword *password)
     * }
     */
    public static int g_tls_password_get_flags(MemorySegment password) {
        var mh$ = g_tls_password_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_get_flags", password);
            }
            return (int)mh$.invokeExact(password);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_password_set_flags(GTlsPassword *password, GTlsPasswordFlags flags)
     * }
     */
    public static FunctionDescriptor g_tls_password_set_flags$descriptor() {
        return g_tls_password_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_password_set_flags(GTlsPassword *password, GTlsPasswordFlags flags)
     * }
     */
    public static MethodHandle g_tls_password_set_flags$handle() {
        return g_tls_password_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_password_set_flags(GTlsPassword *password, GTlsPasswordFlags flags)
     * }
     */
    public static void g_tls_password_set_flags(MemorySegment password, int flags) {
        var mh$ = g_tls_password_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_set_flags", password, flags);
            }
            mh$.invokeExact(password, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_tls_password_get_description(GTlsPassword *password)
     * }
     */
    public static FunctionDescriptor g_tls_password_get_description$descriptor() {
        return g_tls_password_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_tls_password_get_description(GTlsPassword *password)
     * }
     */
    public static MethodHandle g_tls_password_get_description$handle() {
        return g_tls_password_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_tls_password_get_description(GTlsPassword *password)
     * }
     */
    public static MemorySegment g_tls_password_get_description(MemorySegment password) {
        var mh$ = g_tls_password_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_get_description", password);
            }
            return (MemorySegment)mh$.invokeExact(password);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_set_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_set_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_password_set_description(GTlsPassword *password, const gchar *description)
     * }
     */
    public static FunctionDescriptor g_tls_password_set_description$descriptor() {
        return g_tls_password_set_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_password_set_description(GTlsPassword *password, const gchar *description)
     * }
     */
    public static MethodHandle g_tls_password_set_description$handle() {
        return g_tls_password_set_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_password_set_description(GTlsPassword *password, const gchar *description)
     * }
     */
    public static void g_tls_password_set_description(MemorySegment password, MemorySegment description) {
        var mh$ = g_tls_password_set_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_set_description", password, description);
            }
            mh$.invokeExact(password, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_get_warning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_get_warning"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_tls_password_get_warning(GTlsPassword *password)
     * }
     */
    public static FunctionDescriptor g_tls_password_get_warning$descriptor() {
        return g_tls_password_get_warning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_tls_password_get_warning(GTlsPassword *password)
     * }
     */
    public static MethodHandle g_tls_password_get_warning$handle() {
        return g_tls_password_get_warning.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_tls_password_get_warning(GTlsPassword *password)
     * }
     */
    public static MemorySegment g_tls_password_get_warning(MemorySegment password) {
        var mh$ = g_tls_password_get_warning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_get_warning", password);
            }
            return (MemorySegment)mh$.invokeExact(password);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_password_set_warning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_password_set_warning"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tls_password_set_warning(GTlsPassword *password, const gchar *warning)
     * }
     */
    public static FunctionDescriptor g_tls_password_set_warning$descriptor() {
        return g_tls_password_set_warning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tls_password_set_warning(GTlsPassword *password, const gchar *warning)
     * }
     */
    public static MethodHandle g_tls_password_set_warning$handle() {
        return g_tls_password_set_warning.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tls_password_set_warning(GTlsPassword *password, const gchar *warning)
     * }
     */
    public static void g_tls_password_set_warning(MemorySegment password, MemorySegment warning) {
        var mh$ = g_tls_password_set_warning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_password_set_warning", password, warning);
            }
            mh$.invokeExact(password, warning);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_server_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_server_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tls_server_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_tls_server_connection_get_type$descriptor() {
        return g_tls_server_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tls_server_connection_get_type()
     * }
     */
    public static MethodHandle g_tls_server_connection_get_type$handle() {
        return g_tls_server_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tls_server_connection_get_type()
     * }
     */
    public static long g_tls_server_connection_get_type() {
        var mh$ = g_tls_server_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_server_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tls_server_connection_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tls_server_connection_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOStream *g_tls_server_connection_new(GIOStream *base_io_stream, GTlsCertificate *certificate, GError **error)
     * }
     */
    public static FunctionDescriptor g_tls_server_connection_new$descriptor() {
        return g_tls_server_connection_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOStream *g_tls_server_connection_new(GIOStream *base_io_stream, GTlsCertificate *certificate, GError **error)
     * }
     */
    public static MethodHandle g_tls_server_connection_new$handle() {
        return g_tls_server_connection_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOStream *g_tls_server_connection_new(GIOStream *base_io_stream, GTlsCertificate *certificate, GError **error)
     * }
     */
    public static MemorySegment g_tls_server_connection_new(MemorySegment base_io_stream, MemorySegment certificate, MemorySegment error) {
        var mh$ = g_tls_server_connection_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tls_server_connection_new", base_io_stream, certificate, error);
            }
            return (MemorySegment)mh$.invokeExact(base_io_stream, certificate, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GUnixConnection *GUnixConnection_autoptr
     * }
     */
    public static final AddressLayout GUnixConnection_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GUnixConnection_listautoptr
     * }
     */
    public static final AddressLayout GUnixConnection_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GUnixConnection_slistautoptr
     * }
     */
    public static final AddressLayout GUnixConnection_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GUnixConnection_queueautoptr
     * }
     */
    public static final AddressLayout GUnixConnection_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_unix_connection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_connection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_unix_connection_get_type()
     * }
     */
    public static FunctionDescriptor g_unix_connection_get_type$descriptor() {
        return g_unix_connection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_unix_connection_get_type()
     * }
     */
    public static MethodHandle g_unix_connection_get_type$handle() {
        return g_unix_connection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_unix_connection_get_type()
     * }
     */
    public static long g_unix_connection_get_type() {
        var mh$ = g_unix_connection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_connection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_connection_send_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_connection_send_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unix_connection_send_fd(GUnixConnection *connection, gint fd, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_unix_connection_send_fd$descriptor() {
        return g_unix_connection_send_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unix_connection_send_fd(GUnixConnection *connection, gint fd, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_unix_connection_send_fd$handle() {
        return g_unix_connection_send_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unix_connection_send_fd(GUnixConnection *connection, gint fd, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_unix_connection_send_fd(MemorySegment connection, int fd, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_unix_connection_send_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_connection_send_fd", connection, fd, cancellable, error);
            }
            return (int)mh$.invokeExact(connection, fd, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_connection_receive_fd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_connection_receive_fd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_unix_connection_receive_fd(GUnixConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_unix_connection_receive_fd$descriptor() {
        return g_unix_connection_receive_fd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_unix_connection_receive_fd(GUnixConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_unix_connection_receive_fd$handle() {
        return g_unix_connection_receive_fd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_unix_connection_receive_fd(GUnixConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_unix_connection_receive_fd(MemorySegment connection, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_unix_connection_receive_fd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_connection_receive_fd", connection, cancellable, error);
            }
            return (int)mh$.invokeExact(connection, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_connection_send_credentials {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_connection_send_credentials"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unix_connection_send_credentials(GUnixConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_unix_connection_send_credentials$descriptor() {
        return g_unix_connection_send_credentials.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unix_connection_send_credentials(GUnixConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_unix_connection_send_credentials$handle() {
        return g_unix_connection_send_credentials.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unix_connection_send_credentials(GUnixConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static int g_unix_connection_send_credentials(MemorySegment connection, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_unix_connection_send_credentials.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_connection_send_credentials", connection, cancellable, error);
            }
            return (int)mh$.invokeExact(connection, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_connection_send_credentials_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_connection_send_credentials_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_unix_connection_send_credentials_async(GUnixConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_unix_connection_send_credentials_async$descriptor() {
        return g_unix_connection_send_credentials_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_unix_connection_send_credentials_async(GUnixConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_unix_connection_send_credentials_async$handle() {
        return g_unix_connection_send_credentials_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_unix_connection_send_credentials_async(GUnixConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_unix_connection_send_credentials_async(MemorySegment connection, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_unix_connection_send_credentials_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_connection_send_credentials_async", connection, cancellable, callback, user_data);
            }
            mh$.invokeExact(connection, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_connection_send_credentials_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_connection_send_credentials_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unix_connection_send_credentials_finish(GUnixConnection *connection, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_unix_connection_send_credentials_finish$descriptor() {
        return g_unix_connection_send_credentials_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unix_connection_send_credentials_finish(GUnixConnection *connection, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_unix_connection_send_credentials_finish$handle() {
        return g_unix_connection_send_credentials_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unix_connection_send_credentials_finish(GUnixConnection *connection, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_unix_connection_send_credentials_finish(MemorySegment connection, MemorySegment result, MemorySegment error) {
        var mh$ = g_unix_connection_send_credentials_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_connection_send_credentials_finish", connection, result, error);
            }
            return (int)mh$.invokeExact(connection, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_connection_receive_credentials {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_connection_receive_credentials"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCredentials *g_unix_connection_receive_credentials(GUnixConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static FunctionDescriptor g_unix_connection_receive_credentials$descriptor() {
        return g_unix_connection_receive_credentials.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCredentials *g_unix_connection_receive_credentials(GUnixConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static MethodHandle g_unix_connection_receive_credentials$handle() {
        return g_unix_connection_receive_credentials.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCredentials *g_unix_connection_receive_credentials(GUnixConnection *connection, GCancellable *cancellable, GError **error)
     * }
     */
    public static MemorySegment g_unix_connection_receive_credentials(MemorySegment connection, MemorySegment cancellable, MemorySegment error) {
        var mh$ = g_unix_connection_receive_credentials.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_connection_receive_credentials", connection, cancellable, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, cancellable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_connection_receive_credentials_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_connection_receive_credentials_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_unix_connection_receive_credentials_async(GUnixConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_unix_connection_receive_credentials_async$descriptor() {
        return g_unix_connection_receive_credentials_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_unix_connection_receive_credentials_async(GUnixConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_unix_connection_receive_credentials_async$handle() {
        return g_unix_connection_receive_credentials_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_unix_connection_receive_credentials_async(GUnixConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_unix_connection_receive_credentials_async(MemorySegment connection, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_unix_connection_receive_credentials_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_connection_receive_credentials_async", connection, cancellable, callback, user_data);
            }
            mh$.invokeExact(connection, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_connection_receive_credentials_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_connection_receive_credentials_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCredentials *g_unix_connection_receive_credentials_finish(GUnixConnection *connection, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_unix_connection_receive_credentials_finish$descriptor() {
        return g_unix_connection_receive_credentials_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCredentials *g_unix_connection_receive_credentials_finish(GUnixConnection *connection, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_unix_connection_receive_credentials_finish$handle() {
        return g_unix_connection_receive_credentials_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCredentials *g_unix_connection_receive_credentials_finish(GUnixConnection *connection, GAsyncResult *result, GError **error)
     * }
     */
    public static MemorySegment g_unix_connection_receive_credentials_finish(MemorySegment connection, MemorySegment result, MemorySegment error) {
        var mh$ = g_unix_connection_receive_credentials_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_connection_receive_credentials_finish", connection, result, error);
            }
            return (MemorySegment)mh$.invokeExact(connection, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GUnixCredentialsMessage *GUnixCredentialsMessage_autoptr
     * }
     */
    public static final AddressLayout GUnixCredentialsMessage_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GUnixCredentialsMessage_listautoptr
     * }
     */
    public static final AddressLayout GUnixCredentialsMessage_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GUnixCredentialsMessage_slistautoptr
     * }
     */
    public static final AddressLayout GUnixCredentialsMessage_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GUnixCredentialsMessage_queueautoptr
     * }
     */
    public static final AddressLayout GUnixCredentialsMessage_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_unix_credentials_message_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_credentials_message_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_unix_credentials_message_get_type()
     * }
     */
    public static FunctionDescriptor g_unix_credentials_message_get_type$descriptor() {
        return g_unix_credentials_message_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_unix_credentials_message_get_type()
     * }
     */
    public static MethodHandle g_unix_credentials_message_get_type$handle() {
        return g_unix_credentials_message_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_unix_credentials_message_get_type()
     * }
     */
    public static long g_unix_credentials_message_get_type() {
        var mh$ = g_unix_credentials_message_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_credentials_message_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_credentials_message_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_credentials_message_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketControlMessage *g_unix_credentials_message_new()
     * }
     */
    public static FunctionDescriptor g_unix_credentials_message_new$descriptor() {
        return g_unix_credentials_message_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketControlMessage *g_unix_credentials_message_new()
     * }
     */
    public static MethodHandle g_unix_credentials_message_new$handle() {
        return g_unix_credentials_message_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketControlMessage *g_unix_credentials_message_new()
     * }
     */
    public static MemorySegment g_unix_credentials_message_new() {
        var mh$ = g_unix_credentials_message_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_credentials_message_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_credentials_message_new_with_credentials {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_credentials_message_new_with_credentials"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketControlMessage *g_unix_credentials_message_new_with_credentials(GCredentials *credentials)
     * }
     */
    public static FunctionDescriptor g_unix_credentials_message_new_with_credentials$descriptor() {
        return g_unix_credentials_message_new_with_credentials.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketControlMessage *g_unix_credentials_message_new_with_credentials(GCredentials *credentials)
     * }
     */
    public static MethodHandle g_unix_credentials_message_new_with_credentials$handle() {
        return g_unix_credentials_message_new_with_credentials.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketControlMessage *g_unix_credentials_message_new_with_credentials(GCredentials *credentials)
     * }
     */
    public static MemorySegment g_unix_credentials_message_new_with_credentials(MemorySegment credentials) {
        var mh$ = g_unix_credentials_message_new_with_credentials.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_credentials_message_new_with_credentials", credentials);
            }
            return (MemorySegment)mh$.invokeExact(credentials);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_credentials_message_get_credentials {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_credentials_message_get_credentials"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCredentials *g_unix_credentials_message_get_credentials(GUnixCredentialsMessage *message)
     * }
     */
    public static FunctionDescriptor g_unix_credentials_message_get_credentials$descriptor() {
        return g_unix_credentials_message_get_credentials.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCredentials *g_unix_credentials_message_get_credentials(GUnixCredentialsMessage *message)
     * }
     */
    public static MethodHandle g_unix_credentials_message_get_credentials$handle() {
        return g_unix_credentials_message_get_credentials.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCredentials *g_unix_credentials_message_get_credentials(GUnixCredentialsMessage *message)
     * }
     */
    public static MemorySegment g_unix_credentials_message_get_credentials(MemorySegment message) {
        var mh$ = g_unix_credentials_message_get_credentials.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_credentials_message_get_credentials", message);
            }
            return (MemorySegment)mh$.invokeExact(message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_credentials_message_is_supported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_credentials_message_is_supported"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unix_credentials_message_is_supported()
     * }
     */
    public static FunctionDescriptor g_unix_credentials_message_is_supported$descriptor() {
        return g_unix_credentials_message_is_supported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unix_credentials_message_is_supported()
     * }
     */
    public static MethodHandle g_unix_credentials_message_is_supported$handle() {
        return g_unix_credentials_message_is_supported.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unix_credentials_message_is_supported()
     * }
     */
    public static int g_unix_credentials_message_is_supported() {
        var mh$ = g_unix_credentials_message_is_supported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_credentials_message_is_supported");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GUnixFDList *GUnixFDList_autoptr
     * }
     */
    public static final AddressLayout GUnixFDList_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GUnixFDList_listautoptr
     * }
     */
    public static final AddressLayout GUnixFDList_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GUnixFDList_slistautoptr
     * }
     */
    public static final AddressLayout GUnixFDList_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GUnixFDList_queueautoptr
     * }
     */
    public static final AddressLayout GUnixFDList_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_unix_fd_list_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_fd_list_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_unix_fd_list_get_type()
     * }
     */
    public static FunctionDescriptor g_unix_fd_list_get_type$descriptor() {
        return g_unix_fd_list_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_unix_fd_list_get_type()
     * }
     */
    public static MethodHandle g_unix_fd_list_get_type$handle() {
        return g_unix_fd_list_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_unix_fd_list_get_type()
     * }
     */
    public static long g_unix_fd_list_get_type() {
        var mh$ = g_unix_fd_list_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_fd_list_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_fd_list_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_fd_list_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUnixFDList *g_unix_fd_list_new()
     * }
     */
    public static FunctionDescriptor g_unix_fd_list_new$descriptor() {
        return g_unix_fd_list_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUnixFDList *g_unix_fd_list_new()
     * }
     */
    public static MethodHandle g_unix_fd_list_new$handle() {
        return g_unix_fd_list_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUnixFDList *g_unix_fd_list_new()
     * }
     */
    public static MemorySegment g_unix_fd_list_new() {
        var mh$ = g_unix_fd_list_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_fd_list_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_fd_list_new_from_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_fd_list_new_from_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUnixFDList *g_unix_fd_list_new_from_array(const gint *fds, gint n_fds)
     * }
     */
    public static FunctionDescriptor g_unix_fd_list_new_from_array$descriptor() {
        return g_unix_fd_list_new_from_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUnixFDList *g_unix_fd_list_new_from_array(const gint *fds, gint n_fds)
     * }
     */
    public static MethodHandle g_unix_fd_list_new_from_array$handle() {
        return g_unix_fd_list_new_from_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUnixFDList *g_unix_fd_list_new_from_array(const gint *fds, gint n_fds)
     * }
     */
    public static MemorySegment g_unix_fd_list_new_from_array(MemorySegment fds, int n_fds) {
        var mh$ = g_unix_fd_list_new_from_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_fd_list_new_from_array", fds, n_fds);
            }
            return (MemorySegment)mh$.invokeExact(fds, n_fds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_fd_list_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_fd_list_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_unix_fd_list_append(GUnixFDList *list, gint fd, GError **error)
     * }
     */
    public static FunctionDescriptor g_unix_fd_list_append$descriptor() {
        return g_unix_fd_list_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_unix_fd_list_append(GUnixFDList *list, gint fd, GError **error)
     * }
     */
    public static MethodHandle g_unix_fd_list_append$handle() {
        return g_unix_fd_list_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_unix_fd_list_append(GUnixFDList *list, gint fd, GError **error)
     * }
     */
    public static int g_unix_fd_list_append(MemorySegment list, int fd, MemorySegment error) {
        var mh$ = g_unix_fd_list_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_fd_list_append", list, fd, error);
            }
            return (int)mh$.invokeExact(list, fd, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_fd_list_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_fd_list_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_unix_fd_list_get_length(GUnixFDList *list)
     * }
     */
    public static FunctionDescriptor g_unix_fd_list_get_length$descriptor() {
        return g_unix_fd_list_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_unix_fd_list_get_length(GUnixFDList *list)
     * }
     */
    public static MethodHandle g_unix_fd_list_get_length$handle() {
        return g_unix_fd_list_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_unix_fd_list_get_length(GUnixFDList *list)
     * }
     */
    public static int g_unix_fd_list_get_length(MemorySegment list) {
        var mh$ = g_unix_fd_list_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_fd_list_get_length", list);
            }
            return (int)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_fd_list_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_fd_list_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_unix_fd_list_get(GUnixFDList *list, gint index_, GError **error)
     * }
     */
    public static FunctionDescriptor g_unix_fd_list_get$descriptor() {
        return g_unix_fd_list_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_unix_fd_list_get(GUnixFDList *list, gint index_, GError **error)
     * }
     */
    public static MethodHandle g_unix_fd_list_get$handle() {
        return g_unix_fd_list_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_unix_fd_list_get(GUnixFDList *list, gint index_, GError **error)
     * }
     */
    public static int g_unix_fd_list_get(MemorySegment list, int index_, MemorySegment error) {
        var mh$ = g_unix_fd_list_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_fd_list_get", list, index_, error);
            }
            return (int)mh$.invokeExact(list, index_, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_fd_list_peek_fds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_fd_list_peek_fds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gint *g_unix_fd_list_peek_fds(GUnixFDList *list, gint *length)
     * }
     */
    public static FunctionDescriptor g_unix_fd_list_peek_fds$descriptor() {
        return g_unix_fd_list_peek_fds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gint *g_unix_fd_list_peek_fds(GUnixFDList *list, gint *length)
     * }
     */
    public static MethodHandle g_unix_fd_list_peek_fds$handle() {
        return g_unix_fd_list_peek_fds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gint *g_unix_fd_list_peek_fds(GUnixFDList *list, gint *length)
     * }
     */
    public static MemorySegment g_unix_fd_list_peek_fds(MemorySegment list, MemorySegment length) {
        var mh$ = g_unix_fd_list_peek_fds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_fd_list_peek_fds", list, length);
            }
            return (MemorySegment)mh$.invokeExact(list, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_fd_list_steal_fds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_fd_list_steal_fds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint *g_unix_fd_list_steal_fds(GUnixFDList *list, gint *length)
     * }
     */
    public static FunctionDescriptor g_unix_fd_list_steal_fds$descriptor() {
        return g_unix_fd_list_steal_fds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint *g_unix_fd_list_steal_fds(GUnixFDList *list, gint *length)
     * }
     */
    public static MethodHandle g_unix_fd_list_steal_fds$handle() {
        return g_unix_fd_list_steal_fds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint *g_unix_fd_list_steal_fds(GUnixFDList *list, gint *length)
     * }
     */
    public static MemorySegment g_unix_fd_list_steal_fds(MemorySegment list, MemorySegment length) {
        var mh$ = g_unix_fd_list_steal_fds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_fd_list_steal_fds", list, length);
            }
            return (MemorySegment)mh$.invokeExact(list, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GUnixSocketAddress *GUnixSocketAddress_autoptr
     * }
     */
    public static final AddressLayout GUnixSocketAddress_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GUnixSocketAddress_listautoptr
     * }
     */
    public static final AddressLayout GUnixSocketAddress_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GUnixSocketAddress_slistautoptr
     * }
     */
    public static final AddressLayout GUnixSocketAddress_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GUnixSocketAddress_queueautoptr
     * }
     */
    public static final AddressLayout GUnixSocketAddress_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_unix_socket_address_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_socket_address_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_unix_socket_address_get_type()
     * }
     */
    public static FunctionDescriptor g_unix_socket_address_get_type$descriptor() {
        return g_unix_socket_address_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_unix_socket_address_get_type()
     * }
     */
    public static MethodHandle g_unix_socket_address_get_type$handle() {
        return g_unix_socket_address_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_unix_socket_address_get_type()
     * }
     */
    public static long g_unix_socket_address_get_type() {
        var mh$ = g_unix_socket_address_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_socket_address_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_socket_address_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_socket_address_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_unix_socket_address_new(const gchar *path)
     * }
     */
    public static FunctionDescriptor g_unix_socket_address_new$descriptor() {
        return g_unix_socket_address_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_unix_socket_address_new(const gchar *path)
     * }
     */
    public static MethodHandle g_unix_socket_address_new$handle() {
        return g_unix_socket_address_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_unix_socket_address_new(const gchar *path)
     * }
     */
    public static MemorySegment g_unix_socket_address_new(MemorySegment path) {
        var mh$ = g_unix_socket_address_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_socket_address_new", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_socket_address_new_abstract {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_socket_address_new_abstract"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_unix_socket_address_new_abstract(const gchar *path, gint path_len)
     * }
     */
    public static FunctionDescriptor g_unix_socket_address_new_abstract$descriptor() {
        return g_unix_socket_address_new_abstract.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_unix_socket_address_new_abstract(const gchar *path, gint path_len)
     * }
     */
    public static MethodHandle g_unix_socket_address_new_abstract$handle() {
        return g_unix_socket_address_new_abstract.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_unix_socket_address_new_abstract(const gchar *path, gint path_len)
     * }
     */
    public static MemorySegment g_unix_socket_address_new_abstract(MemorySegment path, int path_len) {
        var mh$ = g_unix_socket_address_new_abstract.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_socket_address_new_abstract", path, path_len);
            }
            return (MemorySegment)mh$.invokeExact(path, path_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_socket_address_new_with_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_socket_address_new_with_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_unix_socket_address_new_with_type(const gchar *path, gint path_len, GUnixSocketAddressType type)
     * }
     */
    public static FunctionDescriptor g_unix_socket_address_new_with_type$descriptor() {
        return g_unix_socket_address_new_with_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSocketAddress *g_unix_socket_address_new_with_type(const gchar *path, gint path_len, GUnixSocketAddressType type)
     * }
     */
    public static MethodHandle g_unix_socket_address_new_with_type$handle() {
        return g_unix_socket_address_new_with_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSocketAddress *g_unix_socket_address_new_with_type(const gchar *path, gint path_len, GUnixSocketAddressType type)
     * }
     */
    public static MemorySegment g_unix_socket_address_new_with_type(MemorySegment path, int path_len, int type) {
        var mh$ = g_unix_socket_address_new_with_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_socket_address_new_with_type", path, path_len, type);
            }
            return (MemorySegment)mh$.invokeExact(path, path_len, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_socket_address_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_socket_address_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_unix_socket_address_get_path(GUnixSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_unix_socket_address_get_path$descriptor() {
        return g_unix_socket_address_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_unix_socket_address_get_path(GUnixSocketAddress *address)
     * }
     */
    public static MethodHandle g_unix_socket_address_get_path$handle() {
        return g_unix_socket_address_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_unix_socket_address_get_path(GUnixSocketAddress *address)
     * }
     */
    public static MemorySegment g_unix_socket_address_get_path(MemorySegment address) {
        var mh$ = g_unix_socket_address_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_socket_address_get_path", address);
            }
            return (MemorySegment)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_socket_address_get_path_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_socket_address_get_path_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_unix_socket_address_get_path_len(GUnixSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_unix_socket_address_get_path_len$descriptor() {
        return g_unix_socket_address_get_path_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_unix_socket_address_get_path_len(GUnixSocketAddress *address)
     * }
     */
    public static MethodHandle g_unix_socket_address_get_path_len$handle() {
        return g_unix_socket_address_get_path_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_unix_socket_address_get_path_len(GUnixSocketAddress *address)
     * }
     */
    public static long g_unix_socket_address_get_path_len(MemorySegment address) {
        var mh$ = g_unix_socket_address_get_path_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_socket_address_get_path_len", address);
            }
            return (long)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_socket_address_get_address_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_socket_address_get_address_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUnixSocketAddressType g_unix_socket_address_get_address_type(GUnixSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_unix_socket_address_get_address_type$descriptor() {
        return g_unix_socket_address_get_address_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUnixSocketAddressType g_unix_socket_address_get_address_type(GUnixSocketAddress *address)
     * }
     */
    public static MethodHandle g_unix_socket_address_get_address_type$handle() {
        return g_unix_socket_address_get_address_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUnixSocketAddressType g_unix_socket_address_get_address_type(GUnixSocketAddress *address)
     * }
     */
    public static int g_unix_socket_address_get_address_type(MemorySegment address) {
        var mh$ = g_unix_socket_address_get_address_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_socket_address_get_address_type", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_socket_address_get_is_abstract {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_socket_address_get_is_abstract"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unix_socket_address_get_is_abstract(GUnixSocketAddress *address)
     * }
     */
    public static FunctionDescriptor g_unix_socket_address_get_is_abstract$descriptor() {
        return g_unix_socket_address_get_is_abstract.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unix_socket_address_get_is_abstract(GUnixSocketAddress *address)
     * }
     */
    public static MethodHandle g_unix_socket_address_get_is_abstract$handle() {
        return g_unix_socket_address_get_is_abstract.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unix_socket_address_get_is_abstract(GUnixSocketAddress *address)
     * }
     */
    public static int g_unix_socket_address_get_is_abstract(MemorySegment address) {
        var mh$ = g_unix_socket_address_get_is_abstract.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_socket_address_get_is_abstract", address);
            }
            return (int)mh$.invokeExact(address);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unix_socket_address_abstract_names_supported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unix_socket_address_abstract_names_supported"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_unix_socket_address_abstract_names_supported()
     * }
     */
    public static FunctionDescriptor g_unix_socket_address_abstract_names_supported$descriptor() {
        return g_unix_socket_address_abstract_names_supported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_unix_socket_address_abstract_names_supported()
     * }
     */
    public static MethodHandle g_unix_socket_address_abstract_names_supported$handle() {
        return g_unix_socket_address_abstract_names_supported.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_unix_socket_address_abstract_names_supported()
     * }
     */
    public static int g_unix_socket_address_abstract_names_supported() {
        var mh$ = g_unix_socket_address_abstract_names_supported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unix_socket_address_abstract_names_supported");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_vfs_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_vfs_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_vfs_get_type()
     * }
     */
    public static FunctionDescriptor g_vfs_get_type$descriptor() {
        return g_vfs_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_vfs_get_type()
     * }
     */
    public static MethodHandle g_vfs_get_type$handle() {
        return g_vfs_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_vfs_get_type()
     * }
     */
    public static long g_vfs_get_type() {
        var mh$ = g_vfs_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_vfs_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_vfs_is_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_vfs_is_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_vfs_is_active(GVfs *vfs)
     * }
     */
    public static FunctionDescriptor g_vfs_is_active$descriptor() {
        return g_vfs_is_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_vfs_is_active(GVfs *vfs)
     * }
     */
    public static MethodHandle g_vfs_is_active$handle() {
        return g_vfs_is_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_vfs_is_active(GVfs *vfs)
     * }
     */
    public static int g_vfs_is_active(MemorySegment vfs) {
        var mh$ = g_vfs_is_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_vfs_is_active", vfs);
            }
            return (int)mh$.invokeExact(vfs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_vfs_get_file_for_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_vfs_get_file_for_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_vfs_get_file_for_path(GVfs *vfs, const char *path)
     * }
     */
    public static FunctionDescriptor g_vfs_get_file_for_path$descriptor() {
        return g_vfs_get_file_for_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_vfs_get_file_for_path(GVfs *vfs, const char *path)
     * }
     */
    public static MethodHandle g_vfs_get_file_for_path$handle() {
        return g_vfs_get_file_for_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_vfs_get_file_for_path(GVfs *vfs, const char *path)
     * }
     */
    public static MemorySegment g_vfs_get_file_for_path(MemorySegment vfs, MemorySegment path) {
        var mh$ = g_vfs_get_file_for_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_vfs_get_file_for_path", vfs, path);
            }
            return (MemorySegment)mh$.invokeExact(vfs, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_vfs_get_file_for_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_vfs_get_file_for_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_vfs_get_file_for_uri(GVfs *vfs, const char *uri)
     * }
     */
    public static FunctionDescriptor g_vfs_get_file_for_uri$descriptor() {
        return g_vfs_get_file_for_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_vfs_get_file_for_uri(GVfs *vfs, const char *uri)
     * }
     */
    public static MethodHandle g_vfs_get_file_for_uri$handle() {
        return g_vfs_get_file_for_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_vfs_get_file_for_uri(GVfs *vfs, const char *uri)
     * }
     */
    public static MemorySegment g_vfs_get_file_for_uri(MemorySegment vfs, MemorySegment uri) {
        var mh$ = g_vfs_get_file_for_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_vfs_get_file_for_uri", vfs, uri);
            }
            return (MemorySegment)mh$.invokeExact(vfs, uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_vfs_get_supported_uri_schemes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_vfs_get_supported_uri_schemes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *g_vfs_get_supported_uri_schemes(GVfs *vfs)
     * }
     */
    public static FunctionDescriptor g_vfs_get_supported_uri_schemes$descriptor() {
        return g_vfs_get_supported_uri_schemes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *g_vfs_get_supported_uri_schemes(GVfs *vfs)
     * }
     */
    public static MethodHandle g_vfs_get_supported_uri_schemes$handle() {
        return g_vfs_get_supported_uri_schemes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *g_vfs_get_supported_uri_schemes(GVfs *vfs)
     * }
     */
    public static MemorySegment g_vfs_get_supported_uri_schemes(MemorySegment vfs) {
        var mh$ = g_vfs_get_supported_uri_schemes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_vfs_get_supported_uri_schemes", vfs);
            }
            return (MemorySegment)mh$.invokeExact(vfs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_vfs_parse_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_vfs_parse_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_vfs_parse_name(GVfs *vfs, const char *parse_name)
     * }
     */
    public static FunctionDescriptor g_vfs_parse_name$descriptor() {
        return g_vfs_parse_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_vfs_parse_name(GVfs *vfs, const char *parse_name)
     * }
     */
    public static MethodHandle g_vfs_parse_name$handle() {
        return g_vfs_parse_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_vfs_parse_name(GVfs *vfs, const char *parse_name)
     * }
     */
    public static MemorySegment g_vfs_parse_name(MemorySegment vfs, MemorySegment parse_name) {
        var mh$ = g_vfs_parse_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_vfs_parse_name", vfs, parse_name);
            }
            return (MemorySegment)mh$.invokeExact(vfs, parse_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_vfs_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_vfs_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVfs *g_vfs_get_default()
     * }
     */
    public static FunctionDescriptor g_vfs_get_default$descriptor() {
        return g_vfs_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVfs *g_vfs_get_default()
     * }
     */
    public static MethodHandle g_vfs_get_default$handle() {
        return g_vfs_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVfs *g_vfs_get_default()
     * }
     */
    public static MemorySegment g_vfs_get_default() {
        var mh$ = g_vfs_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_vfs_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_vfs_get_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_vfs_get_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVfs *g_vfs_get_local()
     * }
     */
    public static FunctionDescriptor g_vfs_get_local$descriptor() {
        return g_vfs_get_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVfs *g_vfs_get_local()
     * }
     */
    public static MethodHandle g_vfs_get_local$handle() {
        return g_vfs_get_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVfs *g_vfs_get_local()
     * }
     */
    public static MemorySegment g_vfs_get_local() {
        var mh$ = g_vfs_get_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_vfs_get_local");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_vfs_register_uri_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_vfs_register_uri_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_vfs_register_uri_scheme(GVfs *vfs, const char *scheme, GVfsFileLookupFunc uri_func, gpointer uri_data, GDestroyNotify uri_destroy, GVfsFileLookupFunc parse_name_func, gpointer parse_name_data, GDestroyNotify parse_name_destroy)
     * }
     */
    public static FunctionDescriptor g_vfs_register_uri_scheme$descriptor() {
        return g_vfs_register_uri_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_vfs_register_uri_scheme(GVfs *vfs, const char *scheme, GVfsFileLookupFunc uri_func, gpointer uri_data, GDestroyNotify uri_destroy, GVfsFileLookupFunc parse_name_func, gpointer parse_name_data, GDestroyNotify parse_name_destroy)
     * }
     */
    public static MethodHandle g_vfs_register_uri_scheme$handle() {
        return g_vfs_register_uri_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_vfs_register_uri_scheme(GVfs *vfs, const char *scheme, GVfsFileLookupFunc uri_func, gpointer uri_data, GDestroyNotify uri_destroy, GVfsFileLookupFunc parse_name_func, gpointer parse_name_data, GDestroyNotify parse_name_destroy)
     * }
     */
    public static int g_vfs_register_uri_scheme(MemorySegment vfs, MemorySegment scheme, MemorySegment uri_func, MemorySegment uri_data, MemorySegment uri_destroy, MemorySegment parse_name_func, MemorySegment parse_name_data, MemorySegment parse_name_destroy) {
        var mh$ = g_vfs_register_uri_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_vfs_register_uri_scheme", vfs, scheme, uri_func, uri_data, uri_destroy, parse_name_func, parse_name_data, parse_name_destroy);
            }
            return (int)mh$.invokeExact(vfs, scheme, uri_func, uri_data, uri_destroy, parse_name_func, parse_name_data, parse_name_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_vfs_unregister_uri_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_vfs_unregister_uri_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_vfs_unregister_uri_scheme(GVfs *vfs, const char *scheme)
     * }
     */
    public static FunctionDescriptor g_vfs_unregister_uri_scheme$descriptor() {
        return g_vfs_unregister_uri_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_vfs_unregister_uri_scheme(GVfs *vfs, const char *scheme)
     * }
     */
    public static MethodHandle g_vfs_unregister_uri_scheme$handle() {
        return g_vfs_unregister_uri_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_vfs_unregister_uri_scheme(GVfs *vfs, const char *scheme)
     * }
     */
    public static int g_vfs_unregister_uri_scheme(MemorySegment vfs, MemorySegment scheme) {
        var mh$ = g_vfs_unregister_uri_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_vfs_unregister_uri_scheme", vfs, scheme);
            }
            return (int)mh$.invokeExact(vfs, scheme);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_volume_get_type()
     * }
     */
    public static FunctionDescriptor g_volume_get_type$descriptor() {
        return g_volume_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_volume_get_type()
     * }
     */
    public static MethodHandle g_volume_get_type$handle() {
        return g_volume_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_volume_get_type()
     * }
     */
    public static long g_volume_get_type() {
        var mh$ = g_volume_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_volume_get_name(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_get_name$descriptor() {
        return g_volume_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_volume_get_name(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_get_name$handle() {
        return g_volume_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_volume_get_name(GVolume *volume)
     * }
     */
    public static MemorySegment g_volume_get_name(MemorySegment volume) {
        var mh$ = g_volume_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_get_name", volume);
            }
            return (MemorySegment)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_volume_get_icon(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_get_icon$descriptor() {
        return g_volume_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_volume_get_icon(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_get_icon$handle() {
        return g_volume_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_volume_get_icon(GVolume *volume)
     * }
     */
    public static MemorySegment g_volume_get_icon(MemorySegment volume) {
        var mh$ = g_volume_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_get_icon", volume);
            }
            return (MemorySegment)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_get_symbolic_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_get_symbolic_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *g_volume_get_symbolic_icon(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_get_symbolic_icon$descriptor() {
        return g_volume_get_symbolic_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *g_volume_get_symbolic_icon(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_get_symbolic_icon$handle() {
        return g_volume_get_symbolic_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *g_volume_get_symbolic_icon(GVolume *volume)
     * }
     */
    public static MemorySegment g_volume_get_symbolic_icon(MemorySegment volume) {
        var mh$ = g_volume_get_symbolic_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_get_symbolic_icon", volume);
            }
            return (MemorySegment)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_get_uuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_get_uuid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_volume_get_uuid(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_get_uuid$descriptor() {
        return g_volume_get_uuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_volume_get_uuid(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_get_uuid$handle() {
        return g_volume_get_uuid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_volume_get_uuid(GVolume *volume)
     * }
     */
    public static MemorySegment g_volume_get_uuid(MemorySegment volume) {
        var mh$ = g_volume_get_uuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_get_uuid", volume);
            }
            return (MemorySegment)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_get_drive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_get_drive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDrive *g_volume_get_drive(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_get_drive$descriptor() {
        return g_volume_get_drive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDrive *g_volume_get_drive(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_get_drive$handle() {
        return g_volume_get_drive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDrive *g_volume_get_drive(GVolume *volume)
     * }
     */
    public static MemorySegment g_volume_get_drive(MemorySegment volume) {
        var mh$ = g_volume_get_drive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_get_drive", volume);
            }
            return (MemorySegment)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_get_mount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_get_mount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMount *g_volume_get_mount(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_get_mount$descriptor() {
        return g_volume_get_mount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMount *g_volume_get_mount(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_get_mount$handle() {
        return g_volume_get_mount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMount *g_volume_get_mount(GVolume *volume)
     * }
     */
    public static MemorySegment g_volume_get_mount(MemorySegment volume) {
        var mh$ = g_volume_get_mount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_get_mount", volume);
            }
            return (MemorySegment)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_can_mount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_can_mount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_volume_can_mount(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_can_mount$descriptor() {
        return g_volume_can_mount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_volume_can_mount(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_can_mount$handle() {
        return g_volume_can_mount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_volume_can_mount(GVolume *volume)
     * }
     */
    public static int g_volume_can_mount(MemorySegment volume) {
        var mh$ = g_volume_can_mount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_can_mount", volume);
            }
            return (int)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_can_eject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_can_eject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_volume_can_eject(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_can_eject$descriptor() {
        return g_volume_can_eject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_volume_can_eject(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_can_eject$handle() {
        return g_volume_can_eject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_volume_can_eject(GVolume *volume)
     * }
     */
    public static int g_volume_can_eject(MemorySegment volume) {
        var mh$ = g_volume_can_eject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_can_eject", volume);
            }
            return (int)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_should_automount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_should_automount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_volume_should_automount(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_should_automount$descriptor() {
        return g_volume_should_automount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_volume_should_automount(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_should_automount$handle() {
        return g_volume_should_automount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_volume_should_automount(GVolume *volume)
     * }
     */
    public static int g_volume_should_automount(MemorySegment volume) {
        var mh$ = g_volume_should_automount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_should_automount", volume);
            }
            return (int)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_mount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_mount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_volume_mount(GVolume *volume, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_volume_mount$descriptor() {
        return g_volume_mount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_volume_mount(GVolume *volume, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_volume_mount$handle() {
        return g_volume_mount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_volume_mount(GVolume *volume, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_volume_mount(MemorySegment volume, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_volume_mount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_mount", volume, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(volume, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_mount_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_mount_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_volume_mount_finish(GVolume *volume, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_volume_mount_finish$descriptor() {
        return g_volume_mount_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_volume_mount_finish(GVolume *volume, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_volume_mount_finish$handle() {
        return g_volume_mount_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_volume_mount_finish(GVolume *volume, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_volume_mount_finish(MemorySegment volume, MemorySegment result, MemorySegment error) {
        var mh$ = g_volume_mount_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_mount_finish", volume, result, error);
            }
            return (int)mh$.invokeExact(volume, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_eject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_eject"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_volume_eject(GVolume *volume, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_volume_eject$descriptor() {
        return g_volume_eject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_volume_eject(GVolume *volume, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_volume_eject$handle() {
        return g_volume_eject.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_volume_eject(GVolume *volume, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_volume_eject(MemorySegment volume, int flags, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_volume_eject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_eject", volume, flags, cancellable, callback, user_data);
            }
            mh$.invokeExact(volume, flags, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_eject_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_eject_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_volume_eject_finish(GVolume *volume, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_volume_eject_finish$descriptor() {
        return g_volume_eject_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_volume_eject_finish(GVolume *volume, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_volume_eject_finish$handle() {
        return g_volume_eject_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_volume_eject_finish(GVolume *volume, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_volume_eject_finish(MemorySegment volume, MemorySegment result, MemorySegment error) {
        var mh$ = g_volume_eject_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_eject_finish", volume, result, error);
            }
            return (int)mh$.invokeExact(volume, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_get_identifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_get_identifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_volume_get_identifier(GVolume *volume, const char *kind)
     * }
     */
    public static FunctionDescriptor g_volume_get_identifier$descriptor() {
        return g_volume_get_identifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_volume_get_identifier(GVolume *volume, const char *kind)
     * }
     */
    public static MethodHandle g_volume_get_identifier$handle() {
        return g_volume_get_identifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_volume_get_identifier(GVolume *volume, const char *kind)
     * }
     */
    public static MemorySegment g_volume_get_identifier(MemorySegment volume, MemorySegment kind) {
        var mh$ = g_volume_get_identifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_get_identifier", volume, kind);
            }
            return (MemorySegment)mh$.invokeExact(volume, kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_enumerate_identifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_enumerate_identifiers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **g_volume_enumerate_identifiers(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_enumerate_identifiers$descriptor() {
        return g_volume_enumerate_identifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **g_volume_enumerate_identifiers(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_enumerate_identifiers$handle() {
        return g_volume_enumerate_identifiers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char **g_volume_enumerate_identifiers(GVolume *volume)
     * }
     */
    public static MemorySegment g_volume_enumerate_identifiers(MemorySegment volume) {
        var mh$ = g_volume_enumerate_identifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_enumerate_identifiers", volume);
            }
            return (MemorySegment)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_get_activation_root {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_get_activation_root"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *g_volume_get_activation_root(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_get_activation_root$descriptor() {
        return g_volume_get_activation_root.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *g_volume_get_activation_root(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_get_activation_root$handle() {
        return g_volume_get_activation_root.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *g_volume_get_activation_root(GVolume *volume)
     * }
     */
    public static MemorySegment g_volume_get_activation_root(MemorySegment volume) {
        var mh$ = g_volume_get_activation_root.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_get_activation_root", volume);
            }
            return (MemorySegment)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_eject_with_operation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_eject_with_operation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_volume_eject_with_operation(GVolume *volume, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_volume_eject_with_operation$descriptor() {
        return g_volume_eject_with_operation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_volume_eject_with_operation(GVolume *volume, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static MethodHandle g_volume_eject_with_operation$handle() {
        return g_volume_eject_with_operation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_volume_eject_with_operation(GVolume *volume, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data)
     * }
     */
    public static void g_volume_eject_with_operation(MemorySegment volume, int flags, MemorySegment mount_operation, MemorySegment cancellable, MemorySegment callback, MemorySegment user_data) {
        var mh$ = g_volume_eject_with_operation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_eject_with_operation", volume, flags, mount_operation, cancellable, callback, user_data);
            }
            mh$.invokeExact(volume, flags, mount_operation, cancellable, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_eject_with_operation_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_eject_with_operation_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_volume_eject_with_operation_finish(GVolume *volume, GAsyncResult *result, GError **error)
     * }
     */
    public static FunctionDescriptor g_volume_eject_with_operation_finish$descriptor() {
        return g_volume_eject_with_operation_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_volume_eject_with_operation_finish(GVolume *volume, GAsyncResult *result, GError **error)
     * }
     */
    public static MethodHandle g_volume_eject_with_operation_finish$handle() {
        return g_volume_eject_with_operation_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_volume_eject_with_operation_finish(GVolume *volume, GAsyncResult *result, GError **error)
     * }
     */
    public static int g_volume_eject_with_operation_finish(MemorySegment volume, MemorySegment result, MemorySegment error) {
        var mh$ = g_volume_eject_with_operation_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_eject_with_operation_finish", volume, result, error);
            }
            return (int)mh$.invokeExact(volume, result, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_volume_get_sort_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_volume_get_sort_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_volume_get_sort_key(GVolume *volume)
     * }
     */
    public static FunctionDescriptor g_volume_get_sort_key$descriptor() {
        return g_volume_get_sort_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_volume_get_sort_key(GVolume *volume)
     * }
     */
    public static MethodHandle g_volume_get_sort_key$handle() {
        return g_volume_get_sort_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_volume_get_sort_key(GVolume *volume)
     * }
     */
    public static MemorySegment g_volume_get_sort_key(MemorySegment volume) {
        var mh$ = g_volume_get_sort_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_volume_get_sort_key", volume);
            }
            return (MemorySegment)mh$.invokeExact(volume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_zlib_compressor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_zlib_compressor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_zlib_compressor_get_type()
     * }
     */
    public static FunctionDescriptor g_zlib_compressor_get_type$descriptor() {
        return g_zlib_compressor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_zlib_compressor_get_type()
     * }
     */
    public static MethodHandle g_zlib_compressor_get_type$handle() {
        return g_zlib_compressor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_zlib_compressor_get_type()
     * }
     */
    public static long g_zlib_compressor_get_type() {
        var mh$ = g_zlib_compressor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_zlib_compressor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_zlib_compressor_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_zlib_compressor_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GZlibCompressor *g_zlib_compressor_new(GZlibCompressorFormat format, int level)
     * }
     */
    public static FunctionDescriptor g_zlib_compressor_new$descriptor() {
        return g_zlib_compressor_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GZlibCompressor *g_zlib_compressor_new(GZlibCompressorFormat format, int level)
     * }
     */
    public static MethodHandle g_zlib_compressor_new$handle() {
        return g_zlib_compressor_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GZlibCompressor *g_zlib_compressor_new(GZlibCompressorFormat format, int level)
     * }
     */
    public static MemorySegment g_zlib_compressor_new(int format, int level) {
        var mh$ = g_zlib_compressor_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_zlib_compressor_new", format, level);
            }
            return (MemorySegment)mh$.invokeExact(format, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_zlib_compressor_get_file_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_zlib_compressor_get_file_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_zlib_compressor_get_file_info(GZlibCompressor *compressor)
     * }
     */
    public static FunctionDescriptor g_zlib_compressor_get_file_info$descriptor() {
        return g_zlib_compressor_get_file_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_zlib_compressor_get_file_info(GZlibCompressor *compressor)
     * }
     */
    public static MethodHandle g_zlib_compressor_get_file_info$handle() {
        return g_zlib_compressor_get_file_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_zlib_compressor_get_file_info(GZlibCompressor *compressor)
     * }
     */
    public static MemorySegment g_zlib_compressor_get_file_info(MemorySegment compressor) {
        var mh$ = g_zlib_compressor_get_file_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_zlib_compressor_get_file_info", compressor);
            }
            return (MemorySegment)mh$.invokeExact(compressor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_zlib_compressor_set_file_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_zlib_compressor_set_file_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_zlib_compressor_set_file_info(GZlibCompressor *compressor, GFileInfo *file_info)
     * }
     */
    public static FunctionDescriptor g_zlib_compressor_set_file_info$descriptor() {
        return g_zlib_compressor_set_file_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_zlib_compressor_set_file_info(GZlibCompressor *compressor, GFileInfo *file_info)
     * }
     */
    public static MethodHandle g_zlib_compressor_set_file_info$handle() {
        return g_zlib_compressor_set_file_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_zlib_compressor_set_file_info(GZlibCompressor *compressor, GFileInfo *file_info)
     * }
     */
    public static void g_zlib_compressor_set_file_info(MemorySegment compressor, MemorySegment file_info) {
        var mh$ = g_zlib_compressor_set_file_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_zlib_compressor_set_file_info", compressor, file_info);
            }
            mh$.invokeExact(compressor, file_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_zlib_decompressor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_zlib_decompressor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_zlib_decompressor_get_type()
     * }
     */
    public static FunctionDescriptor g_zlib_decompressor_get_type$descriptor() {
        return g_zlib_decompressor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_zlib_decompressor_get_type()
     * }
     */
    public static MethodHandle g_zlib_decompressor_get_type$handle() {
        return g_zlib_decompressor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_zlib_decompressor_get_type()
     * }
     */
    public static long g_zlib_decompressor_get_type() {
        var mh$ = g_zlib_decompressor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_zlib_decompressor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_zlib_decompressor_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_zlib_decompressor_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GZlibDecompressor *g_zlib_decompressor_new(GZlibCompressorFormat format)
     * }
     */
    public static FunctionDescriptor g_zlib_decompressor_new$descriptor() {
        return g_zlib_decompressor_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GZlibDecompressor *g_zlib_decompressor_new(GZlibCompressorFormat format)
     * }
     */
    public static MethodHandle g_zlib_decompressor_new$handle() {
        return g_zlib_decompressor_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GZlibDecompressor *g_zlib_decompressor_new(GZlibCompressorFormat format)
     * }
     */
    public static MemorySegment g_zlib_decompressor_new(int format) {
        var mh$ = g_zlib_decompressor_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_zlib_decompressor_new", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_zlib_decompressor_get_file_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_zlib_decompressor_get_file_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileInfo *g_zlib_decompressor_get_file_info(GZlibDecompressor *decompressor)
     * }
     */
    public static FunctionDescriptor g_zlib_decompressor_get_file_info$descriptor() {
        return g_zlib_decompressor_get_file_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileInfo *g_zlib_decompressor_get_file_info(GZlibDecompressor *decompressor)
     * }
     */
    public static MethodHandle g_zlib_decompressor_get_file_info$handle() {
        return g_zlib_decompressor_get_file_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileInfo *g_zlib_decompressor_get_file_info(GZlibDecompressor *decompressor)
     * }
     */
    public static MemorySegment g_zlib_decompressor_get_file_info(MemorySegment decompressor) {
        var mh$ = g_zlib_decompressor_get_file_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_zlib_decompressor_get_file_info", decompressor);
            }
            return (MemorySegment)mh$.invokeExact(decompressor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GAction *GAction_autoptr
     * }
     */
    public static final AddressLayout GAction_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GAction_listautoptr
     * }
     */
    public static final AddressLayout GAction_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GAction_slistautoptr
     * }
     */
    public static final AddressLayout GAction_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GAction_queueautoptr
     * }
     */
    public static final AddressLayout GAction_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GActionMap *GActionMap_autoptr
     * }
     */
    public static final AddressLayout GActionMap_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GActionMap_listautoptr
     * }
     */
    public static final AddressLayout GActionMap_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GActionMap_slistautoptr
     * }
     */
    public static final AddressLayout GActionMap_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GActionMap_queueautoptr
     * }
     */
    public static final AddressLayout GActionMap_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GAppInfo *GAppInfo_autoptr
     * }
     */
    public static final AddressLayout GAppInfo_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GAppInfo_listautoptr
     * }
     */
    public static final AddressLayout GAppInfo_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GAppInfo_slistautoptr
     * }
     */
    public static final AddressLayout GAppInfo_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GAppInfo_queueautoptr
     * }
     */
    public static final AddressLayout GAppInfo_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GAppLaunchContext *GAppLaunchContext_autoptr
     * }
     */
    public static final AddressLayout GAppLaunchContext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GAppLaunchContext_listautoptr
     * }
     */
    public static final AddressLayout GAppLaunchContext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GAppLaunchContext_slistautoptr
     * }
     */
    public static final AddressLayout GAppLaunchContext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GAppLaunchContext_queueautoptr
     * }
     */
    public static final AddressLayout GAppLaunchContext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GAppInfoMonitor *GAppInfoMonitor_autoptr
     * }
     */
    public static final AddressLayout GAppInfoMonitor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GAppInfoMonitor_listautoptr
     * }
     */
    public static final AddressLayout GAppInfoMonitor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GAppInfoMonitor_slistautoptr
     * }
     */
    public static final AddressLayout GAppInfoMonitor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GAppInfoMonitor_queueautoptr
     * }
     */
    public static final AddressLayout GAppInfoMonitor_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GApplicationCommandLine *GApplicationCommandLine_autoptr
     * }
     */
    public static final AddressLayout GApplicationCommandLine_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GApplicationCommandLine_listautoptr
     * }
     */
    public static final AddressLayout GApplicationCommandLine_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GApplicationCommandLine_slistautoptr
     * }
     */
    public static final AddressLayout GApplicationCommandLine_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GApplicationCommandLine_queueautoptr
     * }
     */
    public static final AddressLayout GApplicationCommandLine_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GApplication *GApplication_autoptr
     * }
     */
    public static final AddressLayout GApplication_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GApplication_listautoptr
     * }
     */
    public static final AddressLayout GApplication_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GApplication_slistautoptr
     * }
     */
    public static final AddressLayout GApplication_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GApplication_queueautoptr
     * }
     */
    public static final AddressLayout GApplication_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GAsyncInitable *GAsyncInitable_autoptr
     * }
     */
    public static final AddressLayout GAsyncInitable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GAsyncInitable_listautoptr
     * }
     */
    public static final AddressLayout GAsyncInitable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GAsyncInitable_slistautoptr
     * }
     */
    public static final AddressLayout GAsyncInitable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GAsyncInitable_queueautoptr
     * }
     */
    public static final AddressLayout GAsyncInitable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GAsyncResult *GAsyncResult_autoptr
     * }
     */
    public static final AddressLayout GAsyncResult_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GAsyncResult_listautoptr
     * }
     */
    public static final AddressLayout GAsyncResult_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GAsyncResult_slistautoptr
     * }
     */
    public static final AddressLayout GAsyncResult_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GAsyncResult_queueautoptr
     * }
     */
    public static final AddressLayout GAsyncResult_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GBufferedInputStream *GBufferedInputStream_autoptr
     * }
     */
    public static final AddressLayout GBufferedInputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GBufferedInputStream_listautoptr
     * }
     */
    public static final AddressLayout GBufferedInputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GBufferedInputStream_slistautoptr
     * }
     */
    public static final AddressLayout GBufferedInputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GBufferedInputStream_queueautoptr
     * }
     */
    public static final AddressLayout GBufferedInputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GBufferedOutputStream *GBufferedOutputStream_autoptr
     * }
     */
    public static final AddressLayout GBufferedOutputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GBufferedOutputStream_listautoptr
     * }
     */
    public static final AddressLayout GBufferedOutputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GBufferedOutputStream_slistautoptr
     * }
     */
    public static final AddressLayout GBufferedOutputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GBufferedOutputStream_queueautoptr
     * }
     */
    public static final AddressLayout GBufferedOutputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GBytesIcon *GBytesIcon_autoptr
     * }
     */
    public static final AddressLayout GBytesIcon_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GBytesIcon_listautoptr
     * }
     */
    public static final AddressLayout GBytesIcon_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GBytesIcon_slistautoptr
     * }
     */
    public static final AddressLayout GBytesIcon_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GBytesIcon_queueautoptr
     * }
     */
    public static final AddressLayout GBytesIcon_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GCancellable *GCancellable_autoptr
     * }
     */
    public static final AddressLayout GCancellable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GCancellable_listautoptr
     * }
     */
    public static final AddressLayout GCancellable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GCancellable_slistautoptr
     * }
     */
    public static final AddressLayout GCancellable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GCancellable_queueautoptr
     * }
     */
    public static final AddressLayout GCancellable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GCharsetConverter *GCharsetConverter_autoptr
     * }
     */
    public static final AddressLayout GCharsetConverter_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GCharsetConverter_listautoptr
     * }
     */
    public static final AddressLayout GCharsetConverter_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GCharsetConverter_slistautoptr
     * }
     */
    public static final AddressLayout GCharsetConverter_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GCharsetConverter_queueautoptr
     * }
     */
    public static final AddressLayout GCharsetConverter_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GConverter *GConverter_autoptr
     * }
     */
    public static final AddressLayout GConverter_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GConverter_listautoptr
     * }
     */
    public static final AddressLayout GConverter_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GConverter_slistautoptr
     * }
     */
    public static final AddressLayout GConverter_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GConverter_queueautoptr
     * }
     */
    public static final AddressLayout GConverter_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GConverterInputStream *GConverterInputStream_autoptr
     * }
     */
    public static final AddressLayout GConverterInputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GConverterInputStream_listautoptr
     * }
     */
    public static final AddressLayout GConverterInputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GConverterInputStream_slistautoptr
     * }
     */
    public static final AddressLayout GConverterInputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GConverterInputStream_queueautoptr
     * }
     */
    public static final AddressLayout GConverterInputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GConverterOutputStream *GConverterOutputStream_autoptr
     * }
     */
    public static final AddressLayout GConverterOutputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GConverterOutputStream_listautoptr
     * }
     */
    public static final AddressLayout GConverterOutputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GConverterOutputStream_slistautoptr
     * }
     */
    public static final AddressLayout GConverterOutputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GConverterOutputStream_queueautoptr
     * }
     */
    public static final AddressLayout GConverterOutputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GCredentials *GCredentials_autoptr
     * }
     */
    public static final AddressLayout GCredentials_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GCredentials_listautoptr
     * }
     */
    public static final AddressLayout GCredentials_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GCredentials_slistautoptr
     * }
     */
    public static final AddressLayout GCredentials_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GCredentials_queueautoptr
     * }
     */
    public static final AddressLayout GCredentials_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDatagramBased *GDatagramBased_autoptr
     * }
     */
    public static final AddressLayout GDatagramBased_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDatagramBased_listautoptr
     * }
     */
    public static final AddressLayout GDatagramBased_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDatagramBased_slistautoptr
     * }
     */
    public static final AddressLayout GDatagramBased_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDatagramBased_queueautoptr
     * }
     */
    public static final AddressLayout GDatagramBased_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDataInputStream *GDataInputStream_autoptr
     * }
     */
    public static final AddressLayout GDataInputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDataInputStream_listautoptr
     * }
     */
    public static final AddressLayout GDataInputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDataInputStream_slistautoptr
     * }
     */
    public static final AddressLayout GDataInputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDataInputStream_queueautoptr
     * }
     */
    public static final AddressLayout GDataInputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDataOutputStream *GDataOutputStream_autoptr
     * }
     */
    public static final AddressLayout GDataOutputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDataOutputStream_listautoptr
     * }
     */
    public static final AddressLayout GDataOutputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDataOutputStream_slistautoptr
     * }
     */
    public static final AddressLayout GDataOutputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDataOutputStream_queueautoptr
     * }
     */
    public static final AddressLayout GDataOutputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusActionGroup *GDBusActionGroup_autoptr
     * }
     */
    public static final AddressLayout GDBusActionGroup_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusActionGroup_listautoptr
     * }
     */
    public static final AddressLayout GDBusActionGroup_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusActionGroup_slistautoptr
     * }
     */
    public static final AddressLayout GDBusActionGroup_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusActionGroup_queueautoptr
     * }
     */
    public static final AddressLayout GDBusActionGroup_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusAuthObserver *GDBusAuthObserver_autoptr
     * }
     */
    public static final AddressLayout GDBusAuthObserver_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusAuthObserver_listautoptr
     * }
     */
    public static final AddressLayout GDBusAuthObserver_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusAuthObserver_slistautoptr
     * }
     */
    public static final AddressLayout GDBusAuthObserver_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusAuthObserver_queueautoptr
     * }
     */
    public static final AddressLayout GDBusAuthObserver_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusConnection *GDBusConnection_autoptr
     * }
     */
    public static final AddressLayout GDBusConnection_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusConnection_listautoptr
     * }
     */
    public static final AddressLayout GDBusConnection_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusConnection_slistautoptr
     * }
     */
    public static final AddressLayout GDBusConnection_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusConnection_queueautoptr
     * }
     */
    public static final AddressLayout GDBusConnection_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusInterface *GDBusInterface_autoptr
     * }
     */
    public static final AddressLayout GDBusInterface_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusInterface_listautoptr
     * }
     */
    public static final AddressLayout GDBusInterface_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusInterface_slistautoptr
     * }
     */
    public static final AddressLayout GDBusInterface_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusInterface_queueautoptr
     * }
     */
    public static final AddressLayout GDBusInterface_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusInterfaceSkeleton *GDBusInterfaceSkeleton_autoptr
     * }
     */
    public static final AddressLayout GDBusInterfaceSkeleton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusInterfaceSkeleton_listautoptr
     * }
     */
    public static final AddressLayout GDBusInterfaceSkeleton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusInterfaceSkeleton_slistautoptr
     * }
     */
    public static final AddressLayout GDBusInterfaceSkeleton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusInterfaceSkeleton_queueautoptr
     * }
     */
    public static final AddressLayout GDBusInterfaceSkeleton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusMenuModel *GDBusMenuModel_autoptr
     * }
     */
    public static final AddressLayout GDBusMenuModel_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusMenuModel_listautoptr
     * }
     */
    public static final AddressLayout GDBusMenuModel_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusMenuModel_slistautoptr
     * }
     */
    public static final AddressLayout GDBusMenuModel_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusMenuModel_queueautoptr
     * }
     */
    public static final AddressLayout GDBusMenuModel_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusMessage *GDBusMessage_autoptr
     * }
     */
    public static final AddressLayout GDBusMessage_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusMessage_listautoptr
     * }
     */
    public static final AddressLayout GDBusMessage_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusMessage_slistautoptr
     * }
     */
    public static final AddressLayout GDBusMessage_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusMessage_queueautoptr
     * }
     */
    public static final AddressLayout GDBusMessage_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusMethodInvocation *GDBusMethodInvocation_autoptr
     * }
     */
    public static final AddressLayout GDBusMethodInvocation_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusMethodInvocation_listautoptr
     * }
     */
    public static final AddressLayout GDBusMethodInvocation_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusMethodInvocation_slistautoptr
     * }
     */
    public static final AddressLayout GDBusMethodInvocation_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusMethodInvocation_queueautoptr
     * }
     */
    public static final AddressLayout GDBusMethodInvocation_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusNodeInfo *GDBusNodeInfo_autoptr
     * }
     */
    public static final AddressLayout GDBusNodeInfo_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusNodeInfo_listautoptr
     * }
     */
    public static final AddressLayout GDBusNodeInfo_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusNodeInfo_slistautoptr
     * }
     */
    public static final AddressLayout GDBusNodeInfo_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusNodeInfo_queueautoptr
     * }
     */
    public static final AddressLayout GDBusNodeInfo_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusObject *GDBusObject_autoptr
     * }
     */
    public static final AddressLayout GDBusObject_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusObject_listautoptr
     * }
     */
    public static final AddressLayout GDBusObject_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusObject_slistautoptr
     * }
     */
    public static final AddressLayout GDBusObject_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusObject_queueautoptr
     * }
     */
    public static final AddressLayout GDBusObject_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusObjectManagerClient *GDBusObjectManagerClient_autoptr
     * }
     */
    public static final AddressLayout GDBusObjectManagerClient_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusObjectManagerClient_listautoptr
     * }
     */
    public static final AddressLayout GDBusObjectManagerClient_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusObjectManagerClient_slistautoptr
     * }
     */
    public static final AddressLayout GDBusObjectManagerClient_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusObjectManagerClient_queueautoptr
     * }
     */
    public static final AddressLayout GDBusObjectManagerClient_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusObjectManager *GDBusObjectManager_autoptr
     * }
     */
    public static final AddressLayout GDBusObjectManager_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusObjectManager_listautoptr
     * }
     */
    public static final AddressLayout GDBusObjectManager_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusObjectManager_slistautoptr
     * }
     */
    public static final AddressLayout GDBusObjectManager_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusObjectManager_queueautoptr
     * }
     */
    public static final AddressLayout GDBusObjectManager_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusObjectManagerServer *GDBusObjectManagerServer_autoptr
     * }
     */
    public static final AddressLayout GDBusObjectManagerServer_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusObjectManagerServer_listautoptr
     * }
     */
    public static final AddressLayout GDBusObjectManagerServer_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusObjectManagerServer_slistautoptr
     * }
     */
    public static final AddressLayout GDBusObjectManagerServer_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusObjectManagerServer_queueautoptr
     * }
     */
    public static final AddressLayout GDBusObjectManagerServer_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusObjectProxy *GDBusObjectProxy_autoptr
     * }
     */
    public static final AddressLayout GDBusObjectProxy_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusObjectProxy_listautoptr
     * }
     */
    public static final AddressLayout GDBusObjectProxy_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusObjectProxy_slistautoptr
     * }
     */
    public static final AddressLayout GDBusObjectProxy_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusObjectProxy_queueautoptr
     * }
     */
    public static final AddressLayout GDBusObjectProxy_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusObjectSkeleton *GDBusObjectSkeleton_autoptr
     * }
     */
    public static final AddressLayout GDBusObjectSkeleton_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusObjectSkeleton_listautoptr
     * }
     */
    public static final AddressLayout GDBusObjectSkeleton_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusObjectSkeleton_slistautoptr
     * }
     */
    public static final AddressLayout GDBusObjectSkeleton_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusObjectSkeleton_queueautoptr
     * }
     */
    public static final AddressLayout GDBusObjectSkeleton_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusProxy *GDBusProxy_autoptr
     * }
     */
    public static final AddressLayout GDBusProxy_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusProxy_listautoptr
     * }
     */
    public static final AddressLayout GDBusProxy_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusProxy_slistautoptr
     * }
     */
    public static final AddressLayout GDBusProxy_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusProxy_queueautoptr
     * }
     */
    public static final AddressLayout GDBusProxy_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDBusServer *GDBusServer_autoptr
     * }
     */
    public static final AddressLayout GDBusServer_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDBusServer_listautoptr
     * }
     */
    public static final AddressLayout GDBusServer_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDBusServer_slistautoptr
     * }
     */
    public static final AddressLayout GDBusServer_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDBusServer_queueautoptr
     * }
     */
    public static final AddressLayout GDBusServer_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDrive *GDrive_autoptr
     * }
     */
    public static final AddressLayout GDrive_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDrive_listautoptr
     * }
     */
    public static final AddressLayout GDrive_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDrive_slistautoptr
     * }
     */
    public static final AddressLayout GDrive_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDrive_queueautoptr
     * }
     */
    public static final AddressLayout GDrive_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GEmblemedIcon *GEmblemedIcon_autoptr
     * }
     */
    public static final AddressLayout GEmblemedIcon_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GEmblemedIcon_listautoptr
     * }
     */
    public static final AddressLayout GEmblemedIcon_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GEmblemedIcon_slistautoptr
     * }
     */
    public static final AddressLayout GEmblemedIcon_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GEmblemedIcon_queueautoptr
     * }
     */
    public static final AddressLayout GEmblemedIcon_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GEmblem *GEmblem_autoptr
     * }
     */
    public static final AddressLayout GEmblem_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GEmblem_listautoptr
     * }
     */
    public static final AddressLayout GEmblem_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GEmblem_slistautoptr
     * }
     */
    public static final AddressLayout GEmblem_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GEmblem_queueautoptr
     * }
     */
    public static final AddressLayout GEmblem_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFileEnumerator *GFileEnumerator_autoptr
     * }
     */
    public static final AddressLayout GFileEnumerator_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFileEnumerator_listautoptr
     * }
     */
    public static final AddressLayout GFileEnumerator_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFileEnumerator_slistautoptr
     * }
     */
    public static final AddressLayout GFileEnumerator_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFileEnumerator_queueautoptr
     * }
     */
    public static final AddressLayout GFileEnumerator_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFile *GFile_autoptr
     * }
     */
    public static final AddressLayout GFile_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFile_listautoptr
     * }
     */
    public static final AddressLayout GFile_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFile_slistautoptr
     * }
     */
    public static final AddressLayout GFile_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFile_queueautoptr
     * }
     */
    public static final AddressLayout GFile_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFileAttributeInfoList *GFileAttributeInfoList_autoptr
     * }
     */
    public static final AddressLayout GFileAttributeInfoList_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFileAttributeInfoList_listautoptr
     * }
     */
    public static final AddressLayout GFileAttributeInfoList_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFileAttributeInfoList_slistautoptr
     * }
     */
    public static final AddressLayout GFileAttributeInfoList_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFileAttributeInfoList_queueautoptr
     * }
     */
    public static final AddressLayout GFileAttributeInfoList_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFileIcon *GFileIcon_autoptr
     * }
     */
    public static final AddressLayout GFileIcon_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFileIcon_listautoptr
     * }
     */
    public static final AddressLayout GFileIcon_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFileIcon_slistautoptr
     * }
     */
    public static final AddressLayout GFileIcon_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFileIcon_queueautoptr
     * }
     */
    public static final AddressLayout GFileIcon_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFileInfo *GFileInfo_autoptr
     * }
     */
    public static final AddressLayout GFileInfo_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFileInfo_listautoptr
     * }
     */
    public static final AddressLayout GFileInfo_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFileInfo_slistautoptr
     * }
     */
    public static final AddressLayout GFileInfo_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFileInfo_queueautoptr
     * }
     */
    public static final AddressLayout GFileInfo_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFileInputStream *GFileInputStream_autoptr
     * }
     */
    public static final AddressLayout GFileInputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFileInputStream_listautoptr
     * }
     */
    public static final AddressLayout GFileInputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFileInputStream_slistautoptr
     * }
     */
    public static final AddressLayout GFileInputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFileInputStream_queueautoptr
     * }
     */
    public static final AddressLayout GFileInputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFileIOStream *GFileIOStream_autoptr
     * }
     */
    public static final AddressLayout GFileIOStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFileIOStream_listautoptr
     * }
     */
    public static final AddressLayout GFileIOStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFileIOStream_slistautoptr
     * }
     */
    public static final AddressLayout GFileIOStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFileIOStream_queueautoptr
     * }
     */
    public static final AddressLayout GFileIOStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFileMonitor *GFileMonitor_autoptr
     * }
     */
    public static final AddressLayout GFileMonitor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFileMonitor_listautoptr
     * }
     */
    public static final AddressLayout GFileMonitor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFileMonitor_slistautoptr
     * }
     */
    public static final AddressLayout GFileMonitor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFileMonitor_queueautoptr
     * }
     */
    public static final AddressLayout GFileMonitor_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFilenameCompleter *GFilenameCompleter_autoptr
     * }
     */
    public static final AddressLayout GFilenameCompleter_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFilenameCompleter_listautoptr
     * }
     */
    public static final AddressLayout GFilenameCompleter_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFilenameCompleter_slistautoptr
     * }
     */
    public static final AddressLayout GFilenameCompleter_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFilenameCompleter_queueautoptr
     * }
     */
    public static final AddressLayout GFilenameCompleter_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFileOutputStream *GFileOutputStream_autoptr
     * }
     */
    public static final AddressLayout GFileOutputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFileOutputStream_listautoptr
     * }
     */
    public static final AddressLayout GFileOutputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFileOutputStream_slistautoptr
     * }
     */
    public static final AddressLayout GFileOutputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFileOutputStream_queueautoptr
     * }
     */
    public static final AddressLayout GFileOutputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFilterInputStream *GFilterInputStream_autoptr
     * }
     */
    public static final AddressLayout GFilterInputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFilterInputStream_listautoptr
     * }
     */
    public static final AddressLayout GFilterInputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFilterInputStream_slistautoptr
     * }
     */
    public static final AddressLayout GFilterInputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFilterInputStream_queueautoptr
     * }
     */
    public static final AddressLayout GFilterInputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFilterOutputStream *GFilterOutputStream_autoptr
     * }
     */
    public static final AddressLayout GFilterOutputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFilterOutputStream_listautoptr
     * }
     */
    public static final AddressLayout GFilterOutputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFilterOutputStream_slistautoptr
     * }
     */
    public static final AddressLayout GFilterOutputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFilterOutputStream_queueautoptr
     * }
     */
    public static final AddressLayout GFilterOutputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GIcon *GIcon_autoptr
     * }
     */
    public static final AddressLayout GIcon_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GIcon_listautoptr
     * }
     */
    public static final AddressLayout GIcon_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GIcon_slistautoptr
     * }
     */
    public static final AddressLayout GIcon_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GIcon_queueautoptr
     * }
     */
    public static final AddressLayout GIcon_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GInetAddress *GInetAddress_autoptr
     * }
     */
    public static final AddressLayout GInetAddress_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GInetAddress_listautoptr
     * }
     */
    public static final AddressLayout GInetAddress_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GInetAddress_slistautoptr
     * }
     */
    public static final AddressLayout GInetAddress_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GInetAddress_queueautoptr
     * }
     */
    public static final AddressLayout GInetAddress_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GInetAddressMask *GInetAddressMask_autoptr
     * }
     */
    public static final AddressLayout GInetAddressMask_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GInetAddressMask_listautoptr
     * }
     */
    public static final AddressLayout GInetAddressMask_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GInetAddressMask_slistautoptr
     * }
     */
    public static final AddressLayout GInetAddressMask_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GInetAddressMask_queueautoptr
     * }
     */
    public static final AddressLayout GInetAddressMask_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GInetSocketAddress *GInetSocketAddress_autoptr
     * }
     */
    public static final AddressLayout GInetSocketAddress_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GInetSocketAddress_listautoptr
     * }
     */
    public static final AddressLayout GInetSocketAddress_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GInetSocketAddress_slistautoptr
     * }
     */
    public static final AddressLayout GInetSocketAddress_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GInetSocketAddress_queueautoptr
     * }
     */
    public static final AddressLayout GInetSocketAddress_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GInitable *GInitable_autoptr
     * }
     */
    public static final AddressLayout GInitable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GInitable_listautoptr
     * }
     */
    public static final AddressLayout GInitable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GInitable_slistautoptr
     * }
     */
    public static final AddressLayout GInitable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GInitable_queueautoptr
     * }
     */
    public static final AddressLayout GInitable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GInputStream *GInputStream_autoptr
     * }
     */
    public static final AddressLayout GInputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GInputStream_listautoptr
     * }
     */
    public static final AddressLayout GInputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GInputStream_slistautoptr
     * }
     */
    public static final AddressLayout GInputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GInputStream_queueautoptr
     * }
     */
    public static final AddressLayout GInputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GIOModule *GIOModule_autoptr
     * }
     */
    public static final AddressLayout GIOModule_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GIOModule_listautoptr
     * }
     */
    public static final AddressLayout GIOModule_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GIOModule_slistautoptr
     * }
     */
    public static final AddressLayout GIOModule_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GIOModule_queueautoptr
     * }
     */
    public static final AddressLayout GIOModule_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GIOStream *GIOStream_autoptr
     * }
     */
    public static final AddressLayout GIOStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GIOStream_listautoptr
     * }
     */
    public static final AddressLayout GIOStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GIOStream_slistautoptr
     * }
     */
    public static final AddressLayout GIOStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GIOStream_queueautoptr
     * }
     */
    public static final AddressLayout GIOStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GLoadableIcon *GLoadableIcon_autoptr
     * }
     */
    public static final AddressLayout GLoadableIcon_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GLoadableIcon_listautoptr
     * }
     */
    public static final AddressLayout GLoadableIcon_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GLoadableIcon_slistautoptr
     * }
     */
    public static final AddressLayout GLoadableIcon_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GLoadableIcon_queueautoptr
     * }
     */
    public static final AddressLayout GLoadableIcon_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMemoryInputStream *GMemoryInputStream_autoptr
     * }
     */
    public static final AddressLayout GMemoryInputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMemoryInputStream_listautoptr
     * }
     */
    public static final AddressLayout GMemoryInputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMemoryInputStream_slistautoptr
     * }
     */
    public static final AddressLayout GMemoryInputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMemoryInputStream_queueautoptr
     * }
     */
    public static final AddressLayout GMemoryInputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMemoryOutputStream *GMemoryOutputStream_autoptr
     * }
     */
    public static final AddressLayout GMemoryOutputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMemoryOutputStream_listautoptr
     * }
     */
    public static final AddressLayout GMemoryOutputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMemoryOutputStream_slistautoptr
     * }
     */
    public static final AddressLayout GMemoryOutputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMemoryOutputStream_queueautoptr
     * }
     */
    public static final AddressLayout GMemoryOutputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMenu *GMenu_autoptr
     * }
     */
    public static final AddressLayout GMenu_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMenu_listautoptr
     * }
     */
    public static final AddressLayout GMenu_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMenu_slistautoptr
     * }
     */
    public static final AddressLayout GMenu_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMenu_queueautoptr
     * }
     */
    public static final AddressLayout GMenu_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMenuItem *GMenuItem_autoptr
     * }
     */
    public static final AddressLayout GMenuItem_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMenuItem_listautoptr
     * }
     */
    public static final AddressLayout GMenuItem_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMenuItem_slistautoptr
     * }
     */
    public static final AddressLayout GMenuItem_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMenuItem_queueautoptr
     * }
     */
    public static final AddressLayout GMenuItem_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMenuModel *GMenuModel_autoptr
     * }
     */
    public static final AddressLayout GMenuModel_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMenuModel_listautoptr
     * }
     */
    public static final AddressLayout GMenuModel_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMenuModel_slistautoptr
     * }
     */
    public static final AddressLayout GMenuModel_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMenuModel_queueautoptr
     * }
     */
    public static final AddressLayout GMenuModel_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMenuAttributeIter *GMenuAttributeIter_autoptr
     * }
     */
    public static final AddressLayout GMenuAttributeIter_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMenuAttributeIter_listautoptr
     * }
     */
    public static final AddressLayout GMenuAttributeIter_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMenuAttributeIter_slistautoptr
     * }
     */
    public static final AddressLayout GMenuAttributeIter_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMenuAttributeIter_queueautoptr
     * }
     */
    public static final AddressLayout GMenuAttributeIter_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMenuLinkIter *GMenuLinkIter_autoptr
     * }
     */
    public static final AddressLayout GMenuLinkIter_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMenuLinkIter_listautoptr
     * }
     */
    public static final AddressLayout GMenuLinkIter_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMenuLinkIter_slistautoptr
     * }
     */
    public static final AddressLayout GMenuLinkIter_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMenuLinkIter_queueautoptr
     * }
     */
    public static final AddressLayout GMenuLinkIter_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMount *GMount_autoptr
     * }
     */
    public static final AddressLayout GMount_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMount_listautoptr
     * }
     */
    public static final AddressLayout GMount_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMount_slistautoptr
     * }
     */
    public static final AddressLayout GMount_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMount_queueautoptr
     * }
     */
    public static final AddressLayout GMount_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMountOperation *GMountOperation_autoptr
     * }
     */
    public static final AddressLayout GMountOperation_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMountOperation_listautoptr
     * }
     */
    public static final AddressLayout GMountOperation_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMountOperation_slistautoptr
     * }
     */
    public static final AddressLayout GMountOperation_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMountOperation_queueautoptr
     * }
     */
    public static final AddressLayout GMountOperation_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GNativeVolumeMonitor *GNativeVolumeMonitor_autoptr
     * }
     */
    public static final AddressLayout GNativeVolumeMonitor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GNativeVolumeMonitor_listautoptr
     * }
     */
    public static final AddressLayout GNativeVolumeMonitor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GNativeVolumeMonitor_slistautoptr
     * }
     */
    public static final AddressLayout GNativeVolumeMonitor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GNativeVolumeMonitor_queueautoptr
     * }
     */
    public static final AddressLayout GNativeVolumeMonitor_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GNetworkAddress *GNetworkAddress_autoptr
     * }
     */
    public static final AddressLayout GNetworkAddress_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GNetworkAddress_listautoptr
     * }
     */
    public static final AddressLayout GNetworkAddress_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GNetworkAddress_slistautoptr
     * }
     */
    public static final AddressLayout GNetworkAddress_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GNetworkAddress_queueautoptr
     * }
     */
    public static final AddressLayout GNetworkAddress_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GNetworkMonitor *GNetworkMonitor_autoptr
     * }
     */
    public static final AddressLayout GNetworkMonitor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GNetworkMonitor_listautoptr
     * }
     */
    public static final AddressLayout GNetworkMonitor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GNetworkMonitor_slistautoptr
     * }
     */
    public static final AddressLayout GNetworkMonitor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GNetworkMonitor_queueautoptr
     * }
     */
    public static final AddressLayout GNetworkMonitor_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GNetworkService *GNetworkService_autoptr
     * }
     */
    public static final AddressLayout GNetworkService_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GNetworkService_listautoptr
     * }
     */
    public static final AddressLayout GNetworkService_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GNetworkService_slistautoptr
     * }
     */
    public static final AddressLayout GNetworkService_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GNetworkService_queueautoptr
     * }
     */
    public static final AddressLayout GNetworkService_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GNotification *GNotification_autoptr
     * }
     */
    public static final AddressLayout GNotification_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GNotification_listautoptr
     * }
     */
    public static final AddressLayout GNotification_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GNotification_slistautoptr
     * }
     */
    public static final AddressLayout GNotification_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GNotification_queueautoptr
     * }
     */
    public static final AddressLayout GNotification_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GOutputStream *GOutputStream_autoptr
     * }
     */
    public static final AddressLayout GOutputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GOutputStream_listautoptr
     * }
     */
    public static final AddressLayout GOutputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GOutputStream_slistautoptr
     * }
     */
    public static final AddressLayout GOutputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GOutputStream_queueautoptr
     * }
     */
    public static final AddressLayout GOutputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GPermission *GPermission_autoptr
     * }
     */
    public static final AddressLayout GPermission_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GPermission_listautoptr
     * }
     */
    public static final AddressLayout GPermission_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GPermission_slistautoptr
     * }
     */
    public static final AddressLayout GPermission_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GPermission_queueautoptr
     * }
     */
    public static final AddressLayout GPermission_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GPollableInputStream *GPollableInputStream_autoptr
     * }
     */
    public static final AddressLayout GPollableInputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GPollableInputStream_listautoptr
     * }
     */
    public static final AddressLayout GPollableInputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GPollableInputStream_slistautoptr
     * }
     */
    public static final AddressLayout GPollableInputStream_slistautoptr = app_indicator_h.C_POINTER;
}

