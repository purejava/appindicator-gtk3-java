// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GFileIface {
 *     struct _GTypeInterface g_iface;
 *     struct _GFile* (*dup)(struct _GFile*);
 *     unsigned int (*hash)(struct _GFile*);
 *     int (*equal)(struct _GFile*,struct _GFile*);
 *     int (*is_native)(struct _GFile*);
 *     int (*has_uri_scheme)(struct _GFile*,char*);
 *     char* (*get_uri_scheme)(struct _GFile*);
 *     char* (*get_basename)(struct _GFile*);
 *     char* (*get_path)(struct _GFile*);
 *     char* (*get_uri)(struct _GFile*);
 *     char* (*get_parse_name)(struct _GFile*);
 *     struct _GFile* (*get_parent)(struct _GFile*);
 *     int (*prefix_matches)(struct _GFile*,struct _GFile*);
 *     char* (*get_relative_path)(struct _GFile*,struct _GFile*);
 *     struct _GFile* (*resolve_relative_path)(struct _GFile*,char*);
 *     struct _GFile* (*get_child_for_display_name)(struct _GFile*,char*,struct _GError**);
 *     struct _GFileEnumerator* (*enumerate_children)(struct _GFile*,char*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
 *     void (*enumerate_children_async)(struct _GFile*,char*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFileEnumerator* (*enumerate_children_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFileInfo* (*query_info)(struct _GFile*,char*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
 *     void (*query_info_async)(struct _GFile*,char*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFileInfo* (*query_info_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFileInfo* (*query_filesystem_info)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
 *     void (*query_filesystem_info_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFileInfo* (*query_filesystem_info_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GMount* (*find_enclosing_mount)(struct _GFile*,struct _GCancellable*,struct _GError**);
 *     void (*find_enclosing_mount_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GMount* (*find_enclosing_mount_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFile* (*set_display_name)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
 *     void (*set_display_name_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFile* (*set_display_name_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFileAttributeInfoList* (*query_settable_attributes)(struct _GFile*,struct _GCancellable*,struct _GError**);
 *     void (*_query_settable_attributes_async)();
 *     void (*_query_settable_attributes_finish)();
 *     struct _GFileAttributeInfoList* (*query_writable_namespaces)(struct _GFile*,struct _GCancellable*,struct _GError**);
 *     void (*_query_writable_namespaces_async)();
 *     void (*_query_writable_namespaces_finish)();
 *     int (*set_attribute)(struct _GFile*,char*,enum GFileAttributeType,void*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
 *     int (*set_attributes_from_info)(struct _GFile*,struct _GFileInfo*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
 *     void (*set_attributes_async)(struct _GFile*,struct _GFileInfo*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*set_attributes_finish)(struct _GFile*,struct _GAsyncResult*,struct _GFileInfo**,struct _GError**);
 *     struct _GFileInputStream* (*read_fn)(struct _GFile*,struct _GCancellable*,struct _GError**);
 *     void (*read_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFileInputStream* (*read_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFileOutputStream* (*append_to)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
 *     void (*append_to_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFileOutputStream* (*append_to_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFileOutputStream* (*create)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
 *     void (*create_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFileOutputStream* (*create_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFileOutputStream* (*replace)(struct _GFile*,char*,int,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
 *     void (*replace_async)(struct _GFile*,char*,int,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFileOutputStream* (*replace_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     int (*delete_file)(struct _GFile*,struct _GCancellable*,struct _GError**);
 *     void (*delete_file_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*delete_file_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     int (*trash)(struct _GFile*,struct _GCancellable*,struct _GError**);
 *     void (*trash_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*trash_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     int (*make_directory)(struct _GFile*,struct _GCancellable*,struct _GError**);
 *     void (*make_directory_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*make_directory_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     int (*make_symbolic_link)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
 *     void (*make_symbolic_link_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*make_symbolic_link_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     int (*copy)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,struct _GCancellable*,void (*)(long,long,void*),void*,struct _GError**);
 *     void (*copy_async)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,int,struct _GCancellable*,void (*)(long,long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*copy_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     int (*move)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,struct _GCancellable*,void (*)(long,long,void*),void*,struct _GError**);
 *     void (*move_async)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,int,struct _GCancellable*,void (*)(long,long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*move_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     void (*mount_mountable)(struct _GFile*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFile* (*mount_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     void (*unmount_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*unmount_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     void (*eject_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*eject_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     void (*mount_enclosing_volume)(struct _GFile*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*mount_enclosing_volume_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFileMonitor* (*monitor_dir)(struct _GFile*,enum GFileMonitorFlags,struct _GCancellable*,struct _GError**);
 *     struct _GFileMonitor* (*monitor_file)(struct _GFile*,enum GFileMonitorFlags,struct _GCancellable*,struct _GError**);
 *     struct _GFileIOStream* (*open_readwrite)(struct _GFile*,struct _GCancellable*,struct _GError**);
 *     void (*open_readwrite_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFileIOStream* (*open_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFileIOStream* (*create_readwrite)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
 *     void (*create_readwrite_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFileIOStream* (*create_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFileIOStream* (*replace_readwrite)(struct _GFile*,char*,int,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
 *     void (*replace_readwrite_async)(struct _GFile*,char*,int,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GFileIOStream* (*replace_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     void (*start_mountable)(struct _GFile*,enum GDriveStartFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*start_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     void (*stop_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*stop_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     int supports_thread_contexts;
 *     void (*unmount_mountable_with_operation)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*unmount_mountable_with_operation_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     void (*eject_mountable_with_operation)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*eject_mountable_with_operation_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     void (*poll_mountable)(struct _GFile*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*poll_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
 *     int (*measure_disk_usage)(struct _GFile*,enum GFileMeasureFlags,struct _GCancellable*,void (*)(int,unsigned long,unsigned long,unsigned long,void*),void*,unsigned long*,unsigned long*,unsigned long*,struct _GError**);
 *     void (*measure_disk_usage_async)(struct _GFile*,enum GFileMeasureFlags,int,struct _GCancellable*,void (*)(int,unsigned long,unsigned long,unsigned long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*measure_disk_usage_finish)(struct _GFile*,struct _GAsyncResult*,unsigned long*,unsigned long*,unsigned long*,struct _GError**);
 * };
 * }
 */
public class _GFileIface {

    public static MemoryLayout $LAYOUT() {
        return constants$974.const$5;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * struct _GFile* (*dup)(struct _GFile*);
     * }
     */
    public interface dup {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(dup fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$975.const$0, fi, constants$5.const$2, scope);
        }
        static dup ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle dup$VH() {
        return constants$975.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*dup)(struct _GFile*);
     * }
     */
    public static MemorySegment dup$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$975.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*dup)(struct _GFile*);
     * }
     */
    public static void dup$set(MemorySegment seg, MemorySegment x) {
        constants$975.const$1.set(seg, x);
    }
    public static MemorySegment dup$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$975.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dup$set(MemorySegment seg, long index, MemorySegment x) {
        constants$975.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static dup dup(MemorySegment segment, Arena scope) {
        return dup.ofAddress(dup$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned int (*hash)(struct _GFile*);
     * }
     */
    public interface hash {

        int apply(java.lang.foreign.MemorySegment key);
        static MemorySegment allocate(hash fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$975.const$2, fi, constants$10.const$5, scope);
        }
        static hash ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _key);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle hash$VH() {
        return constants$975.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int (*hash)(struct _GFile*);
     * }
     */
    public static MemorySegment hash$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$975.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int (*hash)(struct _GFile*);
     * }
     */
    public static void hash$set(MemorySegment seg, MemorySegment x) {
        constants$975.const$3.set(seg, x);
    }
    public static MemorySegment hash$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$975.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void hash$set(MemorySegment seg, long index, MemorySegment x) {
        constants$975.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static hash hash(MemorySegment segment, Arena scope) {
        return hash.ofAddress(hash$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*equal)(struct _GFile*,struct _GFile*);
     * }
     */
    public interface equal {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(equal fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$975.const$4, fi, constants$9.const$0, scope);
        }
        static equal ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle equal$VH() {
        return constants$975.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*equal)(struct _GFile*,struct _GFile*);
     * }
     */
    public static MemorySegment equal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$975.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*equal)(struct _GFile*,struct _GFile*);
     * }
     */
    public static void equal$set(MemorySegment seg, MemorySegment x) {
        constants$975.const$5.set(seg, x);
    }
    public static MemorySegment equal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$975.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void equal$set(MemorySegment seg, long index, MemorySegment x) {
        constants$975.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static equal equal(MemorySegment segment, Arena scope) {
        return equal.ofAddress(equal$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*is_native)(struct _GFile*);
     * }
     */
    public interface is_native {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(is_native fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$976.const$0, fi, constants$10.const$5, scope);
        }
        static is_native ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_native$VH() {
        return constants$976.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_native)(struct _GFile*);
     * }
     */
    public static MemorySegment is_native$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$976.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_native)(struct _GFile*);
     * }
     */
    public static void is_native$set(MemorySegment seg, MemorySegment x) {
        constants$976.const$1.set(seg, x);
    }
    public static MemorySegment is_native$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$976.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void is_native$set(MemorySegment seg, long index, MemorySegment x) {
        constants$976.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_native is_native(MemorySegment segment, Arena scope) {
        return is_native.ofAddress(is_native$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*has_uri_scheme)(struct _GFile*,char*);
     * }
     */
    public interface has_uri_scheme {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(has_uri_scheme fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$976.const$2, fi, constants$9.const$0, scope);
        }
        static has_uri_scheme ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle has_uri_scheme$VH() {
        return constants$976.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*has_uri_scheme)(struct _GFile*,char*);
     * }
     */
    public static MemorySegment has_uri_scheme$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$976.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*has_uri_scheme)(struct _GFile*,char*);
     * }
     */
    public static void has_uri_scheme$set(MemorySegment seg, MemorySegment x) {
        constants$976.const$3.set(seg, x);
    }
    public static MemorySegment has_uri_scheme$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$976.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void has_uri_scheme$set(MemorySegment seg, long index, MemorySegment x) {
        constants$976.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static has_uri_scheme has_uri_scheme(MemorySegment segment, Arena scope) {
        return has_uri_scheme.ofAddress(has_uri_scheme$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_uri_scheme)(struct _GFile*);
     * }
     */
    public interface get_uri_scheme {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_uri_scheme fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$976.const$4, fi, constants$5.const$2, scope);
        }
        static get_uri_scheme ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_uri_scheme$VH() {
        return constants$976.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_uri_scheme)(struct _GFile*);
     * }
     */
    public static MemorySegment get_uri_scheme$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$976.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_uri_scheme)(struct _GFile*);
     * }
     */
    public static void get_uri_scheme$set(MemorySegment seg, MemorySegment x) {
        constants$976.const$5.set(seg, x);
    }
    public static MemorySegment get_uri_scheme$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$976.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uri_scheme$set(MemorySegment seg, long index, MemorySegment x) {
        constants$976.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uri_scheme get_uri_scheme(MemorySegment segment, Arena scope) {
        return get_uri_scheme.ofAddress(get_uri_scheme$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_basename)(struct _GFile*);
     * }
     */
    public interface get_basename {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_basename fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$977.const$0, fi, constants$5.const$2, scope);
        }
        static get_basename ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_basename$VH() {
        return constants$977.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_basename)(struct _GFile*);
     * }
     */
    public static MemorySegment get_basename$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$977.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_basename)(struct _GFile*);
     * }
     */
    public static void get_basename$set(MemorySegment seg, MemorySegment x) {
        constants$977.const$1.set(seg, x);
    }
    public static MemorySegment get_basename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$977.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_basename$set(MemorySegment seg, long index, MemorySegment x) {
        constants$977.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_basename get_basename(MemorySegment segment, Arena scope) {
        return get_basename.ofAddress(get_basename$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_path)(struct _GFile*);
     * }
     */
    public interface get_path {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_path fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$977.const$2, fi, constants$5.const$2, scope);
        }
        static get_path ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_path$VH() {
        return constants$977.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_path)(struct _GFile*);
     * }
     */
    public static MemorySegment get_path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$977.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_path)(struct _GFile*);
     * }
     */
    public static void get_path$set(MemorySegment seg, MemorySegment x) {
        constants$977.const$3.set(seg, x);
    }
    public static MemorySegment get_path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$977.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_path$set(MemorySegment seg, long index, MemorySegment x) {
        constants$977.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_path get_path(MemorySegment segment, Arena scope) {
        return get_path.ofAddress(get_path$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_uri)(struct _GFile*);
     * }
     */
    public interface get_uri {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_uri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$977.const$4, fi, constants$5.const$2, scope);
        }
        static get_uri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_uri$VH() {
        return constants$977.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_uri)(struct _GFile*);
     * }
     */
    public static MemorySegment get_uri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$977.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_uri)(struct _GFile*);
     * }
     */
    public static void get_uri$set(MemorySegment seg, MemorySegment x) {
        constants$977.const$5.set(seg, x);
    }
    public static MemorySegment get_uri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$977.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$977.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uri get_uri(MemorySegment segment, Arena scope) {
        return get_uri.ofAddress(get_uri$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_parse_name)(struct _GFile*);
     * }
     */
    public interface get_parse_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_parse_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$978.const$0, fi, constants$5.const$2, scope);
        }
        static get_parse_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_parse_name$VH() {
        return constants$978.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_parse_name)(struct _GFile*);
     * }
     */
    public static MemorySegment get_parse_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$978.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_parse_name)(struct _GFile*);
     * }
     */
    public static void get_parse_name$set(MemorySegment seg, MemorySegment x) {
        constants$978.const$1.set(seg, x);
    }
    public static MemorySegment get_parse_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$978.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parse_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$978.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parse_name get_parse_name(MemorySegment segment, Arena scope) {
        return get_parse_name.ofAddress(get_parse_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*get_parent)(struct _GFile*);
     * }
     */
    public interface get_parent {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_parent fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$978.const$2, fi, constants$5.const$2, scope);
        }
        static get_parent ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_parent$VH() {
        return constants$978.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*get_parent)(struct _GFile*);
     * }
     */
    public static MemorySegment get_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$978.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*get_parent)(struct _GFile*);
     * }
     */
    public static void get_parent$set(MemorySegment seg, MemorySegment x) {
        constants$978.const$3.set(seg, x);
    }
    public static MemorySegment get_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$978.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$978.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parent get_parent(MemorySegment segment, Arena scope) {
        return get_parent.ofAddress(get_parent$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*prefix_matches)(struct _GFile*,struct _GFile*);
     * }
     */
    public interface prefix_matches {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(prefix_matches fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$978.const$4, fi, constants$9.const$0, scope);
        }
        static prefix_matches ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle prefix_matches$VH() {
        return constants$978.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*prefix_matches)(struct _GFile*,struct _GFile*);
     * }
     */
    public static MemorySegment prefix_matches$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$978.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*prefix_matches)(struct _GFile*,struct _GFile*);
     * }
     */
    public static void prefix_matches$set(MemorySegment seg, MemorySegment x) {
        constants$978.const$5.set(seg, x);
    }
    public static MemorySegment prefix_matches$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$978.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void prefix_matches$set(MemorySegment seg, long index, MemorySegment x) {
        constants$978.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static prefix_matches prefix_matches(MemorySegment segment, Arena scope) {
        return prefix_matches.ofAddress(prefix_matches$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_relative_path)(struct _GFile*,struct _GFile*);
     * }
     */
    public interface get_relative_path {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_relative_path fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$979.const$0, fi, constants$5.const$5, scope);
        }
        static get_relative_path ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_relative_path$VH() {
        return constants$979.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_relative_path)(struct _GFile*,struct _GFile*);
     * }
     */
    public static MemorySegment get_relative_path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$979.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_relative_path)(struct _GFile*,struct _GFile*);
     * }
     */
    public static void get_relative_path$set(MemorySegment seg, MemorySegment x) {
        constants$979.const$1.set(seg, x);
    }
    public static MemorySegment get_relative_path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$979.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_relative_path$set(MemorySegment seg, long index, MemorySegment x) {
        constants$979.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_relative_path get_relative_path(MemorySegment segment, Arena scope) {
        return get_relative_path.ofAddress(get_relative_path$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*resolve_relative_path)(struct _GFile*,char*);
     * }
     */
    public interface resolve_relative_path {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(resolve_relative_path fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$979.const$2, fi, constants$5.const$5, scope);
        }
        static resolve_relative_path ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle resolve_relative_path$VH() {
        return constants$979.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*resolve_relative_path)(struct _GFile*,char*);
     * }
     */
    public static MemorySegment resolve_relative_path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$979.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*resolve_relative_path)(struct _GFile*,char*);
     * }
     */
    public static void resolve_relative_path$set(MemorySegment seg, MemorySegment x) {
        constants$979.const$3.set(seg, x);
    }
    public static MemorySegment resolve_relative_path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$979.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void resolve_relative_path$set(MemorySegment seg, long index, MemorySegment x) {
        constants$979.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static resolve_relative_path resolve_relative_path(MemorySegment segment, Arena scope) {
        return resolve_relative_path.ofAddress(resolve_relative_path$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*get_child_for_display_name)(struct _GFile*,char*,struct _GError**);
     * }
     */
    public interface get_child_for_display_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_child_for_display_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$979.const$4, fi, constants$23.const$0, scope);
        }
        static get_child_for_display_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_child_for_display_name$VH() {
        return constants$979.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*get_child_for_display_name)(struct _GFile*,char*,struct _GError**);
     * }
     */
    public static MemorySegment get_child_for_display_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$979.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*get_child_for_display_name)(struct _GFile*,char*,struct _GError**);
     * }
     */
    public static void get_child_for_display_name$set(MemorySegment seg, MemorySegment x) {
        constants$979.const$5.set(seg, x);
    }
    public static MemorySegment get_child_for_display_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$979.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_child_for_display_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$979.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_child_for_display_name get_child_for_display_name(MemorySegment segment, Arena scope) {
        return get_child_for_display_name.ofAddress(get_child_for_display_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileEnumerator* (*enumerate_children)(struct _GFile*,char*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface enumerate_children {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(enumerate_children fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$980.const$1, fi, constants$980.const$0, scope);
        }
        static enumerate_children ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$980.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle enumerate_children$VH() {
        return constants$980.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileEnumerator* (*enumerate_children)(struct _GFile*,char*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment enumerate_children$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$980.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileEnumerator* (*enumerate_children)(struct _GFile*,char*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void enumerate_children$set(MemorySegment seg, MemorySegment x) {
        constants$980.const$3.set(seg, x);
    }
    public static MemorySegment enumerate_children$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$980.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void enumerate_children$set(MemorySegment seg, long index, MemorySegment x) {
        constants$980.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static enumerate_children enumerate_children(MemorySegment segment, Arena scope) {
        return enumerate_children.ofAddress(enumerate_children$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*enumerate_children_async)(struct _GFile*,char*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface enumerate_children_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(enumerate_children_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$980.const$4, fi, constants$783.const$3, scope);
        }
        static enumerate_children_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    constants$783.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle enumerate_children_async$VH() {
        return constants$980.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*enumerate_children_async)(struct _GFile*,char*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment enumerate_children_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$980.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*enumerate_children_async)(struct _GFile*,char*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void enumerate_children_async$set(MemorySegment seg, MemorySegment x) {
        constants$980.const$5.set(seg, x);
    }
    public static MemorySegment enumerate_children_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$980.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void enumerate_children_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$980.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static enumerate_children_async enumerate_children_async(MemorySegment segment, Arena scope) {
        return enumerate_children_async.ofAddress(enumerate_children_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileEnumerator* (*enumerate_children_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface enumerate_children_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(enumerate_children_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$981.const$0, fi, constants$23.const$0, scope);
        }
        static enumerate_children_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle enumerate_children_finish$VH() {
        return constants$981.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileEnumerator* (*enumerate_children_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment enumerate_children_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$981.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileEnumerator* (*enumerate_children_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void enumerate_children_finish$set(MemorySegment seg, MemorySegment x) {
        constants$981.const$1.set(seg, x);
    }
    public static MemorySegment enumerate_children_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$981.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void enumerate_children_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$981.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static enumerate_children_finish enumerate_children_finish(MemorySegment segment, Arena scope) {
        return enumerate_children_finish.ofAddress(enumerate_children_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileInfo* (*query_info)(struct _GFile*,char*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface query_info {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(query_info fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$981.const$2, fi, constants$980.const$0, scope);
        }
        static query_info ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$980.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_info$VH() {
        return constants$981.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileInfo* (*query_info)(struct _GFile*,char*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment query_info$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$981.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileInfo* (*query_info)(struct _GFile*,char*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void query_info$set(MemorySegment seg, MemorySegment x) {
        constants$981.const$3.set(seg, x);
    }
    public static MemorySegment query_info$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$981.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void query_info$set(MemorySegment seg, long index, MemorySegment x) {
        constants$981.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_info query_info(MemorySegment segment, Arena scope) {
        return query_info.ofAddress(query_info$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*query_info_async)(struct _GFile*,char*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface query_info_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(query_info_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$981.const$4, fi, constants$783.const$3, scope);
        }
        static query_info_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    constants$783.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_info_async$VH() {
        return constants$981.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*query_info_async)(struct _GFile*,char*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment query_info_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$981.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*query_info_async)(struct _GFile*,char*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void query_info_async$set(MemorySegment seg, MemorySegment x) {
        constants$981.const$5.set(seg, x);
    }
    public static MemorySegment query_info_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$981.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void query_info_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$981.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_info_async query_info_async(MemorySegment segment, Arena scope) {
        return query_info_async.ofAddress(query_info_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileInfo* (*query_info_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface query_info_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(query_info_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$982.const$0, fi, constants$23.const$0, scope);
        }
        static query_info_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_info_finish$VH() {
        return constants$982.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileInfo* (*query_info_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment query_info_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$982.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileInfo* (*query_info_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void query_info_finish$set(MemorySegment seg, MemorySegment x) {
        constants$982.const$1.set(seg, x);
    }
    public static MemorySegment query_info_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$982.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void query_info_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$982.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_info_finish query_info_finish(MemorySegment segment, Arena scope) {
        return query_info_finish.ofAddress(query_info_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileInfo* (*query_filesystem_info)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface query_filesystem_info {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment pattern, java.lang.foreign.MemorySegment callback_data, java.lang.foreign.MemorySegment target, java.lang.foreign.MemorySegment extents);
        static MemorySegment allocate(query_filesystem_info fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$982.const$2, fi, constants$39.const$1, scope);
        }
        static query_filesystem_info ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pattern, java.lang.foreign.MemorySegment _callback_data, java.lang.foreign.MemorySegment _target, java.lang.foreign.MemorySegment _extents) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$868.const$5.invokeExact(symbol, _pattern, _callback_data, _target, _extents);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_filesystem_info$VH() {
        return constants$982.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileInfo* (*query_filesystem_info)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment query_filesystem_info$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$982.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileInfo* (*query_filesystem_info)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void query_filesystem_info$set(MemorySegment seg, MemorySegment x) {
        constants$982.const$3.set(seg, x);
    }
    public static MemorySegment query_filesystem_info$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$982.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void query_filesystem_info$set(MemorySegment seg, long index, MemorySegment x) {
        constants$982.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_filesystem_info query_filesystem_info(MemorySegment segment, Arena scope) {
        return query_filesystem_info.ofAddress(query_filesystem_info$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*query_filesystem_info_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface query_filesystem_info_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(query_filesystem_info_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$982.const$4, fi, constants$587.const$0, scope);
        }
        static query_filesystem_info_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$587.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_filesystem_info_async$VH() {
        return constants$982.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*query_filesystem_info_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment query_filesystem_info_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$982.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*query_filesystem_info_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void query_filesystem_info_async$set(MemorySegment seg, MemorySegment x) {
        constants$982.const$5.set(seg, x);
    }
    public static MemorySegment query_filesystem_info_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$982.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void query_filesystem_info_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$982.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_filesystem_info_async query_filesystem_info_async(MemorySegment segment, Arena scope) {
        return query_filesystem_info_async.ofAddress(query_filesystem_info_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileInfo* (*query_filesystem_info_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface query_filesystem_info_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(query_filesystem_info_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$983.const$0, fi, constants$23.const$0, scope);
        }
        static query_filesystem_info_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_filesystem_info_finish$VH() {
        return constants$983.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileInfo* (*query_filesystem_info_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment query_filesystem_info_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$983.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileInfo* (*query_filesystem_info_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void query_filesystem_info_finish$set(MemorySegment seg, MemorySegment x) {
        constants$983.const$1.set(seg, x);
    }
    public static MemorySegment query_filesystem_info_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$983.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void query_filesystem_info_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$983.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_filesystem_info_finish query_filesystem_info_finish(MemorySegment segment, Arena scope) {
        return query_filesystem_info_finish.ofAddress(query_filesystem_info_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GMount* (*find_enclosing_mount)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface find_enclosing_mount {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(find_enclosing_mount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$983.const$2, fi, constants$23.const$0, scope);
        }
        static find_enclosing_mount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle find_enclosing_mount$VH() {
        return constants$983.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GMount* (*find_enclosing_mount)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment find_enclosing_mount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$983.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GMount* (*find_enclosing_mount)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void find_enclosing_mount$set(MemorySegment seg, MemorySegment x) {
        constants$983.const$3.set(seg, x);
    }
    public static MemorySegment find_enclosing_mount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$983.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void find_enclosing_mount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$983.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static find_enclosing_mount find_enclosing_mount(MemorySegment segment, Arena scope) {
        return find_enclosing_mount.ofAddress(find_enclosing_mount$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*find_enclosing_mount_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface find_enclosing_mount_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(find_enclosing_mount_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$983.const$4, fi, constants$282.const$1, scope);
        }
        static find_enclosing_mount_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$757.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle find_enclosing_mount_async$VH() {
        return constants$983.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*find_enclosing_mount_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment find_enclosing_mount_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$983.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*find_enclosing_mount_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void find_enclosing_mount_async$set(MemorySegment seg, MemorySegment x) {
        constants$983.const$5.set(seg, x);
    }
    public static MemorySegment find_enclosing_mount_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$983.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void find_enclosing_mount_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$983.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static find_enclosing_mount_async find_enclosing_mount_async(MemorySegment segment, Arena scope) {
        return find_enclosing_mount_async.ofAddress(find_enclosing_mount_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GMount* (*find_enclosing_mount_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface find_enclosing_mount_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(find_enclosing_mount_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$984.const$0, fi, constants$23.const$0, scope);
        }
        static find_enclosing_mount_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle find_enclosing_mount_finish$VH() {
        return constants$984.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GMount* (*find_enclosing_mount_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment find_enclosing_mount_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$984.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GMount* (*find_enclosing_mount_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void find_enclosing_mount_finish$set(MemorySegment seg, MemorySegment x) {
        constants$984.const$1.set(seg, x);
    }
    public static MemorySegment find_enclosing_mount_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$984.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void find_enclosing_mount_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$984.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static find_enclosing_mount_finish find_enclosing_mount_finish(MemorySegment segment, Arena scope) {
        return find_enclosing_mount_finish.ofAddress(find_enclosing_mount_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*set_display_name)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface set_display_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment pattern, java.lang.foreign.MemorySegment callback_data, java.lang.foreign.MemorySegment target, java.lang.foreign.MemorySegment extents);
        static MemorySegment allocate(set_display_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$984.const$2, fi, constants$39.const$1, scope);
        }
        static set_display_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pattern, java.lang.foreign.MemorySegment _callback_data, java.lang.foreign.MemorySegment _target, java.lang.foreign.MemorySegment _extents) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$868.const$5.invokeExact(symbol, _pattern, _callback_data, _target, _extents);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_display_name$VH() {
        return constants$984.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*set_display_name)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment set_display_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$984.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*set_display_name)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void set_display_name$set(MemorySegment seg, MemorySegment x) {
        constants$984.const$3.set(seg, x);
    }
    public static MemorySegment set_display_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$984.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void set_display_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$984.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_display_name set_display_name(MemorySegment segment, Arena scope) {
        return set_display_name.ofAddress(set_display_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_display_name_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface set_display_name_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(set_display_name_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$984.const$4, fi, constants$587.const$0, scope);
        }
        static set_display_name_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$587.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_display_name_async$VH() {
        return constants$984.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_display_name_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment set_display_name_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$984.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_display_name_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void set_display_name_async$set(MemorySegment seg, MemorySegment x) {
        constants$984.const$5.set(seg, x);
    }
    public static MemorySegment set_display_name_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$984.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void set_display_name_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$984.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_display_name_async set_display_name_async(MemorySegment segment, Arena scope) {
        return set_display_name_async.ofAddress(set_display_name_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*set_display_name_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface set_display_name_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_display_name_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$985.const$0, fi, constants$23.const$0, scope);
        }
        static set_display_name_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_display_name_finish$VH() {
        return constants$985.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*set_display_name_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment set_display_name_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$985.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*set_display_name_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void set_display_name_finish$set(MemorySegment seg, MemorySegment x) {
        constants$985.const$1.set(seg, x);
    }
    public static MemorySegment set_display_name_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$985.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void set_display_name_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$985.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_display_name_finish set_display_name_finish(MemorySegment segment, Arena scope) {
        return set_display_name_finish.ofAddress(set_display_name_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileAttributeInfoList* (*query_settable_attributes)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface query_settable_attributes {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(query_settable_attributes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$985.const$2, fi, constants$23.const$0, scope);
        }
        static query_settable_attributes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_settable_attributes$VH() {
        return constants$985.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileAttributeInfoList* (*query_settable_attributes)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment query_settable_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$985.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileAttributeInfoList* (*query_settable_attributes)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void query_settable_attributes$set(MemorySegment seg, MemorySegment x) {
        constants$985.const$3.set(seg, x);
    }
    public static MemorySegment query_settable_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$985.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void query_settable_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$985.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_settable_attributes query_settable_attributes(MemorySegment segment, Arena scope) {
        return query_settable_attributes.ofAddress(query_settable_attributes$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_query_settable_attributes_async)();
     * }
     */
    public interface _query_settable_attributes_async {

        void apply();
        static MemorySegment allocate(_query_settable_attributes_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$985.const$4, fi, constants$7.const$5, scope);
        }
        static _query_settable_attributes_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _query_settable_attributes_async$VH() {
        return constants$985.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_query_settable_attributes_async)();
     * }
     */
    public static MemorySegment _query_settable_attributes_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$985.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_query_settable_attributes_async)();
     * }
     */
    public static void _query_settable_attributes_async$set(MemorySegment seg, MemorySegment x) {
        constants$985.const$5.set(seg, x);
    }
    public static MemorySegment _query_settable_attributes_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$985.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _query_settable_attributes_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$985.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _query_settable_attributes_async _query_settable_attributes_async(MemorySegment segment, Arena scope) {
        return _query_settable_attributes_async.ofAddress(_query_settable_attributes_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_query_settable_attributes_finish)();
     * }
     */
    public interface _query_settable_attributes_finish {

        void apply();
        static MemorySegment allocate(_query_settable_attributes_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$986.const$0, fi, constants$7.const$5, scope);
        }
        static _query_settable_attributes_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _query_settable_attributes_finish$VH() {
        return constants$986.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_query_settable_attributes_finish)();
     * }
     */
    public static MemorySegment _query_settable_attributes_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$986.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_query_settable_attributes_finish)();
     * }
     */
    public static void _query_settable_attributes_finish$set(MemorySegment seg, MemorySegment x) {
        constants$986.const$1.set(seg, x);
    }
    public static MemorySegment _query_settable_attributes_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$986.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _query_settable_attributes_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$986.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _query_settable_attributes_finish _query_settable_attributes_finish(MemorySegment segment, Arena scope) {
        return _query_settable_attributes_finish.ofAddress(_query_settable_attributes_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileAttributeInfoList* (*query_writable_namespaces)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface query_writable_namespaces {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(query_writable_namespaces fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$986.const$2, fi, constants$23.const$0, scope);
        }
        static query_writable_namespaces ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_writable_namespaces$VH() {
        return constants$986.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileAttributeInfoList* (*query_writable_namespaces)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment query_writable_namespaces$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$986.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileAttributeInfoList* (*query_writable_namespaces)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void query_writable_namespaces$set(MemorySegment seg, MemorySegment x) {
        constants$986.const$3.set(seg, x);
    }
    public static MemorySegment query_writable_namespaces$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$986.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void query_writable_namespaces$set(MemorySegment seg, long index, MemorySegment x) {
        constants$986.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_writable_namespaces query_writable_namespaces(MemorySegment segment, Arena scope) {
        return query_writable_namespaces.ofAddress(query_writable_namespaces$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_query_writable_namespaces_async)();
     * }
     */
    public interface _query_writable_namespaces_async {

        void apply();
        static MemorySegment allocate(_query_writable_namespaces_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$986.const$4, fi, constants$7.const$5, scope);
        }
        static _query_writable_namespaces_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _query_writable_namespaces_async$VH() {
        return constants$986.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_query_writable_namespaces_async)();
     * }
     */
    public static MemorySegment _query_writable_namespaces_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$986.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_query_writable_namespaces_async)();
     * }
     */
    public static void _query_writable_namespaces_async$set(MemorySegment seg, MemorySegment x) {
        constants$986.const$5.set(seg, x);
    }
    public static MemorySegment _query_writable_namespaces_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$986.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _query_writable_namespaces_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$986.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _query_writable_namespaces_async _query_writable_namespaces_async(MemorySegment segment, Arena scope) {
        return _query_writable_namespaces_async.ofAddress(_query_writable_namespaces_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_query_writable_namespaces_finish)();
     * }
     */
    public interface _query_writable_namespaces_finish {

        void apply();
        static MemorySegment allocate(_query_writable_namespaces_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$987.const$0, fi, constants$7.const$5, scope);
        }
        static _query_writable_namespaces_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _query_writable_namespaces_finish$VH() {
        return constants$987.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_query_writable_namespaces_finish)();
     * }
     */
    public static MemorySegment _query_writable_namespaces_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$987.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_query_writable_namespaces_finish)();
     * }
     */
    public static void _query_writable_namespaces_finish$set(MemorySegment seg, MemorySegment x) {
        constants$987.const$1.set(seg, x);
    }
    public static MemorySegment _query_writable_namespaces_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$987.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _query_writable_namespaces_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$987.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _query_writable_namespaces_finish _query_writable_namespaces_finish(MemorySegment segment, Arena scope) {
        return _query_writable_namespaces_finish.ofAddress(_query_writable_namespaces_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_attribute)(struct _GFile*,char*,enum GFileAttributeType,void*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface set_attribute {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(set_attribute fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$987.const$3, fi, constants$987.const$2, scope);
        }
        static set_attribute ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$987.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_attribute$VH() {
        return constants$987.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_attribute)(struct _GFile*,char*,enum GFileAttributeType,void*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment set_attribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$987.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_attribute)(struct _GFile*,char*,enum GFileAttributeType,void*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void set_attribute$set(MemorySegment seg, MemorySegment x) {
        constants$987.const$5.set(seg, x);
    }
    public static MemorySegment set_attribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$987.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void set_attribute$set(MemorySegment seg, long index, MemorySegment x) {
        constants$987.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_attribute set_attribute(MemorySegment segment, Arena scope) {
        return set_attribute.ofAddress(set_attribute$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_attributes_from_info)(struct _GFile*,struct _GFileInfo*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface set_attributes_from_info {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(set_attributes_from_info fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$988.const$0, fi, constants$862.const$1, scope);
        }
        static set_attributes_from_info ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$988.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_attributes_from_info$VH() {
        return constants$988.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_attributes_from_info)(struct _GFile*,struct _GFileInfo*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment set_attributes_from_info$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$988.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_attributes_from_info)(struct _GFile*,struct _GFileInfo*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void set_attributes_from_info$set(MemorySegment seg, MemorySegment x) {
        constants$988.const$2.set(seg, x);
    }
    public static MemorySegment set_attributes_from_info$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$988.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void set_attributes_from_info$set(MemorySegment seg, long index, MemorySegment x) {
        constants$988.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_attributes_from_info set_attributes_from_info(MemorySegment segment, Arena scope) {
        return set_attributes_from_info.ofAddress(set_attributes_from_info$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_attributes_async)(struct _GFile*,struct _GFileInfo*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface set_attributes_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(set_attributes_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$988.const$3, fi, constants$783.const$3, scope);
        }
        static set_attributes_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    constants$783.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_attributes_async$VH() {
        return constants$988.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_attributes_async)(struct _GFile*,struct _GFileInfo*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment set_attributes_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$988.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_attributes_async)(struct _GFile*,struct _GFileInfo*,enum GFileQueryInfoFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void set_attributes_async$set(MemorySegment seg, MemorySegment x) {
        constants$988.const$4.set(seg, x);
    }
    public static MemorySegment set_attributes_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$988.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void set_attributes_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$988.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_attributes_async set_attributes_async(MemorySegment segment, Arena scope) {
        return set_attributes_async.ofAddress(set_attributes_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_attributes_finish)(struct _GFile*,struct _GAsyncResult*,struct _GFileInfo**,struct _GError**);
     * }
     */
    public interface set_attributes_finish {

        int apply(java.lang.foreign.MemorySegment completion, java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_attributes_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$988.const$5, fi, constants$34.const$5, scope);
        }
        static set_attributes_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _completion, java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$383.const$0.invokeExact(symbol, _completion, _key, _iter, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_attributes_finish$VH() {
        return constants$989.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_attributes_finish)(struct _GFile*,struct _GAsyncResult*,struct _GFileInfo**,struct _GError**);
     * }
     */
    public static MemorySegment set_attributes_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$989.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_attributes_finish)(struct _GFile*,struct _GAsyncResult*,struct _GFileInfo**,struct _GError**);
     * }
     */
    public static void set_attributes_finish$set(MemorySegment seg, MemorySegment x) {
        constants$989.const$0.set(seg, x);
    }
    public static MemorySegment set_attributes_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$989.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void set_attributes_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$989.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_attributes_finish set_attributes_finish(MemorySegment segment, Arena scope) {
        return set_attributes_finish.ofAddress(set_attributes_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileInputStream* (*read_fn)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface read_fn {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(read_fn fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$989.const$1, fi, constants$23.const$0, scope);
        }
        static read_fn ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle read_fn$VH() {
        return constants$989.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileInputStream* (*read_fn)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment read_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$989.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileInputStream* (*read_fn)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void read_fn$set(MemorySegment seg, MemorySegment x) {
        constants$989.const$2.set(seg, x);
    }
    public static MemorySegment read_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$989.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void read_fn$set(MemorySegment seg, long index, MemorySegment x) {
        constants$989.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_fn read_fn(MemorySegment segment, Arena scope) {
        return read_fn.ofAddress(read_fn$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*read_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface read_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(read_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$989.const$3, fi, constants$282.const$1, scope);
        }
        static read_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$757.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle read_async$VH() {
        return constants$989.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*read_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment read_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$989.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*read_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void read_async$set(MemorySegment seg, MemorySegment x) {
        constants$989.const$4.set(seg, x);
    }
    public static MemorySegment read_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$989.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void read_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$989.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_async read_async(MemorySegment segment, Arena scope) {
        return read_async.ofAddress(read_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileInputStream* (*read_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface read_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(read_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$989.const$5, fi, constants$23.const$0, scope);
        }
        static read_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle read_finish$VH() {
        return constants$990.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileInputStream* (*read_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment read_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$990.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileInputStream* (*read_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void read_finish$set(MemorySegment seg, MemorySegment x) {
        constants$990.const$0.set(seg, x);
    }
    public static MemorySegment read_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$990.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void read_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$990.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_finish read_finish(MemorySegment segment, Arena scope) {
        return read_finish.ofAddress(read_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileOutputStream* (*append_to)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface append_to {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(append_to fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$990.const$1, fi, constants$180.const$0, scope);
        }
        static append_to ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$990.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle append_to$VH() {
        return constants$990.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*append_to)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment append_to$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$990.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*append_to)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void append_to$set(MemorySegment seg, MemorySegment x) {
        constants$990.const$3.set(seg, x);
    }
    public static MemorySegment append_to$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$990.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void append_to$set(MemorySegment seg, long index, MemorySegment x) {
        constants$990.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static append_to append_to(MemorySegment segment, Arena scope) {
        return append_to.ofAddress(append_to$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*append_to_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface append_to_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(append_to_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$990.const$5, fi, constants$990.const$4, scope);
        }
        static append_to_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$991.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle append_to_async$VH() {
        return constants$991.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*append_to_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment append_to_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$991.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*append_to_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void append_to_async$set(MemorySegment seg, MemorySegment x) {
        constants$991.const$1.set(seg, x);
    }
    public static MemorySegment append_to_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$991.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void append_to_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$991.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static append_to_async append_to_async(MemorySegment segment, Arena scope) {
        return append_to_async.ofAddress(append_to_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileOutputStream* (*append_to_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface append_to_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(append_to_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$991.const$2, fi, constants$23.const$0, scope);
        }
        static append_to_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle append_to_finish$VH() {
        return constants$991.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*append_to_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment append_to_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$991.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*append_to_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void append_to_finish$set(MemorySegment seg, MemorySegment x) {
        constants$991.const$3.set(seg, x);
    }
    public static MemorySegment append_to_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$991.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void append_to_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$991.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static append_to_finish append_to_finish(MemorySegment segment, Arena scope) {
        return append_to_finish.ofAddress(append_to_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileOutputStream* (*create)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface create {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(create fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$991.const$4, fi, constants$180.const$0, scope);
        }
        static create ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$990.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create$VH() {
        return constants$991.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*create)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment create$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$991.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*create)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void create$set(MemorySegment seg, MemorySegment x) {
        constants$991.const$5.set(seg, x);
    }
    public static MemorySegment create$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$991.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void create$set(MemorySegment seg, long index, MemorySegment x) {
        constants$991.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static create create(MemorySegment segment, Arena scope) {
        return create.ofAddress(create$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*create_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface create_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(create_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$992.const$0, fi, constants$990.const$4, scope);
        }
        static create_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$991.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_async$VH() {
        return constants$992.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*create_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment create_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$992.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*create_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void create_async$set(MemorySegment seg, MemorySegment x) {
        constants$992.const$1.set(seg, x);
    }
    public static MemorySegment create_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$992.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void create_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$992.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_async create_async(MemorySegment segment, Arena scope) {
        return create_async.ofAddress(create_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileOutputStream* (*create_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface create_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(create_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$992.const$2, fi, constants$23.const$0, scope);
        }
        static create_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_finish$VH() {
        return constants$992.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*create_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment create_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$992.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*create_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void create_finish$set(MemorySegment seg, MemorySegment x) {
        constants$992.const$3.set(seg, x);
    }
    public static MemorySegment create_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$992.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void create_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$992.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_finish create_finish(MemorySegment segment, Arena scope) {
        return create_finish.ofAddress(create_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileOutputStream* (*replace)(struct _GFile*,char*,int,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface replace {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(replace fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$992.const$5, fi, constants$992.const$4, scope);
        }
        static replace ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$993.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle replace$VH() {
        return constants$993.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*replace)(struct _GFile*,char*,int,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment replace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$993.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*replace)(struct _GFile*,char*,int,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void replace$set(MemorySegment seg, MemorySegment x) {
        constants$993.const$1.set(seg, x);
    }
    public static MemorySegment replace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$993.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void replace$set(MemorySegment seg, long index, MemorySegment x) {
        constants$993.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static replace replace(MemorySegment segment, Arena scope) {
        return replace.ofAddress(replace$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*replace_async)(struct _GFile*,char*,int,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface replace_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(replace_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$993.const$3, fi, constants$993.const$2, scope);
        }
        static replace_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    constants$993.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle replace_async$VH() {
        return constants$993.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*replace_async)(struct _GFile*,char*,int,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment replace_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$993.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*replace_async)(struct _GFile*,char*,int,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void replace_async$set(MemorySegment seg, MemorySegment x) {
        constants$993.const$5.set(seg, x);
    }
    public static MemorySegment replace_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$993.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void replace_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$993.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static replace_async replace_async(MemorySegment segment, Arena scope) {
        return replace_async.ofAddress(replace_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileOutputStream* (*replace_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface replace_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(replace_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$994.const$0, fi, constants$23.const$0, scope);
        }
        static replace_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle replace_finish$VH() {
        return constants$994.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*replace_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment replace_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$994.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileOutputStream* (*replace_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void replace_finish$set(MemorySegment seg, MemorySegment x) {
        constants$994.const$1.set(seg, x);
    }
    public static MemorySegment replace_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$994.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void replace_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$994.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static replace_finish replace_finish(MemorySegment segment, Arena scope) {
        return replace_finish.ofAddress(replace_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*delete_file)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface delete_file {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(delete_file fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$994.const$2, fi, constants$12.const$2, scope);
        }
        static delete_file ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle delete_file$VH() {
        return constants$994.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*delete_file)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment delete_file$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$994.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*delete_file)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void delete_file$set(MemorySegment seg, MemorySegment x) {
        constants$994.const$3.set(seg, x);
    }
    public static MemorySegment delete_file$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$994.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_file$set(MemorySegment seg, long index, MemorySegment x) {
        constants$994.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_file delete_file(MemorySegment segment, Arena scope) {
        return delete_file.ofAddress(delete_file$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*delete_file_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface delete_file_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(delete_file_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$994.const$4, fi, constants$282.const$1, scope);
        }
        static delete_file_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$757.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle delete_file_async$VH() {
        return constants$994.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*delete_file_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment delete_file_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$994.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*delete_file_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void delete_file_async$set(MemorySegment seg, MemorySegment x) {
        constants$994.const$5.set(seg, x);
    }
    public static MemorySegment delete_file_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$994.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_file_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$994.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_file_async delete_file_async(MemorySegment segment, Arena scope) {
        return delete_file_async.ofAddress(delete_file_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*delete_file_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface delete_file_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(delete_file_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$995.const$0, fi, constants$12.const$2, scope);
        }
        static delete_file_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle delete_file_finish$VH() {
        return constants$995.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*delete_file_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment delete_file_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$995.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*delete_file_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void delete_file_finish$set(MemorySegment seg, MemorySegment x) {
        constants$995.const$1.set(seg, x);
    }
    public static MemorySegment delete_file_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$995.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_file_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$995.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_file_finish delete_file_finish(MemorySegment segment, Arena scope) {
        return delete_file_finish.ofAddress(delete_file_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*trash)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface trash {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(trash fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$995.const$2, fi, constants$12.const$2, scope);
        }
        static trash ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle trash$VH() {
        return constants$995.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*trash)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment trash$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$995.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*trash)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void trash$set(MemorySegment seg, MemorySegment x) {
        constants$995.const$3.set(seg, x);
    }
    public static MemorySegment trash$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$995.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void trash$set(MemorySegment seg, long index, MemorySegment x) {
        constants$995.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static trash trash(MemorySegment segment, Arena scope) {
        return trash.ofAddress(trash$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*trash_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface trash_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(trash_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$995.const$4, fi, constants$282.const$1, scope);
        }
        static trash_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$757.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle trash_async$VH() {
        return constants$995.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*trash_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment trash_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$995.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*trash_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void trash_async$set(MemorySegment seg, MemorySegment x) {
        constants$995.const$5.set(seg, x);
    }
    public static MemorySegment trash_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$995.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void trash_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$995.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static trash_async trash_async(MemorySegment segment, Arena scope) {
        return trash_async.ofAddress(trash_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*trash_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface trash_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(trash_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$996.const$0, fi, constants$12.const$2, scope);
        }
        static trash_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle trash_finish$VH() {
        return constants$996.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*trash_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment trash_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$996.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*trash_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void trash_finish$set(MemorySegment seg, MemorySegment x) {
        constants$996.const$1.set(seg, x);
    }
    public static MemorySegment trash_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$996.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void trash_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$996.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static trash_finish trash_finish(MemorySegment segment, Arena scope) {
        return trash_finish.ofAddress(trash_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*make_directory)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface make_directory {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(make_directory fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$996.const$2, fi, constants$12.const$2, scope);
        }
        static make_directory ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle make_directory$VH() {
        return constants$996.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*make_directory)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment make_directory$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$996.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*make_directory)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void make_directory$set(MemorySegment seg, MemorySegment x) {
        constants$996.const$3.set(seg, x);
    }
    public static MemorySegment make_directory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$996.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void make_directory$set(MemorySegment seg, long index, MemorySegment x) {
        constants$996.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static make_directory make_directory(MemorySegment segment, Arena scope) {
        return make_directory.ofAddress(make_directory$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*make_directory_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface make_directory_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(make_directory_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$996.const$4, fi, constants$282.const$1, scope);
        }
        static make_directory_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$757.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle make_directory_async$VH() {
        return constants$996.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*make_directory_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment make_directory_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$996.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*make_directory_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void make_directory_async$set(MemorySegment seg, MemorySegment x) {
        constants$996.const$5.set(seg, x);
    }
    public static MemorySegment make_directory_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$996.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void make_directory_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$996.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static make_directory_async make_directory_async(MemorySegment segment, Arena scope) {
        return make_directory_async.ofAddress(make_directory_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*make_directory_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface make_directory_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(make_directory_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$997.const$0, fi, constants$12.const$2, scope);
        }
        static make_directory_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle make_directory_finish$VH() {
        return constants$997.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*make_directory_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment make_directory_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$997.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*make_directory_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void make_directory_finish$set(MemorySegment seg, MemorySegment x) {
        constants$997.const$1.set(seg, x);
    }
    public static MemorySegment make_directory_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$997.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void make_directory_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$997.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static make_directory_finish make_directory_finish(MemorySegment segment, Arena scope) {
        return make_directory_finish.ofAddress(make_directory_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*make_symbolic_link)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface make_symbolic_link {

        int apply(java.lang.foreign.MemorySegment completion, java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(make_symbolic_link fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$997.const$2, fi, constants$34.const$5, scope);
        }
        static make_symbolic_link ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _completion, java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$383.const$0.invokeExact(symbol, _completion, _key, _iter, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle make_symbolic_link$VH() {
        return constants$997.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*make_symbolic_link)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment make_symbolic_link$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$997.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*make_symbolic_link)(struct _GFile*,char*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void make_symbolic_link$set(MemorySegment seg, MemorySegment x) {
        constants$997.const$3.set(seg, x);
    }
    public static MemorySegment make_symbolic_link$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$997.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void make_symbolic_link$set(MemorySegment seg, long index, MemorySegment x) {
        constants$997.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static make_symbolic_link make_symbolic_link(MemorySegment segment, Arena scope) {
        return make_symbolic_link.ofAddress(make_symbolic_link$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*make_symbolic_link_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface make_symbolic_link_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(make_symbolic_link_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$997.const$4, fi, constants$587.const$0, scope);
        }
        static make_symbolic_link_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$587.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle make_symbolic_link_async$VH() {
        return constants$997.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*make_symbolic_link_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment make_symbolic_link_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$997.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*make_symbolic_link_async)(struct _GFile*,char*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void make_symbolic_link_async$set(MemorySegment seg, MemorySegment x) {
        constants$997.const$5.set(seg, x);
    }
    public static MemorySegment make_symbolic_link_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$997.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void make_symbolic_link_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$997.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static make_symbolic_link_async make_symbolic_link_async(MemorySegment segment, Arena scope) {
        return make_symbolic_link_async.ofAddress(make_symbolic_link_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*make_symbolic_link_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface make_symbolic_link_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(make_symbolic_link_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$998.const$0, fi, constants$12.const$2, scope);
        }
        static make_symbolic_link_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle make_symbolic_link_finish$VH() {
        return constants$998.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*make_symbolic_link_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment make_symbolic_link_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$998.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*make_symbolic_link_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void make_symbolic_link_finish$set(MemorySegment seg, MemorySegment x) {
        constants$998.const$1.set(seg, x);
    }
    public static MemorySegment make_symbolic_link_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$998.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void make_symbolic_link_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$998.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static make_symbolic_link_finish make_symbolic_link_finish(MemorySegment segment, Arena scope) {
        return make_symbolic_link_finish.ofAddress(make_symbolic_link_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*copy)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,struct _GCancellable*,void (*)(long,long,void*),void*,struct _GError**);
     * }
     */
    public interface copy {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(copy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$998.const$2, fi, constants$909.const$0, scope);
        }
        static copy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$998.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle copy$VH() {
        return constants$998.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*copy)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,struct _GCancellable*,void (*)(long,long,void*),void*,struct _GError**);
     * }
     */
    public static MemorySegment copy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$998.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*copy)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,struct _GCancellable*,void (*)(long,long,void*),void*,struct _GError**);
     * }
     */
    public static void copy$set(MemorySegment seg, MemorySegment x) {
        constants$998.const$4.set(seg, x);
    }
    public static MemorySegment copy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$998.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void copy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$998.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy copy(MemorySegment segment, Arena scope) {
        return copy.ofAddress(copy$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*copy_async)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,int,struct _GCancellable*,void (*)(long,long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface copy_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(copy_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$999.const$0, fi, constants$998.const$5, scope);
        }
        static copy_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    constants$999.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle copy_async$VH() {
        return constants$999.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*copy_async)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,int,struct _GCancellable*,void (*)(long,long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment copy_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$999.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*copy_async)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,int,struct _GCancellable*,void (*)(long,long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void copy_async$set(MemorySegment seg, MemorySegment x) {
        constants$999.const$2.set(seg, x);
    }
    public static MemorySegment copy_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$999.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$999.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_async copy_async(MemorySegment segment, Arena scope) {
        return copy_async.ofAddress(copy_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*copy_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface copy_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(copy_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$999.const$3, fi, constants$12.const$2, scope);
        }
        static copy_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle copy_finish$VH() {
        return constants$999.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*copy_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment copy_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$999.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*copy_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void copy_finish$set(MemorySegment seg, MemorySegment x) {
        constants$999.const$4.set(seg, x);
    }
    public static MemorySegment copy_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$999.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$999.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_finish copy_finish(MemorySegment segment, Arena scope) {
        return copy_finish.ofAddress(copy_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*move)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,struct _GCancellable*,void (*)(long,long,void*),void*,struct _GError**);
     * }
     */
    public interface move {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(move fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$999.const$5, fi, constants$909.const$0, scope);
        }
        static move ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$998.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move$VH() {
        return constants$1000.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*move)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,struct _GCancellable*,void (*)(long,long,void*),void*,struct _GError**);
     * }
     */
    public static MemorySegment move$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1000.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*move)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,struct _GCancellable*,void (*)(long,long,void*),void*,struct _GError**);
     * }
     */
    public static void move$set(MemorySegment seg, MemorySegment x) {
        constants$1000.const$0.set(seg, x);
    }
    public static MemorySegment move$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1000.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void move$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1000.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static move move(MemorySegment segment, Arena scope) {
        return move.ofAddress(move$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*move_async)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,int,struct _GCancellable*,void (*)(long,long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface move_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(move_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1000.const$1, fi, constants$998.const$5, scope);
        }
        static move_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    constants$999.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_async$VH() {
        return constants$1000.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*move_async)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,int,struct _GCancellable*,void (*)(long,long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment move_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1000.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*move_async)(struct _GFile*,struct _GFile*,enum GFileCopyFlags,int,struct _GCancellable*,void (*)(long,long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void move_async$set(MemorySegment seg, MemorySegment x) {
        constants$1000.const$2.set(seg, x);
    }
    public static MemorySegment move_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1000.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void move_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1000.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_async move_async(MemorySegment segment, Arena scope) {
        return move_async.ofAddress(move_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*move_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface move_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(move_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1000.const$3, fi, constants$12.const$2, scope);
        }
        static move_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_finish$VH() {
        return constants$1000.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*move_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment move_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1000.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*move_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void move_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1000.const$4.set(seg, x);
    }
    public static MemorySegment move_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1000.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void move_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1000.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_finish move_finish(MemorySegment segment, Arena scope) {
        return move_finish.ofAddress(move_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*mount_mountable)(struct _GFile*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface mount_mountable {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(mount_mountable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1000.const$5, fi, constants$381.const$0, scope);
        }
        static mount_mountable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$948.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mount_mountable$VH() {
        return constants$1001.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*mount_mountable)(struct _GFile*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment mount_mountable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1001.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*mount_mountable)(struct _GFile*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void mount_mountable$set(MemorySegment seg, MemorySegment x) {
        constants$1001.const$0.set(seg, x);
    }
    public static MemorySegment mount_mountable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1001.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_mountable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1001.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_mountable mount_mountable(MemorySegment segment, Arena scope) {
        return mount_mountable.ofAddress(mount_mountable$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*mount_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface mount_mountable_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(mount_mountable_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1001.const$1, fi, constants$23.const$0, scope);
        }
        static mount_mountable_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mount_mountable_finish$VH() {
        return constants$1001.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*mount_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment mount_mountable_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1001.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*mount_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void mount_mountable_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1001.const$2.set(seg, x);
    }
    public static MemorySegment mount_mountable_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1001.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_mountable_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1001.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_mountable_finish mount_mountable_finish(MemorySegment segment, Arena scope) {
        return mount_mountable_finish.ofAddress(mount_mountable_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unmount_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface unmount_mountable {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(unmount_mountable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1001.const$3, fi, constants$282.const$1, scope);
        }
        static unmount_mountable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$757.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmount_mountable$VH() {
        return constants$1001.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unmount_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment unmount_mountable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1001.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unmount_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void unmount_mountable$set(MemorySegment seg, MemorySegment x) {
        constants$1001.const$4.set(seg, x);
    }
    public static MemorySegment unmount_mountable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1001.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount_mountable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1001.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount_mountable unmount_mountable(MemorySegment segment, Arena scope) {
        return unmount_mountable.ofAddress(unmount_mountable$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*unmount_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface unmount_mountable_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(unmount_mountable_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1001.const$5, fi, constants$12.const$2, scope);
        }
        static unmount_mountable_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmount_mountable_finish$VH() {
        return constants$1002.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*unmount_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment unmount_mountable_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1002.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*unmount_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void unmount_mountable_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1002.const$0.set(seg, x);
    }
    public static MemorySegment unmount_mountable_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1002.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount_mountable_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1002.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount_mountable_finish unmount_mountable_finish(MemorySegment segment, Arena scope) {
        return unmount_mountable_finish.ofAddress(unmount_mountable_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*eject_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface eject_mountable {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(eject_mountable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1002.const$1, fi, constants$282.const$1, scope);
        }
        static eject_mountable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$757.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject_mountable$VH() {
        return constants$1002.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*eject_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment eject_mountable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1002.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*eject_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void eject_mountable$set(MemorySegment seg, MemorySegment x) {
        constants$1002.const$2.set(seg, x);
    }
    public static MemorySegment eject_mountable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1002.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_mountable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1002.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_mountable eject_mountable(MemorySegment segment, Arena scope) {
        return eject_mountable.ofAddress(eject_mountable$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*eject_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface eject_mountable_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(eject_mountable_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1002.const$3, fi, constants$12.const$2, scope);
        }
        static eject_mountable_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject_mountable_finish$VH() {
        return constants$1002.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*eject_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment eject_mountable_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1002.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*eject_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void eject_mountable_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1002.const$4.set(seg, x);
    }
    public static MemorySegment eject_mountable_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1002.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_mountable_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1002.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_mountable_finish eject_mountable_finish(MemorySegment segment, Arena scope) {
        return eject_mountable_finish.ofAddress(eject_mountable_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*mount_enclosing_volume)(struct _GFile*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface mount_enclosing_volume {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(mount_enclosing_volume fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1002.const$5, fi, constants$381.const$0, scope);
        }
        static mount_enclosing_volume ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$948.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mount_enclosing_volume$VH() {
        return constants$1003.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*mount_enclosing_volume)(struct _GFile*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment mount_enclosing_volume$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1003.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*mount_enclosing_volume)(struct _GFile*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void mount_enclosing_volume$set(MemorySegment seg, MemorySegment x) {
        constants$1003.const$0.set(seg, x);
    }
    public static MemorySegment mount_enclosing_volume$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1003.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_enclosing_volume$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1003.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_enclosing_volume mount_enclosing_volume(MemorySegment segment, Arena scope) {
        return mount_enclosing_volume.ofAddress(mount_enclosing_volume$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*mount_enclosing_volume_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface mount_enclosing_volume_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(mount_enclosing_volume_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1003.const$1, fi, constants$12.const$2, scope);
        }
        static mount_enclosing_volume_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mount_enclosing_volume_finish$VH() {
        return constants$1003.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*mount_enclosing_volume_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment mount_enclosing_volume_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1003.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*mount_enclosing_volume_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void mount_enclosing_volume_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1003.const$2.set(seg, x);
    }
    public static MemorySegment mount_enclosing_volume_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1003.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_enclosing_volume_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1003.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_enclosing_volume_finish mount_enclosing_volume_finish(MemorySegment segment, Arena scope) {
        return mount_enclosing_volume_finish.ofAddress(mount_enclosing_volume_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileMonitor* (*monitor_dir)(struct _GFile*,enum GFileMonitorFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface monitor_dir {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(monitor_dir fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1003.const$3, fi, constants$180.const$0, scope);
        }
        static monitor_dir ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$990.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle monitor_dir$VH() {
        return constants$1003.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileMonitor* (*monitor_dir)(struct _GFile*,enum GFileMonitorFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment monitor_dir$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1003.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileMonitor* (*monitor_dir)(struct _GFile*,enum GFileMonitorFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void monitor_dir$set(MemorySegment seg, MemorySegment x) {
        constants$1003.const$4.set(seg, x);
    }
    public static MemorySegment monitor_dir$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1003.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void monitor_dir$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1003.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static monitor_dir monitor_dir(MemorySegment segment, Arena scope) {
        return monitor_dir.ofAddress(monitor_dir$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileMonitor* (*monitor_file)(struct _GFile*,enum GFileMonitorFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface monitor_file {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(monitor_file fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1003.const$5, fi, constants$180.const$0, scope);
        }
        static monitor_file ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$990.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle monitor_file$VH() {
        return constants$1004.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileMonitor* (*monitor_file)(struct _GFile*,enum GFileMonitorFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment monitor_file$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1004.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileMonitor* (*monitor_file)(struct _GFile*,enum GFileMonitorFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void monitor_file$set(MemorySegment seg, MemorySegment x) {
        constants$1004.const$0.set(seg, x);
    }
    public static MemorySegment monitor_file$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1004.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void monitor_file$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1004.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static monitor_file monitor_file(MemorySegment segment, Arena scope) {
        return monitor_file.ofAddress(monitor_file$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileIOStream* (*open_readwrite)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface open_readwrite {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(open_readwrite fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1004.const$1, fi, constants$23.const$0, scope);
        }
        static open_readwrite ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle open_readwrite$VH() {
        return constants$1004.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileIOStream* (*open_readwrite)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment open_readwrite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1004.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileIOStream* (*open_readwrite)(struct _GFile*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void open_readwrite$set(MemorySegment seg, MemorySegment x) {
        constants$1004.const$2.set(seg, x);
    }
    public static MemorySegment open_readwrite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1004.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void open_readwrite$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1004.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static open_readwrite open_readwrite(MemorySegment segment, Arena scope) {
        return open_readwrite.ofAddress(open_readwrite$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*open_readwrite_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface open_readwrite_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(open_readwrite_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1004.const$3, fi, constants$282.const$1, scope);
        }
        static open_readwrite_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$757.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle open_readwrite_async$VH() {
        return constants$1004.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*open_readwrite_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment open_readwrite_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1004.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*open_readwrite_async)(struct _GFile*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void open_readwrite_async$set(MemorySegment seg, MemorySegment x) {
        constants$1004.const$4.set(seg, x);
    }
    public static MemorySegment open_readwrite_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1004.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void open_readwrite_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1004.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static open_readwrite_async open_readwrite_async(MemorySegment segment, Arena scope) {
        return open_readwrite_async.ofAddress(open_readwrite_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileIOStream* (*open_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface open_readwrite_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(open_readwrite_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1004.const$5, fi, constants$23.const$0, scope);
        }
        static open_readwrite_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle open_readwrite_finish$VH() {
        return constants$1005.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileIOStream* (*open_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment open_readwrite_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1005.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileIOStream* (*open_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void open_readwrite_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1005.const$0.set(seg, x);
    }
    public static MemorySegment open_readwrite_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1005.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void open_readwrite_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1005.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static open_readwrite_finish open_readwrite_finish(MemorySegment segment, Arena scope) {
        return open_readwrite_finish.ofAddress(open_readwrite_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileIOStream* (*create_readwrite)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface create_readwrite {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(create_readwrite fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1005.const$1, fi, constants$180.const$0, scope);
        }
        static create_readwrite ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$990.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_readwrite$VH() {
        return constants$1005.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileIOStream* (*create_readwrite)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment create_readwrite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1005.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileIOStream* (*create_readwrite)(struct _GFile*,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void create_readwrite$set(MemorySegment seg, MemorySegment x) {
        constants$1005.const$2.set(seg, x);
    }
    public static MemorySegment create_readwrite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1005.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void create_readwrite$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1005.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_readwrite create_readwrite(MemorySegment segment, Arena scope) {
        return create_readwrite.ofAddress(create_readwrite$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*create_readwrite_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface create_readwrite_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(create_readwrite_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1005.const$3, fi, constants$990.const$4, scope);
        }
        static create_readwrite_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$991.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_readwrite_async$VH() {
        return constants$1005.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*create_readwrite_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment create_readwrite_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1005.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*create_readwrite_async)(struct _GFile*,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void create_readwrite_async$set(MemorySegment seg, MemorySegment x) {
        constants$1005.const$4.set(seg, x);
    }
    public static MemorySegment create_readwrite_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1005.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void create_readwrite_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1005.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_readwrite_async create_readwrite_async(MemorySegment segment, Arena scope) {
        return create_readwrite_async.ofAddress(create_readwrite_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileIOStream* (*create_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface create_readwrite_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(create_readwrite_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1005.const$5, fi, constants$23.const$0, scope);
        }
        static create_readwrite_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_readwrite_finish$VH() {
        return constants$1006.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileIOStream* (*create_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment create_readwrite_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1006.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileIOStream* (*create_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void create_readwrite_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1006.const$0.set(seg, x);
    }
    public static MemorySegment create_readwrite_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1006.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void create_readwrite_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1006.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_readwrite_finish create_readwrite_finish(MemorySegment segment, Arena scope) {
        return create_readwrite_finish.ofAddress(create_readwrite_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileIOStream* (*replace_readwrite)(struct _GFile*,char*,int,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface replace_readwrite {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(replace_readwrite fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1006.const$1, fi, constants$992.const$4, scope);
        }
        static replace_readwrite ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$993.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle replace_readwrite$VH() {
        return constants$1006.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileIOStream* (*replace_readwrite)(struct _GFile*,char*,int,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment replace_readwrite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1006.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileIOStream* (*replace_readwrite)(struct _GFile*,char*,int,enum GFileCreateFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void replace_readwrite$set(MemorySegment seg, MemorySegment x) {
        constants$1006.const$2.set(seg, x);
    }
    public static MemorySegment replace_readwrite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1006.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void replace_readwrite$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1006.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static replace_readwrite replace_readwrite(MemorySegment segment, Arena scope) {
        return replace_readwrite.ofAddress(replace_readwrite$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*replace_readwrite_async)(struct _GFile*,char*,int,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface replace_readwrite_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(replace_readwrite_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1006.const$3, fi, constants$993.const$2, scope);
        }
        static replace_readwrite_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    constants$993.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle replace_readwrite_async$VH() {
        return constants$1006.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*replace_readwrite_async)(struct _GFile*,char*,int,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment replace_readwrite_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1006.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*replace_readwrite_async)(struct _GFile*,char*,int,enum GFileCreateFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void replace_readwrite_async$set(MemorySegment seg, MemorySegment x) {
        constants$1006.const$4.set(seg, x);
    }
    public static MemorySegment replace_readwrite_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1006.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void replace_readwrite_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1006.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static replace_readwrite_async replace_readwrite_async(MemorySegment segment, Arena scope) {
        return replace_readwrite_async.ofAddress(replace_readwrite_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFileIOStream* (*replace_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface replace_readwrite_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(replace_readwrite_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1006.const$5, fi, constants$23.const$0, scope);
        }
        static replace_readwrite_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle replace_readwrite_finish$VH() {
        return constants$1007.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFileIOStream* (*replace_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment replace_readwrite_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1007.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFileIOStream* (*replace_readwrite_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void replace_readwrite_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1007.const$0.set(seg, x);
    }
    public static MemorySegment replace_readwrite_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1007.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void replace_readwrite_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1007.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static replace_readwrite_finish replace_readwrite_finish(MemorySegment segment, Arena scope) {
        return replace_readwrite_finish.ofAddress(replace_readwrite_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*start_mountable)(struct _GFile*,enum GDriveStartFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface start_mountable {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(start_mountable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1007.const$1, fi, constants$381.const$0, scope);
        }
        static start_mountable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$948.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle start_mountable$VH() {
        return constants$1007.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*start_mountable)(struct _GFile*,enum GDriveStartFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment start_mountable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1007.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*start_mountable)(struct _GFile*,enum GDriveStartFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void start_mountable$set(MemorySegment seg, MemorySegment x) {
        constants$1007.const$2.set(seg, x);
    }
    public static MemorySegment start_mountable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1007.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void start_mountable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1007.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_mountable start_mountable(MemorySegment segment, Arena scope) {
        return start_mountable.ofAddress(start_mountable$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*start_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface start_mountable_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(start_mountable_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1007.const$3, fi, constants$12.const$2, scope);
        }
        static start_mountable_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle start_mountable_finish$VH() {
        return constants$1007.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*start_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment start_mountable_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1007.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*start_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void start_mountable_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1007.const$4.set(seg, x);
    }
    public static MemorySegment start_mountable_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1007.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void start_mountable_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1007.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_mountable_finish start_mountable_finish(MemorySegment segment, Arena scope) {
        return start_mountable_finish.ofAddress(start_mountable_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*stop_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface stop_mountable {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(stop_mountable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1007.const$5, fi, constants$381.const$0, scope);
        }
        static stop_mountable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$948.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle stop_mountable$VH() {
        return constants$1008.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*stop_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment stop_mountable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1008.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*stop_mountable)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void stop_mountable$set(MemorySegment seg, MemorySegment x) {
        constants$1008.const$0.set(seg, x);
    }
    public static MemorySegment stop_mountable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1008.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void stop_mountable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1008.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static stop_mountable stop_mountable(MemorySegment segment, Arena scope) {
        return stop_mountable.ofAddress(stop_mountable$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*stop_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface stop_mountable_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(stop_mountable_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1008.const$1, fi, constants$12.const$2, scope);
        }
        static stop_mountable_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle stop_mountable_finish$VH() {
        return constants$1008.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*stop_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment stop_mountable_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1008.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*stop_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void stop_mountable_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1008.const$2.set(seg, x);
    }
    public static MemorySegment stop_mountable_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1008.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void stop_mountable_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1008.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static stop_mountable_finish stop_mountable_finish(MemorySegment segment, Arena scope) {
        return stop_mountable_finish.ofAddress(stop_mountable_finish$get(segment), scope);
    }
    public static VarHandle supports_thread_contexts$VH() {
        return constants$1008.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int supports_thread_contexts;
     * }
     */
    public static int supports_thread_contexts$get(MemorySegment seg) {
        return (int)constants$1008.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int supports_thread_contexts;
     * }
     */
    public static void supports_thread_contexts$set(MemorySegment seg, int x) {
        constants$1008.const$3.set(seg, x);
    }
    public static int supports_thread_contexts$get(MemorySegment seg, long index) {
        return (int)constants$1008.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void supports_thread_contexts$set(MemorySegment seg, long index, int x) {
        constants$1008.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*unmount_mountable_with_operation)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface unmount_mountable_with_operation {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(unmount_mountable_with_operation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1008.const$4, fi, constants$381.const$0, scope);
        }
        static unmount_mountable_with_operation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$948.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmount_mountable_with_operation$VH() {
        return constants$1008.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unmount_mountable_with_operation)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment unmount_mountable_with_operation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1008.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unmount_mountable_with_operation)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void unmount_mountable_with_operation$set(MemorySegment seg, MemorySegment x) {
        constants$1008.const$5.set(seg, x);
    }
    public static MemorySegment unmount_mountable_with_operation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1008.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount_mountable_with_operation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1008.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount_mountable_with_operation unmount_mountable_with_operation(MemorySegment segment, Arena scope) {
        return unmount_mountable_with_operation.ofAddress(unmount_mountable_with_operation$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*unmount_mountable_with_operation_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface unmount_mountable_with_operation_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(unmount_mountable_with_operation_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1009.const$0, fi, constants$12.const$2, scope);
        }
        static unmount_mountable_with_operation_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmount_mountable_with_operation_finish$VH() {
        return constants$1009.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*unmount_mountable_with_operation_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment unmount_mountable_with_operation_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1009.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*unmount_mountable_with_operation_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void unmount_mountable_with_operation_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1009.const$1.set(seg, x);
    }
    public static MemorySegment unmount_mountable_with_operation_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1009.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount_mountable_with_operation_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1009.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount_mountable_with_operation_finish unmount_mountable_with_operation_finish(MemorySegment segment, Arena scope) {
        return unmount_mountable_with_operation_finish.ofAddress(unmount_mountable_with_operation_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*eject_mountable_with_operation)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface eject_mountable_with_operation {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(eject_mountable_with_operation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1009.const$2, fi, constants$381.const$0, scope);
        }
        static eject_mountable_with_operation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$948.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject_mountable_with_operation$VH() {
        return constants$1009.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*eject_mountable_with_operation)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment eject_mountable_with_operation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1009.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*eject_mountable_with_operation)(struct _GFile*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void eject_mountable_with_operation$set(MemorySegment seg, MemorySegment x) {
        constants$1009.const$3.set(seg, x);
    }
    public static MemorySegment eject_mountable_with_operation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1009.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_mountable_with_operation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1009.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_mountable_with_operation eject_mountable_with_operation(MemorySegment segment, Arena scope) {
        return eject_mountable_with_operation.ofAddress(eject_mountable_with_operation$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*eject_mountable_with_operation_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface eject_mountable_with_operation_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(eject_mountable_with_operation_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1009.const$4, fi, constants$12.const$2, scope);
        }
        static eject_mountable_with_operation_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject_mountable_with_operation_finish$VH() {
        return constants$1009.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*eject_mountable_with_operation_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment eject_mountable_with_operation_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1009.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*eject_mountable_with_operation_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void eject_mountable_with_operation_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1009.const$5.set(seg, x);
    }
    public static MemorySegment eject_mountable_with_operation_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1009.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_mountable_with_operation_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1009.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_mountable_with_operation_finish eject_mountable_with_operation_finish(MemorySegment segment, Arena scope) {
        return eject_mountable_with_operation_finish.ofAddress(eject_mountable_with_operation_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*poll_mountable)(struct _GFile*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface poll_mountable {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(poll_mountable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1010.const$0, fi, constants$42.const$1, scope);
        }
        static poll_mountable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$259.const$4.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle poll_mountable$VH() {
        return constants$1010.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*poll_mountable)(struct _GFile*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment poll_mountable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1010.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*poll_mountable)(struct _GFile*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void poll_mountable$set(MemorySegment seg, MemorySegment x) {
        constants$1010.const$1.set(seg, x);
    }
    public static MemorySegment poll_mountable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1010.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void poll_mountable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1010.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static poll_mountable poll_mountable(MemorySegment segment, Arena scope) {
        return poll_mountable.ofAddress(poll_mountable$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*poll_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface poll_mountable_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(poll_mountable_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1010.const$2, fi, constants$12.const$2, scope);
        }
        static poll_mountable_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle poll_mountable_finish$VH() {
        return constants$1010.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*poll_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment poll_mountable_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1010.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*poll_mountable_finish)(struct _GFile*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void poll_mountable_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1010.const$3.set(seg, x);
    }
    public static MemorySegment poll_mountable_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1010.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void poll_mountable_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1010.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static poll_mountable_finish poll_mountable_finish(MemorySegment segment, Arena scope) {
        return poll_mountable_finish.ofAddress(poll_mountable_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*measure_disk_usage)(struct _GFile*,enum GFileMeasureFlags,struct _GCancellable*,void (*)(int,unsigned long,unsigned long,unsigned long,void*),void*,unsigned long*,unsigned long*,unsigned long*,struct _GError**);
     * }
     */
    public interface measure_disk_usage {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(measure_disk_usage fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1010.const$5, fi, constants$1010.const$4, scope);
        }
        static measure_disk_usage ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)constants$1011.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle measure_disk_usage$VH() {
        return constants$1011.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*measure_disk_usage)(struct _GFile*,enum GFileMeasureFlags,struct _GCancellable*,void (*)(int,unsigned long,unsigned long,unsigned long,void*),void*,unsigned long*,unsigned long*,unsigned long*,struct _GError**);
     * }
     */
    public static MemorySegment measure_disk_usage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1011.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*measure_disk_usage)(struct _GFile*,enum GFileMeasureFlags,struct _GCancellable*,void (*)(int,unsigned long,unsigned long,unsigned long,void*),void*,unsigned long*,unsigned long*,unsigned long*,struct _GError**);
     * }
     */
    public static void measure_disk_usage$set(MemorySegment seg, MemorySegment x) {
        constants$1011.const$1.set(seg, x);
    }
    public static MemorySegment measure_disk_usage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1011.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void measure_disk_usage$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1011.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static measure_disk_usage measure_disk_usage(MemorySegment segment, Arena scope) {
        return measure_disk_usage.ofAddress(measure_disk_usage$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*measure_disk_usage_async)(struct _GFile*,enum GFileMeasureFlags,int,struct _GCancellable*,void (*)(int,unsigned long,unsigned long,unsigned long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface measure_disk_usage_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(measure_disk_usage_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1011.const$3, fi, constants$1011.const$2, scope);
        }
        static measure_disk_usage_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    constants$1011.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle measure_disk_usage_async$VH() {
        return constants$1011.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*measure_disk_usage_async)(struct _GFile*,enum GFileMeasureFlags,int,struct _GCancellable*,void (*)(int,unsigned long,unsigned long,unsigned long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment measure_disk_usage_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1011.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*measure_disk_usage_async)(struct _GFile*,enum GFileMeasureFlags,int,struct _GCancellable*,void (*)(int,unsigned long,unsigned long,unsigned long,void*),void*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void measure_disk_usage_async$set(MemorySegment seg, MemorySegment x) {
        constants$1011.const$5.set(seg, x);
    }
    public static MemorySegment measure_disk_usage_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1011.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void measure_disk_usage_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1011.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static measure_disk_usage_async measure_disk_usage_async(MemorySegment segment, Arena scope) {
        return measure_disk_usage_async.ofAddress(measure_disk_usage_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*measure_disk_usage_finish)(struct _GFile*,struct _GAsyncResult*,unsigned long*,unsigned long*,unsigned long*,struct _GError**);
     * }
     */
    public interface measure_disk_usage_finish {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(measure_disk_usage_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1012.const$0, fi, constants$640.const$4, scope);
        }
        static measure_disk_usage_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$1012.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle measure_disk_usage_finish$VH() {
        return constants$1012.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*measure_disk_usage_finish)(struct _GFile*,struct _GAsyncResult*,unsigned long*,unsigned long*,unsigned long*,struct _GError**);
     * }
     */
    public static MemorySegment measure_disk_usage_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1012.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*measure_disk_usage_finish)(struct _GFile*,struct _GAsyncResult*,unsigned long*,unsigned long*,unsigned long*,struct _GError**);
     * }
     */
    public static void measure_disk_usage_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1012.const$2.set(seg, x);
    }
    public static MemorySegment measure_disk_usage_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1012.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void measure_disk_usage_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1012.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static measure_disk_usage_finish measure_disk_usage_finish(MemorySegment segment, Arena scope) {
        return measure_disk_usage_finish.ofAddress(measure_disk_usage_finish$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


