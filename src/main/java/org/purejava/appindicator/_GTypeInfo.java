// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfShort;

/**
 * {@snippet lang=c :
 * struct _GTypeInfo {
 *     guint16 class_size;
 *     GBaseInitFunc base_init;
 *     GBaseFinalizeFunc base_finalize;
 *     GClassInitFunc class_init;
 *     GClassFinalizeFunc class_finalize;
 *     gconstpointer class_data;
 *     guint16 instance_size;
 *     guint16 n_preallocs;
 *     GInstanceInitFunc instance_init;
 *     const GTypeValueTable *value_table;
 * }
 * }
 */
public class _GTypeInfo {

    _GTypeInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_SHORT.withName("class_size"),
        MemoryLayout.paddingLayout(6),
        app_indicator_h.C_POINTER.withName("base_init"),
        app_indicator_h.C_POINTER.withName("base_finalize"),
        app_indicator_h.C_POINTER.withName("class_init"),
        app_indicator_h.C_POINTER.withName("class_finalize"),
        app_indicator_h.C_POINTER.withName("class_data"),
        app_indicator_h.C_SHORT.withName("instance_size"),
        app_indicator_h.C_SHORT.withName("n_preallocs"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_POINTER.withName("instance_init"),
        app_indicator_h.C_POINTER.withName("value_table")
    ).withName("_GTypeInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort class_size$LAYOUT = (OfShort)$LAYOUT.select(groupElement("class_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint16 class_size
     * }
     */
    public static final OfShort class_size$layout() {
        return class_size$LAYOUT;
    }

    private static final long class_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint16 class_size
     * }
     */
    public static final long class_size$offset() {
        return class_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint16 class_size
     * }
     */
    public static short class_size(MemorySegment struct) {
        return struct.get(class_size$LAYOUT, class_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint16 class_size
     * }
     */
    public static void class_size(MemorySegment struct, short fieldValue) {
        struct.set(class_size$LAYOUT, class_size$OFFSET, fieldValue);
    }

    private static final AddressLayout base_init$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("base_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GBaseInitFunc base_init
     * }
     */
    public static final AddressLayout base_init$layout() {
        return base_init$LAYOUT;
    }

    private static final long base_init$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GBaseInitFunc base_init
     * }
     */
    public static final long base_init$offset() {
        return base_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GBaseInitFunc base_init
     * }
     */
    public static MemorySegment base_init(MemorySegment struct) {
        return struct.get(base_init$LAYOUT, base_init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GBaseInitFunc base_init
     * }
     */
    public static void base_init(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(base_init$LAYOUT, base_init$OFFSET, fieldValue);
    }

    private static final AddressLayout base_finalize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("base_finalize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GBaseFinalizeFunc base_finalize
     * }
     */
    public static final AddressLayout base_finalize$layout() {
        return base_finalize$LAYOUT;
    }

    private static final long base_finalize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GBaseFinalizeFunc base_finalize
     * }
     */
    public static final long base_finalize$offset() {
        return base_finalize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GBaseFinalizeFunc base_finalize
     * }
     */
    public static MemorySegment base_finalize(MemorySegment struct) {
        return struct.get(base_finalize$LAYOUT, base_finalize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GBaseFinalizeFunc base_finalize
     * }
     */
    public static void base_finalize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(base_finalize$LAYOUT, base_finalize$OFFSET, fieldValue);
    }

    private static final AddressLayout class_init$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("class_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GClassInitFunc class_init
     * }
     */
    public static final AddressLayout class_init$layout() {
        return class_init$LAYOUT;
    }

    private static final long class_init$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GClassInitFunc class_init
     * }
     */
    public static final long class_init$offset() {
        return class_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GClassInitFunc class_init
     * }
     */
    public static MemorySegment class_init(MemorySegment struct) {
        return struct.get(class_init$LAYOUT, class_init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GClassInitFunc class_init
     * }
     */
    public static void class_init(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(class_init$LAYOUT, class_init$OFFSET, fieldValue);
    }

    private static final AddressLayout class_finalize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("class_finalize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GClassFinalizeFunc class_finalize
     * }
     */
    public static final AddressLayout class_finalize$layout() {
        return class_finalize$LAYOUT;
    }

    private static final long class_finalize$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GClassFinalizeFunc class_finalize
     * }
     */
    public static final long class_finalize$offset() {
        return class_finalize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GClassFinalizeFunc class_finalize
     * }
     */
    public static MemorySegment class_finalize(MemorySegment struct) {
        return struct.get(class_finalize$LAYOUT, class_finalize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GClassFinalizeFunc class_finalize
     * }
     */
    public static void class_finalize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(class_finalize$LAYOUT, class_finalize$OFFSET, fieldValue);
    }

    private static final AddressLayout class_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("class_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gconstpointer class_data
     * }
     */
    public static final AddressLayout class_data$layout() {
        return class_data$LAYOUT;
    }

    private static final long class_data$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gconstpointer class_data
     * }
     */
    public static final long class_data$offset() {
        return class_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gconstpointer class_data
     * }
     */
    public static MemorySegment class_data(MemorySegment struct) {
        return struct.get(class_data$LAYOUT, class_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gconstpointer class_data
     * }
     */
    public static void class_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(class_data$LAYOUT, class_data$OFFSET, fieldValue);
    }

    private static final OfShort instance_size$LAYOUT = (OfShort)$LAYOUT.select(groupElement("instance_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint16 instance_size
     * }
     */
    public static final OfShort instance_size$layout() {
        return instance_size$LAYOUT;
    }

    private static final long instance_size$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint16 instance_size
     * }
     */
    public static final long instance_size$offset() {
        return instance_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint16 instance_size
     * }
     */
    public static short instance_size(MemorySegment struct) {
        return struct.get(instance_size$LAYOUT, instance_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint16 instance_size
     * }
     */
    public static void instance_size(MemorySegment struct, short fieldValue) {
        struct.set(instance_size$LAYOUT, instance_size$OFFSET, fieldValue);
    }

    private static final OfShort n_preallocs$LAYOUT = (OfShort)$LAYOUT.select(groupElement("n_preallocs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint16 n_preallocs
     * }
     */
    public static final OfShort n_preallocs$layout() {
        return n_preallocs$LAYOUT;
    }

    private static final long n_preallocs$OFFSET = 50;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint16 n_preallocs
     * }
     */
    public static final long n_preallocs$offset() {
        return n_preallocs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint16 n_preallocs
     * }
     */
    public static short n_preallocs(MemorySegment struct) {
        return struct.get(n_preallocs$LAYOUT, n_preallocs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint16 n_preallocs
     * }
     */
    public static void n_preallocs(MemorySegment struct, short fieldValue) {
        struct.set(n_preallocs$LAYOUT, n_preallocs$OFFSET, fieldValue);
    }

    private static final AddressLayout instance_init$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("instance_init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GInstanceInitFunc instance_init
     * }
     */
    public static final AddressLayout instance_init$layout() {
        return instance_init$LAYOUT;
    }

    private static final long instance_init$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GInstanceInitFunc instance_init
     * }
     */
    public static final long instance_init$offset() {
        return instance_init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GInstanceInitFunc instance_init
     * }
     */
    public static MemorySegment instance_init(MemorySegment struct) {
        return struct.get(instance_init$LAYOUT, instance_init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GInstanceInitFunc instance_init
     * }
     */
    public static void instance_init(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(instance_init$LAYOUT, instance_init$OFFSET, fieldValue);
    }

    private static final AddressLayout value_table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("value_table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const GTypeValueTable *value_table
     * }
     */
    public static final AddressLayout value_table$layout() {
        return value_table$LAYOUT;
    }

    private static final long value_table$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const GTypeValueTable *value_table
     * }
     */
    public static final long value_table$offset() {
        return value_table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const GTypeValueTable *value_table
     * }
     */
    public static MemorySegment value_table(MemorySegment struct) {
        return struct.get(value_table$LAYOUT, value_table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const GTypeValueTable *value_table
     * }
     */
    public static void value_table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(value_table$LAYOUT, value_table$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

