// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GMemoryMonitorInterface {
 *     struct _GTypeInterface g_iface;
 *     void (*low_memory_warning)(struct _GMemoryMonitor*,enum GMemoryMonitorWarningLevel);
 * };
 * }
 */
public class _GMemoryMonitorInterface {

    public static MemoryLayout $LAYOUT() {
        return constants$1140.const$2;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*low_memory_warning)(struct _GMemoryMonitor*,enum GMemoryMonitorWarningLevel);
     * }
     */
    public interface low_memory_warning {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(low_memory_warning fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1140.const$3, fi, constants$40.const$2, scope);
        }
        static low_memory_warning ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle low_memory_warning$VH() {
        return constants$1140.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*low_memory_warning)(struct _GMemoryMonitor*,enum GMemoryMonitorWarningLevel);
     * }
     */
    public static MemorySegment low_memory_warning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1140.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*low_memory_warning)(struct _GMemoryMonitor*,enum GMemoryMonitorWarningLevel);
     * }
     */
    public static void low_memory_warning$set(MemorySegment seg, MemorySegment x) {
        constants$1140.const$4.set(seg, x);
    }
    public static MemorySegment low_memory_warning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1140.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void low_memory_warning$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1140.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static low_memory_warning low_memory_warning(MemorySegment segment, Arena scope) {
        return low_memory_warning.ofAddress(low_memory_warning$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


