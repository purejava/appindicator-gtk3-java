// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.foreign.*;

final class constants$33 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$33() {}
    static final FunctionDescriptor g_atomic_pointer_add$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle g_atomic_pointer_add$MH = RuntimeHelper.downcallHandle(
        "g_atomic_pointer_add",
        constants$33.g_atomic_pointer_add$FUNC
    );
    static final FunctionDescriptor g_atomic_pointer_and$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle g_atomic_pointer_and$MH = RuntimeHelper.downcallHandle(
        "g_atomic_pointer_and",
        constants$33.g_atomic_pointer_and$FUNC
    );
    static final FunctionDescriptor g_atomic_pointer_or$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle g_atomic_pointer_or$MH = RuntimeHelper.downcallHandle(
        "g_atomic_pointer_or",
        constants$33.g_atomic_pointer_or$FUNC
    );
    static final FunctionDescriptor g_atomic_pointer_xor$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle g_atomic_pointer_xor$MH = RuntimeHelper.downcallHandle(
        "g_atomic_pointer_xor",
        constants$33.g_atomic_pointer_xor$FUNC
    );
    static final FunctionDescriptor g_atomic_int_exchange_and_add$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle g_atomic_int_exchange_and_add$MH = RuntimeHelper.downcallHandle(
        "g_atomic_int_exchange_and_add",
        constants$33.g_atomic_int_exchange_and_add$FUNC
    );
    static final FunctionDescriptor g_quark_try_string$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_quark_try_string$MH = RuntimeHelper.downcallHandle(
        "g_quark_try_string",
        constants$33.g_quark_try_string$FUNC
    );
}


