// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GProxyInterface {
 *     GTypeInterface g_iface;
 *     GIOStream *(*connect)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GError **);
 *     void (*connect_async)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GAsyncReadyCallback, gpointer);
 *     GIOStream *(*connect_finish)(GProxy *, GAsyncResult *, GError **);
 *     gboolean (*supports_hostname)(GProxy *);
 * }
 * }
 */
public class _GProxyInterface {

    _GProxyInterface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInterface.layout().withName("g_iface"),
        app_indicator_h.C_POINTER.withName("connect"),
        app_indicator_h.C_POINTER.withName("connect_async"),
        app_indicator_h.C_POINTER.withName("connect_finish"),
        app_indicator_h.C_POINTER.withName("supports_hostname")
    ).withName("_GProxyInterface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout g_iface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("g_iface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final GroupLayout g_iface$layout() {
        return g_iface$LAYOUT;
    }

    private static final long g_iface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final long g_iface$offset() {
        return g_iface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static MemorySegment g_iface(MemorySegment struct) {
        return struct.asSlice(g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static void g_iface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * GIOStream *(*connect)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GError **)
     * }
     */
    public class connect {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(connect.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(connect.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout connect$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("connect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GIOStream *(*connect)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GError **)
     * }
     */
    public static final AddressLayout connect$layout() {
        return connect$LAYOUT;
    }

    private static final long connect$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GIOStream *(*connect)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GError **)
     * }
     */
    public static final long connect$offset() {
        return connect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GIOStream *(*connect)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GError **)
     * }
     */
    public static MemorySegment connect(MemorySegment struct) {
        return struct.get(connect$LAYOUT, connect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GIOStream *(*connect)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GError **)
     * }
     */
    public static void connect(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(connect$LAYOUT, connect$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*connect_async)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class connect_async {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(connect_async.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(connect_async.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout connect_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("connect_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*connect_async)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout connect_async$layout() {
        return connect_async$LAYOUT;
    }

    private static final long connect_async$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*connect_async)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long connect_async$offset() {
        return connect_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*connect_async)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment connect_async(MemorySegment struct) {
        return struct.get(connect_async$LAYOUT, connect_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*connect_async)(GProxy *, GIOStream *, GProxyAddress *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void connect_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(connect_async$LAYOUT, connect_async$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GIOStream *(*connect_finish)(GProxy *, GAsyncResult *, GError **)
     * }
     */
    public class connect_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(connect_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(connect_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout connect_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("connect_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GIOStream *(*connect_finish)(GProxy *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout connect_finish$layout() {
        return connect_finish$LAYOUT;
    }

    private static final long connect_finish$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GIOStream *(*connect_finish)(GProxy *, GAsyncResult *, GError **)
     * }
     */
    public static final long connect_finish$offset() {
        return connect_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GIOStream *(*connect_finish)(GProxy *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment connect_finish(MemorySegment struct) {
        return struct.get(connect_finish$LAYOUT, connect_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GIOStream *(*connect_finish)(GProxy *, GAsyncResult *, GError **)
     * }
     */
    public static void connect_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(connect_finish$LAYOUT, connect_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*supports_hostname)(GProxy *)
     * }
     */
    public class supports_hostname {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(supports_hostname.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(supports_hostname.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout supports_hostname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("supports_hostname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*supports_hostname)(GProxy *)
     * }
     */
    public static final AddressLayout supports_hostname$layout() {
        return supports_hostname$LAYOUT;
    }

    private static final long supports_hostname$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*supports_hostname)(GProxy *)
     * }
     */
    public static final long supports_hostname$offset() {
        return supports_hostname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*supports_hostname)(GProxy *)
     * }
     */
    public static MemorySegment supports_hostname(MemorySegment struct) {
        return struct.get(supports_hostname$LAYOUT, supports_hostname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*supports_hostname)(GProxy *)
     * }
     */
    public static void supports_hostname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(supports_hostname$LAYOUT, supports_hostname$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

