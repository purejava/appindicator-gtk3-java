// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * void (*g_log_set_default_handler$return)(char*,enum GLogLevelFlags,char*,void*);
 * }
 */
public interface g_log_set_default_handler$return {

    void apply(java.lang.foreign.MemorySegment log_domain, int log_level, java.lang.foreign.MemorySegment message, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(g_log_set_default_handler$return fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$375.const$1, fi, constants$179.const$1, scope);
    }
    static g_log_set_default_handler$return ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _log_domain, int _log_level, java.lang.foreign.MemorySegment _message, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                constants$373.const$3.invokeExact(symbol, _log_domain, _log_level, _message, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


