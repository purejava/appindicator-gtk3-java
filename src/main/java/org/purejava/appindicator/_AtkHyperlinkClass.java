// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _AtkHyperlinkClass {
 *     GObjectClass parent;
 *     gchar* (*get_uri)(AtkHyperlink*,gint);
 *     AtkObject* (*get_object)(AtkHyperlink*,gint);
 *     gint (*get_end_index)(AtkHyperlink*);
 *     gint (*get_start_index)(AtkHyperlink*);
 *     gboolean (*is_valid)(AtkHyperlink*);
 *     gint (*get_n_anchors)(AtkHyperlink*);
 *     guint (*link_state)(AtkHyperlink*);
 *     gboolean (*is_selected_link)(AtkHyperlink*);
 *     void (*link_activated)(AtkHyperlink*);
 *     AtkFunction pad1;
 * };
 * }
 */
public class _AtkHyperlinkClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_uri"),
        Constants$root.C_POINTER$LAYOUT.withName("get_object"),
        Constants$root.C_POINTER$LAYOUT.withName("get_end_index"),
        Constants$root.C_POINTER$LAYOUT.withName("get_start_index"),
        Constants$root.C_POINTER$LAYOUT.withName("is_valid"),
        Constants$root.C_POINTER$LAYOUT.withName("get_n_anchors"),
        Constants$root.C_POINTER$LAYOUT.withName("link_state"),
        Constants$root.C_POINTER$LAYOUT.withName("is_selected_link"),
        Constants$root.C_POINTER$LAYOUT.withName("link_activated"),
        Constants$root.C_POINTER$LAYOUT.withName("pad1")
    ).withName("_AtkHyperlinkClass");
    public static MemoryLayout $LAYOUT() {
        return _AtkHyperlinkClass.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor get_uri$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor get_uri_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_uri_UP$MH = RuntimeHelper.upcallHandle(get_uri.class, "apply", _AtkHyperlinkClass.get_uri_UP$FUNC);
    static final FunctionDescriptor get_uri_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_uri_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkHyperlinkClass.get_uri_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gchar* (*get_uri)(AtkHyperlink*,gint);
     * }
     */
    public interface get_uri {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_uri fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkHyperlinkClass.get_uri_UP$MH, fi, _AtkHyperlinkClass.get_uri$FUNC, scope);
        }
        static get_uri ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_uri_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_uri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_uri"));
    public static VarHandle get_uri$VH() {
        return _AtkHyperlinkClass.get_uri$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* (*get_uri)(AtkHyperlink*,gint);
     * }
     */
    public static MemorySegment get_uri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_uri$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* (*get_uri)(AtkHyperlink*,gint);
     * }
     */
    public static void get_uri$set(MemorySegment seg, MemorySegment x) {
        _AtkHyperlinkClass.get_uri$VH.set(seg, x);
    }
    public static MemorySegment get_uri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_uri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uri$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkHyperlinkClass.get_uri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uri get_uri(MemorySegment segment, SegmentScope scope) {
        return get_uri.ofAddress(get_uri$get(segment), scope);
    }
    static final FunctionDescriptor get_object$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor get_object_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_object_UP$MH = RuntimeHelper.upcallHandle(get_object.class, "apply", _AtkHyperlinkClass.get_object_UP$FUNC);
    static final FunctionDescriptor get_object_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_object_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkHyperlinkClass.get_object_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkObject* (*get_object)(AtkHyperlink*,gint);
     * }
     */
    public interface get_object {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_object fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkHyperlinkClass.get_object_UP$MH, fi, _AtkHyperlinkClass.get_object$FUNC, scope);
        }
        static get_object ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_object_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_object$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_object"));
    public static VarHandle get_object$VH() {
        return _AtkHyperlinkClass.get_object$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkObject* (*get_object)(AtkHyperlink*,gint);
     * }
     */
    public static MemorySegment get_object$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_object$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkObject* (*get_object)(AtkHyperlink*,gint);
     * }
     */
    public static void get_object$set(MemorySegment seg, MemorySegment x) {
        _AtkHyperlinkClass.get_object$VH.set(seg, x);
    }
    public static MemorySegment get_object$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_object$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_object$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkHyperlinkClass.get_object$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_object get_object(MemorySegment segment, SegmentScope scope) {
        return get_object.ofAddress(get_object$get(segment), scope);
    }
    static final FunctionDescriptor get_end_index$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_end_index_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_end_index_UP$MH = RuntimeHelper.upcallHandle(get_end_index.class, "apply", _AtkHyperlinkClass.get_end_index_UP$FUNC);
    static final FunctionDescriptor get_end_index_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_end_index_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkHyperlinkClass.get_end_index_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*get_end_index)(AtkHyperlink*);
     * }
     */
    public interface get_end_index {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_end_index fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkHyperlinkClass.get_end_index_UP$MH, fi, _AtkHyperlinkClass.get_end_index$FUNC, scope);
        }
        static get_end_index ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkHyperlinkClass.get_end_index_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_end_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_end_index"));
    public static VarHandle get_end_index$VH() {
        return _AtkHyperlinkClass.get_end_index$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*get_end_index)(AtkHyperlink*);
     * }
     */
    public static MemorySegment get_end_index$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_end_index$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*get_end_index)(AtkHyperlink*);
     * }
     */
    public static void get_end_index$set(MemorySegment seg, MemorySegment x) {
        _AtkHyperlinkClass.get_end_index$VH.set(seg, x);
    }
    public static MemorySegment get_end_index$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_end_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_end_index$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkHyperlinkClass.get_end_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_end_index get_end_index(MemorySegment segment, SegmentScope scope) {
        return get_end_index.ofAddress(get_end_index$get(segment), scope);
    }
    static final FunctionDescriptor get_start_index$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_start_index_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_start_index_UP$MH = RuntimeHelper.upcallHandle(get_start_index.class, "apply", _AtkHyperlinkClass.get_start_index_UP$FUNC);
    static final FunctionDescriptor get_start_index_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_start_index_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkHyperlinkClass.get_start_index_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*get_start_index)(AtkHyperlink*);
     * }
     */
    public interface get_start_index {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_start_index fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkHyperlinkClass.get_start_index_UP$MH, fi, _AtkHyperlinkClass.get_start_index$FUNC, scope);
        }
        static get_start_index ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkHyperlinkClass.get_start_index_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_start_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_start_index"));
    public static VarHandle get_start_index$VH() {
        return _AtkHyperlinkClass.get_start_index$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*get_start_index)(AtkHyperlink*);
     * }
     */
    public static MemorySegment get_start_index$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_start_index$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*get_start_index)(AtkHyperlink*);
     * }
     */
    public static void get_start_index$set(MemorySegment seg, MemorySegment x) {
        _AtkHyperlinkClass.get_start_index$VH.set(seg, x);
    }
    public static MemorySegment get_start_index$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_start_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_start_index$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkHyperlinkClass.get_start_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_start_index get_start_index(MemorySegment segment, SegmentScope scope) {
        return get_start_index.ofAddress(get_start_index$get(segment), scope);
    }
    static final FunctionDescriptor is_valid$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor is_valid_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_valid_UP$MH = RuntimeHelper.upcallHandle(is_valid.class, "apply", _AtkHyperlinkClass.is_valid_UP$FUNC);
    static final FunctionDescriptor is_valid_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_valid_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkHyperlinkClass.is_valid_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*is_valid)(AtkHyperlink*);
     * }
     */
    public interface is_valid {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(is_valid fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkHyperlinkClass.is_valid_UP$MH, fi, _AtkHyperlinkClass.is_valid$FUNC, scope);
        }
        static is_valid ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkHyperlinkClass.is_valid_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_valid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_valid"));
    public static VarHandle is_valid$VH() {
        return _AtkHyperlinkClass.is_valid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*is_valid)(AtkHyperlink*);
     * }
     */
    public static MemorySegment is_valid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.is_valid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*is_valid)(AtkHyperlink*);
     * }
     */
    public static void is_valid$set(MemorySegment seg, MemorySegment x) {
        _AtkHyperlinkClass.is_valid$VH.set(seg, x);
    }
    public static MemorySegment is_valid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.is_valid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_valid$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkHyperlinkClass.is_valid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_valid is_valid(MemorySegment segment, SegmentScope scope) {
        return is_valid.ofAddress(is_valid$get(segment), scope);
    }
    static final FunctionDescriptor get_n_anchors$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_n_anchors_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_anchors_UP$MH = RuntimeHelper.upcallHandle(get_n_anchors.class, "apply", _AtkHyperlinkClass.get_n_anchors_UP$FUNC);
    static final FunctionDescriptor get_n_anchors_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_anchors_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkHyperlinkClass.get_n_anchors_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*get_n_anchors)(AtkHyperlink*);
     * }
     */
    public interface get_n_anchors {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_n_anchors fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkHyperlinkClass.get_n_anchors_UP$MH, fi, _AtkHyperlinkClass.get_n_anchors$FUNC, scope);
        }
        static get_n_anchors ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkHyperlinkClass.get_n_anchors_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_n_anchors$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_n_anchors"));
    public static VarHandle get_n_anchors$VH() {
        return _AtkHyperlinkClass.get_n_anchors$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*get_n_anchors)(AtkHyperlink*);
     * }
     */
    public static MemorySegment get_n_anchors$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_n_anchors$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*get_n_anchors)(AtkHyperlink*);
     * }
     */
    public static void get_n_anchors$set(MemorySegment seg, MemorySegment x) {
        _AtkHyperlinkClass.get_n_anchors$VH.set(seg, x);
    }
    public static MemorySegment get_n_anchors$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.get_n_anchors$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_anchors$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkHyperlinkClass.get_n_anchors$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_anchors get_n_anchors(MemorySegment segment, SegmentScope scope) {
        return get_n_anchors.ofAddress(get_n_anchors$get(segment), scope);
    }
    static final FunctionDescriptor link_state$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor link_state_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle link_state_UP$MH = RuntimeHelper.upcallHandle(link_state.class, "apply", _AtkHyperlinkClass.link_state_UP$FUNC);
    static final FunctionDescriptor link_state_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle link_state_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkHyperlinkClass.link_state_DOWN$FUNC
    );
    /**
     * {@snippet :
 * guint (*link_state)(AtkHyperlink*);
     * }
     */
    public interface link_state {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(link_state fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkHyperlinkClass.link_state_UP$MH, fi, _AtkHyperlinkClass.link_state$FUNC, scope);
        }
        static link_state ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkHyperlinkClass.link_state_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle link_state$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("link_state"));
    public static VarHandle link_state$VH() {
        return _AtkHyperlinkClass.link_state$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint (*link_state)(AtkHyperlink*);
     * }
     */
    public static MemorySegment link_state$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.link_state$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint (*link_state)(AtkHyperlink*);
     * }
     */
    public static void link_state$set(MemorySegment seg, MemorySegment x) {
        _AtkHyperlinkClass.link_state$VH.set(seg, x);
    }
    public static MemorySegment link_state$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.link_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void link_state$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkHyperlinkClass.link_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static link_state link_state(MemorySegment segment, SegmentScope scope) {
        return link_state.ofAddress(link_state$get(segment), scope);
    }
    static final FunctionDescriptor is_selected_link$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor is_selected_link_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_selected_link_UP$MH = RuntimeHelper.upcallHandle(is_selected_link.class, "apply", _AtkHyperlinkClass.is_selected_link_UP$FUNC);
    static final FunctionDescriptor is_selected_link_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_selected_link_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkHyperlinkClass.is_selected_link_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*is_selected_link)(AtkHyperlink*);
     * }
     */
    public interface is_selected_link {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(is_selected_link fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkHyperlinkClass.is_selected_link_UP$MH, fi, _AtkHyperlinkClass.is_selected_link$FUNC, scope);
        }
        static is_selected_link ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkHyperlinkClass.is_selected_link_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_selected_link$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_selected_link"));
    public static VarHandle is_selected_link$VH() {
        return _AtkHyperlinkClass.is_selected_link$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*is_selected_link)(AtkHyperlink*);
     * }
     */
    public static MemorySegment is_selected_link$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.is_selected_link$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*is_selected_link)(AtkHyperlink*);
     * }
     */
    public static void is_selected_link$set(MemorySegment seg, MemorySegment x) {
        _AtkHyperlinkClass.is_selected_link$VH.set(seg, x);
    }
    public static MemorySegment is_selected_link$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.is_selected_link$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_selected_link$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkHyperlinkClass.is_selected_link$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_selected_link is_selected_link(MemorySegment segment, SegmentScope scope) {
        return is_selected_link.ofAddress(is_selected_link$get(segment), scope);
    }
    static final FunctionDescriptor link_activated$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor link_activated_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle link_activated_UP$MH = RuntimeHelper.upcallHandle(link_activated.class, "apply", _AtkHyperlinkClass.link_activated_UP$FUNC);
    static final FunctionDescriptor link_activated_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle link_activated_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkHyperlinkClass.link_activated_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*link_activated)(AtkHyperlink*);
     * }
     */
    public interface link_activated {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(link_activated fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkHyperlinkClass.link_activated_UP$MH, fi, _AtkHyperlinkClass.link_activated$FUNC, scope);
        }
        static link_activated ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _AtkHyperlinkClass.link_activated_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle link_activated$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("link_activated"));
    public static VarHandle link_activated$VH() {
        return _AtkHyperlinkClass.link_activated$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*link_activated)(AtkHyperlink*);
     * }
     */
    public static MemorySegment link_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.link_activated$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*link_activated)(AtkHyperlink*);
     * }
     */
    public static void link_activated$set(MemorySegment seg, MemorySegment x) {
        _AtkHyperlinkClass.link_activated$VH.set(seg, x);
    }
    public static MemorySegment link_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.link_activated$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void link_activated$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkHyperlinkClass.link_activated$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static link_activated link_activated(MemorySegment segment, SegmentScope scope) {
        return link_activated.ofAddress(link_activated$get(segment), scope);
    }
    static final VarHandle pad1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pad1"));
    public static VarHandle pad1$VH() {
        return _AtkHyperlinkClass.pad1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkFunction pad1;
     * }
     */
    public static MemorySegment pad1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.pad1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkFunction pad1;
     * }
     */
    public static void pad1$set(MemorySegment seg, MemorySegment x) {
        _AtkHyperlinkClass.pad1$VH.set(seg, x);
    }
    public static MemorySegment pad1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkHyperlinkClass.pad1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pad1$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkHyperlinkClass.pad1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AtkFunction pad1(MemorySegment segment, SegmentScope scope) {
        return AtkFunction.ofAddress(pad1$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


