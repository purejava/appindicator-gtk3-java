// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _AtkHyperlinkClass {
 *     struct _GObjectClass parent;
 *     char* (*get_uri)(struct _AtkHyperlink*,int);
 *     struct _AtkObject* (*get_object)(struct _AtkHyperlink*,int);
 *     int (*get_end_index)(struct _AtkHyperlink*);
 *     int (*get_start_index)(struct _AtkHyperlink*);
 *     int (*is_valid)(struct _AtkHyperlink*);
 *     int (*get_n_anchors)(struct _AtkHyperlink*);
 *     unsigned int (*link_state)(struct _AtkHyperlink*);
 *     int (*is_selected_link)(struct _AtkHyperlink*);
 *     void (*link_activated)(struct _AtkHyperlink*);
 *     int (*pad1)(void*);
 * };
 * }
 */
public class _AtkHyperlinkClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2030.const$1;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * char* (*get_uri)(struct _AtkHyperlink*,int);
     * }
     */
    public interface get_uri {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_uri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2030.const$2, fi, constants$21.const$3, scope);
        }
        static get_uri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$318.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_uri$VH() {
        return constants$2030.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_uri)(struct _AtkHyperlink*,int);
     * }
     */
    public static MemorySegment get_uri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2030.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_uri)(struct _AtkHyperlink*,int);
     * }
     */
    public static void get_uri$set(MemorySegment seg, MemorySegment x) {
        constants$2030.const$3.set(seg, x);
    }
    public static MemorySegment get_uri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2030.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2030.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uri get_uri(MemorySegment segment, Arena scope) {
        return get_uri.ofAddress(get_uri$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*get_object)(struct _AtkHyperlink*,int);
     * }
     */
    public interface get_object {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_object fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2030.const$4, fi, constants$21.const$3, scope);
        }
        static get_object ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$318.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_object$VH() {
        return constants$2030.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*get_object)(struct _AtkHyperlink*,int);
     * }
     */
    public static MemorySegment get_object$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2030.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*get_object)(struct _AtkHyperlink*,int);
     * }
     */
    public static void get_object$set(MemorySegment seg, MemorySegment x) {
        constants$2030.const$5.set(seg, x);
    }
    public static MemorySegment get_object$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2030.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_object$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2030.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_object get_object(MemorySegment segment, Arena scope) {
        return get_object.ofAddress(get_object$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_end_index)(struct _AtkHyperlink*);
     * }
     */
    public interface get_end_index {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_end_index fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2031.const$0, fi, constants$10.const$5, scope);
        }
        static get_end_index ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_end_index$VH() {
        return constants$2031.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_end_index)(struct _AtkHyperlink*);
     * }
     */
    public static MemorySegment get_end_index$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2031.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_end_index)(struct _AtkHyperlink*);
     * }
     */
    public static void get_end_index$set(MemorySegment seg, MemorySegment x) {
        constants$2031.const$1.set(seg, x);
    }
    public static MemorySegment get_end_index$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2031.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_end_index$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2031.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_end_index get_end_index(MemorySegment segment, Arena scope) {
        return get_end_index.ofAddress(get_end_index$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_start_index)(struct _AtkHyperlink*);
     * }
     */
    public interface get_start_index {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_start_index fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2031.const$2, fi, constants$10.const$5, scope);
        }
        static get_start_index ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_start_index$VH() {
        return constants$2031.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_start_index)(struct _AtkHyperlink*);
     * }
     */
    public static MemorySegment get_start_index$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2031.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_start_index)(struct _AtkHyperlink*);
     * }
     */
    public static void get_start_index$set(MemorySegment seg, MemorySegment x) {
        constants$2031.const$3.set(seg, x);
    }
    public static MemorySegment get_start_index$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2031.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_start_index$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2031.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_start_index get_start_index(MemorySegment segment, Arena scope) {
        return get_start_index.ofAddress(get_start_index$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*is_valid)(struct _AtkHyperlink*);
     * }
     */
    public interface is_valid {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(is_valid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2031.const$4, fi, constants$10.const$5, scope);
        }
        static is_valid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_valid$VH() {
        return constants$2031.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_valid)(struct _AtkHyperlink*);
     * }
     */
    public static MemorySegment is_valid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2031.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_valid)(struct _AtkHyperlink*);
     * }
     */
    public static void is_valid$set(MemorySegment seg, MemorySegment x) {
        constants$2031.const$5.set(seg, x);
    }
    public static MemorySegment is_valid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2031.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void is_valid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2031.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_valid is_valid(MemorySegment segment, Arena scope) {
        return is_valid.ofAddress(is_valid$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_n_anchors)(struct _AtkHyperlink*);
     * }
     */
    public interface get_n_anchors {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_n_anchors fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2032.const$0, fi, constants$10.const$5, scope);
        }
        static get_n_anchors ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_n_anchors$VH() {
        return constants$2032.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_n_anchors)(struct _AtkHyperlink*);
     * }
     */
    public static MemorySegment get_n_anchors$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2032.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_n_anchors)(struct _AtkHyperlink*);
     * }
     */
    public static void get_n_anchors$set(MemorySegment seg, MemorySegment x) {
        constants$2032.const$1.set(seg, x);
    }
    public static MemorySegment get_n_anchors$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2032.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_anchors$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2032.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_anchors get_n_anchors(MemorySegment segment, Arena scope) {
        return get_n_anchors.ofAddress(get_n_anchors$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned int (*link_state)(struct _AtkHyperlink*);
     * }
     */
    public interface link_state {

        int apply(java.lang.foreign.MemorySegment key);
        static MemorySegment allocate(link_state fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2032.const$2, fi, constants$10.const$5, scope);
        }
        static link_state ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _key);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle link_state$VH() {
        return constants$2032.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int (*link_state)(struct _AtkHyperlink*);
     * }
     */
    public static MemorySegment link_state$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2032.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int (*link_state)(struct _AtkHyperlink*);
     * }
     */
    public static void link_state$set(MemorySegment seg, MemorySegment x) {
        constants$2032.const$3.set(seg, x);
    }
    public static MemorySegment link_state$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2032.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void link_state$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2032.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static link_state link_state(MemorySegment segment, Arena scope) {
        return link_state.ofAddress(link_state$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*is_selected_link)(struct _AtkHyperlink*);
     * }
     */
    public interface is_selected_link {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(is_selected_link fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2032.const$4, fi, constants$10.const$5, scope);
        }
        static is_selected_link ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_selected_link$VH() {
        return constants$2032.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_selected_link)(struct _AtkHyperlink*);
     * }
     */
    public static MemorySegment is_selected_link$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2032.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_selected_link)(struct _AtkHyperlink*);
     * }
     */
    public static void is_selected_link$set(MemorySegment seg, MemorySegment x) {
        constants$2032.const$5.set(seg, x);
    }
    public static MemorySegment is_selected_link$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2032.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void is_selected_link$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2032.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_selected_link is_selected_link(MemorySegment segment, Arena scope) {
        return is_selected_link.ofAddress(is_selected_link$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*link_activated)(struct _AtkHyperlink*);
     * }
     */
    public interface link_activated {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(link_activated fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2033.const$0, fi, constants$13.const$1, scope);
        }
        static link_activated ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle link_activated$VH() {
        return constants$2033.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*link_activated)(struct _AtkHyperlink*);
     * }
     */
    public static MemorySegment link_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2033.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*link_activated)(struct _AtkHyperlink*);
     * }
     */
    public static void link_activated$set(MemorySegment seg, MemorySegment x) {
        constants$2033.const$1.set(seg, x);
    }
    public static MemorySegment link_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2033.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void link_activated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2033.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static link_activated link_activated(MemorySegment segment, Arena scope) {
        return link_activated.ofAddress(link_activated$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*pad1)(void*);
     * }
     */
    public interface pad1 {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(pad1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2033.const$2, fi, constants$10.const$5, scope);
        }
        static pad1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pad1$VH() {
        return constants$2033.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*pad1)(void*);
     * }
     */
    public static MemorySegment pad1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2033.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*pad1)(void*);
     * }
     */
    public static void pad1$set(MemorySegment seg, MemorySegment x) {
        constants$2033.const$3.set(seg, x);
    }
    public static MemorySegment pad1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2033.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pad1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2033.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static pad1 pad1(MemorySegment segment, Arena scope) {
        return pad1.ofAddress(pad1$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


