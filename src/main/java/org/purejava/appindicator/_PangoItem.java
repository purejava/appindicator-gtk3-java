// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _PangoItem {
 *     int offset;
 *     int length;
 *     int num_chars;
 *     PangoAnalysis analysis;
 * };
 * }
 */
public class _PangoItem {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("offset"),
        Constants$root.C_INT$LAYOUT.withName("length"),
        Constants$root.C_INT$LAYOUT.withName("num_chars"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("shape_engine"),
            Constants$root.C_POINTER$LAYOUT.withName("lang_engine"),
            Constants$root.C_POINTER$LAYOUT.withName("font"),
            Constants$root.C_CHAR$LAYOUT.withName("level"),
            Constants$root.C_CHAR$LAYOUT.withName("gravity"),
            Constants$root.C_CHAR$LAYOUT.withName("flags"),
            Constants$root.C_CHAR$LAYOUT.withName("script"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("language"),
            Constants$root.C_POINTER$LAYOUT.withName("extra_attrs")
        ).withName("analysis")
    ).withName("_PangoItem");
    public static MemoryLayout $LAYOUT() {
        return _PangoItem.$struct$LAYOUT;
    }
    static final VarHandle offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("offset"));
    public static VarHandle offset$VH() {
        return _PangoItem.offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int offset;
     * }
     */
    public static int offset$get(MemorySegment seg) {
        return (int)_PangoItem.offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int offset;
     * }
     */
    public static void offset$set(MemorySegment seg, int x) {
        _PangoItem.offset$VH.set(seg, x);
    }
    public static int offset$get(MemorySegment seg, long index) {
        return (int)_PangoItem.offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, int x) {
        _PangoItem.offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return _PangoItem.length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int length;
     * }
     */
    public static int length$get(MemorySegment seg) {
        return (int)_PangoItem.length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int length;
     * }
     */
    public static void length$set(MemorySegment seg, int x) {
        _PangoItem.length$VH.set(seg, x);
    }
    public static int length$get(MemorySegment seg, long index) {
        return (int)_PangoItem.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, int x) {
        _PangoItem.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_chars$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_chars"));
    public static VarHandle num_chars$VH() {
        return _PangoItem.num_chars$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int num_chars;
     * }
     */
    public static int num_chars$get(MemorySegment seg) {
        return (int)_PangoItem.num_chars$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int num_chars;
     * }
     */
    public static void num_chars$set(MemorySegment seg, int x) {
        _PangoItem.num_chars$VH.set(seg, x);
    }
    public static int num_chars$get(MemorySegment seg, long index) {
        return (int)_PangoItem.num_chars$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_chars$set(MemorySegment seg, long index, int x) {
        _PangoItem.num_chars$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment analysis$slice(MemorySegment seg) {
        return seg.asSlice(16, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


