// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkFontChooserIface {
 *     GTypeInterface base_iface;
 *     PangoFontFamily *(*get_font_family)(GtkFontChooser *);
 *     PangoFontFace *(*get_font_face)(GtkFontChooser *);
 *     gint (*get_font_size)(GtkFontChooser *);
 *     void (*set_filter_func)(GtkFontChooser *, GtkFontFilterFunc, gpointer, GDestroyNotify);
 *     void (*font_activated)(GtkFontChooser *, const gchar *);
 *     void (*set_font_map)(GtkFontChooser *, PangoFontMap *);
 *     PangoFontMap *(*get_font_map)(GtkFontChooser *);
 *     gpointer padding[10];
 * }
 * }
 */
public class _GtkFontChooserIface {

    _GtkFontChooserIface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInterface.layout().withName("base_iface"),
        app_indicator_h.C_POINTER.withName("get_font_family"),
        app_indicator_h.C_POINTER.withName("get_font_face"),
        app_indicator_h.C_POINTER.withName("get_font_size"),
        app_indicator_h.C_POINTER.withName("set_filter_func"),
        app_indicator_h.C_POINTER.withName("font_activated"),
        app_indicator_h.C_POINTER.withName("set_font_map"),
        app_indicator_h.C_POINTER.withName("get_font_map"),
        MemoryLayout.sequenceLayout(10, app_indicator_h.C_POINTER).withName("padding")
    ).withName("_GtkFontChooserIface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout base_iface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("base_iface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInterface base_iface
     * }
     */
    public static final GroupLayout base_iface$layout() {
        return base_iface$LAYOUT;
    }

    private static final long base_iface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInterface base_iface
     * }
     */
    public static final long base_iface$offset() {
        return base_iface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInterface base_iface
     * }
     */
    public static MemorySegment base_iface(MemorySegment struct) {
        return struct.asSlice(base_iface$OFFSET, base_iface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInterface base_iface
     * }
     */
    public static void base_iface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, base_iface$OFFSET, base_iface$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * PangoFontFamily *(*get_font_family)(GtkFontChooser *)
     * }
     */
    public class get_font_family {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_font_family.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_font_family.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_font_family$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_font_family"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PangoFontFamily *(*get_font_family)(GtkFontChooser *)
     * }
     */
    public static final AddressLayout get_font_family$layout() {
        return get_font_family$LAYOUT;
    }

    private static final long get_font_family$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PangoFontFamily *(*get_font_family)(GtkFontChooser *)
     * }
     */
    public static final long get_font_family$offset() {
        return get_font_family$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PangoFontFamily *(*get_font_family)(GtkFontChooser *)
     * }
     */
    public static MemorySegment get_font_family(MemorySegment struct) {
        return struct.get(get_font_family$LAYOUT, get_font_family$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PangoFontFamily *(*get_font_family)(GtkFontChooser *)
     * }
     */
    public static void get_font_family(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_font_family$LAYOUT, get_font_family$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * PangoFontFace *(*get_font_face)(GtkFontChooser *)
     * }
     */
    public class get_font_face {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_font_face.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_font_face.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_font_face$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_font_face"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PangoFontFace *(*get_font_face)(GtkFontChooser *)
     * }
     */
    public static final AddressLayout get_font_face$layout() {
        return get_font_face$LAYOUT;
    }

    private static final long get_font_face$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PangoFontFace *(*get_font_face)(GtkFontChooser *)
     * }
     */
    public static final long get_font_face$offset() {
        return get_font_face$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PangoFontFace *(*get_font_face)(GtkFontChooser *)
     * }
     */
    public static MemorySegment get_font_face(MemorySegment struct) {
        return struct.get(get_font_face$LAYOUT, get_font_face$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PangoFontFace *(*get_font_face)(GtkFontChooser *)
     * }
     */
    public static void get_font_face(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_font_face$LAYOUT, get_font_face$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gint (*get_font_size)(GtkFontChooser *)
     * }
     */
    public class get_font_size {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_font_size.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_font_size.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_font_size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_font_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint (*get_font_size)(GtkFontChooser *)
     * }
     */
    public static final AddressLayout get_font_size$layout() {
        return get_font_size$LAYOUT;
    }

    private static final long get_font_size$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint (*get_font_size)(GtkFontChooser *)
     * }
     */
    public static final long get_font_size$offset() {
        return get_font_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint (*get_font_size)(GtkFontChooser *)
     * }
     */
    public static MemorySegment get_font_size(MemorySegment struct) {
        return struct.get(get_font_size$LAYOUT, get_font_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint (*get_font_size)(GtkFontChooser *)
     * }
     */
    public static void get_font_size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_font_size$LAYOUT, get_font_size$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_filter_func)(GtkFontChooser *, GtkFontFilterFunc, gpointer, GDestroyNotify)
     * }
     */
    public class set_filter_func {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(set_filter_func.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_filter_func.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_filter_func$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_filter_func"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_filter_func)(GtkFontChooser *, GtkFontFilterFunc, gpointer, GDestroyNotify)
     * }
     */
    public static final AddressLayout set_filter_func$layout() {
        return set_filter_func$LAYOUT;
    }

    private static final long set_filter_func$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_filter_func)(GtkFontChooser *, GtkFontFilterFunc, gpointer, GDestroyNotify)
     * }
     */
    public static final long set_filter_func$offset() {
        return set_filter_func$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_filter_func)(GtkFontChooser *, GtkFontFilterFunc, gpointer, GDestroyNotify)
     * }
     */
    public static MemorySegment set_filter_func(MemorySegment struct) {
        return struct.get(set_filter_func$LAYOUT, set_filter_func$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_filter_func)(GtkFontChooser *, GtkFontFilterFunc, gpointer, GDestroyNotify)
     * }
     */
    public static void set_filter_func(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_filter_func$LAYOUT, set_filter_func$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*font_activated)(GtkFontChooser *, const gchar *)
     * }
     */
    public class font_activated {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(font_activated.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(font_activated.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout font_activated$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("font_activated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*font_activated)(GtkFontChooser *, const gchar *)
     * }
     */
    public static final AddressLayout font_activated$layout() {
        return font_activated$LAYOUT;
    }

    private static final long font_activated$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*font_activated)(GtkFontChooser *, const gchar *)
     * }
     */
    public static final long font_activated$offset() {
        return font_activated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*font_activated)(GtkFontChooser *, const gchar *)
     * }
     */
    public static MemorySegment font_activated(MemorySegment struct) {
        return struct.get(font_activated$LAYOUT, font_activated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*font_activated)(GtkFontChooser *, const gchar *)
     * }
     */
    public static void font_activated(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(font_activated$LAYOUT, font_activated$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_font_map)(GtkFontChooser *, PangoFontMap *)
     * }
     */
    public class set_font_map {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(set_font_map.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_font_map.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_font_map$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_font_map"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_font_map)(GtkFontChooser *, PangoFontMap *)
     * }
     */
    public static final AddressLayout set_font_map$layout() {
        return set_font_map$LAYOUT;
    }

    private static final long set_font_map$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_font_map)(GtkFontChooser *, PangoFontMap *)
     * }
     */
    public static final long set_font_map$offset() {
        return set_font_map$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_font_map)(GtkFontChooser *, PangoFontMap *)
     * }
     */
    public static MemorySegment set_font_map(MemorySegment struct) {
        return struct.get(set_font_map$LAYOUT, set_font_map$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_font_map)(GtkFontChooser *, PangoFontMap *)
     * }
     */
    public static void set_font_map(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_font_map$LAYOUT, set_font_map$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * PangoFontMap *(*get_font_map)(GtkFontChooser *)
     * }
     */
    public class get_font_map {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_font_map.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_font_map.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_font_map$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_font_map"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PangoFontMap *(*get_font_map)(GtkFontChooser *)
     * }
     */
    public static final AddressLayout get_font_map$layout() {
        return get_font_map$LAYOUT;
    }

    private static final long get_font_map$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PangoFontMap *(*get_font_map)(GtkFontChooser *)
     * }
     */
    public static final long get_font_map$offset() {
        return get_font_map$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PangoFontMap *(*get_font_map)(GtkFontChooser *)
     * }
     */
    public static MemorySegment get_font_map(MemorySegment struct) {
        return struct.get(get_font_map$LAYOUT, get_font_map$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PangoFontMap *(*get_font_map)(GtkFontChooser *)
     * }
     */
    public static void get_font_map(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_font_map$LAYOUT, get_font_map$OFFSET, fieldValue);
    }

    private static final SequenceLayout padding$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("padding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gpointer padding[10]
     * }
     */
    public static final SequenceLayout padding$layout() {
        return padding$LAYOUT;
    }

    private static final long padding$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gpointer padding[10]
     * }
     */
    public static final long padding$offset() {
        return padding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gpointer padding[10]
     * }
     */
    public static MemorySegment padding(MemorySegment struct) {
        return struct.asSlice(padding$OFFSET, padding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gpointer padding[10]
     * }
     */
    public static void padding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, padding$OFFSET, padding$LAYOUT.byteSize());
    }

    private static long[] padding$DIMS = { 10 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * gpointer padding[10]
     * }
     */
    public static long[] padding$dimensions() {
        return padding$DIMS;
    }
    private static final VarHandle padding$ELEM_HANDLE = padding$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * gpointer padding[10]
     * }
     */
    public static MemorySegment padding(MemorySegment struct, long index0) {
        return (MemorySegment)padding$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * gpointer padding[10]
     * }
     */
    public static void padding(MemorySegment struct, long index0, MemorySegment fieldValue) {
        padding$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

