// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * int (*hb_paint_image_func_t)(struct hb_paint_funcs_t* funcs,void* paint_data,struct hb_blob_t* image,unsigned int width,unsigned int height,unsigned int format,float slant,struct hb_glyph_extents_t* extents,void* user_data);
 * }
 */
public interface hb_paint_image_func_t {

    int apply(java.lang.foreign.MemorySegment funcs, java.lang.foreign.MemorySegment paint_data, java.lang.foreign.MemorySegment image, int width, int height, int format, float slant, java.lang.foreign.MemorySegment extents, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(hb_paint_image_func_t fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1462.const$1, fi, constants$1462.const$0, scope);
    }
    static hb_paint_image_func_t ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _funcs, java.lang.foreign.MemorySegment _paint_data, java.lang.foreign.MemorySegment _image, int _width, int _height, int _format, float _slant, java.lang.foreign.MemorySegment _extents, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                return (int)constants$1462.const$2.invokeExact(symbol, _funcs, _paint_data, _image, _width, _height, _format, _slant, _extents, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


