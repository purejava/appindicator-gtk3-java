// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * void (*GChildWatchFunc)(int pid,int wait_status,void* user_data);
 * }
 */
public interface GChildWatchFunc {

    void apply(int pid, int wait_status, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(GChildWatchFunc fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$255.const$5, fi, constants$255.const$4, scope);
    }
    static GChildWatchFunc ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _pid, int _wait_status, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                constants$256.const$0.invokeExact(symbol, _pid, _wait_status, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


