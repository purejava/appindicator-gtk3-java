// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;

/**
 * {@snippet :
 * int (*GBindingTransformFunc)(struct _GBinding* binding,struct _GValue* from_value,struct _GValue* to_value,void* user_data);
 * }
 */
public interface GBindingTransformFunc {

    int apply(java.lang.foreign.MemorySegment completion, java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(GBindingTransformFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$443.GBindingTransformFunc_UP$MH, fi, constants$443.GBindingTransformFunc$FUNC, scope);
    }
    static GBindingTransformFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _completion, java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                return (int)constants$443.GBindingTransformFunc_DOWN$MH.invokeExact(symbol, _completion, _key, _iter, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


