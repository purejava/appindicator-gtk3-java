// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;
public class app_indicator_h_19 extends app_indicator_h_18 {

    public static MethodHandle gtk_widget_path_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3232.const$5,"gtk_widget_path_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidgetPath* gtk_widget_path_new();
     * }
     */
    public static MemorySegment gtk_widget_path_new() {
        var mh$ = gtk_widget_path_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$3233.const$0,"gtk_widget_path_copy");
    }
    /**
     * {@snippet :
     * struct _GtkWidgetPath* gtk_widget_path_copy(struct _GtkWidgetPath* path);
     * }
     */
    public static MemorySegment gtk_widget_path_copy(MemorySegment path) {
        var mh$ = gtk_widget_path_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$3233.const$1,"gtk_widget_path_ref");
    }
    /**
     * {@snippet :
     * struct _GtkWidgetPath* gtk_widget_path_ref(struct _GtkWidgetPath* path);
     * }
     */
    public static MemorySegment gtk_widget_path_ref(MemorySegment path) {
        var mh$ = gtk_widget_path_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$3233.const$2,"gtk_widget_path_unref");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_unref(struct _GtkWidgetPath* path);
     * }
     */
    public static void gtk_widget_path_unref(MemorySegment path) {
        var mh$ = gtk_widget_path_unref$MH();
        try {
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_free$MH() {
        return RuntimeHelper.requireNonNull(constants$3233.const$3,"gtk_widget_path_free");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_free(struct _GtkWidgetPath* path);
     * }
     */
    public static void gtk_widget_path_free(MemorySegment path) {
        var mh$ = gtk_widget_path_free$MH();
        try {
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3233.const$4,"gtk_widget_path_to_string");
    }
    /**
     * {@snippet :
     * char* gtk_widget_path_to_string(struct _GtkWidgetPath* path);
     * }
     */
    public static MemorySegment gtk_widget_path_to_string(MemorySegment path) {
        var mh$ = gtk_widget_path_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_length$MH() {
        return RuntimeHelper.requireNonNull(constants$3233.const$5,"gtk_widget_path_length");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_length(struct _GtkWidgetPath* path);
     * }
     */
    public static int gtk_widget_path_length(MemorySegment path) {
        var mh$ = gtk_widget_path_length$MH();
        try {
            return (int)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_append_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3234.const$0,"gtk_widget_path_append_type");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_append_type(struct _GtkWidgetPath* path, unsigned long type);
     * }
     */
    public static int gtk_widget_path_append_type(MemorySegment path, long type) {
        var mh$ = gtk_widget_path_append_type$MH();
        try {
            return (int)mh$.invokeExact(path, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_prepend_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3234.const$1,"gtk_widget_path_prepend_type");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_prepend_type(struct _GtkWidgetPath* path, unsigned long type);
     * }
     */
    public static void gtk_widget_path_prepend_type(MemorySegment path, long type) {
        var mh$ = gtk_widget_path_prepend_type$MH();
        try {
            mh$.invokeExact(path, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_append_with_siblings$MH() {
        return RuntimeHelper.requireNonNull(constants$3234.const$2,"gtk_widget_path_append_with_siblings");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_append_with_siblings(struct _GtkWidgetPath* path, struct _GtkWidgetPath* siblings, unsigned int sibling_index);
     * }
     */
    public static int gtk_widget_path_append_with_siblings(MemorySegment path, MemorySegment siblings, int sibling_index) {
        var mh$ = gtk_widget_path_append_with_siblings$MH();
        try {
            return (int)mh$.invokeExact(path, siblings, sibling_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_append_for_widget$MH() {
        return RuntimeHelper.requireNonNull(constants$3234.const$3,"gtk_widget_path_append_for_widget");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_append_for_widget(struct _GtkWidgetPath* path, struct _GtkWidget* widget);
     * }
     */
    public static int gtk_widget_path_append_for_widget(MemorySegment path, MemorySegment widget) {
        var mh$ = gtk_widget_path_append_for_widget$MH();
        try {
            return (int)mh$.invokeExact(path, widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_get_object_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3234.const$4,"gtk_widget_path_iter_get_object_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_widget_path_iter_get_object_type(struct _GtkWidgetPath* path, int pos);
     * }
     */
    public static long gtk_widget_path_iter_get_object_type(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_object_type$MH();
        try {
            return (long)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_set_object_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3234.const$6,"gtk_widget_path_iter_set_object_type");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_iter_set_object_type(struct _GtkWidgetPath* path, int pos, unsigned long type);
     * }
     */
    public static void gtk_widget_path_iter_set_object_type(MemorySegment path, int pos, long type) {
        var mh$ = gtk_widget_path_iter_set_object_type$MH();
        try {
            mh$.invokeExact(path, pos, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_get_object_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3235.const$0,"gtk_widget_path_iter_get_object_name");
    }
    /**
     * {@snippet :
     * char* gtk_widget_path_iter_get_object_name(struct _GtkWidgetPath* path, int pos);
     * }
     */
    public static MemorySegment gtk_widget_path_iter_get_object_name(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_object_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_set_object_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3235.const$1,"gtk_widget_path_iter_set_object_name");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_iter_set_object_name(struct _GtkWidgetPath* path, int pos, char* name);
     * }
     */
    public static void gtk_widget_path_iter_set_object_name(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_set_object_name$MH();
        try {
            mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_get_siblings$MH() {
        return RuntimeHelper.requireNonNull(constants$3235.const$2,"gtk_widget_path_iter_get_siblings");
    }
    /**
     * {@snippet :
     * struct _GtkWidgetPath* gtk_widget_path_iter_get_siblings(struct _GtkWidgetPath* path, int pos);
     * }
     */
    public static MemorySegment gtk_widget_path_iter_get_siblings(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_siblings$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_get_sibling_index$MH() {
        return RuntimeHelper.requireNonNull(constants$3235.const$3,"gtk_widget_path_iter_get_sibling_index");
    }
    /**
     * {@snippet :
     * unsigned int gtk_widget_path_iter_get_sibling_index(struct _GtkWidgetPath* path, int pos);
     * }
     */
    public static int gtk_widget_path_iter_get_sibling_index(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_sibling_index$MH();
        try {
            return (int)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3235.const$4,"gtk_widget_path_iter_get_name");
    }
    /**
     * {@snippet :
     * char* gtk_widget_path_iter_get_name(struct _GtkWidgetPath* path, int pos);
     * }
     */
    public static MemorySegment gtk_widget_path_iter_get_name(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_set_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3235.const$5,"gtk_widget_path_iter_set_name");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_iter_set_name(struct _GtkWidgetPath* path, int pos, char* name);
     * }
     */
    public static void gtk_widget_path_iter_set_name(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_set_name$MH();
        try {
            mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_has_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3236.const$0,"gtk_widget_path_iter_has_name");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_iter_has_name(struct _GtkWidgetPath* path, int pos, char* name);
     * }
     */
    public static int gtk_widget_path_iter_has_name(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_has_name$MH();
        try {
            return (int)mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_has_qname$MH() {
        return RuntimeHelper.requireNonNull(constants$3236.const$1,"gtk_widget_path_iter_has_qname");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_iter_has_qname(struct _GtkWidgetPath* path, int pos, unsigned int qname);
     * }
     */
    public static int gtk_widget_path_iter_has_qname(MemorySegment path, int pos, int qname) {
        var mh$ = gtk_widget_path_iter_has_qname$MH();
        try {
            return (int)mh$.invokeExact(path, pos, qname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_get_state$MH() {
        return RuntimeHelper.requireNonNull(constants$3236.const$2,"gtk_widget_path_iter_get_state");
    }
    /**
     * {@snippet :
     * enum GtkStateFlags gtk_widget_path_iter_get_state(struct _GtkWidgetPath* path, int pos);
     * }
     */
    public static int gtk_widget_path_iter_get_state(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_get_state$MH();
        try {
            return (int)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_set_state$MH() {
        return RuntimeHelper.requireNonNull(constants$3236.const$3,"gtk_widget_path_iter_set_state");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_iter_set_state(struct _GtkWidgetPath* path, int pos, enum GtkStateFlags state);
     * }
     */
    public static void gtk_widget_path_iter_set_state(MemorySegment path, int pos, int state) {
        var mh$ = gtk_widget_path_iter_set_state$MH();
        try {
            mh$.invokeExact(path, pos, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_add_class$MH() {
        return RuntimeHelper.requireNonNull(constants$3236.const$4,"gtk_widget_path_iter_add_class");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_iter_add_class(struct _GtkWidgetPath* path, int pos, char* name);
     * }
     */
    public static void gtk_widget_path_iter_add_class(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_add_class$MH();
        try {
            mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_remove_class$MH() {
        return RuntimeHelper.requireNonNull(constants$3236.const$5,"gtk_widget_path_iter_remove_class");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_iter_remove_class(struct _GtkWidgetPath* path, int pos, char* name);
     * }
     */
    public static void gtk_widget_path_iter_remove_class(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_remove_class$MH();
        try {
            mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_clear_classes$MH() {
        return RuntimeHelper.requireNonNull(constants$3237.const$0,"gtk_widget_path_iter_clear_classes");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_iter_clear_classes(struct _GtkWidgetPath* path, int pos);
     * }
     */
    public static void gtk_widget_path_iter_clear_classes(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_clear_classes$MH();
        try {
            mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_list_classes$MH() {
        return RuntimeHelper.requireNonNull(constants$3237.const$1,"gtk_widget_path_iter_list_classes");
    }
    /**
     * {@snippet :
     * struct _GSList* gtk_widget_path_iter_list_classes(struct _GtkWidgetPath* path, int pos);
     * }
     */
    public static MemorySegment gtk_widget_path_iter_list_classes(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_list_classes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_has_class$MH() {
        return RuntimeHelper.requireNonNull(constants$3237.const$2,"gtk_widget_path_iter_has_class");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_iter_has_class(struct _GtkWidgetPath* path, int pos, char* name);
     * }
     */
    public static int gtk_widget_path_iter_has_class(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_has_class$MH();
        try {
            return (int)mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_has_qclass$MH() {
        return RuntimeHelper.requireNonNull(constants$3237.const$3,"gtk_widget_path_iter_has_qclass");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_iter_has_qclass(struct _GtkWidgetPath* path, int pos, unsigned int qname);
     * }
     */
    public static int gtk_widget_path_iter_has_qclass(MemorySegment path, int pos, int qname) {
        var mh$ = gtk_widget_path_iter_has_qclass$MH();
        try {
            return (int)mh$.invokeExact(path, pos, qname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_add_region$MH() {
        return RuntimeHelper.requireNonNull(constants$3237.const$4,"gtk_widget_path_iter_add_region");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_iter_add_region(struct _GtkWidgetPath* path, int pos, char* name, enum GtkRegionFlags flags);
     * }
     */
    public static void gtk_widget_path_iter_add_region(MemorySegment path, int pos, MemorySegment name, int flags) {
        var mh$ = gtk_widget_path_iter_add_region$MH();
        try {
            mh$.invokeExact(path, pos, name, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_remove_region$MH() {
        return RuntimeHelper.requireNonNull(constants$3237.const$5,"gtk_widget_path_iter_remove_region");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_iter_remove_region(struct _GtkWidgetPath* path, int pos, char* name);
     * }
     */
    public static void gtk_widget_path_iter_remove_region(MemorySegment path, int pos, MemorySegment name) {
        var mh$ = gtk_widget_path_iter_remove_region$MH();
        try {
            mh$.invokeExact(path, pos, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_clear_regions$MH() {
        return RuntimeHelper.requireNonNull(constants$3238.const$0,"gtk_widget_path_iter_clear_regions");
    }
    /**
     * {@snippet :
     * void gtk_widget_path_iter_clear_regions(struct _GtkWidgetPath* path, int pos);
     * }
     */
    public static void gtk_widget_path_iter_clear_regions(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_clear_regions$MH();
        try {
            mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_list_regions$MH() {
        return RuntimeHelper.requireNonNull(constants$3238.const$1,"gtk_widget_path_iter_list_regions");
    }
    /**
     * {@snippet :
     * struct _GSList* gtk_widget_path_iter_list_regions(struct _GtkWidgetPath* path, int pos);
     * }
     */
    public static MemorySegment gtk_widget_path_iter_list_regions(MemorySegment path, int pos) {
        var mh$ = gtk_widget_path_iter_list_regions$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_has_region$MH() {
        return RuntimeHelper.requireNonNull(constants$3238.const$2,"gtk_widget_path_iter_has_region");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_iter_has_region(struct _GtkWidgetPath* path, int pos, char* name, enum GtkRegionFlags* flags);
     * }
     */
    public static int gtk_widget_path_iter_has_region(MemorySegment path, int pos, MemorySegment name, MemorySegment flags) {
        var mh$ = gtk_widget_path_iter_has_region$MH();
        try {
            return (int)mh$.invokeExact(path, pos, name, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_iter_has_qregion$MH() {
        return RuntimeHelper.requireNonNull(constants$3238.const$3,"gtk_widget_path_iter_has_qregion");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_iter_has_qregion(struct _GtkWidgetPath* path, int pos, unsigned int qname, enum GtkRegionFlags* flags);
     * }
     */
    public static int gtk_widget_path_iter_has_qregion(MemorySegment path, int pos, int qname, MemorySegment flags) {
        var mh$ = gtk_widget_path_iter_has_qregion$MH();
        try {
            return (int)mh$.invokeExact(path, pos, qname, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_get_object_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3238.const$4,"gtk_widget_path_get_object_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_widget_path_get_object_type(struct _GtkWidgetPath* path);
     * }
     */
    public static long gtk_widget_path_get_object_type(MemorySegment path) {
        var mh$ = gtk_widget_path_get_object_type$MH();
        try {
            return (long)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_is_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3238.const$5,"gtk_widget_path_is_type");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_is_type(struct _GtkWidgetPath* path, unsigned long type);
     * }
     */
    public static int gtk_widget_path_is_type(MemorySegment path, long type) {
        var mh$ = gtk_widget_path_is_type$MH();
        try {
            return (int)mh$.invokeExact(path, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path_has_parent$MH() {
        return RuntimeHelper.requireNonNull(constants$3239.const$0,"gtk_widget_path_has_parent");
    }
    /**
     * {@snippet :
     * int gtk_widget_path_has_parent(struct _GtkWidgetPath* path, unsigned long type);
     * }
     */
    public static int gtk_widget_path_has_parent(MemorySegment path, long type) {
        var mh$ = gtk_widget_path_has_parent$MH();
        try {
            return (int)mh$.invokeExact(path, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3241.const$0,"gtk_window_group_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_window_group_get_type();
     * }
     */
    public static long gtk_window_group_get_type() {
        var mh$ = gtk_window_group_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3241.const$1,"gtk_window_group_new");
    }
    /**
     * {@snippet :
     * struct _GtkWindowGroup* gtk_window_group_new();
     * }
     */
    public static MemorySegment gtk_window_group_new() {
        var mh$ = gtk_window_group_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_add_window$MH() {
        return RuntimeHelper.requireNonNull(constants$3241.const$2,"gtk_window_group_add_window");
    }
    /**
     * {@snippet :
     * void gtk_window_group_add_window(struct _GtkWindowGroup* window_group, struct _GtkWindow* window);
     * }
     */
    public static void gtk_window_group_add_window(MemorySegment window_group, MemorySegment window) {
        var mh$ = gtk_window_group_add_window$MH();
        try {
            mh$.invokeExact(window_group, window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_remove_window$MH() {
        return RuntimeHelper.requireNonNull(constants$3241.const$3,"gtk_window_group_remove_window");
    }
    /**
     * {@snippet :
     * void gtk_window_group_remove_window(struct _GtkWindowGroup* window_group, struct _GtkWindow* window);
     * }
     */
    public static void gtk_window_group_remove_window(MemorySegment window_group, MemorySegment window) {
        var mh$ = gtk_window_group_remove_window$MH();
        try {
            mh$.invokeExact(window_group, window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_list_windows$MH() {
        return RuntimeHelper.requireNonNull(constants$3241.const$4,"gtk_window_group_list_windows");
    }
    /**
     * {@snippet :
     * struct _GList* gtk_window_group_list_windows(struct _GtkWindowGroup* window_group);
     * }
     */
    public static MemorySegment gtk_window_group_list_windows(MemorySegment window_group) {
        var mh$ = gtk_window_group_list_windows$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_get_current_grab$MH() {
        return RuntimeHelper.requireNonNull(constants$3241.const$5,"gtk_window_group_get_current_grab");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_window_group_get_current_grab(struct _GtkWindowGroup* window_group);
     * }
     */
    public static MemorySegment gtk_window_group_get_current_grab(MemorySegment window_group) {
        var mh$ = gtk_window_group_get_current_grab$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_window_group_get_current_device_grab$MH() {
        return RuntimeHelper.requireNonNull(constants$3242.const$0,"gtk_window_group_get_current_device_grab");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_window_group_get_current_device_grab(struct _GtkWindowGroup* window_group, struct _GdkDevice* device);
     * }
     */
    public static MemorySegment gtk_window_group_get_current_device_grab(MemorySegment window_group, MemorySegment device) {
        var mh$ = gtk_window_group_get_current_device_grab$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window_group, device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_arrow_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3244.const$0,"gtk_arrow_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_arrow_get_type();
     * }
     */
    public static long gtk_arrow_get_type() {
        var mh$ = gtk_arrow_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_arrow_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3244.const$1,"gtk_arrow_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_arrow_new(enum GtkArrowType arrow_type, enum GtkShadowType shadow_type);
     * }
     */
    public static MemorySegment gtk_arrow_new(int arrow_type, int shadow_type) {
        var mh$ = gtk_arrow_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(arrow_type, shadow_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_arrow_set$MH() {
        return RuntimeHelper.requireNonNull(constants$3244.const$2,"gtk_arrow_set");
    }
    /**
     * {@snippet :
     * void gtk_arrow_set(struct _GtkArrow* arrow, enum GtkArrowType arrow_type, enum GtkShadowType shadow_type);
     * }
     */
    public static void gtk_arrow_set(MemorySegment arrow, int arrow_type, int shadow_type) {
        var mh$ = gtk_arrow_set$MH();
        try {
            mh$.invokeExact(arrow, arrow_type, shadow_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3248.const$4,"gtk_action_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_action_get_type();
     * }
     */
    public static long gtk_action_get_type() {
        var mh$ = gtk_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3248.const$5,"gtk_action_new");
    }
    /**
     * {@snippet :
     * struct _GtkAction* gtk_action_new(char* name, char* label, char* tooltip, char* stock_id);
     * }
     */
    public static MemorySegment gtk_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id) {
        var mh$ = gtk_action_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3249.const$0,"gtk_action_get_name");
    }
    /**
     * {@snippet :
     * char* gtk_action_get_name(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_get_name(MemorySegment action) {
        var mh$ = gtk_action_get_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_is_sensitive$MH() {
        return RuntimeHelper.requireNonNull(constants$3249.const$1,"gtk_action_is_sensitive");
    }
    /**
     * {@snippet :
     * int gtk_action_is_sensitive(struct _GtkAction* action);
     * }
     */
    public static int gtk_action_is_sensitive(MemorySegment action) {
        var mh$ = gtk_action_is_sensitive$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_sensitive$MH() {
        return RuntimeHelper.requireNonNull(constants$3249.const$2,"gtk_action_get_sensitive");
    }
    /**
     * {@snippet :
     * int gtk_action_get_sensitive(struct _GtkAction* action);
     * }
     */
    public static int gtk_action_get_sensitive(MemorySegment action) {
        var mh$ = gtk_action_get_sensitive$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_sensitive$MH() {
        return RuntimeHelper.requireNonNull(constants$3249.const$3,"gtk_action_set_sensitive");
    }
    /**
     * {@snippet :
     * void gtk_action_set_sensitive(struct _GtkAction* action, int sensitive);
     * }
     */
    public static void gtk_action_set_sensitive(MemorySegment action, int sensitive) {
        var mh$ = gtk_action_set_sensitive$MH();
        try {
            mh$.invokeExact(action, sensitive);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_is_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$3249.const$4,"gtk_action_is_visible");
    }
    /**
     * {@snippet :
     * int gtk_action_is_visible(struct _GtkAction* action);
     * }
     */
    public static int gtk_action_is_visible(MemorySegment action) {
        var mh$ = gtk_action_is_visible$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$3249.const$5,"gtk_action_get_visible");
    }
    /**
     * {@snippet :
     * int gtk_action_get_visible(struct _GtkAction* action);
     * }
     */
    public static int gtk_action_get_visible(MemorySegment action) {
        var mh$ = gtk_action_get_visible$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$3250.const$0,"gtk_action_set_visible");
    }
    /**
     * {@snippet :
     * void gtk_action_set_visible(struct _GtkAction* action, int visible);
     * }
     */
    public static void gtk_action_set_visible(MemorySegment action, int visible) {
        var mh$ = gtk_action_set_visible$MH();
        try {
            mh$.invokeExact(action, visible);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_activate$MH() {
        return RuntimeHelper.requireNonNull(constants$3250.const$1,"gtk_action_activate");
    }
    /**
     * {@snippet :
     * void gtk_action_activate(struct _GtkAction* action);
     * }
     */
    public static void gtk_action_activate(MemorySegment action) {
        var mh$ = gtk_action_activate$MH();
        try {
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_create_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$3250.const$2,"gtk_action_create_icon");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_action_create_icon(struct _GtkAction* action, enum GtkIconSize icon_size);
     * }
     */
    public static MemorySegment gtk_action_create_icon(MemorySegment action, int icon_size) {
        var mh$ = gtk_action_create_icon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action, icon_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_create_menu_item$MH() {
        return RuntimeHelper.requireNonNull(constants$3250.const$3,"gtk_action_create_menu_item");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_action_create_menu_item(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_create_menu_item(MemorySegment action) {
        var mh$ = gtk_action_create_menu_item$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_create_tool_item$MH() {
        return RuntimeHelper.requireNonNull(constants$3250.const$4,"gtk_action_create_tool_item");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_action_create_tool_item(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_create_tool_item(MemorySegment action) {
        var mh$ = gtk_action_create_tool_item$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_create_menu$MH() {
        return RuntimeHelper.requireNonNull(constants$3250.const$5,"gtk_action_create_menu");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_action_create_menu(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_create_menu(MemorySegment action) {
        var mh$ = gtk_action_create_menu$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_proxies$MH() {
        return RuntimeHelper.requireNonNull(constants$3251.const$0,"gtk_action_get_proxies");
    }
    /**
     * {@snippet :
     * struct _GSList* gtk_action_get_proxies(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_get_proxies(MemorySegment action) {
        var mh$ = gtk_action_get_proxies$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_connect_accelerator$MH() {
        return RuntimeHelper.requireNonNull(constants$3251.const$1,"gtk_action_connect_accelerator");
    }
    /**
     * {@snippet :
     * void gtk_action_connect_accelerator(struct _GtkAction* action);
     * }
     */
    public static void gtk_action_connect_accelerator(MemorySegment action) {
        var mh$ = gtk_action_connect_accelerator$MH();
        try {
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_disconnect_accelerator$MH() {
        return RuntimeHelper.requireNonNull(constants$3251.const$2,"gtk_action_disconnect_accelerator");
    }
    /**
     * {@snippet :
     * void gtk_action_disconnect_accelerator(struct _GtkAction* action);
     * }
     */
    public static void gtk_action_disconnect_accelerator(MemorySegment action) {
        var mh$ = gtk_action_disconnect_accelerator$MH();
        try {
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_accel_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3251.const$3,"gtk_action_get_accel_path");
    }
    /**
     * {@snippet :
     * char* gtk_action_get_accel_path(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_get_accel_path(MemorySegment action) {
        var mh$ = gtk_action_get_accel_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_accel_closure$MH() {
        return RuntimeHelper.requireNonNull(constants$3251.const$4,"gtk_action_get_accel_closure");
    }
    /**
     * {@snippet :
     * struct _GClosure* gtk_action_get_accel_closure(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_get_accel_closure(MemorySegment action) {
        var mh$ = gtk_action_get_accel_closure$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_block_activate$MH() {
        return RuntimeHelper.requireNonNull(constants$3251.const$5,"gtk_action_block_activate");
    }
    /**
     * {@snippet :
     * void gtk_action_block_activate(struct _GtkAction* action);
     * }
     */
    public static void gtk_action_block_activate(MemorySegment action) {
        var mh$ = gtk_action_block_activate$MH();
        try {
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_unblock_activate$MH() {
        return RuntimeHelper.requireNonNull(constants$3252.const$0,"gtk_action_unblock_activate");
    }
    /**
     * {@snippet :
     * void gtk_action_unblock_activate(struct _GtkAction* action);
     * }
     */
    public static void gtk_action_unblock_activate(MemorySegment action) {
        var mh$ = gtk_action_unblock_activate$MH();
        try {
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_action_add_to_proxy_list$MH() {
        return RuntimeHelper.requireNonNull(constants$3252.const$1,"_gtk_action_add_to_proxy_list");
    }
    /**
     * {@snippet :
     * void _gtk_action_add_to_proxy_list(struct _GtkAction* action, struct _GtkWidget* proxy);
     * }
     */
    public static void _gtk_action_add_to_proxy_list(MemorySegment action, MemorySegment proxy) {
        var mh$ = _gtk_action_add_to_proxy_list$MH();
        try {
            mh$.invokeExact(action, proxy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_action_remove_from_proxy_list$MH() {
        return RuntimeHelper.requireNonNull(constants$3252.const$2,"_gtk_action_remove_from_proxy_list");
    }
    /**
     * {@snippet :
     * void _gtk_action_remove_from_proxy_list(struct _GtkAction* action, struct _GtkWidget* proxy);
     * }
     */
    public static void _gtk_action_remove_from_proxy_list(MemorySegment action, MemorySegment proxy) {
        var mh$ = _gtk_action_remove_from_proxy_list$MH();
        try {
            mh$.invokeExact(action, proxy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_action_emit_activate$MH() {
        return RuntimeHelper.requireNonNull(constants$3252.const$3,"_gtk_action_emit_activate");
    }
    /**
     * {@snippet :
     * void _gtk_action_emit_activate(struct _GtkAction* action);
     * }
     */
    public static void _gtk_action_emit_activate(MemorySegment action) {
        var mh$ = _gtk_action_emit_activate$MH();
        try {
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_accel_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3252.const$4,"gtk_action_set_accel_path");
    }
    /**
     * {@snippet :
     * void gtk_action_set_accel_path(struct _GtkAction* action, char* accel_path);
     * }
     */
    public static void gtk_action_set_accel_path(MemorySegment action, MemorySegment accel_path) {
        var mh$ = gtk_action_set_accel_path$MH();
        try {
            mh$.invokeExact(action, accel_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_accel_group$MH() {
        return RuntimeHelper.requireNonNull(constants$3252.const$5,"gtk_action_set_accel_group");
    }
    /**
     * {@snippet :
     * void gtk_action_set_accel_group(struct _GtkAction* action, struct _GtkAccelGroup* accel_group);
     * }
     */
    public static void gtk_action_set_accel_group(MemorySegment action, MemorySegment accel_group) {
        var mh$ = gtk_action_set_accel_group$MH();
        try {
            mh$.invokeExact(action, accel_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_action_sync_menu_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$3253.const$0,"_gtk_action_sync_menu_visible");
    }
    /**
     * {@snippet :
     * void _gtk_action_sync_menu_visible(struct _GtkAction* action, struct _GtkWidget* proxy, int empty);
     * }
     */
    public static void _gtk_action_sync_menu_visible(MemorySegment action, MemorySegment proxy, int empty) {
        var mh$ = _gtk_action_sync_menu_visible$MH();
        try {
            mh$.invokeExact(action, proxy, empty);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_label$MH() {
        return RuntimeHelper.requireNonNull(constants$3253.const$1,"gtk_action_set_label");
    }
    /**
     * {@snippet :
     * void gtk_action_set_label(struct _GtkAction* action, char* label);
     * }
     */
    public static void gtk_action_set_label(MemorySegment action, MemorySegment label) {
        var mh$ = gtk_action_set_label$MH();
        try {
            mh$.invokeExact(action, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_label$MH() {
        return RuntimeHelper.requireNonNull(constants$3253.const$2,"gtk_action_get_label");
    }
    /**
     * {@snippet :
     * char* gtk_action_get_label(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_get_label(MemorySegment action) {
        var mh$ = gtk_action_get_label$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_short_label$MH() {
        return RuntimeHelper.requireNonNull(constants$3253.const$3,"gtk_action_set_short_label");
    }
    /**
     * {@snippet :
     * void gtk_action_set_short_label(struct _GtkAction* action, char* short_label);
     * }
     */
    public static void gtk_action_set_short_label(MemorySegment action, MemorySegment short_label) {
        var mh$ = gtk_action_set_short_label$MH();
        try {
            mh$.invokeExact(action, short_label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_short_label$MH() {
        return RuntimeHelper.requireNonNull(constants$3253.const$4,"gtk_action_get_short_label");
    }
    /**
     * {@snippet :
     * char* gtk_action_get_short_label(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_get_short_label(MemorySegment action) {
        var mh$ = gtk_action_get_short_label$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_tooltip$MH() {
        return RuntimeHelper.requireNonNull(constants$3253.const$5,"gtk_action_set_tooltip");
    }
    /**
     * {@snippet :
     * void gtk_action_set_tooltip(struct _GtkAction* action, char* tooltip);
     * }
     */
    public static void gtk_action_set_tooltip(MemorySegment action, MemorySegment tooltip) {
        var mh$ = gtk_action_set_tooltip$MH();
        try {
            mh$.invokeExact(action, tooltip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_tooltip$MH() {
        return RuntimeHelper.requireNonNull(constants$3254.const$0,"gtk_action_get_tooltip");
    }
    /**
     * {@snippet :
     * char* gtk_action_get_tooltip(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_get_tooltip(MemorySegment action) {
        var mh$ = gtk_action_get_tooltip$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_stock_id$MH() {
        return RuntimeHelper.requireNonNull(constants$3254.const$1,"gtk_action_set_stock_id");
    }
    /**
     * {@snippet :
     * void gtk_action_set_stock_id(struct _GtkAction* action, char* stock_id);
     * }
     */
    public static void gtk_action_set_stock_id(MemorySegment action, MemorySegment stock_id) {
        var mh$ = gtk_action_set_stock_id$MH();
        try {
            mh$.invokeExact(action, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_stock_id$MH() {
        return RuntimeHelper.requireNonNull(constants$3254.const$2,"gtk_action_get_stock_id");
    }
    /**
     * {@snippet :
     * char* gtk_action_get_stock_id(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_get_stock_id(MemorySegment action) {
        var mh$ = gtk_action_get_stock_id$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$3254.const$3,"gtk_action_set_gicon");
    }
    /**
     * {@snippet :
     * void gtk_action_set_gicon(struct _GtkAction* action, struct _GIcon* icon);
     * }
     */
    public static void gtk_action_set_gicon(MemorySegment action, MemorySegment icon) {
        var mh$ = gtk_action_set_gicon$MH();
        try {
            mh$.invokeExact(action, icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$3254.const$4,"gtk_action_get_gicon");
    }
    /**
     * {@snippet :
     * struct _GIcon* gtk_action_get_gicon(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_get_gicon(MemorySegment action) {
        var mh$ = gtk_action_get_gicon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3254.const$5,"gtk_action_set_icon_name");
    }
    /**
     * {@snippet :
     * void gtk_action_set_icon_name(struct _GtkAction* action, char* icon_name);
     * }
     */
    public static void gtk_action_set_icon_name(MemorySegment action, MemorySegment icon_name) {
        var mh$ = gtk_action_set_icon_name$MH();
        try {
            mh$.invokeExact(action, icon_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3255.const$0,"gtk_action_get_icon_name");
    }
    /**
     * {@snippet :
     * char* gtk_action_get_icon_name(struct _GtkAction* action);
     * }
     */
    public static MemorySegment gtk_action_get_icon_name(MemorySegment action) {
        var mh$ = gtk_action_get_icon_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_visible_horizontal$MH() {
        return RuntimeHelper.requireNonNull(constants$3255.const$1,"gtk_action_set_visible_horizontal");
    }
    /**
     * {@snippet :
     * void gtk_action_set_visible_horizontal(struct _GtkAction* action, int visible_horizontal);
     * }
     */
    public static void gtk_action_set_visible_horizontal(MemorySegment action, int visible_horizontal) {
        var mh$ = gtk_action_set_visible_horizontal$MH();
        try {
            mh$.invokeExact(action, visible_horizontal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_visible_horizontal$MH() {
        return RuntimeHelper.requireNonNull(constants$3255.const$2,"gtk_action_get_visible_horizontal");
    }
    /**
     * {@snippet :
     * int gtk_action_get_visible_horizontal(struct _GtkAction* action);
     * }
     */
    public static int gtk_action_get_visible_horizontal(MemorySegment action) {
        var mh$ = gtk_action_get_visible_horizontal$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_visible_vertical$MH() {
        return RuntimeHelper.requireNonNull(constants$3255.const$3,"gtk_action_set_visible_vertical");
    }
    /**
     * {@snippet :
     * void gtk_action_set_visible_vertical(struct _GtkAction* action, int visible_vertical);
     * }
     */
    public static void gtk_action_set_visible_vertical(MemorySegment action, int visible_vertical) {
        var mh$ = gtk_action_set_visible_vertical$MH();
        try {
            mh$.invokeExact(action, visible_vertical);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_visible_vertical$MH() {
        return RuntimeHelper.requireNonNull(constants$3255.const$4,"gtk_action_get_visible_vertical");
    }
    /**
     * {@snippet :
     * int gtk_action_get_visible_vertical(struct _GtkAction* action);
     * }
     */
    public static int gtk_action_get_visible_vertical(MemorySegment action) {
        var mh$ = gtk_action_get_visible_vertical$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_is_important$MH() {
        return RuntimeHelper.requireNonNull(constants$3255.const$5,"gtk_action_set_is_important");
    }
    /**
     * {@snippet :
     * void gtk_action_set_is_important(struct _GtkAction* action, int is_important);
     * }
     */
    public static void gtk_action_set_is_important(MemorySegment action, int is_important) {
        var mh$ = gtk_action_set_is_important$MH();
        try {
            mh$.invokeExact(action, is_important);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_is_important$MH() {
        return RuntimeHelper.requireNonNull(constants$3256.const$0,"gtk_action_get_is_important");
    }
    /**
     * {@snippet :
     * int gtk_action_get_is_important(struct _GtkAction* action);
     * }
     */
    public static int gtk_action_get_is_important(MemorySegment action) {
        var mh$ = gtk_action_get_is_important$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_set_always_show_image$MH() {
        return RuntimeHelper.requireNonNull(constants$3256.const$1,"gtk_action_set_always_show_image");
    }
    /**
     * {@snippet :
     * void gtk_action_set_always_show_image(struct _GtkAction* action, int always_show);
     * }
     */
    public static void gtk_action_set_always_show_image(MemorySegment action, int always_show) {
        var mh$ = gtk_action_set_always_show_image$MH();
        try {
            mh$.invokeExact(action, always_show);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_get_always_show_image$MH() {
        return RuntimeHelper.requireNonNull(constants$3256.const$2,"gtk_action_get_always_show_image");
    }
    /**
     * {@snippet :
     * int gtk_action_get_always_show_image(struct _GtkAction* action);
     * }
     */
    public static int gtk_action_get_always_show_image(MemorySegment action) {
        var mh$ = gtk_action_get_always_show_image$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_activatable_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3257.const$2,"gtk_activatable_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_activatable_get_type();
     * }
     */
    public static long gtk_activatable_get_type() {
        var mh$ = gtk_activatable_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_activatable_sync_action_properties$MH() {
        return RuntimeHelper.requireNonNull(constants$3257.const$3,"gtk_activatable_sync_action_properties");
    }
    /**
     * {@snippet :
     * void gtk_activatable_sync_action_properties(struct _GtkActivatable* activatable, struct _GtkAction* action);
     * }
     */
    public static void gtk_activatable_sync_action_properties(MemorySegment activatable, MemorySegment action) {
        var mh$ = gtk_activatable_sync_action_properties$MH();
        try {
            mh$.invokeExact(activatable, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_activatable_set_related_action$MH() {
        return RuntimeHelper.requireNonNull(constants$3257.const$4,"gtk_activatable_set_related_action");
    }
    /**
     * {@snippet :
     * void gtk_activatable_set_related_action(struct _GtkActivatable* activatable, struct _GtkAction* action);
     * }
     */
    public static void gtk_activatable_set_related_action(MemorySegment activatable, MemorySegment action) {
        var mh$ = gtk_activatable_set_related_action$MH();
        try {
            mh$.invokeExact(activatable, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_activatable_get_related_action$MH() {
        return RuntimeHelper.requireNonNull(constants$3257.const$5,"gtk_activatable_get_related_action");
    }
    /**
     * {@snippet :
     * struct _GtkAction* gtk_activatable_get_related_action(struct _GtkActivatable* activatable);
     * }
     */
    public static MemorySegment gtk_activatable_get_related_action(MemorySegment activatable) {
        var mh$ = gtk_activatable_get_related_action$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(activatable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_activatable_set_use_action_appearance$MH() {
        return RuntimeHelper.requireNonNull(constants$3258.const$0,"gtk_activatable_set_use_action_appearance");
    }
    /**
     * {@snippet :
     * void gtk_activatable_set_use_action_appearance(struct _GtkActivatable* activatable, int use_appearance);
     * }
     */
    public static void gtk_activatable_set_use_action_appearance(MemorySegment activatable, int use_appearance) {
        var mh$ = gtk_activatable_set_use_action_appearance$MH();
        try {
            mh$.invokeExact(activatable, use_appearance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_activatable_get_use_action_appearance$MH() {
        return RuntimeHelper.requireNonNull(constants$3258.const$1,"gtk_activatable_get_use_action_appearance");
    }
    /**
     * {@snippet :
     * int gtk_activatable_get_use_action_appearance(struct _GtkActivatable* activatable);
     * }
     */
    public static int gtk_activatable_get_use_action_appearance(MemorySegment activatable) {
        var mh$ = gtk_activatable_get_use_action_appearance$MH();
        try {
            return (int)mh$.invokeExact(activatable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_activatable_do_set_related_action$MH() {
        return RuntimeHelper.requireNonNull(constants$3258.const$2,"gtk_activatable_do_set_related_action");
    }
    /**
     * {@snippet :
     * void gtk_activatable_do_set_related_action(struct _GtkActivatable* activatable, struct _GtkAction* action);
     * }
     */
    public static void gtk_activatable_do_set_related_action(MemorySegment activatable, MemorySegment action) {
        var mh$ = gtk_activatable_do_set_related_action$MH();
        try {
            mh$.invokeExact(activatable, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_stock_add$MH() {
        return RuntimeHelper.requireNonNull(constants$3259.const$4,"gtk_stock_add");
    }
    /**
     * {@snippet :
     * void gtk_stock_add(struct _GtkStockItem* items, unsigned int n_items);
     * }
     */
    public static void gtk_stock_add(MemorySegment items, int n_items) {
        var mh$ = gtk_stock_add$MH();
        try {
            mh$.invokeExact(items, n_items);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_stock_add_static$MH() {
        return RuntimeHelper.requireNonNull(constants$3259.const$5,"gtk_stock_add_static");
    }
    /**
     * {@snippet :
     * void gtk_stock_add_static(struct _GtkStockItem* items, unsigned int n_items);
     * }
     */
    public static void gtk_stock_add_static(MemorySegment items, int n_items) {
        var mh$ = gtk_stock_add_static$MH();
        try {
            mh$.invokeExact(items, n_items);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_stock_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$3260.const$0,"gtk_stock_lookup");
    }
    /**
     * {@snippet :
     * int gtk_stock_lookup(char* stock_id, struct _GtkStockItem* item);
     * }
     */
    public static int gtk_stock_lookup(MemorySegment stock_id, MemorySegment item) {
        var mh$ = gtk_stock_lookup$MH();
        try {
            return (int)mh$.invokeExact(stock_id, item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_stock_list_ids$MH() {
        return RuntimeHelper.requireNonNull(constants$3260.const$1,"gtk_stock_list_ids");
    }
    /**
     * {@snippet :
     * struct _GSList* gtk_stock_list_ids();
     * }
     */
    public static MemorySegment gtk_stock_list_ids() {
        var mh$ = gtk_stock_list_ids$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_stock_item_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$3260.const$2,"gtk_stock_item_copy");
    }
    /**
     * {@snippet :
     * struct _GtkStockItem* gtk_stock_item_copy(struct _GtkStockItem* item);
     * }
     */
    public static MemorySegment gtk_stock_item_copy(MemorySegment item) {
        var mh$ = gtk_stock_item_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_stock_item_free$MH() {
        return RuntimeHelper.requireNonNull(constants$3260.const$3,"gtk_stock_item_free");
    }
    /**
     * {@snippet :
     * void gtk_stock_item_free(struct _GtkStockItem* item);
     * }
     */
    public static void gtk_stock_item_free(MemorySegment item) {
        var mh$ = gtk_stock_item_free$MH();
        try {
            mh$.invokeExact(item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_stock_set_translate_func$MH() {
        return RuntimeHelper.requireNonNull(constants$3261.const$0,"gtk_stock_set_translate_func");
    }
    /**
     * {@snippet :
     * void gtk_stock_set_translate_func(char* domain, char* (*func)(char*,void*), void* data, void (*notify)(void*));
     * }
     */
    public static void gtk_stock_set_translate_func(MemorySegment domain, MemorySegment func, MemorySegment data, MemorySegment notify) {
        var mh$ = gtk_stock_set_translate_func$MH();
        try {
            mh$.invokeExact(domain, func, data, notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef char* GtkStock;
     * }
     */
    public static final AddressLayout GtkStock = RuntimeHelper.POINTER;
    public static MethodHandle gtk_action_group_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3267.const$2,"gtk_action_group_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_action_group_get_type();
     * }
     */
    public static long gtk_action_group_get_type() {
        var mh$ = gtk_action_group_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3267.const$3,"gtk_action_group_new");
    }
    /**
     * {@snippet :
     * struct _GtkActionGroup* gtk_action_group_new(char* name);
     * }
     */
    public static MemorySegment gtk_action_group_new(MemorySegment name) {
        var mh$ = gtk_action_group_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3267.const$4,"gtk_action_group_get_name");
    }
    /**
     * {@snippet :
     * char* gtk_action_group_get_name(struct _GtkActionGroup* action_group);
     * }
     */
    public static MemorySegment gtk_action_group_get_name(MemorySegment action_group) {
        var mh$ = gtk_action_group_get_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_get_sensitive$MH() {
        return RuntimeHelper.requireNonNull(constants$3267.const$5,"gtk_action_group_get_sensitive");
    }
    /**
     * {@snippet :
     * int gtk_action_group_get_sensitive(struct _GtkActionGroup* action_group);
     * }
     */
    public static int gtk_action_group_get_sensitive(MemorySegment action_group) {
        var mh$ = gtk_action_group_get_sensitive$MH();
        try {
            return (int)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_set_sensitive$MH() {
        return RuntimeHelper.requireNonNull(constants$3268.const$0,"gtk_action_group_set_sensitive");
    }
    /**
     * {@snippet :
     * void gtk_action_group_set_sensitive(struct _GtkActionGroup* action_group, int sensitive);
     * }
     */
    public static void gtk_action_group_set_sensitive(MemorySegment action_group, int sensitive) {
        var mh$ = gtk_action_group_set_sensitive$MH();
        try {
            mh$.invokeExact(action_group, sensitive);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_get_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$3268.const$1,"gtk_action_group_get_visible");
    }
    /**
     * {@snippet :
     * int gtk_action_group_get_visible(struct _GtkActionGroup* action_group);
     * }
     */
    public static int gtk_action_group_get_visible(MemorySegment action_group) {
        var mh$ = gtk_action_group_get_visible$MH();
        try {
            return (int)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_set_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$3268.const$2,"gtk_action_group_set_visible");
    }
    /**
     * {@snippet :
     * void gtk_action_group_set_visible(struct _GtkActionGroup* action_group, int visible);
     * }
     */
    public static void gtk_action_group_set_visible(MemorySegment action_group, int visible) {
        var mh$ = gtk_action_group_set_visible$MH();
        try {
            mh$.invokeExact(action_group, visible);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_get_accel_group$MH() {
        return RuntimeHelper.requireNonNull(constants$3268.const$3,"gtk_action_group_get_accel_group");
    }
    /**
     * {@snippet :
     * struct _GtkAccelGroup* gtk_action_group_get_accel_group(struct _GtkActionGroup* action_group);
     * }
     */
    public static MemorySegment gtk_action_group_get_accel_group(MemorySegment action_group) {
        var mh$ = gtk_action_group_get_accel_group$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_set_accel_group$MH() {
        return RuntimeHelper.requireNonNull(constants$3268.const$4,"gtk_action_group_set_accel_group");
    }
    /**
     * {@snippet :
     * void gtk_action_group_set_accel_group(struct _GtkActionGroup* action_group, struct _GtkAccelGroup* accel_group);
     * }
     */
    public static void gtk_action_group_set_accel_group(MemorySegment action_group, MemorySegment accel_group) {
        var mh$ = gtk_action_group_set_accel_group$MH();
        try {
            mh$.invokeExact(action_group, accel_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_get_action$MH() {
        return RuntimeHelper.requireNonNull(constants$3268.const$5,"gtk_action_group_get_action");
    }
    /**
     * {@snippet :
     * struct _GtkAction* gtk_action_group_get_action(struct _GtkActionGroup* action_group, char* action_name);
     * }
     */
    public static MemorySegment gtk_action_group_get_action(MemorySegment action_group, MemorySegment action_name) {
        var mh$ = gtk_action_group_get_action$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action_group, action_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_list_actions$MH() {
        return RuntimeHelper.requireNonNull(constants$3269.const$0,"gtk_action_group_list_actions");
    }
    /**
     * {@snippet :
     * struct _GList* gtk_action_group_list_actions(struct _GtkActionGroup* action_group);
     * }
     */
    public static MemorySegment gtk_action_group_list_actions(MemorySegment action_group) {
        var mh$ = gtk_action_group_list_actions$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_add_action$MH() {
        return RuntimeHelper.requireNonNull(constants$3269.const$1,"gtk_action_group_add_action");
    }
    /**
     * {@snippet :
     * void gtk_action_group_add_action(struct _GtkActionGroup* action_group, struct _GtkAction* action);
     * }
     */
    public static void gtk_action_group_add_action(MemorySegment action_group, MemorySegment action) {
        var mh$ = gtk_action_group_add_action$MH();
        try {
            mh$.invokeExact(action_group, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_add_action_with_accel$MH() {
        return RuntimeHelper.requireNonNull(constants$3269.const$2,"gtk_action_group_add_action_with_accel");
    }
    /**
     * {@snippet :
     * void gtk_action_group_add_action_with_accel(struct _GtkActionGroup* action_group, struct _GtkAction* action, char* accelerator);
     * }
     */
    public static void gtk_action_group_add_action_with_accel(MemorySegment action_group, MemorySegment action, MemorySegment accelerator) {
        var mh$ = gtk_action_group_add_action_with_accel$MH();
        try {
            mh$.invokeExact(action_group, action, accelerator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_remove_action$MH() {
        return RuntimeHelper.requireNonNull(constants$3269.const$3,"gtk_action_group_remove_action");
    }
    /**
     * {@snippet :
     * void gtk_action_group_remove_action(struct _GtkActionGroup* action_group, struct _GtkAction* action);
     * }
     */
    public static void gtk_action_group_remove_action(MemorySegment action_group, MemorySegment action) {
        var mh$ = gtk_action_group_remove_action$MH();
        try {
            mh$.invokeExact(action_group, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_add_actions$MH() {
        return RuntimeHelper.requireNonNull(constants$3269.const$4,"gtk_action_group_add_actions");
    }
    /**
     * {@snippet :
     * void gtk_action_group_add_actions(struct _GtkActionGroup* action_group, struct _GtkActionEntry* entries, unsigned int n_entries, void* user_data);
     * }
     */
    public static void gtk_action_group_add_actions(MemorySegment action_group, MemorySegment entries, int n_entries, MemorySegment user_data) {
        var mh$ = gtk_action_group_add_actions$MH();
        try {
            mh$.invokeExact(action_group, entries, n_entries, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_add_toggle_actions$MH() {
        return RuntimeHelper.requireNonNull(constants$3269.const$5,"gtk_action_group_add_toggle_actions");
    }
    /**
     * {@snippet :
     * void gtk_action_group_add_toggle_actions(struct _GtkActionGroup* action_group, struct _GtkToggleActionEntry* entries, unsigned int n_entries, void* user_data);
     * }
     */
    public static void gtk_action_group_add_toggle_actions(MemorySegment action_group, MemorySegment entries, int n_entries, MemorySegment user_data) {
        var mh$ = gtk_action_group_add_toggle_actions$MH();
        try {
            mh$.invokeExact(action_group, entries, n_entries, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_add_radio_actions$MH() {
        return RuntimeHelper.requireNonNull(constants$3270.const$2,"gtk_action_group_add_radio_actions");
    }
    /**
     * {@snippet :
     * void gtk_action_group_add_radio_actions(struct _GtkActionGroup* action_group, struct _GtkRadioActionEntry* entries, unsigned int n_entries, int value, void (*on_change)(), void* user_data);
     * }
     */
    public static void gtk_action_group_add_radio_actions(MemorySegment action_group, MemorySegment entries, int n_entries, int value, MemorySegment on_change, MemorySegment user_data) {
        var mh$ = gtk_action_group_add_radio_actions$MH();
        try {
            mh$.invokeExact(action_group, entries, n_entries, value, on_change, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_add_actions_full$MH() {
        return RuntimeHelper.requireNonNull(constants$3270.const$4,"gtk_action_group_add_actions_full");
    }
    /**
     * {@snippet :
     * void gtk_action_group_add_actions_full(struct _GtkActionGroup* action_group, struct _GtkActionEntry* entries, unsigned int n_entries, void* user_data, void (*destroy)(void*));
     * }
     */
    public static void gtk_action_group_add_actions_full(MemorySegment action_group, MemorySegment entries, int n_entries, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_action_group_add_actions_full$MH();
        try {
            mh$.invokeExact(action_group, entries, n_entries, user_data, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_add_toggle_actions_full$MH() {
        return RuntimeHelper.requireNonNull(constants$3271.const$0,"gtk_action_group_add_toggle_actions_full");
    }
    /**
     * {@snippet :
     * void gtk_action_group_add_toggle_actions_full(struct _GtkActionGroup* action_group, struct _GtkToggleActionEntry* entries, unsigned int n_entries, void* user_data, void (*destroy)(void*));
     * }
     */
    public static void gtk_action_group_add_toggle_actions_full(MemorySegment action_group, MemorySegment entries, int n_entries, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_action_group_add_toggle_actions_full$MH();
        try {
            mh$.invokeExact(action_group, entries, n_entries, user_data, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_add_radio_actions_full$MH() {
        return RuntimeHelper.requireNonNull(constants$3271.const$3,"gtk_action_group_add_radio_actions_full");
    }
    /**
     * {@snippet :
     * void gtk_action_group_add_radio_actions_full(struct _GtkActionGroup* action_group, struct _GtkRadioActionEntry* entries, unsigned int n_entries, int value, void (*on_change)(), void* user_data, void (*destroy)(void*));
     * }
     */
    public static void gtk_action_group_add_radio_actions_full(MemorySegment action_group, MemorySegment entries, int n_entries, int value, MemorySegment on_change, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_action_group_add_radio_actions_full$MH();
        try {
            mh$.invokeExact(action_group, entries, n_entries, value, on_change, user_data, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_set_translate_func$MH() {
        return RuntimeHelper.requireNonNull(constants$3272.const$0,"gtk_action_group_set_translate_func");
    }
    /**
     * {@snippet :
     * void gtk_action_group_set_translate_func(struct _GtkActionGroup* action_group, char* (*func)(char*,void*), void* data, void (*notify)(void*));
     * }
     */
    public static void gtk_action_group_set_translate_func(MemorySegment action_group, MemorySegment func, MemorySegment data, MemorySegment notify) {
        var mh$ = gtk_action_group_set_translate_func$MH();
        try {
            mh$.invokeExact(action_group, func, data, notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_set_translation_domain$MH() {
        return RuntimeHelper.requireNonNull(constants$3272.const$1,"gtk_action_group_set_translation_domain");
    }
    /**
     * {@snippet :
     * void gtk_action_group_set_translation_domain(struct _GtkActionGroup* action_group, char* domain);
     * }
     */
    public static void gtk_action_group_set_translation_domain(MemorySegment action_group, MemorySegment domain) {
        var mh$ = gtk_action_group_set_translation_domain$MH();
        try {
            mh$.invokeExact(action_group, domain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_action_group_translate_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3272.const$2,"gtk_action_group_translate_string");
    }
    /**
     * {@snippet :
     * char* gtk_action_group_translate_string(struct _GtkActionGroup* action_group, char* string);
     * }
     */
    public static MemorySegment gtk_action_group_translate_string(MemorySegment action_group, MemorySegment string) {
        var mh$ = gtk_action_group_translate_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action_group, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_action_group_emit_connect_proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$3272.const$3,"_gtk_action_group_emit_connect_proxy");
    }
    /**
     * {@snippet :
     * void _gtk_action_group_emit_connect_proxy(struct _GtkActionGroup* action_group, struct _GtkAction* action, struct _GtkWidget* proxy);
     * }
     */
    public static void _gtk_action_group_emit_connect_proxy(MemorySegment action_group, MemorySegment action, MemorySegment proxy) {
        var mh$ = _gtk_action_group_emit_connect_proxy$MH();
        try {
            mh$.invokeExact(action_group, action, proxy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_action_group_emit_disconnect_proxy$MH() {
        return RuntimeHelper.requireNonNull(constants$3272.const$4,"_gtk_action_group_emit_disconnect_proxy");
    }
    /**
     * {@snippet :
     * void _gtk_action_group_emit_disconnect_proxy(struct _GtkActionGroup* action_group, struct _GtkAction* action, struct _GtkWidget* proxy);
     * }
     */
    public static void _gtk_action_group_emit_disconnect_proxy(MemorySegment action_group, MemorySegment action, MemorySegment proxy) {
        var mh$ = _gtk_action_group_emit_disconnect_proxy$MH();
        try {
            mh$.invokeExact(action_group, action, proxy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_action_group_emit_pre_activate$MH() {
        return RuntimeHelper.requireNonNull(constants$3272.const$5,"_gtk_action_group_emit_pre_activate");
    }
    /**
     * {@snippet :
     * void _gtk_action_group_emit_pre_activate(struct _GtkActionGroup* action_group, struct _GtkAction* action);
     * }
     */
    public static void _gtk_action_group_emit_pre_activate(MemorySegment action_group, MemorySegment action) {
        var mh$ = _gtk_action_group_emit_pre_activate$MH();
        try {
            mh$.invokeExact(action_group, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_action_group_emit_post_activate$MH() {
        return RuntimeHelper.requireNonNull(constants$3273.const$0,"_gtk_action_group_emit_post_activate");
    }
    /**
     * {@snippet :
     * void _gtk_action_group_emit_post_activate(struct _GtkActionGroup* action_group, struct _GtkAction* action);
     * }
     */
    public static void _gtk_action_group_emit_post_activate(MemorySegment action_group, MemorySegment action) {
        var mh$ = _gtk_action_group_emit_post_activate$MH();
        try {
            mh$.invokeExact(action_group, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_alignment_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3275.const$0,"gtk_alignment_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_alignment_get_type();
     * }
     */
    public static long gtk_alignment_get_type() {
        var mh$ = gtk_alignment_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_alignment_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3275.const$2,"gtk_alignment_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_alignment_new(float xalign, float yalign, float xscale, float yscale);
     * }
     */
    public static MemorySegment gtk_alignment_new(float xalign, float yalign, float xscale, float yscale) {
        var mh$ = gtk_alignment_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(xalign, yalign, xscale, yscale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_alignment_set$MH() {
        return RuntimeHelper.requireNonNull(constants$3275.const$4,"gtk_alignment_set");
    }
    /**
     * {@snippet :
     * void gtk_alignment_set(struct _GtkAlignment* alignment, float xalign, float yalign, float xscale, float yscale);
     * }
     */
    public static void gtk_alignment_set(MemorySegment alignment, float xalign, float yalign, float xscale, float yscale) {
        var mh$ = gtk_alignment_set$MH();
        try {
            mh$.invokeExact(alignment, xalign, yalign, xscale, yscale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_alignment_set_padding$MH() {
        return RuntimeHelper.requireNonNull(constants$3275.const$5,"gtk_alignment_set_padding");
    }
    /**
     * {@snippet :
     * void gtk_alignment_set_padding(struct _GtkAlignment* alignment, unsigned int padding_top, unsigned int padding_bottom, unsigned int padding_left, unsigned int padding_right);
     * }
     */
    public static void gtk_alignment_set_padding(MemorySegment alignment, int padding_top, int padding_bottom, int padding_left, int padding_right) {
        var mh$ = gtk_alignment_set_padding$MH();
        try {
            mh$.invokeExact(alignment, padding_top, padding_bottom, padding_left, padding_right);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_alignment_get_padding$MH() {
        return RuntimeHelper.requireNonNull(constants$3276.const$0,"gtk_alignment_get_padding");
    }
    /**
     * {@snippet :
     * void gtk_alignment_get_padding(struct _GtkAlignment* alignment, unsigned int* padding_top, unsigned int* padding_bottom, unsigned int* padding_left, unsigned int* padding_right);
     * }
     */
    public static void gtk_alignment_get_padding(MemorySegment alignment, MemorySegment padding_top, MemorySegment padding_bottom, MemorySegment padding_left, MemorySegment padding_right) {
        var mh$ = gtk_alignment_get_padding$MH();
        try {
            mh$.invokeExact(alignment, padding_top, padding_bottom, padding_left, padding_right);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3278.const$4,"gtk_color_selection_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_color_selection_get_type();
     * }
     */
    public static long gtk_color_selection_get_type() {
        var mh$ = gtk_color_selection_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3278.const$5,"gtk_color_selection_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_color_selection_new();
     * }
     */
    public static MemorySegment gtk_color_selection_new() {
        var mh$ = gtk_color_selection_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_get_has_opacity_control$MH() {
        return RuntimeHelper.requireNonNull(constants$3279.const$0,"gtk_color_selection_get_has_opacity_control");
    }
    /**
     * {@snippet :
     * int gtk_color_selection_get_has_opacity_control(struct _GtkColorSelection* colorsel);
     * }
     */
    public static int gtk_color_selection_get_has_opacity_control(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_get_has_opacity_control$MH();
        try {
            return (int)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_set_has_opacity_control$MH() {
        return RuntimeHelper.requireNonNull(constants$3279.const$1,"gtk_color_selection_set_has_opacity_control");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_set_has_opacity_control(struct _GtkColorSelection* colorsel, int has_opacity);
     * }
     */
    public static void gtk_color_selection_set_has_opacity_control(MemorySegment colorsel, int has_opacity) {
        var mh$ = gtk_color_selection_set_has_opacity_control$MH();
        try {
            mh$.invokeExact(colorsel, has_opacity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_get_has_palette$MH() {
        return RuntimeHelper.requireNonNull(constants$3279.const$2,"gtk_color_selection_get_has_palette");
    }
    /**
     * {@snippet :
     * int gtk_color_selection_get_has_palette(struct _GtkColorSelection* colorsel);
     * }
     */
    public static int gtk_color_selection_get_has_palette(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_get_has_palette$MH();
        try {
            return (int)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_set_has_palette$MH() {
        return RuntimeHelper.requireNonNull(constants$3279.const$3,"gtk_color_selection_set_has_palette");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_set_has_palette(struct _GtkColorSelection* colorsel, int has_palette);
     * }
     */
    public static void gtk_color_selection_set_has_palette(MemorySegment colorsel, int has_palette) {
        var mh$ = gtk_color_selection_set_has_palette$MH();
        try {
            mh$.invokeExact(colorsel, has_palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_set_current_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$3279.const$4,"gtk_color_selection_set_current_alpha");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_set_current_alpha(struct _GtkColorSelection* colorsel, unsigned short alpha);
     * }
     */
    public static void gtk_color_selection_set_current_alpha(MemorySegment colorsel, short alpha) {
        var mh$ = gtk_color_selection_set_current_alpha$MH();
        try {
            mh$.invokeExact(colorsel, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_get_current_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$3279.const$5,"gtk_color_selection_get_current_alpha");
    }
    /**
     * {@snippet :
     * unsigned short gtk_color_selection_get_current_alpha(struct _GtkColorSelection* colorsel);
     * }
     */
    public static short gtk_color_selection_get_current_alpha(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_get_current_alpha$MH();
        try {
            return (short)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_set_previous_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$3280.const$0,"gtk_color_selection_set_previous_alpha");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_set_previous_alpha(struct _GtkColorSelection* colorsel, unsigned short alpha);
     * }
     */
    public static void gtk_color_selection_set_previous_alpha(MemorySegment colorsel, short alpha) {
        var mh$ = gtk_color_selection_set_previous_alpha$MH();
        try {
            mh$.invokeExact(colorsel, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_get_previous_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$3280.const$1,"gtk_color_selection_get_previous_alpha");
    }
    /**
     * {@snippet :
     * unsigned short gtk_color_selection_get_previous_alpha(struct _GtkColorSelection* colorsel);
     * }
     */
    public static short gtk_color_selection_get_previous_alpha(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_get_previous_alpha$MH();
        try {
            return (short)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_set_current_rgba$MH() {
        return RuntimeHelper.requireNonNull(constants$3280.const$2,"gtk_color_selection_set_current_rgba");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_set_current_rgba(struct _GtkColorSelection* colorsel, struct _GdkRGBA* rgba);
     * }
     */
    public static void gtk_color_selection_set_current_rgba(MemorySegment colorsel, MemorySegment rgba) {
        var mh$ = gtk_color_selection_set_current_rgba$MH();
        try {
            mh$.invokeExact(colorsel, rgba);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_get_current_rgba$MH() {
        return RuntimeHelper.requireNonNull(constants$3280.const$3,"gtk_color_selection_get_current_rgba");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_get_current_rgba(struct _GtkColorSelection* colorsel, struct _GdkRGBA* rgba);
     * }
     */
    public static void gtk_color_selection_get_current_rgba(MemorySegment colorsel, MemorySegment rgba) {
        var mh$ = gtk_color_selection_get_current_rgba$MH();
        try {
            mh$.invokeExact(colorsel, rgba);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_set_previous_rgba$MH() {
        return RuntimeHelper.requireNonNull(constants$3280.const$4,"gtk_color_selection_set_previous_rgba");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_set_previous_rgba(struct _GtkColorSelection* colorsel, struct _GdkRGBA* rgba);
     * }
     */
    public static void gtk_color_selection_set_previous_rgba(MemorySegment colorsel, MemorySegment rgba) {
        var mh$ = gtk_color_selection_set_previous_rgba$MH();
        try {
            mh$.invokeExact(colorsel, rgba);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_get_previous_rgba$MH() {
        return RuntimeHelper.requireNonNull(constants$3280.const$5,"gtk_color_selection_get_previous_rgba");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_get_previous_rgba(struct _GtkColorSelection* colorsel, struct _GdkRGBA* rgba);
     * }
     */
    public static void gtk_color_selection_get_previous_rgba(MemorySegment colorsel, MemorySegment rgba) {
        var mh$ = gtk_color_selection_get_previous_rgba$MH();
        try {
            mh$.invokeExact(colorsel, rgba);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_is_adjusting$MH() {
        return RuntimeHelper.requireNonNull(constants$3281.const$0,"gtk_color_selection_is_adjusting");
    }
    /**
     * {@snippet :
     * int gtk_color_selection_is_adjusting(struct _GtkColorSelection* colorsel);
     * }
     */
    public static int gtk_color_selection_is_adjusting(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_is_adjusting$MH();
        try {
            return (int)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_palette_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3281.const$1,"gtk_color_selection_palette_from_string");
    }
    /**
     * {@snippet :
     * int gtk_color_selection_palette_from_string(char* str, struct _GdkColor** colors, int* n_colors);
     * }
     */
    public static int gtk_color_selection_palette_from_string(MemorySegment str, MemorySegment colors, MemorySegment n_colors) {
        var mh$ = gtk_color_selection_palette_from_string$MH();
        try {
            return (int)mh$.invokeExact(str, colors, n_colors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_palette_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3281.const$2,"gtk_color_selection_palette_to_string");
    }
    /**
     * {@snippet :
     * char* gtk_color_selection_palette_to_string(struct _GdkColor* colors, int n_colors);
     * }
     */
    public static MemorySegment gtk_color_selection_palette_to_string(MemorySegment colors, int n_colors) {
        var mh$ = gtk_color_selection_palette_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(colors, n_colors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_set_change_palette_with_screen_hook$MH() {
        return RuntimeHelper.requireNonNull(constants$3281.const$5,"gtk_color_selection_set_change_palette_with_screen_hook");
    }
    /**
     * {@snippet :
     * void (*gtk_color_selection_set_change_palette_with_screen_hook(void (*func)(struct _GdkScreen*,struct _GdkColor*,int)))(struct _GdkScreen*,struct _GdkColor*,int);
     * }
     */
    public static MemorySegment gtk_color_selection_set_change_palette_with_screen_hook(MemorySegment func) {
        var mh$ = gtk_color_selection_set_change_palette_with_screen_hook$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_set_current_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3282.const$0,"gtk_color_selection_set_current_color");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_set_current_color(struct _GtkColorSelection* colorsel, struct _GdkColor* color);
     * }
     */
    public static void gtk_color_selection_set_current_color(MemorySegment colorsel, MemorySegment color) {
        var mh$ = gtk_color_selection_set_current_color$MH();
        try {
            mh$.invokeExact(colorsel, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_get_current_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3282.const$1,"gtk_color_selection_get_current_color");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_get_current_color(struct _GtkColorSelection* colorsel, struct _GdkColor* color);
     * }
     */
    public static void gtk_color_selection_get_current_color(MemorySegment colorsel, MemorySegment color) {
        var mh$ = gtk_color_selection_get_current_color$MH();
        try {
            mh$.invokeExact(colorsel, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_set_previous_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3282.const$2,"gtk_color_selection_set_previous_color");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_set_previous_color(struct _GtkColorSelection* colorsel, struct _GdkColor* color);
     * }
     */
    public static void gtk_color_selection_set_previous_color(MemorySegment colorsel, MemorySegment color) {
        var mh$ = gtk_color_selection_set_previous_color$MH();
        try {
            mh$.invokeExact(colorsel, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_get_previous_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3282.const$3,"gtk_color_selection_get_previous_color");
    }
    /**
     * {@snippet :
     * void gtk_color_selection_get_previous_color(struct _GtkColorSelection* colorsel, struct _GdkColor* color);
     * }
     */
    public static void gtk_color_selection_get_previous_color(MemorySegment colorsel, MemorySegment color) {
        var mh$ = gtk_color_selection_get_previous_color$MH();
        try {
            mh$.invokeExact(colorsel, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_dialog_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3284.const$3,"gtk_color_selection_dialog_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_color_selection_dialog_get_type();
     * }
     */
    public static long gtk_color_selection_dialog_get_type() {
        var mh$ = gtk_color_selection_dialog_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_dialog_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3284.const$4,"gtk_color_selection_dialog_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_color_selection_dialog_new(char* title);
     * }
     */
    public static MemorySegment gtk_color_selection_dialog_new(MemorySegment title) {
        var mh$ = gtk_color_selection_dialog_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_color_selection_dialog_get_color_selection$MH() {
        return RuntimeHelper.requireNonNull(constants$3284.const$5,"gtk_color_selection_dialog_get_color_selection");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_color_selection_dialog_get_color_selection(struct _GtkColorSelectionDialog* colorsel);
     * }
     */
    public static MemorySegment gtk_color_selection_dialog_get_color_selection(MemorySegment colorsel) {
        var mh$ = gtk_color_selection_dialog_get_color_selection$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(colorsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3288.const$4,"gtk_font_selection_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_font_selection_get_type();
     * }
     */
    public static long gtk_font_selection_get_type() {
        var mh$ = gtk_font_selection_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3288.const$5,"gtk_font_selection_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_font_selection_new();
     * }
     */
    public static MemorySegment gtk_font_selection_new() {
        var mh$ = gtk_font_selection_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_family_list$MH() {
        return RuntimeHelper.requireNonNull(constants$3289.const$0,"gtk_font_selection_get_family_list");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_font_selection_get_family_list(struct _GtkFontSelection* fontsel);
     * }
     */
    public static MemorySegment gtk_font_selection_get_family_list(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_family_list$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_face_list$MH() {
        return RuntimeHelper.requireNonNull(constants$3289.const$1,"gtk_font_selection_get_face_list");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_font_selection_get_face_list(struct _GtkFontSelection* fontsel);
     * }
     */
    public static MemorySegment gtk_font_selection_get_face_list(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_face_list$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_size_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$3289.const$2,"gtk_font_selection_get_size_entry");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_font_selection_get_size_entry(struct _GtkFontSelection* fontsel);
     * }
     */
    public static MemorySegment gtk_font_selection_get_size_entry(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_size_entry$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_size_list$MH() {
        return RuntimeHelper.requireNonNull(constants$3289.const$3,"gtk_font_selection_get_size_list");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_font_selection_get_size_list(struct _GtkFontSelection* fontsel);
     * }
     */
    public static MemorySegment gtk_font_selection_get_size_list(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_size_list$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_preview_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$3289.const$4,"gtk_font_selection_get_preview_entry");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_font_selection_get_preview_entry(struct _GtkFontSelection* fontsel);
     * }
     */
    public static MemorySegment gtk_font_selection_get_preview_entry(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_preview_entry$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_family$MH() {
        return RuntimeHelper.requireNonNull(constants$3289.const$5,"gtk_font_selection_get_family");
    }
    /**
     * {@snippet :
     * struct _PangoFontFamily* gtk_font_selection_get_family(struct _GtkFontSelection* fontsel);
     * }
     */
    public static MemorySegment gtk_font_selection_get_family(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_family$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_face$MH() {
        return RuntimeHelper.requireNonNull(constants$3290.const$0,"gtk_font_selection_get_face");
    }
    /**
     * {@snippet :
     * struct _PangoFontFace* gtk_font_selection_get_face(struct _GtkFontSelection* fontsel);
     * }
     */
    public static MemorySegment gtk_font_selection_get_face(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_face$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$3290.const$1,"gtk_font_selection_get_size");
    }
    /**
     * {@snippet :
     * int gtk_font_selection_get_size(struct _GtkFontSelection* fontsel);
     * }
     */
    public static int gtk_font_selection_get_size(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_size$MH();
        try {
            return (int)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_font_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3290.const$2,"gtk_font_selection_get_font_name");
    }
    /**
     * {@snippet :
     * char* gtk_font_selection_get_font_name(struct _GtkFontSelection* fontsel);
     * }
     */
    public static MemorySegment gtk_font_selection_get_font_name(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_font_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_set_font_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3290.const$3,"gtk_font_selection_set_font_name");
    }
    /**
     * {@snippet :
     * int gtk_font_selection_set_font_name(struct _GtkFontSelection* fontsel, char* fontname);
     * }
     */
    public static int gtk_font_selection_set_font_name(MemorySegment fontsel, MemorySegment fontname) {
        var mh$ = gtk_font_selection_set_font_name$MH();
        try {
            return (int)mh$.invokeExact(fontsel, fontname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_get_preview_text$MH() {
        return RuntimeHelper.requireNonNull(constants$3290.const$4,"gtk_font_selection_get_preview_text");
    }
    /**
     * {@snippet :
     * char* gtk_font_selection_get_preview_text(struct _GtkFontSelection* fontsel);
     * }
     */
    public static MemorySegment gtk_font_selection_get_preview_text(MemorySegment fontsel) {
        var mh$ = gtk_font_selection_get_preview_text$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fontsel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_set_preview_text$MH() {
        return RuntimeHelper.requireNonNull(constants$3290.const$5,"gtk_font_selection_set_preview_text");
    }
    /**
     * {@snippet :
     * void gtk_font_selection_set_preview_text(struct _GtkFontSelection* fontsel, char* text);
     * }
     */
    public static void gtk_font_selection_set_preview_text(MemorySegment fontsel, MemorySegment text) {
        var mh$ = gtk_font_selection_set_preview_text$MH();
        try {
            mh$.invokeExact(fontsel, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3291.const$0,"gtk_font_selection_dialog_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_font_selection_dialog_get_type();
     * }
     */
    public static long gtk_font_selection_dialog_get_type() {
        var mh$ = gtk_font_selection_dialog_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3291.const$1,"gtk_font_selection_dialog_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_font_selection_dialog_new(char* title);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_new(MemorySegment title) {
        var mh$ = gtk_font_selection_dialog_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_ok_button$MH() {
        return RuntimeHelper.requireNonNull(constants$3291.const$2,"gtk_font_selection_dialog_get_ok_button");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_font_selection_dialog_get_ok_button(struct _GtkFontSelectionDialog* fsd);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_ok_button(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_ok_button$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_cancel_button$MH() {
        return RuntimeHelper.requireNonNull(constants$3291.const$3,"gtk_font_selection_dialog_get_cancel_button");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_font_selection_dialog_get_cancel_button(struct _GtkFontSelectionDialog* fsd);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_cancel_button(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_cancel_button$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_font_selection$MH() {
        return RuntimeHelper.requireNonNull(constants$3291.const$4,"gtk_font_selection_dialog_get_font_selection");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_font_selection_dialog_get_font_selection(struct _GtkFontSelectionDialog* fsd);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_font_selection(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_font_selection$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_font_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3291.const$5,"gtk_font_selection_dialog_get_font_name");
    }
    /**
     * {@snippet :
     * char* gtk_font_selection_dialog_get_font_name(struct _GtkFontSelectionDialog* fsd);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_font_name(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_font_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_set_font_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3292.const$0,"gtk_font_selection_dialog_set_font_name");
    }
    /**
     * {@snippet :
     * int gtk_font_selection_dialog_set_font_name(struct _GtkFontSelectionDialog* fsd, char* fontname);
     * }
     */
    public static int gtk_font_selection_dialog_set_font_name(MemorySegment fsd, MemorySegment fontname) {
        var mh$ = gtk_font_selection_dialog_set_font_name$MH();
        try {
            return (int)mh$.invokeExact(fsd, fontname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_preview_text$MH() {
        return RuntimeHelper.requireNonNull(constants$3292.const$1,"gtk_font_selection_dialog_get_preview_text");
    }
    /**
     * {@snippet :
     * char* gtk_font_selection_dialog_get_preview_text(struct _GtkFontSelectionDialog* fsd);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_preview_text(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_preview_text$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_set_preview_text$MH() {
        return RuntimeHelper.requireNonNull(constants$3292.const$2,"gtk_font_selection_dialog_set_preview_text");
    }
    /**
     * {@snippet :
     * void gtk_font_selection_dialog_set_preview_text(struct _GtkFontSelectionDialog* fsd, char* text);
     * }
     */
    public static void gtk_font_selection_dialog_set_preview_text(MemorySegment fsd, MemorySegment text) {
        var mh$ = gtk_font_selection_dialog_set_preview_text$MH();
        try {
            mh$.invokeExact(fsd, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3292.const$3,"gtk_symbolic_color_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_symbolic_color_get_type();
     * }
     */
    public static long gtk_symbolic_color_get_type() {
        var mh$ = gtk_symbolic_color_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$3292.const$4,"gtk_symbolic_color_new_literal");
    }
    /**
     * {@snippet :
     * struct _GtkSymbolicColor* gtk_symbolic_color_new_literal(struct _GdkRGBA* color);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_literal(MemorySegment color) {
        var mh$ = gtk_symbolic_color_new_literal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3292.const$5,"gtk_symbolic_color_new_name");
    }
    /**
     * {@snippet :
     * struct _GtkSymbolicColor* gtk_symbolic_color_new_name(char* name);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_name(MemorySegment name) {
        var mh$ = gtk_symbolic_color_new_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_shade$MH() {
        return RuntimeHelper.requireNonNull(constants$3293.const$0,"gtk_symbolic_color_new_shade");
    }
    /**
     * {@snippet :
     * struct _GtkSymbolicColor* gtk_symbolic_color_new_shade(struct _GtkSymbolicColor* color, double factor);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_shade(MemorySegment color, double factor) {
        var mh$ = gtk_symbolic_color_new_shade$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$3293.const$1,"gtk_symbolic_color_new_alpha");
    }
    /**
     * {@snippet :
     * struct _GtkSymbolicColor* gtk_symbolic_color_new_alpha(struct _GtkSymbolicColor* color, double factor);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_alpha(MemorySegment color, double factor) {
        var mh$ = gtk_symbolic_color_new_alpha$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_mix$MH() {
        return RuntimeHelper.requireNonNull(constants$3293.const$3,"gtk_symbolic_color_new_mix");
    }
    /**
     * {@snippet :
     * struct _GtkSymbolicColor* gtk_symbolic_color_new_mix(struct _GtkSymbolicColor* color1, struct _GtkSymbolicColor* color2, double factor);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_mix(MemorySegment color1, MemorySegment color2, double factor) {
        var mh$ = gtk_symbolic_color_new_mix$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color1, color2, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_win32$MH() {
        return RuntimeHelper.requireNonNull(constants$3293.const$4,"gtk_symbolic_color_new_win32");
    }
    /**
     * {@snippet :
     * struct _GtkSymbolicColor* gtk_symbolic_color_new_win32(char* theme_class, int id);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_win32(MemorySegment theme_class, int id) {
        var mh$ = gtk_symbolic_color_new_win32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(theme_class, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$3293.const$5,"gtk_symbolic_color_ref");
    }
    /**
     * {@snippet :
     * struct _GtkSymbolicColor* gtk_symbolic_color_ref(struct _GtkSymbolicColor* color);
     * }
     */
    public static MemorySegment gtk_symbolic_color_ref(MemorySegment color) {
        var mh$ = gtk_symbolic_color_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$3294.const$0,"gtk_symbolic_color_unref");
    }
    /**
     * {@snippet :
     * void gtk_symbolic_color_unref(struct _GtkSymbolicColor* color);
     * }
     */
    public static void gtk_symbolic_color_unref(MemorySegment color) {
        var mh$ = gtk_symbolic_color_unref$MH();
        try {
            mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3294.const$1,"gtk_symbolic_color_to_string");
    }
    /**
     * {@snippet :
     * char* gtk_symbolic_color_to_string(struct _GtkSymbolicColor* color);
     * }
     */
    public static MemorySegment gtk_symbolic_color_to_string(MemorySegment color) {
        var mh$ = gtk_symbolic_color_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_resolve$MH() {
        return RuntimeHelper.requireNonNull(constants$3294.const$2,"gtk_symbolic_color_resolve");
    }
    /**
     * {@snippet :
     * int gtk_symbolic_color_resolve(struct _GtkSymbolicColor* color, struct _GtkStyleProperties* props, struct _GdkRGBA* resolved_color);
     * }
     */
    public static int gtk_symbolic_color_resolve(MemorySegment color, MemorySegment props, MemorySegment resolved_color) {
        var mh$ = gtk_symbolic_color_resolve$MH();
        try {
            return (int)mh$.invokeExact(color, props, resolved_color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3294.const$3,"gtk_gradient_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_gradient_get_type();
     * }
     */
    public static long gtk_gradient_get_type() {
        var mh$ = gtk_gradient_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_new_linear$MH() {
        return RuntimeHelper.requireNonNull(constants$3294.const$4,"gtk_gradient_new_linear");
    }
    /**
     * {@snippet :
     * struct _GtkGradient* gtk_gradient_new_linear(double x0, double y0, double x1, double y1);
     * }
     */
    public static MemorySegment gtk_gradient_new_linear(double x0, double y0, double x1, double y1) {
        var mh$ = gtk_gradient_new_linear$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, y0, x1, y1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_new_radial$MH() {
        return RuntimeHelper.requireNonNull(constants$3294.const$5,"gtk_gradient_new_radial");
    }
    /**
     * {@snippet :
     * struct _GtkGradient* gtk_gradient_new_radial(double x0, double y0, double radius0, double x1, double y1, double radius1);
     * }
     */
    public static MemorySegment gtk_gradient_new_radial(double x0, double y0, double radius0, double x1, double y1, double radius1) {
        var mh$ = gtk_gradient_new_radial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, y0, radius0, x1, y1, radius1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_add_color_stop$MH() {
        return RuntimeHelper.requireNonNull(constants$3295.const$1,"gtk_gradient_add_color_stop");
    }
    /**
     * {@snippet :
     * void gtk_gradient_add_color_stop(struct _GtkGradient* gradient, double offset, struct _GtkSymbolicColor* color);
     * }
     */
    public static void gtk_gradient_add_color_stop(MemorySegment gradient, double offset, MemorySegment color) {
        var mh$ = gtk_gradient_add_color_stop$MH();
        try {
            mh$.invokeExact(gradient, offset, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$3295.const$2,"gtk_gradient_ref");
    }
    /**
     * {@snippet :
     * struct _GtkGradient* gtk_gradient_ref(struct _GtkGradient* gradient);
     * }
     */
    public static MemorySegment gtk_gradient_ref(MemorySegment gradient) {
        var mh$ = gtk_gradient_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gradient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$3295.const$3,"gtk_gradient_unref");
    }
    /**
     * {@snippet :
     * void gtk_gradient_unref(struct _GtkGradient* gradient);
     * }
     */
    public static void gtk_gradient_unref(MemorySegment gradient) {
        var mh$ = gtk_gradient_unref$MH();
        try {
            mh$.invokeExact(gradient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_resolve$MH() {
        return RuntimeHelper.requireNonNull(constants$3295.const$4,"gtk_gradient_resolve");
    }
    /**
     * {@snippet :
     * int gtk_gradient_resolve(struct _GtkGradient* gradient, struct _GtkStyleProperties* props, struct _cairo_pattern** resolved_gradient);
     * }
     */
    public static int gtk_gradient_resolve(MemorySegment gradient, MemorySegment props, MemorySegment resolved_gradient) {
        var mh$ = gtk_gradient_resolve$MH();
        try {
            return (int)mh$.invokeExact(gradient, props, resolved_gradient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_resolve_for_context$MH() {
        return RuntimeHelper.requireNonNull(constants$3295.const$5,"gtk_gradient_resolve_for_context");
    }
    /**
     * {@snippet :
     * struct _cairo_pattern* gtk_gradient_resolve_for_context(struct _GtkGradient* gradient, struct _GtkStyleContext* context);
     * }
     */
    public static MemorySegment gtk_gradient_resolve_for_context(MemorySegment gradient, MemorySegment context) {
        var mh$ = gtk_gradient_resolve_for_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gradient, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3296.const$0,"gtk_gradient_to_string");
    }
    /**
     * {@snippet :
     * char* gtk_gradient_to_string(struct _GtkGradient* gradient);
     * }
     */
    public static MemorySegment gtk_gradient_to_string(MemorySegment gradient) {
        var mh$ = gtk_gradient_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gradient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3298.const$4,"gtk_handle_box_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_handle_box_get_type();
     * }
     */
    public static long gtk_handle_box_get_type() {
        var mh$ = gtk_handle_box_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3298.const$5,"gtk_handle_box_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_handle_box_new();
     * }
     */
    public static MemorySegment gtk_handle_box_new() {
        var mh$ = gtk_handle_box_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_set_shadow_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3299.const$0,"gtk_handle_box_set_shadow_type");
    }
    /**
     * {@snippet :
     * void gtk_handle_box_set_shadow_type(struct _GtkHandleBox* handle_box, enum GtkShadowType type);
     * }
     */
    public static void gtk_handle_box_set_shadow_type(MemorySegment handle_box, int type) {
        var mh$ = gtk_handle_box_set_shadow_type$MH();
        try {
            mh$.invokeExact(handle_box, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_get_shadow_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3299.const$1,"gtk_handle_box_get_shadow_type");
    }
    /**
     * {@snippet :
     * enum GtkShadowType gtk_handle_box_get_shadow_type(struct _GtkHandleBox* handle_box);
     * }
     */
    public static int gtk_handle_box_get_shadow_type(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_shadow_type$MH();
        try {
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_set_handle_position$MH() {
        return RuntimeHelper.requireNonNull(constants$3299.const$2,"gtk_handle_box_set_handle_position");
    }
    /**
     * {@snippet :
     * void gtk_handle_box_set_handle_position(struct _GtkHandleBox* handle_box, enum GtkPositionType position);
     * }
     */
    public static void gtk_handle_box_set_handle_position(MemorySegment handle_box, int position) {
        var mh$ = gtk_handle_box_set_handle_position$MH();
        try {
            mh$.invokeExact(handle_box, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_get_handle_position$MH() {
        return RuntimeHelper.requireNonNull(constants$3299.const$3,"gtk_handle_box_get_handle_position");
    }
    /**
     * {@snippet :
     * enum GtkPositionType gtk_handle_box_get_handle_position(struct _GtkHandleBox* handle_box);
     * }
     */
    public static int gtk_handle_box_get_handle_position(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_handle_position$MH();
        try {
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_set_snap_edge$MH() {
        return RuntimeHelper.requireNonNull(constants$3299.const$4,"gtk_handle_box_set_snap_edge");
    }
    /**
     * {@snippet :
     * void gtk_handle_box_set_snap_edge(struct _GtkHandleBox* handle_box, enum GtkPositionType edge);
     * }
     */
    public static void gtk_handle_box_set_snap_edge(MemorySegment handle_box, int edge) {
        var mh$ = gtk_handle_box_set_snap_edge$MH();
        try {
            mh$.invokeExact(handle_box, edge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_get_snap_edge$MH() {
        return RuntimeHelper.requireNonNull(constants$3299.const$5,"gtk_handle_box_get_snap_edge");
    }
    /**
     * {@snippet :
     * enum GtkPositionType gtk_handle_box_get_snap_edge(struct _GtkHandleBox* handle_box);
     * }
     */
    public static int gtk_handle_box_get_snap_edge(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_snap_edge$MH();
        try {
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_get_child_detached$MH() {
        return RuntimeHelper.requireNonNull(constants$3300.const$0,"gtk_handle_box_get_child_detached");
    }
    /**
     * {@snippet :
     * int gtk_handle_box_get_child_detached(struct _GtkHandleBox* handle_box);
     * }
     */
    public static int gtk_handle_box_get_child_detached(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_child_detached$MH();
        try {
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hbutton_box_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3300.const$3,"gtk_hbutton_box_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_hbutton_box_get_type();
     * }
     */
    public static long gtk_hbutton_box_get_type() {
        var mh$ = gtk_hbutton_box_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hbutton_box_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3300.const$4,"gtk_hbutton_box_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_hbutton_box_new();
     * }
     */
    public static MemorySegment gtk_hbutton_box_new() {
        var mh$ = gtk_hbutton_box_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hbox_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3301.const$1,"gtk_hbox_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_hbox_get_type();
     * }
     */
    public static long gtk_hbox_get_type() {
        var mh$ = gtk_hbox_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hbox_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3301.const$2,"gtk_hbox_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_hbox_new(int homogeneous, int spacing);
     * }
     */
    public static MemorySegment gtk_hbox_new(int homogeneous, int spacing) {
        var mh$ = gtk_hbox_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(homogeneous, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hpaned_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3301.const$5,"gtk_hpaned_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_hpaned_get_type();
     * }
     */
    public static long gtk_hpaned_get_type() {
        var mh$ = gtk_hpaned_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hpaned_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3302.const$0,"gtk_hpaned_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_hpaned_new();
     * }
     */
    public static MemorySegment gtk_hpaned_new() {
        var mh$ = gtk_hpaned_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3304.const$4,"gtk_hsv_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_hsv_get_type();
     * }
     */
    public static long gtk_hsv_get_type() {
        var mh$ = gtk_hsv_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3304.const$5,"gtk_hsv_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_hsv_new();
     * }
     */
    public static MemorySegment gtk_hsv_new() {
        var mh$ = gtk_hsv_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_set_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3305.const$0,"gtk_hsv_set_color");
    }
    /**
     * {@snippet :
     * void gtk_hsv_set_color(struct _GtkHSV* hsv, double h, double s, double v);
     * }
     */
    public static void gtk_hsv_set_color(MemorySegment hsv, double h, double s, double v) {
        var mh$ = gtk_hsv_set_color$MH();
        try {
            mh$.invokeExact(hsv, h, s, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_get_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3305.const$1,"gtk_hsv_get_color");
    }
    /**
     * {@snippet :
     * void gtk_hsv_get_color(struct _GtkHSV* hsv, double* h, double* s, double* v);
     * }
     */
    public static void gtk_hsv_get_color(MemorySegment hsv, MemorySegment h, MemorySegment s, MemorySegment v) {
        var mh$ = gtk_hsv_get_color$MH();
        try {
            mh$.invokeExact(hsv, h, s, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_set_metrics$MH() {
        return RuntimeHelper.requireNonNull(constants$3305.const$2,"gtk_hsv_set_metrics");
    }
    /**
     * {@snippet :
     * void gtk_hsv_set_metrics(struct _GtkHSV* hsv, int size, int ring_width);
     * }
     */
    public static void gtk_hsv_set_metrics(MemorySegment hsv, int size, int ring_width) {
        var mh$ = gtk_hsv_set_metrics$MH();
        try {
            mh$.invokeExact(hsv, size, ring_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_get_metrics$MH() {
        return RuntimeHelper.requireNonNull(constants$3305.const$3,"gtk_hsv_get_metrics");
    }
    /**
     * {@snippet :
     * void gtk_hsv_get_metrics(struct _GtkHSV* hsv, int* size, int* ring_width);
     * }
     */
    public static void gtk_hsv_get_metrics(MemorySegment hsv, MemorySegment size, MemorySegment ring_width) {
        var mh$ = gtk_hsv_get_metrics$MH();
        try {
            mh$.invokeExact(hsv, size, ring_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_is_adjusting$MH() {
        return RuntimeHelper.requireNonNull(constants$3305.const$4,"gtk_hsv_is_adjusting");
    }
    /**
     * {@snippet :
     * int gtk_hsv_is_adjusting(struct _GtkHSV* hsv);
     * }
     */
    public static int gtk_hsv_is_adjusting(MemorySegment hsv) {
        var mh$ = gtk_hsv_is_adjusting$MH();
        try {
            return (int)mh$.invokeExact(hsv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hscale_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3306.const$1,"gtk_hscale_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_hscale_get_type();
     * }
     */
    public static long gtk_hscale_get_type() {
        var mh$ = gtk_hscale_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hscale_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3306.const$2,"gtk_hscale_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_hscale_new(struct _GtkAdjustment* adjustment);
     * }
     */
    public static MemorySegment gtk_hscale_new(MemorySegment adjustment) {
        var mh$ = gtk_hscale_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hscale_new_with_range$MH() {
        return RuntimeHelper.requireNonNull(constants$3306.const$3,"gtk_hscale_new_with_range");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_hscale_new_with_range(double min, double max, double step);
     * }
     */
    public static MemorySegment gtk_hscale_new_with_range(double min, double max, double step) {
        var mh$ = gtk_hscale_new_with_range$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(min, max, step);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hscrollbar_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3307.const$0,"gtk_hscrollbar_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_hscrollbar_get_type();
     * }
     */
    public static long gtk_hscrollbar_get_type() {
        var mh$ = gtk_hscrollbar_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hscrollbar_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3307.const$1,"gtk_hscrollbar_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_hscrollbar_new(struct _GtkAdjustment* adjustment);
     * }
     */
    public static MemorySegment gtk_hscrollbar_new(MemorySegment adjustment) {
        var mh$ = gtk_hscrollbar_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hseparator_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3307.const$4,"gtk_hseparator_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_hseparator_get_type();
     * }
     */
    public static long gtk_hseparator_get_type() {
        var mh$ = gtk_hseparator_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hseparator_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3307.const$5,"gtk_hseparator_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_hseparator_new();
     * }
     */
    public static MemorySegment gtk_hseparator_new() {
        var mh$ = gtk_hseparator_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3309.const$5,"gtk_image_menu_item_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_image_menu_item_get_type();
     * }
     */
    public static long gtk_image_menu_item_get_type() {
        var mh$ = gtk_image_menu_item_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3310.const$0,"gtk_image_menu_item_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_image_menu_item_new();
     * }
     */
    public static MemorySegment gtk_image_menu_item_new() {
        var mh$ = gtk_image_menu_item_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_new_with_label$MH() {
        return RuntimeHelper.requireNonNull(constants$3310.const$1,"gtk_image_menu_item_new_with_label");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_image_menu_item_new_with_label(char* label);
     * }
     */
    public static MemorySegment gtk_image_menu_item_new_with_label(MemorySegment label) {
        var mh$ = gtk_image_menu_item_new_with_label$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_new_with_mnemonic$MH() {
        return RuntimeHelper.requireNonNull(constants$3310.const$2,"gtk_image_menu_item_new_with_mnemonic");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_image_menu_item_new_with_mnemonic(char* label);
     * }
     */
    public static MemorySegment gtk_image_menu_item_new_with_mnemonic(MemorySegment label) {
        var mh$ = gtk_image_menu_item_new_with_mnemonic$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_new_from_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$3310.const$3,"gtk_image_menu_item_new_from_stock");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_image_menu_item_new_from_stock(char* stock_id, struct _GtkAccelGroup* accel_group);
     * }
     */
    public static MemorySegment gtk_image_menu_item_new_from_stock(MemorySegment stock_id, MemorySegment accel_group) {
        var mh$ = gtk_image_menu_item_new_from_stock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stock_id, accel_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_set_always_show_image$MH() {
        return RuntimeHelper.requireNonNull(constants$3310.const$4,"gtk_image_menu_item_set_always_show_image");
    }
    /**
     * {@snippet :
     * void gtk_image_menu_item_set_always_show_image(struct _GtkImageMenuItem* image_menu_item, int always_show);
     * }
     */
    public static void gtk_image_menu_item_set_always_show_image(MemorySegment image_menu_item, int always_show) {
        var mh$ = gtk_image_menu_item_set_always_show_image$MH();
        try {
            mh$.invokeExact(image_menu_item, always_show);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_get_always_show_image$MH() {
        return RuntimeHelper.requireNonNull(constants$3310.const$5,"gtk_image_menu_item_get_always_show_image");
    }
    /**
     * {@snippet :
     * int gtk_image_menu_item_get_always_show_image(struct _GtkImageMenuItem* image_menu_item);
     * }
     */
    public static int gtk_image_menu_item_get_always_show_image(MemorySegment image_menu_item) {
        var mh$ = gtk_image_menu_item_get_always_show_image$MH();
        try {
            return (int)mh$.invokeExact(image_menu_item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_set_image$MH() {
        return RuntimeHelper.requireNonNull(constants$3311.const$0,"gtk_image_menu_item_set_image");
    }
    /**
     * {@snippet :
     * void gtk_image_menu_item_set_image(struct _GtkImageMenuItem* image_menu_item, struct _GtkWidget* image);
     * }
     */
    public static void gtk_image_menu_item_set_image(MemorySegment image_menu_item, MemorySegment image) {
        var mh$ = gtk_image_menu_item_set_image$MH();
        try {
            mh$.invokeExact(image_menu_item, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_get_image$MH() {
        return RuntimeHelper.requireNonNull(constants$3311.const$1,"gtk_image_menu_item_get_image");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_image_menu_item_get_image(struct _GtkImageMenuItem* image_menu_item);
     * }
     */
    public static MemorySegment gtk_image_menu_item_get_image(MemorySegment image_menu_item) {
        var mh$ = gtk_image_menu_item_get_image$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(image_menu_item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_set_use_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$3311.const$2,"gtk_image_menu_item_set_use_stock");
    }
    /**
     * {@snippet :
     * void gtk_image_menu_item_set_use_stock(struct _GtkImageMenuItem* image_menu_item, int use_stock);
     * }
     */
    public static void gtk_image_menu_item_set_use_stock(MemorySegment image_menu_item, int use_stock) {
        var mh$ = gtk_image_menu_item_set_use_stock$MH();
        try {
            mh$.invokeExact(image_menu_item, use_stock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_get_use_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$3311.const$3,"gtk_image_menu_item_get_use_stock");
    }
    /**
     * {@snippet :
     * int gtk_image_menu_item_get_use_stock(struct _GtkImageMenuItem* image_menu_item);
     * }
     */
    public static int gtk_image_menu_item_get_use_stock(MemorySegment image_menu_item) {
        var mh$ = gtk_image_menu_item_get_use_stock$MH();
        try {
            return (int)mh$.invokeExact(image_menu_item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_set_accel_group$MH() {
        return RuntimeHelper.requireNonNull(constants$3311.const$4,"gtk_image_menu_item_set_accel_group");
    }
    /**
     * {@snippet :
     * void gtk_image_menu_item_set_accel_group(struct _GtkImageMenuItem* image_menu_item, struct _GtkAccelGroup* accel_group);
     * }
     */
    public static void gtk_image_menu_item_set_accel_group(MemorySegment image_menu_item, MemorySegment accel_group) {
        var mh$ = gtk_image_menu_item_set_accel_group$MH();
        try {
            mh$.invokeExact(image_menu_item, accel_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3312.const$2,"gtk_numerable_icon_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_numerable_icon_get_type();
     * }
     */
    public static long gtk_numerable_icon_get_type() {
        var mh$ = gtk_numerable_icon_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3312.const$3,"gtk_numerable_icon_new");
    }
    /**
     * {@snippet :
     * struct _GIcon* gtk_numerable_icon_new(struct _GIcon* base_icon);
     * }
     */
    public static MemorySegment gtk_numerable_icon_new(MemorySegment base_icon) {
        var mh$ = gtk_numerable_icon_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(base_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_new_with_style_context$MH() {
        return RuntimeHelper.requireNonNull(constants$3312.const$4,"gtk_numerable_icon_new_with_style_context");
    }
    /**
     * {@snippet :
     * struct _GIcon* gtk_numerable_icon_new_with_style_context(struct _GIcon* base_icon, struct _GtkStyleContext* context);
     * }
     */
    public static MemorySegment gtk_numerable_icon_new_with_style_context(MemorySegment base_icon, MemorySegment context) {
        var mh$ = gtk_numerable_icon_new_with_style_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(base_icon, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_style_context$MH() {
        return RuntimeHelper.requireNonNull(constants$3312.const$5,"gtk_numerable_icon_get_style_context");
    }
    /**
     * {@snippet :
     * struct _GtkStyleContext* gtk_numerable_icon_get_style_context(struct _GtkNumerableIcon* self);
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_style_context(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_style_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_set_style_context$MH() {
        return RuntimeHelper.requireNonNull(constants$3313.const$0,"gtk_numerable_icon_set_style_context");
    }
    /**
     * {@snippet :
     * void gtk_numerable_icon_set_style_context(struct _GtkNumerableIcon* self, struct _GtkStyleContext* style);
     * }
     */
    public static void gtk_numerable_icon_set_style_context(MemorySegment self, MemorySegment style) {
        var mh$ = gtk_numerable_icon_set_style_context$MH();
        try {
            mh$.invokeExact(self, style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_count$MH() {
        return RuntimeHelper.requireNonNull(constants$3313.const$1,"gtk_numerable_icon_get_count");
    }
    /**
     * {@snippet :
     * int gtk_numerable_icon_get_count(struct _GtkNumerableIcon* self);
     * }
     */
    public static int gtk_numerable_icon_get_count(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_count$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_set_count$MH() {
        return RuntimeHelper.requireNonNull(constants$3313.const$2,"gtk_numerable_icon_set_count");
    }
    /**
     * {@snippet :
     * void gtk_numerable_icon_set_count(struct _GtkNumerableIcon* self, int count);
     * }
     */
    public static void gtk_numerable_icon_set_count(MemorySegment self, int count) {
        var mh$ = gtk_numerable_icon_set_count$MH();
        try {
            mh$.invokeExact(self, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_label$MH() {
        return RuntimeHelper.requireNonNull(constants$3313.const$3,"gtk_numerable_icon_get_label");
    }
    /**
     * {@snippet :
     * char* gtk_numerable_icon_get_label(struct _GtkNumerableIcon* self);
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_label(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_label$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_set_label$MH() {
        return RuntimeHelper.requireNonNull(constants$3313.const$4,"gtk_numerable_icon_set_label");
    }
    /**
     * {@snippet :
     * void gtk_numerable_icon_set_label(struct _GtkNumerableIcon* self, char* label);
     * }
     */
    public static void gtk_numerable_icon_set_label(MemorySegment self, MemorySegment label) {
        var mh$ = gtk_numerable_icon_set_label$MH();
        try {
            mh$.invokeExact(self, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_set_background_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$3313.const$5,"gtk_numerable_icon_set_background_gicon");
    }
    /**
     * {@snippet :
     * void gtk_numerable_icon_set_background_gicon(struct _GtkNumerableIcon* self, struct _GIcon* icon);
     * }
     */
    public static void gtk_numerable_icon_set_background_gicon(MemorySegment self, MemorySegment icon) {
        var mh$ = gtk_numerable_icon_set_background_gicon$MH();
        try {
            mh$.invokeExact(self, icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_background_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$3314.const$0,"gtk_numerable_icon_get_background_gicon");
    }
    /**
     * {@snippet :
     * struct _GIcon* gtk_numerable_icon_get_background_gicon(struct _GtkNumerableIcon* self);
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_background_gicon(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_background_gicon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_set_background_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3314.const$1,"gtk_numerable_icon_set_background_icon_name");
    }
    /**
     * {@snippet :
     * void gtk_numerable_icon_set_background_icon_name(struct _GtkNumerableIcon* self, char* icon_name);
     * }
     */
    public static void gtk_numerable_icon_set_background_icon_name(MemorySegment self, MemorySegment icon_name) {
        var mh$ = gtk_numerable_icon_set_background_icon_name$MH();
        try {
            mh$.invokeExact(self, icon_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_background_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3314.const$2,"gtk_numerable_icon_get_background_icon_name");
    }
    /**
     * {@snippet :
     * char* gtk_numerable_icon_get_background_icon_name(struct _GtkNumerableIcon* self);
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_background_icon_name(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_background_icon_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3316.const$4,"gtk_toggle_action_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_toggle_action_get_type();
     * }
     */
    public static long gtk_toggle_action_get_type() {
        var mh$ = gtk_toggle_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3316.const$5,"gtk_toggle_action_new");
    }
    /**
     * {@snippet :
     * struct _GtkToggleAction* gtk_toggle_action_new(char* name, char* label, char* tooltip, char* stock_id);
     * }
     */
    public static MemorySegment gtk_toggle_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id) {
        var mh$ = gtk_toggle_action_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_toggled$MH() {
        return RuntimeHelper.requireNonNull(constants$3317.const$0,"gtk_toggle_action_toggled");
    }
    /**
     * {@snippet :
     * void gtk_toggle_action_toggled(struct _GtkToggleAction* action);
     * }
     */
    public static void gtk_toggle_action_toggled(MemorySegment action) {
        var mh$ = gtk_toggle_action_toggled$MH();
        try {
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_set_active$MH() {
        return RuntimeHelper.requireNonNull(constants$3317.const$1,"gtk_toggle_action_set_active");
    }
    /**
     * {@snippet :
     * void gtk_toggle_action_set_active(struct _GtkToggleAction* action, int is_active);
     * }
     */
    public static void gtk_toggle_action_set_active(MemorySegment action, int is_active) {
        var mh$ = gtk_toggle_action_set_active$MH();
        try {
            mh$.invokeExact(action, is_active);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_get_active$MH() {
        return RuntimeHelper.requireNonNull(constants$3317.const$2,"gtk_toggle_action_get_active");
    }
    /**
     * {@snippet :
     * int gtk_toggle_action_get_active(struct _GtkToggleAction* action);
     * }
     */
    public static int gtk_toggle_action_get_active(MemorySegment action) {
        var mh$ = gtk_toggle_action_get_active$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_set_draw_as_radio$MH() {
        return RuntimeHelper.requireNonNull(constants$3317.const$3,"gtk_toggle_action_set_draw_as_radio");
    }
    /**
     * {@snippet :
     * void gtk_toggle_action_set_draw_as_radio(struct _GtkToggleAction* action, int draw_as_radio);
     * }
     */
    public static void gtk_toggle_action_set_draw_as_radio(MemorySegment action, int draw_as_radio) {
        var mh$ = gtk_toggle_action_set_draw_as_radio$MH();
        try {
            mh$.invokeExact(action, draw_as_radio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_get_draw_as_radio$MH() {
        return RuntimeHelper.requireNonNull(constants$3317.const$4,"gtk_toggle_action_get_draw_as_radio");
    }
    /**
     * {@snippet :
     * int gtk_toggle_action_get_draw_as_radio(struct _GtkToggleAction* action);
     * }
     */
    public static int gtk_toggle_action_get_draw_as_radio(MemorySegment action) {
        var mh$ = gtk_toggle_action_get_draw_as_radio$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_toggle_action_set_active$MH() {
        return RuntimeHelper.requireNonNull(constants$3317.const$5,"_gtk_toggle_action_set_active");
    }
    /**
     * {@snippet :
     * void _gtk_toggle_action_set_active(struct _GtkToggleAction* toggle_action, int is_active);
     * }
     */
    public static void _gtk_toggle_action_set_active(MemorySegment toggle_action, int is_active) {
        var mh$ = _gtk_toggle_action_set_active$MH();
        try {
            mh$.invokeExact(toggle_action, is_active);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3320.const$1,"gtk_radio_action_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_radio_action_get_type();
     * }
     */
    public static long gtk_radio_action_get_type() {
        var mh$ = gtk_radio_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3320.const$2,"gtk_radio_action_new");
    }
    /**
     * {@snippet :
     * struct _GtkRadioAction* gtk_radio_action_new(char* name, char* label, char* tooltip, char* stock_id, int value);
     * }
     */
    public static MemorySegment gtk_radio_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id, int value) {
        var mh$ = gtk_radio_action_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_get_group$MH() {
        return RuntimeHelper.requireNonNull(constants$3320.const$3,"gtk_radio_action_get_group");
    }
    /**
     * {@snippet :
     * struct _GSList* gtk_radio_action_get_group(struct _GtkRadioAction* action);
     * }
     */
    public static MemorySegment gtk_radio_action_get_group(MemorySegment action) {
        var mh$ = gtk_radio_action_get_group$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_set_group$MH() {
        return RuntimeHelper.requireNonNull(constants$3320.const$4,"gtk_radio_action_set_group");
    }
    /**
     * {@snippet :
     * void gtk_radio_action_set_group(struct _GtkRadioAction* action, struct _GSList* group);
     * }
     */
    public static void gtk_radio_action_set_group(MemorySegment action, MemorySegment group) {
        var mh$ = gtk_radio_action_set_group$MH();
        try {
            mh$.invokeExact(action, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_join_group$MH() {
        return RuntimeHelper.requireNonNull(constants$3320.const$5,"gtk_radio_action_join_group");
    }
    /**
     * {@snippet :
     * void gtk_radio_action_join_group(struct _GtkRadioAction* action, struct _GtkRadioAction* group_source);
     * }
     */
    public static void gtk_radio_action_join_group(MemorySegment action, MemorySegment group_source) {
        var mh$ = gtk_radio_action_join_group$MH();
        try {
            mh$.invokeExact(action, group_source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_get_current_value$MH() {
        return RuntimeHelper.requireNonNull(constants$3321.const$0,"gtk_radio_action_get_current_value");
    }
    /**
     * {@snippet :
     * int gtk_radio_action_get_current_value(struct _GtkRadioAction* action);
     * }
     */
    public static int gtk_radio_action_get_current_value(MemorySegment action) {
        var mh$ = gtk_radio_action_get_current_value$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_set_current_value$MH() {
        return RuntimeHelper.requireNonNull(constants$3321.const$1,"gtk_radio_action_set_current_value");
    }
    /**
     * {@snippet :
     * void gtk_radio_action_set_current_value(struct _GtkRadioAction* action, int current_value);
     * }
     */
    public static void gtk_radio_action_set_current_value(MemorySegment action, int current_value) {
        var mh$ = gtk_radio_action_set_current_value$MH();
        try {
            mh$.invokeExact(action, current_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GtkRcFlags.GTK_RC_FG = 1;
     * }
     */
    public static int GTK_RC_FG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GtkRcFlags.GTK_RC_BG = 2;
     * }
     */
    public static int GTK_RC_BG() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GtkRcFlags.GTK_RC_TEXT = 4;
     * }
     */
    public static int GTK_RC_TEXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GtkRcFlags.GTK_RC_BASE = 8;
     * }
     */
    public static int GTK_RC_BASE() {
        return (int)8L;
    }
    public static MethodHandle _gtk_rc_parse_widget_class_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3325.const$3,"_gtk_rc_parse_widget_class_path");
    }
    /**
     * {@snippet :
     * struct _GSList* _gtk_rc_parse_widget_class_path(char* pattern);
     * }
     */
    public static MemorySegment _gtk_rc_parse_widget_class_path(MemorySegment pattern) {
        var mh$ = _gtk_rc_parse_widget_class_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_rc_free_widget_class_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3325.const$4,"_gtk_rc_free_widget_class_path");
    }
    /**
     * {@snippet :
     * void _gtk_rc_free_widget_class_path(struct _GSList* list);
     * }
     */
    public static void _gtk_rc_free_widget_class_path(MemorySegment list) {
        var mh$ = _gtk_rc_free_widget_class_path$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_rc_match_widget_class$MH() {
        return RuntimeHelper.requireNonNull(constants$3325.const$5,"_gtk_rc_match_widget_class");
    }
    /**
     * {@snippet :
     * int _gtk_rc_match_widget_class(struct _GSList* list, int length, char* path, char* path_reversed);
     * }
     */
    public static int _gtk_rc_match_widget_class(MemorySegment list, int length, MemorySegment path, MemorySegment path_reversed) {
        var mh$ = _gtk_rc_match_widget_class$MH();
        try {
            return (int)mh$.invokeExact(list, length, path, path_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_add_default_file$MH() {
        return RuntimeHelper.requireNonNull(constants$3326.const$0,"gtk_rc_add_default_file");
    }
    /**
     * {@snippet :
     * void gtk_rc_add_default_file(char* filename);
     * }
     */
    public static void gtk_rc_add_default_file(MemorySegment filename) {
        var mh$ = gtk_rc_add_default_file$MH();
        try {
            mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_set_default_files$MH() {
        return RuntimeHelper.requireNonNull(constants$3326.const$1,"gtk_rc_set_default_files");
    }
    /**
     * {@snippet :
     * void gtk_rc_set_default_files(char** filenames);
     * }
     */
    public static void gtk_rc_set_default_files(MemorySegment filenames) {
        var mh$ = gtk_rc_set_default_files$MH();
        try {
            mh$.invokeExact(filenames);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_default_files$MH() {
        return RuntimeHelper.requireNonNull(constants$3326.const$2,"gtk_rc_get_default_files");
    }
    /**
     * {@snippet :
     * char** gtk_rc_get_default_files();
     * }
     */
    public static MemorySegment gtk_rc_get_default_files() {
        var mh$ = gtk_rc_get_default_files$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_style$MH() {
        return RuntimeHelper.requireNonNull(constants$3326.const$3,"gtk_rc_get_style");
    }
    /**
     * {@snippet :
     * struct _GtkStyle* gtk_rc_get_style(struct _GtkWidget* widget);
     * }
     */
    public static MemorySegment gtk_rc_get_style(MemorySegment widget) {
        var mh$ = gtk_rc_get_style$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_style_by_paths$MH() {
        return RuntimeHelper.requireNonNull(constants$3326.const$4,"gtk_rc_get_style_by_paths");
    }
    /**
     * {@snippet :
     * struct _GtkStyle* gtk_rc_get_style_by_paths(struct _GtkSettings* settings, char* widget_path, char* class_path, unsigned long type);
     * }
     */
    public static MemorySegment gtk_rc_get_style_by_paths(MemorySegment settings, MemorySegment widget_path, MemorySegment class_path, long type) {
        var mh$ = gtk_rc_get_style_by_paths$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(settings, widget_path, class_path, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_reparse_all_for_settings$MH() {
        return RuntimeHelper.requireNonNull(constants$3326.const$5,"gtk_rc_reparse_all_for_settings");
    }
    /**
     * {@snippet :
     * int gtk_rc_reparse_all_for_settings(struct _GtkSettings* settings, int force_load);
     * }
     */
    public static int gtk_rc_reparse_all_for_settings(MemorySegment settings, int force_load) {
        var mh$ = gtk_rc_reparse_all_for_settings$MH();
        try {
            return (int)mh$.invokeExact(settings, force_load);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_reset_styles$MH() {
        return RuntimeHelper.requireNonNull(constants$3327.const$0,"gtk_rc_reset_styles");
    }
    /**
     * {@snippet :
     * void gtk_rc_reset_styles(struct _GtkSettings* settings);
     * }
     */
    public static void gtk_rc_reset_styles(MemorySegment settings) {
        var mh$ = gtk_rc_reset_styles$MH();
        try {
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_find_pixmap_in_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3327.const$1,"gtk_rc_find_pixmap_in_path");
    }
    /**
     * {@snippet :
     * char* gtk_rc_find_pixmap_in_path(struct _GtkSettings* settings, struct _GScanner* scanner, char* pixmap_file);
     * }
     */
    public static MemorySegment gtk_rc_find_pixmap_in_path(MemorySegment settings, MemorySegment scanner, MemorySegment pixmap_file) {
        var mh$ = gtk_rc_find_pixmap_in_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(settings, scanner, pixmap_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$3327.const$2,"gtk_rc_parse");
    }
    /**
     * {@snippet :
     * void gtk_rc_parse(char* filename);
     * }
     */
    public static void gtk_rc_parse(MemorySegment filename) {
        var mh$ = gtk_rc_parse$MH();
        try {
            mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3327.const$3,"gtk_rc_parse_string");
    }
    /**
     * {@snippet :
     * void gtk_rc_parse_string(char* rc_string);
     * }
     */
    public static void gtk_rc_parse_string(MemorySegment rc_string) {
        var mh$ = gtk_rc_parse_string$MH();
        try {
            mh$.invokeExact(rc_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_reparse_all$MH() {
        return RuntimeHelper.requireNonNull(constants$3327.const$4,"gtk_rc_reparse_all");
    }
    /**
     * {@snippet :
     * int gtk_rc_reparse_all();
     * }
     */
    public static int gtk_rc_reparse_all() {
        var mh$ = gtk_rc_reparse_all$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_style_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3327.const$5,"gtk_rc_style_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_rc_style_get_type();
     * }
     */
    public static long gtk_rc_style_get_type() {
        var mh$ = gtk_rc_style_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_style_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3328.const$0,"gtk_rc_style_new");
    }
    /**
     * {@snippet :
     * struct _GtkRcStyle* gtk_rc_style_new();
     * }
     */
    public static MemorySegment gtk_rc_style_new() {
        var mh$ = gtk_rc_style_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_style_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$3328.const$1,"gtk_rc_style_copy");
    }
    /**
     * {@snippet :
     * struct _GtkRcStyle* gtk_rc_style_copy(struct _GtkRcStyle* orig);
     * }
     */
    public static MemorySegment gtk_rc_style_copy(MemorySegment orig) {
        var mh$ = gtk_rc_style_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(orig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_find_module_in_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3328.const$2,"gtk_rc_find_module_in_path");
    }
    /**
     * {@snippet :
     * char* gtk_rc_find_module_in_path(char* module_file);
     * }
     */
    public static MemorySegment gtk_rc_find_module_in_path(MemorySegment module_file) {
        var mh$ = gtk_rc_find_module_in_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(module_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_theme_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$3328.const$3,"gtk_rc_get_theme_dir");
    }
    /**
     * {@snippet :
     * char* gtk_rc_get_theme_dir();
     * }
     */
    public static MemorySegment gtk_rc_get_theme_dir() {
        var mh$ = gtk_rc_get_theme_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_module_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$3328.const$4,"gtk_rc_get_module_dir");
    }
    /**
     * {@snippet :
     * char* gtk_rc_get_module_dir();
     * }
     */
    public static MemorySegment gtk_rc_get_module_dir() {
        var mh$ = gtk_rc_get_module_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_im_module_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3328.const$5,"gtk_rc_get_im_module_path");
    }
    /**
     * {@snippet :
     * char* gtk_rc_get_im_module_path();
     * }
     */
    public static MemorySegment gtk_rc_get_im_module_path() {
        var mh$ = gtk_rc_get_im_module_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_im_module_file$MH() {
        return RuntimeHelper.requireNonNull(constants$3329.const$0,"gtk_rc_get_im_module_file");
    }
    /**
     * {@snippet :
     * char* gtk_rc_get_im_module_file();
     * }
     */
    public static MemorySegment gtk_rc_get_im_module_file() {
        var mh$ = gtk_rc_get_im_module_file$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_INVALID = 270;
     * }
     */
    public static int GTK_RC_TOKEN_INVALID() {
        return (int)270L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_INCLUDE = 271;
     * }
     */
    public static int GTK_RC_TOKEN_INCLUDE() {
        return (int)271L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_NORMAL = 272;
     * }
     */
    public static int GTK_RC_TOKEN_NORMAL() {
        return (int)272L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_ACTIVE = 273;
     * }
     */
    public static int GTK_RC_TOKEN_ACTIVE() {
        return (int)273L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_PRELIGHT = 274;
     * }
     */
    public static int GTK_RC_TOKEN_PRELIGHT() {
        return (int)274L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_SELECTED = 275;
     * }
     */
    public static int GTK_RC_TOKEN_SELECTED() {
        return (int)275L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_INSENSITIVE = 276;
     * }
     */
    public static int GTK_RC_TOKEN_INSENSITIVE() {
        return (int)276L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_FG = 277;
     * }
     */
    public static int GTK_RC_TOKEN_FG() {
        return (int)277L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_BG = 278;
     * }
     */
    public static int GTK_RC_TOKEN_BG() {
        return (int)278L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_TEXT = 279;
     * }
     */
    public static int GTK_RC_TOKEN_TEXT() {
        return (int)279L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_BASE = 280;
     * }
     */
    public static int GTK_RC_TOKEN_BASE() {
        return (int)280L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_XTHICKNESS = 281;
     * }
     */
    public static int GTK_RC_TOKEN_XTHICKNESS() {
        return (int)281L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_YTHICKNESS = 282;
     * }
     */
    public static int GTK_RC_TOKEN_YTHICKNESS() {
        return (int)282L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_FONT = 283;
     * }
     */
    public static int GTK_RC_TOKEN_FONT() {
        return (int)283L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_FONTSET = 284;
     * }
     */
    public static int GTK_RC_TOKEN_FONTSET() {
        return (int)284L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_FONT_NAME = 285;
     * }
     */
    public static int GTK_RC_TOKEN_FONT_NAME() {
        return (int)285L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_BG_PIXMAP = 286;
     * }
     */
    public static int GTK_RC_TOKEN_BG_PIXMAP() {
        return (int)286L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_PIXMAP_PATH = 287;
     * }
     */
    public static int GTK_RC_TOKEN_PIXMAP_PATH() {
        return (int)287L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_STYLE = 288;
     * }
     */
    public static int GTK_RC_TOKEN_STYLE() {
        return (int)288L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_BINDING = 289;
     * }
     */
    public static int GTK_RC_TOKEN_BINDING() {
        return (int)289L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_BIND = 290;
     * }
     */
    public static int GTK_RC_TOKEN_BIND() {
        return (int)290L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_WIDGET = 291;
     * }
     */
    public static int GTK_RC_TOKEN_WIDGET() {
        return (int)291L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_WIDGET_CLASS = 292;
     * }
     */
    public static int GTK_RC_TOKEN_WIDGET_CLASS() {
        return (int)292L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_CLASS = 293;
     * }
     */
    public static int GTK_RC_TOKEN_CLASS() {
        return (int)293L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_LOWEST = 294;
     * }
     */
    public static int GTK_RC_TOKEN_LOWEST() {
        return (int)294L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_GTK = 295;
     * }
     */
    public static int GTK_RC_TOKEN_GTK() {
        return (int)295L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_APPLICATION = 296;
     * }
     */
    public static int GTK_RC_TOKEN_APPLICATION() {
        return (int)296L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_THEME = 297;
     * }
     */
    public static int GTK_RC_TOKEN_THEME() {
        return (int)297L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_RC = 298;
     * }
     */
    public static int GTK_RC_TOKEN_RC() {
        return (int)298L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_HIGHEST = 299;
     * }
     */
    public static int GTK_RC_TOKEN_HIGHEST() {
        return (int)299L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_ENGINE = 300;
     * }
     */
    public static int GTK_RC_TOKEN_ENGINE() {
        return (int)300L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_MODULE_PATH = 301;
     * }
     */
    public static int GTK_RC_TOKEN_MODULE_PATH() {
        return (int)301L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_IM_MODULE_PATH = 302;
     * }
     */
    public static int GTK_RC_TOKEN_IM_MODULE_PATH() {
        return (int)302L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_IM_MODULE_FILE = 303;
     * }
     */
    public static int GTK_RC_TOKEN_IM_MODULE_FILE() {
        return (int)303L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_STOCK = 304;
     * }
     */
    public static int GTK_RC_TOKEN_STOCK() {
        return (int)304L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_LTR = 305;
     * }
     */
    public static int GTK_RC_TOKEN_LTR() {
        return (int)305L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_RTL = 306;
     * }
     */
    public static int GTK_RC_TOKEN_RTL() {
        return (int)306L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_COLOR = 307;
     * }
     */
    public static int GTK_RC_TOKEN_COLOR() {
        return (int)307L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_UNBIND = 308;
     * }
     */
    public static int GTK_RC_TOKEN_UNBIND() {
        return (int)308L;
    }
    /**
     * {@snippet :
     * enum GtkRcTokenType.GTK_RC_TOKEN_LAST = 309;
     * }
     */
    public static int GTK_RC_TOKEN_LAST() {
        return (int)309L;
    }
    /**
     * {@snippet :
     * enum GtkPathPriorityType.GTK_PATH_PRIO_LOWEST = 0;
     * }
     */
    public static int GTK_PATH_PRIO_LOWEST() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GtkPathPriorityType.GTK_PATH_PRIO_GTK = 4;
     * }
     */
    public static int GTK_PATH_PRIO_GTK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GtkPathPriorityType.GTK_PATH_PRIO_APPLICATION = 8;
     * }
     */
    public static int GTK_PATH_PRIO_APPLICATION() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GtkPathPriorityType.GTK_PATH_PRIO_THEME = 10;
     * }
     */
    public static int GTK_PATH_PRIO_THEME() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum GtkPathPriorityType.GTK_PATH_PRIO_RC = 12;
     * }
     */
    public static int GTK_PATH_PRIO_RC() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum GtkPathPriorityType.GTK_PATH_PRIO_HIGHEST = 15;
     * }
     */
    public static int GTK_PATH_PRIO_HIGHEST() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum GtkPathType.GTK_PATH_WIDGET = 0;
     * }
     */
    public static int GTK_PATH_WIDGET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GtkPathType.GTK_PATH_WIDGET_CLASS = 1;
     * }
     */
    public static int GTK_PATH_WIDGET_CLASS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GtkPathType.GTK_PATH_CLASS = 2;
     * }
     */
    public static int GTK_PATH_CLASS() {
        return (int)2L;
    }
    public static MethodHandle gtk_rc_scanner_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3329.const$1,"gtk_rc_scanner_new");
    }
    /**
     * {@snippet :
     * struct _GScanner* gtk_rc_scanner_new();
     * }
     */
    public static MemorySegment gtk_rc_scanner_new() {
        var mh$ = gtk_rc_scanner_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3329.const$2,"gtk_rc_parse_color");
    }
    /**
     * {@snippet :
     * unsigned int gtk_rc_parse_color(struct _GScanner* scanner, struct _GdkColor* color);
     * }
     */
    public static int gtk_rc_parse_color(MemorySegment scanner, MemorySegment color) {
        var mh$ = gtk_rc_parse_color$MH();
        try {
            return (int)mh$.invokeExact(scanner, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_color_full$MH() {
        return RuntimeHelper.requireNonNull(constants$3329.const$3,"gtk_rc_parse_color_full");
    }
    /**
     * {@snippet :
     * unsigned int gtk_rc_parse_color_full(struct _GScanner* scanner, struct _GtkRcStyle* style, struct _GdkColor* color);
     * }
     */
    public static int gtk_rc_parse_color_full(MemorySegment scanner, MemorySegment style, MemorySegment color) {
        var mh$ = gtk_rc_parse_color_full$MH();
        try {
            return (int)mh$.invokeExact(scanner, style, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_state$MH() {
        return RuntimeHelper.requireNonNull(constants$3329.const$4,"gtk_rc_parse_state");
    }
    /**
     * {@snippet :
     * unsigned int gtk_rc_parse_state(struct _GScanner* scanner, enum GtkStateType* state);
     * }
     */
    public static int gtk_rc_parse_state(MemorySegment scanner, MemorySegment state) {
        var mh$ = gtk_rc_parse_state$MH();
        try {
            return (int)mh$.invokeExact(scanner, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_priority$MH() {
        return RuntimeHelper.requireNonNull(constants$3329.const$5,"gtk_rc_parse_priority");
    }
    /**
     * {@snippet :
     * unsigned int gtk_rc_parse_priority(struct _GScanner* scanner, enum GtkPathPriorityType* priority);
     * }
     */
    public static int gtk_rc_parse_priority(MemorySegment scanner, MemorySegment priority) {
        var mh$ = gtk_rc_parse_priority$MH();
        try {
            return (int)mh$.invokeExact(scanner, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_binding_set_add_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3330.const$4,"gtk_binding_set_add_path");
    }
    /**
     * {@snippet :
     * void gtk_binding_set_add_path(struct _GtkBindingSet* binding_set, enum GtkPathType path_type, char* path_pattern, enum GtkPathPriorityType priority);
     * }
     */
    public static void gtk_binding_set_add_path(MemorySegment binding_set, int path_type, MemorySegment path_pattern, int priority) {
        var mh$ = gtk_binding_set_add_path$MH();
        try {
            mh$.invokeExact(binding_set, path_type, path_pattern, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3332.const$4,"gtk_recent_action_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_recent_action_get_type();
     * }
     */
    public static long gtk_recent_action_get_type() {
        var mh$ = gtk_recent_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3332.const$5,"gtk_recent_action_new");
    }
    /**
     * {@snippet :
     * struct _GtkAction* gtk_recent_action_new(char* name, char* label, char* tooltip, char* stock_id);
     * }
     */
    public static MemorySegment gtk_recent_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id) {
        var mh$ = gtk_recent_action_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_new_for_manager$MH() {
        return RuntimeHelper.requireNonNull(constants$3333.const$0,"gtk_recent_action_new_for_manager");
    }
    /**
     * {@snippet :
     * struct _GtkAction* gtk_recent_action_new_for_manager(char* name, char* label, char* tooltip, char* stock_id, struct _GtkRecentManager* manager);
     * }
     */
    public static MemorySegment gtk_recent_action_new_for_manager(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id, MemorySegment manager) {
        var mh$ = gtk_recent_action_new_for_manager$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id, manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_get_show_numbers$MH() {
        return RuntimeHelper.requireNonNull(constants$3333.const$1,"gtk_recent_action_get_show_numbers");
    }
    /**
     * {@snippet :
     * int gtk_recent_action_get_show_numbers(struct _GtkRecentAction* action);
     * }
     */
    public static int gtk_recent_action_get_show_numbers(MemorySegment action) {
        var mh$ = gtk_recent_action_get_show_numbers$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_set_show_numbers$MH() {
        return RuntimeHelper.requireNonNull(constants$3333.const$2,"gtk_recent_action_set_show_numbers");
    }
    /**
     * {@snippet :
     * void gtk_recent_action_set_show_numbers(struct _GtkRecentAction* action, int show_numbers);
     * }
     */
    public static void gtk_recent_action_set_show_numbers(MemorySegment action, int show_numbers) {
        var mh$ = gtk_recent_action_set_show_numbers$MH();
        try {
            mh$.invokeExact(action, show_numbers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3337.const$4,"gtk_status_icon_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_status_icon_get_type();
     * }
     */
    public static long gtk_status_icon_get_type() {
        var mh$ = gtk_status_icon_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3337.const$5,"gtk_status_icon_new");
    }
    /**
     * {@snippet :
     * struct _GtkStatusIcon* gtk_status_icon_new();
     * }
     */
    public static MemorySegment gtk_status_icon_new() {
        var mh$ = gtk_status_icon_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$3338.const$0,"gtk_status_icon_new_from_pixbuf");
    }
    /**
     * {@snippet :
     * struct _GtkStatusIcon* gtk_status_icon_new_from_pixbuf(struct _GdkPixbuf* pixbuf);
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_pixbuf(MemorySegment pixbuf) {
        var mh$ = gtk_status_icon_new_from_pixbuf$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$3338.const$1,"gtk_status_icon_new_from_file");
    }
    /**
     * {@snippet :
     * struct _GtkStatusIcon* gtk_status_icon_new_from_file(char* filename);
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_file(MemorySegment filename) {
        var mh$ = gtk_status_icon_new_from_file$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$3338.const$2,"gtk_status_icon_new_from_stock");
    }
    /**
     * {@snippet :
     * struct _GtkStatusIcon* gtk_status_icon_new_from_stock(char* stock_id);
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_stock(MemorySegment stock_id) {
        var mh$ = gtk_status_icon_new_from_stock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3338.const$3,"gtk_status_icon_new_from_icon_name");
    }
    /**
     * {@snippet :
     * struct _GtkStatusIcon* gtk_status_icon_new_from_icon_name(char* icon_name);
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_icon_name(MemorySegment icon_name) {
        var mh$ = gtk_status_icon_new_from_icon_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(icon_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$3338.const$4,"gtk_status_icon_new_from_gicon");
    }
    /**
     * {@snippet :
     * struct _GtkStatusIcon* gtk_status_icon_new_from_gicon(struct _GIcon* icon);
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_gicon(MemorySegment icon) {
        var mh$ = gtk_status_icon_new_from_gicon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$3338.const$5,"gtk_status_icon_set_from_pixbuf");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_from_pixbuf(struct _GtkStatusIcon* status_icon, struct _GdkPixbuf* pixbuf);
     * }
     */
    public static void gtk_status_icon_set_from_pixbuf(MemorySegment status_icon, MemorySegment pixbuf) {
        var mh$ = gtk_status_icon_set_from_pixbuf$MH();
        try {
            mh$.invokeExact(status_icon, pixbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$3339.const$0,"gtk_status_icon_set_from_file");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_from_file(struct _GtkStatusIcon* status_icon, char* filename);
     * }
     */
    public static void gtk_status_icon_set_from_file(MemorySegment status_icon, MemorySegment filename) {
        var mh$ = gtk_status_icon_set_from_file$MH();
        try {
            mh$.invokeExact(status_icon, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$3339.const$1,"gtk_status_icon_set_from_stock");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_from_stock(struct _GtkStatusIcon* status_icon, char* stock_id);
     * }
     */
    public static void gtk_status_icon_set_from_stock(MemorySegment status_icon, MemorySegment stock_id) {
        var mh$ = gtk_status_icon_set_from_stock$MH();
        try {
            mh$.invokeExact(status_icon, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3339.const$2,"gtk_status_icon_set_from_icon_name");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_from_icon_name(struct _GtkStatusIcon* status_icon, char* icon_name);
     * }
     */
    public static void gtk_status_icon_set_from_icon_name(MemorySegment status_icon, MemorySegment icon_name) {
        var mh$ = gtk_status_icon_set_from_icon_name$MH();
        try {
            mh$.invokeExact(status_icon, icon_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$3339.const$3,"gtk_status_icon_set_from_gicon");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_from_gicon(struct _GtkStatusIcon* status_icon, struct _GIcon* icon);
     * }
     */
    public static void gtk_status_icon_set_from_gicon(MemorySegment status_icon, MemorySegment icon) {
        var mh$ = gtk_status_icon_set_from_gicon$MH();
        try {
            mh$.invokeExact(status_icon, icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_storage_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3339.const$4,"gtk_status_icon_get_storage_type");
    }
    /**
     * {@snippet :
     * enum GtkImageType gtk_status_icon_get_storage_type(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_get_storage_type(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_storage_type$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$3339.const$5,"gtk_status_icon_get_pixbuf");
    }
    /**
     * {@snippet :
     * struct _GdkPixbuf* gtk_status_icon_get_pixbuf(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_pixbuf(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_pixbuf$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$3340.const$0,"gtk_status_icon_get_stock");
    }
    /**
     * {@snippet :
     * char* gtk_status_icon_get_stock(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_stock(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_stock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3340.const$1,"gtk_status_icon_get_icon_name");
    }
    /**
     * {@snippet :
     * char* gtk_status_icon_get_icon_name(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_icon_name(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_icon_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$3340.const$2,"gtk_status_icon_get_gicon");
    }
    /**
     * {@snippet :
     * struct _GIcon* gtk_status_icon_get_gicon(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_gicon(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_gicon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$3340.const$3,"gtk_status_icon_get_size");
    }
    /**
     * {@snippet :
     * int gtk_status_icon_get_size(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_get_size(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_size$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$3340.const$4,"gtk_status_icon_set_screen");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_screen(struct _GtkStatusIcon* status_icon, struct _GdkScreen* screen);
     * }
     */
    public static void gtk_status_icon_set_screen(MemorySegment status_icon, MemorySegment screen) {
        var mh$ = gtk_status_icon_set_screen$MH();
        try {
            mh$.invokeExact(status_icon, screen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$3340.const$5,"gtk_status_icon_get_screen");
    }
    /**
     * {@snippet :
     * struct _GdkScreen* gtk_status_icon_get_screen(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_screen(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_screen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_has_tooltip$MH() {
        return RuntimeHelper.requireNonNull(constants$3341.const$0,"gtk_status_icon_set_has_tooltip");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_has_tooltip(struct _GtkStatusIcon* status_icon, int has_tooltip);
     * }
     */
    public static void gtk_status_icon_set_has_tooltip(MemorySegment status_icon, int has_tooltip) {
        var mh$ = gtk_status_icon_set_has_tooltip$MH();
        try {
            mh$.invokeExact(status_icon, has_tooltip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_tooltip_text$MH() {
        return RuntimeHelper.requireNonNull(constants$3341.const$1,"gtk_status_icon_set_tooltip_text");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_tooltip_text(struct _GtkStatusIcon* status_icon, char* text);
     * }
     */
    public static void gtk_status_icon_set_tooltip_text(MemorySegment status_icon, MemorySegment text) {
        var mh$ = gtk_status_icon_set_tooltip_text$MH();
        try {
            mh$.invokeExact(status_icon, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_tooltip_markup$MH() {
        return RuntimeHelper.requireNonNull(constants$3341.const$2,"gtk_status_icon_set_tooltip_markup");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_tooltip_markup(struct _GtkStatusIcon* status_icon, char* markup);
     * }
     */
    public static void gtk_status_icon_set_tooltip_markup(MemorySegment status_icon, MemorySegment markup) {
        var mh$ = gtk_status_icon_set_tooltip_markup$MH();
        try {
            mh$.invokeExact(status_icon, markup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_title$MH() {
        return RuntimeHelper.requireNonNull(constants$3341.const$3,"gtk_status_icon_set_title");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_title(struct _GtkStatusIcon* status_icon, char* title);
     * }
     */
    public static void gtk_status_icon_set_title(MemorySegment status_icon, MemorySegment title) {
        var mh$ = gtk_status_icon_set_title$MH();
        try {
            mh$.invokeExact(status_icon, title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_title$MH() {
        return RuntimeHelper.requireNonNull(constants$3341.const$4,"gtk_status_icon_get_title");
    }
    /**
     * {@snippet :
     * char* gtk_status_icon_get_title(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_title(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_title$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_name$MH() {
        return RuntimeHelper.requireNonNull(constants$3341.const$5,"gtk_status_icon_set_name");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_name(struct _GtkStatusIcon* status_icon, char* name);
     * }
     */
    public static void gtk_status_icon_set_name(MemorySegment status_icon, MemorySegment name) {
        var mh$ = gtk_status_icon_set_name$MH();
        try {
            mh$.invokeExact(status_icon, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$3342.const$0,"gtk_status_icon_set_visible");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_visible(struct _GtkStatusIcon* status_icon, int visible);
     * }
     */
    public static void gtk_status_icon_set_visible(MemorySegment status_icon, int visible) {
        var mh$ = gtk_status_icon_set_visible$MH();
        try {
            mh$.invokeExact(status_icon, visible);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$3342.const$1,"gtk_status_icon_get_visible");
    }
    /**
     * {@snippet :
     * int gtk_status_icon_get_visible(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_get_visible(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_visible$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_is_embedded$MH() {
        return RuntimeHelper.requireNonNull(constants$3342.const$2,"gtk_status_icon_is_embedded");
    }
    /**
     * {@snippet :
     * int gtk_status_icon_is_embedded(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_is_embedded(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_is_embedded$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_position_menu$MH() {
        return RuntimeHelper.requireNonNull(constants$3342.const$3,"gtk_status_icon_position_menu");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_position_menu(struct _GtkMenu* menu, int* x, int* y, int* push_in, void* user_data);
     * }
     */
    public static void gtk_status_icon_position_menu(MemorySegment menu, MemorySegment x, MemorySegment y, MemorySegment push_in, MemorySegment user_data) {
        var mh$ = gtk_status_icon_position_menu$MH();
        try {
            mh$.invokeExact(menu, x, y, push_in, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_geometry$MH() {
        return RuntimeHelper.requireNonNull(constants$3342.const$4,"gtk_status_icon_get_geometry");
    }
    /**
     * {@snippet :
     * int gtk_status_icon_get_geometry(struct _GtkStatusIcon* status_icon, struct _GdkScreen** screen, struct _cairo_rectangle_int* area, enum GtkOrientation* orientation);
     * }
     */
    public static int gtk_status_icon_get_geometry(MemorySegment status_icon, MemorySegment screen, MemorySegment area, MemorySegment orientation) {
        var mh$ = gtk_status_icon_get_geometry$MH();
        try {
            return (int)mh$.invokeExact(status_icon, screen, area, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_has_tooltip$MH() {
        return RuntimeHelper.requireNonNull(constants$3342.const$5,"gtk_status_icon_get_has_tooltip");
    }
    /**
     * {@snippet :
     * int gtk_status_icon_get_has_tooltip(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_get_has_tooltip(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_has_tooltip$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_tooltip_text$MH() {
        return RuntimeHelper.requireNonNull(constants$3343.const$0,"gtk_status_icon_get_tooltip_text");
    }
    /**
     * {@snippet :
     * char* gtk_status_icon_get_tooltip_text(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_tooltip_text(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_tooltip_text$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_tooltip_markup$MH() {
        return RuntimeHelper.requireNonNull(constants$3343.const$1,"gtk_status_icon_get_tooltip_markup");
    }
    /**
     * {@snippet :
     * char* gtk_status_icon_get_tooltip_markup(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_tooltip_markup(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_tooltip_markup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_x11_window_id$MH() {
        return RuntimeHelper.requireNonNull(constants$3343.const$2,"gtk_status_icon_get_x11_window_id");
    }
    /**
     * {@snippet :
     * unsigned int gtk_status_icon_get_x11_window_id(struct _GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_get_x11_window_id(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_x11_window_id$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GtkExpanderStyle.GTK_EXPANDER_COLLAPSED = 0;
     * }
     */
    public static int GTK_EXPANDER_COLLAPSED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GtkExpanderStyle.GTK_EXPANDER_SEMI_COLLAPSED = 1;
     * }
     */
    public static int GTK_EXPANDER_SEMI_COLLAPSED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GtkExpanderStyle.GTK_EXPANDER_SEMI_EXPANDED = 2;
     * }
     */
    public static int GTK_EXPANDER_SEMI_EXPANDED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GtkExpanderStyle.GTK_EXPANDER_EXPANDED = 3;
     * }
     */
    public static int GTK_EXPANDER_EXPANDED() {
        return (int)3L;
    }
    public static MethodHandle gtk_style_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3361.const$0,"gtk_style_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_style_get_type();
     * }
     */
    public static long gtk_style_get_type() {
        var mh$ = gtk_style_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3361.const$1,"gtk_style_new");
    }
    /**
     * {@snippet :
     * struct _GtkStyle* gtk_style_new();
     * }
     */
    public static MemorySegment gtk_style_new() {
        var mh$ = gtk_style_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$3361.const$2,"gtk_style_copy");
    }
    /**
     * {@snippet :
     * struct _GtkStyle* gtk_style_copy(struct _GtkStyle* style);
     * }
     */
    public static MemorySegment gtk_style_copy(MemorySegment style) {
        var mh$ = gtk_style_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_attach$MH() {
        return RuntimeHelper.requireNonNull(constants$3361.const$3,"gtk_style_attach");
    }
    /**
     * {@snippet :
     * struct _GtkStyle* gtk_style_attach(struct _GtkStyle* style, struct _GdkWindow* window);
     * }
     */
    public static MemorySegment gtk_style_attach(MemorySegment style, MemorySegment window) {
        var mh$ = gtk_style_attach$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(style, window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_detach$MH() {
        return RuntimeHelper.requireNonNull(constants$3361.const$4,"gtk_style_detach");
    }
    /**
     * {@snippet :
     * void gtk_style_detach(struct _GtkStyle* style);
     * }
     */
    public static void gtk_style_detach(MemorySegment style) {
        var mh$ = gtk_style_detach$MH();
        try {
            mh$.invokeExact(style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_set_background$MH() {
        return RuntimeHelper.requireNonNull(constants$3361.const$5,"gtk_style_set_background");
    }
    /**
     * {@snippet :
     * void gtk_style_set_background(struct _GtkStyle* style, struct _GdkWindow* window, enum GtkStateType state_type);
     * }
     */
    public static void gtk_style_set_background(MemorySegment style, MemorySegment window, int state_type) {
        var mh$ = gtk_style_set_background$MH();
        try {
            mh$.invokeExact(style, window, state_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_apply_default_background$MH() {
        return RuntimeHelper.requireNonNull(constants$3362.const$1,"gtk_style_apply_default_background");
    }
    /**
     * {@snippet :
     * void gtk_style_apply_default_background(struct _GtkStyle* style, struct _cairo* cr, struct _GdkWindow* window, enum GtkStateType state_type, int x, int y, int width, int height);
     * }
     */
    public static void gtk_style_apply_default_background(MemorySegment style, MemorySegment cr, MemorySegment window, int state_type, int x, int y, int width, int height) {
        var mh$ = gtk_style_apply_default_background$MH();
        try {
            mh$.invokeExact(style, cr, window, state_type, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_lookup_icon_set$MH() {
        return RuntimeHelper.requireNonNull(constants$3362.const$2,"gtk_style_lookup_icon_set");
    }
    /**
     * {@snippet :
     * struct _GtkIconSet* gtk_style_lookup_icon_set(struct _GtkStyle* style, char* stock_id);
     * }
     */
    public static MemorySegment gtk_style_lookup_icon_set(MemorySegment style, MemorySegment stock_id) {
        var mh$ = gtk_style_lookup_icon_set$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(style, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_lookup_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3362.const$3,"gtk_style_lookup_color");
    }
    /**
     * {@snippet :
     * int gtk_style_lookup_color(struct _GtkStyle* style, char* color_name, struct _GdkColor* color);
     * }
     */
    public static int gtk_style_lookup_color(MemorySegment style, MemorySegment color_name, MemorySegment color) {
        var mh$ = gtk_style_lookup_color$MH();
        try {
            return (int)mh$.invokeExact(style, color_name, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_render_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$3362.const$4,"gtk_style_render_icon");
    }
    /**
     * {@snippet :
     * struct _GdkPixbuf* gtk_style_render_icon(struct _GtkStyle* style, struct _GtkIconSource* source, enum GtkTextDirection direction, enum GtkStateType state, enum GtkIconSize size, struct _GtkWidget* widget, char* detail);
     * }
     */
    public static MemorySegment gtk_style_render_icon(MemorySegment style, MemorySegment source, int direction, int state, int size, MemorySegment widget, MemorySegment detail) {
        var mh$ = gtk_style_render_icon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(style, source, direction, state, size, widget, detail);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_hline$MH() {
        return RuntimeHelper.requireNonNull(constants$3362.const$5,"gtk_paint_hline");
    }
    /**
     * {@snippet :
     * void gtk_paint_hline(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, struct _GtkWidget* widget, char* detail, int x1, int x2, int y);
     * }
     */
    public static void gtk_paint_hline(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int x1, int x2, int y) {
        var mh$ = gtk_paint_hline$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, x1, x2, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_vline$MH() {
        return RuntimeHelper.requireNonNull(constants$3363.const$0,"gtk_paint_vline");
    }
    /**
     * {@snippet :
     * void gtk_paint_vline(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, struct _GtkWidget* widget, char* detail, int y1_, int y2_, int x);
     * }
     */
    public static void gtk_paint_vline(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int y1_, int y2_, int x) {
        var mh$ = gtk_paint_vline$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, y1_, y2_, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_shadow$MH() {
        return RuntimeHelper.requireNonNull(constants$3363.const$1,"gtk_paint_shadow");
    }
    /**
     * {@snippet :
     * void gtk_paint_shadow(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_shadow(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_shadow$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_arrow$MH() {
        return RuntimeHelper.requireNonNull(constants$3363.const$2,"gtk_paint_arrow");
    }
    /**
     * {@snippet :
     * void gtk_paint_arrow(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, enum GtkArrowType arrow_type, int fill, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_arrow(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int arrow_type, int fill, int x, int y, int width, int height) {
        var mh$ = gtk_paint_arrow$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, arrow_type, fill, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_diamond$MH() {
        return RuntimeHelper.requireNonNull(constants$3363.const$3,"gtk_paint_diamond");
    }
    /**
     * {@snippet :
     * void gtk_paint_diamond(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_diamond(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_diamond$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_box$MH() {
        return RuntimeHelper.requireNonNull(constants$3363.const$4,"gtk_paint_box");
    }
    /**
     * {@snippet :
     * void gtk_paint_box(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_box(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_box$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_flat_box$MH() {
        return RuntimeHelper.requireNonNull(constants$3363.const$5,"gtk_paint_flat_box");
    }
    /**
     * {@snippet :
     * void gtk_paint_flat_box(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_flat_box(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_flat_box$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_check$MH() {
        return RuntimeHelper.requireNonNull(constants$3364.const$0,"gtk_paint_check");
    }
    /**
     * {@snippet :
     * void gtk_paint_check(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_check(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_check$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_option$MH() {
        return RuntimeHelper.requireNonNull(constants$3364.const$1,"gtk_paint_option");
    }
    /**
     * {@snippet :
     * void gtk_paint_option(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_option(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_option$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_tab$MH() {
        return RuntimeHelper.requireNonNull(constants$3364.const$2,"gtk_paint_tab");
    }
    /**
     * {@snippet :
     * void gtk_paint_tab(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_tab(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_tab$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_shadow_gap$MH() {
        return RuntimeHelper.requireNonNull(constants$3364.const$3,"gtk_paint_shadow_gap");
    }
    /**
     * {@snippet :
     * void gtk_paint_shadow_gap(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height, enum GtkPositionType gap_side, int gap_x, int gap_width);
     * }
     */
    public static void gtk_paint_shadow_gap(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int gap_side, int gap_x, int gap_width) {
        var mh$ = gtk_paint_shadow_gap$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_box_gap$MH() {
        return RuntimeHelper.requireNonNull(constants$3364.const$4,"gtk_paint_box_gap");
    }
    /**
     * {@snippet :
     * void gtk_paint_box_gap(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height, enum GtkPositionType gap_side, int gap_x, int gap_width);
     * }
     */
    public static void gtk_paint_box_gap(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int gap_side, int gap_x, int gap_width) {
        var mh$ = gtk_paint_box_gap$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_extension$MH() {
        return RuntimeHelper.requireNonNull(constants$3364.const$5,"gtk_paint_extension");
    }
    /**
     * {@snippet :
     * void gtk_paint_extension(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height, enum GtkPositionType gap_side);
     * }
     */
    public static void gtk_paint_extension(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int gap_side) {
        var mh$ = gtk_paint_extension$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_focus$MH() {
        return RuntimeHelper.requireNonNull(constants$3365.const$0,"gtk_paint_focus");
    }
    /**
     * {@snippet :
     * void gtk_paint_focus(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_focus(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_focus$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_slider$MH() {
        return RuntimeHelper.requireNonNull(constants$3365.const$1,"gtk_paint_slider");
    }
    /**
     * {@snippet :
     * void gtk_paint_slider(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height, enum GtkOrientation orientation);
     * }
     */
    public static void gtk_paint_slider(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int orientation) {
        var mh$ = gtk_paint_slider$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$3365.const$2,"gtk_paint_handle");
    }
    /**
     * {@snippet :
     * void gtk_paint_handle(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, enum GtkShadowType shadow_type, struct _GtkWidget* widget, char* detail, int x, int y, int width, int height, enum GtkOrientation orientation);
     * }
     */
    public static void gtk_paint_handle(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int orientation) {
        var mh$ = gtk_paint_handle$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_expander$MH() {
        return RuntimeHelper.requireNonNull(constants$3365.const$3,"gtk_paint_expander");
    }
    /**
     * {@snippet :
     * void gtk_paint_expander(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, struct _GtkWidget* widget, char* detail, int x, int y, enum GtkExpanderStyle expander_style);
     * }
     */
    public static void gtk_paint_expander(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int x, int y, int expander_style) {
        var mh$ = gtk_paint_expander$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, x, y, expander_style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$3365.const$4,"gtk_paint_layout");
    }
    /**
     * {@snippet :
     * void gtk_paint_layout(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, int use_text, struct _GtkWidget* widget, char* detail, int x, int y, struct _PangoLayout* layout);
     * }
     */
    public static void gtk_paint_layout(MemorySegment style, MemorySegment cr, int state_type, int use_text, MemorySegment widget, MemorySegment detail, int x, int y, MemorySegment layout) {
        var mh$ = gtk_paint_layout$MH();
        try {
            mh$.invokeExact(style, cr, state_type, use_text, widget, detail, x, y, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_resize_grip$MH() {
        return RuntimeHelper.requireNonNull(constants$3365.const$5,"gtk_paint_resize_grip");
    }
    /**
     * {@snippet :
     * void gtk_paint_resize_grip(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, struct _GtkWidget* widget, char* detail, enum GdkWindowEdge edge, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_resize_grip(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int edge, int x, int y, int width, int height) {
        var mh$ = gtk_paint_resize_grip$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, edge, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_spinner$MH() {
        return RuntimeHelper.requireNonNull(constants$3366.const$0,"gtk_paint_spinner");
    }
    /**
     * {@snippet :
     * void gtk_paint_spinner(struct _GtkStyle* style, struct _cairo* cr, enum GtkStateType state_type, struct _GtkWidget* widget, char* detail, unsigned int step, int x, int y, int width, int height);
     * }
     */
    public static void gtk_paint_spinner(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int step, int x, int y, int width, int height) {
        var mh$ = gtk_paint_spinner$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, step, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_get_style_property$MH() {
        return RuntimeHelper.requireNonNull(constants$3366.const$1,"gtk_style_get_style_property");
    }
    /**
     * {@snippet :
     * void gtk_style_get_style_property(struct _GtkStyle* style, unsigned long widget_type, char* property_name, struct _GValue* value);
     * }
     */
    public static void gtk_style_get_style_property(MemorySegment style, long widget_type, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_style_get_style_property$MH();
        try {
            mh$.invokeExact(style, widget_type, property_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_get_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$3366.const$3,"gtk_style_get_valist");
    }
    /**
     * {@snippet :
     * void gtk_style_get_valist(struct _GtkStyle* style, unsigned long widget_type, char* first_property_name, struct __va_list var_args);
     * }
     */
    public static void gtk_style_get_valist(MemorySegment style, long widget_type, MemorySegment first_property_name, MemorySegment var_args) {
        var mh$ = gtk_style_get_valist$MH();
        try {
            mh$.invokeExact(style, widget_type, first_property_name, var_args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_get$MH() {
        return RuntimeHelper.requireNonNull(constants$3366.const$4,"gtk_style_get");
    }
    /**
     * {@snippet :
     * void gtk_style_get(struct _GtkStyle* style, unsigned long widget_type, char* first_property_name,...);
     * }
     */
    public static void gtk_style_get(MemorySegment style, long widget_type, MemorySegment first_property_name, Object... x3) {
        var mh$ = gtk_style_get$MH();
        try {
            mh$.invokeExact(style, widget_type, first_property_name, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_style_new_for_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3366.const$5,"_gtk_style_new_for_path");
    }
    /**
     * {@snippet :
     * struct _GtkStyle* _gtk_style_new_for_path(struct _GdkScreen* screen, struct _GtkWidgetPath* path);
     * }
     */
    public static MemorySegment _gtk_style_new_for_path(MemorySegment screen, MemorySegment path) {
        var mh$ = _gtk_style_new_for_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(screen, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_style_shade$MH() {
        return RuntimeHelper.requireNonNull(constants$3367.const$0,"_gtk_style_shade");
    }
    /**
     * {@snippet :
     * void _gtk_style_shade(struct _GdkColor* a, struct _GdkColor* b, double k);
     * }
     */
    public static void _gtk_style_shade(MemorySegment a, MemorySegment b, double k) {
        var mh$ = _gtk_style_shade$MH();
        try {
            mh$.invokeExact(a, b, k);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_has_context$MH() {
        return RuntimeHelper.requireNonNull(constants$3367.const$1,"gtk_style_has_context");
    }
    /**
     * {@snippet :
     * int gtk_style_has_context(struct _GtkStyle* style);
     * }
     */
    public static int gtk_style_has_context(MemorySegment style) {
        var mh$ = gtk_style_has_context$MH();
        try {
            return (int)mh$.invokeExact(style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_style_attach$MH() {
        return RuntimeHelper.requireNonNull(constants$3367.const$2,"gtk_widget_style_attach");
    }
    /**
     * {@snippet :
     * void gtk_widget_style_attach(struct _GtkWidget* widget);
     * }
     */
    public static void gtk_widget_style_attach(MemorySegment widget) {
        var mh$ = gtk_widget_style_attach$MH();
        try {
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_has_rc_style$MH() {
        return RuntimeHelper.requireNonNull(constants$3367.const$3,"gtk_widget_has_rc_style");
    }
    /**
     * {@snippet :
     * int gtk_widget_has_rc_style(struct _GtkWidget* widget);
     * }
     */
    public static int gtk_widget_has_rc_style(MemorySegment widget) {
        var mh$ = gtk_widget_has_rc_style$MH();
        try {
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_set_style$MH() {
        return RuntimeHelper.requireNonNull(constants$3367.const$4,"gtk_widget_set_style");
    }
    /**
     * {@snippet :
     * void gtk_widget_set_style(struct _GtkWidget* widget, struct _GtkStyle* style);
     * }
     */
    public static void gtk_widget_set_style(MemorySegment widget, MemorySegment style) {
        var mh$ = gtk_widget_set_style$MH();
        try {
            mh$.invokeExact(widget, style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_ensure_style$MH() {
        return RuntimeHelper.requireNonNull(constants$3367.const$5,"gtk_widget_ensure_style");
    }
    /**
     * {@snippet :
     * void gtk_widget_ensure_style(struct _GtkWidget* widget);
     * }
     */
    public static void gtk_widget_ensure_style(MemorySegment widget) {
        var mh$ = gtk_widget_ensure_style$MH();
        try {
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_get_style$MH() {
        return RuntimeHelper.requireNonNull(constants$3368.const$0,"gtk_widget_get_style");
    }
    /**
     * {@snippet :
     * struct _GtkStyle* gtk_widget_get_style(struct _GtkWidget* widget);
     * }
     */
    public static MemorySegment gtk_widget_get_style(MemorySegment widget) {
        var mh$ = gtk_widget_get_style$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_style$MH() {
        return RuntimeHelper.requireNonNull(constants$3368.const$1,"gtk_widget_modify_style");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_style(struct _GtkWidget* widget, struct _GtkRcStyle* style);
     * }
     */
    public static void gtk_widget_modify_style(MemorySegment widget, MemorySegment style) {
        var mh$ = gtk_widget_modify_style$MH();
        try {
            mh$.invokeExact(widget, style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_get_modifier_style$MH() {
        return RuntimeHelper.requireNonNull(constants$3368.const$2,"gtk_widget_get_modifier_style");
    }
    /**
     * {@snippet :
     * struct _GtkRcStyle* gtk_widget_get_modifier_style(struct _GtkWidget* widget);
     * }
     */
    public static MemorySegment gtk_widget_get_modifier_style(MemorySegment widget) {
        var mh$ = gtk_widget_get_modifier_style$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_fg$MH() {
        return RuntimeHelper.requireNonNull(constants$3368.const$3,"gtk_widget_modify_fg");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_fg(struct _GtkWidget* widget, enum GtkStateType state, struct _GdkColor* color);
     * }
     */
    public static void gtk_widget_modify_fg(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_fg$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_bg$MH() {
        return RuntimeHelper.requireNonNull(constants$3368.const$4,"gtk_widget_modify_bg");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_bg(struct _GtkWidget* widget, enum GtkStateType state, struct _GdkColor* color);
     * }
     */
    public static void gtk_widget_modify_bg(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_bg$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_text$MH() {
        return RuntimeHelper.requireNonNull(constants$3368.const$5,"gtk_widget_modify_text");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_text(struct _GtkWidget* widget, enum GtkStateType state, struct _GdkColor* color);
     * }
     */
    public static void gtk_widget_modify_text(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_text$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_base$MH() {
        return RuntimeHelper.requireNonNull(constants$3369.const$0,"gtk_widget_modify_base");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_base(struct _GtkWidget* widget, enum GtkStateType state, struct _GdkColor* color);
     * }
     */
    public static void gtk_widget_modify_base(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_base$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_cursor$MH() {
        return RuntimeHelper.requireNonNull(constants$3369.const$1,"gtk_widget_modify_cursor");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_cursor(struct _GtkWidget* widget, struct _GdkColor* primary, struct _GdkColor* secondary);
     * }
     */
    public static void gtk_widget_modify_cursor(MemorySegment widget, MemorySegment primary, MemorySegment secondary) {
        var mh$ = gtk_widget_modify_cursor$MH();
        try {
            mh$.invokeExact(widget, primary, secondary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_font$MH() {
        return RuntimeHelper.requireNonNull(constants$3369.const$2,"gtk_widget_modify_font");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_font(struct _GtkWidget* widget, struct _PangoFontDescription* font_desc);
     * }
     */
    public static void gtk_widget_modify_font(MemorySegment widget, MemorySegment font_desc) {
        var mh$ = gtk_widget_modify_font$MH();
        try {
            mh$.invokeExact(widget, font_desc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_reset_rc_styles$MH() {
        return RuntimeHelper.requireNonNull(constants$3369.const$3,"gtk_widget_reset_rc_styles");
    }
    /**
     * {@snippet :
     * void gtk_widget_reset_rc_styles(struct _GtkWidget* widget);
     * }
     */
    public static void gtk_widget_reset_rc_styles(MemorySegment widget) {
        var mh$ = gtk_widget_reset_rc_styles$MH();
        try {
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_get_default_style$MH() {
        return RuntimeHelper.requireNonNull(constants$3369.const$4,"gtk_widget_get_default_style");
    }
    /**
     * {@snippet :
     * struct _GtkStyle* gtk_widget_get_default_style();
     * }
     */
    public static MemorySegment gtk_widget_get_default_style() {
        var mh$ = gtk_widget_get_default_style$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3369.const$5,"gtk_widget_path");
    }
    /**
     * {@snippet :
     * void gtk_widget_path(struct _GtkWidget* widget, unsigned int* path_length, char** path, char** path_reversed);
     * }
     */
    public static void gtk_widget_path(MemorySegment widget, MemorySegment path_length, MemorySegment path, MemorySegment path_reversed) {
        var mh$ = gtk_widget_path$MH();
        try {
            mh$.invokeExact(widget, path_length, path, path_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_class_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3370.const$0,"gtk_widget_class_path");
    }
    /**
     * {@snippet :
     * void gtk_widget_class_path(struct _GtkWidget* widget, unsigned int* path_length, char** path, char** path_reversed);
     * }
     */
    public static void gtk_widget_class_path(MemorySegment widget, MemorySegment path_length, MemorySegment path, MemorySegment path_reversed) {
        var mh$ = gtk_widget_class_path$MH();
        try {
            mh$.invokeExact(widget, path_length, path, path_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_render_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$3370.const$1,"gtk_widget_render_icon");
    }
    /**
     * {@snippet :
     * struct _GdkPixbuf* gtk_widget_render_icon(struct _GtkWidget* widget, char* stock_id, enum GtkIconSize size, char* detail);
     * }
     */
    public static MemorySegment gtk_widget_render_icon(MemorySegment widget, MemorySegment stock_id, int size, MemorySegment detail) {
        var mh$ = gtk_widget_render_icon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(widget, stock_id, size, detail);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GtkAttachOptions.GTK_EXPAND = 1;
     * }
     */
    public static int GTK_EXPAND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GtkAttachOptions.GTK_SHRINK = 2;
     * }
     */
    public static int GTK_SHRINK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GtkAttachOptions.GTK_FILL = 4;
     * }
     */
    public static int GTK_FILL() {
        return (int)4L;
    }
    public static MethodHandle gtk_table_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3374.const$1,"gtk_table_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_table_get_type();
     * }
     */
    public static long gtk_table_get_type() {
        var mh$ = gtk_table_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3374.const$2,"gtk_table_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_table_new(unsigned int rows, unsigned int columns, int homogeneous);
     * }
     */
    public static MemorySegment gtk_table_new(int rows, int columns, int homogeneous) {
        var mh$ = gtk_table_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(rows, columns, homogeneous);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_resize$MH() {
        return RuntimeHelper.requireNonNull(constants$3374.const$3,"gtk_table_resize");
    }
    /**
     * {@snippet :
     * void gtk_table_resize(struct _GtkTable* table, unsigned int rows, unsigned int columns);
     * }
     */
    public static void gtk_table_resize(MemorySegment table, int rows, int columns) {
        var mh$ = gtk_table_resize$MH();
        try {
            mh$.invokeExact(table, rows, columns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_attach$MH() {
        return RuntimeHelper.requireNonNull(constants$3374.const$5,"gtk_table_attach");
    }
    /**
     * {@snippet :
     * void gtk_table_attach(struct _GtkTable* table, struct _GtkWidget* child, unsigned int left_attach, unsigned int right_attach, unsigned int top_attach, unsigned int bottom_attach, enum GtkAttachOptions xoptions, enum GtkAttachOptions yoptions, unsigned int xpadding, unsigned int ypadding);
     * }
     */
    public static void gtk_table_attach(MemorySegment table, MemorySegment child, int left_attach, int right_attach, int top_attach, int bottom_attach, int xoptions, int yoptions, int xpadding, int ypadding) {
        var mh$ = gtk_table_attach$MH();
        try {
            mh$.invokeExact(table, child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_attach_defaults$MH() {
        return RuntimeHelper.requireNonNull(constants$3375.const$0,"gtk_table_attach_defaults");
    }
    /**
     * {@snippet :
     * void gtk_table_attach_defaults(struct _GtkTable* table, struct _GtkWidget* widget, unsigned int left_attach, unsigned int right_attach, unsigned int top_attach, unsigned int bottom_attach);
     * }
     */
    public static void gtk_table_attach_defaults(MemorySegment table, MemorySegment widget, int left_attach, int right_attach, int top_attach, int bottom_attach) {
        var mh$ = gtk_table_attach_defaults$MH();
        try {
            mh$.invokeExact(table, widget, left_attach, right_attach, top_attach, bottom_attach);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_row_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$3375.const$1,"gtk_table_set_row_spacing");
    }
    /**
     * {@snippet :
     * void gtk_table_set_row_spacing(struct _GtkTable* table, unsigned int row, unsigned int spacing);
     * }
     */
    public static void gtk_table_set_row_spacing(MemorySegment table, int row, int spacing) {
        var mh$ = gtk_table_set_row_spacing$MH();
        try {
            mh$.invokeExact(table, row, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_row_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$3375.const$2,"gtk_table_get_row_spacing");
    }
    /**
     * {@snippet :
     * unsigned int gtk_table_get_row_spacing(struct _GtkTable* table, unsigned int row);
     * }
     */
    public static int gtk_table_get_row_spacing(MemorySegment table, int row) {
        var mh$ = gtk_table_get_row_spacing$MH();
        try {
            return (int)mh$.invokeExact(table, row);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_col_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$3375.const$3,"gtk_table_set_col_spacing");
    }
    /**
     * {@snippet :
     * void gtk_table_set_col_spacing(struct _GtkTable* table, unsigned int column, unsigned int spacing);
     * }
     */
    public static void gtk_table_set_col_spacing(MemorySegment table, int column, int spacing) {
        var mh$ = gtk_table_set_col_spacing$MH();
        try {
            mh$.invokeExact(table, column, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_col_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$3375.const$4,"gtk_table_get_col_spacing");
    }
    /**
     * {@snippet :
     * unsigned int gtk_table_get_col_spacing(struct _GtkTable* table, unsigned int column);
     * }
     */
    public static int gtk_table_get_col_spacing(MemorySegment table, int column) {
        var mh$ = gtk_table_get_col_spacing$MH();
        try {
            return (int)mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_row_spacings$MH() {
        return RuntimeHelper.requireNonNull(constants$3375.const$5,"gtk_table_set_row_spacings");
    }
    /**
     * {@snippet :
     * void gtk_table_set_row_spacings(struct _GtkTable* table, unsigned int spacing);
     * }
     */
    public static void gtk_table_set_row_spacings(MemorySegment table, int spacing) {
        var mh$ = gtk_table_set_row_spacings$MH();
        try {
            mh$.invokeExact(table, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_default_row_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$3376.const$0,"gtk_table_get_default_row_spacing");
    }
    /**
     * {@snippet :
     * unsigned int gtk_table_get_default_row_spacing(struct _GtkTable* table);
     * }
     */
    public static int gtk_table_get_default_row_spacing(MemorySegment table) {
        var mh$ = gtk_table_get_default_row_spacing$MH();
        try {
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_col_spacings$MH() {
        return RuntimeHelper.requireNonNull(constants$3376.const$1,"gtk_table_set_col_spacings");
    }
    /**
     * {@snippet :
     * void gtk_table_set_col_spacings(struct _GtkTable* table, unsigned int spacing);
     * }
     */
    public static void gtk_table_set_col_spacings(MemorySegment table, int spacing) {
        var mh$ = gtk_table_set_col_spacings$MH();
        try {
            mh$.invokeExact(table, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_default_col_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$3376.const$2,"gtk_table_get_default_col_spacing");
    }
    /**
     * {@snippet :
     * unsigned int gtk_table_get_default_col_spacing(struct _GtkTable* table);
     * }
     */
    public static int gtk_table_get_default_col_spacing(MemorySegment table) {
        var mh$ = gtk_table_get_default_col_spacing$MH();
        try {
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_homogeneous$MH() {
        return RuntimeHelper.requireNonNull(constants$3376.const$3,"gtk_table_set_homogeneous");
    }
    /**
     * {@snippet :
     * void gtk_table_set_homogeneous(struct _GtkTable* table, int homogeneous);
     * }
     */
    public static void gtk_table_set_homogeneous(MemorySegment table, int homogeneous) {
        var mh$ = gtk_table_set_homogeneous$MH();
        try {
            mh$.invokeExact(table, homogeneous);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_homogeneous$MH() {
        return RuntimeHelper.requireNonNull(constants$3376.const$4,"gtk_table_get_homogeneous");
    }
    /**
     * {@snippet :
     * int gtk_table_get_homogeneous(struct _GtkTable* table);
     * }
     */
    public static int gtk_table_get_homogeneous(MemorySegment table) {
        var mh$ = gtk_table_get_homogeneous$MH();
        try {
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$3376.const$5,"gtk_table_get_size");
    }
    /**
     * {@snippet :
     * void gtk_table_get_size(struct _GtkTable* table, unsigned int* rows, unsigned int* columns);
     * }
     */
    public static void gtk_table_get_size(MemorySegment table, MemorySegment rows, MemorySegment columns) {
        var mh$ = gtk_table_get_size$MH();
        try {
            mh$.invokeExact(table, rows, columns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tearoff_menu_item_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3378.const$5,"gtk_tearoff_menu_item_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_tearoff_menu_item_get_type();
     * }
     */
    public static long gtk_tearoff_menu_item_get_type() {
        var mh$ = gtk_tearoff_menu_item_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tearoff_menu_item_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3379.const$0,"gtk_tearoff_menu_item_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_tearoff_menu_item_new();
     * }
     */
    public static MemorySegment gtk_tearoff_menu_item_new() {
        var mh$ = gtk_tearoff_menu_item_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3386.const$2,"gtk_theming_engine_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_theming_engine_get_type();
     * }
     */
    public static long gtk_theming_engine_get_type() {
        var mh$ = gtk_theming_engine_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_register_property$MH() {
        return RuntimeHelper.requireNonNull(constants$3386.const$4,"gtk_theming_engine_register_property");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_register_property(char* name_space, int (*parse_func)(char*,struct _GValue*,struct _GError**), struct _GParamSpec* pspec);
     * }
     */
    public static void gtk_theming_engine_register_property(MemorySegment name_space, MemorySegment parse_func, MemorySegment pspec) {
        var mh$ = gtk_theming_engine_register_property$MH();
        try {
            mh$.invokeExact(name_space, parse_func, pspec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_property$MH() {
        return RuntimeHelper.requireNonNull(constants$3386.const$5,"gtk_theming_engine_get_property");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_property(struct _GtkThemingEngine* engine, char* property, enum GtkStateFlags state, struct _GValue* value);
     * }
     */
    public static void gtk_theming_engine_get_property(MemorySegment engine, MemorySegment property, int state, MemorySegment value) {
        var mh$ = gtk_theming_engine_get_property$MH();
        try {
            mh$.invokeExact(engine, property, state, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$3387.const$0,"gtk_theming_engine_get_valist");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_valist(struct _GtkThemingEngine* engine, enum GtkStateFlags state, struct __va_list args);
     * }
     */
    public static void gtk_theming_engine_get_valist(MemorySegment engine, int state, MemorySegment args) {
        var mh$ = gtk_theming_engine_get_valist$MH();
        try {
            mh$.invokeExact(engine, state, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get$MH() {
        return RuntimeHelper.requireNonNull(constants$3387.const$1,"gtk_theming_engine_get");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get(struct _GtkThemingEngine* engine, enum GtkStateFlags state,...);
     * }
     */
    public static void gtk_theming_engine_get(MemorySegment engine, int state, Object... x2) {
        var mh$ = gtk_theming_engine_get$MH();
        try {
            mh$.invokeExact(engine, state, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_style_property$MH() {
        return RuntimeHelper.requireNonNull(constants$3387.const$2,"gtk_theming_engine_get_style_property");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_style_property(struct _GtkThemingEngine* engine, char* property_name, struct _GValue* value);
     * }
     */
    public static void gtk_theming_engine_get_style_property(MemorySegment engine, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_theming_engine_get_style_property$MH();
        try {
            mh$.invokeExact(engine, property_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_style_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$3387.const$3,"gtk_theming_engine_get_style_valist");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_style_valist(struct _GtkThemingEngine* engine, struct __va_list args);
     * }
     */
    public static void gtk_theming_engine_get_style_valist(MemorySegment engine, MemorySegment args) {
        var mh$ = gtk_theming_engine_get_style_valist$MH();
        try {
            mh$.invokeExact(engine, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_style$MH() {
        return RuntimeHelper.requireNonNull(constants$3387.const$4,"gtk_theming_engine_get_style");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_style(struct _GtkThemingEngine* engine,...);
     * }
     */
    public static void gtk_theming_engine_get_style(MemorySegment engine, Object... x1) {
        var mh$ = gtk_theming_engine_get_style$MH();
        try {
            mh$.invokeExact(engine, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_lookup_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3387.const$5,"gtk_theming_engine_lookup_color");
    }
    /**
     * {@snippet :
     * int gtk_theming_engine_lookup_color(struct _GtkThemingEngine* engine, char* color_name, struct _GdkRGBA* color);
     * }
     */
    public static int gtk_theming_engine_lookup_color(MemorySegment engine, MemorySegment color_name, MemorySegment color) {
        var mh$ = gtk_theming_engine_lookup_color$MH();
        try {
            return (int)mh$.invokeExact(engine, color_name, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_path$MH() {
        return RuntimeHelper.requireNonNull(constants$3388.const$0,"gtk_theming_engine_get_path");
    }
    /**
     * {@snippet :
     * struct _GtkWidgetPath* gtk_theming_engine_get_path(struct _GtkThemingEngine* engine);
     * }
     */
    public static MemorySegment gtk_theming_engine_get_path(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_has_class$MH() {
        return RuntimeHelper.requireNonNull(constants$3388.const$1,"gtk_theming_engine_has_class");
    }
    /**
     * {@snippet :
     * int gtk_theming_engine_has_class(struct _GtkThemingEngine* engine, char* style_class);
     * }
     */
    public static int gtk_theming_engine_has_class(MemorySegment engine, MemorySegment style_class) {
        var mh$ = gtk_theming_engine_has_class$MH();
        try {
            return (int)mh$.invokeExact(engine, style_class);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_has_region$MH() {
        return RuntimeHelper.requireNonNull(constants$3388.const$2,"gtk_theming_engine_has_region");
    }
    /**
     * {@snippet :
     * int gtk_theming_engine_has_region(struct _GtkThemingEngine* engine, char* style_region, enum GtkRegionFlags* flags);
     * }
     */
    public static int gtk_theming_engine_has_region(MemorySegment engine, MemorySegment style_region, MemorySegment flags) {
        var mh$ = gtk_theming_engine_has_region$MH();
        try {
            return (int)mh$.invokeExact(engine, style_region, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_state$MH() {
        return RuntimeHelper.requireNonNull(constants$3388.const$3,"gtk_theming_engine_get_state");
    }
    /**
     * {@snippet :
     * enum GtkStateFlags gtk_theming_engine_get_state(struct _GtkThemingEngine* engine);
     * }
     */
    public static int gtk_theming_engine_get_state(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_state$MH();
        try {
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_state_is_running$MH() {
        return RuntimeHelper.requireNonNull(constants$3388.const$4,"gtk_theming_engine_state_is_running");
    }
    /**
     * {@snippet :
     * int gtk_theming_engine_state_is_running(struct _GtkThemingEngine* engine, enum GtkStateType state, double* progress);
     * }
     */
    public static int gtk_theming_engine_state_is_running(MemorySegment engine, int state, MemorySegment progress) {
        var mh$ = gtk_theming_engine_state_is_running$MH();
        try {
            return (int)mh$.invokeExact(engine, state, progress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_direction$MH() {
        return RuntimeHelper.requireNonNull(constants$3388.const$5,"gtk_theming_engine_get_direction");
    }
    /**
     * {@snippet :
     * enum GtkTextDirection gtk_theming_engine_get_direction(struct _GtkThemingEngine* engine);
     * }
     */
    public static int gtk_theming_engine_get_direction(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_direction$MH();
        try {
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_junction_sides$MH() {
        return RuntimeHelper.requireNonNull(constants$3389.const$0,"gtk_theming_engine_get_junction_sides");
    }
    /**
     * {@snippet :
     * enum GtkJunctionSides gtk_theming_engine_get_junction_sides(struct _GtkThemingEngine* engine);
     * }
     */
    public static int gtk_theming_engine_get_junction_sides(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_junction_sides$MH();
        try {
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3389.const$1,"gtk_theming_engine_get_color");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_color(struct _GtkThemingEngine* engine, enum GtkStateFlags state, struct _GdkRGBA* color);
     * }
     */
    public static void gtk_theming_engine_get_color(MemorySegment engine, int state, MemorySegment color) {
        var mh$ = gtk_theming_engine_get_color$MH();
        try {
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_background_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3389.const$2,"gtk_theming_engine_get_background_color");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_background_color(struct _GtkThemingEngine* engine, enum GtkStateFlags state, struct _GdkRGBA* color);
     * }
     */
    public static void gtk_theming_engine_get_background_color(MemorySegment engine, int state, MemorySegment color) {
        var mh$ = gtk_theming_engine_get_background_color$MH();
        try {
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_border_color$MH() {
        return RuntimeHelper.requireNonNull(constants$3389.const$3,"gtk_theming_engine_get_border_color");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_border_color(struct _GtkThemingEngine* engine, enum GtkStateFlags state, struct _GdkRGBA* color);
     * }
     */
    public static void gtk_theming_engine_get_border_color(MemorySegment engine, int state, MemorySegment color) {
        var mh$ = gtk_theming_engine_get_border_color$MH();
        try {
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_border$MH() {
        return RuntimeHelper.requireNonNull(constants$3389.const$4,"gtk_theming_engine_get_border");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_border(struct _GtkThemingEngine* engine, enum GtkStateFlags state, struct _GtkBorder* border);
     * }
     */
    public static void gtk_theming_engine_get_border(MemorySegment engine, int state, MemorySegment border) {
        var mh$ = gtk_theming_engine_get_border$MH();
        try {
            mh$.invokeExact(engine, state, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_padding$MH() {
        return RuntimeHelper.requireNonNull(constants$3389.const$5,"gtk_theming_engine_get_padding");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_padding(struct _GtkThemingEngine* engine, enum GtkStateFlags state, struct _GtkBorder* padding);
     * }
     */
    public static void gtk_theming_engine_get_padding(MemorySegment engine, int state, MemorySegment padding) {
        var mh$ = gtk_theming_engine_get_padding$MH();
        try {
            mh$.invokeExact(engine, state, padding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$3390.const$0,"gtk_theming_engine_get_margin");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_margin(struct _GtkThemingEngine* engine, enum GtkStateFlags state, struct _GtkBorder* margin);
     * }
     */
    public static void gtk_theming_engine_get_margin(MemorySegment engine, int state, MemorySegment margin) {
        var mh$ = gtk_theming_engine_get_margin$MH();
        try {
            mh$.invokeExact(engine, state, margin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_font$MH() {
        return RuntimeHelper.requireNonNull(constants$3390.const$1,"gtk_theming_engine_get_font");
    }
    /**
     * {@snippet :
     * struct _PangoFontDescription* gtk_theming_engine_get_font(struct _GtkThemingEngine* engine, enum GtkStateFlags state);
     * }
     */
    public static MemorySegment gtk_theming_engine_get_font(MemorySegment engine, int state) {
        var mh$ = gtk_theming_engine_get_font$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(engine, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_load$MH() {
        return RuntimeHelper.requireNonNull(constants$3390.const$2,"gtk_theming_engine_load");
    }
    /**
     * {@snippet :
     * struct _GtkThemingEngine* gtk_theming_engine_load(char* name);
     * }
     */
    public static MemorySegment gtk_theming_engine_load(MemorySegment name) {
        var mh$ = gtk_theming_engine_load$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$3390.const$3,"gtk_theming_engine_get_screen");
    }
    /**
     * {@snippet :
     * struct _GdkScreen* gtk_theming_engine_get_screen(struct _GtkThemingEngine* engine);
     * }
     */
    public static MemorySegment gtk_theming_engine_get_screen(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_screen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_AUTO = 0;
     * }
     */
    public static int GTK_UI_MANAGER_AUTO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_MENUBAR = 1;
     * }
     */
    public static int GTK_UI_MANAGER_MENUBAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_MENU = 2;
     * }
     */
    public static int GTK_UI_MANAGER_MENU() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_TOOLBAR = 4;
     * }
     */
    public static int GTK_UI_MANAGER_TOOLBAR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_PLACEHOLDER = 8;
     * }
     */
    public static int GTK_UI_MANAGER_PLACEHOLDER() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_POPUP = 16;
     * }
     */
    public static int GTK_UI_MANAGER_POPUP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_MENUITEM = 32;
     * }
     */
    public static int GTK_UI_MANAGER_MENUITEM() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_TOOLITEM = 64;
     * }
     */
    public static int GTK_UI_MANAGER_TOOLITEM() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_SEPARATOR = 128;
     * }
     */
    public static int GTK_UI_MANAGER_SEPARATOR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_ACCELERATOR = 256;
     * }
     */
    public static int GTK_UI_MANAGER_ACCELERATOR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum GtkUIManagerItemType.GTK_UI_MANAGER_POPUP_WITH_ACCELS = 512;
     * }
     */
    public static int GTK_UI_MANAGER_POPUP_WITH_ACCELS() {
        return (int)512L;
    }
    public static MethodHandle gtk_ui_manager_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3395.const$1,"gtk_ui_manager_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_ui_manager_get_type();
     * }
     */
    public static long gtk_ui_manager_get_type() {
        var mh$ = gtk_ui_manager_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3395.const$2,"gtk_ui_manager_new");
    }
    /**
     * {@snippet :
     * struct _GtkUIManager* gtk_ui_manager_new();
     * }
     */
    public static MemorySegment gtk_ui_manager_new() {
        var mh$ = gtk_ui_manager_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_set_add_tearoffs$MH() {
        return RuntimeHelper.requireNonNull(constants$3395.const$3,"gtk_ui_manager_set_add_tearoffs");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_set_add_tearoffs(struct _GtkUIManager* manager, int add_tearoffs);
     * }
     */
    public static void gtk_ui_manager_set_add_tearoffs(MemorySegment manager, int add_tearoffs) {
        var mh$ = gtk_ui_manager_set_add_tearoffs$MH();
        try {
            mh$.invokeExact(manager, add_tearoffs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_add_tearoffs$MH() {
        return RuntimeHelper.requireNonNull(constants$3395.const$4,"gtk_ui_manager_get_add_tearoffs");
    }
    /**
     * {@snippet :
     * int gtk_ui_manager_get_add_tearoffs(struct _GtkUIManager* manager);
     * }
     */
    public static int gtk_ui_manager_get_add_tearoffs(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_add_tearoffs$MH();
        try {
            return (int)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_insert_action_group$MH() {
        return RuntimeHelper.requireNonNull(constants$3395.const$5,"gtk_ui_manager_insert_action_group");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_insert_action_group(struct _GtkUIManager* manager, struct _GtkActionGroup* action_group, int pos);
     * }
     */
    public static void gtk_ui_manager_insert_action_group(MemorySegment manager, MemorySegment action_group, int pos) {
        var mh$ = gtk_ui_manager_insert_action_group$MH();
        try {
            mh$.invokeExact(manager, action_group, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_remove_action_group$MH() {
        return RuntimeHelper.requireNonNull(constants$3396.const$0,"gtk_ui_manager_remove_action_group");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_remove_action_group(struct _GtkUIManager* manager, struct _GtkActionGroup* action_group);
     * }
     */
    public static void gtk_ui_manager_remove_action_group(MemorySegment manager, MemorySegment action_group) {
        var mh$ = gtk_ui_manager_remove_action_group$MH();
        try {
            mh$.invokeExact(manager, action_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_action_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$3396.const$1,"gtk_ui_manager_get_action_groups");
    }
    /**
     * {@snippet :
     * struct _GList* gtk_ui_manager_get_action_groups(struct _GtkUIManager* manager);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_action_groups(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_action_groups$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_accel_group$MH() {
        return RuntimeHelper.requireNonNull(constants$3396.const$2,"gtk_ui_manager_get_accel_group");
    }
    /**
     * {@snippet :
     * struct _GtkAccelGroup* gtk_ui_manager_get_accel_group(struct _GtkUIManager* manager);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_accel_group(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_accel_group$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_widget$MH() {
        return RuntimeHelper.requireNonNull(constants$3396.const$3,"gtk_ui_manager_get_widget");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_ui_manager_get_widget(struct _GtkUIManager* manager, char* path);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_widget(MemorySegment manager, MemorySegment path) {
        var mh$ = gtk_ui_manager_get_widget$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_toplevels$MH() {
        return RuntimeHelper.requireNonNull(constants$3396.const$4,"gtk_ui_manager_get_toplevels");
    }
    /**
     * {@snippet :
     * struct _GSList* gtk_ui_manager_get_toplevels(struct _GtkUIManager* manager, enum GtkUIManagerItemType types);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_toplevels(MemorySegment manager, int types) {
        var mh$ = gtk_ui_manager_get_toplevels$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager, types);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_action$MH() {
        return RuntimeHelper.requireNonNull(constants$3396.const$5,"gtk_ui_manager_get_action");
    }
    /**
     * {@snippet :
     * struct _GtkAction* gtk_ui_manager_get_action(struct _GtkUIManager* manager, char* path);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_action(MemorySegment manager, MemorySegment path) {
        var mh$ = gtk_ui_manager_get_action$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$3397.const$0,"gtk_ui_manager_add_ui_from_string");
    }
    /**
     * {@snippet :
     * unsigned int gtk_ui_manager_add_ui_from_string(struct _GtkUIManager* manager, char* buffer, long length, struct _GError** error);
     * }
     */
    public static int gtk_ui_manager_add_ui_from_string(MemorySegment manager, MemorySegment buffer, long length, MemorySegment error) {
        var mh$ = gtk_ui_manager_add_ui_from_string$MH();
        try {
            return (int)mh$.invokeExact(manager, buffer, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$3397.const$1,"gtk_ui_manager_add_ui_from_file");
    }
    /**
     * {@snippet :
     * unsigned int gtk_ui_manager_add_ui_from_file(struct _GtkUIManager* manager, char* filename, struct _GError** error);
     * }
     */
    public static int gtk_ui_manager_add_ui_from_file(MemorySegment manager, MemorySegment filename, MemorySegment error) {
        var mh$ = gtk_ui_manager_add_ui_from_file$MH();
        try {
            return (int)mh$.invokeExact(manager, filename, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui_from_resource$MH() {
        return RuntimeHelper.requireNonNull(constants$3397.const$2,"gtk_ui_manager_add_ui_from_resource");
    }
    /**
     * {@snippet :
     * unsigned int gtk_ui_manager_add_ui_from_resource(struct _GtkUIManager* manager, char* resource_path, struct _GError** error);
     * }
     */
    public static int gtk_ui_manager_add_ui_from_resource(MemorySegment manager, MemorySegment resource_path, MemorySegment error) {
        var mh$ = gtk_ui_manager_add_ui_from_resource$MH();
        try {
            return (int)mh$.invokeExact(manager, resource_path, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$3397.const$4,"gtk_ui_manager_add_ui");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_add_ui(struct _GtkUIManager* manager, unsigned int merge_id, char* path, char* name, char* action, enum GtkUIManagerItemType type, int top);
     * }
     */
    public static void gtk_ui_manager_add_ui(MemorySegment manager, int merge_id, MemorySegment path, MemorySegment name, MemorySegment action, int type, int top) {
        var mh$ = gtk_ui_manager_add_ui$MH();
        try {
            mh$.invokeExact(manager, merge_id, path, name, action, type, top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_remove_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$3397.const$5,"gtk_ui_manager_remove_ui");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_remove_ui(struct _GtkUIManager* manager, unsigned int merge_id);
     * }
     */
    public static void gtk_ui_manager_remove_ui(MemorySegment manager, int merge_id) {
        var mh$ = gtk_ui_manager_remove_ui$MH();
        try {
            mh$.invokeExact(manager, merge_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$3398.const$0,"gtk_ui_manager_get_ui");
    }
    /**
     * {@snippet :
     * char* gtk_ui_manager_get_ui(struct _GtkUIManager* manager);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_ui(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_ui$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_ensure_update$MH() {
        return RuntimeHelper.requireNonNull(constants$3398.const$1,"gtk_ui_manager_ensure_update");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_ensure_update(struct _GtkUIManager* manager);
     * }
     */
    public static void gtk_ui_manager_ensure_update(MemorySegment manager) {
        var mh$ = gtk_ui_manager_ensure_update$MH();
        try {
            mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_new_merge_id$MH() {
        return RuntimeHelper.requireNonNull(constants$3398.const$2,"gtk_ui_manager_new_merge_id");
    }
    /**
     * {@snippet :
     * unsigned int gtk_ui_manager_new_merge_id(struct _GtkUIManager* manager);
     * }
     */
    public static int gtk_ui_manager_new_merge_id(MemorySegment manager) {
        var mh$ = gtk_ui_manager_new_merge_id$MH();
        try {
            return (int)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbutton_box_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3398.const$5,"gtk_vbutton_box_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_vbutton_box_get_type();
     * }
     */
    public static long gtk_vbutton_box_get_type() {
        var mh$ = gtk_vbutton_box_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbutton_box_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3399.const$0,"gtk_vbutton_box_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_vbutton_box_new();
     * }
     */
    public static MemorySegment gtk_vbutton_box_new() {
        var mh$ = gtk_vbutton_box_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbox_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3399.const$3,"gtk_vbox_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_vbox_get_type();
     * }
     */
    public static long gtk_vbox_get_type() {
        var mh$ = gtk_vbox_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbox_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3399.const$4,"gtk_vbox_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_vbox_new(int homogeneous, int spacing);
     * }
     */
    public static MemorySegment gtk_vbox_new(int homogeneous, int spacing) {
        var mh$ = gtk_vbox_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(homogeneous, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vpaned_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3400.const$1,"gtk_vpaned_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_vpaned_get_type();
     * }
     */
    public static long gtk_vpaned_get_type() {
        var mh$ = gtk_vpaned_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vpaned_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3400.const$2,"gtk_vpaned_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_vpaned_new();
     * }
     */
    public static MemorySegment gtk_vpaned_new() {
        var mh$ = gtk_vpaned_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscale_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3400.const$5,"gtk_vscale_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_vscale_get_type();
     * }
     */
    public static long gtk_vscale_get_type() {
        var mh$ = gtk_vscale_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscale_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3401.const$0,"gtk_vscale_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_vscale_new(struct _GtkAdjustment* adjustment);
     * }
     */
    public static MemorySegment gtk_vscale_new(MemorySegment adjustment) {
        var mh$ = gtk_vscale_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscale_new_with_range$MH() {
        return RuntimeHelper.requireNonNull(constants$3401.const$1,"gtk_vscale_new_with_range");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_vscale_new_with_range(double min, double max, double step);
     * }
     */
    public static MemorySegment gtk_vscale_new_with_range(double min, double max, double step) {
        var mh$ = gtk_vscale_new_with_range$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(min, max, step);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscrollbar_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3401.const$4,"gtk_vscrollbar_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_vscrollbar_get_type();
     * }
     */
    public static long gtk_vscrollbar_get_type() {
        var mh$ = gtk_vscrollbar_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscrollbar_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3401.const$5,"gtk_vscrollbar_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_vscrollbar_new(struct _GtkAdjustment* adjustment);
     * }
     */
    public static MemorySegment gtk_vscrollbar_new(MemorySegment adjustment) {
        var mh$ = gtk_vscrollbar_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vseparator_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$3402.const$2,"gtk_vseparator_get_type");
    }
    /**
     * {@snippet :
     * unsigned long gtk_vseparator_get_type();
     * }
     */
    public static long gtk_vseparator_get_type() {
        var mh$ = gtk_vseparator_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vseparator_new$MH() {
        return RuntimeHelper.requireNonNull(constants$3402.const$3,"gtk_vseparator_new");
    }
    /**
     * {@snippet :
     * struct _GtkWidget* gtk_vseparator_new();
     * }
     */
    public static MemorySegment gtk_vseparator_new() {
        var mh$ = gtk_vseparator_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkAccessible* GtkAccessible_autoptr;
     * }
     */
    public static final AddressLayout GtkAccessible_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAccessible_listautoptr;
     * }
     */
    public static final AddressLayout GtkAccessible_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAccessible_slistautoptr;
     * }
     */
    public static final AddressLayout GtkAccessible_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAccessible_queueautoptr;
     * }
     */
    public static final AddressLayout GtkAccessible_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkActionBar* GtkActionBar_autoptr;
     * }
     */
    public static final AddressLayout GtkActionBar_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkActionBar_listautoptr;
     * }
     */
    public static final AddressLayout GtkActionBar_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkActionBar_slistautoptr;
     * }
     */
    public static final AddressLayout GtkActionBar_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkActionBar_queueautoptr;
     * }
     */
    public static final AddressLayout GtkActionBar_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkActionable* GtkActionable_autoptr;
     * }
     */
    public static final AddressLayout GtkActionable_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkActionable_listautoptr;
     * }
     */
    public static final AddressLayout GtkActionable_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkActionable_slistautoptr;
     * }
     */
    public static final AddressLayout GtkActionable_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkActionable_queueautoptr;
     * }
     */
    public static final AddressLayout GtkActionable_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkAdjustment* GtkAdjustment_autoptr;
     * }
     */
    public static final AddressLayout GtkAdjustment_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAdjustment_listautoptr;
     * }
     */
    public static final AddressLayout GtkAdjustment_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAdjustment_slistautoptr;
     * }
     */
    public static final AddressLayout GtkAdjustment_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAdjustment_queueautoptr;
     * }
     */
    public static final AddressLayout GtkAdjustment_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooser* GtkAppChooser_autoptr;
     * }
     */
    public static final AddressLayout GtkAppChooser_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooser_listautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooser_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooser_slistautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooser_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooser_queueautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooser_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooserButton* GtkAppChooserButton_autoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooserButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooserButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooserButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooserDialog* GtkAppChooserDialog_autoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserDialog_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooserDialog_listautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserDialog_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooserDialog_slistautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserDialog_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooserDialog_queueautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserDialog_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooserWidget* GtkAppChooserWidget_autoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserWidget_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooserWidget_listautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserWidget_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooserWidget_slistautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserWidget_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooserWidget_queueautoptr;
     * }
     */
    public static final AddressLayout GtkAppChooserWidget_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkApplicationWindow* GtkApplicationWindow_autoptr;
     * }
     */
    public static final AddressLayout GtkApplicationWindow_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkApplicationWindow_listautoptr;
     * }
     */
    public static final AddressLayout GtkApplicationWindow_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkApplicationWindow_slistautoptr;
     * }
     */
    public static final AddressLayout GtkApplicationWindow_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkApplicationWindow_queueautoptr;
     * }
     */
    public static final AddressLayout GtkApplicationWindow_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkAspectFrame* GtkAspectFrame_autoptr;
     * }
     */
    public static final AddressLayout GtkAspectFrame_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAspectFrame_listautoptr;
     * }
     */
    public static final AddressLayout GtkAspectFrame_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAspectFrame_slistautoptr;
     * }
     */
    public static final AddressLayout GtkAspectFrame_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAspectFrame_queueautoptr;
     * }
     */
    public static final AddressLayout GtkAspectFrame_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkAssistant* GtkAssistant_autoptr;
     * }
     */
    public static final AddressLayout GtkAssistant_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAssistant_listautoptr;
     * }
     */
    public static final AddressLayout GtkAssistant_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAssistant_slistautoptr;
     * }
     */
    public static final AddressLayout GtkAssistant_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAssistant_queueautoptr;
     * }
     */
    public static final AddressLayout GtkAssistant_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkBox* GtkBox_autoptr;
     * }
     */
    public static final AddressLayout GtkBox_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkBox_listautoptr;
     * }
     */
    public static final AddressLayout GtkBox_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkBox_slistautoptr;
     * }
     */
    public static final AddressLayout GtkBox_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkBox_queueautoptr;
     * }
     */
    public static final AddressLayout GtkBox_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkBuildable* GtkBuildable_autoptr;
     * }
     */
    public static final AddressLayout GtkBuildable_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkBuildable_listautoptr;
     * }
     */
    public static final AddressLayout GtkBuildable_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkBuildable_slistautoptr;
     * }
     */
    public static final AddressLayout GtkBuildable_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkBuildable_queueautoptr;
     * }
     */
    public static final AddressLayout GtkBuildable_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkBuilder* GtkBuilder_autoptr;
     * }
     */
    public static final AddressLayout GtkBuilder_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkBuilder_listautoptr;
     * }
     */
    public static final AddressLayout GtkBuilder_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkBuilder_slistautoptr;
     * }
     */
    public static final AddressLayout GtkBuilder_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkBuilder_queueautoptr;
     * }
     */
    public static final AddressLayout GtkBuilder_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkButton* GtkButton_autoptr;
     * }
     */
    public static final AddressLayout GtkButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkButtonBox* GtkButtonBox_autoptr;
     * }
     */
    public static final AddressLayout GtkButtonBox_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkButtonBox_listautoptr;
     * }
     */
    public static final AddressLayout GtkButtonBox_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkButtonBox_slistautoptr;
     * }
     */
    public static final AddressLayout GtkButtonBox_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkButtonBox_queueautoptr;
     * }
     */
    public static final AddressLayout GtkButtonBox_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCalendar* GtkCalendar_autoptr;
     * }
     */
    public static final AddressLayout GtkCalendar_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCalendar_listautoptr;
     * }
     */
    public static final AddressLayout GtkCalendar_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCalendar_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCalendar_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCalendar_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCalendar_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellArea* GtkCellArea_autoptr;
     * }
     */
    public static final AddressLayout GtkCellArea_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellArea_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellArea_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellArea_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellArea_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellArea_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellArea_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellAreaBox* GtkCellAreaBox_autoptr;
     * }
     */
    public static final AddressLayout GtkCellAreaBox_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellAreaBox_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellAreaBox_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellAreaBox_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellAreaBox_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellAreaBox_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellAreaBox_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellAreaContext* GtkCellAreaContext_autoptr;
     * }
     */
    public static final AddressLayout GtkCellAreaContext_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellAreaContext_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellAreaContext_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellAreaContext_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellAreaContext_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellAreaContext_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellAreaContext_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellEditable* GtkCellEditable_autoptr;
     * }
     */
    public static final AddressLayout GtkCellEditable_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellEditable_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellEditable_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellEditable_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellEditable_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellEditable_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellEditable_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellLayout* GtkCellLayout_autoptr;
     * }
     */
    public static final AddressLayout GtkCellLayout_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellLayout_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellLayout_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellLayout_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellLayout_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellLayout_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellLayout_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellRenderer* GtkCellRenderer_autoptr;
     * }
     */
    public static final AddressLayout GtkCellRenderer_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRenderer_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellRenderer_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRenderer_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellRenderer_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRenderer_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellRenderer_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererAccel* GtkCellRendererAccel_autoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererAccel_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererAccel_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererAccel_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererAccel_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererAccel_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererAccel_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererAccel_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererCombo* GtkCellRendererCombo_autoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererCombo_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererCombo_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererCombo_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererCombo_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererCombo_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererCombo_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererCombo_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererPixbuf* GtkCellRendererPixbuf_autoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererPixbuf_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererPixbuf_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererPixbuf_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererPixbuf_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererPixbuf_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererPixbuf_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererPixbuf_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererProgress* GtkCellRendererProgress_autoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererProgress_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererProgress_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererProgress_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererProgress_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererProgress_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererProgress_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererProgress_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererSpin* GtkCellRendererSpin_autoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererSpin_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererSpin_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererSpin_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererSpin_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererSpin_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererSpin_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererSpin_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererSpinner* GtkCellRendererSpinner_autoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererSpinner_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererSpinner_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererSpinner_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererSpinner_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererSpinner_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererSpinner_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererSpinner_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererText* GtkCellRendererText_autoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererText_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererText_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererText_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererText_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererText_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererText_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererText_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererToggle* GtkCellRendererToggle_autoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererToggle_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererToggle_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererToggle_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererToggle_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererToggle_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererToggle_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellRendererToggle_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCellView* GtkCellView_autoptr;
     * }
     */
    public static final AddressLayout GtkCellView_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellView_listautoptr;
     * }
     */
    public static final AddressLayout GtkCellView_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellView_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCellView_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellView_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCellView_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCheckButton* GtkCheckButton_autoptr;
     * }
     */
    public static final AddressLayout GtkCheckButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCheckButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkCheckButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCheckButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCheckButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCheckButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCheckButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCheckMenuItem* GtkCheckMenuItem_autoptr;
     * }
     */
    public static final AddressLayout GtkCheckMenuItem_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCheckMenuItem_listautoptr;
     * }
     */
    public static final AddressLayout GtkCheckMenuItem_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCheckMenuItem_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCheckMenuItem_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCheckMenuItem_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCheckMenuItem_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkClipboard* GtkClipboard_autoptr;
     * }
     */
    public static final AddressLayout GtkClipboard_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkClipboard_listautoptr;
     * }
     */
    public static final AddressLayout GtkClipboard_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkClipboard_slistautoptr;
     * }
     */
    public static final AddressLayout GtkClipboard_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkClipboard_queueautoptr;
     * }
     */
    public static final AddressLayout GtkClipboard_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkColorButton* GtkColorButton_autoptr;
     * }
     */
    public static final AddressLayout GtkColorButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkColorButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkColorButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkColorButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkColorChooser* GtkColorChooser_autoptr;
     * }
     */
    public static final AddressLayout GtkColorChooser_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorChooser_listautoptr;
     * }
     */
    public static final AddressLayout GtkColorChooser_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorChooser_slistautoptr;
     * }
     */
    public static final AddressLayout GtkColorChooser_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorChooser_queueautoptr;
     * }
     */
    public static final AddressLayout GtkColorChooser_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkColorChooserDialog* GtkColorChooserDialog_autoptr;
     * }
     */
    public static final AddressLayout GtkColorChooserDialog_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorChooserDialog_listautoptr;
     * }
     */
    public static final AddressLayout GtkColorChooserDialog_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorChooserDialog_slistautoptr;
     * }
     */
    public static final AddressLayout GtkColorChooserDialog_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorChooserDialog_queueautoptr;
     * }
     */
    public static final AddressLayout GtkColorChooserDialog_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkColorChooserWidget* GtkColorChooserWidget_autoptr;
     * }
     */
    public static final AddressLayout GtkColorChooserWidget_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorChooserWidget_listautoptr;
     * }
     */
    public static final AddressLayout GtkColorChooserWidget_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorChooserWidget_slistautoptr;
     * }
     */
    public static final AddressLayout GtkColorChooserWidget_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorChooserWidget_queueautoptr;
     * }
     */
    public static final AddressLayout GtkColorChooserWidget_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkComboBox* GtkComboBox_autoptr;
     * }
     */
    public static final AddressLayout GtkComboBox_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkComboBox_listautoptr;
     * }
     */
    public static final AddressLayout GtkComboBox_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkComboBox_slistautoptr;
     * }
     */
    public static final AddressLayout GtkComboBox_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkComboBox_queueautoptr;
     * }
     */
    public static final AddressLayout GtkComboBox_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkComboBoxText* GtkComboBoxText_autoptr;
     * }
     */
    public static final AddressLayout GtkComboBoxText_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkComboBoxText_listautoptr;
     * }
     */
    public static final AddressLayout GtkComboBoxText_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkComboBoxText_slistautoptr;
     * }
     */
    public static final AddressLayout GtkComboBoxText_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkComboBoxText_queueautoptr;
     * }
     */
    public static final AddressLayout GtkComboBoxText_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkCssProvider* GtkCssProvider_autoptr;
     * }
     */
    public static final AddressLayout GtkCssProvider_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCssProvider_listautoptr;
     * }
     */
    public static final AddressLayout GtkCssProvider_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCssProvider_slistautoptr;
     * }
     */
    public static final AddressLayout GtkCssProvider_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCssProvider_queueautoptr;
     * }
     */
    public static final AddressLayout GtkCssProvider_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkDrawingArea* GtkDrawingArea_autoptr;
     * }
     */
    public static final AddressLayout GtkDrawingArea_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkDrawingArea_listautoptr;
     * }
     */
    public static final AddressLayout GtkDrawingArea_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkDrawingArea_slistautoptr;
     * }
     */
    public static final AddressLayout GtkDrawingArea_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkDrawingArea_queueautoptr;
     * }
     */
    public static final AddressLayout GtkDrawingArea_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkEditable* GtkEditable_autoptr;
     * }
     */
    public static final AddressLayout GtkEditable_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEditable_listautoptr;
     * }
     */
    public static final AddressLayout GtkEditable_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEditable_slistautoptr;
     * }
     */
    public static final AddressLayout GtkEditable_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEditable_queueautoptr;
     * }
     */
    public static final AddressLayout GtkEditable_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkEntry* GtkEntry_autoptr;
     * }
     */
    public static final AddressLayout GtkEntry_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEntry_listautoptr;
     * }
     */
    public static final AddressLayout GtkEntry_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEntry_slistautoptr;
     * }
     */
    public static final AddressLayout GtkEntry_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEntry_queueautoptr;
     * }
     */
    public static final AddressLayout GtkEntry_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkEntryBuffer* GtkEntryBuffer_autoptr;
     * }
     */
    public static final AddressLayout GtkEntryBuffer_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEntryBuffer_listautoptr;
     * }
     */
    public static final AddressLayout GtkEntryBuffer_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEntryBuffer_slistautoptr;
     * }
     */
    public static final AddressLayout GtkEntryBuffer_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEntryBuffer_queueautoptr;
     * }
     */
    public static final AddressLayout GtkEntryBuffer_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkEntryCompletion* GtkEntryCompletion_autoptr;
     * }
     */
    public static final AddressLayout GtkEntryCompletion_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEntryCompletion_listautoptr;
     * }
     */
    public static final AddressLayout GtkEntryCompletion_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEntryCompletion_slistautoptr;
     * }
     */
    public static final AddressLayout GtkEntryCompletion_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEntryCompletion_queueautoptr;
     * }
     */
    public static final AddressLayout GtkEntryCompletion_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkEventBox* GtkEventBox_autoptr;
     * }
     */
    public static final AddressLayout GtkEventBox_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEventBox_listautoptr;
     * }
     */
    public static final AddressLayout GtkEventBox_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEventBox_slistautoptr;
     * }
     */
    public static final AddressLayout GtkEventBox_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEventBox_queueautoptr;
     * }
     */
    public static final AddressLayout GtkEventBox_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkEventController* GtkEventController_autoptr;
     * }
     */
    public static final AddressLayout GtkEventController_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEventController_listautoptr;
     * }
     */
    public static final AddressLayout GtkEventController_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEventController_slistautoptr;
     * }
     */
    public static final AddressLayout GtkEventController_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEventController_queueautoptr;
     * }
     */
    public static final AddressLayout GtkEventController_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkExpander* GtkExpander_autoptr;
     * }
     */
    public static final AddressLayout GtkExpander_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkExpander_listautoptr;
     * }
     */
    public static final AddressLayout GtkExpander_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkExpander_slistautoptr;
     * }
     */
    public static final AddressLayout GtkExpander_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkExpander_queueautoptr;
     * }
     */
    public static final AddressLayout GtkExpander_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFileChooserButton* GtkFileChooserButton_autoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileChooserButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileChooserButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileChooserButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFileChooserDialog* GtkFileChooserDialog_autoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserDialog_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileChooserDialog_listautoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserDialog_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileChooserDialog_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserDialog_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileChooserDialog_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserDialog_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFileChooserWidget* GtkFileChooserWidget_autoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserWidget_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileChooserWidget_listautoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserWidget_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileChooserWidget_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserWidget_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileChooserWidget_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFileChooserWidget_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFileFilter* GtkFileFilter_autoptr;
     * }
     */
    public static final AddressLayout GtkFileFilter_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileFilter_listautoptr;
     * }
     */
    public static final AddressLayout GtkFileFilter_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileFilter_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFileFilter_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileFilter_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFileFilter_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFixed* GtkFixed_autoptr;
     * }
     */
    public static final AddressLayout GtkFixed_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFixed_listautoptr;
     * }
     */
    public static final AddressLayout GtkFixed_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFixed_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFixed_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFixed_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFixed_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFlowBox* GtkFlowBox_autoptr;
     * }
     */
    public static final AddressLayout GtkFlowBox_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFlowBox_listautoptr;
     * }
     */
    public static final AddressLayout GtkFlowBox_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFlowBox_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFlowBox_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFlowBox_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFlowBox_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFlowBoxChild* GtkFlowBoxChild_autoptr;
     * }
     */
    public static final AddressLayout GtkFlowBoxChild_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFlowBoxChild_listautoptr;
     * }
     */
    public static final AddressLayout GtkFlowBoxChild_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFlowBoxChild_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFlowBoxChild_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFlowBoxChild_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFlowBoxChild_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFontButton* GtkFontButton_autoptr;
     * }
     */
    public static final AddressLayout GtkFontButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkFontButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFontButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFontButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFontChooser* GtkFontChooser_autoptr;
     * }
     */
    public static final AddressLayout GtkFontChooser_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontChooser_listautoptr;
     * }
     */
    public static final AddressLayout GtkFontChooser_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontChooser_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFontChooser_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontChooser_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFontChooser_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFontChooserDialog* GtkFontChooserDialog_autoptr;
     * }
     */
    public static final AddressLayout GtkFontChooserDialog_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontChooserDialog_listautoptr;
     * }
     */
    public static final AddressLayout GtkFontChooserDialog_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontChooserDialog_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFontChooserDialog_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontChooserDialog_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFontChooserDialog_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFontChooserWidget* GtkFontChooserWidget_autoptr;
     * }
     */
    public static final AddressLayout GtkFontChooserWidget_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontChooserWidget_listautoptr;
     * }
     */
    public static final AddressLayout GtkFontChooserWidget_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontChooserWidget_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFontChooserWidget_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontChooserWidget_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFontChooserWidget_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkFrame* GtkFrame_autoptr;
     * }
     */
    public static final AddressLayout GtkFrame_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFrame_listautoptr;
     * }
     */
    public static final AddressLayout GtkFrame_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFrame_slistautoptr;
     * }
     */
    public static final AddressLayout GtkFrame_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFrame_queueautoptr;
     * }
     */
    public static final AddressLayout GtkFrame_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGLArea* GtkGLArea_autoptr;
     * }
     */
    public static final AddressLayout GtkGLArea_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGLArea_listautoptr;
     * }
     */
    public static final AddressLayout GtkGLArea_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGLArea_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGLArea_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGLArea_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGLArea_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGesture* GtkGesture_autoptr;
     * }
     */
    public static final AddressLayout GtkGesture_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGesture_listautoptr;
     * }
     */
    public static final AddressLayout GtkGesture_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGesture_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGesture_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGesture_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGesture_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGestureDrag* GtkGestureDrag_autoptr;
     * }
     */
    public static final AddressLayout GtkGestureDrag_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureDrag_listautoptr;
     * }
     */
    public static final AddressLayout GtkGestureDrag_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureDrag_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGestureDrag_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureDrag_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGestureDrag_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGestureLongPress* GtkGestureLongPress_autoptr;
     * }
     */
    public static final AddressLayout GtkGestureLongPress_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureLongPress_listautoptr;
     * }
     */
    public static final AddressLayout GtkGestureLongPress_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureLongPress_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGestureLongPress_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureLongPress_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGestureLongPress_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGestureMultiPress* GtkGestureMultiPress_autoptr;
     * }
     */
    public static final AddressLayout GtkGestureMultiPress_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureMultiPress_listautoptr;
     * }
     */
    public static final AddressLayout GtkGestureMultiPress_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureMultiPress_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGestureMultiPress_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureMultiPress_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGestureMultiPress_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGesturePan* GtkGesturePan_autoptr;
     * }
     */
    public static final AddressLayout GtkGesturePan_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGesturePan_listautoptr;
     * }
     */
    public static final AddressLayout GtkGesturePan_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGesturePan_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGesturePan_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGesturePan_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGesturePan_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGestureRotate* GtkGestureRotate_autoptr;
     * }
     */
    public static final AddressLayout GtkGestureRotate_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureRotate_listautoptr;
     * }
     */
    public static final AddressLayout GtkGestureRotate_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureRotate_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGestureRotate_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureRotate_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGestureRotate_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGestureSingle* GtkGestureSingle_autoptr;
     * }
     */
    public static final AddressLayout GtkGestureSingle_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureSingle_listautoptr;
     * }
     */
    public static final AddressLayout GtkGestureSingle_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureSingle_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGestureSingle_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureSingle_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGestureSingle_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGestureSwipe* GtkGestureSwipe_autoptr;
     * }
     */
    public static final AddressLayout GtkGestureSwipe_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureSwipe_listautoptr;
     * }
     */
    public static final AddressLayout GtkGestureSwipe_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureSwipe_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGestureSwipe_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureSwipe_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGestureSwipe_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGestureZoom* GtkGestureZoom_autoptr;
     * }
     */
    public static final AddressLayout GtkGestureZoom_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureZoom_listautoptr;
     * }
     */
    public static final AddressLayout GtkGestureZoom_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureZoom_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGestureZoom_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureZoom_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGestureZoom_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkGrid* GtkGrid_autoptr;
     * }
     */
    public static final AddressLayout GtkGrid_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGrid_listautoptr;
     * }
     */
    public static final AddressLayout GtkGrid_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGrid_slistautoptr;
     * }
     */
    public static final AddressLayout GtkGrid_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGrid_queueautoptr;
     * }
     */
    public static final AddressLayout GtkGrid_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkHeaderBar* GtkHeaderBar_autoptr;
     * }
     */
    public static final AddressLayout GtkHeaderBar_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkHeaderBar_listautoptr;
     * }
     */
    public static final AddressLayout GtkHeaderBar_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkHeaderBar_slistautoptr;
     * }
     */
    public static final AddressLayout GtkHeaderBar_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkHeaderBar_queueautoptr;
     * }
     */
    public static final AddressLayout GtkHeaderBar_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkIMContext* GtkIMContext_autoptr;
     * }
     */
    public static final AddressLayout GtkIMContext_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIMContext_listautoptr;
     * }
     */
    public static final AddressLayout GtkIMContext_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIMContext_slistautoptr;
     * }
     */
    public static final AddressLayout GtkIMContext_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIMContext_queueautoptr;
     * }
     */
    public static final AddressLayout GtkIMContext_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkIMContextSimple* GtkIMContextSimple_autoptr;
     * }
     */
    public static final AddressLayout GtkIMContextSimple_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIMContextSimple_listautoptr;
     * }
     */
    public static final AddressLayout GtkIMContextSimple_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIMContextSimple_slistautoptr;
     * }
     */
    public static final AddressLayout GtkIMContextSimple_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIMContextSimple_queueautoptr;
     * }
     */
    public static final AddressLayout GtkIMContextSimple_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkIMMulticontext* GtkIMMulticontext_autoptr;
     * }
     */
    public static final AddressLayout GtkIMMulticontext_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIMMulticontext_listautoptr;
     * }
     */
    public static final AddressLayout GtkIMMulticontext_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIMMulticontext_slistautoptr;
     * }
     */
    public static final AddressLayout GtkIMMulticontext_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIMMulticontext_queueautoptr;
     * }
     */
    public static final AddressLayout GtkIMMulticontext_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkIconInfo* GtkIconInfo_autoptr;
     * }
     */
    public static final AddressLayout GtkIconInfo_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIconInfo_listautoptr;
     * }
     */
    public static final AddressLayout GtkIconInfo_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIconInfo_slistautoptr;
     * }
     */
    public static final AddressLayout GtkIconInfo_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIconInfo_queueautoptr;
     * }
     */
    public static final AddressLayout GtkIconInfo_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkIconTheme* GtkIconTheme_autoptr;
     * }
     */
    public static final AddressLayout GtkIconTheme_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIconTheme_listautoptr;
     * }
     */
    public static final AddressLayout GtkIconTheme_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIconTheme_slistautoptr;
     * }
     */
    public static final AddressLayout GtkIconTheme_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIconTheme_queueautoptr;
     * }
     */
    public static final AddressLayout GtkIconTheme_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkIconView* GtkIconView_autoptr;
     * }
     */
    public static final AddressLayout GtkIconView_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIconView_listautoptr;
     * }
     */
    public static final AddressLayout GtkIconView_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIconView_slistautoptr;
     * }
     */
    public static final AddressLayout GtkIconView_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIconView_queueautoptr;
     * }
     */
    public static final AddressLayout GtkIconView_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkImage* GtkImage_autoptr;
     * }
     */
    public static final AddressLayout GtkImage_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkImage_listautoptr;
     * }
     */
    public static final AddressLayout GtkImage_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkImage_slistautoptr;
     * }
     */
    public static final AddressLayout GtkImage_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkImage_queueautoptr;
     * }
     */
    public static final AddressLayout GtkImage_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkInfoBar* GtkInfoBar_autoptr;
     * }
     */
    public static final AddressLayout GtkInfoBar_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkInfoBar_listautoptr;
     * }
     */
    public static final AddressLayout GtkInfoBar_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkInfoBar_slistautoptr;
     * }
     */
    public static final AddressLayout GtkInfoBar_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkInfoBar_queueautoptr;
     * }
     */
    public static final AddressLayout GtkInfoBar_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkInvisible* GtkInvisible_autoptr;
     * }
     */
    public static final AddressLayout GtkInvisible_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkInvisible_listautoptr;
     * }
     */
    public static final AddressLayout GtkInvisible_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkInvisible_slistautoptr;
     * }
     */
    public static final AddressLayout GtkInvisible_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkInvisible_queueautoptr;
     * }
     */
    public static final AddressLayout GtkInvisible_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkLayout* GtkLayout_autoptr;
     * }
     */
    public static final AddressLayout GtkLayout_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLayout_listautoptr;
     * }
     */
    public static final AddressLayout GtkLayout_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLayout_slistautoptr;
     * }
     */
    public static final AddressLayout GtkLayout_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLayout_queueautoptr;
     * }
     */
    public static final AddressLayout GtkLayout_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkLevelBar* GtkLevelBar_autoptr;
     * }
     */
    public static final AddressLayout GtkLevelBar_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLevelBar_listautoptr;
     * }
     */
    public static final AddressLayout GtkLevelBar_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLevelBar_slistautoptr;
     * }
     */
    public static final AddressLayout GtkLevelBar_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLevelBar_queueautoptr;
     * }
     */
    public static final AddressLayout GtkLevelBar_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkLinkButton* GtkLinkButton_autoptr;
     * }
     */
    public static final AddressLayout GtkLinkButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLinkButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkLinkButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLinkButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkLinkButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLinkButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkLinkButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkListStore* GtkListStore_autoptr;
     * }
     */
    public static final AddressLayout GtkListStore_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkListStore_listautoptr;
     * }
     */
    public static final AddressLayout GtkListStore_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkListStore_slistautoptr;
     * }
     */
    public static final AddressLayout GtkListStore_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkListStore_queueautoptr;
     * }
     */
    public static final AddressLayout GtkListStore_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkLockButton* GtkLockButton_autoptr;
     * }
     */
    public static final AddressLayout GtkLockButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLockButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkLockButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLockButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkLockButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLockButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkLockButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkMenuBar* GtkMenuBar_autoptr;
     * }
     */
    public static final AddressLayout GtkMenuBar_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMenuBar_listautoptr;
     * }
     */
    public static final AddressLayout GtkMenuBar_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMenuBar_slistautoptr;
     * }
     */
    public static final AddressLayout GtkMenuBar_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMenuBar_queueautoptr;
     * }
     */
    public static final AddressLayout GtkMenuBar_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkMenuButton* GtkMenuButton_autoptr;
     * }
     */
    public static final AddressLayout GtkMenuButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMenuButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkMenuButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMenuButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkMenuButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMenuButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkMenuButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkMenuItem* GtkMenuItem_autoptr;
     * }
     */
    public static final AddressLayout GtkMenuItem_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMenuItem_listautoptr;
     * }
     */
    public static final AddressLayout GtkMenuItem_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMenuItem_slistautoptr;
     * }
     */
    public static final AddressLayout GtkMenuItem_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMenuItem_queueautoptr;
     * }
     */
    public static final AddressLayout GtkMenuItem_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkMenuToolButton* GtkMenuToolButton_autoptr;
     * }
     */
    public static final AddressLayout GtkMenuToolButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMenuToolButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkMenuToolButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMenuToolButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkMenuToolButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMenuToolButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkMenuToolButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkMessageDialog* GtkMessageDialog_autoptr;
     * }
     */
    public static final AddressLayout GtkMessageDialog_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMessageDialog_listautoptr;
     * }
     */
    public static final AddressLayout GtkMessageDialog_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMessageDialog_slistautoptr;
     * }
     */
    public static final AddressLayout GtkMessageDialog_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMessageDialog_queueautoptr;
     * }
     */
    public static final AddressLayout GtkMessageDialog_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkMountOperation* GtkMountOperation_autoptr;
     * }
     */
    public static final AddressLayout GtkMountOperation_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMountOperation_listautoptr;
     * }
     */
    public static final AddressLayout GtkMountOperation_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMountOperation_slistautoptr;
     * }
     */
    public static final AddressLayout GtkMountOperation_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMountOperation_queueautoptr;
     * }
     */
    public static final AddressLayout GtkMountOperation_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkNotebook* GtkNotebook_autoptr;
     * }
     */
    public static final AddressLayout GtkNotebook_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkNotebook_listautoptr;
     * }
     */
    public static final AddressLayout GtkNotebook_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkNotebook_slistautoptr;
     * }
     */
    public static final AddressLayout GtkNotebook_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkNotebook_queueautoptr;
     * }
     */
    public static final AddressLayout GtkNotebook_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkOffscreenWindow* GtkOffscreenWindow_autoptr;
     * }
     */
    public static final AddressLayout GtkOffscreenWindow_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkOffscreenWindow_listautoptr;
     * }
     */
    public static final AddressLayout GtkOffscreenWindow_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkOffscreenWindow_slistautoptr;
     * }
     */
    public static final AddressLayout GtkOffscreenWindow_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkOffscreenWindow_queueautoptr;
     * }
     */
    public static final AddressLayout GtkOffscreenWindow_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkOrientable* GtkOrientable_autoptr;
     * }
     */
    public static final AddressLayout GtkOrientable_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkOrientable_listautoptr;
     * }
     */
    public static final AddressLayout GtkOrientable_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkOrientable_slistautoptr;
     * }
     */
    public static final AddressLayout GtkOrientable_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkOrientable_queueautoptr;
     * }
     */
    public static final AddressLayout GtkOrientable_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkOverlay* GtkOverlay_autoptr;
     * }
     */
    public static final AddressLayout GtkOverlay_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkOverlay_listautoptr;
     * }
     */
    public static final AddressLayout GtkOverlay_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkOverlay_slistautoptr;
     * }
     */
    public static final AddressLayout GtkOverlay_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkOverlay_queueautoptr;
     * }
     */
    public static final AddressLayout GtkOverlay_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkPageSetup* GtkPageSetup_autoptr;
     * }
     */
    public static final AddressLayout GtkPageSetup_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPageSetup_listautoptr;
     * }
     */
    public static final AddressLayout GtkPageSetup_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPageSetup_slistautoptr;
     * }
     */
    public static final AddressLayout GtkPageSetup_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPageSetup_queueautoptr;
     * }
     */
    public static final AddressLayout GtkPageSetup_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkPaned* GtkPaned_autoptr;
     * }
     */
    public static final AddressLayout GtkPaned_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPaned_listautoptr;
     * }
     */
    public static final AddressLayout GtkPaned_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPaned_slistautoptr;
     * }
     */
    public static final AddressLayout GtkPaned_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPaned_queueautoptr;
     * }
     */
    public static final AddressLayout GtkPaned_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkPlacesSidebar* GtkPlacesSidebar_autoptr;
     * }
     */
    public static final AddressLayout GtkPlacesSidebar_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPlacesSidebar_listautoptr;
     * }
     */
    public static final AddressLayout GtkPlacesSidebar_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPlacesSidebar_slistautoptr;
     * }
     */
    public static final AddressLayout GtkPlacesSidebar_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPlacesSidebar_queueautoptr;
     * }
     */
    public static final AddressLayout GtkPlacesSidebar_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkPopover* GtkPopover_autoptr;
     * }
     */
    public static final AddressLayout GtkPopover_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPopover_listautoptr;
     * }
     */
    public static final AddressLayout GtkPopover_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPopover_slistautoptr;
     * }
     */
    public static final AddressLayout GtkPopover_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPopover_queueautoptr;
     * }
     */
    public static final AddressLayout GtkPopover_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkPopoverMenu* GtkPopoverMenu_autoptr;
     * }
     */
    public static final AddressLayout GtkPopoverMenu_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPopoverMenu_listautoptr;
     * }
     */
    public static final AddressLayout GtkPopoverMenu_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPopoverMenu_slistautoptr;
     * }
     */
    public static final AddressLayout GtkPopoverMenu_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPopoverMenu_queueautoptr;
     * }
     */
    public static final AddressLayout GtkPopoverMenu_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkPrintContext* GtkPrintContext_autoptr;
     * }
     */
    public static final AddressLayout GtkPrintContext_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintContext_listautoptr;
     * }
     */
    public static final AddressLayout GtkPrintContext_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintContext_slistautoptr;
     * }
     */
    public static final AddressLayout GtkPrintContext_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintContext_queueautoptr;
     * }
     */
    public static final AddressLayout GtkPrintContext_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkPrintOperation* GtkPrintOperation_autoptr;
     * }
     */
    public static final AddressLayout GtkPrintOperation_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintOperation_listautoptr;
     * }
     */
    public static final AddressLayout GtkPrintOperation_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintOperation_slistautoptr;
     * }
     */
    public static final AddressLayout GtkPrintOperation_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintOperation_queueautoptr;
     * }
     */
    public static final AddressLayout GtkPrintOperation_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkPrintOperationPreview* GtkPrintOperationPreview_autoptr;
     * }
     */
    public static final AddressLayout GtkPrintOperationPreview_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintOperationPreview_listautoptr;
     * }
     */
    public static final AddressLayout GtkPrintOperationPreview_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintOperationPreview_slistautoptr;
     * }
     */
    public static final AddressLayout GtkPrintOperationPreview_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintOperationPreview_queueautoptr;
     * }
     */
    public static final AddressLayout GtkPrintOperationPreview_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkPrintSettings* GtkPrintSettings_autoptr;
     * }
     */
    public static final AddressLayout GtkPrintSettings_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintSettings_listautoptr;
     * }
     */
    public static final AddressLayout GtkPrintSettings_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintSettings_slistautoptr;
     * }
     */
    public static final AddressLayout GtkPrintSettings_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintSettings_queueautoptr;
     * }
     */
    public static final AddressLayout GtkPrintSettings_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkProgressBar* GtkProgressBar_autoptr;
     * }
     */
    public static final AddressLayout GtkProgressBar_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkProgressBar_listautoptr;
     * }
     */
    public static final AddressLayout GtkProgressBar_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkProgressBar_slistautoptr;
     * }
     */
    public static final AddressLayout GtkProgressBar_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkProgressBar_queueautoptr;
     * }
     */
    public static final AddressLayout GtkProgressBar_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkRadioButton* GtkRadioButton_autoptr;
     * }
     */
    public static final AddressLayout GtkRadioButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRadioButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkRadioButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRadioButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkRadioButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRadioButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkRadioButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkRadioMenuItem* GtkRadioMenuItem_autoptr;
     * }
     */
    public static final AddressLayout GtkRadioMenuItem_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRadioMenuItem_listautoptr;
     * }
     */
    public static final AddressLayout GtkRadioMenuItem_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRadioMenuItem_slistautoptr;
     * }
     */
    public static final AddressLayout GtkRadioMenuItem_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRadioMenuItem_queueautoptr;
     * }
     */
    public static final AddressLayout GtkRadioMenuItem_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkRadioToolButton* GtkRadioToolButton_autoptr;
     * }
     */
    public static final AddressLayout GtkRadioToolButton_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRadioToolButton_listautoptr;
     * }
     */
    public static final AddressLayout GtkRadioToolButton_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRadioToolButton_slistautoptr;
     * }
     */
    public static final AddressLayout GtkRadioToolButton_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRadioToolButton_queueautoptr;
     * }
     */
    public static final AddressLayout GtkRadioToolButton_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkRange* GtkRange_autoptr;
     * }
     */
    public static final AddressLayout GtkRange_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRange_listautoptr;
     * }
     */
    public static final AddressLayout GtkRange_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRange_slistautoptr;
     * }
     */
    public static final AddressLayout GtkRange_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRange_queueautoptr;
     * }
     */
    public static final AddressLayout GtkRange_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkRcStyle* GtkRcStyle_autoptr;
     * }
     */
    public static final AddressLayout GtkRcStyle_autoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRcStyle_listautoptr;
     * }
     */
    public static final AddressLayout GtkRcStyle_listautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRcStyle_slistautoptr;
     * }
     */
    public static final AddressLayout GtkRcStyle_slistautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRcStyle_queueautoptr;
     * }
     */
    public static final AddressLayout GtkRcStyle_queueautoptr = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct _GtkRecentChooser* GtkRecentChooser_autoptr;
     * }
     */
    public static final AddressLayout GtkRecentChooser_autoptr = RuntimeHelper.POINTER;
}


