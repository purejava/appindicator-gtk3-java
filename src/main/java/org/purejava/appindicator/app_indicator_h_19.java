// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class app_indicator_h_19 extends app_indicator_h_18 {

    public static MethodHandle gtk_font_selection_dialog_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.gtk_font_selection_dialog_get_type$MH,"gtk_font_selection_dialog_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_font_selection_dialog_get_type();
     * }
     */
    public static long gtk_font_selection_dialog_get_type() {
        var mh$ = gtk_font_selection_dialog_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.gtk_font_selection_dialog_new$MH,"gtk_font_selection_dialog_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_font_selection_dialog_new(const gchar* title);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_new(MemorySegment title) {
        var mh$ = gtk_font_selection_dialog_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_ok_button$MH() {
        return RuntimeHelper.requireNonNull(constants$1930.gtk_font_selection_dialog_get_ok_button$MH,"gtk_font_selection_dialog_get_ok_button");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_font_selection_dialog_get_ok_button(GtkFontSelectionDialog* fsd);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_ok_button(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_ok_button$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_cancel_button$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_font_selection_dialog_get_cancel_button$MH,"gtk_font_selection_dialog_get_cancel_button");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_font_selection_dialog_get_cancel_button(GtkFontSelectionDialog* fsd);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_cancel_button(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_cancel_button$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_font_selection$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_font_selection_dialog_get_font_selection$MH,"gtk_font_selection_dialog_get_font_selection");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_font_selection_dialog_get_font_selection(GtkFontSelectionDialog* fsd);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_font_selection(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_font_selection$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_font_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_font_selection_dialog_get_font_name$MH,"gtk_font_selection_dialog_get_font_name");
    }
    /**
     * {@snippet :
     * gchar* gtk_font_selection_dialog_get_font_name(GtkFontSelectionDialog* fsd);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_font_name(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_font_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_set_font_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_font_selection_dialog_set_font_name$MH,"gtk_font_selection_dialog_set_font_name");
    }
    /**
     * {@snippet :
     * gboolean gtk_font_selection_dialog_set_font_name(GtkFontSelectionDialog* fsd, const gchar* fontname);
     * }
     */
    public static int gtk_font_selection_dialog_set_font_name(MemorySegment fsd, MemorySegment fontname) {
        var mh$ = gtk_font_selection_dialog_set_font_name$MH();
        try {
            return (int)mh$.invokeExact(fsd, fontname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_get_preview_text$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_font_selection_dialog_get_preview_text$MH,"gtk_font_selection_dialog_get_preview_text");
    }
    /**
     * {@snippet :
     * const gchar* gtk_font_selection_dialog_get_preview_text(GtkFontSelectionDialog* fsd);
     * }
     */
    public static MemorySegment gtk_font_selection_dialog_get_preview_text(MemorySegment fsd) {
        var mh$ = gtk_font_selection_dialog_get_preview_text$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fsd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_font_selection_dialog_set_preview_text$MH() {
        return RuntimeHelper.requireNonNull(constants$1931.gtk_font_selection_dialog_set_preview_text$MH,"gtk_font_selection_dialog_set_preview_text");
    }
    /**
     * {@snippet :
     * void gtk_font_selection_dialog_set_preview_text(GtkFontSelectionDialog* fsd, const gchar* text);
     * }
     */
    public static void gtk_font_selection_dialog_set_preview_text(MemorySegment fsd, MemorySegment text) {
        var mh$ = gtk_font_selection_dialog_set_preview_text$MH();
        try {
            mh$.invokeExact(fsd, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_symbolic_color_get_type$MH,"gtk_symbolic_color_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_symbolic_color_get_type();
     * }
     */
    public static long gtk_symbolic_color_get_type() {
        var mh$ = gtk_symbolic_color_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_symbolic_color_new_literal$MH,"gtk_symbolic_color_new_literal");
    }
    /**
     * {@snippet :
     * GtkSymbolicColor* gtk_symbolic_color_new_literal(const GdkRGBA* color);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_literal(MemorySegment color) {
        var mh$ = gtk_symbolic_color_new_literal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_symbolic_color_new_name$MH,"gtk_symbolic_color_new_name");
    }
    /**
     * {@snippet :
     * GtkSymbolicColor* gtk_symbolic_color_new_name(const gchar* name);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_name(MemorySegment name) {
        var mh$ = gtk_symbolic_color_new_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_shade$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_symbolic_color_new_shade$MH,"gtk_symbolic_color_new_shade");
    }
    /**
     * {@snippet :
     * GtkSymbolicColor* gtk_symbolic_color_new_shade(GtkSymbolicColor* color, gdouble factor);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_shade(MemorySegment color, double factor) {
        var mh$ = gtk_symbolic_color_new_shade$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_alpha$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_symbolic_color_new_alpha$MH,"gtk_symbolic_color_new_alpha");
    }
    /**
     * {@snippet :
     * GtkSymbolicColor* gtk_symbolic_color_new_alpha(GtkSymbolicColor* color, gdouble factor);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_alpha(MemorySegment color, double factor) {
        var mh$ = gtk_symbolic_color_new_alpha$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_mix$MH() {
        return RuntimeHelper.requireNonNull(constants$1932.gtk_symbolic_color_new_mix$MH,"gtk_symbolic_color_new_mix");
    }
    /**
     * {@snippet :
     * GtkSymbolicColor* gtk_symbolic_color_new_mix(GtkSymbolicColor* color1, GtkSymbolicColor* color2, gdouble factor);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_mix(MemorySegment color1, MemorySegment color2, double factor) {
        var mh$ = gtk_symbolic_color_new_mix$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color1, color2, factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_new_win32$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_symbolic_color_new_win32$MH,"gtk_symbolic_color_new_win32");
    }
    /**
     * {@snippet :
     * GtkSymbolicColor* gtk_symbolic_color_new_win32(const gchar* theme_class, gint id);
     * }
     */
    public static MemorySegment gtk_symbolic_color_new_win32(MemorySegment theme_class, int id) {
        var mh$ = gtk_symbolic_color_new_win32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(theme_class, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_symbolic_color_ref$MH,"gtk_symbolic_color_ref");
    }
    /**
     * {@snippet :
     * GtkSymbolicColor* gtk_symbolic_color_ref(GtkSymbolicColor* color);
     * }
     */
    public static MemorySegment gtk_symbolic_color_ref(MemorySegment color) {
        var mh$ = gtk_symbolic_color_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_symbolic_color_unref$MH,"gtk_symbolic_color_unref");
    }
    /**
     * {@snippet :
     * void gtk_symbolic_color_unref(GtkSymbolicColor* color);
     * }
     */
    public static void gtk_symbolic_color_unref(MemorySegment color) {
        var mh$ = gtk_symbolic_color_unref$MH();
        try {
            mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_symbolic_color_to_string$MH,"gtk_symbolic_color_to_string");
    }
    /**
     * {@snippet :
     * char* gtk_symbolic_color_to_string(GtkSymbolicColor* color);
     * }
     */
    public static MemorySegment gtk_symbolic_color_to_string(MemorySegment color) {
        var mh$ = gtk_symbolic_color_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_symbolic_color_resolve$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_symbolic_color_resolve$MH,"gtk_symbolic_color_resolve");
    }
    /**
     * {@snippet :
     * gboolean gtk_symbolic_color_resolve(GtkSymbolicColor* color, GtkStyleProperties* props, GdkRGBA* resolved_color);
     * }
     */
    public static int gtk_symbolic_color_resolve(MemorySegment color, MemorySegment props, MemorySegment resolved_color) {
        var mh$ = gtk_symbolic_color_resolve$MH();
        try {
            return (int)mh$.invokeExact(color, props, resolved_color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1933.gtk_gradient_get_type$MH,"gtk_gradient_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_gradient_get_type();
     * }
     */
    public static long gtk_gradient_get_type() {
        var mh$ = gtk_gradient_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_new_linear$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_gradient_new_linear$MH,"gtk_gradient_new_linear");
    }
    /**
     * {@snippet :
     * GtkGradient* gtk_gradient_new_linear(gdouble x0, gdouble y0, gdouble x1, gdouble y1);
     * }
     */
    public static MemorySegment gtk_gradient_new_linear(double x0, double y0, double x1, double y1) {
        var mh$ = gtk_gradient_new_linear$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, y0, x1, y1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_new_radial$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_gradient_new_radial$MH,"gtk_gradient_new_radial");
    }
    /**
     * {@snippet :
     * GtkGradient* gtk_gradient_new_radial(gdouble x0, gdouble y0, gdouble radius0, gdouble x1, gdouble y1, gdouble radius1);
     * }
     */
    public static MemorySegment gtk_gradient_new_radial(double x0, double y0, double radius0, double x1, double y1, double radius1) {
        var mh$ = gtk_gradient_new_radial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, y0, radius0, x1, y1, radius1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_add_color_stop$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_gradient_add_color_stop$MH,"gtk_gradient_add_color_stop");
    }
    /**
     * {@snippet :
     * void gtk_gradient_add_color_stop(GtkGradient* gradient, gdouble offset, GtkSymbolicColor* color);
     * }
     */
    public static void gtk_gradient_add_color_stop(MemorySegment gradient, double offset, MemorySegment color) {
        var mh$ = gtk_gradient_add_color_stop$MH();
        try {
            mh$.invokeExact(gradient, offset, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_gradient_ref$MH,"gtk_gradient_ref");
    }
    /**
     * {@snippet :
     * GtkGradient* gtk_gradient_ref(GtkGradient* gradient);
     * }
     */
    public static MemorySegment gtk_gradient_ref(MemorySegment gradient) {
        var mh$ = gtk_gradient_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gradient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_gradient_unref$MH,"gtk_gradient_unref");
    }
    /**
     * {@snippet :
     * void gtk_gradient_unref(GtkGradient* gradient);
     * }
     */
    public static void gtk_gradient_unref(MemorySegment gradient) {
        var mh$ = gtk_gradient_unref$MH();
        try {
            mh$.invokeExact(gradient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_resolve$MH() {
        return RuntimeHelper.requireNonNull(constants$1934.gtk_gradient_resolve$MH,"gtk_gradient_resolve");
    }
    /**
     * {@snippet :
     * gboolean gtk_gradient_resolve(GtkGradient* gradient, GtkStyleProperties* props, cairo_pattern_t** resolved_gradient);
     * }
     */
    public static int gtk_gradient_resolve(MemorySegment gradient, MemorySegment props, MemorySegment resolved_gradient) {
        var mh$ = gtk_gradient_resolve$MH();
        try {
            return (int)mh$.invokeExact(gradient, props, resolved_gradient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_resolve_for_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_gradient_resolve_for_context$MH,"gtk_gradient_resolve_for_context");
    }
    /**
     * {@snippet :
     * cairo_pattern_t* gtk_gradient_resolve_for_context(GtkGradient* gradient, GtkStyleContext* context);
     * }
     */
    public static MemorySegment gtk_gradient_resolve_for_context(MemorySegment gradient, MemorySegment context) {
        var mh$ = gtk_gradient_resolve_for_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gradient, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_gradient_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_gradient_to_string$MH,"gtk_gradient_to_string");
    }
    /**
     * {@snippet :
     * char* gtk_gradient_to_string(GtkGradient* gradient);
     * }
     */
    public static MemorySegment gtk_gradient_to_string(MemorySegment gradient) {
        var mh$ = gtk_gradient_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gradient);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_handle_box_get_type$MH,"gtk_handle_box_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_handle_box_get_type();
     * }
     */
    public static long gtk_handle_box_get_type() {
        var mh$ = gtk_handle_box_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_handle_box_new$MH,"gtk_handle_box_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_handle_box_new();
     * }
     */
    public static MemorySegment gtk_handle_box_new() {
        var mh$ = gtk_handle_box_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_set_shadow_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_handle_box_set_shadow_type$MH,"gtk_handle_box_set_shadow_type");
    }
    /**
     * {@snippet :
     * void gtk_handle_box_set_shadow_type(GtkHandleBox* handle_box, GtkShadowType type);
     * }
     */
    public static void gtk_handle_box_set_shadow_type(MemorySegment handle_box, int type) {
        var mh$ = gtk_handle_box_set_shadow_type$MH();
        try {
            mh$.invokeExact(handle_box, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_get_shadow_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1935.gtk_handle_box_get_shadow_type$MH,"gtk_handle_box_get_shadow_type");
    }
    /**
     * {@snippet :
     * GtkShadowType gtk_handle_box_get_shadow_type(GtkHandleBox* handle_box);
     * }
     */
    public static int gtk_handle_box_get_shadow_type(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_shadow_type$MH();
        try {
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_set_handle_position$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_handle_box_set_handle_position$MH,"gtk_handle_box_set_handle_position");
    }
    /**
     * {@snippet :
     * void gtk_handle_box_set_handle_position(GtkHandleBox* handle_box, GtkPositionType position);
     * }
     */
    public static void gtk_handle_box_set_handle_position(MemorySegment handle_box, int position) {
        var mh$ = gtk_handle_box_set_handle_position$MH();
        try {
            mh$.invokeExact(handle_box, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_get_handle_position$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_handle_box_get_handle_position$MH,"gtk_handle_box_get_handle_position");
    }
    /**
     * {@snippet :
     * GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox* handle_box);
     * }
     */
    public static int gtk_handle_box_get_handle_position(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_handle_position$MH();
        try {
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_set_snap_edge$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_handle_box_set_snap_edge$MH,"gtk_handle_box_set_snap_edge");
    }
    /**
     * {@snippet :
     * void gtk_handle_box_set_snap_edge(GtkHandleBox* handle_box, GtkPositionType edge);
     * }
     */
    public static void gtk_handle_box_set_snap_edge(MemorySegment handle_box, int edge) {
        var mh$ = gtk_handle_box_set_snap_edge$MH();
        try {
            mh$.invokeExact(handle_box, edge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_get_snap_edge$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_handle_box_get_snap_edge$MH,"gtk_handle_box_get_snap_edge");
    }
    /**
     * {@snippet :
     * GtkPositionType gtk_handle_box_get_snap_edge(GtkHandleBox* handle_box);
     * }
     */
    public static int gtk_handle_box_get_snap_edge(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_snap_edge$MH();
        try {
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_handle_box_get_child_detached$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_handle_box_get_child_detached$MH,"gtk_handle_box_get_child_detached");
    }
    /**
     * {@snippet :
     * gboolean gtk_handle_box_get_child_detached(GtkHandleBox* handle_box);
     * }
     */
    public static int gtk_handle_box_get_child_detached(MemorySegment handle_box) {
        var mh$ = gtk_handle_box_get_child_detached$MH();
        try {
            return (int)mh$.invokeExact(handle_box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hbutton_box_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1936.gtk_hbutton_box_get_type$MH,"gtk_hbutton_box_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_hbutton_box_get_type();
     * }
     */
    public static long gtk_hbutton_box_get_type() {
        var mh$ = gtk_hbutton_box_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hbutton_box_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.gtk_hbutton_box_new$MH,"gtk_hbutton_box_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_hbutton_box_new();
     * }
     */
    public static MemorySegment gtk_hbutton_box_new() {
        var mh$ = gtk_hbutton_box_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hbox_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.gtk_hbox_get_type$MH,"gtk_hbox_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_hbox_get_type();
     * }
     */
    public static long gtk_hbox_get_type() {
        var mh$ = gtk_hbox_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hbox_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.gtk_hbox_new$MH,"gtk_hbox_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_hbox_new(gboolean homogeneous, gint spacing);
     * }
     */
    public static MemorySegment gtk_hbox_new(int homogeneous, int spacing) {
        var mh$ = gtk_hbox_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(homogeneous, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hpaned_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.gtk_hpaned_get_type$MH,"gtk_hpaned_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_hpaned_get_type();
     * }
     */
    public static long gtk_hpaned_get_type() {
        var mh$ = gtk_hpaned_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hpaned_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.gtk_hpaned_new$MH,"gtk_hpaned_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_hpaned_new();
     * }
     */
    public static MemorySegment gtk_hpaned_new() {
        var mh$ = gtk_hpaned_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1937.gtk_hsv_get_type$MH,"gtk_hsv_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_hsv_get_type();
     * }
     */
    public static long gtk_hsv_get_type() {
        var mh$ = gtk_hsv_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1938.gtk_hsv_new$MH,"gtk_hsv_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_hsv_new();
     * }
     */
    public static MemorySegment gtk_hsv_new() {
        var mh$ = gtk_hsv_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_set_color$MH() {
        return RuntimeHelper.requireNonNull(constants$1938.gtk_hsv_set_color$MH,"gtk_hsv_set_color");
    }
    /**
     * {@snippet :
     * void gtk_hsv_set_color(GtkHSV* hsv, double h, double s, double v);
     * }
     */
    public static void gtk_hsv_set_color(MemorySegment hsv, double h, double s, double v) {
        var mh$ = gtk_hsv_set_color$MH();
        try {
            mh$.invokeExact(hsv, h, s, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_get_color$MH() {
        return RuntimeHelper.requireNonNull(constants$1938.gtk_hsv_get_color$MH,"gtk_hsv_get_color");
    }
    /**
     * {@snippet :
     * void gtk_hsv_get_color(GtkHSV* hsv, gdouble* h, gdouble* s, gdouble* v);
     * }
     */
    public static void gtk_hsv_get_color(MemorySegment hsv, MemorySegment h, MemorySegment s, MemorySegment v) {
        var mh$ = gtk_hsv_get_color$MH();
        try {
            mh$.invokeExact(hsv, h, s, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_set_metrics$MH() {
        return RuntimeHelper.requireNonNull(constants$1938.gtk_hsv_set_metrics$MH,"gtk_hsv_set_metrics");
    }
    /**
     * {@snippet :
     * void gtk_hsv_set_metrics(GtkHSV* hsv, gint size, gint ring_width);
     * }
     */
    public static void gtk_hsv_set_metrics(MemorySegment hsv, int size, int ring_width) {
        var mh$ = gtk_hsv_set_metrics$MH();
        try {
            mh$.invokeExact(hsv, size, ring_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_get_metrics$MH() {
        return RuntimeHelper.requireNonNull(constants$1938.gtk_hsv_get_metrics$MH,"gtk_hsv_get_metrics");
    }
    /**
     * {@snippet :
     * void gtk_hsv_get_metrics(GtkHSV* hsv, gint* size, gint* ring_width);
     * }
     */
    public static void gtk_hsv_get_metrics(MemorySegment hsv, MemorySegment size, MemorySegment ring_width) {
        var mh$ = gtk_hsv_get_metrics$MH();
        try {
            mh$.invokeExact(hsv, size, ring_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hsv_is_adjusting$MH() {
        return RuntimeHelper.requireNonNull(constants$1938.gtk_hsv_is_adjusting$MH,"gtk_hsv_is_adjusting");
    }
    /**
     * {@snippet :
     * gboolean gtk_hsv_is_adjusting(GtkHSV* hsv);
     * }
     */
    public static int gtk_hsv_is_adjusting(MemorySegment hsv) {
        var mh$ = gtk_hsv_is_adjusting$MH();
        try {
            return (int)mh$.invokeExact(hsv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hscale_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1939.gtk_hscale_get_type$MH,"gtk_hscale_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_hscale_get_type();
     * }
     */
    public static long gtk_hscale_get_type() {
        var mh$ = gtk_hscale_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hscale_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1939.gtk_hscale_new$MH,"gtk_hscale_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_hscale_new(GtkAdjustment* adjustment);
     * }
     */
    public static MemorySegment gtk_hscale_new(MemorySegment adjustment) {
        var mh$ = gtk_hscale_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hscale_new_with_range$MH() {
        return RuntimeHelper.requireNonNull(constants$1939.gtk_hscale_new_with_range$MH,"gtk_hscale_new_with_range");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_hscale_new_with_range(gdouble min, gdouble max, gdouble step);
     * }
     */
    public static MemorySegment gtk_hscale_new_with_range(double min, double max, double step) {
        var mh$ = gtk_hscale_new_with_range$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(min, max, step);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hscrollbar_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1939.gtk_hscrollbar_get_type$MH,"gtk_hscrollbar_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_hscrollbar_get_type();
     * }
     */
    public static long gtk_hscrollbar_get_type() {
        var mh$ = gtk_hscrollbar_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hscrollbar_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1939.gtk_hscrollbar_new$MH,"gtk_hscrollbar_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_hscrollbar_new(GtkAdjustment* adjustment);
     * }
     */
    public static MemorySegment gtk_hscrollbar_new(MemorySegment adjustment) {
        var mh$ = gtk_hscrollbar_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hseparator_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1939.gtk_hseparator_get_type$MH,"gtk_hseparator_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_hseparator_get_type();
     * }
     */
    public static long gtk_hseparator_get_type() {
        var mh$ = gtk_hseparator_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_hseparator_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1940.gtk_hseparator_new$MH,"gtk_hseparator_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_hseparator_new();
     * }
     */
    public static MemorySegment gtk_hseparator_new() {
        var mh$ = gtk_hseparator_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1940.gtk_image_menu_item_get_type$MH,"gtk_image_menu_item_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_image_menu_item_get_type();
     * }
     */
    public static long gtk_image_menu_item_get_type() {
        var mh$ = gtk_image_menu_item_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1940.gtk_image_menu_item_new$MH,"gtk_image_menu_item_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_image_menu_item_new();
     * }
     */
    public static MemorySegment gtk_image_menu_item_new() {
        var mh$ = gtk_image_menu_item_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_new_with_label$MH() {
        return RuntimeHelper.requireNonNull(constants$1940.gtk_image_menu_item_new_with_label$MH,"gtk_image_menu_item_new_with_label");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_image_menu_item_new_with_label(const gchar* label);
     * }
     */
    public static MemorySegment gtk_image_menu_item_new_with_label(MemorySegment label) {
        var mh$ = gtk_image_menu_item_new_with_label$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_new_with_mnemonic$MH() {
        return RuntimeHelper.requireNonNull(constants$1940.gtk_image_menu_item_new_with_mnemonic$MH,"gtk_image_menu_item_new_with_mnemonic");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_image_menu_item_new_with_mnemonic(const gchar* label);
     * }
     */
    public static MemorySegment gtk_image_menu_item_new_with_mnemonic(MemorySegment label) {
        var mh$ = gtk_image_menu_item_new_with_mnemonic$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_new_from_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$1940.gtk_image_menu_item_new_from_stock$MH,"gtk_image_menu_item_new_from_stock");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_image_menu_item_new_from_stock(const gchar* stock_id, GtkAccelGroup* accel_group);
     * }
     */
    public static MemorySegment gtk_image_menu_item_new_from_stock(MemorySegment stock_id, MemorySegment accel_group) {
        var mh$ = gtk_image_menu_item_new_from_stock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stock_id, accel_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_set_always_show_image$MH() {
        return RuntimeHelper.requireNonNull(constants$1941.gtk_image_menu_item_set_always_show_image$MH,"gtk_image_menu_item_set_always_show_image");
    }
    /**
     * {@snippet :
     * void gtk_image_menu_item_set_always_show_image(GtkImageMenuItem* image_menu_item, gboolean always_show);
     * }
     */
    public static void gtk_image_menu_item_set_always_show_image(MemorySegment image_menu_item, int always_show) {
        var mh$ = gtk_image_menu_item_set_always_show_image$MH();
        try {
            mh$.invokeExact(image_menu_item, always_show);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_get_always_show_image$MH() {
        return RuntimeHelper.requireNonNull(constants$1941.gtk_image_menu_item_get_always_show_image$MH,"gtk_image_menu_item_get_always_show_image");
    }
    /**
     * {@snippet :
     * gboolean gtk_image_menu_item_get_always_show_image(GtkImageMenuItem* image_menu_item);
     * }
     */
    public static int gtk_image_menu_item_get_always_show_image(MemorySegment image_menu_item) {
        var mh$ = gtk_image_menu_item_get_always_show_image$MH();
        try {
            return (int)mh$.invokeExact(image_menu_item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_set_image$MH() {
        return RuntimeHelper.requireNonNull(constants$1941.gtk_image_menu_item_set_image$MH,"gtk_image_menu_item_set_image");
    }
    /**
     * {@snippet :
     * void gtk_image_menu_item_set_image(GtkImageMenuItem* image_menu_item, GtkWidget* image);
     * }
     */
    public static void gtk_image_menu_item_set_image(MemorySegment image_menu_item, MemorySegment image) {
        var mh$ = gtk_image_menu_item_set_image$MH();
        try {
            mh$.invokeExact(image_menu_item, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_get_image$MH() {
        return RuntimeHelper.requireNonNull(constants$1941.gtk_image_menu_item_get_image$MH,"gtk_image_menu_item_get_image");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_image_menu_item_get_image(GtkImageMenuItem* image_menu_item);
     * }
     */
    public static MemorySegment gtk_image_menu_item_get_image(MemorySegment image_menu_item) {
        var mh$ = gtk_image_menu_item_get_image$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(image_menu_item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_set_use_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$1941.gtk_image_menu_item_set_use_stock$MH,"gtk_image_menu_item_set_use_stock");
    }
    /**
     * {@snippet :
     * void gtk_image_menu_item_set_use_stock(GtkImageMenuItem* image_menu_item, gboolean use_stock);
     * }
     */
    public static void gtk_image_menu_item_set_use_stock(MemorySegment image_menu_item, int use_stock) {
        var mh$ = gtk_image_menu_item_set_use_stock$MH();
        try {
            mh$.invokeExact(image_menu_item, use_stock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_get_use_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$1941.gtk_image_menu_item_get_use_stock$MH,"gtk_image_menu_item_get_use_stock");
    }
    /**
     * {@snippet :
     * gboolean gtk_image_menu_item_get_use_stock(GtkImageMenuItem* image_menu_item);
     * }
     */
    public static int gtk_image_menu_item_get_use_stock(MemorySegment image_menu_item) {
        var mh$ = gtk_image_menu_item_get_use_stock$MH();
        try {
            return (int)mh$.invokeExact(image_menu_item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_image_menu_item_set_accel_group$MH() {
        return RuntimeHelper.requireNonNull(constants$1942.gtk_image_menu_item_set_accel_group$MH,"gtk_image_menu_item_set_accel_group");
    }
    /**
     * {@snippet :
     * void gtk_image_menu_item_set_accel_group(GtkImageMenuItem* image_menu_item, GtkAccelGroup* accel_group);
     * }
     */
    public static void gtk_image_menu_item_set_accel_group(MemorySegment image_menu_item, MemorySegment accel_group) {
        var mh$ = gtk_image_menu_item_set_accel_group$MH();
        try {
            mh$.invokeExact(image_menu_item, accel_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1942.gtk_numerable_icon_get_type$MH,"gtk_numerable_icon_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_numerable_icon_get_type();
     * }
     */
    public static long gtk_numerable_icon_get_type() {
        var mh$ = gtk_numerable_icon_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1942.gtk_numerable_icon_new$MH,"gtk_numerable_icon_new");
    }
    /**
     * {@snippet :
     * GIcon* gtk_numerable_icon_new(GIcon* base_icon);
     * }
     */
    public static MemorySegment gtk_numerable_icon_new(MemorySegment base_icon) {
        var mh$ = gtk_numerable_icon_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(base_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_new_with_style_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1942.gtk_numerable_icon_new_with_style_context$MH,"gtk_numerable_icon_new_with_style_context");
    }
    /**
     * {@snippet :
     * GIcon* gtk_numerable_icon_new_with_style_context(GIcon* base_icon, GtkStyleContext* context);
     * }
     */
    public static MemorySegment gtk_numerable_icon_new_with_style_context(MemorySegment base_icon, MemorySegment context) {
        var mh$ = gtk_numerable_icon_new_with_style_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(base_icon, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_style_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1942.gtk_numerable_icon_get_style_context$MH,"gtk_numerable_icon_get_style_context");
    }
    /**
     * {@snippet :
     * GtkStyleContext* gtk_numerable_icon_get_style_context(GtkNumerableIcon* self);
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_style_context(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_style_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_set_style_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1942.gtk_numerable_icon_set_style_context$MH,"gtk_numerable_icon_set_style_context");
    }
    /**
     * {@snippet :
     * void gtk_numerable_icon_set_style_context(GtkNumerableIcon* self, GtkStyleContext* style);
     * }
     */
    public static void gtk_numerable_icon_set_style_context(MemorySegment self, MemorySegment style) {
        var mh$ = gtk_numerable_icon_set_style_context$MH();
        try {
            mh$.invokeExact(self, style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_count$MH() {
        return RuntimeHelper.requireNonNull(constants$1943.gtk_numerable_icon_get_count$MH,"gtk_numerable_icon_get_count");
    }
    /**
     * {@snippet :
     * gint gtk_numerable_icon_get_count(GtkNumerableIcon* self);
     * }
     */
    public static int gtk_numerable_icon_get_count(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_count$MH();
        try {
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_set_count$MH() {
        return RuntimeHelper.requireNonNull(constants$1943.gtk_numerable_icon_set_count$MH,"gtk_numerable_icon_set_count");
    }
    /**
     * {@snippet :
     * void gtk_numerable_icon_set_count(GtkNumerableIcon* self, gint count);
     * }
     */
    public static void gtk_numerable_icon_set_count(MemorySegment self, int count) {
        var mh$ = gtk_numerable_icon_set_count$MH();
        try {
            mh$.invokeExact(self, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_label$MH() {
        return RuntimeHelper.requireNonNull(constants$1943.gtk_numerable_icon_get_label$MH,"gtk_numerable_icon_get_label");
    }
    /**
     * {@snippet :
     * const gchar* gtk_numerable_icon_get_label(GtkNumerableIcon* self);
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_label(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_label$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_set_label$MH() {
        return RuntimeHelper.requireNonNull(constants$1943.gtk_numerable_icon_set_label$MH,"gtk_numerable_icon_set_label");
    }
    /**
     * {@snippet :
     * void gtk_numerable_icon_set_label(GtkNumerableIcon* self, const gchar* label);
     * }
     */
    public static void gtk_numerable_icon_set_label(MemorySegment self, MemorySegment label) {
        var mh$ = gtk_numerable_icon_set_label$MH();
        try {
            mh$.invokeExact(self, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_set_background_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$1943.gtk_numerable_icon_set_background_gicon$MH,"gtk_numerable_icon_set_background_gicon");
    }
    /**
     * {@snippet :
     * void gtk_numerable_icon_set_background_gicon(GtkNumerableIcon* self, GIcon* icon);
     * }
     */
    public static void gtk_numerable_icon_set_background_gicon(MemorySegment self, MemorySegment icon) {
        var mh$ = gtk_numerable_icon_set_background_gicon$MH();
        try {
            mh$.invokeExact(self, icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_background_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$1943.gtk_numerable_icon_get_background_gicon$MH,"gtk_numerable_icon_get_background_gicon");
    }
    /**
     * {@snippet :
     * GIcon* gtk_numerable_icon_get_background_gicon(GtkNumerableIcon* self);
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_background_gicon(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_background_gicon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_set_background_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1944.gtk_numerable_icon_set_background_icon_name$MH,"gtk_numerable_icon_set_background_icon_name");
    }
    /**
     * {@snippet :
     * void gtk_numerable_icon_set_background_icon_name(GtkNumerableIcon* self, const gchar* icon_name);
     * }
     */
    public static void gtk_numerable_icon_set_background_icon_name(MemorySegment self, MemorySegment icon_name) {
        var mh$ = gtk_numerable_icon_set_background_icon_name$MH();
        try {
            mh$.invokeExact(self, icon_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_numerable_icon_get_background_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1944.gtk_numerable_icon_get_background_icon_name$MH,"gtk_numerable_icon_get_background_icon_name");
    }
    /**
     * {@snippet :
     * const gchar* gtk_numerable_icon_get_background_icon_name(GtkNumerableIcon* self);
     * }
     */
    public static MemorySegment gtk_numerable_icon_get_background_icon_name(MemorySegment self) {
        var mh$ = gtk_numerable_icon_get_background_icon_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1944.gtk_toggle_action_get_type$MH,"gtk_toggle_action_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_toggle_action_get_type();
     * }
     */
    public static long gtk_toggle_action_get_type() {
        var mh$ = gtk_toggle_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1944.gtk_toggle_action_new$MH,"gtk_toggle_action_new");
    }
    /**
     * {@snippet :
     * GtkToggleAction* gtk_toggle_action_new(const gchar* name, const gchar* label, const gchar* tooltip, const gchar* stock_id);
     * }
     */
    public static MemorySegment gtk_toggle_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id) {
        var mh$ = gtk_toggle_action_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_toggled$MH() {
        return RuntimeHelper.requireNonNull(constants$1944.gtk_toggle_action_toggled$MH,"gtk_toggle_action_toggled");
    }
    /**
     * {@snippet :
     * void gtk_toggle_action_toggled(GtkToggleAction* action);
     * }
     */
    public static void gtk_toggle_action_toggled(MemorySegment action) {
        var mh$ = gtk_toggle_action_toggled$MH();
        try {
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_set_active$MH() {
        return RuntimeHelper.requireNonNull(constants$1944.gtk_toggle_action_set_active$MH,"gtk_toggle_action_set_active");
    }
    /**
     * {@snippet :
     * void gtk_toggle_action_set_active(GtkToggleAction* action, gboolean is_active);
     * }
     */
    public static void gtk_toggle_action_set_active(MemorySegment action, int is_active) {
        var mh$ = gtk_toggle_action_set_active$MH();
        try {
            mh$.invokeExact(action, is_active);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_get_active$MH() {
        return RuntimeHelper.requireNonNull(constants$1945.gtk_toggle_action_get_active$MH,"gtk_toggle_action_get_active");
    }
    /**
     * {@snippet :
     * gboolean gtk_toggle_action_get_active(GtkToggleAction* action);
     * }
     */
    public static int gtk_toggle_action_get_active(MemorySegment action) {
        var mh$ = gtk_toggle_action_get_active$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_set_draw_as_radio$MH() {
        return RuntimeHelper.requireNonNull(constants$1945.gtk_toggle_action_set_draw_as_radio$MH,"gtk_toggle_action_set_draw_as_radio");
    }
    /**
     * {@snippet :
     * void gtk_toggle_action_set_draw_as_radio(GtkToggleAction* action, gboolean draw_as_radio);
     * }
     */
    public static void gtk_toggle_action_set_draw_as_radio(MemorySegment action, int draw_as_radio) {
        var mh$ = gtk_toggle_action_set_draw_as_radio$MH();
        try {
            mh$.invokeExact(action, draw_as_radio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_get_draw_as_radio$MH() {
        return RuntimeHelper.requireNonNull(constants$1945.gtk_toggle_action_get_draw_as_radio$MH,"gtk_toggle_action_get_draw_as_radio");
    }
    /**
     * {@snippet :
     * gboolean gtk_toggle_action_get_draw_as_radio(GtkToggleAction* action);
     * }
     */
    public static int gtk_toggle_action_get_draw_as_radio(MemorySegment action) {
        var mh$ = gtk_toggle_action_get_draw_as_radio$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_toggle_action_set_active$MH() {
        return RuntimeHelper.requireNonNull(constants$1945._gtk_toggle_action_set_active$MH,"_gtk_toggle_action_set_active");
    }
    /**
     * {@snippet :
     * void _gtk_toggle_action_set_active(GtkToggleAction* toggle_action, gboolean is_active);
     * }
     */
    public static void _gtk_toggle_action_set_active(MemorySegment toggle_action, int is_active) {
        var mh$ = _gtk_toggle_action_set_active$MH();
        try {
            mh$.invokeExact(toggle_action, is_active);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1945.gtk_radio_action_get_type$MH,"gtk_radio_action_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_radio_action_get_type();
     * }
     */
    public static long gtk_radio_action_get_type() {
        var mh$ = gtk_radio_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1945.gtk_radio_action_new$MH,"gtk_radio_action_new");
    }
    /**
     * {@snippet :
     * GtkRadioAction* gtk_radio_action_new(const gchar* name, const gchar* label, const gchar* tooltip, const gchar* stock_id, gint value);
     * }
     */
    public static MemorySegment gtk_radio_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id, int value) {
        var mh$ = gtk_radio_action_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_get_group$MH() {
        return RuntimeHelper.requireNonNull(constants$1946.gtk_radio_action_get_group$MH,"gtk_radio_action_get_group");
    }
    /**
     * {@snippet :
     * GSList* gtk_radio_action_get_group(GtkRadioAction* action);
     * }
     */
    public static MemorySegment gtk_radio_action_get_group(MemorySegment action) {
        var mh$ = gtk_radio_action_get_group$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_set_group$MH() {
        return RuntimeHelper.requireNonNull(constants$1946.gtk_radio_action_set_group$MH,"gtk_radio_action_set_group");
    }
    /**
     * {@snippet :
     * void gtk_radio_action_set_group(GtkRadioAction* action, GSList* group);
     * }
     */
    public static void gtk_radio_action_set_group(MemorySegment action, MemorySegment group) {
        var mh$ = gtk_radio_action_set_group$MH();
        try {
            mh$.invokeExact(action, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_join_group$MH() {
        return RuntimeHelper.requireNonNull(constants$1946.gtk_radio_action_join_group$MH,"gtk_radio_action_join_group");
    }
    /**
     * {@snippet :
     * void gtk_radio_action_join_group(GtkRadioAction* action, GtkRadioAction* group_source);
     * }
     */
    public static void gtk_radio_action_join_group(MemorySegment action, MemorySegment group_source) {
        var mh$ = gtk_radio_action_join_group$MH();
        try {
            mh$.invokeExact(action, group_source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_get_current_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1946.gtk_radio_action_get_current_value$MH,"gtk_radio_action_get_current_value");
    }
    /**
     * {@snippet :
     * gint gtk_radio_action_get_current_value(GtkRadioAction* action);
     * }
     */
    public static int gtk_radio_action_get_current_value(MemorySegment action) {
        var mh$ = gtk_radio_action_get_current_value$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_set_current_value$MH() {
        return RuntimeHelper.requireNonNull(constants$1946.gtk_radio_action_set_current_value$MH,"gtk_radio_action_set_current_value");
    }
    /**
     * {@snippet :
     * void gtk_radio_action_set_current_value(GtkRadioAction* action, gint current_value);
     * }
     */
    public static void gtk_radio_action_set_current_value(MemorySegment action, int current_value) {
        var mh$ = gtk_radio_action_set_current_value$MH();
        try {
            mh$.invokeExact(action, current_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .GTK_RC_FG = 1;
     * }
     */
    public static int GTK_RC_FG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_BG = 2;
     * }
     */
    public static int GTK_RC_BG() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TEXT = 4;
     * }
     */
    public static int GTK_RC_TEXT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_BASE = 8;
     * }
     */
    public static int GTK_RC_BASE() {
        return (int)8L;
    }
    public static MethodHandle _gtk_rc_parse_widget_class_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1946._gtk_rc_parse_widget_class_path$MH,"_gtk_rc_parse_widget_class_path");
    }
    /**
     * {@snippet :
     * GSList* _gtk_rc_parse_widget_class_path(const gchar* pattern);
     * }
     */
    public static MemorySegment _gtk_rc_parse_widget_class_path(MemorySegment pattern) {
        var mh$ = _gtk_rc_parse_widget_class_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_rc_free_widget_class_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1947._gtk_rc_free_widget_class_path$MH,"_gtk_rc_free_widget_class_path");
    }
    /**
     * {@snippet :
     * void _gtk_rc_free_widget_class_path(GSList* list);
     * }
     */
    public static void _gtk_rc_free_widget_class_path(MemorySegment list) {
        var mh$ = _gtk_rc_free_widget_class_path$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_rc_match_widget_class$MH() {
        return RuntimeHelper.requireNonNull(constants$1947._gtk_rc_match_widget_class$MH,"_gtk_rc_match_widget_class");
    }
    /**
     * {@snippet :
     * gboolean _gtk_rc_match_widget_class(GSList* list, gint length, gchar* path, gchar* path_reversed);
     * }
     */
    public static int _gtk_rc_match_widget_class(MemorySegment list, int length, MemorySegment path, MemorySegment path_reversed) {
        var mh$ = _gtk_rc_match_widget_class$MH();
        try {
            return (int)mh$.invokeExact(list, length, path, path_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_add_default_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1947.gtk_rc_add_default_file$MH,"gtk_rc_add_default_file");
    }
    /**
     * {@snippet :
     * void gtk_rc_add_default_file(const gchar* filename);
     * }
     */
    public static void gtk_rc_add_default_file(MemorySegment filename) {
        var mh$ = gtk_rc_add_default_file$MH();
        try {
            mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_set_default_files$MH() {
        return RuntimeHelper.requireNonNull(constants$1947.gtk_rc_set_default_files$MH,"gtk_rc_set_default_files");
    }
    /**
     * {@snippet :
     * void gtk_rc_set_default_files(gchar** filenames);
     * }
     */
    public static void gtk_rc_set_default_files(MemorySegment filenames) {
        var mh$ = gtk_rc_set_default_files$MH();
        try {
            mh$.invokeExact(filenames);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_default_files$MH() {
        return RuntimeHelper.requireNonNull(constants$1947.gtk_rc_get_default_files$MH,"gtk_rc_get_default_files");
    }
    /**
     * {@snippet :
     * gchar** gtk_rc_get_default_files();
     * }
     */
    public static MemorySegment gtk_rc_get_default_files() {
        var mh$ = gtk_rc_get_default_files$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_style$MH() {
        return RuntimeHelper.requireNonNull(constants$1947.gtk_rc_get_style$MH,"gtk_rc_get_style");
    }
    /**
     * {@snippet :
     * GtkStyle* gtk_rc_get_style(GtkWidget* widget);
     * }
     */
    public static MemorySegment gtk_rc_get_style(MemorySegment widget) {
        var mh$ = gtk_rc_get_style$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_style_by_paths$MH() {
        return RuntimeHelper.requireNonNull(constants$1948.gtk_rc_get_style_by_paths$MH,"gtk_rc_get_style_by_paths");
    }
    /**
     * {@snippet :
     * GtkStyle* gtk_rc_get_style_by_paths(GtkSettings* settings, char* widget_path, char* class_path, GType type);
     * }
     */
    public static MemorySegment gtk_rc_get_style_by_paths(MemorySegment settings, MemorySegment widget_path, MemorySegment class_path, long type) {
        var mh$ = gtk_rc_get_style_by_paths$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(settings, widget_path, class_path, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_reparse_all_for_settings$MH() {
        return RuntimeHelper.requireNonNull(constants$1948.gtk_rc_reparse_all_for_settings$MH,"gtk_rc_reparse_all_for_settings");
    }
    /**
     * {@snippet :
     * gboolean gtk_rc_reparse_all_for_settings(GtkSettings* settings, gboolean force_load);
     * }
     */
    public static int gtk_rc_reparse_all_for_settings(MemorySegment settings, int force_load) {
        var mh$ = gtk_rc_reparse_all_for_settings$MH();
        try {
            return (int)mh$.invokeExact(settings, force_load);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_reset_styles$MH() {
        return RuntimeHelper.requireNonNull(constants$1948.gtk_rc_reset_styles$MH,"gtk_rc_reset_styles");
    }
    /**
     * {@snippet :
     * void gtk_rc_reset_styles(GtkSettings* settings);
     * }
     */
    public static void gtk_rc_reset_styles(MemorySegment settings) {
        var mh$ = gtk_rc_reset_styles$MH();
        try {
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_find_pixmap_in_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1948.gtk_rc_find_pixmap_in_path$MH,"gtk_rc_find_pixmap_in_path");
    }
    /**
     * {@snippet :
     * gchar* gtk_rc_find_pixmap_in_path(GtkSettings* settings, GScanner* scanner, const gchar* pixmap_file);
     * }
     */
    public static MemorySegment gtk_rc_find_pixmap_in_path(MemorySegment settings, MemorySegment scanner, MemorySegment pixmap_file) {
        var mh$ = gtk_rc_find_pixmap_in_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(settings, scanner, pixmap_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$1948.gtk_rc_parse$MH,"gtk_rc_parse");
    }
    /**
     * {@snippet :
     * void gtk_rc_parse(const gchar* filename);
     * }
     */
    public static void gtk_rc_parse(MemorySegment filename) {
        var mh$ = gtk_rc_parse$MH();
        try {
            mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1948.gtk_rc_parse_string$MH,"gtk_rc_parse_string");
    }
    /**
     * {@snippet :
     * void gtk_rc_parse_string(const gchar* rc_string);
     * }
     */
    public static void gtk_rc_parse_string(MemorySegment rc_string) {
        var mh$ = gtk_rc_parse_string$MH();
        try {
            mh$.invokeExact(rc_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_reparse_all$MH() {
        return RuntimeHelper.requireNonNull(constants$1949.gtk_rc_reparse_all$MH,"gtk_rc_reparse_all");
    }
    /**
     * {@snippet :
     * gboolean gtk_rc_reparse_all();
     * }
     */
    public static int gtk_rc_reparse_all() {
        var mh$ = gtk_rc_reparse_all$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_style_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1949.gtk_rc_style_get_type$MH,"gtk_rc_style_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_rc_style_get_type();
     * }
     */
    public static long gtk_rc_style_get_type() {
        var mh$ = gtk_rc_style_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_style_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1949.gtk_rc_style_new$MH,"gtk_rc_style_new");
    }
    /**
     * {@snippet :
     * GtkRcStyle* gtk_rc_style_new();
     * }
     */
    public static MemorySegment gtk_rc_style_new() {
        var mh$ = gtk_rc_style_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_style_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1949.gtk_rc_style_copy$MH,"gtk_rc_style_copy");
    }
    /**
     * {@snippet :
     * GtkRcStyle* gtk_rc_style_copy(GtkRcStyle* orig);
     * }
     */
    public static MemorySegment gtk_rc_style_copy(MemorySegment orig) {
        var mh$ = gtk_rc_style_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(orig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_find_module_in_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1949.gtk_rc_find_module_in_path$MH,"gtk_rc_find_module_in_path");
    }
    /**
     * {@snippet :
     * gchar* gtk_rc_find_module_in_path(const gchar* module_file);
     * }
     */
    public static MemorySegment gtk_rc_find_module_in_path(MemorySegment module_file) {
        var mh$ = gtk_rc_find_module_in_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(module_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_theme_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$1949.gtk_rc_get_theme_dir$MH,"gtk_rc_get_theme_dir");
    }
    /**
     * {@snippet :
     * gchar* gtk_rc_get_theme_dir();
     * }
     */
    public static MemorySegment gtk_rc_get_theme_dir() {
        var mh$ = gtk_rc_get_theme_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_module_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$1950.gtk_rc_get_module_dir$MH,"gtk_rc_get_module_dir");
    }
    /**
     * {@snippet :
     * gchar* gtk_rc_get_module_dir();
     * }
     */
    public static MemorySegment gtk_rc_get_module_dir() {
        var mh$ = gtk_rc_get_module_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_im_module_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1950.gtk_rc_get_im_module_path$MH,"gtk_rc_get_im_module_path");
    }
    /**
     * {@snippet :
     * gchar* gtk_rc_get_im_module_path();
     * }
     */
    public static MemorySegment gtk_rc_get_im_module_path() {
        var mh$ = gtk_rc_get_im_module_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_im_module_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1950.gtk_rc_get_im_module_file$MH,"gtk_rc_get_im_module_file");
    }
    /**
     * {@snippet :
     * gchar* gtk_rc_get_im_module_file();
     * }
     */
    public static MemorySegment gtk_rc_get_im_module_file() {
        var mh$ = gtk_rc_get_im_module_file$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_INVALID = 270;
     * }
     */
    public static int GTK_RC_TOKEN_INVALID() {
        return (int)270L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_INCLUDE = 271;
     * }
     */
    public static int GTK_RC_TOKEN_INCLUDE() {
        return (int)271L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_NORMAL = 272;
     * }
     */
    public static int GTK_RC_TOKEN_NORMAL() {
        return (int)272L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_ACTIVE = 273;
     * }
     */
    public static int GTK_RC_TOKEN_ACTIVE() {
        return (int)273L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_PRELIGHT = 274;
     * }
     */
    public static int GTK_RC_TOKEN_PRELIGHT() {
        return (int)274L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_SELECTED = 275;
     * }
     */
    public static int GTK_RC_TOKEN_SELECTED() {
        return (int)275L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_INSENSITIVE = 276;
     * }
     */
    public static int GTK_RC_TOKEN_INSENSITIVE() {
        return (int)276L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_FG = 277;
     * }
     */
    public static int GTK_RC_TOKEN_FG() {
        return (int)277L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_BG = 278;
     * }
     */
    public static int GTK_RC_TOKEN_BG() {
        return (int)278L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_TEXT = 279;
     * }
     */
    public static int GTK_RC_TOKEN_TEXT() {
        return (int)279L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_BASE = 280;
     * }
     */
    public static int GTK_RC_TOKEN_BASE() {
        return (int)280L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_XTHICKNESS = 281;
     * }
     */
    public static int GTK_RC_TOKEN_XTHICKNESS() {
        return (int)281L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_YTHICKNESS = 282;
     * }
     */
    public static int GTK_RC_TOKEN_YTHICKNESS() {
        return (int)282L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_FONT = 283;
     * }
     */
    public static int GTK_RC_TOKEN_FONT() {
        return (int)283L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_FONTSET = 284;
     * }
     */
    public static int GTK_RC_TOKEN_FONTSET() {
        return (int)284L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_FONT_NAME = 285;
     * }
     */
    public static int GTK_RC_TOKEN_FONT_NAME() {
        return (int)285L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_BG_PIXMAP = 286;
     * }
     */
    public static int GTK_RC_TOKEN_BG_PIXMAP() {
        return (int)286L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_PIXMAP_PATH = 287;
     * }
     */
    public static int GTK_RC_TOKEN_PIXMAP_PATH() {
        return (int)287L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_STYLE = 288;
     * }
     */
    public static int GTK_RC_TOKEN_STYLE() {
        return (int)288L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_BINDING = 289;
     * }
     */
    public static int GTK_RC_TOKEN_BINDING() {
        return (int)289L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_BIND = 290;
     * }
     */
    public static int GTK_RC_TOKEN_BIND() {
        return (int)290L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_WIDGET = 291;
     * }
     */
    public static int GTK_RC_TOKEN_WIDGET() {
        return (int)291L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_WIDGET_CLASS = 292;
     * }
     */
    public static int GTK_RC_TOKEN_WIDGET_CLASS() {
        return (int)292L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_CLASS = 293;
     * }
     */
    public static int GTK_RC_TOKEN_CLASS() {
        return (int)293L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_LOWEST = 294;
     * }
     */
    public static int GTK_RC_TOKEN_LOWEST() {
        return (int)294L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_GTK = 295;
     * }
     */
    public static int GTK_RC_TOKEN_GTK() {
        return (int)295L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_APPLICATION = 296;
     * }
     */
    public static int GTK_RC_TOKEN_APPLICATION() {
        return (int)296L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_THEME = 297;
     * }
     */
    public static int GTK_RC_TOKEN_THEME() {
        return (int)297L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_RC = 298;
     * }
     */
    public static int GTK_RC_TOKEN_RC() {
        return (int)298L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_HIGHEST = 299;
     * }
     */
    public static int GTK_RC_TOKEN_HIGHEST() {
        return (int)299L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_ENGINE = 300;
     * }
     */
    public static int GTK_RC_TOKEN_ENGINE() {
        return (int)300L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_MODULE_PATH = 301;
     * }
     */
    public static int GTK_RC_TOKEN_MODULE_PATH() {
        return (int)301L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_IM_MODULE_PATH = 302;
     * }
     */
    public static int GTK_RC_TOKEN_IM_MODULE_PATH() {
        return (int)302L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_IM_MODULE_FILE = 303;
     * }
     */
    public static int GTK_RC_TOKEN_IM_MODULE_FILE() {
        return (int)303L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_STOCK = 304;
     * }
     */
    public static int GTK_RC_TOKEN_STOCK() {
        return (int)304L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_LTR = 305;
     * }
     */
    public static int GTK_RC_TOKEN_LTR() {
        return (int)305L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_RTL = 306;
     * }
     */
    public static int GTK_RC_TOKEN_RTL() {
        return (int)306L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_COLOR = 307;
     * }
     */
    public static int GTK_RC_TOKEN_COLOR() {
        return (int)307L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_UNBIND = 308;
     * }
     */
    public static int GTK_RC_TOKEN_UNBIND() {
        return (int)308L;
    }
    /**
     * {@snippet :
     * enum .GTK_RC_TOKEN_LAST = 309;
     * }
     */
    public static int GTK_RC_TOKEN_LAST() {
        return (int)309L;
    }
    /**
     * {@snippet :
     * enum .GTK_PATH_PRIO_LOWEST = 0;
     * }
     */
    public static int GTK_PATH_PRIO_LOWEST() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GTK_PATH_PRIO_GTK = 4;
     * }
     */
    public static int GTK_PATH_PRIO_GTK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GTK_PATH_PRIO_APPLICATION = 8;
     * }
     */
    public static int GTK_PATH_PRIO_APPLICATION() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .GTK_PATH_PRIO_THEME = 10;
     * }
     */
    public static int GTK_PATH_PRIO_THEME() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .GTK_PATH_PRIO_RC = 12;
     * }
     */
    public static int GTK_PATH_PRIO_RC() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .GTK_PATH_PRIO_HIGHEST = 15;
     * }
     */
    public static int GTK_PATH_PRIO_HIGHEST() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .GTK_PATH_WIDGET = 0;
     * }
     */
    public static int GTK_PATH_WIDGET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GTK_PATH_WIDGET_CLASS = 1;
     * }
     */
    public static int GTK_PATH_WIDGET_CLASS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GTK_PATH_CLASS = 2;
     * }
     */
    public static int GTK_PATH_CLASS() {
        return (int)2L;
    }
    public static MethodHandle gtk_rc_scanner_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1950.gtk_rc_scanner_new$MH,"gtk_rc_scanner_new");
    }
    /**
     * {@snippet :
     * GScanner* gtk_rc_scanner_new();
     * }
     */
    public static MemorySegment gtk_rc_scanner_new() {
        var mh$ = gtk_rc_scanner_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_color$MH() {
        return RuntimeHelper.requireNonNull(constants$1950.gtk_rc_parse_color$MH,"gtk_rc_parse_color");
    }
    /**
     * {@snippet :
     * guint gtk_rc_parse_color(GScanner* scanner, GdkColor* color);
     * }
     */
    public static int gtk_rc_parse_color(MemorySegment scanner, MemorySegment color) {
        var mh$ = gtk_rc_parse_color$MH();
        try {
            return (int)mh$.invokeExact(scanner, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_color_full$MH() {
        return RuntimeHelper.requireNonNull(constants$1950.gtk_rc_parse_color_full$MH,"gtk_rc_parse_color_full");
    }
    /**
     * {@snippet :
     * guint gtk_rc_parse_color_full(GScanner* scanner, GtkRcStyle* style, GdkColor* color);
     * }
     */
    public static int gtk_rc_parse_color_full(MemorySegment scanner, MemorySegment style, MemorySegment color) {
        var mh$ = gtk_rc_parse_color_full$MH();
        try {
            return (int)mh$.invokeExact(scanner, style, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1951.gtk_rc_parse_state$MH,"gtk_rc_parse_state");
    }
    /**
     * {@snippet :
     * guint gtk_rc_parse_state(GScanner* scanner, GtkStateType* state);
     * }
     */
    public static int gtk_rc_parse_state(MemorySegment scanner, MemorySegment state) {
        var mh$ = gtk_rc_parse_state$MH();
        try {
            return (int)mh$.invokeExact(scanner, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_priority$MH() {
        return RuntimeHelper.requireNonNull(constants$1951.gtk_rc_parse_priority$MH,"gtk_rc_parse_priority");
    }
    /**
     * {@snippet :
     * guint gtk_rc_parse_priority(GScanner* scanner, GtkPathPriorityType* priority);
     * }
     */
    public static int gtk_rc_parse_priority(MemorySegment scanner, MemorySegment priority) {
        var mh$ = gtk_rc_parse_priority$MH();
        try {
            return (int)mh$.invokeExact(scanner, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_binding_set_add_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1951.gtk_binding_set_add_path$MH,"gtk_binding_set_add_path");
    }
    /**
     * {@snippet :
     * void gtk_binding_set_add_path(GtkBindingSet* binding_set, GtkPathType path_type, const gchar* path_pattern, GtkPathPriorityType priority);
     * }
     */
    public static void gtk_binding_set_add_path(MemorySegment binding_set, int path_type, MemorySegment path_pattern, int priority) {
        var mh$ = gtk_binding_set_add_path$MH();
        try {
            mh$.invokeExact(binding_set, path_type, path_pattern, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1951.gtk_recent_action_get_type$MH,"gtk_recent_action_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_recent_action_get_type();
     * }
     */
    public static long gtk_recent_action_get_type() {
        var mh$ = gtk_recent_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1951.gtk_recent_action_new$MH,"gtk_recent_action_new");
    }
    /**
     * {@snippet :
     * GtkAction* gtk_recent_action_new(const gchar* name, const gchar* label, const gchar* tooltip, const gchar* stock_id);
     * }
     */
    public static MemorySegment gtk_recent_action_new(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id) {
        var mh$ = gtk_recent_action_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_new_for_manager$MH() {
        return RuntimeHelper.requireNonNull(constants$1951.gtk_recent_action_new_for_manager$MH,"gtk_recent_action_new_for_manager");
    }
    /**
     * {@snippet :
     * GtkAction* gtk_recent_action_new_for_manager(const gchar* name, const gchar* label, const gchar* tooltip, const gchar* stock_id, GtkRecentManager* manager);
     * }
     */
    public static MemorySegment gtk_recent_action_new_for_manager(MemorySegment name, MemorySegment label, MemorySegment tooltip, MemorySegment stock_id, MemorySegment manager) {
        var mh$ = gtk_recent_action_new_for_manager$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, label, tooltip, stock_id, manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_get_show_numbers$MH() {
        return RuntimeHelper.requireNonNull(constants$1952.gtk_recent_action_get_show_numbers$MH,"gtk_recent_action_get_show_numbers");
    }
    /**
     * {@snippet :
     * gboolean gtk_recent_action_get_show_numbers(GtkRecentAction* action);
     * }
     */
    public static int gtk_recent_action_get_show_numbers(MemorySegment action) {
        var mh$ = gtk_recent_action_get_show_numbers$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_set_show_numbers$MH() {
        return RuntimeHelper.requireNonNull(constants$1952.gtk_recent_action_set_show_numbers$MH,"gtk_recent_action_set_show_numbers");
    }
    /**
     * {@snippet :
     * void gtk_recent_action_set_show_numbers(GtkRecentAction* action, gboolean show_numbers);
     * }
     */
    public static void gtk_recent_action_set_show_numbers(MemorySegment action, int show_numbers) {
        var mh$ = gtk_recent_action_set_show_numbers$MH();
        try {
            mh$.invokeExact(action, show_numbers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1952.gtk_status_icon_get_type$MH,"gtk_status_icon_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_status_icon_get_type();
     * }
     */
    public static long gtk_status_icon_get_type() {
        var mh$ = gtk_status_icon_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1952.gtk_status_icon_new$MH,"gtk_status_icon_new");
    }
    /**
     * {@snippet :
     * GtkStatusIcon* gtk_status_icon_new();
     * }
     */
    public static MemorySegment gtk_status_icon_new() {
        var mh$ = gtk_status_icon_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1952.gtk_status_icon_new_from_pixbuf$MH,"gtk_status_icon_new_from_pixbuf");
    }
    /**
     * {@snippet :
     * GtkStatusIcon* gtk_status_icon_new_from_pixbuf(GdkPixbuf* pixbuf);
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_pixbuf(MemorySegment pixbuf) {
        var mh$ = gtk_status_icon_new_from_pixbuf$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1952.gtk_status_icon_new_from_file$MH,"gtk_status_icon_new_from_file");
    }
    /**
     * {@snippet :
     * GtkStatusIcon* gtk_status_icon_new_from_file(const gchar* filename);
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_file(MemorySegment filename) {
        var mh$ = gtk_status_icon_new_from_file$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$1953.gtk_status_icon_new_from_stock$MH,"gtk_status_icon_new_from_stock");
    }
    /**
     * {@snippet :
     * GtkStatusIcon* gtk_status_icon_new_from_stock(const gchar* stock_id);
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_stock(MemorySegment stock_id) {
        var mh$ = gtk_status_icon_new_from_stock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1953.gtk_status_icon_new_from_icon_name$MH,"gtk_status_icon_new_from_icon_name");
    }
    /**
     * {@snippet :
     * GtkStatusIcon* gtk_status_icon_new_from_icon_name(const gchar* icon_name);
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_icon_name(MemorySegment icon_name) {
        var mh$ = gtk_status_icon_new_from_icon_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(icon_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$1953.gtk_status_icon_new_from_gicon$MH,"gtk_status_icon_new_from_gicon");
    }
    /**
     * {@snippet :
     * GtkStatusIcon* gtk_status_icon_new_from_gicon(GIcon* icon);
     * }
     */
    public static MemorySegment gtk_status_icon_new_from_gicon(MemorySegment icon) {
        var mh$ = gtk_status_icon_new_from_gicon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1953.gtk_status_icon_set_from_pixbuf$MH,"gtk_status_icon_set_from_pixbuf");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_from_pixbuf(GtkStatusIcon* status_icon, GdkPixbuf* pixbuf);
     * }
     */
    public static void gtk_status_icon_set_from_pixbuf(MemorySegment status_icon, MemorySegment pixbuf) {
        var mh$ = gtk_status_icon_set_from_pixbuf$MH();
        try {
            mh$.invokeExact(status_icon, pixbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1953.gtk_status_icon_set_from_file$MH,"gtk_status_icon_set_from_file");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_from_file(GtkStatusIcon* status_icon, const gchar* filename);
     * }
     */
    public static void gtk_status_icon_set_from_file(MemorySegment status_icon, MemorySegment filename) {
        var mh$ = gtk_status_icon_set_from_file$MH();
        try {
            mh$.invokeExact(status_icon, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$1953.gtk_status_icon_set_from_stock$MH,"gtk_status_icon_set_from_stock");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_from_stock(GtkStatusIcon* status_icon, const gchar* stock_id);
     * }
     */
    public static void gtk_status_icon_set_from_stock(MemorySegment status_icon, MemorySegment stock_id) {
        var mh$ = gtk_status_icon_set_from_stock$MH();
        try {
            mh$.invokeExact(status_icon, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1954.gtk_status_icon_set_from_icon_name$MH,"gtk_status_icon_set_from_icon_name");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_from_icon_name(GtkStatusIcon* status_icon, const gchar* icon_name);
     * }
     */
    public static void gtk_status_icon_set_from_icon_name(MemorySegment status_icon, MemorySegment icon_name) {
        var mh$ = gtk_status_icon_set_from_icon_name$MH();
        try {
            mh$.invokeExact(status_icon, icon_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$1954.gtk_status_icon_set_from_gicon$MH,"gtk_status_icon_set_from_gicon");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_from_gicon(GtkStatusIcon* status_icon, GIcon* icon);
     * }
     */
    public static void gtk_status_icon_set_from_gicon(MemorySegment status_icon, MemorySegment icon) {
        var mh$ = gtk_status_icon_set_from_gicon$MH();
        try {
            mh$.invokeExact(status_icon, icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_storage_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1954.gtk_status_icon_get_storage_type$MH,"gtk_status_icon_get_storage_type");
    }
    /**
     * {@snippet :
     * GtkImageType gtk_status_icon_get_storage_type(GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_get_storage_type(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_storage_type$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1954.gtk_status_icon_get_pixbuf$MH,"gtk_status_icon_get_pixbuf");
    }
    /**
     * {@snippet :
     * GdkPixbuf* gtk_status_icon_get_pixbuf(GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_pixbuf(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_pixbuf$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$1954.gtk_status_icon_get_stock$MH,"gtk_status_icon_get_stock");
    }
    /**
     * {@snippet :
     * const gchar* gtk_status_icon_get_stock(GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_stock(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_stock$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1954.gtk_status_icon_get_icon_name$MH,"gtk_status_icon_get_icon_name");
    }
    /**
     * {@snippet :
     * const gchar* gtk_status_icon_get_icon_name(GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_icon_name(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_icon_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$1955.gtk_status_icon_get_gicon$MH,"gtk_status_icon_get_gicon");
    }
    /**
     * {@snippet :
     * GIcon* gtk_status_icon_get_gicon(GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_gicon(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_gicon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$1955.gtk_status_icon_get_size$MH,"gtk_status_icon_get_size");
    }
    /**
     * {@snippet :
     * gint gtk_status_icon_get_size(GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_get_size(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_size$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$1955.gtk_status_icon_set_screen$MH,"gtk_status_icon_set_screen");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_screen(GtkStatusIcon* status_icon, GdkScreen* screen);
     * }
     */
    public static void gtk_status_icon_set_screen(MemorySegment status_icon, MemorySegment screen) {
        var mh$ = gtk_status_icon_set_screen$MH();
        try {
            mh$.invokeExact(status_icon, screen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$1955.gtk_status_icon_get_screen$MH,"gtk_status_icon_get_screen");
    }
    /**
     * {@snippet :
     * GdkScreen* gtk_status_icon_get_screen(GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_screen(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_screen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_has_tooltip$MH() {
        return RuntimeHelper.requireNonNull(constants$1955.gtk_status_icon_set_has_tooltip$MH,"gtk_status_icon_set_has_tooltip");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_has_tooltip(GtkStatusIcon* status_icon, gboolean has_tooltip);
     * }
     */
    public static void gtk_status_icon_set_has_tooltip(MemorySegment status_icon, int has_tooltip) {
        var mh$ = gtk_status_icon_set_has_tooltip$MH();
        try {
            mh$.invokeExact(status_icon, has_tooltip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_tooltip_text$MH() {
        return RuntimeHelper.requireNonNull(constants$1955.gtk_status_icon_set_tooltip_text$MH,"gtk_status_icon_set_tooltip_text");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_tooltip_text(GtkStatusIcon* status_icon, const gchar* text);
     * }
     */
    public static void gtk_status_icon_set_tooltip_text(MemorySegment status_icon, MemorySegment text) {
        var mh$ = gtk_status_icon_set_tooltip_text$MH();
        try {
            mh$.invokeExact(status_icon, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_tooltip_markup$MH() {
        return RuntimeHelper.requireNonNull(constants$1956.gtk_status_icon_set_tooltip_markup$MH,"gtk_status_icon_set_tooltip_markup");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_tooltip_markup(GtkStatusIcon* status_icon, const gchar* markup);
     * }
     */
    public static void gtk_status_icon_set_tooltip_markup(MemorySegment status_icon, MemorySegment markup) {
        var mh$ = gtk_status_icon_set_tooltip_markup$MH();
        try {
            mh$.invokeExact(status_icon, markup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_title$MH() {
        return RuntimeHelper.requireNonNull(constants$1956.gtk_status_icon_set_title$MH,"gtk_status_icon_set_title");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_title(GtkStatusIcon* status_icon, const gchar* title);
     * }
     */
    public static void gtk_status_icon_set_title(MemorySegment status_icon, MemorySegment title) {
        var mh$ = gtk_status_icon_set_title$MH();
        try {
            mh$.invokeExact(status_icon, title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_title$MH() {
        return RuntimeHelper.requireNonNull(constants$1956.gtk_status_icon_get_title$MH,"gtk_status_icon_get_title");
    }
    /**
     * {@snippet :
     * const gchar* gtk_status_icon_get_title(GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_title(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_title$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1956.gtk_status_icon_set_name$MH,"gtk_status_icon_set_name");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_name(GtkStatusIcon* status_icon, const gchar* name);
     * }
     */
    public static void gtk_status_icon_set_name(MemorySegment status_icon, MemorySegment name) {
        var mh$ = gtk_status_icon_set_name$MH();
        try {
            mh$.invokeExact(status_icon, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$1956.gtk_status_icon_set_visible$MH,"gtk_status_icon_set_visible");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_set_visible(GtkStatusIcon* status_icon, gboolean visible);
     * }
     */
    public static void gtk_status_icon_set_visible(MemorySegment status_icon, int visible) {
        var mh$ = gtk_status_icon_set_visible$MH();
        try {
            mh$.invokeExact(status_icon, visible);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$1956.gtk_status_icon_get_visible$MH,"gtk_status_icon_get_visible");
    }
    /**
     * {@snippet :
     * gboolean gtk_status_icon_get_visible(GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_get_visible(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_visible$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_is_embedded$MH() {
        return RuntimeHelper.requireNonNull(constants$1957.gtk_status_icon_is_embedded$MH,"gtk_status_icon_is_embedded");
    }
    /**
     * {@snippet :
     * gboolean gtk_status_icon_is_embedded(GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_is_embedded(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_is_embedded$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_position_menu$MH() {
        return RuntimeHelper.requireNonNull(constants$1957.gtk_status_icon_position_menu$MH,"gtk_status_icon_position_menu");
    }
    /**
     * {@snippet :
     * void gtk_status_icon_position_menu(GtkMenu* menu, gint* x, gint* y, gboolean* push_in, gpointer user_data);
     * }
     */
    public static void gtk_status_icon_position_menu(MemorySegment menu, MemorySegment x, MemorySegment y, MemorySegment push_in, MemorySegment user_data) {
        var mh$ = gtk_status_icon_position_menu$MH();
        try {
            mh$.invokeExact(menu, x, y, push_in, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_geometry$MH() {
        return RuntimeHelper.requireNonNull(constants$1957.gtk_status_icon_get_geometry$MH,"gtk_status_icon_get_geometry");
    }
    /**
     * {@snippet :
     * gboolean gtk_status_icon_get_geometry(GtkStatusIcon* status_icon, GdkScreen** screen, GdkRectangle* area, GtkOrientation* orientation);
     * }
     */
    public static int gtk_status_icon_get_geometry(MemorySegment status_icon, MemorySegment screen, MemorySegment area, MemorySegment orientation) {
        var mh$ = gtk_status_icon_get_geometry$MH();
        try {
            return (int)mh$.invokeExact(status_icon, screen, area, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_has_tooltip$MH() {
        return RuntimeHelper.requireNonNull(constants$1957.gtk_status_icon_get_has_tooltip$MH,"gtk_status_icon_get_has_tooltip");
    }
    /**
     * {@snippet :
     * gboolean gtk_status_icon_get_has_tooltip(GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_get_has_tooltip(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_has_tooltip$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_tooltip_text$MH() {
        return RuntimeHelper.requireNonNull(constants$1957.gtk_status_icon_get_tooltip_text$MH,"gtk_status_icon_get_tooltip_text");
    }
    /**
     * {@snippet :
     * gchar* gtk_status_icon_get_tooltip_text(GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_tooltip_text(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_tooltip_text$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_tooltip_markup$MH() {
        return RuntimeHelper.requireNonNull(constants$1957.gtk_status_icon_get_tooltip_markup$MH,"gtk_status_icon_get_tooltip_markup");
    }
    /**
     * {@snippet :
     * gchar* gtk_status_icon_get_tooltip_markup(GtkStatusIcon* status_icon);
     * }
     */
    public static MemorySegment gtk_status_icon_get_tooltip_markup(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_tooltip_markup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_x11_window_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.gtk_status_icon_get_x11_window_id$MH,"gtk_status_icon_get_x11_window_id");
    }
    /**
     * {@snippet :
     * guint32 gtk_status_icon_get_x11_window_id(GtkStatusIcon* status_icon);
     * }
     */
    public static int gtk_status_icon_get_x11_window_id(MemorySegment status_icon) {
        var mh$ = gtk_status_icon_get_x11_window_id$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .GTK_EXPANDER_COLLAPSED = 0;
     * }
     */
    public static int GTK_EXPANDER_COLLAPSED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GTK_EXPANDER_SEMI_COLLAPSED = 1;
     * }
     */
    public static int GTK_EXPANDER_SEMI_COLLAPSED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GTK_EXPANDER_SEMI_EXPANDED = 2;
     * }
     */
    public static int GTK_EXPANDER_SEMI_EXPANDED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GTK_EXPANDER_EXPANDED = 3;
     * }
     */
    public static int GTK_EXPANDER_EXPANDED() {
        return (int)3L;
    }
    public static MethodHandle gtk_style_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.gtk_style_get_type$MH,"gtk_style_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_style_get_type();
     * }
     */
    public static long gtk_style_get_type() {
        var mh$ = gtk_style_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.gtk_style_new$MH,"gtk_style_new");
    }
    /**
     * {@snippet :
     * GtkStyle* gtk_style_new();
     * }
     */
    public static MemorySegment gtk_style_new() {
        var mh$ = gtk_style_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.gtk_style_copy$MH,"gtk_style_copy");
    }
    /**
     * {@snippet :
     * GtkStyle* gtk_style_copy(GtkStyle* style);
     * }
     */
    public static MemorySegment gtk_style_copy(MemorySegment style) {
        var mh$ = gtk_style_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_attach$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.gtk_style_attach$MH,"gtk_style_attach");
    }
    /**
     * {@snippet :
     * GtkStyle* gtk_style_attach(GtkStyle* style, GdkWindow* window);
     * }
     */
    public static MemorySegment gtk_style_attach(MemorySegment style, MemorySegment window) {
        var mh$ = gtk_style_attach$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(style, window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_detach$MH() {
        return RuntimeHelper.requireNonNull(constants$1958.gtk_style_detach$MH,"gtk_style_detach");
    }
    /**
     * {@snippet :
     * void gtk_style_detach(GtkStyle* style);
     * }
     */
    public static void gtk_style_detach(MemorySegment style) {
        var mh$ = gtk_style_detach$MH();
        try {
            mh$.invokeExact(style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_set_background$MH() {
        return RuntimeHelper.requireNonNull(constants$1959.gtk_style_set_background$MH,"gtk_style_set_background");
    }
    /**
     * {@snippet :
     * void gtk_style_set_background(GtkStyle* style, GdkWindow* window, GtkStateType state_type);
     * }
     */
    public static void gtk_style_set_background(MemorySegment style, MemorySegment window, int state_type) {
        var mh$ = gtk_style_set_background$MH();
        try {
            mh$.invokeExact(style, window, state_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_apply_default_background$MH() {
        return RuntimeHelper.requireNonNull(constants$1959.gtk_style_apply_default_background$MH,"gtk_style_apply_default_background");
    }
    /**
     * {@snippet :
     * void gtk_style_apply_default_background(GtkStyle* style, cairo_t* cr, GdkWindow* window, GtkStateType state_type, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_style_apply_default_background(MemorySegment style, MemorySegment cr, MemorySegment window, int state_type, int x, int y, int width, int height) {
        var mh$ = gtk_style_apply_default_background$MH();
        try {
            mh$.invokeExact(style, cr, window, state_type, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_lookup_icon_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1959.gtk_style_lookup_icon_set$MH,"gtk_style_lookup_icon_set");
    }
    /**
     * {@snippet :
     * GtkIconSet* gtk_style_lookup_icon_set(GtkStyle* style, const gchar* stock_id);
     * }
     */
    public static MemorySegment gtk_style_lookup_icon_set(MemorySegment style, MemorySegment stock_id) {
        var mh$ = gtk_style_lookup_icon_set$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(style, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_lookup_color$MH() {
        return RuntimeHelper.requireNonNull(constants$1959.gtk_style_lookup_color$MH,"gtk_style_lookup_color");
    }
    /**
     * {@snippet :
     * gboolean gtk_style_lookup_color(GtkStyle* style, const gchar* color_name, GdkColor* color);
     * }
     */
    public static int gtk_style_lookup_color(MemorySegment style, MemorySegment color_name, MemorySegment color) {
        var mh$ = gtk_style_lookup_color$MH();
        try {
            return (int)mh$.invokeExact(style, color_name, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_render_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$1959.gtk_style_render_icon$MH,"gtk_style_render_icon");
    }
    /**
     * {@snippet :
     * GdkPixbuf* gtk_style_render_icon(GtkStyle* style, const GtkIconSource* source, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget* widget, const gchar* detail);
     * }
     */
    public static MemorySegment gtk_style_render_icon(MemorySegment style, MemorySegment source, int direction, int state, int size, MemorySegment widget, MemorySegment detail) {
        var mh$ = gtk_style_render_icon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(style, source, direction, state, size, widget, detail);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_hline$MH() {
        return RuntimeHelper.requireNonNull(constants$1959.gtk_paint_hline$MH,"gtk_paint_hline");
    }
    /**
     * {@snippet :
     * void gtk_paint_hline(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkWidget* widget, const gchar* detail, gint x1, gint x2, gint y);
     * }
     */
    public static void gtk_paint_hline(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int x1, int x2, int y) {
        var mh$ = gtk_paint_hline$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, x1, x2, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_vline$MH() {
        return RuntimeHelper.requireNonNull(constants$1960.gtk_paint_vline$MH,"gtk_paint_vline");
    }
    /**
     * {@snippet :
     * void gtk_paint_vline(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkWidget* widget, const gchar* detail, gint y1_, gint y2_, gint x);
     * }
     */
    public static void gtk_paint_vline(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int y1_, int y2_, int x) {
        var mh$ = gtk_paint_vline$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, y1_, y2_, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_shadow$MH() {
        return RuntimeHelper.requireNonNull(constants$1960.gtk_paint_shadow$MH,"gtk_paint_shadow");
    }
    /**
     * {@snippet :
     * void gtk_paint_shadow(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_shadow(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_shadow$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_arrow$MH() {
        return RuntimeHelper.requireNonNull(constants$1960.gtk_paint_arrow$MH,"gtk_paint_arrow");
    }
    /**
     * {@snippet :
     * void gtk_paint_arrow(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, GtkArrowType arrow_type, gboolean fill, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_arrow(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int arrow_type, int fill, int x, int y, int width, int height) {
        var mh$ = gtk_paint_arrow$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, arrow_type, fill, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_diamond$MH() {
        return RuntimeHelper.requireNonNull(constants$1960.gtk_paint_diamond$MH,"gtk_paint_diamond");
    }
    /**
     * {@snippet :
     * void gtk_paint_diamond(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_diamond(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_diamond$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_box$MH() {
        return RuntimeHelper.requireNonNull(constants$1960.gtk_paint_box$MH,"gtk_paint_box");
    }
    /**
     * {@snippet :
     * void gtk_paint_box(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_box(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_box$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_flat_box$MH() {
        return RuntimeHelper.requireNonNull(constants$1960.gtk_paint_flat_box$MH,"gtk_paint_flat_box");
    }
    /**
     * {@snippet :
     * void gtk_paint_flat_box(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_flat_box(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_flat_box$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_check$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.gtk_paint_check$MH,"gtk_paint_check");
    }
    /**
     * {@snippet :
     * void gtk_paint_check(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_check(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_check$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_option$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.gtk_paint_option$MH,"gtk_paint_option");
    }
    /**
     * {@snippet :
     * void gtk_paint_option(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_option(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_option$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_tab$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.gtk_paint_tab$MH,"gtk_paint_tab");
    }
    /**
     * {@snippet :
     * void gtk_paint_tab(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_tab(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_tab$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_shadow_gap$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.gtk_paint_shadow_gap$MH,"gtk_paint_shadow_gap");
    }
    /**
     * {@snippet :
     * void gtk_paint_shadow_gap(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width);
     * }
     */
    public static void gtk_paint_shadow_gap(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int gap_side, int gap_x, int gap_width) {
        var mh$ = gtk_paint_shadow_gap$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_box_gap$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.gtk_paint_box_gap$MH,"gtk_paint_box_gap");
    }
    /**
     * {@snippet :
     * void gtk_paint_box_gap(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width);
     * }
     */
    public static void gtk_paint_box_gap(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int gap_side, int gap_x, int gap_width) {
        var mh$ = gtk_paint_box_gap$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_extension$MH() {
        return RuntimeHelper.requireNonNull(constants$1961.gtk_paint_extension$MH,"gtk_paint_extension");
    }
    /**
     * {@snippet :
     * void gtk_paint_extension(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side);
     * }
     */
    public static void gtk_paint_extension(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int gap_side) {
        var mh$ = gtk_paint_extension$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_focus$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.gtk_paint_focus$MH,"gtk_paint_focus");
    }
    /**
     * {@snippet :
     * void gtk_paint_focus(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_focus(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height) {
        var mh$ = gtk_paint_focus$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_slider$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.gtk_paint_slider$MH,"gtk_paint_slider");
    }
    /**
     * {@snippet :
     * void gtk_paint_slider(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height, GtkOrientation orientation);
     * }
     */
    public static void gtk_paint_slider(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int orientation) {
        var mh$ = gtk_paint_slider$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.gtk_paint_handle$MH,"gtk_paint_handle");
    }
    /**
     * {@snippet :
     * void gtk_paint_handle(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkShadowType shadow_type, GtkWidget* widget, const gchar* detail, gint x, gint y, gint width, gint height, GtkOrientation orientation);
     * }
     */
    public static void gtk_paint_handle(MemorySegment style, MemorySegment cr, int state_type, int shadow_type, MemorySegment widget, MemorySegment detail, int x, int y, int width, int height, int orientation) {
        var mh$ = gtk_paint_handle$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_expander$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.gtk_paint_expander$MH,"gtk_paint_expander");
    }
    /**
     * {@snippet :
     * void gtk_paint_expander(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkWidget* widget, const gchar* detail, gint x, gint y, GtkExpanderStyle expander_style);
     * }
     */
    public static void gtk_paint_expander(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int x, int y, int expander_style) {
        var mh$ = gtk_paint_expander$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, x, y, expander_style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.gtk_paint_layout$MH,"gtk_paint_layout");
    }
    /**
     * {@snippet :
     * void gtk_paint_layout(GtkStyle* style, cairo_t* cr, GtkStateType state_type, gboolean use_text, GtkWidget* widget, const gchar* detail, gint x, gint y, PangoLayout* layout);
     * }
     */
    public static void gtk_paint_layout(MemorySegment style, MemorySegment cr, int state_type, int use_text, MemorySegment widget, MemorySegment detail, int x, int y, MemorySegment layout) {
        var mh$ = gtk_paint_layout$MH();
        try {
            mh$.invokeExact(style, cr, state_type, use_text, widget, detail, x, y, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_resize_grip$MH() {
        return RuntimeHelper.requireNonNull(constants$1962.gtk_paint_resize_grip$MH,"gtk_paint_resize_grip");
    }
    /**
     * {@snippet :
     * void gtk_paint_resize_grip(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkWidget* widget, const gchar* detail, GdkWindowEdge edge, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_resize_grip(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int edge, int x, int y, int width, int height) {
        var mh$ = gtk_paint_resize_grip$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, edge, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_spinner$MH() {
        return RuntimeHelper.requireNonNull(constants$1963.gtk_paint_spinner$MH,"gtk_paint_spinner");
    }
    /**
     * {@snippet :
     * void gtk_paint_spinner(GtkStyle* style, cairo_t* cr, GtkStateType state_type, GtkWidget* widget, const gchar* detail, guint step, gint x, gint y, gint width, gint height);
     * }
     */
    public static void gtk_paint_spinner(MemorySegment style, MemorySegment cr, int state_type, MemorySegment widget, MemorySegment detail, int step, int x, int y, int width, int height) {
        var mh$ = gtk_paint_spinner$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, step, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_get_style_property$MH() {
        return RuntimeHelper.requireNonNull(constants$1963.gtk_style_get_style_property$MH,"gtk_style_get_style_property");
    }
    /**
     * {@snippet :
     * void gtk_style_get_style_property(GtkStyle* style, GType widget_type, const gchar* property_name, GValue* value);
     * }
     */
    public static void gtk_style_get_style_property(MemorySegment style, long widget_type, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_style_get_style_property$MH();
        try {
            mh$.invokeExact(style, widget_type, property_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_get_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$1963.gtk_style_get_valist$MH,"gtk_style_get_valist");
    }
    /**
     * {@snippet :
     * void gtk_style_get_valist(GtkStyle* style, GType widget_type, const gchar* first_property_name, va_list var_args);
     * }
     */
    public static void gtk_style_get_valist(MemorySegment style, long widget_type, MemorySegment first_property_name, MemorySegment var_args) {
        var mh$ = gtk_style_get_valist$MH();
        try {
            mh$.invokeExact(style, widget_type, first_property_name, var_args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1963.gtk_style_get$MH,"gtk_style_get");
    }
    /**
     * {@snippet :
     * void gtk_style_get(GtkStyle* style, GType widget_type, const gchar* first_property_name,...);
     * }
     */
    public static void gtk_style_get(MemorySegment style, long widget_type, MemorySegment first_property_name, Object... x3) {
        var mh$ = gtk_style_get$MH();
        try {
            mh$.invokeExact(style, widget_type, first_property_name, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_style_new_for_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1963._gtk_style_new_for_path$MH,"_gtk_style_new_for_path");
    }
    /**
     * {@snippet :
     * GtkStyle* _gtk_style_new_for_path(GdkScreen* screen, GtkWidgetPath* path);
     * }
     */
    public static MemorySegment _gtk_style_new_for_path(MemorySegment screen, MemorySegment path) {
        var mh$ = _gtk_style_new_for_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(screen, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_style_shade$MH() {
        return RuntimeHelper.requireNonNull(constants$1963._gtk_style_shade$MH,"_gtk_style_shade");
    }
    /**
     * {@snippet :
     * void _gtk_style_shade(const GdkColor* a, GdkColor* b, gdouble k);
     * }
     */
    public static void _gtk_style_shade(MemorySegment a, MemorySegment b, double k) {
        var mh$ = _gtk_style_shade$MH();
        try {
            mh$.invokeExact(a, b, k);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_has_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1964.gtk_style_has_context$MH,"gtk_style_has_context");
    }
    /**
     * {@snippet :
     * gboolean gtk_style_has_context(GtkStyle* style);
     * }
     */
    public static int gtk_style_has_context(MemorySegment style) {
        var mh$ = gtk_style_has_context$MH();
        try {
            return (int)mh$.invokeExact(style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_style_attach$MH() {
        return RuntimeHelper.requireNonNull(constants$1964.gtk_widget_style_attach$MH,"gtk_widget_style_attach");
    }
    /**
     * {@snippet :
     * void gtk_widget_style_attach(GtkWidget* widget);
     * }
     */
    public static void gtk_widget_style_attach(MemorySegment widget) {
        var mh$ = gtk_widget_style_attach$MH();
        try {
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_has_rc_style$MH() {
        return RuntimeHelper.requireNonNull(constants$1964.gtk_widget_has_rc_style$MH,"gtk_widget_has_rc_style");
    }
    /**
     * {@snippet :
     * gboolean gtk_widget_has_rc_style(GtkWidget* widget);
     * }
     */
    public static int gtk_widget_has_rc_style(MemorySegment widget) {
        var mh$ = gtk_widget_has_rc_style$MH();
        try {
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_set_style$MH() {
        return RuntimeHelper.requireNonNull(constants$1964.gtk_widget_set_style$MH,"gtk_widget_set_style");
    }
    /**
     * {@snippet :
     * void gtk_widget_set_style(GtkWidget* widget, GtkStyle* style);
     * }
     */
    public static void gtk_widget_set_style(MemorySegment widget, MemorySegment style) {
        var mh$ = gtk_widget_set_style$MH();
        try {
            mh$.invokeExact(widget, style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_ensure_style$MH() {
        return RuntimeHelper.requireNonNull(constants$1964.gtk_widget_ensure_style$MH,"gtk_widget_ensure_style");
    }
    /**
     * {@snippet :
     * void gtk_widget_ensure_style(GtkWidget* widget);
     * }
     */
    public static void gtk_widget_ensure_style(MemorySegment widget) {
        var mh$ = gtk_widget_ensure_style$MH();
        try {
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_get_style$MH() {
        return RuntimeHelper.requireNonNull(constants$1964.gtk_widget_get_style$MH,"gtk_widget_get_style");
    }
    /**
     * {@snippet :
     * GtkStyle* gtk_widget_get_style(GtkWidget* widget);
     * }
     */
    public static MemorySegment gtk_widget_get_style(MemorySegment widget) {
        var mh$ = gtk_widget_get_style$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_style$MH() {
        return RuntimeHelper.requireNonNull(constants$1965.gtk_widget_modify_style$MH,"gtk_widget_modify_style");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_style(GtkWidget* widget, GtkRcStyle* style);
     * }
     */
    public static void gtk_widget_modify_style(MemorySegment widget, MemorySegment style) {
        var mh$ = gtk_widget_modify_style$MH();
        try {
            mh$.invokeExact(widget, style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_get_modifier_style$MH() {
        return RuntimeHelper.requireNonNull(constants$1965.gtk_widget_get_modifier_style$MH,"gtk_widget_get_modifier_style");
    }
    /**
     * {@snippet :
     * GtkRcStyle* gtk_widget_get_modifier_style(GtkWidget* widget);
     * }
     */
    public static MemorySegment gtk_widget_get_modifier_style(MemorySegment widget) {
        var mh$ = gtk_widget_get_modifier_style$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_fg$MH() {
        return RuntimeHelper.requireNonNull(constants$1965.gtk_widget_modify_fg$MH,"gtk_widget_modify_fg");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_fg(GtkWidget* widget, GtkStateType state, const GdkColor* color);
     * }
     */
    public static void gtk_widget_modify_fg(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_fg$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_bg$MH() {
        return RuntimeHelper.requireNonNull(constants$1965.gtk_widget_modify_bg$MH,"gtk_widget_modify_bg");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_bg(GtkWidget* widget, GtkStateType state, const GdkColor* color);
     * }
     */
    public static void gtk_widget_modify_bg(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_bg$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_text$MH() {
        return RuntimeHelper.requireNonNull(constants$1965.gtk_widget_modify_text$MH,"gtk_widget_modify_text");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_text(GtkWidget* widget, GtkStateType state, const GdkColor* color);
     * }
     */
    public static void gtk_widget_modify_text(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_text$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_base$MH() {
        return RuntimeHelper.requireNonNull(constants$1965.gtk_widget_modify_base$MH,"gtk_widget_modify_base");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_base(GtkWidget* widget, GtkStateType state, const GdkColor* color);
     * }
     */
    public static void gtk_widget_modify_base(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_modify_base$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_cursor$MH() {
        return RuntimeHelper.requireNonNull(constants$1966.gtk_widget_modify_cursor$MH,"gtk_widget_modify_cursor");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_cursor(GtkWidget* widget, const GdkColor* primary, const GdkColor* secondary);
     * }
     */
    public static void gtk_widget_modify_cursor(MemorySegment widget, MemorySegment primary, MemorySegment secondary) {
        var mh$ = gtk_widget_modify_cursor$MH();
        try {
            mh$.invokeExact(widget, primary, secondary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_font$MH() {
        return RuntimeHelper.requireNonNull(constants$1966.gtk_widget_modify_font$MH,"gtk_widget_modify_font");
    }
    /**
     * {@snippet :
     * void gtk_widget_modify_font(GtkWidget* widget, PangoFontDescription* font_desc);
     * }
     */
    public static void gtk_widget_modify_font(MemorySegment widget, MemorySegment font_desc) {
        var mh$ = gtk_widget_modify_font$MH();
        try {
            mh$.invokeExact(widget, font_desc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_reset_rc_styles$MH() {
        return RuntimeHelper.requireNonNull(constants$1966.gtk_widget_reset_rc_styles$MH,"gtk_widget_reset_rc_styles");
    }
    /**
     * {@snippet :
     * void gtk_widget_reset_rc_styles(GtkWidget* widget);
     * }
     */
    public static void gtk_widget_reset_rc_styles(MemorySegment widget) {
        var mh$ = gtk_widget_reset_rc_styles$MH();
        try {
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_get_default_style$MH() {
        return RuntimeHelper.requireNonNull(constants$1966.gtk_widget_get_default_style$MH,"gtk_widget_get_default_style");
    }
    /**
     * {@snippet :
     * GtkStyle* gtk_widget_get_default_style();
     * }
     */
    public static MemorySegment gtk_widget_get_default_style() {
        var mh$ = gtk_widget_get_default_style$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1966.gtk_widget_path$MH,"gtk_widget_path");
    }
    /**
     * {@snippet :
     * void gtk_widget_path(GtkWidget* widget, guint* path_length, gchar** path, gchar** path_reversed);
     * }
     */
    public static void gtk_widget_path(MemorySegment widget, MemorySegment path_length, MemorySegment path, MemorySegment path_reversed) {
        var mh$ = gtk_widget_path$MH();
        try {
            mh$.invokeExact(widget, path_length, path, path_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_class_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1966.gtk_widget_class_path$MH,"gtk_widget_class_path");
    }
    /**
     * {@snippet :
     * void gtk_widget_class_path(GtkWidget* widget, guint* path_length, gchar** path, gchar** path_reversed);
     * }
     */
    public static void gtk_widget_class_path(MemorySegment widget, MemorySegment path_length, MemorySegment path, MemorySegment path_reversed) {
        var mh$ = gtk_widget_class_path$MH();
        try {
            mh$.invokeExact(widget, path_length, path, path_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_render_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$1967.gtk_widget_render_icon$MH,"gtk_widget_render_icon");
    }
    /**
     * {@snippet :
     * GdkPixbuf* gtk_widget_render_icon(GtkWidget* widget, const gchar* stock_id, GtkIconSize size, const gchar* detail);
     * }
     */
    public static MemorySegment gtk_widget_render_icon(MemorySegment widget, MemorySegment stock_id, int size, MemorySegment detail) {
        var mh$ = gtk_widget_render_icon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(widget, stock_id, size, detail);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .GTK_EXPAND = 1;
     * }
     */
    public static int GTK_EXPAND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GTK_SHRINK = 2;
     * }
     */
    public static int GTK_SHRINK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GTK_FILL = 4;
     * }
     */
    public static int GTK_FILL() {
        return (int)4L;
    }
    public static MethodHandle gtk_table_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1967.gtk_table_get_type$MH,"gtk_table_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_table_get_type();
     * }
     */
    public static long gtk_table_get_type() {
        var mh$ = gtk_table_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1967.gtk_table_new$MH,"gtk_table_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_table_new(guint rows, guint columns, gboolean homogeneous);
     * }
     */
    public static MemorySegment gtk_table_new(int rows, int columns, int homogeneous) {
        var mh$ = gtk_table_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(rows, columns, homogeneous);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_resize$MH() {
        return RuntimeHelper.requireNonNull(constants$1967.gtk_table_resize$MH,"gtk_table_resize");
    }
    /**
     * {@snippet :
     * void gtk_table_resize(GtkTable* table, guint rows, guint columns);
     * }
     */
    public static void gtk_table_resize(MemorySegment table, int rows, int columns) {
        var mh$ = gtk_table_resize$MH();
        try {
            mh$.invokeExact(table, rows, columns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_attach$MH() {
        return RuntimeHelper.requireNonNull(constants$1967.gtk_table_attach$MH,"gtk_table_attach");
    }
    /**
     * {@snippet :
     * void gtk_table_attach(GtkTable* table, GtkWidget* child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding);
     * }
     */
    public static void gtk_table_attach(MemorySegment table, MemorySegment child, int left_attach, int right_attach, int top_attach, int bottom_attach, int xoptions, int yoptions, int xpadding, int ypadding) {
        var mh$ = gtk_table_attach$MH();
        try {
            mh$.invokeExact(table, child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_attach_defaults$MH() {
        return RuntimeHelper.requireNonNull(constants$1967.gtk_table_attach_defaults$MH,"gtk_table_attach_defaults");
    }
    /**
     * {@snippet :
     * void gtk_table_attach_defaults(GtkTable* table, GtkWidget* widget, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach);
     * }
     */
    public static void gtk_table_attach_defaults(MemorySegment table, MemorySegment widget, int left_attach, int right_attach, int top_attach, int bottom_attach) {
        var mh$ = gtk_table_attach_defaults$MH();
        try {
            mh$.invokeExact(table, widget, left_attach, right_attach, top_attach, bottom_attach);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_row_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$1968.gtk_table_set_row_spacing$MH,"gtk_table_set_row_spacing");
    }
    /**
     * {@snippet :
     * void gtk_table_set_row_spacing(GtkTable* table, guint row, guint spacing);
     * }
     */
    public static void gtk_table_set_row_spacing(MemorySegment table, int row, int spacing) {
        var mh$ = gtk_table_set_row_spacing$MH();
        try {
            mh$.invokeExact(table, row, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_row_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$1968.gtk_table_get_row_spacing$MH,"gtk_table_get_row_spacing");
    }
    /**
     * {@snippet :
     * guint gtk_table_get_row_spacing(GtkTable* table, guint row);
     * }
     */
    public static int gtk_table_get_row_spacing(MemorySegment table, int row) {
        var mh$ = gtk_table_get_row_spacing$MH();
        try {
            return (int)mh$.invokeExact(table, row);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_col_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$1968.gtk_table_set_col_spacing$MH,"gtk_table_set_col_spacing");
    }
    /**
     * {@snippet :
     * void gtk_table_set_col_spacing(GtkTable* table, guint column, guint spacing);
     * }
     */
    public static void gtk_table_set_col_spacing(MemorySegment table, int column, int spacing) {
        var mh$ = gtk_table_set_col_spacing$MH();
        try {
            mh$.invokeExact(table, column, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_col_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$1968.gtk_table_get_col_spacing$MH,"gtk_table_get_col_spacing");
    }
    /**
     * {@snippet :
     * guint gtk_table_get_col_spacing(GtkTable* table, guint column);
     * }
     */
    public static int gtk_table_get_col_spacing(MemorySegment table, int column) {
        var mh$ = gtk_table_get_col_spacing$MH();
        try {
            return (int)mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_row_spacings$MH() {
        return RuntimeHelper.requireNonNull(constants$1968.gtk_table_set_row_spacings$MH,"gtk_table_set_row_spacings");
    }
    /**
     * {@snippet :
     * void gtk_table_set_row_spacings(GtkTable* table, guint spacing);
     * }
     */
    public static void gtk_table_set_row_spacings(MemorySegment table, int spacing) {
        var mh$ = gtk_table_set_row_spacings$MH();
        try {
            mh$.invokeExact(table, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_default_row_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$1968.gtk_table_get_default_row_spacing$MH,"gtk_table_get_default_row_spacing");
    }
    /**
     * {@snippet :
     * guint gtk_table_get_default_row_spacing(GtkTable* table);
     * }
     */
    public static int gtk_table_get_default_row_spacing(MemorySegment table) {
        var mh$ = gtk_table_get_default_row_spacing$MH();
        try {
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_col_spacings$MH() {
        return RuntimeHelper.requireNonNull(constants$1969.gtk_table_set_col_spacings$MH,"gtk_table_set_col_spacings");
    }
    /**
     * {@snippet :
     * void gtk_table_set_col_spacings(GtkTable* table, guint spacing);
     * }
     */
    public static void gtk_table_set_col_spacings(MemorySegment table, int spacing) {
        var mh$ = gtk_table_set_col_spacings$MH();
        try {
            mh$.invokeExact(table, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_default_col_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$1969.gtk_table_get_default_col_spacing$MH,"gtk_table_get_default_col_spacing");
    }
    /**
     * {@snippet :
     * guint gtk_table_get_default_col_spacing(GtkTable* table);
     * }
     */
    public static int gtk_table_get_default_col_spacing(MemorySegment table) {
        var mh$ = gtk_table_get_default_col_spacing$MH();
        try {
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_homogeneous$MH() {
        return RuntimeHelper.requireNonNull(constants$1969.gtk_table_set_homogeneous$MH,"gtk_table_set_homogeneous");
    }
    /**
     * {@snippet :
     * void gtk_table_set_homogeneous(GtkTable* table, gboolean homogeneous);
     * }
     */
    public static void gtk_table_set_homogeneous(MemorySegment table, int homogeneous) {
        var mh$ = gtk_table_set_homogeneous$MH();
        try {
            mh$.invokeExact(table, homogeneous);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_homogeneous$MH() {
        return RuntimeHelper.requireNonNull(constants$1969.gtk_table_get_homogeneous$MH,"gtk_table_get_homogeneous");
    }
    /**
     * {@snippet :
     * gboolean gtk_table_get_homogeneous(GtkTable* table);
     * }
     */
    public static int gtk_table_get_homogeneous(MemorySegment table) {
        var mh$ = gtk_table_get_homogeneous$MH();
        try {
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$1969.gtk_table_get_size$MH,"gtk_table_get_size");
    }
    /**
     * {@snippet :
     * void gtk_table_get_size(GtkTable* table, guint* rows, guint* columns);
     * }
     */
    public static void gtk_table_get_size(MemorySegment table, MemorySegment rows, MemorySegment columns) {
        var mh$ = gtk_table_get_size$MH();
        try {
            mh$.invokeExact(table, rows, columns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tearoff_menu_item_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1969.gtk_tearoff_menu_item_get_type$MH,"gtk_tearoff_menu_item_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_tearoff_menu_item_get_type();
     * }
     */
    public static long gtk_tearoff_menu_item_get_type() {
        var mh$ = gtk_tearoff_menu_item_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tearoff_menu_item_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1970.gtk_tearoff_menu_item_new$MH,"gtk_tearoff_menu_item_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_tearoff_menu_item_new();
     * }
     */
    public static MemorySegment gtk_tearoff_menu_item_new() {
        var mh$ = gtk_tearoff_menu_item_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1970.gtk_theming_engine_get_type$MH,"gtk_theming_engine_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_theming_engine_get_type();
     * }
     */
    public static long gtk_theming_engine_get_type() {
        var mh$ = gtk_theming_engine_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_register_property$MH() {
        return RuntimeHelper.requireNonNull(constants$1970.gtk_theming_engine_register_property$MH,"gtk_theming_engine_register_property");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_register_property(const gchar* name_space, GtkStylePropertyParser parse_func, GParamSpec* pspec);
     * }
     */
    public static void gtk_theming_engine_register_property(MemorySegment name_space, MemorySegment parse_func, MemorySegment pspec) {
        var mh$ = gtk_theming_engine_register_property$MH();
        try {
            mh$.invokeExact(name_space, parse_func, pspec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_property$MH() {
        return RuntimeHelper.requireNonNull(constants$1970.gtk_theming_engine_get_property$MH,"gtk_theming_engine_get_property");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_property(GtkThemingEngine* engine, const gchar* property, GtkStateFlags state, GValue* value);
     * }
     */
    public static void gtk_theming_engine_get_property(MemorySegment engine, MemorySegment property, int state, MemorySegment value) {
        var mh$ = gtk_theming_engine_get_property$MH();
        try {
            mh$.invokeExact(engine, property, state, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$1970.gtk_theming_engine_get_valist$MH,"gtk_theming_engine_get_valist");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_valist(GtkThemingEngine* engine, GtkStateFlags state, va_list args);
     * }
     */
    public static void gtk_theming_engine_get_valist(MemorySegment engine, int state, MemorySegment args) {
        var mh$ = gtk_theming_engine_get_valist$MH();
        try {
            mh$.invokeExact(engine, state, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1970.gtk_theming_engine_get$MH,"gtk_theming_engine_get");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get(GtkThemingEngine* engine, GtkStateFlags state,...);
     * }
     */
    public static void gtk_theming_engine_get(MemorySegment engine, int state, Object... x2) {
        var mh$ = gtk_theming_engine_get$MH();
        try {
            mh$.invokeExact(engine, state, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_style_property$MH() {
        return RuntimeHelper.requireNonNull(constants$1971.gtk_theming_engine_get_style_property$MH,"gtk_theming_engine_get_style_property");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_style_property(GtkThemingEngine* engine, const gchar* property_name, GValue* value);
     * }
     */
    public static void gtk_theming_engine_get_style_property(MemorySegment engine, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_theming_engine_get_style_property$MH();
        try {
            mh$.invokeExact(engine, property_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_style_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$1971.gtk_theming_engine_get_style_valist$MH,"gtk_theming_engine_get_style_valist");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_style_valist(GtkThemingEngine* engine, va_list args);
     * }
     */
    public static void gtk_theming_engine_get_style_valist(MemorySegment engine, MemorySegment args) {
        var mh$ = gtk_theming_engine_get_style_valist$MH();
        try {
            mh$.invokeExact(engine, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_style$MH() {
        return RuntimeHelper.requireNonNull(constants$1971.gtk_theming_engine_get_style$MH,"gtk_theming_engine_get_style");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_style(GtkThemingEngine* engine,...);
     * }
     */
    public static void gtk_theming_engine_get_style(MemorySegment engine, Object... x1) {
        var mh$ = gtk_theming_engine_get_style$MH();
        try {
            mh$.invokeExact(engine, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_lookup_color$MH() {
        return RuntimeHelper.requireNonNull(constants$1971.gtk_theming_engine_lookup_color$MH,"gtk_theming_engine_lookup_color");
    }
    /**
     * {@snippet :
     * gboolean gtk_theming_engine_lookup_color(GtkThemingEngine* engine, const gchar* color_name, GdkRGBA* color);
     * }
     */
    public static int gtk_theming_engine_lookup_color(MemorySegment engine, MemorySegment color_name, MemorySegment color) {
        var mh$ = gtk_theming_engine_lookup_color$MH();
        try {
            return (int)mh$.invokeExact(engine, color_name, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1971.gtk_theming_engine_get_path$MH,"gtk_theming_engine_get_path");
    }
    /**
     * {@snippet :
     * const GtkWidgetPath* gtk_theming_engine_get_path(GtkThemingEngine* engine);
     * }
     */
    public static MemorySegment gtk_theming_engine_get_path(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_has_class$MH() {
        return RuntimeHelper.requireNonNull(constants$1971.gtk_theming_engine_has_class$MH,"gtk_theming_engine_has_class");
    }
    /**
     * {@snippet :
     * gboolean gtk_theming_engine_has_class(GtkThemingEngine* engine, const gchar* style_class);
     * }
     */
    public static int gtk_theming_engine_has_class(MemorySegment engine, MemorySegment style_class) {
        var mh$ = gtk_theming_engine_has_class$MH();
        try {
            return (int)mh$.invokeExact(engine, style_class);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_has_region$MH() {
        return RuntimeHelper.requireNonNull(constants$1972.gtk_theming_engine_has_region$MH,"gtk_theming_engine_has_region");
    }
    /**
     * {@snippet :
     * gboolean gtk_theming_engine_has_region(GtkThemingEngine* engine, const gchar* style_region, GtkRegionFlags* flags);
     * }
     */
    public static int gtk_theming_engine_has_region(MemorySegment engine, MemorySegment style_region, MemorySegment flags) {
        var mh$ = gtk_theming_engine_has_region$MH();
        try {
            return (int)mh$.invokeExact(engine, style_region, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1972.gtk_theming_engine_get_state$MH,"gtk_theming_engine_get_state");
    }
    /**
     * {@snippet :
     * GtkStateFlags gtk_theming_engine_get_state(GtkThemingEngine* engine);
     * }
     */
    public static int gtk_theming_engine_get_state(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_state$MH();
        try {
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_state_is_running$MH() {
        return RuntimeHelper.requireNonNull(constants$1972.gtk_theming_engine_state_is_running$MH,"gtk_theming_engine_state_is_running");
    }
    /**
     * {@snippet :
     * gboolean gtk_theming_engine_state_is_running(GtkThemingEngine* engine, GtkStateType state, gdouble* progress);
     * }
     */
    public static int gtk_theming_engine_state_is_running(MemorySegment engine, int state, MemorySegment progress) {
        var mh$ = gtk_theming_engine_state_is_running$MH();
        try {
            return (int)mh$.invokeExact(engine, state, progress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_direction$MH() {
        return RuntimeHelper.requireNonNull(constants$1972.gtk_theming_engine_get_direction$MH,"gtk_theming_engine_get_direction");
    }
    /**
     * {@snippet :
     * GtkTextDirection gtk_theming_engine_get_direction(GtkThemingEngine* engine);
     * }
     */
    public static int gtk_theming_engine_get_direction(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_direction$MH();
        try {
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_junction_sides$MH() {
        return RuntimeHelper.requireNonNull(constants$1972.gtk_theming_engine_get_junction_sides$MH,"gtk_theming_engine_get_junction_sides");
    }
    /**
     * {@snippet :
     * GtkJunctionSides gtk_theming_engine_get_junction_sides(GtkThemingEngine* engine);
     * }
     */
    public static int gtk_theming_engine_get_junction_sides(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_junction_sides$MH();
        try {
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_color$MH() {
        return RuntimeHelper.requireNonNull(constants$1972.gtk_theming_engine_get_color$MH,"gtk_theming_engine_get_color");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_color(GtkThemingEngine* engine, GtkStateFlags state, GdkRGBA* color);
     * }
     */
    public static void gtk_theming_engine_get_color(MemorySegment engine, int state, MemorySegment color) {
        var mh$ = gtk_theming_engine_get_color$MH();
        try {
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_background_color$MH() {
        return RuntimeHelper.requireNonNull(constants$1973.gtk_theming_engine_get_background_color$MH,"gtk_theming_engine_get_background_color");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_background_color(GtkThemingEngine* engine, GtkStateFlags state, GdkRGBA* color);
     * }
     */
    public static void gtk_theming_engine_get_background_color(MemorySegment engine, int state, MemorySegment color) {
        var mh$ = gtk_theming_engine_get_background_color$MH();
        try {
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_border_color$MH() {
        return RuntimeHelper.requireNonNull(constants$1973.gtk_theming_engine_get_border_color$MH,"gtk_theming_engine_get_border_color");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_border_color(GtkThemingEngine* engine, GtkStateFlags state, GdkRGBA* color);
     * }
     */
    public static void gtk_theming_engine_get_border_color(MemorySegment engine, int state, MemorySegment color) {
        var mh$ = gtk_theming_engine_get_border_color$MH();
        try {
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_border$MH() {
        return RuntimeHelper.requireNonNull(constants$1973.gtk_theming_engine_get_border$MH,"gtk_theming_engine_get_border");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_border(GtkThemingEngine* engine, GtkStateFlags state, GtkBorder* border);
     * }
     */
    public static void gtk_theming_engine_get_border(MemorySegment engine, int state, MemorySegment border) {
        var mh$ = gtk_theming_engine_get_border$MH();
        try {
            mh$.invokeExact(engine, state, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_padding$MH() {
        return RuntimeHelper.requireNonNull(constants$1973.gtk_theming_engine_get_padding$MH,"gtk_theming_engine_get_padding");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_padding(GtkThemingEngine* engine, GtkStateFlags state, GtkBorder* padding);
     * }
     */
    public static void gtk_theming_engine_get_padding(MemorySegment engine, int state, MemorySegment padding) {
        var mh$ = gtk_theming_engine_get_padding$MH();
        try {
            mh$.invokeExact(engine, state, padding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$1973.gtk_theming_engine_get_margin$MH,"gtk_theming_engine_get_margin");
    }
    /**
     * {@snippet :
     * void gtk_theming_engine_get_margin(GtkThemingEngine* engine, GtkStateFlags state, GtkBorder* margin);
     * }
     */
    public static void gtk_theming_engine_get_margin(MemorySegment engine, int state, MemorySegment margin) {
        var mh$ = gtk_theming_engine_get_margin$MH();
        try {
            mh$.invokeExact(engine, state, margin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_font$MH() {
        return RuntimeHelper.requireNonNull(constants$1973.gtk_theming_engine_get_font$MH,"gtk_theming_engine_get_font");
    }
    /**
     * {@snippet :
     * const PangoFontDescription* gtk_theming_engine_get_font(GtkThemingEngine* engine, GtkStateFlags state);
     * }
     */
    public static MemorySegment gtk_theming_engine_get_font(MemorySegment engine, int state) {
        var mh$ = gtk_theming_engine_get_font$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(engine, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_load$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.gtk_theming_engine_load$MH,"gtk_theming_engine_load");
    }
    /**
     * {@snippet :
     * GtkThemingEngine* gtk_theming_engine_load(const gchar* name);
     * }
     */
    public static MemorySegment gtk_theming_engine_load(MemorySegment name) {
        var mh$ = gtk_theming_engine_load$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.gtk_theming_engine_get_screen$MH,"gtk_theming_engine_get_screen");
    }
    /**
     * {@snippet :
     * GdkScreen* gtk_theming_engine_get_screen(GtkThemingEngine* engine);
     * }
     */
    public static MemorySegment gtk_theming_engine_get_screen(MemorySegment engine) {
        var mh$ = gtk_theming_engine_get_screen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_AUTO = 0;
     * }
     */
    public static int GTK_UI_MANAGER_AUTO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_MENUBAR = 1;
     * }
     */
    public static int GTK_UI_MANAGER_MENUBAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_MENU = 2;
     * }
     */
    public static int GTK_UI_MANAGER_MENU() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_TOOLBAR = 4;
     * }
     */
    public static int GTK_UI_MANAGER_TOOLBAR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_PLACEHOLDER = 8;
     * }
     */
    public static int GTK_UI_MANAGER_PLACEHOLDER() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_POPUP = 16;
     * }
     */
    public static int GTK_UI_MANAGER_POPUP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_MENUITEM = 32;
     * }
     */
    public static int GTK_UI_MANAGER_MENUITEM() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_TOOLITEM = 64;
     * }
     */
    public static int GTK_UI_MANAGER_TOOLITEM() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_SEPARATOR = 128;
     * }
     */
    public static int GTK_UI_MANAGER_SEPARATOR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_ACCELERATOR = 256;
     * }
     */
    public static int GTK_UI_MANAGER_ACCELERATOR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum .GTK_UI_MANAGER_POPUP_WITH_ACCELS = 512;
     * }
     */
    public static int GTK_UI_MANAGER_POPUP_WITH_ACCELS() {
        return (int)512L;
    }
    public static MethodHandle gtk_ui_manager_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.gtk_ui_manager_get_type$MH,"gtk_ui_manager_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_ui_manager_get_type();
     * }
     */
    public static long gtk_ui_manager_get_type() {
        var mh$ = gtk_ui_manager_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.gtk_ui_manager_new$MH,"gtk_ui_manager_new");
    }
    /**
     * {@snippet :
     * GtkUIManager* gtk_ui_manager_new();
     * }
     */
    public static MemorySegment gtk_ui_manager_new() {
        var mh$ = gtk_ui_manager_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_set_add_tearoffs$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.gtk_ui_manager_set_add_tearoffs$MH,"gtk_ui_manager_set_add_tearoffs");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_set_add_tearoffs(GtkUIManager* manager, gboolean add_tearoffs);
     * }
     */
    public static void gtk_ui_manager_set_add_tearoffs(MemorySegment manager, int add_tearoffs) {
        var mh$ = gtk_ui_manager_set_add_tearoffs$MH();
        try {
            mh$.invokeExact(manager, add_tearoffs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_add_tearoffs$MH() {
        return RuntimeHelper.requireNonNull(constants$1974.gtk_ui_manager_get_add_tearoffs$MH,"gtk_ui_manager_get_add_tearoffs");
    }
    /**
     * {@snippet :
     * gboolean gtk_ui_manager_get_add_tearoffs(GtkUIManager* manager);
     * }
     */
    public static int gtk_ui_manager_get_add_tearoffs(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_add_tearoffs$MH();
        try {
            return (int)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_insert_action_group$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.gtk_ui_manager_insert_action_group$MH,"gtk_ui_manager_insert_action_group");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_insert_action_group(GtkUIManager* manager, GtkActionGroup* action_group, gint pos);
     * }
     */
    public static void gtk_ui_manager_insert_action_group(MemorySegment manager, MemorySegment action_group, int pos) {
        var mh$ = gtk_ui_manager_insert_action_group$MH();
        try {
            mh$.invokeExact(manager, action_group, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_remove_action_group$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.gtk_ui_manager_remove_action_group$MH,"gtk_ui_manager_remove_action_group");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_remove_action_group(GtkUIManager* manager, GtkActionGroup* action_group);
     * }
     */
    public static void gtk_ui_manager_remove_action_group(MemorySegment manager, MemorySegment action_group) {
        var mh$ = gtk_ui_manager_remove_action_group$MH();
        try {
            mh$.invokeExact(manager, action_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_action_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.gtk_ui_manager_get_action_groups$MH,"gtk_ui_manager_get_action_groups");
    }
    /**
     * {@snippet :
     * GList* gtk_ui_manager_get_action_groups(GtkUIManager* manager);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_action_groups(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_action_groups$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_accel_group$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.gtk_ui_manager_get_accel_group$MH,"gtk_ui_manager_get_accel_group");
    }
    /**
     * {@snippet :
     * GtkAccelGroup* gtk_ui_manager_get_accel_group(GtkUIManager* manager);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_accel_group(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_accel_group$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_widget$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.gtk_ui_manager_get_widget$MH,"gtk_ui_manager_get_widget");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_ui_manager_get_widget(GtkUIManager* manager, const gchar* path);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_widget(MemorySegment manager, MemorySegment path) {
        var mh$ = gtk_ui_manager_get_widget$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_toplevels$MH() {
        return RuntimeHelper.requireNonNull(constants$1975.gtk_ui_manager_get_toplevels$MH,"gtk_ui_manager_get_toplevels");
    }
    /**
     * {@snippet :
     * GSList* gtk_ui_manager_get_toplevels(GtkUIManager* manager, GtkUIManagerItemType types);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_toplevels(MemorySegment manager, int types) {
        var mh$ = gtk_ui_manager_get_toplevels$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager, types);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_action$MH() {
        return RuntimeHelper.requireNonNull(constants$1976.gtk_ui_manager_get_action$MH,"gtk_ui_manager_get_action");
    }
    /**
     * {@snippet :
     * GtkAction* gtk_ui_manager_get_action(GtkUIManager* manager, const gchar* path);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_action(MemorySegment manager, MemorySegment path) {
        var mh$ = gtk_ui_manager_get_action$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1976.gtk_ui_manager_add_ui_from_string$MH,"gtk_ui_manager_add_ui_from_string");
    }
    /**
     * {@snippet :
     * guint gtk_ui_manager_add_ui_from_string(GtkUIManager* manager, const gchar* buffer, gssize length, GError** error);
     * }
     */
    public static int gtk_ui_manager_add_ui_from_string(MemorySegment manager, MemorySegment buffer, long length, MemorySegment error) {
        var mh$ = gtk_ui_manager_add_ui_from_string$MH();
        try {
            return (int)mh$.invokeExact(manager, buffer, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$1976.gtk_ui_manager_add_ui_from_file$MH,"gtk_ui_manager_add_ui_from_file");
    }
    /**
     * {@snippet :
     * guint gtk_ui_manager_add_ui_from_file(GtkUIManager* manager, const gchar* filename, GError** error);
     * }
     */
    public static int gtk_ui_manager_add_ui_from_file(MemorySegment manager, MemorySegment filename, MemorySegment error) {
        var mh$ = gtk_ui_manager_add_ui_from_file$MH();
        try {
            return (int)mh$.invokeExact(manager, filename, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui_from_resource$MH() {
        return RuntimeHelper.requireNonNull(constants$1976.gtk_ui_manager_add_ui_from_resource$MH,"gtk_ui_manager_add_ui_from_resource");
    }
    /**
     * {@snippet :
     * guint gtk_ui_manager_add_ui_from_resource(GtkUIManager* manager, const gchar* resource_path, GError** error);
     * }
     */
    public static int gtk_ui_manager_add_ui_from_resource(MemorySegment manager, MemorySegment resource_path, MemorySegment error) {
        var mh$ = gtk_ui_manager_add_ui_from_resource$MH();
        try {
            return (int)mh$.invokeExact(manager, resource_path, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$1976.gtk_ui_manager_add_ui$MH,"gtk_ui_manager_add_ui");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_add_ui(GtkUIManager* manager, guint merge_id, const gchar* path, const gchar* name, const gchar* action, GtkUIManagerItemType type, gboolean top);
     * }
     */
    public static void gtk_ui_manager_add_ui(MemorySegment manager, int merge_id, MemorySegment path, MemorySegment name, MemorySegment action, int type, int top) {
        var mh$ = gtk_ui_manager_add_ui$MH();
        try {
            mh$.invokeExact(manager, merge_id, path, name, action, type, top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_remove_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$1976.gtk_ui_manager_remove_ui$MH,"gtk_ui_manager_remove_ui");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_remove_ui(GtkUIManager* manager, guint merge_id);
     * }
     */
    public static void gtk_ui_manager_remove_ui(MemorySegment manager, int merge_id) {
        var mh$ = gtk_ui_manager_remove_ui$MH();
        try {
            mh$.invokeExact(manager, merge_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$1977.gtk_ui_manager_get_ui$MH,"gtk_ui_manager_get_ui");
    }
    /**
     * {@snippet :
     * gchar* gtk_ui_manager_get_ui(GtkUIManager* manager);
     * }
     */
    public static MemorySegment gtk_ui_manager_get_ui(MemorySegment manager) {
        var mh$ = gtk_ui_manager_get_ui$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_ensure_update$MH() {
        return RuntimeHelper.requireNonNull(constants$1977.gtk_ui_manager_ensure_update$MH,"gtk_ui_manager_ensure_update");
    }
    /**
     * {@snippet :
     * void gtk_ui_manager_ensure_update(GtkUIManager* manager);
     * }
     */
    public static void gtk_ui_manager_ensure_update(MemorySegment manager) {
        var mh$ = gtk_ui_manager_ensure_update$MH();
        try {
            mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_new_merge_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1977.gtk_ui_manager_new_merge_id$MH,"gtk_ui_manager_new_merge_id");
    }
    /**
     * {@snippet :
     * guint gtk_ui_manager_new_merge_id(GtkUIManager* manager);
     * }
     */
    public static int gtk_ui_manager_new_merge_id(MemorySegment manager) {
        var mh$ = gtk_ui_manager_new_merge_id$MH();
        try {
            return (int)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbutton_box_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1977.gtk_vbutton_box_get_type$MH,"gtk_vbutton_box_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_vbutton_box_get_type();
     * }
     */
    public static long gtk_vbutton_box_get_type() {
        var mh$ = gtk_vbutton_box_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbutton_box_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1977.gtk_vbutton_box_new$MH,"gtk_vbutton_box_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_vbutton_box_new();
     * }
     */
    public static MemorySegment gtk_vbutton_box_new() {
        var mh$ = gtk_vbutton_box_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbox_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1977.gtk_vbox_get_type$MH,"gtk_vbox_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_vbox_get_type();
     * }
     */
    public static long gtk_vbox_get_type() {
        var mh$ = gtk_vbox_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbox_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1978.gtk_vbox_new$MH,"gtk_vbox_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_vbox_new(gboolean homogeneous, gint spacing);
     * }
     */
    public static MemorySegment gtk_vbox_new(int homogeneous, int spacing) {
        var mh$ = gtk_vbox_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(homogeneous, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vpaned_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1978.gtk_vpaned_get_type$MH,"gtk_vpaned_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_vpaned_get_type();
     * }
     */
    public static long gtk_vpaned_get_type() {
        var mh$ = gtk_vpaned_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vpaned_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1978.gtk_vpaned_new$MH,"gtk_vpaned_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_vpaned_new();
     * }
     */
    public static MemorySegment gtk_vpaned_new() {
        var mh$ = gtk_vpaned_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscale_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1978.gtk_vscale_get_type$MH,"gtk_vscale_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_vscale_get_type();
     * }
     */
    public static long gtk_vscale_get_type() {
        var mh$ = gtk_vscale_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscale_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1978.gtk_vscale_new$MH,"gtk_vscale_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_vscale_new(GtkAdjustment* adjustment);
     * }
     */
    public static MemorySegment gtk_vscale_new(MemorySegment adjustment) {
        var mh$ = gtk_vscale_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscale_new_with_range$MH() {
        return RuntimeHelper.requireNonNull(constants$1978.gtk_vscale_new_with_range$MH,"gtk_vscale_new_with_range");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_vscale_new_with_range(gdouble min, gdouble max, gdouble step);
     * }
     */
    public static MemorySegment gtk_vscale_new_with_range(double min, double max, double step) {
        var mh$ = gtk_vscale_new_with_range$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(min, max, step);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscrollbar_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1979.gtk_vscrollbar_get_type$MH,"gtk_vscrollbar_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_vscrollbar_get_type();
     * }
     */
    public static long gtk_vscrollbar_get_type() {
        var mh$ = gtk_vscrollbar_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscrollbar_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1979.gtk_vscrollbar_new$MH,"gtk_vscrollbar_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_vscrollbar_new(GtkAdjustment* adjustment);
     * }
     */
    public static MemorySegment gtk_vscrollbar_new(MemorySegment adjustment) {
        var mh$ = gtk_vscrollbar_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vseparator_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1979.gtk_vseparator_get_type$MH,"gtk_vseparator_get_type");
    }
    /**
     * {@snippet :
     * GType gtk_vseparator_get_type();
     * }
     */
    public static long gtk_vseparator_get_type() {
        var mh$ = gtk_vseparator_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vseparator_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1979.gtk_vseparator_new$MH,"gtk_vseparator_new");
    }
    /**
     * {@snippet :
     * GtkWidget* gtk_vseparator_new();
     * }
     */
    public static MemorySegment gtk_vseparator_new() {
        var mh$ = gtk_vseparator_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _GtkAccessible* GtkAccessible_autoptr;
     * }
     */
    public static final OfAddress GtkAccessible_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAccessible_listautoptr;
     * }
     */
    public static final OfAddress GtkAccessible_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAccessible_slistautoptr;
     * }
     */
    public static final OfAddress GtkAccessible_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAccessible_queueautoptr;
     * }
     */
    public static final OfAddress GtkAccessible_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkActionBar* GtkActionBar_autoptr;
     * }
     */
    public static final OfAddress GtkActionBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkActionBar_listautoptr;
     * }
     */
    public static final OfAddress GtkActionBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkActionBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkActionBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkActionBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkActionBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkActionable* GtkActionable_autoptr;
     * }
     */
    public static final OfAddress GtkActionable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkActionable_listautoptr;
     * }
     */
    public static final OfAddress GtkActionable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkActionable_slistautoptr;
     * }
     */
    public static final OfAddress GtkActionable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkActionable_queueautoptr;
     * }
     */
    public static final OfAddress GtkActionable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAdjustment* GtkAdjustment_autoptr;
     * }
     */
    public static final OfAddress GtkAdjustment_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAdjustment_listautoptr;
     * }
     */
    public static final OfAddress GtkAdjustment_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAdjustment_slistautoptr;
     * }
     */
    public static final OfAddress GtkAdjustment_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAdjustment_queueautoptr;
     * }
     */
    public static final OfAddress GtkAdjustment_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooser* GtkAppChooser_autoptr;
     * }
     */
    public static final OfAddress GtkAppChooser_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooser_listautoptr;
     * }
     */
    public static final OfAddress GtkAppChooser_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooser_slistautoptr;
     * }
     */
    public static final OfAddress GtkAppChooser_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooser_queueautoptr;
     * }
     */
    public static final OfAddress GtkAppChooser_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooserButton* GtkAppChooserButton_autoptr;
     * }
     */
    public static final OfAddress GtkAppChooserButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooserButton_listautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooserButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooserButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooserDialog* GtkAppChooserDialog_autoptr;
     * }
     */
    public static final OfAddress GtkAppChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooserDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooserDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooserDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAppChooserWidget* GtkAppChooserWidget_autoptr;
     * }
     */
    public static final OfAddress GtkAppChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAppChooserWidget_listautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAppChooserWidget_slistautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAppChooserWidget_queueautoptr;
     * }
     */
    public static final OfAddress GtkAppChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkApplicationWindow* GtkApplicationWindow_autoptr;
     * }
     */
    public static final OfAddress GtkApplicationWindow_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkApplicationWindow_listautoptr;
     * }
     */
    public static final OfAddress GtkApplicationWindow_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkApplicationWindow_slistautoptr;
     * }
     */
    public static final OfAddress GtkApplicationWindow_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkApplicationWindow_queueautoptr;
     * }
     */
    public static final OfAddress GtkApplicationWindow_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAspectFrame* GtkAspectFrame_autoptr;
     * }
     */
    public static final OfAddress GtkAspectFrame_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAspectFrame_listautoptr;
     * }
     */
    public static final OfAddress GtkAspectFrame_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAspectFrame_slistautoptr;
     * }
     */
    public static final OfAddress GtkAspectFrame_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAspectFrame_queueautoptr;
     * }
     */
    public static final OfAddress GtkAspectFrame_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkAssistant* GtkAssistant_autoptr;
     * }
     */
    public static final OfAddress GtkAssistant_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkAssistant_listautoptr;
     * }
     */
    public static final OfAddress GtkAssistant_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkAssistant_slistautoptr;
     * }
     */
    public static final OfAddress GtkAssistant_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkAssistant_queueautoptr;
     * }
     */
    public static final OfAddress GtkAssistant_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkBox* GtkBox_autoptr;
     * }
     */
    public static final OfAddress GtkBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkBox_listautoptr;
     * }
     */
    public static final OfAddress GtkBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkBox_slistautoptr;
     * }
     */
    public static final OfAddress GtkBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkBox_queueautoptr;
     * }
     */
    public static final OfAddress GtkBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkBuildable* GtkBuildable_autoptr;
     * }
     */
    public static final OfAddress GtkBuildable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkBuildable_listautoptr;
     * }
     */
    public static final OfAddress GtkBuildable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkBuildable_slistautoptr;
     * }
     */
    public static final OfAddress GtkBuildable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkBuildable_queueautoptr;
     * }
     */
    public static final OfAddress GtkBuildable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkBuilder* GtkBuilder_autoptr;
     * }
     */
    public static final OfAddress GtkBuilder_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkBuilder_listautoptr;
     * }
     */
    public static final OfAddress GtkBuilder_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkBuilder_slistautoptr;
     * }
     */
    public static final OfAddress GtkBuilder_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkBuilder_queueautoptr;
     * }
     */
    public static final OfAddress GtkBuilder_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkButton* GtkButton_autoptr;
     * }
     */
    public static final OfAddress GtkButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkButton_listautoptr;
     * }
     */
    public static final OfAddress GtkButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkButtonBox* GtkButtonBox_autoptr;
     * }
     */
    public static final OfAddress GtkButtonBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkButtonBox_listautoptr;
     * }
     */
    public static final OfAddress GtkButtonBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkButtonBox_slistautoptr;
     * }
     */
    public static final OfAddress GtkButtonBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkButtonBox_queueautoptr;
     * }
     */
    public static final OfAddress GtkButtonBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCalendar* GtkCalendar_autoptr;
     * }
     */
    public static final OfAddress GtkCalendar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCalendar_listautoptr;
     * }
     */
    public static final OfAddress GtkCalendar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCalendar_slistautoptr;
     * }
     */
    public static final OfAddress GtkCalendar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCalendar_queueautoptr;
     * }
     */
    public static final OfAddress GtkCalendar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellArea* GtkCellArea_autoptr;
     * }
     */
    public static final OfAddress GtkCellArea_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellArea_listautoptr;
     * }
     */
    public static final OfAddress GtkCellArea_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellArea_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellArea_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellArea_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellArea_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellAreaBox* GtkCellAreaBox_autoptr;
     * }
     */
    public static final OfAddress GtkCellAreaBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellAreaBox_listautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellAreaBox_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellAreaBox_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellAreaContext* GtkCellAreaContext_autoptr;
     * }
     */
    public static final OfAddress GtkCellAreaContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellAreaContext_listautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellAreaContext_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellAreaContext_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellAreaContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellEditable* GtkCellEditable_autoptr;
     * }
     */
    public static final OfAddress GtkCellEditable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellEditable_listautoptr;
     * }
     */
    public static final OfAddress GtkCellEditable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellEditable_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellEditable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellEditable_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellEditable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellLayout* GtkCellLayout_autoptr;
     * }
     */
    public static final OfAddress GtkCellLayout_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellLayout_listautoptr;
     * }
     */
    public static final OfAddress GtkCellLayout_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellLayout_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellLayout_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellLayout_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellLayout_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRenderer* GtkCellRenderer_autoptr;
     * }
     */
    public static final OfAddress GtkCellRenderer_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRenderer_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRenderer_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRenderer_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRenderer_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRenderer_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRenderer_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererAccel* GtkCellRendererAccel_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererAccel_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererAccel_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererAccel_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererAccel_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererAccel_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererAccel_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererAccel_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererCombo* GtkCellRendererCombo_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererCombo_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererCombo_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererCombo_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererCombo_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererCombo_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererCombo_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererCombo_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererPixbuf* GtkCellRendererPixbuf_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererPixbuf_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererPixbuf_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererPixbuf_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererPixbuf_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererPixbuf_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererPixbuf_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererPixbuf_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererProgress* GtkCellRendererProgress_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererProgress_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererProgress_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererProgress_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererProgress_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererProgress_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererProgress_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererProgress_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererSpin* GtkCellRendererSpin_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpin_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererSpin_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpin_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererSpin_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpin_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererSpin_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpin_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererSpinner* GtkCellRendererSpinner_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpinner_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererSpinner_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpinner_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererSpinner_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpinner_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererSpinner_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererSpinner_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererText* GtkCellRendererText_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererText_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererText_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererText_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererText_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererText_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererText_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererText_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellRendererToggle* GtkCellRendererToggle_autoptr;
     * }
     */
    public static final OfAddress GtkCellRendererToggle_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellRendererToggle_listautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererToggle_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellRendererToggle_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererToggle_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellRendererToggle_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellRendererToggle_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCellView* GtkCellView_autoptr;
     * }
     */
    public static final OfAddress GtkCellView_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCellView_listautoptr;
     * }
     */
    public static final OfAddress GtkCellView_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCellView_slistautoptr;
     * }
     */
    public static final OfAddress GtkCellView_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCellView_queueautoptr;
     * }
     */
    public static final OfAddress GtkCellView_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCheckButton* GtkCheckButton_autoptr;
     * }
     */
    public static final OfAddress GtkCheckButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCheckButton_listautoptr;
     * }
     */
    public static final OfAddress GtkCheckButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCheckButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkCheckButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCheckButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkCheckButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCheckMenuItem* GtkCheckMenuItem_autoptr;
     * }
     */
    public static final OfAddress GtkCheckMenuItem_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCheckMenuItem_listautoptr;
     * }
     */
    public static final OfAddress GtkCheckMenuItem_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCheckMenuItem_slistautoptr;
     * }
     */
    public static final OfAddress GtkCheckMenuItem_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCheckMenuItem_queueautoptr;
     * }
     */
    public static final OfAddress GtkCheckMenuItem_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkClipboard* GtkClipboard_autoptr;
     * }
     */
    public static final OfAddress GtkClipboard_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkClipboard_listautoptr;
     * }
     */
    public static final OfAddress GtkClipboard_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkClipboard_slistautoptr;
     * }
     */
    public static final OfAddress GtkClipboard_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkClipboard_queueautoptr;
     * }
     */
    public static final OfAddress GtkClipboard_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkColorButton* GtkColorButton_autoptr;
     * }
     */
    public static final OfAddress GtkColorButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorButton_listautoptr;
     * }
     */
    public static final OfAddress GtkColorButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkColorButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkColorButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkColorChooser* GtkColorChooser_autoptr;
     * }
     */
    public static final OfAddress GtkColorChooser_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorChooser_listautoptr;
     * }
     */
    public static final OfAddress GtkColorChooser_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorChooser_slistautoptr;
     * }
     */
    public static final OfAddress GtkColorChooser_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorChooser_queueautoptr;
     * }
     */
    public static final OfAddress GtkColorChooser_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkColorChooserDialog* GtkColorChooserDialog_autoptr;
     * }
     */
    public static final OfAddress GtkColorChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorChooserDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorChooserDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorChooserDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkColorChooserWidget* GtkColorChooserWidget_autoptr;
     * }
     */
    public static final OfAddress GtkColorChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkColorChooserWidget_listautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkColorChooserWidget_slistautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkColorChooserWidget_queueautoptr;
     * }
     */
    public static final OfAddress GtkColorChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkComboBox* GtkComboBox_autoptr;
     * }
     */
    public static final OfAddress GtkComboBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkComboBox_listautoptr;
     * }
     */
    public static final OfAddress GtkComboBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkComboBox_slistautoptr;
     * }
     */
    public static final OfAddress GtkComboBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkComboBox_queueautoptr;
     * }
     */
    public static final OfAddress GtkComboBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkComboBoxText* GtkComboBoxText_autoptr;
     * }
     */
    public static final OfAddress GtkComboBoxText_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkComboBoxText_listautoptr;
     * }
     */
    public static final OfAddress GtkComboBoxText_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkComboBoxText_slistautoptr;
     * }
     */
    public static final OfAddress GtkComboBoxText_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkComboBoxText_queueautoptr;
     * }
     */
    public static final OfAddress GtkComboBoxText_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkCssProvider* GtkCssProvider_autoptr;
     * }
     */
    public static final OfAddress GtkCssProvider_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkCssProvider_listautoptr;
     * }
     */
    public static final OfAddress GtkCssProvider_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkCssProvider_slistautoptr;
     * }
     */
    public static final OfAddress GtkCssProvider_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkCssProvider_queueautoptr;
     * }
     */
    public static final OfAddress GtkCssProvider_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkDrawingArea* GtkDrawingArea_autoptr;
     * }
     */
    public static final OfAddress GtkDrawingArea_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkDrawingArea_listautoptr;
     * }
     */
    public static final OfAddress GtkDrawingArea_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkDrawingArea_slistautoptr;
     * }
     */
    public static final OfAddress GtkDrawingArea_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkDrawingArea_queueautoptr;
     * }
     */
    public static final OfAddress GtkDrawingArea_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkEditable* GtkEditable_autoptr;
     * }
     */
    public static final OfAddress GtkEditable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEditable_listautoptr;
     * }
     */
    public static final OfAddress GtkEditable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEditable_slistautoptr;
     * }
     */
    public static final OfAddress GtkEditable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEditable_queueautoptr;
     * }
     */
    public static final OfAddress GtkEditable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkEntry* GtkEntry_autoptr;
     * }
     */
    public static final OfAddress GtkEntry_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEntry_listautoptr;
     * }
     */
    public static final OfAddress GtkEntry_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEntry_slistautoptr;
     * }
     */
    public static final OfAddress GtkEntry_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEntry_queueautoptr;
     * }
     */
    public static final OfAddress GtkEntry_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkEntryBuffer* GtkEntryBuffer_autoptr;
     * }
     */
    public static final OfAddress GtkEntryBuffer_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEntryBuffer_listautoptr;
     * }
     */
    public static final OfAddress GtkEntryBuffer_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEntryBuffer_slistautoptr;
     * }
     */
    public static final OfAddress GtkEntryBuffer_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEntryBuffer_queueautoptr;
     * }
     */
    public static final OfAddress GtkEntryBuffer_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkEntryCompletion* GtkEntryCompletion_autoptr;
     * }
     */
    public static final OfAddress GtkEntryCompletion_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEntryCompletion_listautoptr;
     * }
     */
    public static final OfAddress GtkEntryCompletion_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEntryCompletion_slistautoptr;
     * }
     */
    public static final OfAddress GtkEntryCompletion_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEntryCompletion_queueautoptr;
     * }
     */
    public static final OfAddress GtkEntryCompletion_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkEventBox* GtkEventBox_autoptr;
     * }
     */
    public static final OfAddress GtkEventBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEventBox_listautoptr;
     * }
     */
    public static final OfAddress GtkEventBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEventBox_slistautoptr;
     * }
     */
    public static final OfAddress GtkEventBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEventBox_queueautoptr;
     * }
     */
    public static final OfAddress GtkEventBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkEventController* GtkEventController_autoptr;
     * }
     */
    public static final OfAddress GtkEventController_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkEventController_listautoptr;
     * }
     */
    public static final OfAddress GtkEventController_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkEventController_slistautoptr;
     * }
     */
    public static final OfAddress GtkEventController_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkEventController_queueautoptr;
     * }
     */
    public static final OfAddress GtkEventController_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkExpander* GtkExpander_autoptr;
     * }
     */
    public static final OfAddress GtkExpander_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkExpander_listautoptr;
     * }
     */
    public static final OfAddress GtkExpander_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkExpander_slistautoptr;
     * }
     */
    public static final OfAddress GtkExpander_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkExpander_queueautoptr;
     * }
     */
    public static final OfAddress GtkExpander_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFileChooserButton* GtkFileChooserButton_autoptr;
     * }
     */
    public static final OfAddress GtkFileChooserButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileChooserButton_listautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileChooserButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileChooserButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFileChooserDialog* GtkFileChooserDialog_autoptr;
     * }
     */
    public static final OfAddress GtkFileChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileChooserDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileChooserDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileChooserDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFileChooserWidget* GtkFileChooserWidget_autoptr;
     * }
     */
    public static final OfAddress GtkFileChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileChooserWidget_listautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileChooserWidget_slistautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileChooserWidget_queueautoptr;
     * }
     */
    public static final OfAddress GtkFileChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFileFilter* GtkFileFilter_autoptr;
     * }
     */
    public static final OfAddress GtkFileFilter_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFileFilter_listautoptr;
     * }
     */
    public static final OfAddress GtkFileFilter_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFileFilter_slistautoptr;
     * }
     */
    public static final OfAddress GtkFileFilter_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFileFilter_queueautoptr;
     * }
     */
    public static final OfAddress GtkFileFilter_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFixed* GtkFixed_autoptr;
     * }
     */
    public static final OfAddress GtkFixed_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFixed_listautoptr;
     * }
     */
    public static final OfAddress GtkFixed_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFixed_slistautoptr;
     * }
     */
    public static final OfAddress GtkFixed_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFixed_queueautoptr;
     * }
     */
    public static final OfAddress GtkFixed_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFlowBox* GtkFlowBox_autoptr;
     * }
     */
    public static final OfAddress GtkFlowBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFlowBox_listautoptr;
     * }
     */
    public static final OfAddress GtkFlowBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFlowBox_slistautoptr;
     * }
     */
    public static final OfAddress GtkFlowBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFlowBox_queueautoptr;
     * }
     */
    public static final OfAddress GtkFlowBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFlowBoxChild* GtkFlowBoxChild_autoptr;
     * }
     */
    public static final OfAddress GtkFlowBoxChild_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFlowBoxChild_listautoptr;
     * }
     */
    public static final OfAddress GtkFlowBoxChild_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFlowBoxChild_slistautoptr;
     * }
     */
    public static final OfAddress GtkFlowBoxChild_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFlowBoxChild_queueautoptr;
     * }
     */
    public static final OfAddress GtkFlowBoxChild_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFontButton* GtkFontButton_autoptr;
     * }
     */
    public static final OfAddress GtkFontButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontButton_listautoptr;
     * }
     */
    public static final OfAddress GtkFontButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkFontButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkFontButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFontChooser* GtkFontChooser_autoptr;
     * }
     */
    public static final OfAddress GtkFontChooser_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontChooser_listautoptr;
     * }
     */
    public static final OfAddress GtkFontChooser_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontChooser_slistautoptr;
     * }
     */
    public static final OfAddress GtkFontChooser_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontChooser_queueautoptr;
     * }
     */
    public static final OfAddress GtkFontChooser_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFontChooserDialog* GtkFontChooserDialog_autoptr;
     * }
     */
    public static final OfAddress GtkFontChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontChooserDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontChooserDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontChooserDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFontChooserWidget* GtkFontChooserWidget_autoptr;
     * }
     */
    public static final OfAddress GtkFontChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFontChooserWidget_listautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFontChooserWidget_slistautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFontChooserWidget_queueautoptr;
     * }
     */
    public static final OfAddress GtkFontChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkFrame* GtkFrame_autoptr;
     * }
     */
    public static final OfAddress GtkFrame_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkFrame_listautoptr;
     * }
     */
    public static final OfAddress GtkFrame_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkFrame_slistautoptr;
     * }
     */
    public static final OfAddress GtkFrame_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkFrame_queueautoptr;
     * }
     */
    public static final OfAddress GtkFrame_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGLArea* GtkGLArea_autoptr;
     * }
     */
    public static final OfAddress GtkGLArea_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGLArea_listautoptr;
     * }
     */
    public static final OfAddress GtkGLArea_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGLArea_slistautoptr;
     * }
     */
    public static final OfAddress GtkGLArea_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGLArea_queueautoptr;
     * }
     */
    public static final OfAddress GtkGLArea_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGesture* GtkGesture_autoptr;
     * }
     */
    public static final OfAddress GtkGesture_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGesture_listautoptr;
     * }
     */
    public static final OfAddress GtkGesture_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGesture_slistautoptr;
     * }
     */
    public static final OfAddress GtkGesture_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGesture_queueautoptr;
     * }
     */
    public static final OfAddress GtkGesture_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureDrag* GtkGestureDrag_autoptr;
     * }
     */
    public static final OfAddress GtkGestureDrag_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureDrag_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureDrag_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureDrag_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureDrag_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureDrag_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureDrag_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureLongPress* GtkGestureLongPress_autoptr;
     * }
     */
    public static final OfAddress GtkGestureLongPress_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureLongPress_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureLongPress_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureLongPress_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureLongPress_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureLongPress_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureLongPress_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureMultiPress* GtkGestureMultiPress_autoptr;
     * }
     */
    public static final OfAddress GtkGestureMultiPress_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureMultiPress_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureMultiPress_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureMultiPress_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureMultiPress_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureMultiPress_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureMultiPress_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGesturePan* GtkGesturePan_autoptr;
     * }
     */
    public static final OfAddress GtkGesturePan_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGesturePan_listautoptr;
     * }
     */
    public static final OfAddress GtkGesturePan_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGesturePan_slistautoptr;
     * }
     */
    public static final OfAddress GtkGesturePan_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGesturePan_queueautoptr;
     * }
     */
    public static final OfAddress GtkGesturePan_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureRotate* GtkGestureRotate_autoptr;
     * }
     */
    public static final OfAddress GtkGestureRotate_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureRotate_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureRotate_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureRotate_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureRotate_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureRotate_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureRotate_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureSingle* GtkGestureSingle_autoptr;
     * }
     */
    public static final OfAddress GtkGestureSingle_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureSingle_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureSingle_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureSingle_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureSingle_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureSingle_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureSingle_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureSwipe* GtkGestureSwipe_autoptr;
     * }
     */
    public static final OfAddress GtkGestureSwipe_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureSwipe_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureSwipe_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureSwipe_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureSwipe_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureSwipe_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureSwipe_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGestureZoom* GtkGestureZoom_autoptr;
     * }
     */
    public static final OfAddress GtkGestureZoom_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGestureZoom_listautoptr;
     * }
     */
    public static final OfAddress GtkGestureZoom_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGestureZoom_slistautoptr;
     * }
     */
    public static final OfAddress GtkGestureZoom_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGestureZoom_queueautoptr;
     * }
     */
    public static final OfAddress GtkGestureZoom_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkGrid* GtkGrid_autoptr;
     * }
     */
    public static final OfAddress GtkGrid_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkGrid_listautoptr;
     * }
     */
    public static final OfAddress GtkGrid_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkGrid_slistautoptr;
     * }
     */
    public static final OfAddress GtkGrid_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkGrid_queueautoptr;
     * }
     */
    public static final OfAddress GtkGrid_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkHeaderBar* GtkHeaderBar_autoptr;
     * }
     */
    public static final OfAddress GtkHeaderBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkHeaderBar_listautoptr;
     * }
     */
    public static final OfAddress GtkHeaderBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkHeaderBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkHeaderBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkHeaderBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkHeaderBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIMContext* GtkIMContext_autoptr;
     * }
     */
    public static final OfAddress GtkIMContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIMContext_listautoptr;
     * }
     */
    public static final OfAddress GtkIMContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIMContext_slistautoptr;
     * }
     */
    public static final OfAddress GtkIMContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIMContext_queueautoptr;
     * }
     */
    public static final OfAddress GtkIMContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIMContextSimple* GtkIMContextSimple_autoptr;
     * }
     */
    public static final OfAddress GtkIMContextSimple_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIMContextSimple_listautoptr;
     * }
     */
    public static final OfAddress GtkIMContextSimple_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIMContextSimple_slistautoptr;
     * }
     */
    public static final OfAddress GtkIMContextSimple_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIMContextSimple_queueautoptr;
     * }
     */
    public static final OfAddress GtkIMContextSimple_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIMMulticontext* GtkIMMulticontext_autoptr;
     * }
     */
    public static final OfAddress GtkIMMulticontext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIMMulticontext_listautoptr;
     * }
     */
    public static final OfAddress GtkIMMulticontext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIMMulticontext_slistautoptr;
     * }
     */
    public static final OfAddress GtkIMMulticontext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIMMulticontext_queueautoptr;
     * }
     */
    public static final OfAddress GtkIMMulticontext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIconInfo* GtkIconInfo_autoptr;
     * }
     */
    public static final OfAddress GtkIconInfo_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIconInfo_listautoptr;
     * }
     */
    public static final OfAddress GtkIconInfo_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIconInfo_slistautoptr;
     * }
     */
    public static final OfAddress GtkIconInfo_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIconInfo_queueautoptr;
     * }
     */
    public static final OfAddress GtkIconInfo_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIconTheme* GtkIconTheme_autoptr;
     * }
     */
    public static final OfAddress GtkIconTheme_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIconTheme_listautoptr;
     * }
     */
    public static final OfAddress GtkIconTheme_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIconTheme_slistautoptr;
     * }
     */
    public static final OfAddress GtkIconTheme_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIconTheme_queueautoptr;
     * }
     */
    public static final OfAddress GtkIconTheme_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkIconView* GtkIconView_autoptr;
     * }
     */
    public static final OfAddress GtkIconView_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkIconView_listautoptr;
     * }
     */
    public static final OfAddress GtkIconView_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkIconView_slistautoptr;
     * }
     */
    public static final OfAddress GtkIconView_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkIconView_queueautoptr;
     * }
     */
    public static final OfAddress GtkIconView_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkImage* GtkImage_autoptr;
     * }
     */
    public static final OfAddress GtkImage_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkImage_listautoptr;
     * }
     */
    public static final OfAddress GtkImage_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkImage_slistautoptr;
     * }
     */
    public static final OfAddress GtkImage_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkImage_queueautoptr;
     * }
     */
    public static final OfAddress GtkImage_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkInfoBar* GtkInfoBar_autoptr;
     * }
     */
    public static final OfAddress GtkInfoBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkInfoBar_listautoptr;
     * }
     */
    public static final OfAddress GtkInfoBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkInfoBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkInfoBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkInfoBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkInfoBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkInvisible* GtkInvisible_autoptr;
     * }
     */
    public static final OfAddress GtkInvisible_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkInvisible_listautoptr;
     * }
     */
    public static final OfAddress GtkInvisible_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkInvisible_slistautoptr;
     * }
     */
    public static final OfAddress GtkInvisible_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkInvisible_queueautoptr;
     * }
     */
    public static final OfAddress GtkInvisible_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkLayout* GtkLayout_autoptr;
     * }
     */
    public static final OfAddress GtkLayout_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLayout_listautoptr;
     * }
     */
    public static final OfAddress GtkLayout_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLayout_slistautoptr;
     * }
     */
    public static final OfAddress GtkLayout_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLayout_queueautoptr;
     * }
     */
    public static final OfAddress GtkLayout_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkLevelBar* GtkLevelBar_autoptr;
     * }
     */
    public static final OfAddress GtkLevelBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLevelBar_listautoptr;
     * }
     */
    public static final OfAddress GtkLevelBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLevelBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkLevelBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLevelBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkLevelBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkLinkButton* GtkLinkButton_autoptr;
     * }
     */
    public static final OfAddress GtkLinkButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLinkButton_listautoptr;
     * }
     */
    public static final OfAddress GtkLinkButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLinkButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkLinkButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLinkButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkLinkButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkListStore* GtkListStore_autoptr;
     * }
     */
    public static final OfAddress GtkListStore_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkListStore_listautoptr;
     * }
     */
    public static final OfAddress GtkListStore_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkListStore_slistautoptr;
     * }
     */
    public static final OfAddress GtkListStore_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkListStore_queueautoptr;
     * }
     */
    public static final OfAddress GtkListStore_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkLockButton* GtkLockButton_autoptr;
     * }
     */
    public static final OfAddress GtkLockButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkLockButton_listautoptr;
     * }
     */
    public static final OfAddress GtkLockButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkLockButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkLockButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkLockButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkLockButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkMenuBar* GtkMenuBar_autoptr;
     * }
     */
    public static final OfAddress GtkMenuBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMenuBar_listautoptr;
     * }
     */
    public static final OfAddress GtkMenuBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMenuBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkMenuBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMenuBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkMenuBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkMenuButton* GtkMenuButton_autoptr;
     * }
     */
    public static final OfAddress GtkMenuButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMenuButton_listautoptr;
     * }
     */
    public static final OfAddress GtkMenuButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMenuButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkMenuButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMenuButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkMenuButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkMenuItem* GtkMenuItem_autoptr;
     * }
     */
    public static final OfAddress GtkMenuItem_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMenuItem_listautoptr;
     * }
     */
    public static final OfAddress GtkMenuItem_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMenuItem_slistautoptr;
     * }
     */
    public static final OfAddress GtkMenuItem_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMenuItem_queueautoptr;
     * }
     */
    public static final OfAddress GtkMenuItem_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkMenuToolButton* GtkMenuToolButton_autoptr;
     * }
     */
    public static final OfAddress GtkMenuToolButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMenuToolButton_listautoptr;
     * }
     */
    public static final OfAddress GtkMenuToolButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMenuToolButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkMenuToolButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMenuToolButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkMenuToolButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkMessageDialog* GtkMessageDialog_autoptr;
     * }
     */
    public static final OfAddress GtkMessageDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMessageDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkMessageDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMessageDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkMessageDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMessageDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkMessageDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkMountOperation* GtkMountOperation_autoptr;
     * }
     */
    public static final OfAddress GtkMountOperation_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkMountOperation_listautoptr;
     * }
     */
    public static final OfAddress GtkMountOperation_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkMountOperation_slistautoptr;
     * }
     */
    public static final OfAddress GtkMountOperation_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkMountOperation_queueautoptr;
     * }
     */
    public static final OfAddress GtkMountOperation_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkNotebook* GtkNotebook_autoptr;
     * }
     */
    public static final OfAddress GtkNotebook_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkNotebook_listautoptr;
     * }
     */
    public static final OfAddress GtkNotebook_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkNotebook_slistautoptr;
     * }
     */
    public static final OfAddress GtkNotebook_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkNotebook_queueautoptr;
     * }
     */
    public static final OfAddress GtkNotebook_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkOffscreenWindow* GtkOffscreenWindow_autoptr;
     * }
     */
    public static final OfAddress GtkOffscreenWindow_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkOffscreenWindow_listautoptr;
     * }
     */
    public static final OfAddress GtkOffscreenWindow_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkOffscreenWindow_slistautoptr;
     * }
     */
    public static final OfAddress GtkOffscreenWindow_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkOffscreenWindow_queueautoptr;
     * }
     */
    public static final OfAddress GtkOffscreenWindow_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkOrientable* GtkOrientable_autoptr;
     * }
     */
    public static final OfAddress GtkOrientable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkOrientable_listautoptr;
     * }
     */
    public static final OfAddress GtkOrientable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkOrientable_slistautoptr;
     * }
     */
    public static final OfAddress GtkOrientable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkOrientable_queueautoptr;
     * }
     */
    public static final OfAddress GtkOrientable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkOverlay* GtkOverlay_autoptr;
     * }
     */
    public static final OfAddress GtkOverlay_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkOverlay_listautoptr;
     * }
     */
    public static final OfAddress GtkOverlay_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkOverlay_slistautoptr;
     * }
     */
    public static final OfAddress GtkOverlay_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkOverlay_queueautoptr;
     * }
     */
    public static final OfAddress GtkOverlay_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPageSetup* GtkPageSetup_autoptr;
     * }
     */
    public static final OfAddress GtkPageSetup_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPageSetup_listautoptr;
     * }
     */
    public static final OfAddress GtkPageSetup_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPageSetup_slistautoptr;
     * }
     */
    public static final OfAddress GtkPageSetup_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPageSetup_queueautoptr;
     * }
     */
    public static final OfAddress GtkPageSetup_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPaned* GtkPaned_autoptr;
     * }
     */
    public static final OfAddress GtkPaned_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPaned_listautoptr;
     * }
     */
    public static final OfAddress GtkPaned_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPaned_slistautoptr;
     * }
     */
    public static final OfAddress GtkPaned_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPaned_queueautoptr;
     * }
     */
    public static final OfAddress GtkPaned_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPlacesSidebar* GtkPlacesSidebar_autoptr;
     * }
     */
    public static final OfAddress GtkPlacesSidebar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPlacesSidebar_listautoptr;
     * }
     */
    public static final OfAddress GtkPlacesSidebar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPlacesSidebar_slistautoptr;
     * }
     */
    public static final OfAddress GtkPlacesSidebar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPlacesSidebar_queueautoptr;
     * }
     */
    public static final OfAddress GtkPlacesSidebar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPopover* GtkPopover_autoptr;
     * }
     */
    public static final OfAddress GtkPopover_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPopover_listautoptr;
     * }
     */
    public static final OfAddress GtkPopover_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPopover_slistautoptr;
     * }
     */
    public static final OfAddress GtkPopover_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPopover_queueautoptr;
     * }
     */
    public static final OfAddress GtkPopover_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPopoverMenu* GtkPopoverMenu_autoptr;
     * }
     */
    public static final OfAddress GtkPopoverMenu_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPopoverMenu_listautoptr;
     * }
     */
    public static final OfAddress GtkPopoverMenu_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPopoverMenu_slistautoptr;
     * }
     */
    public static final OfAddress GtkPopoverMenu_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPopoverMenu_queueautoptr;
     * }
     */
    public static final OfAddress GtkPopoverMenu_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPrintContext* GtkPrintContext_autoptr;
     * }
     */
    public static final OfAddress GtkPrintContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintContext_listautoptr;
     * }
     */
    public static final OfAddress GtkPrintContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintContext_slistautoptr;
     * }
     */
    public static final OfAddress GtkPrintContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintContext_queueautoptr;
     * }
     */
    public static final OfAddress GtkPrintContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPrintOperation* GtkPrintOperation_autoptr;
     * }
     */
    public static final OfAddress GtkPrintOperation_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintOperation_listautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperation_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintOperation_slistautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperation_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintOperation_queueautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperation_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPrintOperationPreview* GtkPrintOperationPreview_autoptr;
     * }
     */
    public static final OfAddress GtkPrintOperationPreview_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintOperationPreview_listautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperationPreview_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintOperationPreview_slistautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperationPreview_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintOperationPreview_queueautoptr;
     * }
     */
    public static final OfAddress GtkPrintOperationPreview_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkPrintSettings* GtkPrintSettings_autoptr;
     * }
     */
    public static final OfAddress GtkPrintSettings_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkPrintSettings_listautoptr;
     * }
     */
    public static final OfAddress GtkPrintSettings_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkPrintSettings_slistautoptr;
     * }
     */
    public static final OfAddress GtkPrintSettings_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkPrintSettings_queueautoptr;
     * }
     */
    public static final OfAddress GtkPrintSettings_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkProgressBar* GtkProgressBar_autoptr;
     * }
     */
    public static final OfAddress GtkProgressBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkProgressBar_listautoptr;
     * }
     */
    public static final OfAddress GtkProgressBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkProgressBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkProgressBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkProgressBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkProgressBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRadioButton* GtkRadioButton_autoptr;
     * }
     */
    public static final OfAddress GtkRadioButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRadioButton_listautoptr;
     * }
     */
    public static final OfAddress GtkRadioButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRadioButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkRadioButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRadioButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkRadioButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRadioMenuItem* GtkRadioMenuItem_autoptr;
     * }
     */
    public static final OfAddress GtkRadioMenuItem_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRadioMenuItem_listautoptr;
     * }
     */
    public static final OfAddress GtkRadioMenuItem_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRadioMenuItem_slistautoptr;
     * }
     */
    public static final OfAddress GtkRadioMenuItem_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRadioMenuItem_queueautoptr;
     * }
     */
    public static final OfAddress GtkRadioMenuItem_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRadioToolButton* GtkRadioToolButton_autoptr;
     * }
     */
    public static final OfAddress GtkRadioToolButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRadioToolButton_listautoptr;
     * }
     */
    public static final OfAddress GtkRadioToolButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRadioToolButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkRadioToolButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRadioToolButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkRadioToolButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRange* GtkRange_autoptr;
     * }
     */
    public static final OfAddress GtkRange_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRange_listautoptr;
     * }
     */
    public static final OfAddress GtkRange_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRange_slistautoptr;
     * }
     */
    public static final OfAddress GtkRange_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRange_queueautoptr;
     * }
     */
    public static final OfAddress GtkRange_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRcStyle* GtkRcStyle_autoptr;
     * }
     */
    public static final OfAddress GtkRcStyle_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRcStyle_listautoptr;
     * }
     */
    public static final OfAddress GtkRcStyle_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRcStyle_slistautoptr;
     * }
     */
    public static final OfAddress GtkRcStyle_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRcStyle_queueautoptr;
     * }
     */
    public static final OfAddress GtkRcStyle_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRecentChooser* GtkRecentChooser_autoptr;
     * }
     */
    public static final OfAddress GtkRecentChooser_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRecentChooser_listautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooser_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRecentChooser_slistautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooser_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRecentChooser_queueautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooser_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRecentChooserDialog* GtkRecentChooserDialog_autoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRecentChooserDialog_listautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRecentChooserDialog_slistautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRecentChooserDialog_queueautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRecentChooserMenu* GtkRecentChooserMenu_autoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserMenu_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRecentChooserMenu_listautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserMenu_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRecentChooserMenu_slistautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserMenu_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRecentChooserMenu_queueautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserMenu_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRecentChooserWidget* GtkRecentChooserWidget_autoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRecentChooserWidget_listautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRecentChooserWidget_slistautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRecentChooserWidget_queueautoptr;
     * }
     */
    public static final OfAddress GtkRecentChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRecentFilter* GtkRecentFilter_autoptr;
     * }
     */
    public static final OfAddress GtkRecentFilter_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRecentFilter_listautoptr;
     * }
     */
    public static final OfAddress GtkRecentFilter_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRecentFilter_slistautoptr;
     * }
     */
    public static final OfAddress GtkRecentFilter_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRecentFilter_queueautoptr;
     * }
     */
    public static final OfAddress GtkRecentFilter_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRecentManager* GtkRecentManager_autoptr;
     * }
     */
    public static final OfAddress GtkRecentManager_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRecentManager_listautoptr;
     * }
     */
    public static final OfAddress GtkRecentManager_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRecentManager_slistautoptr;
     * }
     */
    public static final OfAddress GtkRecentManager_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRecentManager_queueautoptr;
     * }
     */
    public static final OfAddress GtkRecentManager_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkRevealer* GtkRevealer_autoptr;
     * }
     */
    public static final OfAddress GtkRevealer_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkRevealer_listautoptr;
     * }
     */
    public static final OfAddress GtkRevealer_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkRevealer_slistautoptr;
     * }
     */
    public static final OfAddress GtkRevealer_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkRevealer_queueautoptr;
     * }
     */
    public static final OfAddress GtkRevealer_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkScale* GtkScale_autoptr;
     * }
     */
    public static final OfAddress GtkScale_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkScale_listautoptr;
     * }
     */
    public static final OfAddress GtkScale_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkScale_slistautoptr;
     * }
     */
    public static final OfAddress GtkScale_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkScale_queueautoptr;
     * }
     */
    public static final OfAddress GtkScale_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkScaleButton* GtkScaleButton_autoptr;
     * }
     */
    public static final OfAddress GtkScaleButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkScaleButton_listautoptr;
     * }
     */
    public static final OfAddress GtkScaleButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkScaleButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkScaleButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkScaleButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkScaleButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkScrollable* GtkScrollable_autoptr;
     * }
     */
    public static final OfAddress GtkScrollable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkScrollable_listautoptr;
     * }
     */
    public static final OfAddress GtkScrollable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkScrollable_slistautoptr;
     * }
     */
    public static final OfAddress GtkScrollable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkScrollable_queueautoptr;
     * }
     */
    public static final OfAddress GtkScrollable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkScrollbar* GtkScrollbar_autoptr;
     * }
     */
    public static final OfAddress GtkScrollbar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkScrollbar_listautoptr;
     * }
     */
    public static final OfAddress GtkScrollbar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkScrollbar_slistautoptr;
     * }
     */
    public static final OfAddress GtkScrollbar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkScrollbar_queueautoptr;
     * }
     */
    public static final OfAddress GtkScrollbar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkScrolledWindow* GtkScrolledWindow_autoptr;
     * }
     */
    public static final OfAddress GtkScrolledWindow_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkScrolledWindow_listautoptr;
     * }
     */
    public static final OfAddress GtkScrolledWindow_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkScrolledWindow_slistautoptr;
     * }
     */
    public static final OfAddress GtkScrolledWindow_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkScrolledWindow_queueautoptr;
     * }
     */
    public static final OfAddress GtkScrolledWindow_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSearchBar* GtkSearchBar_autoptr;
     * }
     */
    public static final OfAddress GtkSearchBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSearchBar_listautoptr;
     * }
     */
    public static final OfAddress GtkSearchBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSearchBar_slistautoptr;
     * }
     */
    public static final OfAddress GtkSearchBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSearchBar_queueautoptr;
     * }
     */
    public static final OfAddress GtkSearchBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSearchEntry* GtkSearchEntry_autoptr;
     * }
     */
    public static final OfAddress GtkSearchEntry_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSearchEntry_listautoptr;
     * }
     */
    public static final OfAddress GtkSearchEntry_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSearchEntry_slistautoptr;
     * }
     */
    public static final OfAddress GtkSearchEntry_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSearchEntry_queueautoptr;
     * }
     */
    public static final OfAddress GtkSearchEntry_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSeparator* GtkSeparator_autoptr;
     * }
     */
    public static final OfAddress GtkSeparator_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSeparator_listautoptr;
     * }
     */
    public static final OfAddress GtkSeparator_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSeparator_slistautoptr;
     * }
     */
    public static final OfAddress GtkSeparator_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSeparator_queueautoptr;
     * }
     */
    public static final OfAddress GtkSeparator_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSeparatorMenuItem* GtkSeparatorMenuItem_autoptr;
     * }
     */
    public static final OfAddress GtkSeparatorMenuItem_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSeparatorMenuItem_listautoptr;
     * }
     */
    public static final OfAddress GtkSeparatorMenuItem_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSeparatorMenuItem_slistautoptr;
     * }
     */
    public static final OfAddress GtkSeparatorMenuItem_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSeparatorMenuItem_queueautoptr;
     * }
     */
    public static final OfAddress GtkSeparatorMenuItem_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSeparatorToolItem* GtkSeparatorToolItem_autoptr;
     * }
     */
    public static final OfAddress GtkSeparatorToolItem_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSeparatorToolItem_listautoptr;
     * }
     */
    public static final OfAddress GtkSeparatorToolItem_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSeparatorToolItem_slistautoptr;
     * }
     */
    public static final OfAddress GtkSeparatorToolItem_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSeparatorToolItem_queueautoptr;
     * }
     */
    public static final OfAddress GtkSeparatorToolItem_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSettings* GtkSettings_autoptr;
     * }
     */
    public static final OfAddress GtkSettings_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSettings_listautoptr;
     * }
     */
    public static final OfAddress GtkSettings_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSettings_slistautoptr;
     * }
     */
    public static final OfAddress GtkSettings_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSettings_queueautoptr;
     * }
     */
    public static final OfAddress GtkSettings_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStackSidebar* GtkStackSidebar_autoptr;
     * }
     */
    public static final OfAddress GtkStackSidebar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStackSidebar_listautoptr;
     * }
     */
    public static final OfAddress GtkStackSidebar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStackSidebar_slistautoptr;
     * }
     */
    public static final OfAddress GtkStackSidebar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStackSidebar_queueautoptr;
     * }
     */
    public static final OfAddress GtkStackSidebar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSizeGroup* GtkSizeGroup_autoptr;
     * }
     */
    public static final OfAddress GtkSizeGroup_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSizeGroup_listautoptr;
     * }
     */
    public static final OfAddress GtkSizeGroup_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSizeGroup_slistautoptr;
     * }
     */
    public static final OfAddress GtkSizeGroup_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSizeGroup_queueautoptr;
     * }
     */
    public static final OfAddress GtkSizeGroup_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSpinButton* GtkSpinButton_autoptr;
     * }
     */
    public static final OfAddress GtkSpinButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSpinButton_listautoptr;
     * }
     */
    public static final OfAddress GtkSpinButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSpinButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkSpinButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSpinButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkSpinButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSpinner* GtkSpinner_autoptr;
     * }
     */
    public static final OfAddress GtkSpinner_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSpinner_listautoptr;
     * }
     */
    public static final OfAddress GtkSpinner_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSpinner_slistautoptr;
     * }
     */
    public static final OfAddress GtkSpinner_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSpinner_queueautoptr;
     * }
     */
    public static final OfAddress GtkSpinner_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStack* GtkStack_autoptr;
     * }
     */
    public static final OfAddress GtkStack_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStack_listautoptr;
     * }
     */
    public static final OfAddress GtkStack_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStack_slistautoptr;
     * }
     */
    public static final OfAddress GtkStack_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStack_queueautoptr;
     * }
     */
    public static final OfAddress GtkStack_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStackSwitcher* GtkStackSwitcher_autoptr;
     * }
     */
    public static final OfAddress GtkStackSwitcher_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStackSwitcher_listautoptr;
     * }
     */
    public static final OfAddress GtkStackSwitcher_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStackSwitcher_slistautoptr;
     * }
     */
    public static final OfAddress GtkStackSwitcher_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStackSwitcher_queueautoptr;
     * }
     */
    public static final OfAddress GtkStackSwitcher_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStatusbar* GtkStatusbar_autoptr;
     * }
     */
    public static final OfAddress GtkStatusbar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStatusbar_listautoptr;
     * }
     */
    public static final OfAddress GtkStatusbar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStatusbar_slistautoptr;
     * }
     */
    public static final OfAddress GtkStatusbar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStatusbar_queueautoptr;
     * }
     */
    public static final OfAddress GtkStatusbar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStyle* GtkStyle_autoptr;
     * }
     */
    public static final OfAddress GtkStyle_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStyle_listautoptr;
     * }
     */
    public static final OfAddress GtkStyle_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStyle_slistautoptr;
     * }
     */
    public static final OfAddress GtkStyle_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStyle_queueautoptr;
     * }
     */
    public static final OfAddress GtkStyle_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStyleContext* GtkStyleContext_autoptr;
     * }
     */
    public static final OfAddress GtkStyleContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStyleContext_listautoptr;
     * }
     */
    public static final OfAddress GtkStyleContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStyleContext_slistautoptr;
     * }
     */
    public static final OfAddress GtkStyleContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStyleContext_queueautoptr;
     * }
     */
    public static final OfAddress GtkStyleContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStyleProperties* GtkStyleProperties_autoptr;
     * }
     */
    public static final OfAddress GtkStyleProperties_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStyleProperties_listautoptr;
     * }
     */
    public static final OfAddress GtkStyleProperties_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStyleProperties_slistautoptr;
     * }
     */
    public static final OfAddress GtkStyleProperties_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStyleProperties_queueautoptr;
     * }
     */
    public static final OfAddress GtkStyleProperties_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkStyleProvider* GtkStyleProvider_autoptr;
     * }
     */
    public static final OfAddress GtkStyleProvider_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkStyleProvider_listautoptr;
     * }
     */
    public static final OfAddress GtkStyleProvider_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkStyleProvider_slistautoptr;
     * }
     */
    public static final OfAddress GtkStyleProvider_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkStyleProvider_queueautoptr;
     * }
     */
    public static final OfAddress GtkStyleProvider_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkSwitch* GtkSwitch_autoptr;
     * }
     */
    public static final OfAddress GtkSwitch_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkSwitch_listautoptr;
     * }
     */
    public static final OfAddress GtkSwitch_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkSwitch_slistautoptr;
     * }
     */
    public static final OfAddress GtkSwitch_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkSwitch_queueautoptr;
     * }
     */
    public static final OfAddress GtkSwitch_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextBuffer* GtkTextBuffer_autoptr;
     * }
     */
    public static final OfAddress GtkTextBuffer_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextBuffer_listautoptr;
     * }
     */
    public static final OfAddress GtkTextBuffer_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextBuffer_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextBuffer_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextBuffer_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextBuffer_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextChildAnchor* GtkTextChildAnchor_autoptr;
     * }
     */
    public static final OfAddress GtkTextChildAnchor_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextChildAnchor_listautoptr;
     * }
     */
    public static final OfAddress GtkTextChildAnchor_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextChildAnchor_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextChildAnchor_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextChildAnchor_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextChildAnchor_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextMark* GtkTextMark_autoptr;
     * }
     */
    public static final OfAddress GtkTextMark_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextMark_listautoptr;
     * }
     */
    public static final OfAddress GtkTextMark_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextMark_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextMark_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextMark_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextMark_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextTag* GtkTextTag_autoptr;
     * }
     */
    public static final OfAddress GtkTextTag_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextTag_listautoptr;
     * }
     */
    public static final OfAddress GtkTextTag_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextTag_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextTag_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextTag_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextTag_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextTagTable* GtkTextTagTable_autoptr;
     * }
     */
    public static final OfAddress GtkTextTagTable_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextTagTable_listautoptr;
     * }
     */
    public static final OfAddress GtkTextTagTable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextTagTable_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextTagTable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextTagTable_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextTagTable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTextView* GtkTextView_autoptr;
     * }
     */
    public static final OfAddress GtkTextView_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTextView_listautoptr;
     * }
     */
    public static final OfAddress GtkTextView_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTextView_slistautoptr;
     * }
     */
    public static final OfAddress GtkTextView_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTextView_queueautoptr;
     * }
     */
    public static final OfAddress GtkTextView_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkToggleButton* GtkToggleButton_autoptr;
     * }
     */
    public static final OfAddress GtkToggleButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkToggleButton_listautoptr;
     * }
     */
    public static final OfAddress GtkToggleButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkToggleButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkToggleButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkToggleButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkToggleButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkToggleToolButton* GtkToggleToolButton_autoptr;
     * }
     */
    public static final OfAddress GtkToggleToolButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkToggleToolButton_listautoptr;
     * }
     */
    public static final OfAddress GtkToggleToolButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkToggleToolButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkToggleToolButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkToggleToolButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkToggleToolButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkToolButton* GtkToolButton_autoptr;
     * }
     */
    public static final OfAddress GtkToolButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkToolButton_listautoptr;
     * }
     */
    public static final OfAddress GtkToolButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkToolButton_slistautoptr;
     * }
     */
    public static final OfAddress GtkToolButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkToolButton_queueautoptr;
     * }
     */
    public static final OfAddress GtkToolButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkToolItem* GtkToolItem_autoptr;
     * }
     */
    public static final OfAddress GtkToolItem_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkToolItem_listautoptr;
     * }
     */
    public static final OfAddress GtkToolItem_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkToolItem_slistautoptr;
     * }
     */
    public static final OfAddress GtkToolItem_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkToolItem_queueautoptr;
     * }
     */
    public static final OfAddress GtkToolItem_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkToolItemGroup* GtkToolItemGroup_autoptr;
     * }
     */
    public static final OfAddress GtkToolItemGroup_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkToolItemGroup_listautoptr;
     * }
     */
    public static final OfAddress GtkToolItemGroup_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkToolItemGroup_slistautoptr;
     * }
     */
    public static final OfAddress GtkToolItemGroup_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkToolItemGroup_queueautoptr;
     * }
     */
    public static final OfAddress GtkToolItemGroup_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkToolPalette* GtkToolPalette_autoptr;
     * }
     */
    public static final OfAddress GtkToolPalette_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkToolPalette_listautoptr;
     * }
     */
    public static final OfAddress GtkToolPalette_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkToolPalette_slistautoptr;
     * }
     */
    public static final OfAddress GtkToolPalette_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkToolPalette_queueautoptr;
     * }
     */
    public static final OfAddress GtkToolPalette_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkToolShell* GtkToolShell_autoptr;
     * }
     */
    public static final OfAddress GtkToolShell_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkToolShell_listautoptr;
     * }
     */
    public static final OfAddress GtkToolShell_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkToolShell_slistautoptr;
     * }
     */
    public static final OfAddress GtkToolShell_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkToolShell_queueautoptr;
     * }
     */
    public static final OfAddress GtkToolShell_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkToolbar* GtkToolbar_autoptr;
     * }
     */
    public static final OfAddress GtkToolbar_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkToolbar_listautoptr;
     * }
     */
    public static final OfAddress GtkToolbar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkToolbar_slistautoptr;
     * }
     */
    public static final OfAddress GtkToolbar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkToolbar_queueautoptr;
     * }
     */
    public static final OfAddress GtkToolbar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTooltip* GtkTooltip_autoptr;
     * }
     */
    public static final OfAddress GtkTooltip_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTooltip_listautoptr;
     * }
     */
    public static final OfAddress GtkTooltip_listautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GSList* GtkTooltip_slistautoptr;
     * }
     */
    public static final OfAddress GtkTooltip_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GQueue* GtkTooltip_queueautoptr;
     * }
     */
    public static final OfAddress GtkTooltip_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GtkTreeDragDest* GtkTreeDragDest_autoptr;
     * }
     */
    public static final OfAddress GtkTreeDragDest_autoptr = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GList* GtkTreeDragDest_listautoptr;
     * }
     */
    public static final OfAddress GtkTreeDragDest_listautoptr = Constants$root.C_POINTER$LAYOUT;
}


