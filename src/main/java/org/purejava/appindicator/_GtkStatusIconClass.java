// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkStatusIconClass {
 *     struct _GObjectClass parent_class;
 *     void (*activate)(struct _GtkStatusIcon*);
 *     void (*popup_menu)(struct _GtkStatusIcon*,unsigned int,unsigned int);
 *     int (*size_changed)(struct _GtkStatusIcon*,int);
 *     int (*button_press_event)(struct _GtkStatusIcon*,struct _GdkEventButton*);
 *     int (*button_release_event)(struct _GtkStatusIcon*,struct _GdkEventButton*);
 *     int (*scroll_event)(struct _GtkStatusIcon*,struct _GdkEventScroll*);
 *     int (*query_tooltip)(struct _GtkStatusIcon*,int,int,int,struct _GtkTooltip*);
 *     void (*__gtk_reserved1)();
 *     void (*__gtk_reserved2)();
 *     void (*__gtk_reserved3)();
 *     void (*__gtk_reserved4)();
 * };
 * }
 */
public class _GtkStatusIconClass {

    public static MemoryLayout $LAYOUT() {
        return constants$3333.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*activate)(struct _GtkStatusIcon*);
     * }
     */
    public interface activate {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(activate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3334.const$0, fi, constants$13.const$1, scope);
        }
        static activate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle activate$VH() {
        return constants$3334.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*activate)(struct _GtkStatusIcon*);
     * }
     */
    public static MemorySegment activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3334.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*activate)(struct _GtkStatusIcon*);
     * }
     */
    public static void activate$set(MemorySegment seg, MemorySegment x) {
        constants$3334.const$1.set(seg, x);
    }
    public static MemorySegment activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3334.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3334.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate(MemorySegment segment, Arena scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*popup_menu)(struct _GtkStatusIcon*,unsigned int,unsigned int);
     * }
     */
    public interface popup_menu {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(popup_menu fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3334.const$2, fi, constants$467.const$3, scope);
        }
        static popup_menu ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1901.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle popup_menu$VH() {
        return constants$3334.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*popup_menu)(struct _GtkStatusIcon*,unsigned int,unsigned int);
     * }
     */
    public static MemorySegment popup_menu$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3334.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*popup_menu)(struct _GtkStatusIcon*,unsigned int,unsigned int);
     * }
     */
    public static void popup_menu$set(MemorySegment seg, MemorySegment x) {
        constants$3334.const$3.set(seg, x);
    }
    public static MemorySegment popup_menu$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3334.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void popup_menu$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3334.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static popup_menu popup_menu(MemorySegment segment, Arena scope) {
        return popup_menu.ofAddress(popup_menu$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*size_changed)(struct _GtkStatusIcon*,int);
     * }
     */
    public interface size_changed {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(size_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3334.const$4, fi, constants$11.const$4, scope);
        }
        static size_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle size_changed$VH() {
        return constants$3334.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*size_changed)(struct _GtkStatusIcon*,int);
     * }
     */
    public static MemorySegment size_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3334.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*size_changed)(struct _GtkStatusIcon*,int);
     * }
     */
    public static void size_changed$set(MemorySegment seg, MemorySegment x) {
        constants$3334.const$5.set(seg, x);
    }
    public static MemorySegment size_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3334.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void size_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3334.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static size_changed size_changed(MemorySegment segment, Arena scope) {
        return size_changed.ofAddress(size_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*button_press_event)(struct _GtkStatusIcon*,struct _GdkEventButton*);
     * }
     */
    public interface button_press_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(button_press_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3335.const$0, fi, constants$9.const$0, scope);
        }
        static button_press_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle button_press_event$VH() {
        return constants$3335.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*button_press_event)(struct _GtkStatusIcon*,struct _GdkEventButton*);
     * }
     */
    public static MemorySegment button_press_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3335.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*button_press_event)(struct _GtkStatusIcon*,struct _GdkEventButton*);
     * }
     */
    public static void button_press_event$set(MemorySegment seg, MemorySegment x) {
        constants$3335.const$1.set(seg, x);
    }
    public static MemorySegment button_press_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3335.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void button_press_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3335.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static button_press_event button_press_event(MemorySegment segment, Arena scope) {
        return button_press_event.ofAddress(button_press_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*button_release_event)(struct _GtkStatusIcon*,struct _GdkEventButton*);
     * }
     */
    public interface button_release_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(button_release_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3335.const$2, fi, constants$9.const$0, scope);
        }
        static button_release_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle button_release_event$VH() {
        return constants$3335.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*button_release_event)(struct _GtkStatusIcon*,struct _GdkEventButton*);
     * }
     */
    public static MemorySegment button_release_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3335.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*button_release_event)(struct _GtkStatusIcon*,struct _GdkEventButton*);
     * }
     */
    public static void button_release_event$set(MemorySegment seg, MemorySegment x) {
        constants$3335.const$3.set(seg, x);
    }
    public static MemorySegment button_release_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3335.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void button_release_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3335.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static button_release_event button_release_event(MemorySegment segment, Arena scope) {
        return button_release_event.ofAddress(button_release_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*scroll_event)(struct _GtkStatusIcon*,struct _GdkEventScroll*);
     * }
     */
    public interface scroll_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(scroll_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3335.const$4, fi, constants$9.const$0, scope);
        }
        static scroll_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle scroll_event$VH() {
        return constants$3335.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*scroll_event)(struct _GtkStatusIcon*,struct _GdkEventScroll*);
     * }
     */
    public static MemorySegment scroll_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3335.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*scroll_event)(struct _GtkStatusIcon*,struct _GdkEventScroll*);
     * }
     */
    public static void scroll_event$set(MemorySegment seg, MemorySegment x) {
        constants$3335.const$5.set(seg, x);
    }
    public static MemorySegment scroll_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3335.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void scroll_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3335.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static scroll_event scroll_event(MemorySegment segment, Arena scope) {
        return scroll_event.ofAddress(scroll_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*query_tooltip)(struct _GtkStatusIcon*,int,int,int,struct _GtkTooltip*);
     * }
     */
    public interface query_tooltip {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(query_tooltip fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3336.const$0, fi, constants$1290.const$1, scope);
        }
        static query_tooltip ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$2121.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_tooltip$VH() {
        return constants$3336.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*query_tooltip)(struct _GtkStatusIcon*,int,int,int,struct _GtkTooltip*);
     * }
     */
    public static MemorySegment query_tooltip$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3336.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*query_tooltip)(struct _GtkStatusIcon*,int,int,int,struct _GtkTooltip*);
     * }
     */
    public static void query_tooltip$set(MemorySegment seg, MemorySegment x) {
        constants$3336.const$1.set(seg, x);
    }
    public static MemorySegment query_tooltip$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3336.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void query_tooltip$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3336.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_tooltip query_tooltip(MemorySegment segment, Arena scope) {
        return query_tooltip.ofAddress(query_tooltip$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*__gtk_reserved1)();
     * }
     */
    public interface __gtk_reserved1 {

        void apply();
        static MemorySegment allocate(__gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3336.const$2, fi, constants$7.const$5, scope);
        }
        static __gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle __gtk_reserved1$VH() {
        return constants$3336.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*__gtk_reserved1)();
     * }
     */
    public static MemorySegment __gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3336.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*__gtk_reserved1)();
     * }
     */
    public static void __gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$3336.const$3.set(seg, x);
    }
    public static MemorySegment __gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3336.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void __gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3336.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static __gtk_reserved1 __gtk_reserved1(MemorySegment segment, Arena scope) {
        return __gtk_reserved1.ofAddress(__gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*__gtk_reserved2)();
     * }
     */
    public interface __gtk_reserved2 {

        void apply();
        static MemorySegment allocate(__gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3336.const$4, fi, constants$7.const$5, scope);
        }
        static __gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle __gtk_reserved2$VH() {
        return constants$3336.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*__gtk_reserved2)();
     * }
     */
    public static MemorySegment __gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3336.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*__gtk_reserved2)();
     * }
     */
    public static void __gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$3336.const$5.set(seg, x);
    }
    public static MemorySegment __gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3336.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void __gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3336.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static __gtk_reserved2 __gtk_reserved2(MemorySegment segment, Arena scope) {
        return __gtk_reserved2.ofAddress(__gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*__gtk_reserved3)();
     * }
     */
    public interface __gtk_reserved3 {

        void apply();
        static MemorySegment allocate(__gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3337.const$0, fi, constants$7.const$5, scope);
        }
        static __gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle __gtk_reserved3$VH() {
        return constants$3337.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*__gtk_reserved3)();
     * }
     */
    public static MemorySegment __gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3337.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*__gtk_reserved3)();
     * }
     */
    public static void __gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$3337.const$1.set(seg, x);
    }
    public static MemorySegment __gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3337.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void __gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3337.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static __gtk_reserved3 __gtk_reserved3(MemorySegment segment, Arena scope) {
        return __gtk_reserved3.ofAddress(__gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*__gtk_reserved4)();
     * }
     */
    public interface __gtk_reserved4 {

        void apply();
        static MemorySegment allocate(__gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3337.const$2, fi, constants$7.const$5, scope);
        }
        static __gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle __gtk_reserved4$VH() {
        return constants$3337.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*__gtk_reserved4)();
     * }
     */
    public static MemorySegment __gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3337.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*__gtk_reserved4)();
     * }
     */
    public static void __gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$3337.const$3.set(seg, x);
    }
    public static MemorySegment __gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3337.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void __gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3337.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static __gtk_reserved4 __gtk_reserved4(MemorySegment segment, Arena scope) {
        return __gtk_reserved4.ofAddress(__gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


