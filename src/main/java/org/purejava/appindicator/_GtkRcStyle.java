// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkRcStyle {
 *     struct _GObject parent_instance;
 *     char* name;
 *     char* bg_pixmap_name[5];
 *     struct _PangoFontDescription* font_desc;
 *     enum GtkRcFlags color_flags[5];
 *     struct _GdkColor fg[5];
 *     struct _GdkColor bg[5];
 *     struct _GdkColor text[5];
 *     struct _GdkColor base[5];
 *     int xthickness;
 *     int ythickness;
 *     struct _GArray* rc_properties;
 *     struct _GSList* rc_style_lists;
 *     struct _GSList* icon_factories;
 *      *     unsigned int engine_specified;
 * };
 * }
 */
public class _GtkRcStyle {

    public static MemoryLayout $LAYOUT() {
        return constants$3321.const$2;
    }
    public static MemorySegment parent_instance$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static VarHandle name$VH() {
        return constants$3321.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3321.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        constants$3321.const$3.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3321.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3321.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment bg_pixmap_name$slice(MemorySegment seg) {
        return seg.asSlice(32, 40);
    }
    public static VarHandle font_desc$VH() {
        return constants$3321.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontDescription* font_desc;
     * }
     */
    public static MemorySegment font_desc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3321.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontDescription* font_desc;
     * }
     */
    public static void font_desc$set(MemorySegment seg, MemorySegment x) {
        constants$3321.const$4.set(seg, x);
    }
    public static MemorySegment font_desc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3321.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void font_desc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3321.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment color_flags$slice(MemorySegment seg) {
        return seg.asSlice(80, 20);
    }
    public static MemorySegment fg$slice(MemorySegment seg) {
        return seg.asSlice(100, 60);
    }
    public static MemorySegment bg$slice(MemorySegment seg) {
        return seg.asSlice(160, 60);
    }
    public static MemorySegment text$slice(MemorySegment seg) {
        return seg.asSlice(220, 60);
    }
    public static MemorySegment base$slice(MemorySegment seg) {
        return seg.asSlice(280, 60);
    }
    public static VarHandle xthickness$VH() {
        return constants$3321.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int xthickness;
     * }
     */
    public static int xthickness$get(MemorySegment seg) {
        return (int)constants$3321.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int xthickness;
     * }
     */
    public static void xthickness$set(MemorySegment seg, int x) {
        constants$3321.const$5.set(seg, x);
    }
    public static int xthickness$get(MemorySegment seg, long index) {
        return (int)constants$3321.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void xthickness$set(MemorySegment seg, long index, int x) {
        constants$3321.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ythickness$VH() {
        return constants$3322.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ythickness;
     * }
     */
    public static int ythickness$get(MemorySegment seg) {
        return (int)constants$3322.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ythickness;
     * }
     */
    public static void ythickness$set(MemorySegment seg, int x) {
        constants$3322.const$0.set(seg, x);
    }
    public static int ythickness$get(MemorySegment seg, long index) {
        return (int)constants$3322.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ythickness$set(MemorySegment seg, long index, int x) {
        constants$3322.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc_properties$VH() {
        return constants$3322.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GArray* rc_properties;
     * }
     */
    public static MemorySegment rc_properties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3322.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GArray* rc_properties;
     * }
     */
    public static void rc_properties$set(MemorySegment seg, MemorySegment x) {
        constants$3322.const$1.set(seg, x);
    }
    public static MemorySegment rc_properties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3322.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_properties$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3322.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc_style_lists$VH() {
        return constants$3322.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GSList* rc_style_lists;
     * }
     */
    public static MemorySegment rc_style_lists$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3322.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GSList* rc_style_lists;
     * }
     */
    public static void rc_style_lists$set(MemorySegment seg, MemorySegment x) {
        constants$3322.const$2.set(seg, x);
    }
    public static MemorySegment rc_style_lists$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3322.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_style_lists$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3322.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle icon_factories$VH() {
        return constants$3322.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GSList* icon_factories;
     * }
     */
    public static MemorySegment icon_factories$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3322.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GSList* icon_factories;
     * }
     */
    public static void icon_factories$set(MemorySegment seg, MemorySegment x) {
        constants$3322.const$3.set(seg, x);
    }
    public static MemorySegment icon_factories$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3322.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void icon_factories$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3322.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


