// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkPrintOperationPreviewIface {
 *     struct _GTypeInterface g_iface;
 *     void (*ready)(struct _GtkPrintOperationPreview*,struct _GtkPrintContext*);
 *     void (*got_page_size)(struct _GtkPrintOperationPreview*,struct _GtkPrintContext*,struct _GtkPageSetup*);
 *     void (*render_page)(struct _GtkPrintOperationPreview*,int);
 *     int (*is_selected)(struct _GtkPrintOperationPreview*,int);
 *     void (*end_preview)(struct _GtkPrintOperationPreview*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 * };
 * }
 */
public class _GtkPrintOperationPreviewIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2964.const$2;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*ready)(struct _GtkPrintOperationPreview*,struct _GtkPrintContext*);
     * }
     */
    public interface ready {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(ready fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2964.const$3, fi, constants$13.const$4, scope);
        }
        static ready ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ready$VH() {
        return constants$2964.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ready)(struct _GtkPrintOperationPreview*,struct _GtkPrintContext*);
     * }
     */
    public static MemorySegment ready$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2964.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ready)(struct _GtkPrintOperationPreview*,struct _GtkPrintContext*);
     * }
     */
    public static void ready$set(MemorySegment seg, MemorySegment x) {
        constants$2964.const$4.set(seg, x);
    }
    public static MemorySegment ready$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2964.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ready$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2964.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static ready ready(MemorySegment segment, Arena scope) {
        return ready.ofAddress(ready$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*got_page_size)(struct _GtkPrintOperationPreview*,struct _GtkPrintContext*,struct _GtkPageSetup*);
     * }
     */
    public interface got_page_size {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(got_page_size fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2964.const$5, fi, constants$14.const$3, scope);
        }
        static got_page_size ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle got_page_size$VH() {
        return constants$2965.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*got_page_size)(struct _GtkPrintOperationPreview*,struct _GtkPrintContext*,struct _GtkPageSetup*);
     * }
     */
    public static MemorySegment got_page_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2965.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*got_page_size)(struct _GtkPrintOperationPreview*,struct _GtkPrintContext*,struct _GtkPageSetup*);
     * }
     */
    public static void got_page_size$set(MemorySegment seg, MemorySegment x) {
        constants$2965.const$0.set(seg, x);
    }
    public static MemorySegment got_page_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2965.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void got_page_size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2965.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static got_page_size got_page_size(MemorySegment segment, Arena scope) {
        return got_page_size.ofAddress(got_page_size$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*render_page)(struct _GtkPrintOperationPreview*,int);
     * }
     */
    public interface render_page {

        void apply(java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(render_page fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2965.const$1, fi, constants$40.const$2, scope);
        }
        static render_page ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle render_page$VH() {
        return constants$2965.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*render_page)(struct _GtkPrintOperationPreview*,int);
     * }
     */
    public static MemorySegment render_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2965.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*render_page)(struct _GtkPrintOperationPreview*,int);
     * }
     */
    public static void render_page$set(MemorySegment seg, MemorySegment x) {
        constants$2965.const$2.set(seg, x);
    }
    public static MemorySegment render_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2965.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void render_page$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2965.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_page render_page(MemorySegment segment, Arena scope) {
        return render_page.ofAddress(render_page$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*is_selected)(struct _GtkPrintOperationPreview*,int);
     * }
     */
    public interface is_selected {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(is_selected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2965.const$3, fi, constants$11.const$4, scope);
        }
        static is_selected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_selected$VH() {
        return constants$2965.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_selected)(struct _GtkPrintOperationPreview*,int);
     * }
     */
    public static MemorySegment is_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2965.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_selected)(struct _GtkPrintOperationPreview*,int);
     * }
     */
    public static void is_selected$set(MemorySegment seg, MemorySegment x) {
        constants$2965.const$4.set(seg, x);
    }
    public static MemorySegment is_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2965.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void is_selected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2965.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_selected is_selected(MemorySegment segment, Arena scope) {
        return is_selected.ofAddress(is_selected$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*end_preview)(struct _GtkPrintOperationPreview*);
     * }
     */
    public interface end_preview {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(end_preview fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2965.const$5, fi, constants$13.const$1, scope);
        }
        static end_preview ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle end_preview$VH() {
        return constants$2966.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*end_preview)(struct _GtkPrintOperationPreview*);
     * }
     */
    public static MemorySegment end_preview$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2966.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*end_preview)(struct _GtkPrintOperationPreview*);
     * }
     */
    public static void end_preview$set(MemorySegment seg, MemorySegment x) {
        constants$2966.const$0.set(seg, x);
    }
    public static MemorySegment end_preview$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2966.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void end_preview$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2966.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static end_preview end_preview(MemorySegment segment, Arena scope) {
        return end_preview.ofAddress(end_preview$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2966.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2966.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2966.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2966.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2966.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2966.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2966.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2966.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2966.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2966.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2966.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2966.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2966.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2967.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2967.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2967.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2967.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2967.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2967.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2967.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2967.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2967.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2967.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2967.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2967.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved5$VH() {
        return constants$2967.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2967.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$2967.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2967.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2967.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, Arena scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2967.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved6$VH() {
        return constants$2968.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2968.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$2968.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2968.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2968.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, Arena scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2968.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved7$VH() {
        return constants$2968.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2968.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$2968.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2968.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2968.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, Arena scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2968.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved8$VH() {
        return constants$2968.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2968.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$2968.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2968.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2968.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, Arena scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


