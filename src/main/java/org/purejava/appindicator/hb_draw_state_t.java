// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct hb_draw_state_t {
 *     int path_open;
 *     float path_start_x;
 *     float path_start_y;
 *     float current_x;
 *     float current_y;
 *     union _hb_var_num_t reserved1;
 *     union _hb_var_num_t reserved2;
 *     union _hb_var_num_t reserved3;
 *     union _hb_var_num_t reserved4;
 *     union _hb_var_num_t reserved5;
 *     union _hb_var_num_t reserved6;
 *     union _hb_var_num_t reserved7;
 * };
 * }
 */
public class hb_draw_state_t {

    public static MemoryLayout $LAYOUT() {
        return constants$1446.const$0;
    }
    public static VarHandle path_open$VH() {
        return constants$1446.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int path_open;
     * }
     */
    public static int path_open$get(MemorySegment seg) {
        return (int)constants$1446.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int path_open;
     * }
     */
    public static void path_open$set(MemorySegment seg, int x) {
        constants$1446.const$1.set(seg, x);
    }
    public static int path_open$get(MemorySegment seg, long index) {
        return (int)constants$1446.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void path_open$set(MemorySegment seg, long index, int x) {
        constants$1446.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle path_start_x$VH() {
        return constants$1446.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float path_start_x;
     * }
     */
    public static float path_start_x$get(MemorySegment seg) {
        return (float)constants$1446.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float path_start_x;
     * }
     */
    public static void path_start_x$set(MemorySegment seg, float x) {
        constants$1446.const$2.set(seg, x);
    }
    public static float path_start_x$get(MemorySegment seg, long index) {
        return (float)constants$1446.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void path_start_x$set(MemorySegment seg, long index, float x) {
        constants$1446.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle path_start_y$VH() {
        return constants$1446.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float path_start_y;
     * }
     */
    public static float path_start_y$get(MemorySegment seg) {
        return (float)constants$1446.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float path_start_y;
     * }
     */
    public static void path_start_y$set(MemorySegment seg, float x) {
        constants$1446.const$3.set(seg, x);
    }
    public static float path_start_y$get(MemorySegment seg, long index) {
        return (float)constants$1446.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void path_start_y$set(MemorySegment seg, long index, float x) {
        constants$1446.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle current_x$VH() {
        return constants$1446.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float current_x;
     * }
     */
    public static float current_x$get(MemorySegment seg) {
        return (float)constants$1446.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float current_x;
     * }
     */
    public static void current_x$set(MemorySegment seg, float x) {
        constants$1446.const$4.set(seg, x);
    }
    public static float current_x$get(MemorySegment seg, long index) {
        return (float)constants$1446.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void current_x$set(MemorySegment seg, long index, float x) {
        constants$1446.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle current_y$VH() {
        return constants$1446.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float current_y;
     * }
     */
    public static float current_y$get(MemorySegment seg) {
        return (float)constants$1446.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float current_y;
     * }
     */
    public static void current_y$set(MemorySegment seg, float x) {
        constants$1446.const$5.set(seg, x);
    }
    public static float current_y$get(MemorySegment seg, long index) {
        return (float)constants$1446.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void current_y$set(MemorySegment seg, long index, float x) {
        constants$1446.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment reserved1$slice(MemorySegment seg) {
        return seg.asSlice(20, 4);
    }
    public static MemorySegment reserved2$slice(MemorySegment seg) {
        return seg.asSlice(24, 4);
    }
    public static MemorySegment reserved3$slice(MemorySegment seg) {
        return seg.asSlice(28, 4);
    }
    public static MemorySegment reserved4$slice(MemorySegment seg) {
        return seg.asSlice(32, 4);
    }
    public static MemorySegment reserved5$slice(MemorySegment seg) {
        return seg.asSlice(36, 4);
    }
    public static MemorySegment reserved6$slice(MemorySegment seg) {
        return seg.asSlice(40, 4);
    }
    public static MemorySegment reserved7$slice(MemorySegment seg) {
        return seg.asSlice(44, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


