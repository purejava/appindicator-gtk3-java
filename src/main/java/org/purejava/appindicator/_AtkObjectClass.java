// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _AtkObjectClass {
 *     struct _GObjectClass parent;
 *     char* (*get_name)(struct _AtkObject*);
 *     char* (*get_description)(struct _AtkObject*);
 *     struct _AtkObject* (*get_parent)(struct _AtkObject*);
 *     int (*get_n_children)(struct _AtkObject*);
 *     struct _AtkObject* (*ref_child)(struct _AtkObject*,int);
 *     int (*get_index_in_parent)(struct _AtkObject*);
 *     struct _AtkRelationSet* (*ref_relation_set)(struct _AtkObject*);
 *     enum AtkRole (*get_role)(struct _AtkObject*);
 *     enum AtkLayer (*get_layer)(struct _AtkObject*);
 *     int (*get_mdi_zorder)(struct _AtkObject*);
 *     struct _AtkStateSet* (*ref_state_set)(struct _AtkObject*);
 *     void (*set_name)(struct _AtkObject*,char*);
 *     void (*set_description)(struct _AtkObject*,char*);
 *     void (*set_parent)(struct _AtkObject*,struct _AtkObject*);
 *     void (*set_role)(struct _AtkObject*,enum AtkRole);
 *     unsigned int (*connect_property_change_handler)(struct _AtkObject*,void (**)(struct _AtkObject*,struct _AtkPropertyValues*));
 *     void (*remove_property_change_handler)(struct _AtkObject*,unsigned int);
 *     void (*initialize)(struct _AtkObject*,void*);
 *     void (*children_changed)(struct _AtkObject*,unsigned int,void*);
 *     void (*focus_event)(struct _AtkObject*,int);
 *     void (*property_change)(struct _AtkObject*,struct _AtkPropertyValues*);
 *     void (*state_change)(struct _AtkObject*,char*,int);
 *     void (*visible_data_changed)(struct _AtkObject*);
 *     void (*active_descendant_changed)(struct _AtkObject*,void**);
 *     struct _GSList* (*get_attributes)(struct _AtkObject*);
 *     char* (*get_object_locale)(struct _AtkObject*);
 *     int (*pad1)(void*);
 * };
 * }
 */
public class _AtkObjectClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1966.const$4;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * char* (*get_name)(struct _AtkObject*);
     * }
     */
    public interface get_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1966.const$5, fi, constants$5.const$2, scope);
        }
        static get_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_name$VH() {
        return constants$1967.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_name)(struct _AtkObject*);
     * }
     */
    public static MemorySegment get_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1967.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_name)(struct _AtkObject*);
     * }
     */
    public static void get_name$set(MemorySegment seg, MemorySegment x) {
        constants$1967.const$0.set(seg, x);
    }
    public static MemorySegment get_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1967.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1967.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name(MemorySegment segment, Arena scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_description)(struct _AtkObject*);
     * }
     */
    public interface get_description {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_description fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1967.const$1, fi, constants$5.const$2, scope);
        }
        static get_description ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_description$VH() {
        return constants$1967.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_description)(struct _AtkObject*);
     * }
     */
    public static MemorySegment get_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1967.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_description)(struct _AtkObject*);
     * }
     */
    public static void get_description$set(MemorySegment seg, MemorySegment x) {
        constants$1967.const$2.set(seg, x);
    }
    public static MemorySegment get_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1967.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_description$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1967.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_description get_description(MemorySegment segment, Arena scope) {
        return get_description.ofAddress(get_description$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*get_parent)(struct _AtkObject*);
     * }
     */
    public interface get_parent {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_parent fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1967.const$3, fi, constants$5.const$2, scope);
        }
        static get_parent ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_parent$VH() {
        return constants$1967.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*get_parent)(struct _AtkObject*);
     * }
     */
    public static MemorySegment get_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1967.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*get_parent)(struct _AtkObject*);
     * }
     */
    public static void get_parent$set(MemorySegment seg, MemorySegment x) {
        constants$1967.const$4.set(seg, x);
    }
    public static MemorySegment get_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1967.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1967.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parent get_parent(MemorySegment segment, Arena scope) {
        return get_parent.ofAddress(get_parent$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_n_children)(struct _AtkObject*);
     * }
     */
    public interface get_n_children {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_n_children fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1967.const$5, fi, constants$10.const$5, scope);
        }
        static get_n_children ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_n_children$VH() {
        return constants$1968.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_n_children)(struct _AtkObject*);
     * }
     */
    public static MemorySegment get_n_children$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1968.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_n_children)(struct _AtkObject*);
     * }
     */
    public static void get_n_children$set(MemorySegment seg, MemorySegment x) {
        constants$1968.const$0.set(seg, x);
    }
    public static MemorySegment get_n_children$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1968.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_children$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1968.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_children get_n_children(MemorySegment segment, Arena scope) {
        return get_n_children.ofAddress(get_n_children$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*ref_child)(struct _AtkObject*,int);
     * }
     */
    public interface ref_child {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(ref_child fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1968.const$1, fi, constants$21.const$3, scope);
        }
        static ref_child ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$318.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ref_child$VH() {
        return constants$1968.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*ref_child)(struct _AtkObject*,int);
     * }
     */
    public static MemorySegment ref_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1968.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*ref_child)(struct _AtkObject*,int);
     * }
     */
    public static void ref_child$set(MemorySegment seg, MemorySegment x) {
        constants$1968.const$2.set(seg, x);
    }
    public static MemorySegment ref_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1968.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_child$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1968.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_child ref_child(MemorySegment segment, Arena scope) {
        return ref_child.ofAddress(ref_child$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_index_in_parent)(struct _AtkObject*);
     * }
     */
    public interface get_index_in_parent {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_index_in_parent fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1968.const$3, fi, constants$10.const$5, scope);
        }
        static get_index_in_parent ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_index_in_parent$VH() {
        return constants$1968.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_index_in_parent)(struct _AtkObject*);
     * }
     */
    public static MemorySegment get_index_in_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1968.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_index_in_parent)(struct _AtkObject*);
     * }
     */
    public static void get_index_in_parent$set(MemorySegment seg, MemorySegment x) {
        constants$1968.const$4.set(seg, x);
    }
    public static MemorySegment get_index_in_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1968.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_index_in_parent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1968.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_index_in_parent get_index_in_parent(MemorySegment segment, Arena scope) {
        return get_index_in_parent.ofAddress(get_index_in_parent$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkRelationSet* (*ref_relation_set)(struct _AtkObject*);
     * }
     */
    public interface ref_relation_set {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(ref_relation_set fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1968.const$5, fi, constants$5.const$2, scope);
        }
        static ref_relation_set ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ref_relation_set$VH() {
        return constants$1969.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkRelationSet* (*ref_relation_set)(struct _AtkObject*);
     * }
     */
    public static MemorySegment ref_relation_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1969.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkRelationSet* (*ref_relation_set)(struct _AtkObject*);
     * }
     */
    public static void ref_relation_set$set(MemorySegment seg, MemorySegment x) {
        constants$1969.const$0.set(seg, x);
    }
    public static MemorySegment ref_relation_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1969.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_relation_set$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1969.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_relation_set ref_relation_set(MemorySegment segment, Arena scope) {
        return ref_relation_set.ofAddress(ref_relation_set$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum AtkRole (*get_role)(struct _AtkObject*);
     * }
     */
    public interface get_role {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_role fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1969.const$1, fi, constants$10.const$5, scope);
        }
        static get_role ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_role$VH() {
        return constants$1969.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AtkRole (*get_role)(struct _AtkObject*);
     * }
     */
    public static MemorySegment get_role$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1969.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AtkRole (*get_role)(struct _AtkObject*);
     * }
     */
    public static void get_role$set(MemorySegment seg, MemorySegment x) {
        constants$1969.const$2.set(seg, x);
    }
    public static MemorySegment get_role$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1969.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_role$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1969.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_role get_role(MemorySegment segment, Arena scope) {
        return get_role.ofAddress(get_role$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum AtkLayer (*get_layer)(struct _AtkObject*);
     * }
     */
    public interface get_layer {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_layer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1969.const$3, fi, constants$10.const$5, scope);
        }
        static get_layer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_layer$VH() {
        return constants$1969.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AtkLayer (*get_layer)(struct _AtkObject*);
     * }
     */
    public static MemorySegment get_layer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1969.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AtkLayer (*get_layer)(struct _AtkObject*);
     * }
     */
    public static void get_layer$set(MemorySegment seg, MemorySegment x) {
        constants$1969.const$4.set(seg, x);
    }
    public static MemorySegment get_layer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1969.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_layer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1969.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_layer get_layer(MemorySegment segment, Arena scope) {
        return get_layer.ofAddress(get_layer$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_mdi_zorder)(struct _AtkObject*);
     * }
     */
    public interface get_mdi_zorder {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_mdi_zorder fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1969.const$5, fi, constants$10.const$5, scope);
        }
        static get_mdi_zorder ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_mdi_zorder$VH() {
        return constants$1970.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_mdi_zorder)(struct _AtkObject*);
     * }
     */
    public static MemorySegment get_mdi_zorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1970.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_mdi_zorder)(struct _AtkObject*);
     * }
     */
    public static void get_mdi_zorder$set(MemorySegment seg, MemorySegment x) {
        constants$1970.const$0.set(seg, x);
    }
    public static MemorySegment get_mdi_zorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1970.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mdi_zorder$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1970.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mdi_zorder get_mdi_zorder(MemorySegment segment, Arena scope) {
        return get_mdi_zorder.ofAddress(get_mdi_zorder$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkStateSet* (*ref_state_set)(struct _AtkObject*);
     * }
     */
    public interface ref_state_set {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(ref_state_set fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1970.const$1, fi, constants$5.const$2, scope);
        }
        static ref_state_set ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ref_state_set$VH() {
        return constants$1970.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkStateSet* (*ref_state_set)(struct _AtkObject*);
     * }
     */
    public static MemorySegment ref_state_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1970.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkStateSet* (*ref_state_set)(struct _AtkObject*);
     * }
     */
    public static void ref_state_set$set(MemorySegment seg, MemorySegment x) {
        constants$1970.const$2.set(seg, x);
    }
    public static MemorySegment ref_state_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1970.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_state_set$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1970.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_state_set ref_state_set(MemorySegment segment, Arena scope) {
        return ref_state_set.ofAddress(ref_state_set$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_name)(struct _AtkObject*,char*);
     * }
     */
    public interface set_name {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1970.const$3, fi, constants$13.const$4, scope);
        }
        static set_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_name$VH() {
        return constants$1970.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_name)(struct _AtkObject*,char*);
     * }
     */
    public static MemorySegment set_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1970.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_name)(struct _AtkObject*,char*);
     * }
     */
    public static void set_name$set(MemorySegment seg, MemorySegment x) {
        constants$1970.const$4.set(seg, x);
    }
    public static MemorySegment set_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1970.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void set_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1970.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_name set_name(MemorySegment segment, Arena scope) {
        return set_name.ofAddress(set_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_description)(struct _AtkObject*,char*);
     * }
     */
    public interface set_description {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_description fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1970.const$5, fi, constants$13.const$4, scope);
        }
        static set_description ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_description$VH() {
        return constants$1971.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_description)(struct _AtkObject*,char*);
     * }
     */
    public static MemorySegment set_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1971.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_description)(struct _AtkObject*,char*);
     * }
     */
    public static void set_description$set(MemorySegment seg, MemorySegment x) {
        constants$1971.const$0.set(seg, x);
    }
    public static MemorySegment set_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1971.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void set_description$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1971.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_description set_description(MemorySegment segment, Arena scope) {
        return set_description.ofAddress(set_description$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_parent)(struct _AtkObject*,struct _AtkObject*);
     * }
     */
    public interface set_parent {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_parent fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1971.const$1, fi, constants$13.const$4, scope);
        }
        static set_parent ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_parent$VH() {
        return constants$1971.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_parent)(struct _AtkObject*,struct _AtkObject*);
     * }
     */
    public static MemorySegment set_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1971.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_parent)(struct _AtkObject*,struct _AtkObject*);
     * }
     */
    public static void set_parent$set(MemorySegment seg, MemorySegment x) {
        constants$1971.const$2.set(seg, x);
    }
    public static MemorySegment set_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1971.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void set_parent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1971.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_parent set_parent(MemorySegment segment, Arena scope) {
        return set_parent.ofAddress(set_parent$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_role)(struct _AtkObject*,enum AtkRole);
     * }
     */
    public interface set_role {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(set_role fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1971.const$3, fi, constants$40.const$2, scope);
        }
        static set_role ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_role$VH() {
        return constants$1971.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_role)(struct _AtkObject*,enum AtkRole);
     * }
     */
    public static MemorySegment set_role$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1971.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_role)(struct _AtkObject*,enum AtkRole);
     * }
     */
    public static void set_role$set(MemorySegment seg, MemorySegment x) {
        constants$1971.const$4.set(seg, x);
    }
    public static MemorySegment set_role$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1971.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void set_role$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1971.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_role set_role(MemorySegment segment, Arena scope) {
        return set_role.ofAddress(set_role$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned int (*connect_property_change_handler)(struct _AtkObject*,void (**)(struct _AtkObject*,struct _AtkPropertyValues*));
     * }
     */
    public interface connect_property_change_handler {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(connect_property_change_handler fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1971.const$5, fi, constants$9.const$0, scope);
        }
        static connect_property_change_handler ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle connect_property_change_handler$VH() {
        return constants$1972.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int (*connect_property_change_handler)(struct _AtkObject*,void (**)(struct _AtkObject*,struct _AtkPropertyValues*));
     * }
     */
    public static MemorySegment connect_property_change_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1972.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int (*connect_property_change_handler)(struct _AtkObject*,void (**)(struct _AtkObject*,struct _AtkPropertyValues*));
     * }
     */
    public static void connect_property_change_handler$set(MemorySegment seg, MemorySegment x) {
        constants$1972.const$0.set(seg, x);
    }
    public static MemorySegment connect_property_change_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1972.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void connect_property_change_handler$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1972.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static connect_property_change_handler connect_property_change_handler(MemorySegment segment, Arena scope) {
        return connect_property_change_handler.ofAddress(connect_property_change_handler$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*remove_property_change_handler)(struct _AtkObject*,unsigned int);
     * }
     */
    public interface remove_property_change_handler {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(remove_property_change_handler fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1972.const$1, fi, constants$40.const$2, scope);
        }
        static remove_property_change_handler ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remove_property_change_handler$VH() {
        return constants$1972.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*remove_property_change_handler)(struct _AtkObject*,unsigned int);
     * }
     */
    public static MemorySegment remove_property_change_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1972.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*remove_property_change_handler)(struct _AtkObject*,unsigned int);
     * }
     */
    public static void remove_property_change_handler$set(MemorySegment seg, MemorySegment x) {
        constants$1972.const$2.set(seg, x);
    }
    public static MemorySegment remove_property_change_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1972.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_property_change_handler$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1972.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_property_change_handler remove_property_change_handler(MemorySegment segment, Arena scope) {
        return remove_property_change_handler.ofAddress(remove_property_change_handler$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*initialize)(struct _AtkObject*,void*);
     * }
     */
    public interface initialize {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(initialize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1972.const$3, fi, constants$13.const$4, scope);
        }
        static initialize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle initialize$VH() {
        return constants$1972.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*initialize)(struct _AtkObject*,void*);
     * }
     */
    public static MemorySegment initialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1972.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*initialize)(struct _AtkObject*,void*);
     * }
     */
    public static void initialize$set(MemorySegment seg, MemorySegment x) {
        constants$1972.const$4.set(seg, x);
    }
    public static MemorySegment initialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1972.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void initialize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1972.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static initialize initialize(MemorySegment segment, Arena scope) {
        return initialize.ofAddress(initialize$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*children_changed)(struct _AtkObject*,unsigned int,void*);
     * }
     */
    public interface children_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(children_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1972.const$5, fi, constants$42.const$4, scope);
        }
        static children_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$625.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle children_changed$VH() {
        return constants$1973.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*children_changed)(struct _AtkObject*,unsigned int,void*);
     * }
     */
    public static MemorySegment children_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1973.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*children_changed)(struct _AtkObject*,unsigned int,void*);
     * }
     */
    public static void children_changed$set(MemorySegment seg, MemorySegment x) {
        constants$1973.const$0.set(seg, x);
    }
    public static MemorySegment children_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1973.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void children_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1973.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static children_changed children_changed(MemorySegment segment, Arena scope) {
        return children_changed.ofAddress(children_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*focus_event)(struct _AtkObject*,int);
     * }
     */
    public interface focus_event {

        void apply(java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(focus_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1973.const$1, fi, constants$40.const$2, scope);
        }
        static focus_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle focus_event$VH() {
        return constants$1973.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*focus_event)(struct _AtkObject*,int);
     * }
     */
    public static MemorySegment focus_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1973.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*focus_event)(struct _AtkObject*,int);
     * }
     */
    public static void focus_event$set(MemorySegment seg, MemorySegment x) {
        constants$1973.const$2.set(seg, x);
    }
    public static MemorySegment focus_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1973.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void focus_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1973.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus_event focus_event(MemorySegment segment, Arena scope) {
        return focus_event.ofAddress(focus_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*property_change)(struct _AtkObject*,struct _AtkPropertyValues*);
     * }
     */
    public interface property_change {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(property_change fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1973.const$3, fi, constants$13.const$4, scope);
        }
        static property_change ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle property_change$VH() {
        return constants$1973.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*property_change)(struct _AtkObject*,struct _AtkPropertyValues*);
     * }
     */
    public static MemorySegment property_change$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1973.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*property_change)(struct _AtkObject*,struct _AtkPropertyValues*);
     * }
     */
    public static void property_change$set(MemorySegment seg, MemorySegment x) {
        constants$1973.const$4.set(seg, x);
    }
    public static MemorySegment property_change$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1973.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void property_change$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1973.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static property_change property_change(MemorySegment segment, Arena scope) {
        return property_change.ofAddress(property_change$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*state_change)(struct _AtkObject*,char*,int);
     * }
     */
    public interface state_change {

        void apply(java.lang.foreign.MemorySegment screen, java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(state_change fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1973.const$5, fi, constants$164.const$5, scope);
        }
        static state_change ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _screen, java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, _screen, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle state_change$VH() {
        return constants$1974.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*state_change)(struct _AtkObject*,char*,int);
     * }
     */
    public static MemorySegment state_change$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1974.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*state_change)(struct _AtkObject*,char*,int);
     * }
     */
    public static void state_change$set(MemorySegment seg, MemorySegment x) {
        constants$1974.const$0.set(seg, x);
    }
    public static MemorySegment state_change$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1974.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void state_change$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1974.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static state_change state_change(MemorySegment segment, Arena scope) {
        return state_change.ofAddress(state_change$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*visible_data_changed)(struct _AtkObject*);
     * }
     */
    public interface visible_data_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(visible_data_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1974.const$1, fi, constants$13.const$1, scope);
        }
        static visible_data_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle visible_data_changed$VH() {
        return constants$1974.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*visible_data_changed)(struct _AtkObject*);
     * }
     */
    public static MemorySegment visible_data_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1974.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*visible_data_changed)(struct _AtkObject*);
     * }
     */
    public static void visible_data_changed$set(MemorySegment seg, MemorySegment x) {
        constants$1974.const$2.set(seg, x);
    }
    public static MemorySegment visible_data_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1974.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void visible_data_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1974.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static visible_data_changed visible_data_changed(MemorySegment segment, Arena scope) {
        return visible_data_changed.ofAddress(visible_data_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*active_descendant_changed)(struct _AtkObject*,void**);
     * }
     */
    public interface active_descendant_changed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(active_descendant_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1974.const$3, fi, constants$13.const$4, scope);
        }
        static active_descendant_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle active_descendant_changed$VH() {
        return constants$1974.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*active_descendant_changed)(struct _AtkObject*,void**);
     * }
     */
    public static MemorySegment active_descendant_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1974.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*active_descendant_changed)(struct _AtkObject*,void**);
     * }
     */
    public static void active_descendant_changed$set(MemorySegment seg, MemorySegment x) {
        constants$1974.const$4.set(seg, x);
    }
    public static MemorySegment active_descendant_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1974.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void active_descendant_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1974.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static active_descendant_changed active_descendant_changed(MemorySegment segment, Arena scope) {
        return active_descendant_changed.ofAddress(active_descendant_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GSList* (*get_attributes)(struct _AtkObject*);
     * }
     */
    public interface get_attributes {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_attributes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1974.const$5, fi, constants$5.const$2, scope);
        }
        static get_attributes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_attributes$VH() {
        return constants$1975.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GSList* (*get_attributes)(struct _AtkObject*);
     * }
     */
    public static MemorySegment get_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1975.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GSList* (*get_attributes)(struct _AtkObject*);
     * }
     */
    public static void get_attributes$set(MemorySegment seg, MemorySegment x) {
        constants$1975.const$0.set(seg, x);
    }
    public static MemorySegment get_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1975.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1975.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_attributes get_attributes(MemorySegment segment, Arena scope) {
        return get_attributes.ofAddress(get_attributes$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_object_locale)(struct _AtkObject*);
     * }
     */
    public interface get_object_locale {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_object_locale fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1975.const$1, fi, constants$5.const$2, scope);
        }
        static get_object_locale ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_object_locale$VH() {
        return constants$1975.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_object_locale)(struct _AtkObject*);
     * }
     */
    public static MemorySegment get_object_locale$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1975.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_object_locale)(struct _AtkObject*);
     * }
     */
    public static void get_object_locale$set(MemorySegment seg, MemorySegment x) {
        constants$1975.const$2.set(seg, x);
    }
    public static MemorySegment get_object_locale$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1975.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_object_locale$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1975.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_object_locale get_object_locale(MemorySegment segment, Arena scope) {
        return get_object_locale.ofAddress(get_object_locale$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*pad1)(void*);
     * }
     */
    public interface pad1 {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(pad1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1975.const$3, fi, constants$10.const$5, scope);
        }
        static pad1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pad1$VH() {
        return constants$1975.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*pad1)(void*);
     * }
     */
    public static MemorySegment pad1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1975.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*pad1)(void*);
     * }
     */
    public static void pad1$set(MemorySegment seg, MemorySegment x) {
        constants$1975.const$4.set(seg, x);
    }
    public static MemorySegment pad1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1975.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pad1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1975.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static pad1 pad1(MemorySegment segment, Arena scope) {
        return pad1.ofAddress(pad1$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


