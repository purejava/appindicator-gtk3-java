// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _AtkObjectClass {
 *     GObjectClass parent;
 *     const gchar* (*get_name)(AtkObject*);
 *     const gchar* (*get_description)(AtkObject*);
 *     AtkObject* (*get_parent)(AtkObject*);
 *     gint (*get_n_children)(AtkObject*);
 *     AtkObject* (*ref_child)(AtkObject*,gint);
 *     gint (*get_index_in_parent)(AtkObject*);
 *     AtkRelationSet* (*ref_relation_set)(AtkObject*);
 *     AtkRole (*get_role)(AtkObject*);
 *     AtkLayer (*get_layer)(AtkObject*);
 *     gint (*get_mdi_zorder)(AtkObject*);
 *     AtkStateSet* (*ref_state_set)(AtkObject*);
 *     void (*set_name)(AtkObject*,const gchar*);
 *     void (*set_description)(AtkObject*,const gchar*);
 *     void (*set_parent)(AtkObject*,AtkObject*);
 *     void (*set_role)(AtkObject*,AtkRole);
 *     guint (*connect_property_change_handler)(AtkObject*,AtkPropertyChangeHandler*);
 *     void (*remove_property_change_handler)(AtkObject*,guint);
 *     void (*initialize)(AtkObject*,gpointer);
 *     void (*children_changed)(AtkObject*,guint,gpointer);
 *     void (*focus_event)(AtkObject*,gboolean);
 *     void (*property_change)(AtkObject*,AtkPropertyValues*);
 *     void (*state_change)(AtkObject*,const gchar*,gboolean);
 *     void (*visible_data_changed)(AtkObject*);
 *     void (*active_descendant_changed)(AtkObject*,gpointer*);
 *     AtkAttributeSet* (*get_attributes)(AtkObject*);
 *     const gchar* (*get_object_locale)(AtkObject*);
 *     AtkFunction pad1;
 * };
 * }
 */
public class _AtkObjectClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_description"),
        Constants$root.C_POINTER$LAYOUT.withName("get_parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_n_children"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_child"),
        Constants$root.C_POINTER$LAYOUT.withName("get_index_in_parent"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_relation_set"),
        Constants$root.C_POINTER$LAYOUT.withName("get_role"),
        Constants$root.C_POINTER$LAYOUT.withName("get_layer"),
        Constants$root.C_POINTER$LAYOUT.withName("get_mdi_zorder"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_state_set"),
        Constants$root.C_POINTER$LAYOUT.withName("set_name"),
        Constants$root.C_POINTER$LAYOUT.withName("set_description"),
        Constants$root.C_POINTER$LAYOUT.withName("set_parent"),
        Constants$root.C_POINTER$LAYOUT.withName("set_role"),
        Constants$root.C_POINTER$LAYOUT.withName("connect_property_change_handler"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_property_change_handler"),
        Constants$root.C_POINTER$LAYOUT.withName("initialize"),
        Constants$root.C_POINTER$LAYOUT.withName("children_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("focus_event"),
        Constants$root.C_POINTER$LAYOUT.withName("property_change"),
        Constants$root.C_POINTER$LAYOUT.withName("state_change"),
        Constants$root.C_POINTER$LAYOUT.withName("visible_data_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("active_descendant_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_object_locale"),
        Constants$root.C_POINTER$LAYOUT.withName("pad1")
    ).withName("_AtkObjectClass");
    public static MemoryLayout $LAYOUT() {
        return _AtkObjectClass.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor get_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_name_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name_UP$MH = RuntimeHelper.upcallHandle(get_name.class, "apply", _AtkObjectClass.get_name_UP$FUNC);
    static final FunctionDescriptor get_name_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_name_DOWN$FUNC
    );
    /**
     * {@snippet :
 * const gchar* (*get_name)(AtkObject*);
     * }
     */
    public interface get_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_name fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.get_name_UP$MH, fi, _AtkObjectClass.get_name$FUNC, scope);
        }
        static get_name ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_name_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_name"));
    public static VarHandle get_name$VH() {
        return _AtkObjectClass.get_name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const gchar* (*get_name)(AtkObject*);
     * }
     */
    public static MemorySegment get_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const gchar* (*get_name)(AtkObject*);
     * }
     */
    public static void get_name$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.get_name$VH.set(seg, x);
    }
    public static MemorySegment get_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.get_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name(MemorySegment segment, SegmentScope scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    static final FunctionDescriptor get_description$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_description_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_description_UP$MH = RuntimeHelper.upcallHandle(get_description.class, "apply", _AtkObjectClass.get_description_UP$FUNC);
    static final FunctionDescriptor get_description_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_description_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_description_DOWN$FUNC
    );
    /**
     * {@snippet :
 * const gchar* (*get_description)(AtkObject*);
     * }
     */
    public interface get_description {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_description fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.get_description_UP$MH, fi, _AtkObjectClass.get_description$FUNC, scope);
        }
        static get_description ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_description_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_description"));
    public static VarHandle get_description$VH() {
        return _AtkObjectClass.get_description$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const gchar* (*get_description)(AtkObject*);
     * }
     */
    public static MemorySegment get_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_description$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const gchar* (*get_description)(AtkObject*);
     * }
     */
    public static void get_description$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.get_description$VH.set(seg, x);
    }
    public static MemorySegment get_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_description$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.get_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_description get_description(MemorySegment segment, SegmentScope scope) {
        return get_description.ofAddress(get_description$get(segment), scope);
    }
    static final FunctionDescriptor get_parent$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_parent_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parent_UP$MH = RuntimeHelper.upcallHandle(get_parent.class, "apply", _AtkObjectClass.get_parent_UP$FUNC);
    static final FunctionDescriptor get_parent_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parent_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_parent_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkObject* (*get_parent)(AtkObject*);
     * }
     */
    public interface get_parent {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_parent fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.get_parent_UP$MH, fi, _AtkObjectClass.get_parent$FUNC, scope);
        }
        static get_parent ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_parent_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_parent"));
    public static VarHandle get_parent$VH() {
        return _AtkObjectClass.get_parent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkObject* (*get_parent)(AtkObject*);
     * }
     */
    public static MemorySegment get_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_parent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkObject* (*get_parent)(AtkObject*);
     * }
     */
    public static void get_parent$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.get_parent$VH.set(seg, x);
    }
    public static MemorySegment get_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parent$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.get_parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parent get_parent(MemorySegment segment, SegmentScope scope) {
        return get_parent.ofAddress(get_parent$get(segment), scope);
    }
    static final FunctionDescriptor get_n_children$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_n_children_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_children_UP$MH = RuntimeHelper.upcallHandle(get_n_children.class, "apply", _AtkObjectClass.get_n_children_UP$FUNC);
    static final FunctionDescriptor get_n_children_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_children_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_n_children_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*get_n_children)(AtkObject*);
     * }
     */
    public interface get_n_children {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_n_children fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.get_n_children_UP$MH, fi, _AtkObjectClass.get_n_children$FUNC, scope);
        }
        static get_n_children ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkObjectClass.get_n_children_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_n_children$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_n_children"));
    public static VarHandle get_n_children$VH() {
        return _AtkObjectClass.get_n_children$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*get_n_children)(AtkObject*);
     * }
     */
    public static MemorySegment get_n_children$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_n_children$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*get_n_children)(AtkObject*);
     * }
     */
    public static void get_n_children$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.get_n_children$VH.set(seg, x);
    }
    public static MemorySegment get_n_children$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_n_children$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_children$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.get_n_children$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_children get_n_children(MemorySegment segment, SegmentScope scope) {
        return get_n_children.ofAddress(get_n_children$get(segment), scope);
    }
    static final FunctionDescriptor ref_child$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor ref_child_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle ref_child_UP$MH = RuntimeHelper.upcallHandle(ref_child.class, "apply", _AtkObjectClass.ref_child_UP$FUNC);
    static final FunctionDescriptor ref_child_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle ref_child_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.ref_child_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkObject* (*ref_child)(AtkObject*,gint);
     * }
     */
    public interface ref_child {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(ref_child fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.ref_child_UP$MH, fi, _AtkObjectClass.ref_child$FUNC, scope);
        }
        static ref_child ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkObjectClass.ref_child_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_child$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_child"));
    public static VarHandle ref_child$VH() {
        return _AtkObjectClass.ref_child$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkObject* (*ref_child)(AtkObject*,gint);
     * }
     */
    public static MemorySegment ref_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.ref_child$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkObject* (*ref_child)(AtkObject*,gint);
     * }
     */
    public static void ref_child$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.ref_child$VH.set(seg, x);
    }
    public static MemorySegment ref_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.ref_child$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_child$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.ref_child$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_child ref_child(MemorySegment segment, SegmentScope scope) {
        return ref_child.ofAddress(ref_child$get(segment), scope);
    }
    static final FunctionDescriptor get_index_in_parent$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_index_in_parent_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_index_in_parent_UP$MH = RuntimeHelper.upcallHandle(get_index_in_parent.class, "apply", _AtkObjectClass.get_index_in_parent_UP$FUNC);
    static final FunctionDescriptor get_index_in_parent_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_index_in_parent_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_index_in_parent_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*get_index_in_parent)(AtkObject*);
     * }
     */
    public interface get_index_in_parent {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_index_in_parent fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.get_index_in_parent_UP$MH, fi, _AtkObjectClass.get_index_in_parent$FUNC, scope);
        }
        static get_index_in_parent ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkObjectClass.get_index_in_parent_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_index_in_parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_index_in_parent"));
    public static VarHandle get_index_in_parent$VH() {
        return _AtkObjectClass.get_index_in_parent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*get_index_in_parent)(AtkObject*);
     * }
     */
    public static MemorySegment get_index_in_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_index_in_parent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*get_index_in_parent)(AtkObject*);
     * }
     */
    public static void get_index_in_parent$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.get_index_in_parent$VH.set(seg, x);
    }
    public static MemorySegment get_index_in_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_index_in_parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_index_in_parent$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.get_index_in_parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_index_in_parent get_index_in_parent(MemorySegment segment, SegmentScope scope) {
        return get_index_in_parent.ofAddress(get_index_in_parent$get(segment), scope);
    }
    static final FunctionDescriptor ref_relation_set$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ref_relation_set_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_relation_set_UP$MH = RuntimeHelper.upcallHandle(ref_relation_set.class, "apply", _AtkObjectClass.ref_relation_set_UP$FUNC);
    static final FunctionDescriptor ref_relation_set_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_relation_set_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.ref_relation_set_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkRelationSet* (*ref_relation_set)(AtkObject*);
     * }
     */
    public interface ref_relation_set {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(ref_relation_set fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.ref_relation_set_UP$MH, fi, _AtkObjectClass.ref_relation_set$FUNC, scope);
        }
        static ref_relation_set ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkObjectClass.ref_relation_set_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_relation_set$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_relation_set"));
    public static VarHandle ref_relation_set$VH() {
        return _AtkObjectClass.ref_relation_set$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkRelationSet* (*ref_relation_set)(AtkObject*);
     * }
     */
    public static MemorySegment ref_relation_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.ref_relation_set$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkRelationSet* (*ref_relation_set)(AtkObject*);
     * }
     */
    public static void ref_relation_set$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.ref_relation_set$VH.set(seg, x);
    }
    public static MemorySegment ref_relation_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.ref_relation_set$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_relation_set$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.ref_relation_set$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_relation_set ref_relation_set(MemorySegment segment, SegmentScope scope) {
        return ref_relation_set.ofAddress(ref_relation_set$get(segment), scope);
    }
    static final FunctionDescriptor get_role$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_role_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_role_UP$MH = RuntimeHelper.upcallHandle(get_role.class, "apply", _AtkObjectClass.get_role_UP$FUNC);
    static final FunctionDescriptor get_role_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_role_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_role_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkRole (*get_role)(AtkObject*);
     * }
     */
    public interface get_role {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_role fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.get_role_UP$MH, fi, _AtkObjectClass.get_role$FUNC, scope);
        }
        static get_role ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkObjectClass.get_role_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_role$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_role"));
    public static VarHandle get_role$VH() {
        return _AtkObjectClass.get_role$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkRole (*get_role)(AtkObject*);
     * }
     */
    public static MemorySegment get_role$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_role$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkRole (*get_role)(AtkObject*);
     * }
     */
    public static void get_role$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.get_role$VH.set(seg, x);
    }
    public static MemorySegment get_role$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_role$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_role$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.get_role$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_role get_role(MemorySegment segment, SegmentScope scope) {
        return get_role.ofAddress(get_role$get(segment), scope);
    }
    static final FunctionDescriptor get_layer$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_layer_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_layer_UP$MH = RuntimeHelper.upcallHandle(get_layer.class, "apply", _AtkObjectClass.get_layer_UP$FUNC);
    static final FunctionDescriptor get_layer_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_layer_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_layer_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkLayer (*get_layer)(AtkObject*);
     * }
     */
    public interface get_layer {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_layer fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.get_layer_UP$MH, fi, _AtkObjectClass.get_layer$FUNC, scope);
        }
        static get_layer ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkObjectClass.get_layer_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_layer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_layer"));
    public static VarHandle get_layer$VH() {
        return _AtkObjectClass.get_layer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkLayer (*get_layer)(AtkObject*);
     * }
     */
    public static MemorySegment get_layer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_layer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkLayer (*get_layer)(AtkObject*);
     * }
     */
    public static void get_layer$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.get_layer$VH.set(seg, x);
    }
    public static MemorySegment get_layer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_layer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_layer$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.get_layer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_layer get_layer(MemorySegment segment, SegmentScope scope) {
        return get_layer.ofAddress(get_layer$get(segment), scope);
    }
    static final FunctionDescriptor get_mdi_zorder$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_mdi_zorder_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_mdi_zorder_UP$MH = RuntimeHelper.upcallHandle(get_mdi_zorder.class, "apply", _AtkObjectClass.get_mdi_zorder_UP$FUNC);
    static final FunctionDescriptor get_mdi_zorder_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_mdi_zorder_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_mdi_zorder_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*get_mdi_zorder)(AtkObject*);
     * }
     */
    public interface get_mdi_zorder {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_mdi_zorder fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.get_mdi_zorder_UP$MH, fi, _AtkObjectClass.get_mdi_zorder$FUNC, scope);
        }
        static get_mdi_zorder ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkObjectClass.get_mdi_zorder_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_mdi_zorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_mdi_zorder"));
    public static VarHandle get_mdi_zorder$VH() {
        return _AtkObjectClass.get_mdi_zorder$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*get_mdi_zorder)(AtkObject*);
     * }
     */
    public static MemorySegment get_mdi_zorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_mdi_zorder$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*get_mdi_zorder)(AtkObject*);
     * }
     */
    public static void get_mdi_zorder$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.get_mdi_zorder$VH.set(seg, x);
    }
    public static MemorySegment get_mdi_zorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_mdi_zorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mdi_zorder$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.get_mdi_zorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mdi_zorder get_mdi_zorder(MemorySegment segment, SegmentScope scope) {
        return get_mdi_zorder.ofAddress(get_mdi_zorder$get(segment), scope);
    }
    static final FunctionDescriptor ref_state_set$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ref_state_set_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_state_set_UP$MH = RuntimeHelper.upcallHandle(ref_state_set.class, "apply", _AtkObjectClass.ref_state_set_UP$FUNC);
    static final FunctionDescriptor ref_state_set_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_state_set_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.ref_state_set_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkStateSet* (*ref_state_set)(AtkObject*);
     * }
     */
    public interface ref_state_set {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(ref_state_set fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.ref_state_set_UP$MH, fi, _AtkObjectClass.ref_state_set$FUNC, scope);
        }
        static ref_state_set ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkObjectClass.ref_state_set_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_state_set$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_state_set"));
    public static VarHandle ref_state_set$VH() {
        return _AtkObjectClass.ref_state_set$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkStateSet* (*ref_state_set)(AtkObject*);
     * }
     */
    public static MemorySegment ref_state_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.ref_state_set$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkStateSet* (*ref_state_set)(AtkObject*);
     * }
     */
    public static void ref_state_set$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.ref_state_set$VH.set(seg, x);
    }
    public static MemorySegment ref_state_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.ref_state_set$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_state_set$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.ref_state_set$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_state_set ref_state_set(MemorySegment segment, SegmentScope scope) {
        return ref_state_set.ofAddress(ref_state_set$get(segment), scope);
    }
    static final FunctionDescriptor set_name$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_name_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_name_UP$MH = RuntimeHelper.upcallHandle(set_name.class, "apply", _AtkObjectClass.set_name_UP$FUNC);
    static final FunctionDescriptor set_name_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_name_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.set_name_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_name)(AtkObject*,const gchar*);
     * }
     */
    public interface set_name {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_name fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.set_name_UP$MH, fi, _AtkObjectClass.set_name$FUNC, scope);
        }
        static set_name ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _AtkObjectClass.set_name_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_name"));
    public static VarHandle set_name$VH() {
        return _AtkObjectClass.set_name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_name)(AtkObject*,const gchar*);
     * }
     */
    public static MemorySegment set_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.set_name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_name)(AtkObject*,const gchar*);
     * }
     */
    public static void set_name$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.set_name$VH.set(seg, x);
    }
    public static MemorySegment set_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.set_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_name$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.set_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_name set_name(MemorySegment segment, SegmentScope scope) {
        return set_name.ofAddress(set_name$get(segment), scope);
    }
    static final FunctionDescriptor set_description$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_description_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_description_UP$MH = RuntimeHelper.upcallHandle(set_description.class, "apply", _AtkObjectClass.set_description_UP$FUNC);
    static final FunctionDescriptor set_description_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_description_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.set_description_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_description)(AtkObject*,const gchar*);
     * }
     */
    public interface set_description {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_description fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.set_description_UP$MH, fi, _AtkObjectClass.set_description$FUNC, scope);
        }
        static set_description ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _AtkObjectClass.set_description_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_description"));
    public static VarHandle set_description$VH() {
        return _AtkObjectClass.set_description$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_description)(AtkObject*,const gchar*);
     * }
     */
    public static MemorySegment set_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.set_description$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_description)(AtkObject*,const gchar*);
     * }
     */
    public static void set_description$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.set_description$VH.set(seg, x);
    }
    public static MemorySegment set_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.set_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_description$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.set_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_description set_description(MemorySegment segment, SegmentScope scope) {
        return set_description.ofAddress(set_description$get(segment), scope);
    }
    static final FunctionDescriptor set_parent$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_parent_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_parent_UP$MH = RuntimeHelper.upcallHandle(set_parent.class, "apply", _AtkObjectClass.set_parent_UP$FUNC);
    static final FunctionDescriptor set_parent_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_parent_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.set_parent_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_parent)(AtkObject*,AtkObject*);
     * }
     */
    public interface set_parent {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_parent fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.set_parent_UP$MH, fi, _AtkObjectClass.set_parent$FUNC, scope);
        }
        static set_parent ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _AtkObjectClass.set_parent_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_parent"));
    public static VarHandle set_parent$VH() {
        return _AtkObjectClass.set_parent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_parent)(AtkObject*,AtkObject*);
     * }
     */
    public static MemorySegment set_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.set_parent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_parent)(AtkObject*,AtkObject*);
     * }
     */
    public static void set_parent$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.set_parent$VH.set(seg, x);
    }
    public static MemorySegment set_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.set_parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_parent$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.set_parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_parent set_parent(MemorySegment segment, SegmentScope scope) {
        return set_parent.ofAddress(set_parent$get(segment), scope);
    }
    static final FunctionDescriptor set_role$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor set_role_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_role_UP$MH = RuntimeHelper.upcallHandle(set_role.class, "apply", _AtkObjectClass.set_role_UP$FUNC);
    static final FunctionDescriptor set_role_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_role_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.set_role_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_role)(AtkObject*,AtkRole);
     * }
     */
    public interface set_role {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(set_role fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.set_role_UP$MH, fi, _AtkObjectClass.set_role$FUNC, scope);
        }
        static set_role ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _AtkObjectClass.set_role_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_role$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_role"));
    public static VarHandle set_role$VH() {
        return _AtkObjectClass.set_role$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_role)(AtkObject*,AtkRole);
     * }
     */
    public static MemorySegment set_role$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.set_role$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_role)(AtkObject*,AtkRole);
     * }
     */
    public static void set_role$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.set_role$VH.set(seg, x);
    }
    public static MemorySegment set_role$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.set_role$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_role$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.set_role$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_role set_role(MemorySegment segment, SegmentScope scope) {
        return set_role.ofAddress(set_role$get(segment), scope);
    }
    static final FunctionDescriptor connect_property_change_handler$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor connect_property_change_handler_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle connect_property_change_handler_UP$MH = RuntimeHelper.upcallHandle(connect_property_change_handler.class, "apply", _AtkObjectClass.connect_property_change_handler_UP$FUNC);
    static final FunctionDescriptor connect_property_change_handler_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle connect_property_change_handler_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.connect_property_change_handler_DOWN$FUNC
    );
    /**
     * {@snippet :
 * guint (*connect_property_change_handler)(AtkObject*,AtkPropertyChangeHandler*);
     * }
     */
    public interface connect_property_change_handler {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(connect_property_change_handler fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.connect_property_change_handler_UP$MH, fi, _AtkObjectClass.connect_property_change_handler$FUNC, scope);
        }
        static connect_property_change_handler ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)_AtkObjectClass.connect_property_change_handler_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle connect_property_change_handler$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("connect_property_change_handler"));
    public static VarHandle connect_property_change_handler$VH() {
        return _AtkObjectClass.connect_property_change_handler$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint (*connect_property_change_handler)(AtkObject*,AtkPropertyChangeHandler*);
     * }
     */
    public static MemorySegment connect_property_change_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.connect_property_change_handler$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint (*connect_property_change_handler)(AtkObject*,AtkPropertyChangeHandler*);
     * }
     */
    public static void connect_property_change_handler$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.connect_property_change_handler$VH.set(seg, x);
    }
    public static MemorySegment connect_property_change_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.connect_property_change_handler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void connect_property_change_handler$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.connect_property_change_handler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static connect_property_change_handler connect_property_change_handler(MemorySegment segment, SegmentScope scope) {
        return connect_property_change_handler.ofAddress(connect_property_change_handler$get(segment), scope);
    }
    static final FunctionDescriptor remove_property_change_handler$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor remove_property_change_handler_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_property_change_handler_UP$MH = RuntimeHelper.upcallHandle(remove_property_change_handler.class, "apply", _AtkObjectClass.remove_property_change_handler_UP$FUNC);
    static final FunctionDescriptor remove_property_change_handler_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_property_change_handler_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.remove_property_change_handler_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*remove_property_change_handler)(AtkObject*,guint);
     * }
     */
    public interface remove_property_change_handler {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(remove_property_change_handler fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.remove_property_change_handler_UP$MH, fi, _AtkObjectClass.remove_property_change_handler$FUNC, scope);
        }
        static remove_property_change_handler ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _AtkObjectClass.remove_property_change_handler_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_property_change_handler$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_property_change_handler"));
    public static VarHandle remove_property_change_handler$VH() {
        return _AtkObjectClass.remove_property_change_handler$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*remove_property_change_handler)(AtkObject*,guint);
     * }
     */
    public static MemorySegment remove_property_change_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.remove_property_change_handler$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*remove_property_change_handler)(AtkObject*,guint);
     * }
     */
    public static void remove_property_change_handler$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.remove_property_change_handler$VH.set(seg, x);
    }
    public static MemorySegment remove_property_change_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.remove_property_change_handler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_property_change_handler$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.remove_property_change_handler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_property_change_handler remove_property_change_handler(MemorySegment segment, SegmentScope scope) {
        return remove_property_change_handler.ofAddress(remove_property_change_handler$get(segment), scope);
    }
    static final FunctionDescriptor initialize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor initialize_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle initialize_UP$MH = RuntimeHelper.upcallHandle(initialize.class, "apply", _AtkObjectClass.initialize_UP$FUNC);
    static final FunctionDescriptor initialize_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle initialize_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.initialize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*initialize)(AtkObject*,gpointer);
     * }
     */
    public interface initialize {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(initialize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.initialize_UP$MH, fi, _AtkObjectClass.initialize$FUNC, scope);
        }
        static initialize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    _AtkObjectClass.initialize_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle initialize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("initialize"));
    public static VarHandle initialize$VH() {
        return _AtkObjectClass.initialize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*initialize)(AtkObject*,gpointer);
     * }
     */
    public static MemorySegment initialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.initialize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*initialize)(AtkObject*,gpointer);
     * }
     */
    public static void initialize$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.initialize$VH.set(seg, x);
    }
    public static MemorySegment initialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.initialize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void initialize$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.initialize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static initialize initialize(MemorySegment segment, SegmentScope scope) {
        return initialize.ofAddress(initialize$get(segment), scope);
    }
    static final FunctionDescriptor children_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor children_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle children_changed_UP$MH = RuntimeHelper.upcallHandle(children_changed.class, "apply", _AtkObjectClass.children_changed_UP$FUNC);
    static final FunctionDescriptor children_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle children_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.children_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*children_changed)(AtkObject*,guint,gpointer);
     * }
     */
    public interface children_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(children_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.children_changed_UP$MH, fi, _AtkObjectClass.children_changed$FUNC, scope);
        }
        static children_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    _AtkObjectClass.children_changed_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle children_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("children_changed"));
    public static VarHandle children_changed$VH() {
        return _AtkObjectClass.children_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*children_changed)(AtkObject*,guint,gpointer);
     * }
     */
    public static MemorySegment children_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.children_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*children_changed)(AtkObject*,guint,gpointer);
     * }
     */
    public static void children_changed$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.children_changed$VH.set(seg, x);
    }
    public static MemorySegment children_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.children_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void children_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.children_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static children_changed children_changed(MemorySegment segment, SegmentScope scope) {
        return children_changed.ofAddress(children_changed$get(segment), scope);
    }
    static final FunctionDescriptor focus_event$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor focus_event_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle focus_event_UP$MH = RuntimeHelper.upcallHandle(focus_event.class, "apply", _AtkObjectClass.focus_event_UP$FUNC);
    static final FunctionDescriptor focus_event_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle focus_event_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.focus_event_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*focus_event)(AtkObject*,gboolean);
     * }
     */
    public interface focus_event {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(focus_event fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.focus_event_UP$MH, fi, _AtkObjectClass.focus_event$FUNC, scope);
        }
        static focus_event ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _AtkObjectClass.focus_event_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle focus_event$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("focus_event"));
    public static VarHandle focus_event$VH() {
        return _AtkObjectClass.focus_event$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*focus_event)(AtkObject*,gboolean);
     * }
     */
    public static MemorySegment focus_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.focus_event$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*focus_event)(AtkObject*,gboolean);
     * }
     */
    public static void focus_event$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.focus_event$VH.set(seg, x);
    }
    public static MemorySegment focus_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.focus_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void focus_event$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.focus_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus_event focus_event(MemorySegment segment, SegmentScope scope) {
        return focus_event.ofAddress(focus_event$get(segment), scope);
    }
    static final FunctionDescriptor property_change$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor property_change_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle property_change_UP$MH = RuntimeHelper.upcallHandle(property_change.class, "apply", _AtkObjectClass.property_change_UP$FUNC);
    static final FunctionDescriptor property_change_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle property_change_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.property_change_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*property_change)(AtkObject*,AtkPropertyValues*);
     * }
     */
    public interface property_change {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(property_change fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.property_change_UP$MH, fi, _AtkObjectClass.property_change$FUNC, scope);
        }
        static property_change ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _AtkObjectClass.property_change_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle property_change$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("property_change"));
    public static VarHandle property_change$VH() {
        return _AtkObjectClass.property_change$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*property_change)(AtkObject*,AtkPropertyValues*);
     * }
     */
    public static MemorySegment property_change$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.property_change$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*property_change)(AtkObject*,AtkPropertyValues*);
     * }
     */
    public static void property_change$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.property_change$VH.set(seg, x);
    }
    public static MemorySegment property_change$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.property_change$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void property_change$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.property_change$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static property_change property_change(MemorySegment segment, SegmentScope scope) {
        return property_change.ofAddress(property_change$get(segment), scope);
    }
    static final FunctionDescriptor state_change$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor state_change_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle state_change_UP$MH = RuntimeHelper.upcallHandle(state_change.class, "apply", _AtkObjectClass.state_change_UP$FUNC);
    static final FunctionDescriptor state_change_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle state_change_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.state_change_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*state_change)(AtkObject*,const gchar*,gboolean);
     * }
     */
    public interface state_change {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(state_change fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.state_change_UP$MH, fi, _AtkObjectClass.state_change$FUNC, scope);
        }
        static state_change ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    _AtkObjectClass.state_change_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle state_change$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("state_change"));
    public static VarHandle state_change$VH() {
        return _AtkObjectClass.state_change$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*state_change)(AtkObject*,const gchar*,gboolean);
     * }
     */
    public static MemorySegment state_change$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.state_change$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*state_change)(AtkObject*,const gchar*,gboolean);
     * }
     */
    public static void state_change$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.state_change$VH.set(seg, x);
    }
    public static MemorySegment state_change$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.state_change$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void state_change$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.state_change$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static state_change state_change(MemorySegment segment, SegmentScope scope) {
        return state_change.ofAddress(state_change$get(segment), scope);
    }
    static final FunctionDescriptor visible_data_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor visible_data_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle visible_data_changed_UP$MH = RuntimeHelper.upcallHandle(visible_data_changed.class, "apply", _AtkObjectClass.visible_data_changed_UP$FUNC);
    static final FunctionDescriptor visible_data_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle visible_data_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.visible_data_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*visible_data_changed)(AtkObject*);
     * }
     */
    public interface visible_data_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(visible_data_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.visible_data_changed_UP$MH, fi, _AtkObjectClass.visible_data_changed$FUNC, scope);
        }
        static visible_data_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _AtkObjectClass.visible_data_changed_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle visible_data_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("visible_data_changed"));
    public static VarHandle visible_data_changed$VH() {
        return _AtkObjectClass.visible_data_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*visible_data_changed)(AtkObject*);
     * }
     */
    public static MemorySegment visible_data_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.visible_data_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*visible_data_changed)(AtkObject*);
     * }
     */
    public static void visible_data_changed$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.visible_data_changed$VH.set(seg, x);
    }
    public static MemorySegment visible_data_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.visible_data_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void visible_data_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.visible_data_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static visible_data_changed visible_data_changed(MemorySegment segment, SegmentScope scope) {
        return visible_data_changed.ofAddress(visible_data_changed$get(segment), scope);
    }
    static final FunctionDescriptor active_descendant_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor active_descendant_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle active_descendant_changed_UP$MH = RuntimeHelper.upcallHandle(active_descendant_changed.class, "apply", _AtkObjectClass.active_descendant_changed_UP$FUNC);
    static final FunctionDescriptor active_descendant_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle active_descendant_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.active_descendant_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*active_descendant_changed)(AtkObject*,gpointer*);
     * }
     */
    public interface active_descendant_changed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(active_descendant_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.active_descendant_changed_UP$MH, fi, _AtkObjectClass.active_descendant_changed$FUNC, scope);
        }
        static active_descendant_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _AtkObjectClass.active_descendant_changed_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle active_descendant_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("active_descendant_changed"));
    public static VarHandle active_descendant_changed$VH() {
        return _AtkObjectClass.active_descendant_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*active_descendant_changed)(AtkObject*,gpointer*);
     * }
     */
    public static MemorySegment active_descendant_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.active_descendant_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*active_descendant_changed)(AtkObject*,gpointer*);
     * }
     */
    public static void active_descendant_changed$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.active_descendant_changed$VH.set(seg, x);
    }
    public static MemorySegment active_descendant_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.active_descendant_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void active_descendant_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.active_descendant_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static active_descendant_changed active_descendant_changed(MemorySegment segment, SegmentScope scope) {
        return active_descendant_changed.ofAddress(active_descendant_changed$get(segment), scope);
    }
    static final FunctionDescriptor get_attributes$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_attributes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_attributes_UP$MH = RuntimeHelper.upcallHandle(get_attributes.class, "apply", _AtkObjectClass.get_attributes_UP$FUNC);
    static final FunctionDescriptor get_attributes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_attributes_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_attributes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkAttributeSet* (*get_attributes)(AtkObject*);
     * }
     */
    public interface get_attributes {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_attributes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.get_attributes_UP$MH, fi, _AtkObjectClass.get_attributes$FUNC, scope);
        }
        static get_attributes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_attributes_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_attributes"));
    public static VarHandle get_attributes$VH() {
        return _AtkObjectClass.get_attributes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkAttributeSet* (*get_attributes)(AtkObject*);
     * }
     */
    public static MemorySegment get_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_attributes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkAttributeSet* (*get_attributes)(AtkObject*);
     * }
     */
    public static void get_attributes$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.get_attributes$VH.set(seg, x);
    }
    public static MemorySegment get_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.get_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_attributes get_attributes(MemorySegment segment, SegmentScope scope) {
        return get_attributes.ofAddress(get_attributes$get(segment), scope);
    }
    static final FunctionDescriptor get_object_locale$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_object_locale_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_object_locale_UP$MH = RuntimeHelper.upcallHandle(get_object_locale.class, "apply", _AtkObjectClass.get_object_locale_UP$FUNC);
    static final FunctionDescriptor get_object_locale_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_object_locale_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_object_locale_DOWN$FUNC
    );
    /**
     * {@snippet :
 * const gchar* (*get_object_locale)(AtkObject*);
     * }
     */
    public interface get_object_locale {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_object_locale fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkObjectClass.get_object_locale_UP$MH, fi, _AtkObjectClass.get_object_locale$FUNC, scope);
        }
        static get_object_locale ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_object_locale_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_object_locale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_object_locale"));
    public static VarHandle get_object_locale$VH() {
        return _AtkObjectClass.get_object_locale$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const gchar* (*get_object_locale)(AtkObject*);
     * }
     */
    public static MemorySegment get_object_locale$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_object_locale$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const gchar* (*get_object_locale)(AtkObject*);
     * }
     */
    public static void get_object_locale$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.get_object_locale$VH.set(seg, x);
    }
    public static MemorySegment get_object_locale$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.get_object_locale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_object_locale$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.get_object_locale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_object_locale get_object_locale(MemorySegment segment, SegmentScope scope) {
        return get_object_locale.ofAddress(get_object_locale$get(segment), scope);
    }
    static final VarHandle pad1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pad1"));
    public static VarHandle pad1$VH() {
        return _AtkObjectClass.pad1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkFunction pad1;
     * }
     */
    public static MemorySegment pad1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.pad1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkFunction pad1;
     * }
     */
    public static void pad1$set(MemorySegment seg, MemorySegment x) {
        _AtkObjectClass.pad1$VH.set(seg, x);
    }
    public static MemorySegment pad1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkObjectClass.pad1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pad1$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkObjectClass.pad1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AtkFunction pad1(MemorySegment segment, SegmentScope scope) {
        return AtkFunction.ofAddress(pad1$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


