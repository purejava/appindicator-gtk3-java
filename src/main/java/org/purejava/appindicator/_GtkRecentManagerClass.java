// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkRecentManagerClass {
 *     struct _GObjectClass parent_class;
 *     void (*changed)(struct _GtkRecentManager*);
 *     void (*_gtk_recent1)();
 *     void (*_gtk_recent2)();
 *     void (*_gtk_recent3)();
 *     void (*_gtk_recent4)();
 * };
 * }
 */
public class _GtkRecentManagerClass {

    public static MemoryLayout $LAYOUT() {
        return constants$3010.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*changed)(struct _GtkRecentManager*);
     * }
     */
    public interface changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3011.const$0, fi, constants$13.const$1, scope);
        }
        static changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle changed$VH() {
        return constants$3011.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*changed)(struct _GtkRecentManager*);
     * }
     */
    public static MemorySegment changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3011.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*changed)(struct _GtkRecentManager*);
     * }
     */
    public static void changed$set(MemorySegment seg, MemorySegment x) {
        constants$3011.const$1.set(seg, x);
    }
    public static MemorySegment changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3011.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3011.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed(MemorySegment segment, Arena scope) {
        return changed.ofAddress(changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_recent1)();
     * }
     */
    public interface _gtk_recent1 {

        void apply();
        static MemorySegment allocate(_gtk_recent1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3011.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_recent1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_recent1$VH() {
        return constants$3011.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_recent1)();
     * }
     */
    public static MemorySegment _gtk_recent1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3011.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_recent1)();
     * }
     */
    public static void _gtk_recent1$set(MemorySegment seg, MemorySegment x) {
        constants$3011.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_recent1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3011.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_recent1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3011.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_recent1 _gtk_recent1(MemorySegment segment, Arena scope) {
        return _gtk_recent1.ofAddress(_gtk_recent1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_recent2)();
     * }
     */
    public interface _gtk_recent2 {

        void apply();
        static MemorySegment allocate(_gtk_recent2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3011.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_recent2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_recent2$VH() {
        return constants$3011.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_recent2)();
     * }
     */
    public static MemorySegment _gtk_recent2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3011.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_recent2)();
     * }
     */
    public static void _gtk_recent2$set(MemorySegment seg, MemorySegment x) {
        constants$3011.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_recent2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3011.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_recent2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3011.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_recent2 _gtk_recent2(MemorySegment segment, Arena scope) {
        return _gtk_recent2.ofAddress(_gtk_recent2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_recent3)();
     * }
     */
    public interface _gtk_recent3 {

        void apply();
        static MemorySegment allocate(_gtk_recent3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3012.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_recent3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_recent3$VH() {
        return constants$3012.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_recent3)();
     * }
     */
    public static MemorySegment _gtk_recent3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3012.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_recent3)();
     * }
     */
    public static void _gtk_recent3$set(MemorySegment seg, MemorySegment x) {
        constants$3012.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_recent3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3012.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_recent3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3012.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_recent3 _gtk_recent3(MemorySegment segment, Arena scope) {
        return _gtk_recent3.ofAddress(_gtk_recent3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_recent4)();
     * }
     */
    public interface _gtk_recent4 {

        void apply();
        static MemorySegment allocate(_gtk_recent4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3012.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_recent4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_recent4$VH() {
        return constants$3012.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_recent4)();
     * }
     */
    public static MemorySegment _gtk_recent4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3012.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_recent4)();
     * }
     */
    public static void _gtk_recent4$set(MemorySegment seg, MemorySegment x) {
        constants$3012.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_recent4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3012.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_recent4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3012.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_recent4 _gtk_recent4(MemorySegment segment, Arena scope) {
        return _gtk_recent4.ofAddress(_gtk_recent4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


