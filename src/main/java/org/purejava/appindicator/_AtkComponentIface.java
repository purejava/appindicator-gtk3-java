// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _AtkComponentIface {
 *     struct _GTypeInterface parent;
 *     unsigned int (*add_focus_handler)(struct _AtkComponent*,void (*)(struct _AtkObject*,int));
 *     int (*contains)(struct _AtkComponent*,int,int,enum AtkCoordType);
 *     struct _AtkObject* (*ref_accessible_at_point)(struct _AtkComponent*,int,int,enum AtkCoordType);
 *     void (*get_extents)(struct _AtkComponent*,int*,int*,int*,int*,enum AtkCoordType);
 *     void (*get_position)(struct _AtkComponent*,int*,int*,enum AtkCoordType);
 *     void (*get_size)(struct _AtkComponent*,int*,int*);
 *     int (*grab_focus)(struct _AtkComponent*);
 *     void (*remove_focus_handler)(struct _AtkComponent*,unsigned int);
 *     int (*set_extents)(struct _AtkComponent*,int,int,int,int,enum AtkCoordType);
 *     int (*set_position)(struct _AtkComponent*,int,int,enum AtkCoordType);
 *     int (*set_size)(struct _AtkComponent*,int,int);
 *     enum AtkLayer (*get_layer)(struct _AtkComponent*);
 *     int (*get_mdi_zorder)(struct _AtkComponent*);
 *     void (*bounds_changed)(struct _AtkComponent*,struct _AtkRectangle*);
 *     double (*get_alpha)(struct _AtkComponent*);
 *     int (*scroll_to)(struct _AtkComponent*,enum AtkScrollType);
 *     int (*scroll_to_point)(struct _AtkComponent*,enum AtkCoordType,int,int);
 * };
 * }
 */
public class _AtkComponentIface {

    public static MemoryLayout $LAYOUT() {
        return constants$1999.const$4;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * unsigned int (*add_focus_handler)(struct _AtkComponent*,void (*)(struct _AtkObject*,int));
     * }
     */
    public interface add_focus_handler {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(add_focus_handler fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1999.const$5, fi, constants$9.const$0, scope);
        }
        static add_focus_handler ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle add_focus_handler$VH() {
        return constants$2000.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int (*add_focus_handler)(struct _AtkComponent*,void (*)(struct _AtkObject*,int));
     * }
     */
    public static MemorySegment add_focus_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2000.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int (*add_focus_handler)(struct _AtkComponent*,void (*)(struct _AtkObject*,int));
     * }
     */
    public static void add_focus_handler$set(MemorySegment seg, MemorySegment x) {
        constants$2000.const$0.set(seg, x);
    }
    public static MemorySegment add_focus_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2000.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void add_focus_handler$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2000.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_focus_handler add_focus_handler(MemorySegment segment, Arena scope) {
        return add_focus_handler.ofAddress(add_focus_handler$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*contains)(struct _AtkComponent*,int,int,enum AtkCoordType);
     * }
     */
    public interface contains {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(contains fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2000.const$1, fi, constants$611.const$1, scope);
        }
        static contains ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$2000.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle contains$VH() {
        return constants$2000.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*contains)(struct _AtkComponent*,int,int,enum AtkCoordType);
     * }
     */
    public static MemorySegment contains$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2000.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*contains)(struct _AtkComponent*,int,int,enum AtkCoordType);
     * }
     */
    public static void contains$set(MemorySegment seg, MemorySegment x) {
        constants$2000.const$3.set(seg, x);
    }
    public static MemorySegment contains$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2000.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void contains$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2000.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static contains contains(MemorySegment segment, Arena scope) {
        return contains.ofAddress(contains$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*ref_accessible_at_point)(struct _AtkComponent*,int,int,enum AtkCoordType);
     * }
     */
    public interface ref_accessible_at_point {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(ref_accessible_at_point fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2000.const$4, fi, constants$1728.const$2, scope);
        }
        static ref_accessible_at_point ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$2000.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ref_accessible_at_point$VH() {
        return constants$2001.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*ref_accessible_at_point)(struct _AtkComponent*,int,int,enum AtkCoordType);
     * }
     */
    public static MemorySegment ref_accessible_at_point$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2001.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*ref_accessible_at_point)(struct _AtkComponent*,int,int,enum AtkCoordType);
     * }
     */
    public static void ref_accessible_at_point$set(MemorySegment seg, MemorySegment x) {
        constants$2001.const$0.set(seg, x);
    }
    public static MemorySegment ref_accessible_at_point$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2001.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_accessible_at_point$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2001.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_accessible_at_point ref_accessible_at_point(MemorySegment segment, Arena scope) {
        return ref_accessible_at_point.ofAddress(ref_accessible_at_point$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_extents)(struct _AtkComponent*,int*,int*,int*,int*,enum AtkCoordType);
     * }
     */
    public interface get_extents {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(get_extents fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2001.const$1, fi, constants$676.const$0, scope);
        }
        static get_extents ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    constants$2001.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_extents$VH() {
        return constants$2001.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_extents)(struct _AtkComponent*,int*,int*,int*,int*,enum AtkCoordType);
     * }
     */
    public static MemorySegment get_extents$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2001.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_extents)(struct _AtkComponent*,int*,int*,int*,int*,enum AtkCoordType);
     * }
     */
    public static void get_extents$set(MemorySegment seg, MemorySegment x) {
        constants$2001.const$3.set(seg, x);
    }
    public static MemorySegment get_extents$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2001.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_extents$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2001.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_extents get_extents(MemorySegment segment, Arena scope) {
        return get_extents.ofAddress(get_extents$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_position)(struct _AtkComponent*,int*,int*,enum AtkCoordType);
     * }
     */
    public interface get_position {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(get_position fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2001.const$4, fi, constants$332.const$4, scope);
        }
        static get_position ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$1089.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_position$VH() {
        return constants$2001.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_position)(struct _AtkComponent*,int*,int*,enum AtkCoordType);
     * }
     */
    public static MemorySegment get_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2001.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_position)(struct _AtkComponent*,int*,int*,enum AtkCoordType);
     * }
     */
    public static void get_position$set(MemorySegment seg, MemorySegment x) {
        constants$2001.const$5.set(seg, x);
    }
    public static MemorySegment get_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2001.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_position$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2001.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_position get_position(MemorySegment segment, Arena scope) {
        return get_position.ofAddress(get_position$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_size)(struct _AtkComponent*,int*,int*);
     * }
     */
    public interface get_size {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_size fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2002.const$0, fi, constants$14.const$3, scope);
        }
        static get_size ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_size$VH() {
        return constants$2002.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_size)(struct _AtkComponent*,int*,int*);
     * }
     */
    public static MemorySegment get_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2002.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_size)(struct _AtkComponent*,int*,int*);
     * }
     */
    public static void get_size$set(MemorySegment seg, MemorySegment x) {
        constants$2002.const$1.set(seg, x);
    }
    public static MemorySegment get_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2002.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2002.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_size get_size(MemorySegment segment, Arena scope) {
        return get_size.ofAddress(get_size$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*grab_focus)(struct _AtkComponent*);
     * }
     */
    public interface grab_focus {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(grab_focus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2002.const$2, fi, constants$10.const$5, scope);
        }
        static grab_focus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle grab_focus$VH() {
        return constants$2002.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*grab_focus)(struct _AtkComponent*);
     * }
     */
    public static MemorySegment grab_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2002.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*grab_focus)(struct _AtkComponent*);
     * }
     */
    public static void grab_focus$set(MemorySegment seg, MemorySegment x) {
        constants$2002.const$3.set(seg, x);
    }
    public static MemorySegment grab_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2002.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void grab_focus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2002.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static grab_focus grab_focus(MemorySegment segment, Arena scope) {
        return grab_focus.ofAddress(grab_focus$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*remove_focus_handler)(struct _AtkComponent*,unsigned int);
     * }
     */
    public interface remove_focus_handler {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(remove_focus_handler fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2002.const$4, fi, constants$40.const$2, scope);
        }
        static remove_focus_handler ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$511.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remove_focus_handler$VH() {
        return constants$2002.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*remove_focus_handler)(struct _AtkComponent*,unsigned int);
     * }
     */
    public static MemorySegment remove_focus_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2002.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*remove_focus_handler)(struct _AtkComponent*,unsigned int);
     * }
     */
    public static void remove_focus_handler$set(MemorySegment seg, MemorySegment x) {
        constants$2002.const$5.set(seg, x);
    }
    public static MemorySegment remove_focus_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2002.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_focus_handler$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2002.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_focus_handler remove_focus_handler(MemorySegment segment, Arena scope) {
        return remove_focus_handler.ofAddress(remove_focus_handler$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_extents)(struct _AtkComponent*,int,int,int,int,enum AtkCoordType);
     * }
     */
    public interface set_extents {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, int _x4, int _x5);
        static MemorySegment allocate(set_extents fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2003.const$0, fi, constants$1947.const$3, scope);
        }
        static set_extents ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, int __x4, int __x5) -> {
                try {
                    return (int)constants$2003.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_extents$VH() {
        return constants$2003.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_extents)(struct _AtkComponent*,int,int,int,int,enum AtkCoordType);
     * }
     */
    public static MemorySegment set_extents$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2003.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_extents)(struct _AtkComponent*,int,int,int,int,enum AtkCoordType);
     * }
     */
    public static void set_extents$set(MemorySegment seg, MemorySegment x) {
        constants$2003.const$2.set(seg, x);
    }
    public static MemorySegment set_extents$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2003.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void set_extents$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2003.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_extents set_extents(MemorySegment segment, Arena scope) {
        return set_extents.ofAddress(set_extents$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_position)(struct _AtkComponent*,int,int,enum AtkCoordType);
     * }
     */
    public interface set_position {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(set_position fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2003.const$3, fi, constants$611.const$1, scope);
        }
        static set_position ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$2000.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_position$VH() {
        return constants$2003.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_position)(struct _AtkComponent*,int,int,enum AtkCoordType);
     * }
     */
    public static MemorySegment set_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2003.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_position)(struct _AtkComponent*,int,int,enum AtkCoordType);
     * }
     */
    public static void set_position$set(MemorySegment seg, MemorySegment x) {
        constants$2003.const$4.set(seg, x);
    }
    public static MemorySegment set_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2003.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void set_position$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2003.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_position set_position(MemorySegment segment, Arena scope) {
        return set_position.ofAddress(set_position$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_size)(struct _AtkComponent*,int,int);
     * }
     */
    public interface set_size {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(set_size fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2003.const$5, fi, constants$49.const$0, scope);
        }
        static set_size ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)constants$247.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_size$VH() {
        return constants$2004.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_size)(struct _AtkComponent*,int,int);
     * }
     */
    public static MemorySegment set_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2004.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_size)(struct _AtkComponent*,int,int);
     * }
     */
    public static void set_size$set(MemorySegment seg, MemorySegment x) {
        constants$2004.const$0.set(seg, x);
    }
    public static MemorySegment set_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2004.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void set_size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2004.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_size set_size(MemorySegment segment, Arena scope) {
        return set_size.ofAddress(set_size$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum AtkLayer (*get_layer)(struct _AtkComponent*);
     * }
     */
    public interface get_layer {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_layer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2004.const$1, fi, constants$10.const$5, scope);
        }
        static get_layer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_layer$VH() {
        return constants$2004.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AtkLayer (*get_layer)(struct _AtkComponent*);
     * }
     */
    public static MemorySegment get_layer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2004.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AtkLayer (*get_layer)(struct _AtkComponent*);
     * }
     */
    public static void get_layer$set(MemorySegment seg, MemorySegment x) {
        constants$2004.const$2.set(seg, x);
    }
    public static MemorySegment get_layer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2004.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_layer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2004.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_layer get_layer(MemorySegment segment, Arena scope) {
        return get_layer.ofAddress(get_layer$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_mdi_zorder)(struct _AtkComponent*);
     * }
     */
    public interface get_mdi_zorder {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_mdi_zorder fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2004.const$3, fi, constants$10.const$5, scope);
        }
        static get_mdi_zorder ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_mdi_zorder$VH() {
        return constants$2004.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_mdi_zorder)(struct _AtkComponent*);
     * }
     */
    public static MemorySegment get_mdi_zorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2004.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_mdi_zorder)(struct _AtkComponent*);
     * }
     */
    public static void get_mdi_zorder$set(MemorySegment seg, MemorySegment x) {
        constants$2004.const$4.set(seg, x);
    }
    public static MemorySegment get_mdi_zorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2004.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mdi_zorder$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2004.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mdi_zorder get_mdi_zorder(MemorySegment segment, Arena scope) {
        return get_mdi_zorder.ofAddress(get_mdi_zorder$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*bounds_changed)(struct _AtkComponent*,struct _AtkRectangle*);
     * }
     */
    public interface bounds_changed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(bounds_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2004.const$5, fi, constants$13.const$4, scope);
        }
        static bounds_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle bounds_changed$VH() {
        return constants$2005.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*bounds_changed)(struct _AtkComponent*,struct _AtkRectangle*);
     * }
     */
    public static MemorySegment bounds_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2005.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*bounds_changed)(struct _AtkComponent*,struct _AtkRectangle*);
     * }
     */
    public static void bounds_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2005.const$0.set(seg, x);
    }
    public static MemorySegment bounds_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2005.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bounds_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2005.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static bounds_changed bounds_changed(MemorySegment segment, Arena scope) {
        return bounds_changed.ofAddress(bounds_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * double (*get_alpha)(struct _AtkComponent*);
     * }
     */
    public interface get_alpha {

        double apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_alpha fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2005.const$1, fi, constants$67.const$0, scope);
        }
        static get_alpha ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (double)constants$2005.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_alpha$VH() {
        return constants$2005.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*get_alpha)(struct _AtkComponent*);
     * }
     */
    public static MemorySegment get_alpha$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2005.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*get_alpha)(struct _AtkComponent*);
     * }
     */
    public static void get_alpha$set(MemorySegment seg, MemorySegment x) {
        constants$2005.const$3.set(seg, x);
    }
    public static MemorySegment get_alpha$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2005.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_alpha$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2005.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_alpha get_alpha(MemorySegment segment, Arena scope) {
        return get_alpha.ofAddress(get_alpha$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*scroll_to)(struct _AtkComponent*,enum AtkScrollType);
     * }
     */
    public interface scroll_to {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(scroll_to fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2005.const$4, fi, constants$11.const$4, scope);
        }
        static scroll_to ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$840.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle scroll_to$VH() {
        return constants$2005.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*scroll_to)(struct _AtkComponent*,enum AtkScrollType);
     * }
     */
    public static MemorySegment scroll_to$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2005.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*scroll_to)(struct _AtkComponent*,enum AtkScrollType);
     * }
     */
    public static void scroll_to$set(MemorySegment seg, MemorySegment x) {
        constants$2005.const$5.set(seg, x);
    }
    public static MemorySegment scroll_to$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2005.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void scroll_to$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2005.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static scroll_to scroll_to(MemorySegment segment, Arena scope) {
        return scroll_to.ofAddress(scroll_to$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*scroll_to_point)(struct _AtkComponent*,enum AtkCoordType,int,int);
     * }
     */
    public interface scroll_to_point {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(scroll_to_point fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2006.const$0, fi, constants$611.const$1, scope);
        }
        static scroll_to_point ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$2000.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle scroll_to_point$VH() {
        return constants$2006.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*scroll_to_point)(struct _AtkComponent*,enum AtkCoordType,int,int);
     * }
     */
    public static MemorySegment scroll_to_point$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2006.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*scroll_to_point)(struct _AtkComponent*,enum AtkCoordType,int,int);
     * }
     */
    public static void scroll_to_point$set(MemorySegment seg, MemorySegment x) {
        constants$2006.const$1.set(seg, x);
    }
    public static MemorySegment scroll_to_point$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2006.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void scroll_to_point$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2006.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static scroll_to_point scroll_to_point(MemorySegment segment, Arena scope) {
        return scroll_to_point.ofAddress(scroll_to_point$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


