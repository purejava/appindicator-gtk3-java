// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GActionGroupInterface {
 *     struct _GTypeInterface g_iface;
 *     int (*has_action)(struct _GActionGroup*,char*);
 *     char** (*list_actions)(struct _GActionGroup*);
 *     int (*get_action_enabled)(struct _GActionGroup*,char*);
 *     struct _GVariantType* (*get_action_parameter_type)(struct _GActionGroup*,char*);
 *     struct _GVariantType* (*get_action_state_type)(struct _GActionGroup*,char*);
 *     struct _GVariant* (*get_action_state_hint)(struct _GActionGroup*,char*);
 *     struct _GVariant* (*get_action_state)(struct _GActionGroup*,char*);
 *     void (*change_action_state)(struct _GActionGroup*,char*,struct _GVariant*);
 *     void (*activate_action)(struct _GActionGroup*,char*,struct _GVariant*);
 *     void (*action_added)(struct _GActionGroup*,char*);
 *     void (*action_removed)(struct _GActionGroup*,char*);
 *     void (*action_enabled_changed)(struct _GActionGroup*,char*,int);
 *     void (*action_state_changed)(struct _GActionGroup*,char*,struct _GVariant*);
 *     int (*query_action)(struct _GActionGroup*,char*,int*,struct _GVariantType**,struct _GVariantType**,struct _GVariant**,struct _GVariant**);
 * };
 * }
 */
public class _GActionGroupInterface {

    public static MemoryLayout $LAYOUT() {
        return constants$704.const$1;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * int (*has_action)(struct _GActionGroup*,char*);
     * }
     */
    public interface has_action {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(has_action fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$704.const$2, fi, constants$9.const$0, scope);
        }
        static has_action ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle has_action$VH() {
        return constants$704.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*has_action)(struct _GActionGroup*,char*);
     * }
     */
    public static MemorySegment has_action$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$704.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*has_action)(struct _GActionGroup*,char*);
     * }
     */
    public static void has_action$set(MemorySegment seg, MemorySegment x) {
        constants$704.const$3.set(seg, x);
    }
    public static MemorySegment has_action$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$704.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void has_action$set(MemorySegment seg, long index, MemorySegment x) {
        constants$704.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static has_action has_action(MemorySegment segment, Arena scope) {
        return has_action.ofAddress(has_action$get(segment), scope);
    }
    /**
     * {@snippet :
 * char** (*list_actions)(struct _GActionGroup*);
     * }
     */
    public interface list_actions {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(list_actions fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$704.const$4, fi, constants$5.const$2, scope);
        }
        static list_actions ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle list_actions$VH() {
        return constants$704.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** (*list_actions)(struct _GActionGroup*);
     * }
     */
    public static MemorySegment list_actions$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$704.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** (*list_actions)(struct _GActionGroup*);
     * }
     */
    public static void list_actions$set(MemorySegment seg, MemorySegment x) {
        constants$704.const$5.set(seg, x);
    }
    public static MemorySegment list_actions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$704.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void list_actions$set(MemorySegment seg, long index, MemorySegment x) {
        constants$704.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static list_actions list_actions(MemorySegment segment, Arena scope) {
        return list_actions.ofAddress(list_actions$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_action_enabled)(struct _GActionGroup*,char*);
     * }
     */
    public interface get_action_enabled {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_action_enabled fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$705.const$0, fi, constants$9.const$0, scope);
        }
        static get_action_enabled ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_action_enabled$VH() {
        return constants$705.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_action_enabled)(struct _GActionGroup*,char*);
     * }
     */
    public static MemorySegment get_action_enabled$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$705.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_action_enabled)(struct _GActionGroup*,char*);
     * }
     */
    public static void get_action_enabled$set(MemorySegment seg, MemorySegment x) {
        constants$705.const$1.set(seg, x);
    }
    public static MemorySegment get_action_enabled$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$705.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_enabled$set(MemorySegment seg, long index, MemorySegment x) {
        constants$705.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_enabled get_action_enabled(MemorySegment segment, Arena scope) {
        return get_action_enabled.ofAddress(get_action_enabled$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GVariantType* (*get_action_parameter_type)(struct _GActionGroup*,char*);
     * }
     */
    public interface get_action_parameter_type {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_action_parameter_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$705.const$2, fi, constants$5.const$5, scope);
        }
        static get_action_parameter_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_action_parameter_type$VH() {
        return constants$705.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GVariantType* (*get_action_parameter_type)(struct _GActionGroup*,char*);
     * }
     */
    public static MemorySegment get_action_parameter_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$705.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GVariantType* (*get_action_parameter_type)(struct _GActionGroup*,char*);
     * }
     */
    public static void get_action_parameter_type$set(MemorySegment seg, MemorySegment x) {
        constants$705.const$3.set(seg, x);
    }
    public static MemorySegment get_action_parameter_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$705.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_parameter_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$705.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_parameter_type get_action_parameter_type(MemorySegment segment, Arena scope) {
        return get_action_parameter_type.ofAddress(get_action_parameter_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GVariantType* (*get_action_state_type)(struct _GActionGroup*,char*);
     * }
     */
    public interface get_action_state_type {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_action_state_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$705.const$4, fi, constants$5.const$5, scope);
        }
        static get_action_state_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_action_state_type$VH() {
        return constants$705.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GVariantType* (*get_action_state_type)(struct _GActionGroup*,char*);
     * }
     */
    public static MemorySegment get_action_state_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$705.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GVariantType* (*get_action_state_type)(struct _GActionGroup*,char*);
     * }
     */
    public static void get_action_state_type$set(MemorySegment seg, MemorySegment x) {
        constants$705.const$5.set(seg, x);
    }
    public static MemorySegment get_action_state_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$705.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_state_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$705.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_state_type get_action_state_type(MemorySegment segment, Arena scope) {
        return get_action_state_type.ofAddress(get_action_state_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GVariant* (*get_action_state_hint)(struct _GActionGroup*,char*);
     * }
     */
    public interface get_action_state_hint {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_action_state_hint fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$706.const$0, fi, constants$5.const$5, scope);
        }
        static get_action_state_hint ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_action_state_hint$VH() {
        return constants$706.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GVariant* (*get_action_state_hint)(struct _GActionGroup*,char*);
     * }
     */
    public static MemorySegment get_action_state_hint$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$706.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GVariant* (*get_action_state_hint)(struct _GActionGroup*,char*);
     * }
     */
    public static void get_action_state_hint$set(MemorySegment seg, MemorySegment x) {
        constants$706.const$1.set(seg, x);
    }
    public static MemorySegment get_action_state_hint$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$706.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_state_hint$set(MemorySegment seg, long index, MemorySegment x) {
        constants$706.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_state_hint get_action_state_hint(MemorySegment segment, Arena scope) {
        return get_action_state_hint.ofAddress(get_action_state_hint$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GVariant* (*get_action_state)(struct _GActionGroup*,char*);
     * }
     */
    public interface get_action_state {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_action_state fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$706.const$2, fi, constants$5.const$5, scope);
        }
        static get_action_state ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_action_state$VH() {
        return constants$706.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GVariant* (*get_action_state)(struct _GActionGroup*,char*);
     * }
     */
    public static MemorySegment get_action_state$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$706.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GVariant* (*get_action_state)(struct _GActionGroup*,char*);
     * }
     */
    public static void get_action_state$set(MemorySegment seg, MemorySegment x) {
        constants$706.const$3.set(seg, x);
    }
    public static MemorySegment get_action_state$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$706.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_state$set(MemorySegment seg, long index, MemorySegment x) {
        constants$706.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_state get_action_state(MemorySegment segment, Arena scope) {
        return get_action_state.ofAddress(get_action_state$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*change_action_state)(struct _GActionGroup*,char*,struct _GVariant*);
     * }
     */
    public interface change_action_state {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(change_action_state fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$706.const$4, fi, constants$14.const$3, scope);
        }
        static change_action_state ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle change_action_state$VH() {
        return constants$706.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*change_action_state)(struct _GActionGroup*,char*,struct _GVariant*);
     * }
     */
    public static MemorySegment change_action_state$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$706.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*change_action_state)(struct _GActionGroup*,char*,struct _GVariant*);
     * }
     */
    public static void change_action_state$set(MemorySegment seg, MemorySegment x) {
        constants$706.const$5.set(seg, x);
    }
    public static MemorySegment change_action_state$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$706.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void change_action_state$set(MemorySegment seg, long index, MemorySegment x) {
        constants$706.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static change_action_state change_action_state(MemorySegment segment, Arena scope) {
        return change_action_state.ofAddress(change_action_state$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*activate_action)(struct _GActionGroup*,char*,struct _GVariant*);
     * }
     */
    public interface activate_action {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(activate_action fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$707.const$0, fi, constants$14.const$3, scope);
        }
        static activate_action ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle activate_action$VH() {
        return constants$707.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*activate_action)(struct _GActionGroup*,char*,struct _GVariant*);
     * }
     */
    public static MemorySegment activate_action$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$707.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*activate_action)(struct _GActionGroup*,char*,struct _GVariant*);
     * }
     */
    public static void activate_action$set(MemorySegment seg, MemorySegment x) {
        constants$707.const$1.set(seg, x);
    }
    public static MemorySegment activate_action$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$707.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void activate_action$set(MemorySegment seg, long index, MemorySegment x) {
        constants$707.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate_action activate_action(MemorySegment segment, Arena scope) {
        return activate_action.ofAddress(activate_action$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*action_added)(struct _GActionGroup*,char*);
     * }
     */
    public interface action_added {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(action_added fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$707.const$2, fi, constants$13.const$4, scope);
        }
        static action_added ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle action_added$VH() {
        return constants$707.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*action_added)(struct _GActionGroup*,char*);
     * }
     */
    public static MemorySegment action_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$707.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*action_added)(struct _GActionGroup*,char*);
     * }
     */
    public static void action_added$set(MemorySegment seg, MemorySegment x) {
        constants$707.const$3.set(seg, x);
    }
    public static MemorySegment action_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$707.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void action_added$set(MemorySegment seg, long index, MemorySegment x) {
        constants$707.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static action_added action_added(MemorySegment segment, Arena scope) {
        return action_added.ofAddress(action_added$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*action_removed)(struct _GActionGroup*,char*);
     * }
     */
    public interface action_removed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(action_removed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$707.const$4, fi, constants$13.const$4, scope);
        }
        static action_removed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle action_removed$VH() {
        return constants$707.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*action_removed)(struct _GActionGroup*,char*);
     * }
     */
    public static MemorySegment action_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$707.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*action_removed)(struct _GActionGroup*,char*);
     * }
     */
    public static void action_removed$set(MemorySegment seg, MemorySegment x) {
        constants$707.const$5.set(seg, x);
    }
    public static MemorySegment action_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$707.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void action_removed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$707.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static action_removed action_removed(MemorySegment segment, Arena scope) {
        return action_removed.ofAddress(action_removed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*action_enabled_changed)(struct _GActionGroup*,char*,int);
     * }
     */
    public interface action_enabled_changed {

        void apply(java.lang.foreign.MemorySegment screen, java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(action_enabled_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$708.const$0, fi, constants$164.const$5, scope);
        }
        static action_enabled_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _screen, java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, _screen, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle action_enabled_changed$VH() {
        return constants$708.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*action_enabled_changed)(struct _GActionGroup*,char*,int);
     * }
     */
    public static MemorySegment action_enabled_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$708.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*action_enabled_changed)(struct _GActionGroup*,char*,int);
     * }
     */
    public static void action_enabled_changed$set(MemorySegment seg, MemorySegment x) {
        constants$708.const$1.set(seg, x);
    }
    public static MemorySegment action_enabled_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$708.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void action_enabled_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$708.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static action_enabled_changed action_enabled_changed(MemorySegment segment, Arena scope) {
        return action_enabled_changed.ofAddress(action_enabled_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*action_state_changed)(struct _GActionGroup*,char*,struct _GVariant*);
     * }
     */
    public interface action_state_changed {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(action_state_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$708.const$2, fi, constants$14.const$3, scope);
        }
        static action_state_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle action_state_changed$VH() {
        return constants$708.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*action_state_changed)(struct _GActionGroup*,char*,struct _GVariant*);
     * }
     */
    public static MemorySegment action_state_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$708.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*action_state_changed)(struct _GActionGroup*,char*,struct _GVariant*);
     * }
     */
    public static void action_state_changed$set(MemorySegment seg, MemorySegment x) {
        constants$708.const$3.set(seg, x);
    }
    public static MemorySegment action_state_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$708.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void action_state_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$708.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static action_state_changed action_state_changed(MemorySegment segment, Arena scope) {
        return action_state_changed.ofAddress(action_state_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*query_action)(struct _GActionGroup*,char*,int*,struct _GVariantType**,struct _GVariantType**,struct _GVariant**,struct _GVariant**);
     * }
     */
    public interface query_action {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(query_action fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$708.const$4, fi, constants$164.const$2, scope);
        }
        static query_action ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$708.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_action$VH() {
        return constants$709.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*query_action)(struct _GActionGroup*,char*,int*,struct _GVariantType**,struct _GVariantType**,struct _GVariant**,struct _GVariant**);
     * }
     */
    public static MemorySegment query_action$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$709.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*query_action)(struct _GActionGroup*,char*,int*,struct _GVariantType**,struct _GVariantType**,struct _GVariant**,struct _GVariant**);
     * }
     */
    public static void query_action$set(MemorySegment seg, MemorySegment x) {
        constants$709.const$0.set(seg, x);
    }
    public static MemorySegment query_action$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$709.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void query_action$set(MemorySegment seg, long index, MemorySegment x) {
        constants$709.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_action query_action(MemorySegment segment, Arena scope) {
        return query_action.ofAddress(query_action$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


