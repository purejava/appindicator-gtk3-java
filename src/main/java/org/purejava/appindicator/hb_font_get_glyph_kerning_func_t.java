// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * int (*hb_font_get_glyph_kerning_func_t)(struct hb_font_t* font,void* font_data,unsigned int first_glyph,unsigned int second_glyph,void* user_data);
 * }
 */
public interface hb_font_get_glyph_kerning_func_t {

    int apply(java.lang.foreign.MemorySegment font, java.lang.foreign.MemorySegment font_data, int first_glyph, int second_glyph, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(hb_font_get_glyph_kerning_func_t fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1484.const$5, fi, constants$1484.const$4, scope);
    }
    static hb_font_get_glyph_kerning_func_t ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _font, java.lang.foreign.MemorySegment _font_data, int _first_glyph, int _second_glyph, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                return (int)constants$1485.const$0.invokeExact(symbol, _font, _font_data, _first_glyph, _second_glyph, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


