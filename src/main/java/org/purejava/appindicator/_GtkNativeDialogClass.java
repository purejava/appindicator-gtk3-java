// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkNativeDialogClass {
 *     struct _GObjectClass parent_class;
 *     void (*response)(struct _GtkNativeDialog*,int);
 *     void (*show)(struct _GtkNativeDialog*);
 *     void (*hide)(struct _GtkNativeDialog*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkNativeDialogClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2700.const$4;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*response)(struct _GtkNativeDialog*,int);
     * }
     */
    public interface response {

        void apply(java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(response fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2700.const$5, fi, constants$40.const$2, scope);
        }
        static response ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$511.const$3.invokeExact(symbol, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle response$VH() {
        return constants$2701.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*response)(struct _GtkNativeDialog*,int);
     * }
     */
    public static MemorySegment response$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2701.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*response)(struct _GtkNativeDialog*,int);
     * }
     */
    public static void response$set(MemorySegment seg, MemorySegment x) {
        constants$2701.const$0.set(seg, x);
    }
    public static MemorySegment response$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2701.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void response$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2701.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static response response(MemorySegment segment, Arena scope) {
        return response.ofAddress(response$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*show)(struct _GtkNativeDialog*);
     * }
     */
    public interface show {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(show fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2701.const$1, fi, constants$13.const$1, scope);
        }
        static show ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle show$VH() {
        return constants$2701.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*show)(struct _GtkNativeDialog*);
     * }
     */
    public static MemorySegment show$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2701.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*show)(struct _GtkNativeDialog*);
     * }
     */
    public static void show$set(MemorySegment seg, MemorySegment x) {
        constants$2701.const$2.set(seg, x);
    }
    public static MemorySegment show$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2701.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void show$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2701.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static show show(MemorySegment segment, Arena scope) {
        return show.ofAddress(show$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*hide)(struct _GtkNativeDialog*);
     * }
     */
    public interface hide {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(hide fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2701.const$3, fi, constants$13.const$1, scope);
        }
        static hide ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle hide$VH() {
        return constants$2701.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*hide)(struct _GtkNativeDialog*);
     * }
     */
    public static MemorySegment hide$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2701.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*hide)(struct _GtkNativeDialog*);
     * }
     */
    public static void hide$set(MemorySegment seg, MemorySegment x) {
        constants$2701.const$4.set(seg, x);
    }
    public static MemorySegment hide$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2701.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hide$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2701.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static hide hide(MemorySegment segment, Arena scope) {
        return hide.ofAddress(hide$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2701.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2702.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2702.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2702.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2702.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2702.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2702.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2702.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2702.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2702.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2702.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2702.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2702.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2702.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2702.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2702.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2702.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2702.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2702.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2703.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2703.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2703.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2703.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2703.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


