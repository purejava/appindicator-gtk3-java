// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkEntryCompletionClass {
 *     struct _GObjectClass parent_class;
 *     int (*match_selected)(struct _GtkEntryCompletion*,struct _GtkTreeModel*,struct _GtkTreeIter*);
 *     void (*action_activated)(struct _GtkEntryCompletion*,int);
 *     int (*insert_prefix)(struct _GtkEntryCompletion*,char*);
 *     int (*cursor_on_match)(struct _GtkEntryCompletion*,struct _GtkTreeModel*,struct _GtkTreeIter*);
 *     void (*no_matches)(struct _GtkEntryCompletion*);
 *     void (*_gtk_reserved0)();
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 * };
 * }
 */
public class _GtkEntryCompletionClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2436.const$3;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * int (*match_selected)(struct _GtkEntryCompletion*,struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public interface match_selected {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(match_selected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2436.const$4, fi, constants$12.const$2, scope);
        }
        static match_selected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle match_selected$VH() {
        return constants$2436.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*match_selected)(struct _GtkEntryCompletion*,struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment match_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2436.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*match_selected)(struct _GtkEntryCompletion*,struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static void match_selected$set(MemorySegment seg, MemorySegment x) {
        constants$2436.const$5.set(seg, x);
    }
    public static MemorySegment match_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2436.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void match_selected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2436.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static match_selected match_selected(MemorySegment segment, Arena scope) {
        return match_selected.ofAddress(match_selected$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*action_activated)(struct _GtkEntryCompletion*,int);
     * }
     */
    public interface action_activated {

        void apply(java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(action_activated fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2437.const$0, fi, constants$40.const$2, scope);
        }
        static action_activated ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$511.const$3.invokeExact(symbol, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle action_activated$VH() {
        return constants$2437.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*action_activated)(struct _GtkEntryCompletion*,int);
     * }
     */
    public static MemorySegment action_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2437.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*action_activated)(struct _GtkEntryCompletion*,int);
     * }
     */
    public static void action_activated$set(MemorySegment seg, MemorySegment x) {
        constants$2437.const$1.set(seg, x);
    }
    public static MemorySegment action_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2437.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void action_activated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2437.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static action_activated action_activated(MemorySegment segment, Arena scope) {
        return action_activated.ofAddress(action_activated$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*insert_prefix)(struct _GtkEntryCompletion*,char*);
     * }
     */
    public interface insert_prefix {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(insert_prefix fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2437.const$2, fi, constants$9.const$0, scope);
        }
        static insert_prefix ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insert_prefix$VH() {
        return constants$2437.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*insert_prefix)(struct _GtkEntryCompletion*,char*);
     * }
     */
    public static MemorySegment insert_prefix$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2437.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*insert_prefix)(struct _GtkEntryCompletion*,char*);
     * }
     */
    public static void insert_prefix$set(MemorySegment seg, MemorySegment x) {
        constants$2437.const$3.set(seg, x);
    }
    public static MemorySegment insert_prefix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2437.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_prefix$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2437.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_prefix insert_prefix(MemorySegment segment, Arena scope) {
        return insert_prefix.ofAddress(insert_prefix$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*cursor_on_match)(struct _GtkEntryCompletion*,struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public interface cursor_on_match {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(cursor_on_match fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2437.const$4, fi, constants$12.const$2, scope);
        }
        static cursor_on_match ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cursor_on_match$VH() {
        return constants$2437.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*cursor_on_match)(struct _GtkEntryCompletion*,struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static MemorySegment cursor_on_match$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2437.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*cursor_on_match)(struct _GtkEntryCompletion*,struct _GtkTreeModel*,struct _GtkTreeIter*);
     * }
     */
    public static void cursor_on_match$set(MemorySegment seg, MemorySegment x) {
        constants$2437.const$5.set(seg, x);
    }
    public static MemorySegment cursor_on_match$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2437.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cursor_on_match$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2437.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static cursor_on_match cursor_on_match(MemorySegment segment, Arena scope) {
        return cursor_on_match.ofAddress(cursor_on_match$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*no_matches)(struct _GtkEntryCompletion*);
     * }
     */
    public interface no_matches {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(no_matches fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2438.const$0, fi, constants$13.const$1, scope);
        }
        static no_matches ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle no_matches$VH() {
        return constants$2438.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*no_matches)(struct _GtkEntryCompletion*);
     * }
     */
    public static MemorySegment no_matches$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2438.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*no_matches)(struct _GtkEntryCompletion*);
     * }
     */
    public static void no_matches$set(MemorySegment seg, MemorySegment x) {
        constants$2438.const$1.set(seg, x);
    }
    public static MemorySegment no_matches$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2438.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void no_matches$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2438.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static no_matches no_matches(MemorySegment segment, Arena scope) {
        return no_matches.ofAddress(no_matches$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved0)();
     * }
     */
    public interface _gtk_reserved0 {

        void apply();
        static MemorySegment allocate(_gtk_reserved0 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2438.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved0 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved0$VH() {
        return constants$2438.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved0)();
     * }
     */
    public static MemorySegment _gtk_reserved0$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2438.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved0)();
     * }
     */
    public static void _gtk_reserved0$set(MemorySegment seg, MemorySegment x) {
        constants$2438.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved0$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2438.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved0$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2438.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved0 _gtk_reserved0(MemorySegment segment, Arena scope) {
        return _gtk_reserved0.ofAddress(_gtk_reserved0$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2438.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2438.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2438.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2438.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2438.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2438.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2439.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2439.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2439.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2439.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2439.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2439.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


