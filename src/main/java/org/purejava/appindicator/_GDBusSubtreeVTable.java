// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GDBusSubtreeVTable {
 *     GDBusSubtreeEnumerateFunc enumerate;
 *     GDBusSubtreeIntrospectFunc introspect;
 *     GDBusSubtreeDispatchFunc dispatch;
 *     gpointer padding[8];
 * }
 * }
 */
public class _GDBusSubtreeVTable {

    _GDBusSubtreeVTable() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_POINTER.withName("enumerate"),
        app_indicator_h.C_POINTER.withName("introspect"),
        app_indicator_h.C_POINTER.withName("dispatch"),
        MemoryLayout.sequenceLayout(8, app_indicator_h.C_POINTER).withName("padding")
    ).withName("_GDBusSubtreeVTable");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout enumerate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("enumerate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GDBusSubtreeEnumerateFunc enumerate
     * }
     */
    public static final AddressLayout enumerate$layout() {
        return enumerate$LAYOUT;
    }

    private static final long enumerate$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GDBusSubtreeEnumerateFunc enumerate
     * }
     */
    public static final long enumerate$offset() {
        return enumerate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GDBusSubtreeEnumerateFunc enumerate
     * }
     */
    public static MemorySegment enumerate(MemorySegment struct) {
        return struct.get(enumerate$LAYOUT, enumerate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GDBusSubtreeEnumerateFunc enumerate
     * }
     */
    public static void enumerate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(enumerate$LAYOUT, enumerate$OFFSET, fieldValue);
    }

    private static final AddressLayout introspect$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("introspect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GDBusSubtreeIntrospectFunc introspect
     * }
     */
    public static final AddressLayout introspect$layout() {
        return introspect$LAYOUT;
    }

    private static final long introspect$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GDBusSubtreeIntrospectFunc introspect
     * }
     */
    public static final long introspect$offset() {
        return introspect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GDBusSubtreeIntrospectFunc introspect
     * }
     */
    public static MemorySegment introspect(MemorySegment struct) {
        return struct.get(introspect$LAYOUT, introspect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GDBusSubtreeIntrospectFunc introspect
     * }
     */
    public static void introspect(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(introspect$LAYOUT, introspect$OFFSET, fieldValue);
    }

    private static final AddressLayout dispatch$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dispatch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GDBusSubtreeDispatchFunc dispatch
     * }
     */
    public static final AddressLayout dispatch$layout() {
        return dispatch$LAYOUT;
    }

    private static final long dispatch$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GDBusSubtreeDispatchFunc dispatch
     * }
     */
    public static final long dispatch$offset() {
        return dispatch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GDBusSubtreeDispatchFunc dispatch
     * }
     */
    public static MemorySegment dispatch(MemorySegment struct) {
        return struct.get(dispatch$LAYOUT, dispatch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GDBusSubtreeDispatchFunc dispatch
     * }
     */
    public static void dispatch(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dispatch$LAYOUT, dispatch$OFFSET, fieldValue);
    }

    private static final SequenceLayout padding$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("padding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gpointer padding[8]
     * }
     */
    public static final SequenceLayout padding$layout() {
        return padding$LAYOUT;
    }

    private static final long padding$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gpointer padding[8]
     * }
     */
    public static final long padding$offset() {
        return padding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gpointer padding[8]
     * }
     */
    public static MemorySegment padding(MemorySegment struct) {
        return struct.asSlice(padding$OFFSET, padding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gpointer padding[8]
     * }
     */
    public static void padding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, padding$OFFSET, padding$LAYOUT.byteSize());
    }

    private static long[] padding$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * gpointer padding[8]
     * }
     */
    public static long[] padding$dimensions() {
        return padding$DIMS;
    }
    private static final VarHandle padding$ELEM_HANDLE = padding$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * gpointer padding[8]
     * }
     */
    public static MemorySegment padding(MemorySegment struct, long index0) {
        return (MemorySegment)padding$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * gpointer padding[8]
     * }
     */
    public static void padding(MemorySegment struct, long index0, MemorySegment fieldValue) {
        padding$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

