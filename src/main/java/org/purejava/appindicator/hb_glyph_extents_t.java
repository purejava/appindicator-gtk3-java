// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct hb_glyph_extents_t {
 *     int x_bearing;
 *     int y_bearing;
 *     int width;
 *     int height;
 * };
 * }
 */
public class hb_glyph_extents_t {

    public static MemoryLayout $LAYOUT() {
        return constants$1424.const$2;
    }
    public static VarHandle x_bearing$VH() {
        return constants$1424.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int x_bearing;
     * }
     */
    public static int x_bearing$get(MemorySegment seg) {
        return (int)constants$1424.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int x_bearing;
     * }
     */
    public static void x_bearing$set(MemorySegment seg, int x) {
        constants$1424.const$3.set(seg, x);
    }
    public static int x_bearing$get(MemorySegment seg, long index) {
        return (int)constants$1424.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void x_bearing$set(MemorySegment seg, long index, int x) {
        constants$1424.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle y_bearing$VH() {
        return constants$1424.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int y_bearing;
     * }
     */
    public static int y_bearing$get(MemorySegment seg) {
        return (int)constants$1424.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int y_bearing;
     * }
     */
    public static void y_bearing$set(MemorySegment seg, int x) {
        constants$1424.const$4.set(seg, x);
    }
    public static int y_bearing$get(MemorySegment seg, long index) {
        return (int)constants$1424.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void y_bearing$set(MemorySegment seg, long index, int x) {
        constants$1424.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$1424.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)constants$1424.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$1424.const$5.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)constants$1424.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        constants$1424.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$1425.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$1425.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$1425.const$0.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$1425.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$1425.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


