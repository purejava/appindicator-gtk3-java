// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkAssistantClass {
 *     struct _GtkWindowClass parent_class;
 *     void (*prepare)(struct _GtkAssistant*,struct _GtkWidget*);
 *     void (*apply)(struct _GtkAssistant*);
 *     void (*close)(struct _GtkAssistant*);
 *     void (*cancel)(struct _GtkAssistant*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 * };
 * }
 */
public class _GtkAssistantClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2521.const$4;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 1072);
    }
    /**
     * {@snippet :
 * void (*prepare)(struct _GtkAssistant*,struct _GtkWidget*);
     * }
     */
    public interface prepare {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(prepare fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2521.const$5, fi, constants$13.const$4, scope);
        }
        static prepare ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle prepare$VH() {
        return constants$2522.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*prepare)(struct _GtkAssistant*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment prepare$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2522.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*prepare)(struct _GtkAssistant*,struct _GtkWidget*);
     * }
     */
    public static void prepare$set(MemorySegment seg, MemorySegment x) {
        constants$2522.const$0.set(seg, x);
    }
    public static MemorySegment prepare$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2522.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void prepare$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2522.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static prepare prepare(MemorySegment segment, Arena scope) {
        return prepare.ofAddress(prepare$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*apply)(struct _GtkAssistant*);
     * }
     */
    public interface apply {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(apply fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2522.const$1, fi, constants$13.const$1, scope);
        }
        static apply ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle apply$VH() {
        return constants$2522.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*apply)(struct _GtkAssistant*);
     * }
     */
    public static MemorySegment apply$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2522.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*apply)(struct _GtkAssistant*);
     * }
     */
    public static void apply$set(MemorySegment seg, MemorySegment x) {
        constants$2522.const$2.set(seg, x);
    }
    public static MemorySegment apply$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2522.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void apply$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2522.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static apply apply(MemorySegment segment, Arena scope) {
        return apply.ofAddress(apply$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*close)(struct _GtkAssistant*);
     * }
     */
    public interface close {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(close fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2522.const$3, fi, constants$13.const$1, scope);
        }
        static close ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle close$VH() {
        return constants$2522.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*close)(struct _GtkAssistant*);
     * }
     */
    public static MemorySegment close$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2522.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*close)(struct _GtkAssistant*);
     * }
     */
    public static void close$set(MemorySegment seg, MemorySegment x) {
        constants$2522.const$4.set(seg, x);
    }
    public static MemorySegment close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2522.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void close$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2522.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static close close(MemorySegment segment, Arena scope) {
        return close.ofAddress(close$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*cancel)(struct _GtkAssistant*);
     * }
     */
    public interface cancel {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(cancel fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2522.const$5, fi, constants$13.const$1, scope);
        }
        static cancel ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cancel$VH() {
        return constants$2523.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*cancel)(struct _GtkAssistant*);
     * }
     */
    public static MemorySegment cancel$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2523.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*cancel)(struct _GtkAssistant*);
     * }
     */
    public static void cancel$set(MemorySegment seg, MemorySegment x) {
        constants$2523.const$0.set(seg, x);
    }
    public static MemorySegment cancel$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2523.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cancel$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2523.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static cancel cancel(MemorySegment segment, Arena scope) {
        return cancel.ofAddress(cancel$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2523.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2523.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2523.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2523.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2523.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2523.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2523.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2523.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2523.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2523.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2523.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2523.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2523.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2524.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2524.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2524.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2524.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2524.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2524.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2524.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2524.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2524.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2524.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2524.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2524.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved5$VH() {
        return constants$2524.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2524.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$2524.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2524.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2524.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, Arena scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


