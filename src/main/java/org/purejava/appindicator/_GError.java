// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang=c :
 * struct _GError {
 *     GQuark domain;
 *     gint code;
 *     gchar *message;
 * }
 * }
 */
public class _GError {

    _GError() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_INT.withName("domain"),
        app_indicator_h.C_INT.withName("code"),
        app_indicator_h.C_POINTER.withName("message")
    ).withName("_GError");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt domain$LAYOUT = (OfInt)$LAYOUT.select(groupElement("domain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GQuark domain
     * }
     */
    public static final OfInt domain$layout() {
        return domain$LAYOUT;
    }

    private static final long domain$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GQuark domain
     * }
     */
    public static final long domain$offset() {
        return domain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GQuark domain
     * }
     */
    public static int domain(MemorySegment struct) {
        return struct.get(domain$LAYOUT, domain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GQuark domain
     * }
     */
    public static void domain(MemorySegment struct, int fieldValue) {
        struct.set(domain$LAYOUT, domain$OFFSET, fieldValue);
    }

    private static final OfInt code$LAYOUT = (OfInt)$LAYOUT.select(groupElement("code"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint code
     * }
     */
    public static final OfInt code$layout() {
        return code$LAYOUT;
    }

    private static final long code$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint code
     * }
     */
    public static final long code$offset() {
        return code$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint code
     * }
     */
    public static int code(MemorySegment struct) {
        return struct.get(code$LAYOUT, code$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint code
     * }
     */
    public static void code(MemorySegment struct, int fieldValue) {
        struct.set(code$LAYOUT, code$OFFSET, fieldValue);
    }

    private static final AddressLayout message$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("message"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar *message
     * }
     */
    public static final AddressLayout message$layout() {
        return message$LAYOUT;
    }

    private static final long message$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar *message
     * }
     */
    public static final long message$offset() {
        return message$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar *message
     * }
     */
    public static MemorySegment message(MemorySegment struct) {
        return struct.get(message$LAYOUT, message$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar *message
     * }
     */
    public static void message(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(message$LAYOUT, message$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

