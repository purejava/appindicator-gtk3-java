// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkTextViewClass {
 *     struct _GtkContainerClass parent_class;
 *     void (*populate_popup)(struct _GtkTextView*,struct _GtkWidget*);
 *     void (*move_cursor)(struct _GtkTextView*,enum GtkMovementStep,int,int);
 *     void (*set_anchor)(struct _GtkTextView*);
 *     void (*insert_at_cursor)(struct _GtkTextView*,char*);
 *     void (*delete_from_cursor)(struct _GtkTextView*,enum GtkDeleteType,int);
 *     void (*backspace)(struct _GtkTextView*);
 *     void (*cut_clipboard)(struct _GtkTextView*);
 *     void (*copy_clipboard)(struct _GtkTextView*);
 *     void (*paste_clipboard)(struct _GtkTextView*);
 *     void (*toggle_overwrite)(struct _GtkTextView*);
 *     struct _GtkTextBuffer* (*create_buffer)(struct _GtkTextView*);
 *     void (*draw_layer)(struct _GtkTextView*,enum GtkTextViewLayer,struct _cairo*);
 *     int (*extend_selection)(struct _GtkTextView*,enum GtkTextExtendSelection,struct _GtkTextIter*,struct _GtkTextIter*,struct _GtkTextIter*);
 *     void (*insert_emoji)(struct _GtkTextView*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkTextViewClass {

    public static MemoryLayout $LAYOUT() {
        return constants$3144.const$2;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 976);
    }
    /**
     * {@snippet :
 * void (*populate_popup)(struct _GtkTextView*,struct _GtkWidget*);
     * }
     */
    public interface populate_popup {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(populate_popup fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3144.const$3, fi, constants$13.const$4, scope);
        }
        static populate_popup ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle populate_popup$VH() {
        return constants$3144.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*populate_popup)(struct _GtkTextView*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment populate_popup$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3144.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*populate_popup)(struct _GtkTextView*,struct _GtkWidget*);
     * }
     */
    public static void populate_popup$set(MemorySegment seg, MemorySegment x) {
        constants$3144.const$4.set(seg, x);
    }
    public static MemorySegment populate_popup$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3144.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void populate_popup$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3144.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static populate_popup populate_popup(MemorySegment segment, Arena scope) {
        return populate_popup.ofAddress(populate_popup$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*move_cursor)(struct _GtkTextView*,enum GtkMovementStep,int,int);
     * }
     */
    public interface move_cursor {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(move_cursor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3144.const$5, fi, constants$1131.const$1, scope);
        }
        static move_cursor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    constants$2243.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_cursor$VH() {
        return constants$3145.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*move_cursor)(struct _GtkTextView*,enum GtkMovementStep,int,int);
     * }
     */
    public static MemorySegment move_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3145.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*move_cursor)(struct _GtkTextView*,enum GtkMovementStep,int,int);
     * }
     */
    public static void move_cursor$set(MemorySegment seg, MemorySegment x) {
        constants$3145.const$0.set(seg, x);
    }
    public static MemorySegment move_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3145.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void move_cursor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3145.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_cursor move_cursor(MemorySegment segment, Arena scope) {
        return move_cursor.ofAddress(move_cursor$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_anchor)(struct _GtkTextView*);
     * }
     */
    public interface set_anchor {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(set_anchor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3145.const$1, fi, constants$13.const$1, scope);
        }
        static set_anchor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_anchor$VH() {
        return constants$3145.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_anchor)(struct _GtkTextView*);
     * }
     */
    public static MemorySegment set_anchor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3145.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_anchor)(struct _GtkTextView*);
     * }
     */
    public static void set_anchor$set(MemorySegment seg, MemorySegment x) {
        constants$3145.const$2.set(seg, x);
    }
    public static MemorySegment set_anchor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3145.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void set_anchor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3145.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_anchor set_anchor(MemorySegment segment, Arena scope) {
        return set_anchor.ofAddress(set_anchor$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*insert_at_cursor)(struct _GtkTextView*,char*);
     * }
     */
    public interface insert_at_cursor {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(insert_at_cursor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3145.const$3, fi, constants$13.const$4, scope);
        }
        static insert_at_cursor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insert_at_cursor$VH() {
        return constants$3145.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*insert_at_cursor)(struct _GtkTextView*,char*);
     * }
     */
    public static MemorySegment insert_at_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3145.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*insert_at_cursor)(struct _GtkTextView*,char*);
     * }
     */
    public static void insert_at_cursor$set(MemorySegment seg, MemorySegment x) {
        constants$3145.const$4.set(seg, x);
    }
    public static MemorySegment insert_at_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3145.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_at_cursor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3145.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_at_cursor insert_at_cursor(MemorySegment segment, Arena scope) {
        return insert_at_cursor.ofAddress(insert_at_cursor$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*delete_from_cursor)(struct _GtkTextView*,enum GtkDeleteType,int);
     * }
     */
    public interface delete_from_cursor {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(delete_from_cursor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3145.const$5, fi, constants$467.const$3, scope);
        }
        static delete_from_cursor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1901.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle delete_from_cursor$VH() {
        return constants$3146.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*delete_from_cursor)(struct _GtkTextView*,enum GtkDeleteType,int);
     * }
     */
    public static MemorySegment delete_from_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3146.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*delete_from_cursor)(struct _GtkTextView*,enum GtkDeleteType,int);
     * }
     */
    public static void delete_from_cursor$set(MemorySegment seg, MemorySegment x) {
        constants$3146.const$0.set(seg, x);
    }
    public static MemorySegment delete_from_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3146.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_from_cursor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3146.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_from_cursor delete_from_cursor(MemorySegment segment, Arena scope) {
        return delete_from_cursor.ofAddress(delete_from_cursor$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*backspace)(struct _GtkTextView*);
     * }
     */
    public interface backspace {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(backspace fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3146.const$1, fi, constants$13.const$1, scope);
        }
        static backspace ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle backspace$VH() {
        return constants$3146.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*backspace)(struct _GtkTextView*);
     * }
     */
    public static MemorySegment backspace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3146.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*backspace)(struct _GtkTextView*);
     * }
     */
    public static void backspace$set(MemorySegment seg, MemorySegment x) {
        constants$3146.const$2.set(seg, x);
    }
    public static MemorySegment backspace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3146.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void backspace$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3146.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static backspace backspace(MemorySegment segment, Arena scope) {
        return backspace.ofAddress(backspace$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*cut_clipboard)(struct _GtkTextView*);
     * }
     */
    public interface cut_clipboard {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(cut_clipboard fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3146.const$3, fi, constants$13.const$1, scope);
        }
        static cut_clipboard ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cut_clipboard$VH() {
        return constants$3146.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*cut_clipboard)(struct _GtkTextView*);
     * }
     */
    public static MemorySegment cut_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3146.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*cut_clipboard)(struct _GtkTextView*);
     * }
     */
    public static void cut_clipboard$set(MemorySegment seg, MemorySegment x) {
        constants$3146.const$4.set(seg, x);
    }
    public static MemorySegment cut_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3146.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cut_clipboard$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3146.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static cut_clipboard cut_clipboard(MemorySegment segment, Arena scope) {
        return cut_clipboard.ofAddress(cut_clipboard$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*copy_clipboard)(struct _GtkTextView*);
     * }
     */
    public interface copy_clipboard {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(copy_clipboard fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3146.const$5, fi, constants$13.const$1, scope);
        }
        static copy_clipboard ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle copy_clipboard$VH() {
        return constants$3147.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*copy_clipboard)(struct _GtkTextView*);
     * }
     */
    public static MemorySegment copy_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3147.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*copy_clipboard)(struct _GtkTextView*);
     * }
     */
    public static void copy_clipboard$set(MemorySegment seg, MemorySegment x) {
        constants$3147.const$0.set(seg, x);
    }
    public static MemorySegment copy_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3147.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_clipboard$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3147.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_clipboard copy_clipboard(MemorySegment segment, Arena scope) {
        return copy_clipboard.ofAddress(copy_clipboard$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*paste_clipboard)(struct _GtkTextView*);
     * }
     */
    public interface paste_clipboard {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(paste_clipboard fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3147.const$1, fi, constants$13.const$1, scope);
        }
        static paste_clipboard ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle paste_clipboard$VH() {
        return constants$3147.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*paste_clipboard)(struct _GtkTextView*);
     * }
     */
    public static MemorySegment paste_clipboard$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3147.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*paste_clipboard)(struct _GtkTextView*);
     * }
     */
    public static void paste_clipboard$set(MemorySegment seg, MemorySegment x) {
        constants$3147.const$2.set(seg, x);
    }
    public static MemorySegment paste_clipboard$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3147.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void paste_clipboard$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3147.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static paste_clipboard paste_clipboard(MemorySegment segment, Arena scope) {
        return paste_clipboard.ofAddress(paste_clipboard$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*toggle_overwrite)(struct _GtkTextView*);
     * }
     */
    public interface toggle_overwrite {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(toggle_overwrite fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3147.const$3, fi, constants$13.const$1, scope);
        }
        static toggle_overwrite ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle toggle_overwrite$VH() {
        return constants$3147.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*toggle_overwrite)(struct _GtkTextView*);
     * }
     */
    public static MemorySegment toggle_overwrite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3147.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*toggle_overwrite)(struct _GtkTextView*);
     * }
     */
    public static void toggle_overwrite$set(MemorySegment seg, MemorySegment x) {
        constants$3147.const$4.set(seg, x);
    }
    public static MemorySegment toggle_overwrite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3147.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_overwrite$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3147.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_overwrite toggle_overwrite(MemorySegment segment, Arena scope) {
        return toggle_overwrite.ofAddress(toggle_overwrite$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkTextBuffer* (*create_buffer)(struct _GtkTextView*);
     * }
     */
    public interface create_buffer {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(create_buffer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3147.const$5, fi, constants$5.const$2, scope);
        }
        static create_buffer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_buffer$VH() {
        return constants$3148.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkTextBuffer* (*create_buffer)(struct _GtkTextView*);
     * }
     */
    public static MemorySegment create_buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3148.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkTextBuffer* (*create_buffer)(struct _GtkTextView*);
     * }
     */
    public static void create_buffer$set(MemorySegment seg, MemorySegment x) {
        constants$3148.const$0.set(seg, x);
    }
    public static MemorySegment create_buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3148.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void create_buffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3148.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_buffer create_buffer(MemorySegment segment, Arena scope) {
        return create_buffer.ofAddress(create_buffer$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*draw_layer)(struct _GtkTextView*,enum GtkTextViewLayer,struct _cairo*);
     * }
     */
    public interface draw_layer {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(draw_layer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3148.const$1, fi, constants$42.const$4, scope);
        }
        static draw_layer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$625.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_layer$VH() {
        return constants$3148.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_layer)(struct _GtkTextView*,enum GtkTextViewLayer,struct _cairo*);
     * }
     */
    public static MemorySegment draw_layer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3148.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_layer)(struct _GtkTextView*,enum GtkTextViewLayer,struct _cairo*);
     * }
     */
    public static void draw_layer$set(MemorySegment seg, MemorySegment x) {
        constants$3148.const$2.set(seg, x);
    }
    public static MemorySegment draw_layer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3148.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_layer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3148.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_layer draw_layer(MemorySegment segment, Arena scope) {
        return draw_layer.ofAddress(draw_layer$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*extend_selection)(struct _GtkTextView*,enum GtkTextExtendSelection,struct _GtkTextIter*,struct _GtkTextIter*,struct _GtkTextIter*);
     * }
     */
    public interface extend_selection {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(extend_selection fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3148.const$3, fi, constants$373.const$2, scope);
        }
        static extend_selection ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$1427.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle extend_selection$VH() {
        return constants$3148.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*extend_selection)(struct _GtkTextView*,enum GtkTextExtendSelection,struct _GtkTextIter*,struct _GtkTextIter*,struct _GtkTextIter*);
     * }
     */
    public static MemorySegment extend_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3148.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*extend_selection)(struct _GtkTextView*,enum GtkTextExtendSelection,struct _GtkTextIter*,struct _GtkTextIter*,struct _GtkTextIter*);
     * }
     */
    public static void extend_selection$set(MemorySegment seg, MemorySegment x) {
        constants$3148.const$4.set(seg, x);
    }
    public static MemorySegment extend_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3148.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void extend_selection$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3148.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static extend_selection extend_selection(MemorySegment segment, Arena scope) {
        return extend_selection.ofAddress(extend_selection$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*insert_emoji)(struct _GtkTextView*);
     * }
     */
    public interface insert_emoji {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(insert_emoji fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3148.const$5, fi, constants$13.const$1, scope);
        }
        static insert_emoji ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insert_emoji$VH() {
        return constants$3149.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*insert_emoji)(struct _GtkTextView*);
     * }
     */
    public static MemorySegment insert_emoji$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3149.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*insert_emoji)(struct _GtkTextView*);
     * }
     */
    public static void insert_emoji$set(MemorySegment seg, MemorySegment x) {
        constants$3149.const$0.set(seg, x);
    }
    public static MemorySegment insert_emoji$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3149.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_emoji$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3149.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_emoji insert_emoji(MemorySegment segment, Arena scope) {
        return insert_emoji.ofAddress(insert_emoji$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3149.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$3149.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3149.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$3149.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3149.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3149.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3149.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$3149.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3149.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$3149.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3149.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3149.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3149.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$3150.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3150.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$3150.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3150.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3150.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3150.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$3150.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3150.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$3150.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3150.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3150.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


