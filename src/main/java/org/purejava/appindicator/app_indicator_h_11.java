// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_11 extends app_indicator_h_12 {

    app_indicator_h_11() {
        // Should not be called directly
    }
    /**
     * {@snippet lang=c :
     * typedef GQueue *GPollableInputStream_queueautoptr
     * }
     */
    public static final AddressLayout GPollableInputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GPollableOutputStream *GPollableOutputStream_autoptr
     * }
     */
    public static final AddressLayout GPollableOutputStream_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GPollableOutputStream_listautoptr
     * }
     */
    public static final AddressLayout GPollableOutputStream_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GPollableOutputStream_slistautoptr
     * }
     */
    public static final AddressLayout GPollableOutputStream_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GPollableOutputStream_queueautoptr
     * }
     */
    public static final AddressLayout GPollableOutputStream_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GPropertyAction *GPropertyAction_autoptr
     * }
     */
    public static final AddressLayout GPropertyAction_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GPropertyAction_listautoptr
     * }
     */
    public static final AddressLayout GPropertyAction_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GPropertyAction_slistautoptr
     * }
     */
    public static final AddressLayout GPropertyAction_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GPropertyAction_queueautoptr
     * }
     */
    public static final AddressLayout GPropertyAction_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GProxyAddressEnumerator *GProxyAddressEnumerator_autoptr
     * }
     */
    public static final AddressLayout GProxyAddressEnumerator_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GProxyAddressEnumerator_listautoptr
     * }
     */
    public static final AddressLayout GProxyAddressEnumerator_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GProxyAddressEnumerator_slistautoptr
     * }
     */
    public static final AddressLayout GProxyAddressEnumerator_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GProxyAddressEnumerator_queueautoptr
     * }
     */
    public static final AddressLayout GProxyAddressEnumerator_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GProxyAddress *GProxyAddress_autoptr
     * }
     */
    public static final AddressLayout GProxyAddress_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GProxyAddress_listautoptr
     * }
     */
    public static final AddressLayout GProxyAddress_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GProxyAddress_slistautoptr
     * }
     */
    public static final AddressLayout GProxyAddress_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GProxyAddress_queueautoptr
     * }
     */
    public static final AddressLayout GProxyAddress_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GProxy *GProxy_autoptr
     * }
     */
    public static final AddressLayout GProxy_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GProxy_listautoptr
     * }
     */
    public static final AddressLayout GProxy_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GProxy_slistautoptr
     * }
     */
    public static final AddressLayout GProxy_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GProxy_queueautoptr
     * }
     */
    public static final AddressLayout GProxy_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GProxyResolver *GProxyResolver_autoptr
     * }
     */
    public static final AddressLayout GProxyResolver_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GProxyResolver_listautoptr
     * }
     */
    public static final AddressLayout GProxyResolver_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GProxyResolver_slistautoptr
     * }
     */
    public static final AddressLayout GProxyResolver_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GProxyResolver_queueautoptr
     * }
     */
    public static final AddressLayout GProxyResolver_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GRemoteActionGroup *GRemoteActionGroup_autoptr
     * }
     */
    public static final AddressLayout GRemoteActionGroup_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GRemoteActionGroup_listautoptr
     * }
     */
    public static final AddressLayout GRemoteActionGroup_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GRemoteActionGroup_slistautoptr
     * }
     */
    public static final AddressLayout GRemoteActionGroup_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GRemoteActionGroup_queueautoptr
     * }
     */
    public static final AddressLayout GRemoteActionGroup_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GResolver *GResolver_autoptr
     * }
     */
    public static final AddressLayout GResolver_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GResolver_listautoptr
     * }
     */
    public static final AddressLayout GResolver_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GResolver_slistautoptr
     * }
     */
    public static final AddressLayout GResolver_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GResolver_queueautoptr
     * }
     */
    public static final AddressLayout GResolver_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GResource *GResource_autoptr
     * }
     */
    public static final AddressLayout GResource_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GResource_listautoptr
     * }
     */
    public static final AddressLayout GResource_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GResource_slistautoptr
     * }
     */
    public static final AddressLayout GResource_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GResource_queueautoptr
     * }
     */
    public static final AddressLayout GResource_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSeekable *GSeekable_autoptr
     * }
     */
    public static final AddressLayout GSeekable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSeekable_listautoptr
     * }
     */
    public static final AddressLayout GSeekable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSeekable_slistautoptr
     * }
     */
    public static final AddressLayout GSeekable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSeekable_queueautoptr
     * }
     */
    public static final AddressLayout GSeekable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSettingsBackend *GSettingsBackend_autoptr
     * }
     */
    public static final AddressLayout GSettingsBackend_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSettingsBackend_listautoptr
     * }
     */
    public static final AddressLayout GSettingsBackend_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSettingsBackend_slistautoptr
     * }
     */
    public static final AddressLayout GSettingsBackend_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSettingsBackend_queueautoptr
     * }
     */
    public static final AddressLayout GSettingsBackend_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSettingsSchema *GSettingsSchema_autoptr
     * }
     */
    public static final AddressLayout GSettingsSchema_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSettingsSchema_listautoptr
     * }
     */
    public static final AddressLayout GSettingsSchema_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSettingsSchema_slistautoptr
     * }
     */
    public static final AddressLayout GSettingsSchema_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSettingsSchema_queueautoptr
     * }
     */
    public static final AddressLayout GSettingsSchema_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSettingsSchemaKey *GSettingsSchemaKey_autoptr
     * }
     */
    public static final AddressLayout GSettingsSchemaKey_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSettingsSchemaKey_listautoptr
     * }
     */
    public static final AddressLayout GSettingsSchemaKey_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSettingsSchemaKey_slistautoptr
     * }
     */
    public static final AddressLayout GSettingsSchemaKey_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSettingsSchemaKey_queueautoptr
     * }
     */
    public static final AddressLayout GSettingsSchemaKey_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSettingsSchemaSource *GSettingsSchemaSource_autoptr
     * }
     */
    public static final AddressLayout GSettingsSchemaSource_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSettingsSchemaSource_listautoptr
     * }
     */
    public static final AddressLayout GSettingsSchemaSource_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSettingsSchemaSource_slistautoptr
     * }
     */
    public static final AddressLayout GSettingsSchemaSource_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSettingsSchemaSource_queueautoptr
     * }
     */
    public static final AddressLayout GSettingsSchemaSource_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSettings *GSettings_autoptr
     * }
     */
    public static final AddressLayout GSettings_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSettings_listautoptr
     * }
     */
    public static final AddressLayout GSettings_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSettings_slistautoptr
     * }
     */
    public static final AddressLayout GSettings_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSettings_queueautoptr
     * }
     */
    public static final AddressLayout GSettings_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSimpleActionGroup *GSimpleActionGroup_autoptr
     * }
     */
    public static final AddressLayout GSimpleActionGroup_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSimpleActionGroup_listautoptr
     * }
     */
    public static final AddressLayout GSimpleActionGroup_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSimpleActionGroup_slistautoptr
     * }
     */
    public static final AddressLayout GSimpleActionGroup_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSimpleActionGroup_queueautoptr
     * }
     */
    public static final AddressLayout GSimpleActionGroup_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSimpleAction *GSimpleAction_autoptr
     * }
     */
    public static final AddressLayout GSimpleAction_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSimpleAction_listautoptr
     * }
     */
    public static final AddressLayout GSimpleAction_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSimpleAction_slistautoptr
     * }
     */
    public static final AddressLayout GSimpleAction_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSimpleAction_queueautoptr
     * }
     */
    public static final AddressLayout GSimpleAction_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSimpleAsyncResult *GSimpleAsyncResult_autoptr
     * }
     */
    public static final AddressLayout GSimpleAsyncResult_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSimpleAsyncResult_listautoptr
     * }
     */
    public static final AddressLayout GSimpleAsyncResult_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSimpleAsyncResult_slistautoptr
     * }
     */
    public static final AddressLayout GSimpleAsyncResult_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSimpleAsyncResult_queueautoptr
     * }
     */
    public static final AddressLayout GSimpleAsyncResult_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSimplePermission *GSimplePermission_autoptr
     * }
     */
    public static final AddressLayout GSimplePermission_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSimplePermission_listautoptr
     * }
     */
    public static final AddressLayout GSimplePermission_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSimplePermission_slistautoptr
     * }
     */
    public static final AddressLayout GSimplePermission_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSimplePermission_queueautoptr
     * }
     */
    public static final AddressLayout GSimplePermission_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSimpleProxyResolver *GSimpleProxyResolver_autoptr
     * }
     */
    public static final AddressLayout GSimpleProxyResolver_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSimpleProxyResolver_listautoptr
     * }
     */
    public static final AddressLayout GSimpleProxyResolver_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSimpleProxyResolver_slistautoptr
     * }
     */
    public static final AddressLayout GSimpleProxyResolver_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSimpleProxyResolver_queueautoptr
     * }
     */
    public static final AddressLayout GSimpleProxyResolver_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSocketAddressEnumerator *GSocketAddressEnumerator_autoptr
     * }
     */
    public static final AddressLayout GSocketAddressEnumerator_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSocketAddressEnumerator_listautoptr
     * }
     */
    public static final AddressLayout GSocketAddressEnumerator_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSocketAddressEnumerator_slistautoptr
     * }
     */
    public static final AddressLayout GSocketAddressEnumerator_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSocketAddressEnumerator_queueautoptr
     * }
     */
    public static final AddressLayout GSocketAddressEnumerator_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSocketAddress *GSocketAddress_autoptr
     * }
     */
    public static final AddressLayout GSocketAddress_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSocketAddress_listautoptr
     * }
     */
    public static final AddressLayout GSocketAddress_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSocketAddress_slistautoptr
     * }
     */
    public static final AddressLayout GSocketAddress_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSocketAddress_queueautoptr
     * }
     */
    public static final AddressLayout GSocketAddress_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSocketClient *GSocketClient_autoptr
     * }
     */
    public static final AddressLayout GSocketClient_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSocketClient_listautoptr
     * }
     */
    public static final AddressLayout GSocketClient_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSocketClient_slistautoptr
     * }
     */
    public static final AddressLayout GSocketClient_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSocketClient_queueautoptr
     * }
     */
    public static final AddressLayout GSocketClient_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSocketConnectable *GSocketConnectable_autoptr
     * }
     */
    public static final AddressLayout GSocketConnectable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSocketConnectable_listautoptr
     * }
     */
    public static final AddressLayout GSocketConnectable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSocketConnectable_slistautoptr
     * }
     */
    public static final AddressLayout GSocketConnectable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSocketConnectable_queueautoptr
     * }
     */
    public static final AddressLayout GSocketConnectable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSocketConnection *GSocketConnection_autoptr
     * }
     */
    public static final AddressLayout GSocketConnection_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSocketConnection_listautoptr
     * }
     */
    public static final AddressLayout GSocketConnection_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSocketConnection_slistautoptr
     * }
     */
    public static final AddressLayout GSocketConnection_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSocketConnection_queueautoptr
     * }
     */
    public static final AddressLayout GSocketConnection_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSocketControlMessage *GSocketControlMessage_autoptr
     * }
     */
    public static final AddressLayout GSocketControlMessage_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSocketControlMessage_listautoptr
     * }
     */
    public static final AddressLayout GSocketControlMessage_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSocketControlMessage_slistautoptr
     * }
     */
    public static final AddressLayout GSocketControlMessage_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSocketControlMessage_queueautoptr
     * }
     */
    public static final AddressLayout GSocketControlMessage_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSocket *GSocket_autoptr
     * }
     */
    public static final AddressLayout GSocket_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSocket_listautoptr
     * }
     */
    public static final AddressLayout GSocket_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSocket_slistautoptr
     * }
     */
    public static final AddressLayout GSocket_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSocket_queueautoptr
     * }
     */
    public static final AddressLayout GSocket_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSocketListener *GSocketListener_autoptr
     * }
     */
    public static final AddressLayout GSocketListener_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSocketListener_listautoptr
     * }
     */
    public static final AddressLayout GSocketListener_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSocketListener_slistautoptr
     * }
     */
    public static final AddressLayout GSocketListener_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSocketListener_queueautoptr
     * }
     */
    public static final AddressLayout GSocketListener_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSocketService *GSocketService_autoptr
     * }
     */
    public static final AddressLayout GSocketService_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSocketService_listautoptr
     * }
     */
    public static final AddressLayout GSocketService_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSocketService_slistautoptr
     * }
     */
    public static final AddressLayout GSocketService_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSocketService_queueautoptr
     * }
     */
    public static final AddressLayout GSocketService_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSubprocess *GSubprocess_autoptr
     * }
     */
    public static final AddressLayout GSubprocess_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSubprocess_listautoptr
     * }
     */
    public static final AddressLayout GSubprocess_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSubprocess_slistautoptr
     * }
     */
    public static final AddressLayout GSubprocess_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSubprocess_queueautoptr
     * }
     */
    public static final AddressLayout GSubprocess_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSubprocessLauncher *GSubprocessLauncher_autoptr
     * }
     */
    public static final AddressLayout GSubprocessLauncher_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSubprocessLauncher_listautoptr
     * }
     */
    public static final AddressLayout GSubprocessLauncher_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSubprocessLauncher_slistautoptr
     * }
     */
    public static final AddressLayout GSubprocessLauncher_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSubprocessLauncher_queueautoptr
     * }
     */
    public static final AddressLayout GSubprocessLauncher_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTask *GTask_autoptr
     * }
     */
    public static final AddressLayout GTask_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTask_listautoptr
     * }
     */
    public static final AddressLayout GTask_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTask_slistautoptr
     * }
     */
    public static final AddressLayout GTask_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTask_queueautoptr
     * }
     */
    public static final AddressLayout GTask_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTcpConnection *GTcpConnection_autoptr
     * }
     */
    public static final AddressLayout GTcpConnection_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTcpConnection_listautoptr
     * }
     */
    public static final AddressLayout GTcpConnection_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTcpConnection_slistautoptr
     * }
     */
    public static final AddressLayout GTcpConnection_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTcpConnection_queueautoptr
     * }
     */
    public static final AddressLayout GTcpConnection_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTcpWrapperConnection *GTcpWrapperConnection_autoptr
     * }
     */
    public static final AddressLayout GTcpWrapperConnection_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTcpWrapperConnection_listautoptr
     * }
     */
    public static final AddressLayout GTcpWrapperConnection_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTcpWrapperConnection_slistautoptr
     * }
     */
    public static final AddressLayout GTcpWrapperConnection_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTcpWrapperConnection_queueautoptr
     * }
     */
    public static final AddressLayout GTcpWrapperConnection_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTestDBus *GTestDBus_autoptr
     * }
     */
    public static final AddressLayout GTestDBus_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTestDBus_listautoptr
     * }
     */
    public static final AddressLayout GTestDBus_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTestDBus_slistautoptr
     * }
     */
    public static final AddressLayout GTestDBus_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTestDBus_queueautoptr
     * }
     */
    public static final AddressLayout GTestDBus_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GThemedIcon *GThemedIcon_autoptr
     * }
     */
    public static final AddressLayout GThemedIcon_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GThemedIcon_listautoptr
     * }
     */
    public static final AddressLayout GThemedIcon_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GThemedIcon_slistautoptr
     * }
     */
    public static final AddressLayout GThemedIcon_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GThemedIcon_queueautoptr
     * }
     */
    public static final AddressLayout GThemedIcon_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GThreadedSocketService *GThreadedSocketService_autoptr
     * }
     */
    public static final AddressLayout GThreadedSocketService_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GThreadedSocketService_listautoptr
     * }
     */
    public static final AddressLayout GThreadedSocketService_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GThreadedSocketService_slistautoptr
     * }
     */
    public static final AddressLayout GThreadedSocketService_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GThreadedSocketService_queueautoptr
     * }
     */
    public static final AddressLayout GThreadedSocketService_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTlsBackend *GTlsBackend_autoptr
     * }
     */
    public static final AddressLayout GTlsBackend_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTlsBackend_listautoptr
     * }
     */
    public static final AddressLayout GTlsBackend_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTlsBackend_slistautoptr
     * }
     */
    public static final AddressLayout GTlsBackend_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTlsBackend_queueautoptr
     * }
     */
    public static final AddressLayout GTlsBackend_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTlsCertificate *GTlsCertificate_autoptr
     * }
     */
    public static final AddressLayout GTlsCertificate_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTlsCertificate_listautoptr
     * }
     */
    public static final AddressLayout GTlsCertificate_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTlsCertificate_slistautoptr
     * }
     */
    public static final AddressLayout GTlsCertificate_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTlsCertificate_queueautoptr
     * }
     */
    public static final AddressLayout GTlsCertificate_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTlsClientConnection *GTlsClientConnection_autoptr
     * }
     */
    public static final AddressLayout GTlsClientConnection_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTlsClientConnection_listautoptr
     * }
     */
    public static final AddressLayout GTlsClientConnection_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTlsClientConnection_slistautoptr
     * }
     */
    public static final AddressLayout GTlsClientConnection_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTlsClientConnection_queueautoptr
     * }
     */
    public static final AddressLayout GTlsClientConnection_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTlsConnection *GTlsConnection_autoptr
     * }
     */
    public static final AddressLayout GTlsConnection_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTlsConnection_listautoptr
     * }
     */
    public static final AddressLayout GTlsConnection_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTlsConnection_slistautoptr
     * }
     */
    public static final AddressLayout GTlsConnection_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTlsConnection_queueautoptr
     * }
     */
    public static final AddressLayout GTlsConnection_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTlsDatabase *GTlsDatabase_autoptr
     * }
     */
    public static final AddressLayout GTlsDatabase_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTlsDatabase_listautoptr
     * }
     */
    public static final AddressLayout GTlsDatabase_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTlsDatabase_slistautoptr
     * }
     */
    public static final AddressLayout GTlsDatabase_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTlsDatabase_queueautoptr
     * }
     */
    public static final AddressLayout GTlsDatabase_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTlsFileDatabase *GTlsFileDatabase_autoptr
     * }
     */
    public static final AddressLayout GTlsFileDatabase_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTlsFileDatabase_listautoptr
     * }
     */
    public static final AddressLayout GTlsFileDatabase_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTlsFileDatabase_slistautoptr
     * }
     */
    public static final AddressLayout GTlsFileDatabase_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTlsFileDatabase_queueautoptr
     * }
     */
    public static final AddressLayout GTlsFileDatabase_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTlsInteraction *GTlsInteraction_autoptr
     * }
     */
    public static final AddressLayout GTlsInteraction_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTlsInteraction_listautoptr
     * }
     */
    public static final AddressLayout GTlsInteraction_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTlsInteraction_slistautoptr
     * }
     */
    public static final AddressLayout GTlsInteraction_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTlsInteraction_queueautoptr
     * }
     */
    public static final AddressLayout GTlsInteraction_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTlsPassword *GTlsPassword_autoptr
     * }
     */
    public static final AddressLayout GTlsPassword_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTlsPassword_listautoptr
     * }
     */
    public static final AddressLayout GTlsPassword_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTlsPassword_slistautoptr
     * }
     */
    public static final AddressLayout GTlsPassword_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTlsPassword_queueautoptr
     * }
     */
    public static final AddressLayout GTlsPassword_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTlsServerConnection *GTlsServerConnection_autoptr
     * }
     */
    public static final AddressLayout GTlsServerConnection_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTlsServerConnection_listautoptr
     * }
     */
    public static final AddressLayout GTlsServerConnection_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTlsServerConnection_slistautoptr
     * }
     */
    public static final AddressLayout GTlsServerConnection_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTlsServerConnection_queueautoptr
     * }
     */
    public static final AddressLayout GTlsServerConnection_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GVfs *GVfs_autoptr
     * }
     */
    public static final AddressLayout GVfs_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GVfs_listautoptr
     * }
     */
    public static final AddressLayout GVfs_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GVfs_slistautoptr
     * }
     */
    public static final AddressLayout GVfs_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GVfs_queueautoptr
     * }
     */
    public static final AddressLayout GVfs_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GVolume *GVolume_autoptr
     * }
     */
    public static final AddressLayout GVolume_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GVolume_listautoptr
     * }
     */
    public static final AddressLayout GVolume_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GVolume_slistautoptr
     * }
     */
    public static final AddressLayout GVolume_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GVolume_queueautoptr
     * }
     */
    public static final AddressLayout GVolume_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GVolumeMonitor *GVolumeMonitor_autoptr
     * }
     */
    public static final AddressLayout GVolumeMonitor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GVolumeMonitor_listautoptr
     * }
     */
    public static final AddressLayout GVolumeMonitor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GVolumeMonitor_slistautoptr
     * }
     */
    public static final AddressLayout GVolumeMonitor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GVolumeMonitor_queueautoptr
     * }
     */
    public static final AddressLayout GVolumeMonitor_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GZlibCompressor *GZlibCompressor_autoptr
     * }
     */
    public static final AddressLayout GZlibCompressor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GZlibCompressor_listautoptr
     * }
     */
    public static final AddressLayout GZlibCompressor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GZlibCompressor_slistautoptr
     * }
     */
    public static final AddressLayout GZlibCompressor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GZlibCompressor_queueautoptr
     * }
     */
    public static final AddressLayout GZlibCompressor_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GZlibDecompressor *GZlibDecompressor_autoptr
     * }
     */
    public static final AddressLayout GZlibDecompressor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GZlibDecompressor_listautoptr
     * }
     */
    public static final AddressLayout GZlibDecompressor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GZlibDecompressor_slistautoptr
     * }
     */
    public static final AddressLayout GZlibDecompressor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GZlibDecompressor_queueautoptr
     * }
     */
    public static final AddressLayout GZlibDecompressor_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t uint8_t
     * }
     */
    public static final OfByte uint8_t = app_indicator_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t uint16_t
     * }
     */
    public static final OfShort uint16_t = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t uint32_t
     * }
     */
    public static final OfInt uint32_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t uint64_t
     * }
     */
    public static final OfLong uint64_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int_least8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = app_indicator_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int_least16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int_least32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int_least64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint_least8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = app_indicator_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint_least16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint_least64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = app_indicator_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long int_fast16_t
     * }
     */
    public static final OfLong int_fast16_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast32_t
     * }
     */
    public static final OfLong int_fast32_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = app_indicator_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast16_t
     * }
     */
    public static final OfLong uint_fast16_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast32_t
     * }
     */
    public static final OfLong uint_fast32_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __intmax_t intmax_t
     * }
     */
    public static final OfLong intmax_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uintmax_t uintmax_t
     * }
     */
    public static final OfLong uintmax_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int hb_bool_t
     * }
     */
    public static final OfInt hb_bool_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t hb_codepoint_t
     * }
     */
    public static final OfInt hb_codepoint_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int32_t hb_position_t
     * }
     */
    public static final OfInt hb_position_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t hb_mask_t
     * }
     */
    public static final OfInt hb_mask_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t hb_tag_t
     * }
     */
    public static final OfInt hb_tag_t = app_indicator_h.C_INT;

    private static class hb_tag_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_tag_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_tag_t hb_tag_from_string(const char *str, int len)
     * }
     */
    public static FunctionDescriptor hb_tag_from_string$descriptor() {
        return hb_tag_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_tag_t hb_tag_from_string(const char *str, int len)
     * }
     */
    public static MethodHandle hb_tag_from_string$handle() {
        return hb_tag_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_tag_t hb_tag_from_string(const char *str, int len)
     * }
     */
    public static int hb_tag_from_string(MemorySegment str, int len) {
        var mh$ = hb_tag_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_tag_from_string", str, len);
            }
            return (int)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_tag_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_tag_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_tag_to_string(hb_tag_t tag, char *buf)
     * }
     */
    public static FunctionDescriptor hb_tag_to_string$descriptor() {
        return hb_tag_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_tag_to_string(hb_tag_t tag, char *buf)
     * }
     */
    public static MethodHandle hb_tag_to_string$handle() {
        return hb_tag_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_tag_to_string(hb_tag_t tag, char *buf)
     * }
     */
    public static void hb_tag_to_string(int tag, MemorySegment buf) {
        var mh$ = hb_tag_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_tag_to_string", tag, buf);
            }
            mh$.invokeExact(tag, buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_DIRECTION_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_DIRECTION_INVALID = 0
     * }
     */
    public static int HB_DIRECTION_INVALID() {
        return HB_DIRECTION_INVALID;
    }
    private static final int HB_DIRECTION_LTR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_DIRECTION_LTR = 4
     * }
     */
    public static int HB_DIRECTION_LTR() {
        return HB_DIRECTION_LTR;
    }
    private static final int HB_DIRECTION_RTL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_DIRECTION_RTL = 5
     * }
     */
    public static int HB_DIRECTION_RTL() {
        return HB_DIRECTION_RTL;
    }
    private static final int HB_DIRECTION_TTB = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_DIRECTION_TTB = 6
     * }
     */
    public static int HB_DIRECTION_TTB() {
        return HB_DIRECTION_TTB;
    }
    private static final int HB_DIRECTION_BTT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_DIRECTION_BTT = 7
     * }
     */
    public static int HB_DIRECTION_BTT() {
        return HB_DIRECTION_BTT;
    }

    private static class hb_direction_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_direction_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_direction_t hb_direction_from_string(const char *str, int len)
     * }
     */
    public static FunctionDescriptor hb_direction_from_string$descriptor() {
        return hb_direction_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_direction_t hb_direction_from_string(const char *str, int len)
     * }
     */
    public static MethodHandle hb_direction_from_string$handle() {
        return hb_direction_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_direction_t hb_direction_from_string(const char *str, int len)
     * }
     */
    public static int hb_direction_from_string(MemorySegment str, int len) {
        var mh$ = hb_direction_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_direction_from_string", str, len);
            }
            return (int)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_direction_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_direction_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *hb_direction_to_string(hb_direction_t direction)
     * }
     */
    public static FunctionDescriptor hb_direction_to_string$descriptor() {
        return hb_direction_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *hb_direction_to_string(hb_direction_t direction)
     * }
     */
    public static MethodHandle hb_direction_to_string$handle() {
        return hb_direction_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *hb_direction_to_string(hb_direction_t direction)
     * }
     */
    public static MemorySegment hb_direction_to_string(int direction) {
        var mh$ = hb_direction_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_direction_to_string", direction);
            }
            return (MemorySegment)mh$.invokeExact(direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef const struct hb_language_impl_t *hb_language_t
     * }
     */
    public static final AddressLayout hb_language_t = app_indicator_h.C_POINTER;

    private static class hb_language_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_language_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_language_t hb_language_from_string(const char *str, int len)
     * }
     */
    public static FunctionDescriptor hb_language_from_string$descriptor() {
        return hb_language_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_language_t hb_language_from_string(const char *str, int len)
     * }
     */
    public static MethodHandle hb_language_from_string$handle() {
        return hb_language_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_language_t hb_language_from_string(const char *str, int len)
     * }
     */
    public static MemorySegment hb_language_from_string(MemorySegment str, int len) {
        var mh$ = hb_language_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_language_from_string", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_language_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_language_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *hb_language_to_string(hb_language_t language)
     * }
     */
    public static FunctionDescriptor hb_language_to_string$descriptor() {
        return hb_language_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *hb_language_to_string(hb_language_t language)
     * }
     */
    public static MethodHandle hb_language_to_string$handle() {
        return hb_language_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *hb_language_to_string(hb_language_t language)
     * }
     */
    public static MemorySegment hb_language_to_string(MemorySegment language) {
        var mh$ = hb_language_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_language_to_string", language);
            }
            return (MemorySegment)mh$.invokeExact(language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_language_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_language_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_language_t hb_language_get_default()
     * }
     */
    public static FunctionDescriptor hb_language_get_default$descriptor() {
        return hb_language_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_language_t hb_language_get_default()
     * }
     */
    public static MethodHandle hb_language_get_default$handle() {
        return hb_language_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_language_t hb_language_get_default()
     * }
     */
    public static MemorySegment hb_language_get_default() {
        var mh$ = hb_language_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_language_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_language_matches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_language_matches"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_language_matches(hb_language_t language, hb_language_t specific)
     * }
     */
    public static FunctionDescriptor hb_language_matches$descriptor() {
        return hb_language_matches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_language_matches(hb_language_t language, hb_language_t specific)
     * }
     */
    public static MethodHandle hb_language_matches$handle() {
        return hb_language_matches.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_language_matches(hb_language_t language, hb_language_t specific)
     * }
     */
    public static int hb_language_matches(MemorySegment language, MemorySegment specific) {
        var mh$ = hb_language_matches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_language_matches", language, specific);
            }
            return (int)mh$.invokeExact(language, specific);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_SCRIPT_COMMON = (int)1517910393L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_COMMON = 1517910393
     * }
     */
    public static int HB_SCRIPT_COMMON() {
        return HB_SCRIPT_COMMON;
    }
    private static final int HB_SCRIPT_INHERITED = (int)1516858984L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_INHERITED = 1516858984
     * }
     */
    public static int HB_SCRIPT_INHERITED() {
        return HB_SCRIPT_INHERITED;
    }
    private static final int HB_SCRIPT_UNKNOWN = (int)1517976186L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_UNKNOWN = 1517976186
     * }
     */
    public static int HB_SCRIPT_UNKNOWN() {
        return HB_SCRIPT_UNKNOWN;
    }
    private static final int HB_SCRIPT_ARABIC = (int)1098015074L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_ARABIC = 1098015074
     * }
     */
    public static int HB_SCRIPT_ARABIC() {
        return HB_SCRIPT_ARABIC;
    }
    private static final int HB_SCRIPT_ARMENIAN = (int)1098018158L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_ARMENIAN = 1098018158
     * }
     */
    public static int HB_SCRIPT_ARMENIAN() {
        return HB_SCRIPT_ARMENIAN;
    }
    private static final int HB_SCRIPT_BENGALI = (int)1113943655L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BENGALI = 1113943655
     * }
     */
    public static int HB_SCRIPT_BENGALI() {
        return HB_SCRIPT_BENGALI;
    }
    private static final int HB_SCRIPT_CYRILLIC = (int)1132032620L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CYRILLIC = 1132032620
     * }
     */
    public static int HB_SCRIPT_CYRILLIC() {
        return HB_SCRIPT_CYRILLIC;
    }
    private static final int HB_SCRIPT_DEVANAGARI = (int)1147500129L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_DEVANAGARI = 1147500129
     * }
     */
    public static int HB_SCRIPT_DEVANAGARI() {
        return HB_SCRIPT_DEVANAGARI;
    }
    private static final int HB_SCRIPT_GEORGIAN = (int)1197830002L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_GEORGIAN = 1197830002
     * }
     */
    public static int HB_SCRIPT_GEORGIAN() {
        return HB_SCRIPT_GEORGIAN;
    }
    private static final int HB_SCRIPT_GREEK = (int)1198679403L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_GREEK = 1198679403
     * }
     */
    public static int HB_SCRIPT_GREEK() {
        return HB_SCRIPT_GREEK;
    }
    private static final int HB_SCRIPT_GUJARATI = (int)1198877298L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_GUJARATI = 1198877298
     * }
     */
    public static int HB_SCRIPT_GUJARATI() {
        return HB_SCRIPT_GUJARATI;
    }
    private static final int HB_SCRIPT_GURMUKHI = (int)1198879349L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_GURMUKHI = 1198879349
     * }
     */
    public static int HB_SCRIPT_GURMUKHI() {
        return HB_SCRIPT_GURMUKHI;
    }
    private static final int HB_SCRIPT_HANGUL = (int)1214344807L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_HANGUL = 1214344807
     * }
     */
    public static int HB_SCRIPT_HANGUL() {
        return HB_SCRIPT_HANGUL;
    }
    private static final int HB_SCRIPT_HAN = (int)1214344809L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_HAN = 1214344809
     * }
     */
    public static int HB_SCRIPT_HAN() {
        return HB_SCRIPT_HAN;
    }
    private static final int HB_SCRIPT_HEBREW = (int)1214603890L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_HEBREW = 1214603890
     * }
     */
    public static int HB_SCRIPT_HEBREW() {
        return HB_SCRIPT_HEBREW;
    }
    private static final int HB_SCRIPT_HIRAGANA = (int)1214870113L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_HIRAGANA = 1214870113
     * }
     */
    public static int HB_SCRIPT_HIRAGANA() {
        return HB_SCRIPT_HIRAGANA;
    }
    private static final int HB_SCRIPT_KANNADA = (int)1265525857L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_KANNADA = 1265525857
     * }
     */
    public static int HB_SCRIPT_KANNADA() {
        return HB_SCRIPT_KANNADA;
    }
    private static final int HB_SCRIPT_KATAKANA = (int)1264676449L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_KATAKANA = 1264676449
     * }
     */
    public static int HB_SCRIPT_KATAKANA() {
        return HB_SCRIPT_KATAKANA;
    }
    private static final int HB_SCRIPT_LAO = (int)1281453935L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_LAO = 1281453935
     * }
     */
    public static int HB_SCRIPT_LAO() {
        return HB_SCRIPT_LAO;
    }
    private static final int HB_SCRIPT_LATIN = (int)1281455214L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_LATIN = 1281455214
     * }
     */
    public static int HB_SCRIPT_LATIN() {
        return HB_SCRIPT_LATIN;
    }
    private static final int HB_SCRIPT_MALAYALAM = (int)1298954605L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MALAYALAM = 1298954605
     * }
     */
    public static int HB_SCRIPT_MALAYALAM() {
        return HB_SCRIPT_MALAYALAM;
    }
    private static final int HB_SCRIPT_ORIYA = (int)1332902241L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_ORIYA = 1332902241
     * }
     */
    public static int HB_SCRIPT_ORIYA() {
        return HB_SCRIPT_ORIYA;
    }
    private static final int HB_SCRIPT_TAMIL = (int)1415671148L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TAMIL = 1415671148
     * }
     */
    public static int HB_SCRIPT_TAMIL() {
        return HB_SCRIPT_TAMIL;
    }
    private static final int HB_SCRIPT_TELUGU = (int)1415933045L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TELUGU = 1415933045
     * }
     */
    public static int HB_SCRIPT_TELUGU() {
        return HB_SCRIPT_TELUGU;
    }
    private static final int HB_SCRIPT_THAI = (int)1416126825L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_THAI = 1416126825
     * }
     */
    public static int HB_SCRIPT_THAI() {
        return HB_SCRIPT_THAI;
    }
    private static final int HB_SCRIPT_TIBETAN = (int)1416192628L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TIBETAN = 1416192628
     * }
     */
    public static int HB_SCRIPT_TIBETAN() {
        return HB_SCRIPT_TIBETAN;
    }
    private static final int HB_SCRIPT_BOPOMOFO = (int)1114599535L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BOPOMOFO = 1114599535
     * }
     */
    public static int HB_SCRIPT_BOPOMOFO() {
        return HB_SCRIPT_BOPOMOFO;
    }
    private static final int HB_SCRIPT_BRAILLE = (int)1114792297L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BRAILLE = 1114792297
     * }
     */
    public static int HB_SCRIPT_BRAILLE() {
        return HB_SCRIPT_BRAILLE;
    }
    private static final int HB_SCRIPT_CANADIAN_SYLLABICS = (int)1130458739L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CANADIAN_SYLLABICS = 1130458739
     * }
     */
    public static int HB_SCRIPT_CANADIAN_SYLLABICS() {
        return HB_SCRIPT_CANADIAN_SYLLABICS;
    }
    private static final int HB_SCRIPT_CHEROKEE = (int)1130915186L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CHEROKEE = 1130915186
     * }
     */
    public static int HB_SCRIPT_CHEROKEE() {
        return HB_SCRIPT_CHEROKEE;
    }
    private static final int HB_SCRIPT_ETHIOPIC = (int)1165256809L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_ETHIOPIC = 1165256809
     * }
     */
    public static int HB_SCRIPT_ETHIOPIC() {
        return HB_SCRIPT_ETHIOPIC;
    }
    private static final int HB_SCRIPT_KHMER = (int)1265134962L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_KHMER = 1265134962
     * }
     */
    public static int HB_SCRIPT_KHMER() {
        return HB_SCRIPT_KHMER;
    }
    private static final int HB_SCRIPT_MONGOLIAN = (int)1299148391L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MONGOLIAN = 1299148391
     * }
     */
    public static int HB_SCRIPT_MONGOLIAN() {
        return HB_SCRIPT_MONGOLIAN;
    }
    private static final int HB_SCRIPT_MYANMAR = (int)1299803506L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MYANMAR = 1299803506
     * }
     */
    public static int HB_SCRIPT_MYANMAR() {
        return HB_SCRIPT_MYANMAR;
    }
    private static final int HB_SCRIPT_OGHAM = (int)1332175213L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OGHAM = 1332175213
     * }
     */
    public static int HB_SCRIPT_OGHAM() {
        return HB_SCRIPT_OGHAM;
    }
    private static final int HB_SCRIPT_RUNIC = (int)1383427698L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_RUNIC = 1383427698
     * }
     */
    public static int HB_SCRIPT_RUNIC() {
        return HB_SCRIPT_RUNIC;
    }
    private static final int HB_SCRIPT_SINHALA = (int)1399418472L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SINHALA = 1399418472
     * }
     */
    public static int HB_SCRIPT_SINHALA() {
        return HB_SCRIPT_SINHALA;
    }
    private static final int HB_SCRIPT_SYRIAC = (int)1400468067L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SYRIAC = 1400468067
     * }
     */
    public static int HB_SCRIPT_SYRIAC() {
        return HB_SCRIPT_SYRIAC;
    }
    private static final int HB_SCRIPT_THAANA = (int)1416126817L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_THAANA = 1416126817
     * }
     */
    public static int HB_SCRIPT_THAANA() {
        return HB_SCRIPT_THAANA;
    }
    private static final int HB_SCRIPT_YI = (int)1500080489L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_YI = 1500080489
     * }
     */
    public static int HB_SCRIPT_YI() {
        return HB_SCRIPT_YI;
    }
    private static final int HB_SCRIPT_DESERET = (int)1148416628L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_DESERET = 1148416628
     * }
     */
    public static int HB_SCRIPT_DESERET() {
        return HB_SCRIPT_DESERET;
    }
    private static final int HB_SCRIPT_GOTHIC = (int)1198486632L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_GOTHIC = 1198486632
     * }
     */
    public static int HB_SCRIPT_GOTHIC() {
        return HB_SCRIPT_GOTHIC;
    }
    private static final int HB_SCRIPT_OLD_ITALIC = (int)1232363884L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OLD_ITALIC = 1232363884
     * }
     */
    public static int HB_SCRIPT_OLD_ITALIC() {
        return HB_SCRIPT_OLD_ITALIC;
    }
    private static final int HB_SCRIPT_BUHID = (int)1114990692L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BUHID = 1114990692
     * }
     */
    public static int HB_SCRIPT_BUHID() {
        return HB_SCRIPT_BUHID;
    }
    private static final int HB_SCRIPT_HANUNOO = (int)1214344815L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_HANUNOO = 1214344815
     * }
     */
    public static int HB_SCRIPT_HANUNOO() {
        return HB_SCRIPT_HANUNOO;
    }
    private static final int HB_SCRIPT_TAGALOG = (int)1416064103L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TAGALOG = 1416064103
     * }
     */
    public static int HB_SCRIPT_TAGALOG() {
        return HB_SCRIPT_TAGALOG;
    }
    private static final int HB_SCRIPT_TAGBANWA = (int)1415669602L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TAGBANWA = 1415669602
     * }
     */
    public static int HB_SCRIPT_TAGBANWA() {
        return HB_SCRIPT_TAGBANWA;
    }
    private static final int HB_SCRIPT_CYPRIOT = (int)1131442804L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CYPRIOT = 1131442804
     * }
     */
    public static int HB_SCRIPT_CYPRIOT() {
        return HB_SCRIPT_CYPRIOT;
    }
    private static final int HB_SCRIPT_LIMBU = (int)1281977698L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_LIMBU = 1281977698
     * }
     */
    public static int HB_SCRIPT_LIMBU() {
        return HB_SCRIPT_LIMBU;
    }
    private static final int HB_SCRIPT_LINEAR_B = (int)1281977954L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_LINEAR_B = 1281977954
     * }
     */
    public static int HB_SCRIPT_LINEAR_B() {
        return HB_SCRIPT_LINEAR_B;
    }
    private static final int HB_SCRIPT_OSMANYA = (int)1332964705L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OSMANYA = 1332964705
     * }
     */
    public static int HB_SCRIPT_OSMANYA() {
        return HB_SCRIPT_OSMANYA;
    }
    private static final int HB_SCRIPT_SHAVIAN = (int)1399349623L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SHAVIAN = 1399349623
     * }
     */
    public static int HB_SCRIPT_SHAVIAN() {
        return HB_SCRIPT_SHAVIAN;
    }
    private static final int HB_SCRIPT_TAI_LE = (int)1415670885L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TAI_LE = 1415670885
     * }
     */
    public static int HB_SCRIPT_TAI_LE() {
        return HB_SCRIPT_TAI_LE;
    }
    private static final int HB_SCRIPT_UGARITIC = (int)1432838514L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_UGARITIC = 1432838514
     * }
     */
    public static int HB_SCRIPT_UGARITIC() {
        return HB_SCRIPT_UGARITIC;
    }
    private static final int HB_SCRIPT_BUGINESE = (int)1114990441L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BUGINESE = 1114990441
     * }
     */
    public static int HB_SCRIPT_BUGINESE() {
        return HB_SCRIPT_BUGINESE;
    }
    private static final int HB_SCRIPT_COPTIC = (int)1131376756L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_COPTIC = 1131376756
     * }
     */
    public static int HB_SCRIPT_COPTIC() {
        return HB_SCRIPT_COPTIC;
    }
    private static final int HB_SCRIPT_GLAGOLITIC = (int)1198285159L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_GLAGOLITIC = 1198285159
     * }
     */
    public static int HB_SCRIPT_GLAGOLITIC() {
        return HB_SCRIPT_GLAGOLITIC;
    }
    private static final int HB_SCRIPT_KHAROSHTHI = (int)1265131890L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_KHAROSHTHI = 1265131890
     * }
     */
    public static int HB_SCRIPT_KHAROSHTHI() {
        return HB_SCRIPT_KHAROSHTHI;
    }
    private static final int HB_SCRIPT_NEW_TAI_LUE = (int)1415670901L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_NEW_TAI_LUE = 1415670901
     * }
     */
    public static int HB_SCRIPT_NEW_TAI_LUE() {
        return HB_SCRIPT_NEW_TAI_LUE;
    }
    private static final int HB_SCRIPT_OLD_PERSIAN = (int)1483761007L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OLD_PERSIAN = 1483761007
     * }
     */
    public static int HB_SCRIPT_OLD_PERSIAN() {
        return HB_SCRIPT_OLD_PERSIAN;
    }
    private static final int HB_SCRIPT_SYLOTI_NAGRI = (int)1400466543L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SYLOTI_NAGRI = 1400466543
     * }
     */
    public static int HB_SCRIPT_SYLOTI_NAGRI() {
        return HB_SCRIPT_SYLOTI_NAGRI;
    }
    private static final int HB_SCRIPT_TIFINAGH = (int)1415999079L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TIFINAGH = 1415999079
     * }
     */
    public static int HB_SCRIPT_TIFINAGH() {
        return HB_SCRIPT_TIFINAGH;
    }
    private static final int HB_SCRIPT_BALINESE = (int)1113681001L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BALINESE = 1113681001
     * }
     */
    public static int HB_SCRIPT_BALINESE() {
        return HB_SCRIPT_BALINESE;
    }
    private static final int HB_SCRIPT_CUNEIFORM = (int)1483961720L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CUNEIFORM = 1483961720
     * }
     */
    public static int HB_SCRIPT_CUNEIFORM() {
        return HB_SCRIPT_CUNEIFORM;
    }
    private static final int HB_SCRIPT_NKO = (int)1315663727L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_NKO = 1315663727
     * }
     */
    public static int HB_SCRIPT_NKO() {
        return HB_SCRIPT_NKO;
    }
    private static final int HB_SCRIPT_PHAGS_PA = (int)1349017959L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_PHAGS_PA = 1349017959
     * }
     */
    public static int HB_SCRIPT_PHAGS_PA() {
        return HB_SCRIPT_PHAGS_PA;
    }
    private static final int HB_SCRIPT_PHOENICIAN = (int)1349021304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_PHOENICIAN = 1349021304
     * }
     */
    public static int HB_SCRIPT_PHOENICIAN() {
        return HB_SCRIPT_PHOENICIAN;
    }
    private static final int HB_SCRIPT_CARIAN = (int)1130459753L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CARIAN = 1130459753
     * }
     */
    public static int HB_SCRIPT_CARIAN() {
        return HB_SCRIPT_CARIAN;
    }
    private static final int HB_SCRIPT_CHAM = (int)1130914157L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CHAM = 1130914157
     * }
     */
    public static int HB_SCRIPT_CHAM() {
        return HB_SCRIPT_CHAM;
    }
    private static final int HB_SCRIPT_KAYAH_LI = (int)1264675945L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_KAYAH_LI = 1264675945
     * }
     */
    public static int HB_SCRIPT_KAYAH_LI() {
        return HB_SCRIPT_KAYAH_LI;
    }
    private static final int HB_SCRIPT_LEPCHA = (int)1281716323L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_LEPCHA = 1281716323
     * }
     */
    public static int HB_SCRIPT_LEPCHA() {
        return HB_SCRIPT_LEPCHA;
    }
    private static final int HB_SCRIPT_LYCIAN = (int)1283023721L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_LYCIAN = 1283023721
     * }
     */
    public static int HB_SCRIPT_LYCIAN() {
        return HB_SCRIPT_LYCIAN;
    }
    private static final int HB_SCRIPT_LYDIAN = (int)1283023977L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_LYDIAN = 1283023977
     * }
     */
    public static int HB_SCRIPT_LYDIAN() {
        return HB_SCRIPT_LYDIAN;
    }
    private static final int HB_SCRIPT_OL_CHIKI = (int)1332503403L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OL_CHIKI = 1332503403
     * }
     */
    public static int HB_SCRIPT_OL_CHIKI() {
        return HB_SCRIPT_OL_CHIKI;
    }
    private static final int HB_SCRIPT_REJANG = (int)1382706791L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_REJANG = 1382706791
     * }
     */
    public static int HB_SCRIPT_REJANG() {
        return HB_SCRIPT_REJANG;
    }
    private static final int HB_SCRIPT_SAURASHTRA = (int)1398895986L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SAURASHTRA = 1398895986
     * }
     */
    public static int HB_SCRIPT_SAURASHTRA() {
        return HB_SCRIPT_SAURASHTRA;
    }
    private static final int HB_SCRIPT_SUNDANESE = (int)1400204900L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SUNDANESE = 1400204900
     * }
     */
    public static int HB_SCRIPT_SUNDANESE() {
        return HB_SCRIPT_SUNDANESE;
    }
    private static final int HB_SCRIPT_VAI = (int)1449224553L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_VAI = 1449224553
     * }
     */
    public static int HB_SCRIPT_VAI() {
        return HB_SCRIPT_VAI;
    }
    private static final int HB_SCRIPT_AVESTAN = (int)1098281844L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_AVESTAN = 1098281844
     * }
     */
    public static int HB_SCRIPT_AVESTAN() {
        return HB_SCRIPT_AVESTAN;
    }
    private static final int HB_SCRIPT_BAMUM = (int)1113681269L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BAMUM = 1113681269
     * }
     */
    public static int HB_SCRIPT_BAMUM() {
        return HB_SCRIPT_BAMUM;
    }
    private static final int HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = (int)1164409200L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = 1164409200
     * }
     */
    public static int HB_SCRIPT_EGYPTIAN_HIEROGLYPHS() {
        return HB_SCRIPT_EGYPTIAN_HIEROGLYPHS;
    }
    private static final int HB_SCRIPT_IMPERIAL_ARAMAIC = (int)1098018153L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_IMPERIAL_ARAMAIC = 1098018153
     * }
     */
    public static int HB_SCRIPT_IMPERIAL_ARAMAIC() {
        return HB_SCRIPT_IMPERIAL_ARAMAIC;
    }
    private static final int HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = (int)1349020777L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = 1349020777
     * }
     */
    public static int HB_SCRIPT_INSCRIPTIONAL_PAHLAVI() {
        return HB_SCRIPT_INSCRIPTIONAL_PAHLAVI;
    }
    private static final int HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = (int)1349678185L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = 1349678185
     * }
     */
    public static int HB_SCRIPT_INSCRIPTIONAL_PARTHIAN() {
        return HB_SCRIPT_INSCRIPTIONAL_PARTHIAN;
    }
    private static final int HB_SCRIPT_JAVANESE = (int)1247901281L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_JAVANESE = 1247901281
     * }
     */
    public static int HB_SCRIPT_JAVANESE() {
        return HB_SCRIPT_JAVANESE;
    }
    private static final int HB_SCRIPT_KAITHI = (int)1265920105L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_KAITHI = 1265920105
     * }
     */
    public static int HB_SCRIPT_KAITHI() {
        return HB_SCRIPT_KAITHI;
    }
    private static final int HB_SCRIPT_LISU = (int)1281979253L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_LISU = 1281979253
     * }
     */
    public static int HB_SCRIPT_LISU() {
        return HB_SCRIPT_LISU;
    }
    private static final int HB_SCRIPT_MEETEI_MAYEK = (int)1299473769L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MEETEI_MAYEK = 1299473769
     * }
     */
    public static int HB_SCRIPT_MEETEI_MAYEK() {
        return HB_SCRIPT_MEETEI_MAYEK;
    }
    private static final int HB_SCRIPT_OLD_SOUTH_ARABIAN = (int)1398895202L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OLD_SOUTH_ARABIAN = 1398895202
     * }
     */
    public static int HB_SCRIPT_OLD_SOUTH_ARABIAN() {
        return HB_SCRIPT_OLD_SOUTH_ARABIAN;
    }
    private static final int HB_SCRIPT_OLD_TURKIC = (int)1332898664L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OLD_TURKIC = 1332898664
     * }
     */
    public static int HB_SCRIPT_OLD_TURKIC() {
        return HB_SCRIPT_OLD_TURKIC;
    }
    private static final int HB_SCRIPT_SAMARITAN = (int)1398893938L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SAMARITAN = 1398893938
     * }
     */
    public static int HB_SCRIPT_SAMARITAN() {
        return HB_SCRIPT_SAMARITAN;
    }
    private static final int HB_SCRIPT_TAI_THAM = (int)1281453665L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TAI_THAM = 1281453665
     * }
     */
    public static int HB_SCRIPT_TAI_THAM() {
        return HB_SCRIPT_TAI_THAM;
    }
    private static final int HB_SCRIPT_TAI_VIET = (int)1415673460L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TAI_VIET = 1415673460
     * }
     */
    public static int HB_SCRIPT_TAI_VIET() {
        return HB_SCRIPT_TAI_VIET;
    }
    private static final int HB_SCRIPT_BATAK = (int)1113683051L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BATAK = 1113683051
     * }
     */
    public static int HB_SCRIPT_BATAK() {
        return HB_SCRIPT_BATAK;
    }
    private static final int HB_SCRIPT_BRAHMI = (int)1114792296L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BRAHMI = 1114792296
     * }
     */
    public static int HB_SCRIPT_BRAHMI() {
        return HB_SCRIPT_BRAHMI;
    }
    private static final int HB_SCRIPT_MANDAIC = (int)1298230884L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MANDAIC = 1298230884
     * }
     */
    public static int HB_SCRIPT_MANDAIC() {
        return HB_SCRIPT_MANDAIC;
    }
    private static final int HB_SCRIPT_CHAKMA = (int)1130457965L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CHAKMA = 1130457965
     * }
     */
    public static int HB_SCRIPT_CHAKMA() {
        return HB_SCRIPT_CHAKMA;
    }
    private static final int HB_SCRIPT_MEROITIC_CURSIVE = (int)1298494051L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MEROITIC_CURSIVE = 1298494051
     * }
     */
    public static int HB_SCRIPT_MEROITIC_CURSIVE() {
        return HB_SCRIPT_MEROITIC_CURSIVE;
    }
    private static final int HB_SCRIPT_MEROITIC_HIEROGLYPHS = (int)1298494063L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MEROITIC_HIEROGLYPHS = 1298494063
     * }
     */
    public static int HB_SCRIPT_MEROITIC_HIEROGLYPHS() {
        return HB_SCRIPT_MEROITIC_HIEROGLYPHS;
    }
    private static final int HB_SCRIPT_MIAO = (int)1349284452L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MIAO = 1349284452
     * }
     */
    public static int HB_SCRIPT_MIAO() {
        return HB_SCRIPT_MIAO;
    }
    private static final int HB_SCRIPT_SHARADA = (int)1399353956L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SHARADA = 1399353956
     * }
     */
    public static int HB_SCRIPT_SHARADA() {
        return HB_SCRIPT_SHARADA;
    }
    private static final int HB_SCRIPT_SORA_SOMPENG = (int)1399812705L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SORA_SOMPENG = 1399812705
     * }
     */
    public static int HB_SCRIPT_SORA_SOMPENG() {
        return HB_SCRIPT_SORA_SOMPENG;
    }
    private static final int HB_SCRIPT_TAKRI = (int)1415670642L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TAKRI = 1415670642
     * }
     */
    public static int HB_SCRIPT_TAKRI() {
        return HB_SCRIPT_TAKRI;
    }
    private static final int HB_SCRIPT_BASSA_VAH = (int)1113682803L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BASSA_VAH = 1113682803
     * }
     */
    public static int HB_SCRIPT_BASSA_VAH() {
        return HB_SCRIPT_BASSA_VAH;
    }
    private static final int HB_SCRIPT_CAUCASIAN_ALBANIAN = (int)1097295970L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CAUCASIAN_ALBANIAN = 1097295970
     * }
     */
    public static int HB_SCRIPT_CAUCASIAN_ALBANIAN() {
        return HB_SCRIPT_CAUCASIAN_ALBANIAN;
    }
    private static final int HB_SCRIPT_DUPLOYAN = (int)1148547180L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_DUPLOYAN = 1148547180
     * }
     */
    public static int HB_SCRIPT_DUPLOYAN() {
        return HB_SCRIPT_DUPLOYAN;
    }
    private static final int HB_SCRIPT_ELBASAN = (int)1164730977L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_ELBASAN = 1164730977
     * }
     */
    public static int HB_SCRIPT_ELBASAN() {
        return HB_SCRIPT_ELBASAN;
    }
    private static final int HB_SCRIPT_GRANTHA = (int)1198678382L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_GRANTHA = 1198678382
     * }
     */
    public static int HB_SCRIPT_GRANTHA() {
        return HB_SCRIPT_GRANTHA;
    }
    private static final int HB_SCRIPT_KHOJKI = (int)1265135466L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_KHOJKI = 1265135466
     * }
     */
    public static int HB_SCRIPT_KHOJKI() {
        return HB_SCRIPT_KHOJKI;
    }
    private static final int HB_SCRIPT_KHUDAWADI = (int)1399418468L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_KHUDAWADI = 1399418468
     * }
     */
    public static int HB_SCRIPT_KHUDAWADI() {
        return HB_SCRIPT_KHUDAWADI;
    }
    private static final int HB_SCRIPT_LINEAR_A = (int)1281977953L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_LINEAR_A = 1281977953
     * }
     */
    public static int HB_SCRIPT_LINEAR_A() {
        return HB_SCRIPT_LINEAR_A;
    }
    private static final int HB_SCRIPT_MAHAJANI = (int)1298229354L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MAHAJANI = 1298229354
     * }
     */
    public static int HB_SCRIPT_MAHAJANI() {
        return HB_SCRIPT_MAHAJANI;
    }
    private static final int HB_SCRIPT_MANICHAEAN = (int)1298230889L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MANICHAEAN = 1298230889
     * }
     */
    public static int HB_SCRIPT_MANICHAEAN() {
        return HB_SCRIPT_MANICHAEAN;
    }
    private static final int HB_SCRIPT_MENDE_KIKAKUI = (int)1298493028L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MENDE_KIKAKUI = 1298493028
     * }
     */
    public static int HB_SCRIPT_MENDE_KIKAKUI() {
        return HB_SCRIPT_MENDE_KIKAKUI;
    }
    private static final int HB_SCRIPT_MODI = (int)1299145833L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MODI = 1299145833
     * }
     */
    public static int HB_SCRIPT_MODI() {
        return HB_SCRIPT_MODI;
    }
    private static final int HB_SCRIPT_MRO = (int)1299345263L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MRO = 1299345263
     * }
     */
    public static int HB_SCRIPT_MRO() {
        return HB_SCRIPT_MRO;
    }
    private static final int HB_SCRIPT_NABATAEAN = (int)1315070324L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_NABATAEAN = 1315070324
     * }
     */
    public static int HB_SCRIPT_NABATAEAN() {
        return HB_SCRIPT_NABATAEAN;
    }
    private static final int HB_SCRIPT_OLD_NORTH_ARABIAN = (int)1315009122L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OLD_NORTH_ARABIAN = 1315009122
     * }
     */
    public static int HB_SCRIPT_OLD_NORTH_ARABIAN() {
        return HB_SCRIPT_OLD_NORTH_ARABIAN;
    }
    private static final int HB_SCRIPT_OLD_PERMIC = (int)1348825709L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OLD_PERMIC = 1348825709
     * }
     */
    public static int HB_SCRIPT_OLD_PERMIC() {
        return HB_SCRIPT_OLD_PERMIC;
    }
    private static final int HB_SCRIPT_PAHAWH_HMONG = (int)1215131239L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_PAHAWH_HMONG = 1215131239
     * }
     */
    public static int HB_SCRIPT_PAHAWH_HMONG() {
        return HB_SCRIPT_PAHAWH_HMONG;
    }
    private static final int HB_SCRIPT_PALMYRENE = (int)1348562029L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_PALMYRENE = 1348562029
     * }
     */
    public static int HB_SCRIPT_PALMYRENE() {
        return HB_SCRIPT_PALMYRENE;
    }
    private static final int HB_SCRIPT_PAU_CIN_HAU = (int)1348564323L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_PAU_CIN_HAU = 1348564323
     * }
     */
    public static int HB_SCRIPT_PAU_CIN_HAU() {
        return HB_SCRIPT_PAU_CIN_HAU;
    }
    private static final int HB_SCRIPT_PSALTER_PAHLAVI = (int)1349020784L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_PSALTER_PAHLAVI = 1349020784
     * }
     */
    public static int HB_SCRIPT_PSALTER_PAHLAVI() {
        return HB_SCRIPT_PSALTER_PAHLAVI;
    }
    private static final int HB_SCRIPT_SIDDHAM = (int)1399415908L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SIDDHAM = 1399415908
     * }
     */
    public static int HB_SCRIPT_SIDDHAM() {
        return HB_SCRIPT_SIDDHAM;
    }
    private static final int HB_SCRIPT_TIRHUTA = (int)1416196712L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TIRHUTA = 1416196712
     * }
     */
    public static int HB_SCRIPT_TIRHUTA() {
        return HB_SCRIPT_TIRHUTA;
    }
    private static final int HB_SCRIPT_WARANG_CITI = (int)1466004065L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_WARANG_CITI = 1466004065
     * }
     */
    public static int HB_SCRIPT_WARANG_CITI() {
        return HB_SCRIPT_WARANG_CITI;
    }
    private static final int HB_SCRIPT_AHOM = (int)1097363309L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_AHOM = 1097363309
     * }
     */
    public static int HB_SCRIPT_AHOM() {
        return HB_SCRIPT_AHOM;
    }
    private static final int HB_SCRIPT_ANATOLIAN_HIEROGLYPHS = (int)1215067511L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_ANATOLIAN_HIEROGLYPHS = 1215067511
     * }
     */
    public static int HB_SCRIPT_ANATOLIAN_HIEROGLYPHS() {
        return HB_SCRIPT_ANATOLIAN_HIEROGLYPHS;
    }
    private static final int HB_SCRIPT_HATRAN = (int)1214346354L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_HATRAN = 1214346354
     * }
     */
    public static int HB_SCRIPT_HATRAN() {
        return HB_SCRIPT_HATRAN;
    }
    private static final int HB_SCRIPT_MULTANI = (int)1299541108L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MULTANI = 1299541108
     * }
     */
    public static int HB_SCRIPT_MULTANI() {
        return HB_SCRIPT_MULTANI;
    }
    private static final int HB_SCRIPT_OLD_HUNGARIAN = (int)1215655527L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OLD_HUNGARIAN = 1215655527
     * }
     */
    public static int HB_SCRIPT_OLD_HUNGARIAN() {
        return HB_SCRIPT_OLD_HUNGARIAN;
    }
    private static final int HB_SCRIPT_SIGNWRITING = (int)1399287415L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SIGNWRITING = 1399287415
     * }
     */
    public static int HB_SCRIPT_SIGNWRITING() {
        return HB_SCRIPT_SIGNWRITING;
    }
    private static final int HB_SCRIPT_ADLAM = (int)1097100397L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_ADLAM = 1097100397
     * }
     */
    public static int HB_SCRIPT_ADLAM() {
        return HB_SCRIPT_ADLAM;
    }
    private static final int HB_SCRIPT_BHAIKSUKI = (int)1114139507L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_BHAIKSUKI = 1114139507
     * }
     */
    public static int HB_SCRIPT_BHAIKSUKI() {
        return HB_SCRIPT_BHAIKSUKI;
    }
    private static final int HB_SCRIPT_MARCHEN = (int)1298231907L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MARCHEN = 1298231907
     * }
     */
    public static int HB_SCRIPT_MARCHEN() {
        return HB_SCRIPT_MARCHEN;
    }
    private static final int HB_SCRIPT_OSAGE = (int)1332963173L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OSAGE = 1332963173
     * }
     */
    public static int HB_SCRIPT_OSAGE() {
        return HB_SCRIPT_OSAGE;
    }
    private static final int HB_SCRIPT_TANGUT = (int)1415671399L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TANGUT = 1415671399
     * }
     */
    public static int HB_SCRIPT_TANGUT() {
        return HB_SCRIPT_TANGUT;
    }
    private static final int HB_SCRIPT_NEWA = (int)1315272545L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_NEWA = 1315272545
     * }
     */
    public static int HB_SCRIPT_NEWA() {
        return HB_SCRIPT_NEWA;
    }
    private static final int HB_SCRIPT_MASARAM_GONDI = (int)1198485101L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MASARAM_GONDI = 1198485101
     * }
     */
    public static int HB_SCRIPT_MASARAM_GONDI() {
        return HB_SCRIPT_MASARAM_GONDI;
    }
    private static final int HB_SCRIPT_NUSHU = (int)1316186229L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_NUSHU = 1316186229
     * }
     */
    public static int HB_SCRIPT_NUSHU() {
        return HB_SCRIPT_NUSHU;
    }
    private static final int HB_SCRIPT_SOYOMBO = (int)1399814511L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SOYOMBO = 1399814511
     * }
     */
    public static int HB_SCRIPT_SOYOMBO() {
        return HB_SCRIPT_SOYOMBO;
    }
    private static final int HB_SCRIPT_ZANABAZAR_SQUARE = (int)1516334690L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_ZANABAZAR_SQUARE = 1516334690
     * }
     */
    public static int HB_SCRIPT_ZANABAZAR_SQUARE() {
        return HB_SCRIPT_ZANABAZAR_SQUARE;
    }
    private static final int HB_SCRIPT_DOGRA = (int)1148151666L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_DOGRA = 1148151666
     * }
     */
    public static int HB_SCRIPT_DOGRA() {
        return HB_SCRIPT_DOGRA;
    }
    private static final int HB_SCRIPT_GUNJALA_GONDI = (int)1198485095L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_GUNJALA_GONDI = 1198485095
     * }
     */
    public static int HB_SCRIPT_GUNJALA_GONDI() {
        return HB_SCRIPT_GUNJALA_GONDI;
    }
    private static final int HB_SCRIPT_HANIFI_ROHINGYA = (int)1383032935L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_HANIFI_ROHINGYA = 1383032935
     * }
     */
    public static int HB_SCRIPT_HANIFI_ROHINGYA() {
        return HB_SCRIPT_HANIFI_ROHINGYA;
    }
    private static final int HB_SCRIPT_MAKASAR = (int)1298230113L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MAKASAR = 1298230113
     * }
     */
    public static int HB_SCRIPT_MAKASAR() {
        return HB_SCRIPT_MAKASAR;
    }
    private static final int HB_SCRIPT_MEDEFAIDRIN = (int)1298490470L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MEDEFAIDRIN = 1298490470
     * }
     */
    public static int HB_SCRIPT_MEDEFAIDRIN() {
        return HB_SCRIPT_MEDEFAIDRIN;
    }
    private static final int HB_SCRIPT_OLD_SOGDIAN = (int)1399809903L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OLD_SOGDIAN = 1399809903
     * }
     */
    public static int HB_SCRIPT_OLD_SOGDIAN() {
        return HB_SCRIPT_OLD_SOGDIAN;
    }
    private static final int HB_SCRIPT_SOGDIAN = (int)1399809892L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_SOGDIAN = 1399809892
     * }
     */
    public static int HB_SCRIPT_SOGDIAN() {
        return HB_SCRIPT_SOGDIAN;
    }
    private static final int HB_SCRIPT_ELYMAIC = (int)1164736877L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_ELYMAIC = 1164736877
     * }
     */
    public static int HB_SCRIPT_ELYMAIC() {
        return HB_SCRIPT_ELYMAIC;
    }
    private static final int HB_SCRIPT_NANDINAGARI = (int)1315008100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_NANDINAGARI = 1315008100
     * }
     */
    public static int HB_SCRIPT_NANDINAGARI() {
        return HB_SCRIPT_NANDINAGARI;
    }
    private static final int HB_SCRIPT_NYIAKENG_PUACHUE_HMONG = (int)1215131248L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_NYIAKENG_PUACHUE_HMONG = 1215131248
     * }
     */
    public static int HB_SCRIPT_NYIAKENG_PUACHUE_HMONG() {
        return HB_SCRIPT_NYIAKENG_PUACHUE_HMONG;
    }
    private static final int HB_SCRIPT_WANCHO = (int)1466132591L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_WANCHO = 1466132591
     * }
     */
    public static int HB_SCRIPT_WANCHO() {
        return HB_SCRIPT_WANCHO;
    }
    private static final int HB_SCRIPT_CHORASMIAN = (int)1130918515L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CHORASMIAN = 1130918515
     * }
     */
    public static int HB_SCRIPT_CHORASMIAN() {
        return HB_SCRIPT_CHORASMIAN;
    }
    private static final int HB_SCRIPT_DIVES_AKURU = (int)1147756907L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_DIVES_AKURU = 1147756907
     * }
     */
    public static int HB_SCRIPT_DIVES_AKURU() {
        return HB_SCRIPT_DIVES_AKURU;
    }
    private static final int HB_SCRIPT_KHITAN_SMALL_SCRIPT = (int)1265202291L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_KHITAN_SMALL_SCRIPT = 1265202291
     * }
     */
    public static int HB_SCRIPT_KHITAN_SMALL_SCRIPT() {
        return HB_SCRIPT_KHITAN_SMALL_SCRIPT;
    }
    private static final int HB_SCRIPT_YEZIDI = (int)1499822697L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_YEZIDI = 1499822697
     * }
     */
    public static int HB_SCRIPT_YEZIDI() {
        return HB_SCRIPT_YEZIDI;
    }
    private static final int HB_SCRIPT_CYPRO_MINOAN = (int)1131441518L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_CYPRO_MINOAN = 1131441518
     * }
     */
    public static int HB_SCRIPT_CYPRO_MINOAN() {
        return HB_SCRIPT_CYPRO_MINOAN;
    }
    private static final int HB_SCRIPT_OLD_UYGHUR = (int)1333094258L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_OLD_UYGHUR = 1333094258
     * }
     */
    public static int HB_SCRIPT_OLD_UYGHUR() {
        return HB_SCRIPT_OLD_UYGHUR;
    }
    private static final int HB_SCRIPT_TANGSA = (int)1416524641L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TANGSA = 1416524641
     * }
     */
    public static int HB_SCRIPT_TANGSA() {
        return HB_SCRIPT_TANGSA;
    }
    private static final int HB_SCRIPT_TOTO = (int)1416590447L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_TOTO = 1416590447
     * }
     */
    public static int HB_SCRIPT_TOTO() {
        return HB_SCRIPT_TOTO;
    }
    private static final int HB_SCRIPT_VITHKUQI = (int)1449751656L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_VITHKUQI = 1449751656
     * }
     */
    public static int HB_SCRIPT_VITHKUQI() {
        return HB_SCRIPT_VITHKUQI;
    }
    private static final int HB_SCRIPT_MATH = (int)1517122664L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_MATH = 1517122664
     * }
     */
    public static int HB_SCRIPT_MATH() {
        return HB_SCRIPT_MATH;
    }
    private static final int HB_SCRIPT_KAWI = (int)1264678761L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_KAWI = 1264678761
     * }
     */
    public static int HB_SCRIPT_KAWI() {
        return HB_SCRIPT_KAWI;
    }
    private static final int HB_SCRIPT_NAG_MUNDARI = (int)1315006317L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_NAG_MUNDARI = 1315006317
     * }
     */
    public static int HB_SCRIPT_NAG_MUNDARI() {
        return HB_SCRIPT_NAG_MUNDARI;
    }
    private static final int HB_SCRIPT_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_SCRIPT_INVALID = 0
     * }
     */
    public static int HB_SCRIPT_INVALID() {
        return HB_SCRIPT_INVALID;
    }
    private static final int _HB_SCRIPT_MAX_VALUE = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._HB_SCRIPT_MAX_VALUE = 2147483647
     * }
     */
    public static int _HB_SCRIPT_MAX_VALUE() {
        return _HB_SCRIPT_MAX_VALUE;
    }
    private static final int _HB_SCRIPT_MAX_VALUE_SIGNED = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._HB_SCRIPT_MAX_VALUE_SIGNED = 2147483647
     * }
     */
    public static int _HB_SCRIPT_MAX_VALUE_SIGNED() {
        return _HB_SCRIPT_MAX_VALUE_SIGNED;
    }

    private static class hb_script_from_iso15924_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_script_from_iso15924_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_script_t hb_script_from_iso15924_tag(hb_tag_t tag)
     * }
     */
    public static FunctionDescriptor hb_script_from_iso15924_tag$descriptor() {
        return hb_script_from_iso15924_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_script_t hb_script_from_iso15924_tag(hb_tag_t tag)
     * }
     */
    public static MethodHandle hb_script_from_iso15924_tag$handle() {
        return hb_script_from_iso15924_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_script_t hb_script_from_iso15924_tag(hb_tag_t tag)
     * }
     */
    public static int hb_script_from_iso15924_tag(int tag) {
        var mh$ = hb_script_from_iso15924_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_script_from_iso15924_tag", tag);
            }
            return (int)mh$.invokeExact(tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_script_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_script_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_script_t hb_script_from_string(const char *str, int len)
     * }
     */
    public static FunctionDescriptor hb_script_from_string$descriptor() {
        return hb_script_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_script_t hb_script_from_string(const char *str, int len)
     * }
     */
    public static MethodHandle hb_script_from_string$handle() {
        return hb_script_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_script_t hb_script_from_string(const char *str, int len)
     * }
     */
    public static int hb_script_from_string(MemorySegment str, int len) {
        var mh$ = hb_script_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_script_from_string", str, len);
            }
            return (int)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_script_to_iso15924_tag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_script_to_iso15924_tag"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_tag_t hb_script_to_iso15924_tag(hb_script_t script)
     * }
     */
    public static FunctionDescriptor hb_script_to_iso15924_tag$descriptor() {
        return hb_script_to_iso15924_tag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_tag_t hb_script_to_iso15924_tag(hb_script_t script)
     * }
     */
    public static MethodHandle hb_script_to_iso15924_tag$handle() {
        return hb_script_to_iso15924_tag.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_tag_t hb_script_to_iso15924_tag(hb_script_t script)
     * }
     */
    public static int hb_script_to_iso15924_tag(int script) {
        var mh$ = hb_script_to_iso15924_tag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_script_to_iso15924_tag", script);
            }
            return (int)mh$.invokeExact(script);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_script_get_horizontal_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_script_get_horizontal_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_direction_t hb_script_get_horizontal_direction(hb_script_t script)
     * }
     */
    public static FunctionDescriptor hb_script_get_horizontal_direction$descriptor() {
        return hb_script_get_horizontal_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_direction_t hb_script_get_horizontal_direction(hb_script_t script)
     * }
     */
    public static MethodHandle hb_script_get_horizontal_direction$handle() {
        return hb_script_get_horizontal_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_direction_t hb_script_get_horizontal_direction(hb_script_t script)
     * }
     */
    public static int hb_script_get_horizontal_direction(int script) {
        var mh$ = hb_script_get_horizontal_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_script_get_horizontal_direction", script);
            }
            return (int)mh$.invokeExact(script);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_feature_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_feature_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_feature_from_string(const char *str, int len, hb_feature_t *feature)
     * }
     */
    public static FunctionDescriptor hb_feature_from_string$descriptor() {
        return hb_feature_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_feature_from_string(const char *str, int len, hb_feature_t *feature)
     * }
     */
    public static MethodHandle hb_feature_from_string$handle() {
        return hb_feature_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_feature_from_string(const char *str, int len, hb_feature_t *feature)
     * }
     */
    public static int hb_feature_from_string(MemorySegment str, int len, MemorySegment feature) {
        var mh$ = hb_feature_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_feature_from_string", str, len, feature);
            }
            return (int)mh$.invokeExact(str, len, feature);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_feature_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_feature_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_feature_to_string(hb_feature_t *feature, char *buf, unsigned int size)
     * }
     */
    public static FunctionDescriptor hb_feature_to_string$descriptor() {
        return hb_feature_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_feature_to_string(hb_feature_t *feature, char *buf, unsigned int size)
     * }
     */
    public static MethodHandle hb_feature_to_string$handle() {
        return hb_feature_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_feature_to_string(hb_feature_t *feature, char *buf, unsigned int size)
     * }
     */
    public static void hb_feature_to_string(MemorySegment feature, MemorySegment buf, int size) {
        var mh$ = hb_feature_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_feature_to_string", feature, buf, size);
            }
            mh$.invokeExact(feature, buf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_variation_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_variation_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_variation_from_string(const char *str, int len, hb_variation_t *variation)
     * }
     */
    public static FunctionDescriptor hb_variation_from_string$descriptor() {
        return hb_variation_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_variation_from_string(const char *str, int len, hb_variation_t *variation)
     * }
     */
    public static MethodHandle hb_variation_from_string$handle() {
        return hb_variation_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_variation_from_string(const char *str, int len, hb_variation_t *variation)
     * }
     */
    public static int hb_variation_from_string(MemorySegment str, int len, MemorySegment variation) {
        var mh$ = hb_variation_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_variation_from_string", str, len, variation);
            }
            return (int)mh$.invokeExact(str, len, variation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_variation_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_variation_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_variation_to_string(hb_variation_t *variation, char *buf, unsigned int size)
     * }
     */
    public static FunctionDescriptor hb_variation_to_string$descriptor() {
        return hb_variation_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_variation_to_string(hb_variation_t *variation, char *buf, unsigned int size)
     * }
     */
    public static MethodHandle hb_variation_to_string$handle() {
        return hb_variation_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_variation_to_string(hb_variation_t *variation, char *buf, unsigned int size)
     * }
     */
    public static void hb_variation_to_string(MemorySegment variation, MemorySegment buf, int size) {
        var mh$ = hb_variation_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_variation_to_string", variation, buf, size);
            }
            mh$.invokeExact(variation, buf, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef uint32_t hb_color_t
     * }
     */
    public static final OfInt hb_color_t = app_indicator_h.C_INT;

    private static class hb_color_get_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_color_get_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_alpha(hb_color_t color)
     * }
     */
    public static FunctionDescriptor hb_color_get_alpha$descriptor() {
        return hb_color_get_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_alpha(hb_color_t color)
     * }
     */
    public static MethodHandle hb_color_get_alpha$handle() {
        return hb_color_get_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_alpha(hb_color_t color)
     * }
     */
    public static byte hb_color_get_alpha(int color) {
        var mh$ = hb_color_get_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_color_get_alpha", color);
            }
            return (byte)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_color_get_red {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_color_get_red"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_red(hb_color_t color)
     * }
     */
    public static FunctionDescriptor hb_color_get_red$descriptor() {
        return hb_color_get_red.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_red(hb_color_t color)
     * }
     */
    public static MethodHandle hb_color_get_red$handle() {
        return hb_color_get_red.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_red(hb_color_t color)
     * }
     */
    public static byte hb_color_get_red(int color) {
        var mh$ = hb_color_get_red.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_color_get_red", color);
            }
            return (byte)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_color_get_green {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_color_get_green"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_green(hb_color_t color)
     * }
     */
    public static FunctionDescriptor hb_color_get_green$descriptor() {
        return hb_color_get_green.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_green(hb_color_t color)
     * }
     */
    public static MethodHandle hb_color_get_green$handle() {
        return hb_color_get_green.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_green(hb_color_t color)
     * }
     */
    public static byte hb_color_get_green(int color) {
        var mh$ = hb_color_get_green.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_color_get_green", color);
            }
            return (byte)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_color_get_blue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_color_get_blue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_blue(hb_color_t color)
     * }
     */
    public static FunctionDescriptor hb_color_get_blue$descriptor() {
        return hb_color_get_blue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_blue(hb_color_t color)
     * }
     */
    public static MethodHandle hb_color_get_blue$handle() {
        return hb_color_get_blue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern uint8_t hb_color_get_blue(hb_color_t color)
     * }
     */
    public static byte hb_color_get_blue(int color) {
        var mh$ = hb_color_get_blue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_color_get_blue", color);
            }
            return (byte)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_MEMORY_MODE_DUPLICATE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_MEMORY_MODE_DUPLICATE = 0
     * }
     */
    public static int HB_MEMORY_MODE_DUPLICATE() {
        return HB_MEMORY_MODE_DUPLICATE;
    }
    private static final int HB_MEMORY_MODE_READONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_MEMORY_MODE_READONLY = 1
     * }
     */
    public static int HB_MEMORY_MODE_READONLY() {
        return HB_MEMORY_MODE_READONLY;
    }
    private static final int HB_MEMORY_MODE_WRITABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_MEMORY_MODE_WRITABLE = 2
     * }
     */
    public static int HB_MEMORY_MODE_WRITABLE() {
        return HB_MEMORY_MODE_WRITABLE;
    }
    private static final int HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = 3
     * }
     */
    public static int HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE() {
        return HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE;
    }

    private static class hb_blob_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create(const char *data, unsigned int length, hb_memory_mode_t mode, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_blob_create$descriptor() {
        return hb_blob_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create(const char *data, unsigned int length, hb_memory_mode_t mode, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_blob_create$handle() {
        return hb_blob_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create(const char *data, unsigned int length, hb_memory_mode_t mode, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MemorySegment hb_blob_create(MemorySegment data, int length, int mode, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_blob_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_create", data, length, mode, user_data, destroy);
            }
            return (MemorySegment)mh$.invokeExact(data, length, mode, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_create_or_fail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_create_or_fail"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_or_fail(const char *data, unsigned int length, hb_memory_mode_t mode, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_blob_create_or_fail$descriptor() {
        return hb_blob_create_or_fail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_or_fail(const char *data, unsigned int length, hb_memory_mode_t mode, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_blob_create_or_fail$handle() {
        return hb_blob_create_or_fail.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_or_fail(const char *data, unsigned int length, hb_memory_mode_t mode, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MemorySegment hb_blob_create_or_fail(MemorySegment data, int length, int mode, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_blob_create_or_fail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_create_or_fail", data, length, mode, user_data, destroy);
            }
            return (MemorySegment)mh$.invokeExact(data, length, mode, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_create_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_create_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_from_file(const char *file_name)
     * }
     */
    public static FunctionDescriptor hb_blob_create_from_file$descriptor() {
        return hb_blob_create_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_from_file(const char *file_name)
     * }
     */
    public static MethodHandle hb_blob_create_from_file$handle() {
        return hb_blob_create_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_from_file(const char *file_name)
     * }
     */
    public static MemorySegment hb_blob_create_from_file(MemorySegment file_name) {
        var mh$ = hb_blob_create_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_create_from_file", file_name);
            }
            return (MemorySegment)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_create_from_file_or_fail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_create_from_file_or_fail"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_from_file_or_fail(const char *file_name)
     * }
     */
    public static FunctionDescriptor hb_blob_create_from_file_or_fail$descriptor() {
        return hb_blob_create_from_file_or_fail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_from_file_or_fail(const char *file_name)
     * }
     */
    public static MethodHandle hb_blob_create_from_file_or_fail$handle() {
        return hb_blob_create_from_file_or_fail.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_from_file_or_fail(const char *file_name)
     * }
     */
    public static MemorySegment hb_blob_create_from_file_or_fail(MemorySegment file_name) {
        var mh$ = hb_blob_create_from_file_or_fail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_create_from_file_or_fail", file_name);
            }
            return (MemorySegment)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_create_sub_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_create_sub_blob"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_sub_blob(hb_blob_t *parent, unsigned int offset, unsigned int length)
     * }
     */
    public static FunctionDescriptor hb_blob_create_sub_blob$descriptor() {
        return hb_blob_create_sub_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_sub_blob(hb_blob_t *parent, unsigned int offset, unsigned int length)
     * }
     */
    public static MethodHandle hb_blob_create_sub_blob$handle() {
        return hb_blob_create_sub_blob.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_create_sub_blob(hb_blob_t *parent, unsigned int offset, unsigned int length)
     * }
     */
    public static MemorySegment hb_blob_create_sub_blob(MemorySegment parent, int offset, int length) {
        var mh$ = hb_blob_create_sub_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_create_sub_blob", parent, offset, length);
            }
            return (MemorySegment)mh$.invokeExact(parent, offset, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_copy_writable_or_fail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_copy_writable_or_fail"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_copy_writable_or_fail(hb_blob_t *blob)
     * }
     */
    public static FunctionDescriptor hb_blob_copy_writable_or_fail$descriptor() {
        return hb_blob_copy_writable_or_fail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_copy_writable_or_fail(hb_blob_t *blob)
     * }
     */
    public static MethodHandle hb_blob_copy_writable_or_fail$handle() {
        return hb_blob_copy_writable_or_fail.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_copy_writable_or_fail(hb_blob_t *blob)
     * }
     */
    public static MemorySegment hb_blob_copy_writable_or_fail(MemorySegment blob) {
        var mh$ = hb_blob_copy_writable_or_fail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_copy_writable_or_fail", blob);
            }
            return (MemorySegment)mh$.invokeExact(blob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_get_empty()
     * }
     */
    public static FunctionDescriptor hb_blob_get_empty$descriptor() {
        return hb_blob_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_get_empty()
     * }
     */
    public static MethodHandle hb_blob_get_empty$handle() {
        return hb_blob_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_get_empty()
     * }
     */
    public static MemorySegment hb_blob_get_empty() {
        var mh$ = hb_blob_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_reference(hb_blob_t *blob)
     * }
     */
    public static FunctionDescriptor hb_blob_reference$descriptor() {
        return hb_blob_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_reference(hb_blob_t *blob)
     * }
     */
    public static MethodHandle hb_blob_reference$handle() {
        return hb_blob_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_blob_t *hb_blob_reference(hb_blob_t *blob)
     * }
     */
    public static MemorySegment hb_blob_reference(MemorySegment blob) {
        var mh$ = hb_blob_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_reference", blob);
            }
            return (MemorySegment)mh$.invokeExact(blob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_blob_destroy(hb_blob_t *blob)
     * }
     */
    public static FunctionDescriptor hb_blob_destroy$descriptor() {
        return hb_blob_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_blob_destroy(hb_blob_t *blob)
     * }
     */
    public static MethodHandle hb_blob_destroy$handle() {
        return hb_blob_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_blob_destroy(hb_blob_t *blob)
     * }
     */
    public static void hb_blob_destroy(MemorySegment blob) {
        var mh$ = hb_blob_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_destroy", blob);
            }
            mh$.invokeExact(blob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_blob_set_user_data(hb_blob_t *blob, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_blob_set_user_data$descriptor() {
        return hb_blob_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_blob_set_user_data(hb_blob_t *blob, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_blob_set_user_data$handle() {
        return hb_blob_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_blob_set_user_data(hb_blob_t *blob, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_blob_set_user_data(MemorySegment blob, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_blob_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_set_user_data", blob, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(blob, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_blob_get_user_data(const hb_blob_t *blob, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_blob_get_user_data$descriptor() {
        return hb_blob_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_blob_get_user_data(const hb_blob_t *blob, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_blob_get_user_data$handle() {
        return hb_blob_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_blob_get_user_data(const hb_blob_t *blob, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_blob_get_user_data(MemorySegment blob, MemorySegment key) {
        var mh$ = hb_blob_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_get_user_data", blob, key);
            }
            return (MemorySegment)mh$.invokeExact(blob, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_make_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_make_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_blob_make_immutable(hb_blob_t *blob)
     * }
     */
    public static FunctionDescriptor hb_blob_make_immutable$descriptor() {
        return hb_blob_make_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_blob_make_immutable(hb_blob_t *blob)
     * }
     */
    public static MethodHandle hb_blob_make_immutable$handle() {
        return hb_blob_make_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_blob_make_immutable(hb_blob_t *blob)
     * }
     */
    public static void hb_blob_make_immutable(MemorySegment blob) {
        var mh$ = hb_blob_make_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_make_immutable", blob);
            }
            mh$.invokeExact(blob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_is_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_is_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_blob_is_immutable(hb_blob_t *blob)
     * }
     */
    public static FunctionDescriptor hb_blob_is_immutable$descriptor() {
        return hb_blob_is_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_blob_is_immutable(hb_blob_t *blob)
     * }
     */
    public static MethodHandle hb_blob_is_immutable$handle() {
        return hb_blob_is_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_blob_is_immutable(hb_blob_t *blob)
     * }
     */
    public static int hb_blob_is_immutable(MemorySegment blob) {
        var mh$ = hb_blob_is_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_is_immutable", blob);
            }
            return (int)mh$.invokeExact(blob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_blob_get_length(hb_blob_t *blob)
     * }
     */
    public static FunctionDescriptor hb_blob_get_length$descriptor() {
        return hb_blob_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_blob_get_length(hb_blob_t *blob)
     * }
     */
    public static MethodHandle hb_blob_get_length$handle() {
        return hb_blob_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_blob_get_length(hb_blob_t *blob)
     * }
     */
    public static int hb_blob_get_length(MemorySegment blob) {
        var mh$ = hb_blob_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_get_length", blob);
            }
            return (int)mh$.invokeExact(blob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *hb_blob_get_data(hb_blob_t *blob, unsigned int *length)
     * }
     */
    public static FunctionDescriptor hb_blob_get_data$descriptor() {
        return hb_blob_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *hb_blob_get_data(hb_blob_t *blob, unsigned int *length)
     * }
     */
    public static MethodHandle hb_blob_get_data$handle() {
        return hb_blob_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *hb_blob_get_data(hb_blob_t *blob, unsigned int *length)
     * }
     */
    public static MemorySegment hb_blob_get_data(MemorySegment blob, MemorySegment length) {
        var mh$ = hb_blob_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_get_data", blob, length);
            }
            return (MemorySegment)mh$.invokeExact(blob, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_blob_get_data_writable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_blob_get_data_writable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *hb_blob_get_data_writable(hb_blob_t *blob, unsigned int *length)
     * }
     */
    public static FunctionDescriptor hb_blob_get_data_writable$descriptor() {
        return hb_blob_get_data_writable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *hb_blob_get_data_writable(hb_blob_t *blob, unsigned int *length)
     * }
     */
    public static MethodHandle hb_blob_get_data_writable$handle() {
        return hb_blob_get_data_writable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *hb_blob_get_data_writable(hb_blob_t *blob, unsigned int *length)
     * }
     */
    public static MemorySegment hb_blob_get_data_writable(MemorySegment blob, MemorySegment length) {
        var mh$ = hb_blob_get_data_writable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_blob_get_data_writable", blob, length);
            }
            return (MemorySegment)mh$.invokeExact(blob, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_CONTROL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_CONTROL = 0
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_CONTROL() {
        return HB_UNICODE_GENERAL_CATEGORY_CONTROL;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_FORMAT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_FORMAT = 1
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_FORMAT() {
        return HB_UNICODE_GENERAL_CATEGORY_FORMAT;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED = 2
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED() {
        return HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE = 3
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE() {
        return HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_SURROGATE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_SURROGATE = 4
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_SURROGATE() {
        return HB_UNICODE_GENERAL_CATEGORY_SURROGATE;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER = 5
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER() {
        return HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER = 6
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER() {
        return HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER = 7
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER() {
        return HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER = 8
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER() {
        return HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER = 9
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER() {
        return HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK = 10
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK() {
        return HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK = 11
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK() {
        return HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK = 12
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK() {
        return HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER = 13
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER() {
        return HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER = 14
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER() {
        return HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER = 15
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER() {
        return HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION = 16
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION() {
        return HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION = 17
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION() {
        return HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION = 18
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION() {
        return HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION = 19
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION() {
        return HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION = 20
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION() {
        return HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION = 21
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION() {
        return HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION = 22
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION() {
        return HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL = 23
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL() {
        return HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL = 24
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL() {
        return HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL = 25
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL() {
        return HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL = 26
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL() {
        return HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR = 27
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR() {
        return HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR = 28
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR() {
        return HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR;
    }
    private static final int HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR = 29
     * }
     */
    public static int HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR() {
        return HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_NOT_REORDERED() {
        return HB_UNICODE_COMBINING_CLASS_NOT_REORDERED;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_OVERLAY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_OVERLAY = 1
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_OVERLAY() {
        return HB_UNICODE_COMBINING_CLASS_OVERLAY;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_NUKTA = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_NUKTA = 7
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_NUKTA() {
        return HB_UNICODE_COMBINING_CLASS_NUKTA;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_KANA_VOICING = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_KANA_VOICING() {
        return HB_UNICODE_COMBINING_CLASS_KANA_VOICING;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_VIRAMA = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_VIRAMA = 9
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_VIRAMA() {
        return HB_UNICODE_COMBINING_CLASS_VIRAMA;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC10 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC10 = 10
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC10() {
        return HB_UNICODE_COMBINING_CLASS_CCC10;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC11 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC11 = 11
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC11() {
        return HB_UNICODE_COMBINING_CLASS_CCC11;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC12 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC12 = 12
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC12() {
        return HB_UNICODE_COMBINING_CLASS_CCC12;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC13 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC13 = 13
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC13() {
        return HB_UNICODE_COMBINING_CLASS_CCC13;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC14 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC14 = 14
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC14() {
        return HB_UNICODE_COMBINING_CLASS_CCC14;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC15 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC15 = 15
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC15() {
        return HB_UNICODE_COMBINING_CLASS_CCC15;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC16 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC16 = 16
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC16() {
        return HB_UNICODE_COMBINING_CLASS_CCC16;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC17 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC17 = 17
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC17() {
        return HB_UNICODE_COMBINING_CLASS_CCC17;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC18 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC18 = 18
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC18() {
        return HB_UNICODE_COMBINING_CLASS_CCC18;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC19 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC19 = 19
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC19() {
        return HB_UNICODE_COMBINING_CLASS_CCC19;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC20 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC20 = 20
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC20() {
        return HB_UNICODE_COMBINING_CLASS_CCC20;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC21 = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC21 = 21
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC21() {
        return HB_UNICODE_COMBINING_CLASS_CCC21;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC22 = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC22 = 22
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC22() {
        return HB_UNICODE_COMBINING_CLASS_CCC22;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC23 = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC23 = 23
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC23() {
        return HB_UNICODE_COMBINING_CLASS_CCC23;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC24 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC24 = 24
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC24() {
        return HB_UNICODE_COMBINING_CLASS_CCC24;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC25 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC25 = 25
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC25() {
        return HB_UNICODE_COMBINING_CLASS_CCC25;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC26 = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC26 = 26
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC26() {
        return HB_UNICODE_COMBINING_CLASS_CCC26;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC27 = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC27 = 27
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC27() {
        return HB_UNICODE_COMBINING_CLASS_CCC27;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC28 = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC28 = 28
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC28() {
        return HB_UNICODE_COMBINING_CLASS_CCC28;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC29 = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC29 = 29
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC29() {
        return HB_UNICODE_COMBINING_CLASS_CCC29;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC30 = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC30 = 30
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC30() {
        return HB_UNICODE_COMBINING_CLASS_CCC30;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC31 = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC31 = 31
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC31() {
        return HB_UNICODE_COMBINING_CLASS_CCC31;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC32 = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC32 = 32
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC32() {
        return HB_UNICODE_COMBINING_CLASS_CCC32;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC33 = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC33 = 33
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC33() {
        return HB_UNICODE_COMBINING_CLASS_CCC33;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC34 = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC34 = 34
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC34() {
        return HB_UNICODE_COMBINING_CLASS_CCC34;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC35 = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC35 = 35
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC35() {
        return HB_UNICODE_COMBINING_CLASS_CCC35;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC36 = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC36 = 36
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC36() {
        return HB_UNICODE_COMBINING_CLASS_CCC36;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC84 = (int)84L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC84 = 84
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC84() {
        return HB_UNICODE_COMBINING_CLASS_CCC84;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC91 = (int)91L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC91 = 91
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC91() {
        return HB_UNICODE_COMBINING_CLASS_CCC91;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC103 = (int)103L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC103 = 103
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC103() {
        return HB_UNICODE_COMBINING_CLASS_CCC103;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC107 = (int)107L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC107 = 107
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC107() {
        return HB_UNICODE_COMBINING_CLASS_CCC107;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC118 = (int)118L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC118 = 118
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC118() {
        return HB_UNICODE_COMBINING_CLASS_CCC118;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC122 = (int)122L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC122 = 122
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC122() {
        return HB_UNICODE_COMBINING_CLASS_CCC122;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC129 = (int)129L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC129 = 129
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC129() {
        return HB_UNICODE_COMBINING_CLASS_CCC129;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC130 = (int)130L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC130 = 130
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC130() {
        return HB_UNICODE_COMBINING_CLASS_CCC130;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_CCC132 = (int)132L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_CCC132 = 132
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_CCC132() {
        return HB_UNICODE_COMBINING_CLASS_CCC132;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = (int)200L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT() {
        return HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = (int)202L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW() {
        return HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = (int)214L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE() {
        return HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = (int)216L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT() {
        return HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = (int)218L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_BELOW_LEFT() {
        return HB_UNICODE_COMBINING_CLASS_BELOW_LEFT;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_BELOW = (int)220L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_BELOW = 220
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_BELOW() {
        return HB_UNICODE_COMBINING_CLASS_BELOW;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = (int)222L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT() {
        return HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_LEFT = (int)224L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_LEFT = 224
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_LEFT() {
        return HB_UNICODE_COMBINING_CLASS_LEFT;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_RIGHT = (int)226L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_RIGHT = 226
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_RIGHT() {
        return HB_UNICODE_COMBINING_CLASS_RIGHT;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = (int)228L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT() {
        return HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_ABOVE = (int)230L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_ABOVE = 230
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_ABOVE() {
        return HB_UNICODE_COMBINING_CLASS_ABOVE;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = (int)232L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT() {
        return HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = (int)233L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW() {
        return HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = (int)234L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE() {
        return HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = (int)240L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT() {
        return HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT;
    }
    private static final int HB_UNICODE_COMBINING_CLASS_INVALID = (int)255L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_UNICODE_COMBINING_CLASS_INVALID = 255
     * }
     */
    public static int HB_UNICODE_COMBINING_CLASS_INVALID() {
        return HB_UNICODE_COMBINING_CLASS_INVALID;
    }

    private static class hb_unicode_funcs_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_get_default()
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_get_default$descriptor() {
        return hb_unicode_funcs_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_get_default()
     * }
     */
    public static MethodHandle hb_unicode_funcs_get_default$handle() {
        return hb_unicode_funcs_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_get_default()
     * }
     */
    public static MemorySegment hb_unicode_funcs_get_default() {
        var mh$ = hb_unicode_funcs_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_create(hb_unicode_funcs_t *parent)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_create$descriptor() {
        return hb_unicode_funcs_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_create(hb_unicode_funcs_t *parent)
     * }
     */
    public static MethodHandle hb_unicode_funcs_create$handle() {
        return hb_unicode_funcs_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_create(hb_unicode_funcs_t *parent)
     * }
     */
    public static MemorySegment hb_unicode_funcs_create(MemorySegment parent) {
        var mh$ = hb_unicode_funcs_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_create", parent);
            }
            return (MemorySegment)mh$.invokeExact(parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_get_empty()
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_get_empty$descriptor() {
        return hb_unicode_funcs_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_get_empty()
     * }
     */
    public static MethodHandle hb_unicode_funcs_get_empty$handle() {
        return hb_unicode_funcs_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_get_empty()
     * }
     */
    public static MemorySegment hb_unicode_funcs_get_empty() {
        var mh$ = hb_unicode_funcs_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_reference(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_reference$descriptor() {
        return hb_unicode_funcs_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_reference(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static MethodHandle hb_unicode_funcs_reference$handle() {
        return hb_unicode_funcs_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_reference(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static MemorySegment hb_unicode_funcs_reference(MemorySegment ufuncs) {
        var mh$ = hb_unicode_funcs_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_reference", ufuncs);
            }
            return (MemorySegment)mh$.invokeExact(ufuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_destroy(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_destroy$descriptor() {
        return hb_unicode_funcs_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_destroy(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static MethodHandle hb_unicode_funcs_destroy$handle() {
        return hb_unicode_funcs_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_destroy(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static void hb_unicode_funcs_destroy(MemorySegment ufuncs) {
        var mh$ = hb_unicode_funcs_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_destroy", ufuncs);
            }
            mh$.invokeExact(ufuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_funcs_set_user_data(hb_unicode_funcs_t *ufuncs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_set_user_data$descriptor() {
        return hb_unicode_funcs_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_funcs_set_user_data(hb_unicode_funcs_t *ufuncs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_unicode_funcs_set_user_data$handle() {
        return hb_unicode_funcs_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_funcs_set_user_data(hb_unicode_funcs_t *ufuncs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_unicode_funcs_set_user_data(MemorySegment ufuncs, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_unicode_funcs_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_set_user_data", ufuncs, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(ufuncs, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_unicode_funcs_get_user_data(const hb_unicode_funcs_t *ufuncs, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_get_user_data$descriptor() {
        return hb_unicode_funcs_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_unicode_funcs_get_user_data(const hb_unicode_funcs_t *ufuncs, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_unicode_funcs_get_user_data$handle() {
        return hb_unicode_funcs_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_unicode_funcs_get_user_data(const hb_unicode_funcs_t *ufuncs, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_unicode_funcs_get_user_data(MemorySegment ufuncs, MemorySegment key) {
        var mh$ = hb_unicode_funcs_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_get_user_data", ufuncs, key);
            }
            return (MemorySegment)mh$.invokeExact(ufuncs, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_make_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_make_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_make_immutable(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_make_immutable$descriptor() {
        return hb_unicode_funcs_make_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_make_immutable(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static MethodHandle hb_unicode_funcs_make_immutable$handle() {
        return hb_unicode_funcs_make_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_make_immutable(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static void hb_unicode_funcs_make_immutable(MemorySegment ufuncs) {
        var mh$ = hb_unicode_funcs_make_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_make_immutable", ufuncs);
            }
            mh$.invokeExact(ufuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_is_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_is_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_funcs_is_immutable(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_is_immutable$descriptor() {
        return hb_unicode_funcs_is_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_funcs_is_immutable(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static MethodHandle hb_unicode_funcs_is_immutable$handle() {
        return hb_unicode_funcs_is_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_funcs_is_immutable(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static int hb_unicode_funcs_is_immutable(MemorySegment ufuncs) {
        var mh$ = hb_unicode_funcs_is_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_is_immutable", ufuncs);
            }
            return (int)mh$.invokeExact(ufuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_get_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_get_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_get_parent(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_get_parent$descriptor() {
        return hb_unicode_funcs_get_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_get_parent(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static MethodHandle hb_unicode_funcs_get_parent$handle() {
        return hb_unicode_funcs_get_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_unicode_funcs_get_parent(hb_unicode_funcs_t *ufuncs)
     * }
     */
    public static MemorySegment hb_unicode_funcs_get_parent(MemorySegment ufuncs) {
        var mh$ = hb_unicode_funcs_get_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_get_parent", ufuncs);
            }
            return (MemorySegment)mh$.invokeExact(ufuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_set_combining_class_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_set_combining_class_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_combining_class_func(hb_unicode_funcs_t *ufuncs, hb_unicode_combining_class_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_set_combining_class_func$descriptor() {
        return hb_unicode_funcs_set_combining_class_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_combining_class_func(hb_unicode_funcs_t *ufuncs, hb_unicode_combining_class_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_unicode_funcs_set_combining_class_func$handle() {
        return hb_unicode_funcs_set_combining_class_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_combining_class_func(hb_unicode_funcs_t *ufuncs, hb_unicode_combining_class_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_unicode_funcs_set_combining_class_func(MemorySegment ufuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_unicode_funcs_set_combining_class_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_set_combining_class_func", ufuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ufuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_set_general_category_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_set_general_category_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_general_category_func(hb_unicode_funcs_t *ufuncs, hb_unicode_general_category_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_set_general_category_func$descriptor() {
        return hb_unicode_funcs_set_general_category_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_general_category_func(hb_unicode_funcs_t *ufuncs, hb_unicode_general_category_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_unicode_funcs_set_general_category_func$handle() {
        return hb_unicode_funcs_set_general_category_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_general_category_func(hb_unicode_funcs_t *ufuncs, hb_unicode_general_category_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_unicode_funcs_set_general_category_func(MemorySegment ufuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_unicode_funcs_set_general_category_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_set_general_category_func", ufuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ufuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_set_mirroring_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_set_mirroring_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_mirroring_func(hb_unicode_funcs_t *ufuncs, hb_unicode_mirroring_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_set_mirroring_func$descriptor() {
        return hb_unicode_funcs_set_mirroring_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_mirroring_func(hb_unicode_funcs_t *ufuncs, hb_unicode_mirroring_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_unicode_funcs_set_mirroring_func$handle() {
        return hb_unicode_funcs_set_mirroring_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_mirroring_func(hb_unicode_funcs_t *ufuncs, hb_unicode_mirroring_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_unicode_funcs_set_mirroring_func(MemorySegment ufuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_unicode_funcs_set_mirroring_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_set_mirroring_func", ufuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ufuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_set_script_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_set_script_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_script_func(hb_unicode_funcs_t *ufuncs, hb_unicode_script_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_set_script_func$descriptor() {
        return hb_unicode_funcs_set_script_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_script_func(hb_unicode_funcs_t *ufuncs, hb_unicode_script_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_unicode_funcs_set_script_func$handle() {
        return hb_unicode_funcs_set_script_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_script_func(hb_unicode_funcs_t *ufuncs, hb_unicode_script_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_unicode_funcs_set_script_func(MemorySegment ufuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_unicode_funcs_set_script_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_set_script_func", ufuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ufuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_set_compose_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_set_compose_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_compose_func(hb_unicode_funcs_t *ufuncs, hb_unicode_compose_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_set_compose_func$descriptor() {
        return hb_unicode_funcs_set_compose_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_compose_func(hb_unicode_funcs_t *ufuncs, hb_unicode_compose_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_unicode_funcs_set_compose_func$handle() {
        return hb_unicode_funcs_set_compose_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_compose_func(hb_unicode_funcs_t *ufuncs, hb_unicode_compose_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_unicode_funcs_set_compose_func(MemorySegment ufuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_unicode_funcs_set_compose_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_set_compose_func", ufuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ufuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_set_decompose_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_set_decompose_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_decompose_func(hb_unicode_funcs_t *ufuncs, hb_unicode_decompose_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_set_decompose_func$descriptor() {
        return hb_unicode_funcs_set_decompose_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_decompose_func(hb_unicode_funcs_t *ufuncs, hb_unicode_decompose_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_unicode_funcs_set_decompose_func$handle() {
        return hb_unicode_funcs_set_decompose_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_decompose_func(hb_unicode_funcs_t *ufuncs, hb_unicode_decompose_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_unicode_funcs_set_decompose_func(MemorySegment ufuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_unicode_funcs_set_decompose_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_set_decompose_func", ufuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ufuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_combining_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_combining_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_unicode_combining_class_t hb_unicode_combining_class(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static FunctionDescriptor hb_unicode_combining_class$descriptor() {
        return hb_unicode_combining_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_unicode_combining_class_t hb_unicode_combining_class(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static MethodHandle hb_unicode_combining_class$handle() {
        return hb_unicode_combining_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_unicode_combining_class_t hb_unicode_combining_class(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static int hb_unicode_combining_class(MemorySegment ufuncs, int unicode) {
        var mh$ = hb_unicode_combining_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_combining_class", ufuncs, unicode);
            }
            return (int)mh$.invokeExact(ufuncs, unicode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_general_category {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_general_category"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_unicode_general_category_t hb_unicode_general_category(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static FunctionDescriptor hb_unicode_general_category$descriptor() {
        return hb_unicode_general_category.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_unicode_general_category_t hb_unicode_general_category(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static MethodHandle hb_unicode_general_category$handle() {
        return hb_unicode_general_category.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_unicode_general_category_t hb_unicode_general_category(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static int hb_unicode_general_category(MemorySegment ufuncs, int unicode) {
        var mh$ = hb_unicode_general_category.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_general_category", ufuncs, unicode);
            }
            return (int)mh$.invokeExact(ufuncs, unicode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_mirroring {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_mirroring"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_unicode_mirroring(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static FunctionDescriptor hb_unicode_mirroring$descriptor() {
        return hb_unicode_mirroring.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_unicode_mirroring(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static MethodHandle hb_unicode_mirroring$handle() {
        return hb_unicode_mirroring.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_unicode_mirroring(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static int hb_unicode_mirroring(MemorySegment ufuncs, int unicode) {
        var mh$ = hb_unicode_mirroring.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_mirroring", ufuncs, unicode);
            }
            return (int)mh$.invokeExact(ufuncs, unicode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_script {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_script"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_script_t hb_unicode_script(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static FunctionDescriptor hb_unicode_script$descriptor() {
        return hb_unicode_script.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_script_t hb_unicode_script(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static MethodHandle hb_unicode_script$handle() {
        return hb_unicode_script.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_script_t hb_unicode_script(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static int hb_unicode_script(MemorySegment ufuncs, int unicode) {
        var mh$ = hb_unicode_script.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_script", ufuncs, unicode);
            }
            return (int)mh$.invokeExact(ufuncs, unicode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_compose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_compose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_compose(hb_unicode_funcs_t *ufuncs, hb_codepoint_t a, hb_codepoint_t b, hb_codepoint_t *ab)
     * }
     */
    public static FunctionDescriptor hb_unicode_compose$descriptor() {
        return hb_unicode_compose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_compose(hb_unicode_funcs_t *ufuncs, hb_codepoint_t a, hb_codepoint_t b, hb_codepoint_t *ab)
     * }
     */
    public static MethodHandle hb_unicode_compose$handle() {
        return hb_unicode_compose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_compose(hb_unicode_funcs_t *ufuncs, hb_codepoint_t a, hb_codepoint_t b, hb_codepoint_t *ab)
     * }
     */
    public static int hb_unicode_compose(MemorySegment ufuncs, int a, int b, MemorySegment ab) {
        var mh$ = hb_unicode_compose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_compose", ufuncs, a, b, ab);
            }
            return (int)mh$.invokeExact(ufuncs, a, b, ab);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_decompose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_decompose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_decompose(hb_unicode_funcs_t *ufuncs, hb_codepoint_t ab, hb_codepoint_t *a, hb_codepoint_t *b)
     * }
     */
    public static FunctionDescriptor hb_unicode_decompose$descriptor() {
        return hb_unicode_decompose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_decompose(hb_unicode_funcs_t *ufuncs, hb_codepoint_t ab, hb_codepoint_t *a, hb_codepoint_t *b)
     * }
     */
    public static MethodHandle hb_unicode_decompose$handle() {
        return hb_unicode_decompose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_unicode_decompose(hb_unicode_funcs_t *ufuncs, hb_codepoint_t ab, hb_codepoint_t *a, hb_codepoint_t *b)
     * }
     */
    public static int hb_unicode_decompose(MemorySegment ufuncs, int ab, MemorySegment a, MemorySegment b) {
        var mh$ = hb_unicode_decompose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_decompose", ufuncs, ab, a, b);
            }
            return (int)mh$.invokeExact(ufuncs, ab, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_create()
     * }
     */
    public static FunctionDescriptor hb_set_create$descriptor() {
        return hb_set_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_create()
     * }
     */
    public static MethodHandle hb_set_create$handle() {
        return hb_set_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_create()
     * }
     */
    public static MemorySegment hb_set_create() {
        var mh$ = hb_set_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_get_empty()
     * }
     */
    public static FunctionDescriptor hb_set_get_empty$descriptor() {
        return hb_set_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_get_empty()
     * }
     */
    public static MethodHandle hb_set_get_empty$handle() {
        return hb_set_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_get_empty()
     * }
     */
    public static MemorySegment hb_set_get_empty() {
        var mh$ = hb_set_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_reference(hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_reference$descriptor() {
        return hb_set_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_reference(hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_reference$handle() {
        return hb_set_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_reference(hb_set_t *set)
     * }
     */
    public static MemorySegment hb_set_reference(MemorySegment set) {
        var mh$ = hb_set_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_reference", set);
            }
            return (MemorySegment)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_destroy(hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_destroy$descriptor() {
        return hb_set_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_destroy(hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_destroy$handle() {
        return hb_set_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_destroy(hb_set_t *set)
     * }
     */
    public static void hb_set_destroy(MemorySegment set) {
        var mh$ = hb_set_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_destroy", set);
            }
            mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_set_user_data(hb_set_t *set, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_set_set_user_data$descriptor() {
        return hb_set_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_set_user_data(hb_set_t *set, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_set_set_user_data$handle() {
        return hb_set_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_set_user_data(hb_set_t *set, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_set_set_user_data(MemorySegment set, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_set_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_set_user_data", set, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(set, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_set_get_user_data(const hb_set_t *set, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_set_get_user_data$descriptor() {
        return hb_set_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_set_get_user_data(const hb_set_t *set, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_set_get_user_data$handle() {
        return hb_set_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_set_get_user_data(const hb_set_t *set, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_set_get_user_data(MemorySegment set, MemorySegment key) {
        var mh$ = hb_set_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_get_user_data", set, key);
            }
            return (MemorySegment)mh$.invokeExact(set, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_allocation_successful {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_allocation_successful"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_allocation_successful(const hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_allocation_successful$descriptor() {
        return hb_set_allocation_successful.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_allocation_successful(const hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_allocation_successful$handle() {
        return hb_set_allocation_successful.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_allocation_successful(const hb_set_t *set)
     * }
     */
    public static int hb_set_allocation_successful(MemorySegment set) {
        var mh$ = hb_set_allocation_successful.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_allocation_successful", set);
            }
            return (int)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_copy(const hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_copy$descriptor() {
        return hb_set_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_copy(const hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_copy$handle() {
        return hb_set_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_set_t *hb_set_copy(const hb_set_t *set)
     * }
     */
    public static MemorySegment hb_set_copy(MemorySegment set) {
        var mh$ = hb_set_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_copy", set);
            }
            return (MemorySegment)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_clear(hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_clear$descriptor() {
        return hb_set_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_clear(hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_clear$handle() {
        return hb_set_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_clear(hb_set_t *set)
     * }
     */
    public static void hb_set_clear(MemorySegment set) {
        var mh$ = hb_set_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_clear", set);
            }
            mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_is_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_is_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_empty(const hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_is_empty$descriptor() {
        return hb_set_is_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_empty(const hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_is_empty$handle() {
        return hb_set_is_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_empty(const hb_set_t *set)
     * }
     */
    public static int hb_set_is_empty(MemorySegment set) {
        var mh$ = hb_set_is_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_is_empty", set);
            }
            return (int)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_invert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_invert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_invert(hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_invert$descriptor() {
        return hb_set_invert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_invert(hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_invert$handle() {
        return hb_set_invert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_invert(hb_set_t *set)
     * }
     */
    public static void hb_set_invert(MemorySegment set) {
        var mh$ = hb_set_invert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_invert", set);
            }
            mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_is_inverted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_is_inverted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_inverted(const hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_is_inverted$descriptor() {
        return hb_set_is_inverted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_inverted(const hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_is_inverted$handle() {
        return hb_set_is_inverted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_inverted(const hb_set_t *set)
     * }
     */
    public static int hb_set_is_inverted(MemorySegment set) {
        var mh$ = hb_set_is_inverted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_is_inverted", set);
            }
            return (int)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_has {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_has"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_has(const hb_set_t *set, hb_codepoint_t codepoint)
     * }
     */
    public static FunctionDescriptor hb_set_has$descriptor() {
        return hb_set_has.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_has(const hb_set_t *set, hb_codepoint_t codepoint)
     * }
     */
    public static MethodHandle hb_set_has$handle() {
        return hb_set_has.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_has(const hb_set_t *set, hb_codepoint_t codepoint)
     * }
     */
    public static int hb_set_has(MemorySegment set, int codepoint) {
        var mh$ = hb_set_has.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_has", set, codepoint);
            }
            return (int)mh$.invokeExact(set, codepoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_add(hb_set_t *set, hb_codepoint_t codepoint)
     * }
     */
    public static FunctionDescriptor hb_set_add$descriptor() {
        return hb_set_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_add(hb_set_t *set, hb_codepoint_t codepoint)
     * }
     */
    public static MethodHandle hb_set_add$handle() {
        return hb_set_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_add(hb_set_t *set, hb_codepoint_t codepoint)
     * }
     */
    public static void hb_set_add(MemorySegment set, int codepoint) {
        var mh$ = hb_set_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_add", set, codepoint);
            }
            mh$.invokeExact(set, codepoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_add_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_add_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_add_range(hb_set_t *set, hb_codepoint_t first, hb_codepoint_t last)
     * }
     */
    public static FunctionDescriptor hb_set_add_range$descriptor() {
        return hb_set_add_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_add_range(hb_set_t *set, hb_codepoint_t first, hb_codepoint_t last)
     * }
     */
    public static MethodHandle hb_set_add_range$handle() {
        return hb_set_add_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_add_range(hb_set_t *set, hb_codepoint_t first, hb_codepoint_t last)
     * }
     */
    public static void hb_set_add_range(MemorySegment set, int first, int last) {
        var mh$ = hb_set_add_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_add_range", set, first, last);
            }
            mh$.invokeExact(set, first, last);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_add_sorted_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_add_sorted_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_add_sorted_array(hb_set_t *set, const hb_codepoint_t *sorted_codepoints, unsigned int num_codepoints)
     * }
     */
    public static FunctionDescriptor hb_set_add_sorted_array$descriptor() {
        return hb_set_add_sorted_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_add_sorted_array(hb_set_t *set, const hb_codepoint_t *sorted_codepoints, unsigned int num_codepoints)
     * }
     */
    public static MethodHandle hb_set_add_sorted_array$handle() {
        return hb_set_add_sorted_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_add_sorted_array(hb_set_t *set, const hb_codepoint_t *sorted_codepoints, unsigned int num_codepoints)
     * }
     */
    public static void hb_set_add_sorted_array(MemorySegment set, MemorySegment sorted_codepoints, int num_codepoints) {
        var mh$ = hb_set_add_sorted_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_add_sorted_array", set, sorted_codepoints, num_codepoints);
            }
            mh$.invokeExact(set, sorted_codepoints, num_codepoints);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_del {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_del"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_del(hb_set_t *set, hb_codepoint_t codepoint)
     * }
     */
    public static FunctionDescriptor hb_set_del$descriptor() {
        return hb_set_del.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_del(hb_set_t *set, hb_codepoint_t codepoint)
     * }
     */
    public static MethodHandle hb_set_del$handle() {
        return hb_set_del.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_del(hb_set_t *set, hb_codepoint_t codepoint)
     * }
     */
    public static void hb_set_del(MemorySegment set, int codepoint) {
        var mh$ = hb_set_del.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_del", set, codepoint);
            }
            mh$.invokeExact(set, codepoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_del_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_del_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_del_range(hb_set_t *set, hb_codepoint_t first, hb_codepoint_t last)
     * }
     */
    public static FunctionDescriptor hb_set_del_range$descriptor() {
        return hb_set_del_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_del_range(hb_set_t *set, hb_codepoint_t first, hb_codepoint_t last)
     * }
     */
    public static MethodHandle hb_set_del_range$handle() {
        return hb_set_del_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_del_range(hb_set_t *set, hb_codepoint_t first, hb_codepoint_t last)
     * }
     */
    public static void hb_set_del_range(MemorySegment set, int first, int last) {
        var mh$ = hb_set_del_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_del_range", set, first, last);
            }
            mh$.invokeExact(set, first, last);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_is_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_is_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_equal(const hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static FunctionDescriptor hb_set_is_equal$descriptor() {
        return hb_set_is_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_equal(const hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static MethodHandle hb_set_is_equal$handle() {
        return hb_set_is_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_equal(const hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static int hb_set_is_equal(MemorySegment set, MemorySegment other) {
        var mh$ = hb_set_is_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_is_equal", set, other);
            }
            return (int)mh$.invokeExact(set, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_set_hash(const hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_hash$descriptor() {
        return hb_set_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_set_hash(const hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_hash$handle() {
        return hb_set_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_set_hash(const hb_set_t *set)
     * }
     */
    public static int hb_set_hash(MemorySegment set) {
        var mh$ = hb_set_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_hash", set);
            }
            return (int)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_is_subset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_is_subset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_subset(const hb_set_t *set, const hb_set_t *larger_set)
     * }
     */
    public static FunctionDescriptor hb_set_is_subset$descriptor() {
        return hb_set_is_subset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_subset(const hb_set_t *set, const hb_set_t *larger_set)
     * }
     */
    public static MethodHandle hb_set_is_subset$handle() {
        return hb_set_is_subset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_is_subset(const hb_set_t *set, const hb_set_t *larger_set)
     * }
     */
    public static int hb_set_is_subset(MemorySegment set, MemorySegment larger_set) {
        var mh$ = hb_set_is_subset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_is_subset", set, larger_set);
            }
            return (int)mh$.invokeExact(set, larger_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_set(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static FunctionDescriptor hb_set_set$descriptor() {
        return hb_set_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_set(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static MethodHandle hb_set_set$handle() {
        return hb_set_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_set(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static void hb_set_set(MemorySegment set, MemorySegment other) {
        var mh$ = hb_set_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_set", set, other);
            }
            mh$.invokeExact(set, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_union {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_union"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_union(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static FunctionDescriptor hb_set_union$descriptor() {
        return hb_set_union.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_union(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static MethodHandle hb_set_union$handle() {
        return hb_set_union.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_union(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static void hb_set_union(MemorySegment set, MemorySegment other) {
        var mh$ = hb_set_union.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_union", set, other);
            }
            mh$.invokeExact(set, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_intersect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_intersect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_intersect(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static FunctionDescriptor hb_set_intersect$descriptor() {
        return hb_set_intersect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_intersect(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static MethodHandle hb_set_intersect$handle() {
        return hb_set_intersect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_intersect(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static void hb_set_intersect(MemorySegment set, MemorySegment other) {
        var mh$ = hb_set_intersect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_intersect", set, other);
            }
            mh$.invokeExact(set, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_subtract {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_subtract"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_subtract(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static FunctionDescriptor hb_set_subtract$descriptor() {
        return hb_set_subtract.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_subtract(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static MethodHandle hb_set_subtract$handle() {
        return hb_set_subtract.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_subtract(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static void hb_set_subtract(MemorySegment set, MemorySegment other) {
        var mh$ = hb_set_subtract.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_subtract", set, other);
            }
            mh$.invokeExact(set, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_symmetric_difference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_symmetric_difference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_set_symmetric_difference(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static FunctionDescriptor hb_set_symmetric_difference$descriptor() {
        return hb_set_symmetric_difference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_set_symmetric_difference(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static MethodHandle hb_set_symmetric_difference$handle() {
        return hb_set_symmetric_difference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_set_symmetric_difference(hb_set_t *set, const hb_set_t *other)
     * }
     */
    public static void hb_set_symmetric_difference(MemorySegment set, MemorySegment other) {
        var mh$ = hb_set_symmetric_difference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_symmetric_difference", set, other);
            }
            mh$.invokeExact(set, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_get_population {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_get_population"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_set_get_population(const hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_get_population$descriptor() {
        return hb_set_get_population.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_set_get_population(const hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_get_population$handle() {
        return hb_set_get_population.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_set_get_population(const hb_set_t *set)
     * }
     */
    public static int hb_set_get_population(MemorySegment set) {
        var mh$ = hb_set_get_population.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_get_population", set);
            }
            return (int)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_get_min {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_get_min"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_set_get_min(const hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_get_min$descriptor() {
        return hb_set_get_min.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_set_get_min(const hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_get_min$handle() {
        return hb_set_get_min.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_set_get_min(const hb_set_t *set)
     * }
     */
    public static int hb_set_get_min(MemorySegment set) {
        var mh$ = hb_set_get_min.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_get_min", set);
            }
            return (int)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_get_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_get_max"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_set_get_max(const hb_set_t *set)
     * }
     */
    public static FunctionDescriptor hb_set_get_max$descriptor() {
        return hb_set_get_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_set_get_max(const hb_set_t *set)
     * }
     */
    public static MethodHandle hb_set_get_max$handle() {
        return hb_set_get_max.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_set_get_max(const hb_set_t *set)
     * }
     */
    public static int hb_set_get_max(MemorySegment set) {
        var mh$ = hb_set_get_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_get_max", set);
            }
            return (int)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_next(const hb_set_t *set, hb_codepoint_t *codepoint)
     * }
     */
    public static FunctionDescriptor hb_set_next$descriptor() {
        return hb_set_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_next(const hb_set_t *set, hb_codepoint_t *codepoint)
     * }
     */
    public static MethodHandle hb_set_next$handle() {
        return hb_set_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_next(const hb_set_t *set, hb_codepoint_t *codepoint)
     * }
     */
    public static int hb_set_next(MemorySegment set, MemorySegment codepoint) {
        var mh$ = hb_set_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_next", set, codepoint);
            }
            return (int)mh$.invokeExact(set, codepoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_previous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_previous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_previous(const hb_set_t *set, hb_codepoint_t *codepoint)
     * }
     */
    public static FunctionDescriptor hb_set_previous$descriptor() {
        return hb_set_previous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_previous(const hb_set_t *set, hb_codepoint_t *codepoint)
     * }
     */
    public static MethodHandle hb_set_previous$handle() {
        return hb_set_previous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_previous(const hb_set_t *set, hb_codepoint_t *codepoint)
     * }
     */
    public static int hb_set_previous(MemorySegment set, MemorySegment codepoint) {
        var mh$ = hb_set_previous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_previous", set, codepoint);
            }
            return (int)mh$.invokeExact(set, codepoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_next_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_next_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_next_range(const hb_set_t *set, hb_codepoint_t *first, hb_codepoint_t *last)
     * }
     */
    public static FunctionDescriptor hb_set_next_range$descriptor() {
        return hb_set_next_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_next_range(const hb_set_t *set, hb_codepoint_t *first, hb_codepoint_t *last)
     * }
     */
    public static MethodHandle hb_set_next_range$handle() {
        return hb_set_next_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_next_range(const hb_set_t *set, hb_codepoint_t *first, hb_codepoint_t *last)
     * }
     */
    public static int hb_set_next_range(MemorySegment set, MemorySegment first, MemorySegment last) {
        var mh$ = hb_set_next_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_next_range", set, first, last);
            }
            return (int)mh$.invokeExact(set, first, last);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_previous_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_previous_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_previous_range(const hb_set_t *set, hb_codepoint_t *first, hb_codepoint_t *last)
     * }
     */
    public static FunctionDescriptor hb_set_previous_range$descriptor() {
        return hb_set_previous_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_previous_range(const hb_set_t *set, hb_codepoint_t *first, hb_codepoint_t *last)
     * }
     */
    public static MethodHandle hb_set_previous_range$handle() {
        return hb_set_previous_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_set_previous_range(const hb_set_t *set, hb_codepoint_t *first, hb_codepoint_t *last)
     * }
     */
    public static int hb_set_previous_range(MemorySegment set, MemorySegment first, MemorySegment last) {
        var mh$ = hb_set_previous_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_previous_range", set, first, last);
            }
            return (int)mh$.invokeExact(set, first, last);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_set_next_many {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_set_next_many"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_set_next_many(const hb_set_t *set, hb_codepoint_t codepoint, hb_codepoint_t *out, unsigned int size)
     * }
     */
    public static FunctionDescriptor hb_set_next_many$descriptor() {
        return hb_set_next_many.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_set_next_many(const hb_set_t *set, hb_codepoint_t codepoint, hb_codepoint_t *out, unsigned int size)
     * }
     */
    public static MethodHandle hb_set_next_many$handle() {
        return hb_set_next_many.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_set_next_many(const hb_set_t *set, hb_codepoint_t codepoint, hb_codepoint_t *out, unsigned int size)
     * }
     */
    public static int hb_set_next_many(MemorySegment set, int codepoint, MemorySegment out, int size) {
        var mh$ = hb_set_next_many.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_set_next_many", set, codepoint, out, size);
            }
            return (int)mh$.invokeExact(set, codepoint, out, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_create()
     * }
     */
    public static FunctionDescriptor hb_map_create$descriptor() {
        return hb_map_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_create()
     * }
     */
    public static MethodHandle hb_map_create$handle() {
        return hb_map_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_create()
     * }
     */
    public static MemorySegment hb_map_create() {
        var mh$ = hb_map_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_get_empty()
     * }
     */
    public static FunctionDescriptor hb_map_get_empty$descriptor() {
        return hb_map_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_get_empty()
     * }
     */
    public static MethodHandle hb_map_get_empty$handle() {
        return hb_map_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_get_empty()
     * }
     */
    public static MemorySegment hb_map_get_empty() {
        var mh$ = hb_map_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_reference(hb_map_t *map)
     * }
     */
    public static FunctionDescriptor hb_map_reference$descriptor() {
        return hb_map_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_reference(hb_map_t *map)
     * }
     */
    public static MethodHandle hb_map_reference$handle() {
        return hb_map_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_reference(hb_map_t *map)
     * }
     */
    public static MemorySegment hb_map_reference(MemorySegment map) {
        var mh$ = hb_map_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_reference", map);
            }
            return (MemorySegment)mh$.invokeExact(map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_map_destroy(hb_map_t *map)
     * }
     */
    public static FunctionDescriptor hb_map_destroy$descriptor() {
        return hb_map_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_map_destroy(hb_map_t *map)
     * }
     */
    public static MethodHandle hb_map_destroy$handle() {
        return hb_map_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_map_destroy(hb_map_t *map)
     * }
     */
    public static void hb_map_destroy(MemorySegment map) {
        var mh$ = hb_map_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_destroy", map);
            }
            mh$.invokeExact(map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_set_user_data(hb_map_t *map, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_map_set_user_data$descriptor() {
        return hb_map_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_set_user_data(hb_map_t *map, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_map_set_user_data$handle() {
        return hb_map_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_set_user_data(hb_map_t *map, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_map_set_user_data(MemorySegment map, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_map_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_set_user_data", map, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(map, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_map_get_user_data(const hb_map_t *map, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_map_get_user_data$descriptor() {
        return hb_map_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_map_get_user_data(const hb_map_t *map, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_map_get_user_data$handle() {
        return hb_map_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_map_get_user_data(const hb_map_t *map, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_map_get_user_data(MemorySegment map, MemorySegment key) {
        var mh$ = hb_map_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_get_user_data", map, key);
            }
            return (MemorySegment)mh$.invokeExact(map, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_allocation_successful {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_allocation_successful"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_allocation_successful(const hb_map_t *map)
     * }
     */
    public static FunctionDescriptor hb_map_allocation_successful$descriptor() {
        return hb_map_allocation_successful.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_allocation_successful(const hb_map_t *map)
     * }
     */
    public static MethodHandle hb_map_allocation_successful$handle() {
        return hb_map_allocation_successful.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_allocation_successful(const hb_map_t *map)
     * }
     */
    public static int hb_map_allocation_successful(MemorySegment map) {
        var mh$ = hb_map_allocation_successful.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_allocation_successful", map);
            }
            return (int)mh$.invokeExact(map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_copy(const hb_map_t *map)
     * }
     */
    public static FunctionDescriptor hb_map_copy$descriptor() {
        return hb_map_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_copy(const hb_map_t *map)
     * }
     */
    public static MethodHandle hb_map_copy$handle() {
        return hb_map_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_map_t *hb_map_copy(const hb_map_t *map)
     * }
     */
    public static MemorySegment hb_map_copy(MemorySegment map) {
        var mh$ = hb_map_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_copy", map);
            }
            return (MemorySegment)mh$.invokeExact(map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_map_clear(hb_map_t *map)
     * }
     */
    public static FunctionDescriptor hb_map_clear$descriptor() {
        return hb_map_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_map_clear(hb_map_t *map)
     * }
     */
    public static MethodHandle hb_map_clear$handle() {
        return hb_map_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_map_clear(hb_map_t *map)
     * }
     */
    public static void hb_map_clear(MemorySegment map) {
        var mh$ = hb_map_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_clear", map);
            }
            mh$.invokeExact(map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_is_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_is_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_is_empty(const hb_map_t *map)
     * }
     */
    public static FunctionDescriptor hb_map_is_empty$descriptor() {
        return hb_map_is_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_is_empty(const hb_map_t *map)
     * }
     */
    public static MethodHandle hb_map_is_empty$handle() {
        return hb_map_is_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_is_empty(const hb_map_t *map)
     * }
     */
    public static int hb_map_is_empty(MemorySegment map) {
        var mh$ = hb_map_is_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_is_empty", map);
            }
            return (int)mh$.invokeExact(map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_get_population {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_get_population"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_map_get_population(const hb_map_t *map)
     * }
     */
    public static FunctionDescriptor hb_map_get_population$descriptor() {
        return hb_map_get_population.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_map_get_population(const hb_map_t *map)
     * }
     */
    public static MethodHandle hb_map_get_population$handle() {
        return hb_map_get_population.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_map_get_population(const hb_map_t *map)
     * }
     */
    public static int hb_map_get_population(MemorySegment map) {
        var mh$ = hb_map_get_population.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_get_population", map);
            }
            return (int)mh$.invokeExact(map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_is_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_is_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_is_equal(const hb_map_t *map, const hb_map_t *other)
     * }
     */
    public static FunctionDescriptor hb_map_is_equal$descriptor() {
        return hb_map_is_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_is_equal(const hb_map_t *map, const hb_map_t *other)
     * }
     */
    public static MethodHandle hb_map_is_equal$handle() {
        return hb_map_is_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_is_equal(const hb_map_t *map, const hb_map_t *other)
     * }
     */
    public static int hb_map_is_equal(MemorySegment map, MemorySegment other) {
        var mh$ = hb_map_is_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_is_equal", map, other);
            }
            return (int)mh$.invokeExact(map, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_map_hash(const hb_map_t *map)
     * }
     */
    public static FunctionDescriptor hb_map_hash$descriptor() {
        return hb_map_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_map_hash(const hb_map_t *map)
     * }
     */
    public static MethodHandle hb_map_hash$handle() {
        return hb_map_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_map_hash(const hb_map_t *map)
     * }
     */
    public static int hb_map_hash(MemorySegment map) {
        var mh$ = hb_map_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_hash", map);
            }
            return (int)mh$.invokeExact(map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_map_set(hb_map_t *map, hb_codepoint_t key, hb_codepoint_t value)
     * }
     */
    public static FunctionDescriptor hb_map_set$descriptor() {
        return hb_map_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_map_set(hb_map_t *map, hb_codepoint_t key, hb_codepoint_t value)
     * }
     */
    public static MethodHandle hb_map_set$handle() {
        return hb_map_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_map_set(hb_map_t *map, hb_codepoint_t key, hb_codepoint_t value)
     * }
     */
    public static void hb_map_set(MemorySegment map, int key, int value) {
        var mh$ = hb_map_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_set", map, key, value);
            }
            mh$.invokeExact(map, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_map_get(const hb_map_t *map, hb_codepoint_t key)
     * }
     */
    public static FunctionDescriptor hb_map_get$descriptor() {
        return hb_map_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_map_get(const hb_map_t *map, hb_codepoint_t key)
     * }
     */
    public static MethodHandle hb_map_get$handle() {
        return hb_map_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_map_get(const hb_map_t *map, hb_codepoint_t key)
     * }
     */
    public static int hb_map_get(MemorySegment map, int key) {
        var mh$ = hb_map_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_get", map, key);
            }
            return (int)mh$.invokeExact(map, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_del {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_del"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_map_del(hb_map_t *map, hb_codepoint_t key)
     * }
     */
    public static FunctionDescriptor hb_map_del$descriptor() {
        return hb_map_del.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_map_del(hb_map_t *map, hb_codepoint_t key)
     * }
     */
    public static MethodHandle hb_map_del$handle() {
        return hb_map_del.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_map_del(hb_map_t *map, hb_codepoint_t key)
     * }
     */
    public static void hb_map_del(MemorySegment map, int key) {
        var mh$ = hb_map_del.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_del", map, key);
            }
            mh$.invokeExact(map, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_has {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_has"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_has(const hb_map_t *map, hb_codepoint_t key)
     * }
     */
    public static FunctionDescriptor hb_map_has$descriptor() {
        return hb_map_has.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_has(const hb_map_t *map, hb_codepoint_t key)
     * }
     */
    public static MethodHandle hb_map_has$handle() {
        return hb_map_has.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_has(const hb_map_t *map, hb_codepoint_t key)
     * }
     */
    public static int hb_map_has(MemorySegment map, int key) {
        var mh$ = hb_map_has.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_has", map, key);
            }
            return (int)mh$.invokeExact(map, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_update"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_map_update(hb_map_t *map, const hb_map_t *other)
     * }
     */
    public static FunctionDescriptor hb_map_update$descriptor() {
        return hb_map_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_map_update(hb_map_t *map, const hb_map_t *other)
     * }
     */
    public static MethodHandle hb_map_update$handle() {
        return hb_map_update.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_map_update(hb_map_t *map, const hb_map_t *other)
     * }
     */
    public static void hb_map_update(MemorySegment map, MemorySegment other) {
        var mh$ = hb_map_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_update", map, other);
            }
            mh$.invokeExact(map, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_next(const hb_map_t *map, int *idx, hb_codepoint_t *key, hb_codepoint_t *value)
     * }
     */
    public static FunctionDescriptor hb_map_next$descriptor() {
        return hb_map_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_next(const hb_map_t *map, int *idx, hb_codepoint_t *key, hb_codepoint_t *value)
     * }
     */
    public static MethodHandle hb_map_next$handle() {
        return hb_map_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_map_next(const hb_map_t *map, int *idx, hb_codepoint_t *key, hb_codepoint_t *value)
     * }
     */
    public static int hb_map_next(MemorySegment map, MemorySegment idx, MemorySegment key, MemorySegment value) {
        var mh$ = hb_map_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_next", map, idx, key, value);
            }
            return (int)mh$.invokeExact(map, idx, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_keys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_keys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_map_keys(const hb_map_t *map, hb_set_t *keys)
     * }
     */
    public static FunctionDescriptor hb_map_keys$descriptor() {
        return hb_map_keys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_map_keys(const hb_map_t *map, hb_set_t *keys)
     * }
     */
    public static MethodHandle hb_map_keys$handle() {
        return hb_map_keys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_map_keys(const hb_map_t *map, hb_set_t *keys)
     * }
     */
    public static void hb_map_keys(MemorySegment map, MemorySegment keys) {
        var mh$ = hb_map_keys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_keys", map, keys);
            }
            mh$.invokeExact(map, keys);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_map_values {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_map_values"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_map_values(const hb_map_t *map, hb_set_t *values)
     * }
     */
    public static FunctionDescriptor hb_map_values$descriptor() {
        return hb_map_values.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_map_values(const hb_map_t *map, hb_set_t *values)
     * }
     */
    public static MethodHandle hb_map_values$handle() {
        return hb_map_values.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_map_values(const hb_map_t *map, hb_set_t *values)
     * }
     */
    public static void hb_map_values(MemorySegment map, MemorySegment values) {
        var mh$ = hb_map_values.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_map_values", map, values);
            }
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_face_count(hb_blob_t *blob)
     * }
     */
    public static FunctionDescriptor hb_face_count$descriptor() {
        return hb_face_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_face_count(hb_blob_t *blob)
     * }
     */
    public static MethodHandle hb_face_count$handle() {
        return hb_face_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_face_count(hb_blob_t *blob)
     * }
     */
    public static int hb_face_count(MemorySegment blob) {
        var mh$ = hb_face_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_count", blob);
            }
            return (int)mh$.invokeExact(blob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_create(hb_blob_t *blob, unsigned int index)
     * }
     */
    public static FunctionDescriptor hb_face_create$descriptor() {
        return hb_face_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_create(hb_blob_t *blob, unsigned int index)
     * }
     */
    public static MethodHandle hb_face_create$handle() {
        return hb_face_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_create(hb_blob_t *blob, unsigned int index)
     * }
     */
    public static MemorySegment hb_face_create(MemorySegment blob, int index) {
        var mh$ = hb_face_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_create", blob, index);
            }
            return (MemorySegment)mh$.invokeExact(blob, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_create_for_tables {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_create_for_tables"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_create_for_tables(hb_reference_table_func_t reference_table_func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_face_create_for_tables$descriptor() {
        return hb_face_create_for_tables.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_create_for_tables(hb_reference_table_func_t reference_table_func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_face_create_for_tables$handle() {
        return hb_face_create_for_tables.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_create_for_tables(hb_reference_table_func_t reference_table_func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MemorySegment hb_face_create_for_tables(MemorySegment reference_table_func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_face_create_for_tables.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_create_for_tables", reference_table_func, user_data, destroy);
            }
            return (MemorySegment)mh$.invokeExact(reference_table_func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_get_empty()
     * }
     */
    public static FunctionDescriptor hb_face_get_empty$descriptor() {
        return hb_face_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_get_empty()
     * }
     */
    public static MethodHandle hb_face_get_empty$handle() {
        return hb_face_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_get_empty()
     * }
     */
    public static MemorySegment hb_face_get_empty() {
        var mh$ = hb_face_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_reference(hb_face_t *face)
     * }
     */
    public static FunctionDescriptor hb_face_reference$descriptor() {
        return hb_face_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_reference(hb_face_t *face)
     * }
     */
    public static MethodHandle hb_face_reference$handle() {
        return hb_face_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_reference(hb_face_t *face)
     * }
     */
    public static MemorySegment hb_face_reference(MemorySegment face) {
        var mh$ = hb_face_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_reference", face);
            }
            return (MemorySegment)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_face_destroy(hb_face_t *face)
     * }
     */
    public static FunctionDescriptor hb_face_destroy$descriptor() {
        return hb_face_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_face_destroy(hb_face_t *face)
     * }
     */
    public static MethodHandle hb_face_destroy$handle() {
        return hb_face_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_face_destroy(hb_face_t *face)
     * }
     */
    public static void hb_face_destroy(MemorySegment face) {
        var mh$ = hb_face_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_destroy", face);
            }
            mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_face_set_user_data(hb_face_t *face, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_face_set_user_data$descriptor() {
        return hb_face_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_face_set_user_data(hb_face_t *face, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_face_set_user_data$handle() {
        return hb_face_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_face_set_user_data(hb_face_t *face, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_face_set_user_data(MemorySegment face, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_face_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_set_user_data", face, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(face, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_face_get_user_data(const hb_face_t *face, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_face_get_user_data$descriptor() {
        return hb_face_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_face_get_user_data(const hb_face_t *face, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_face_get_user_data$handle() {
        return hb_face_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_face_get_user_data(const hb_face_t *face, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_face_get_user_data(MemorySegment face, MemorySegment key) {
        var mh$ = hb_face_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_get_user_data", face, key);
            }
            return (MemorySegment)mh$.invokeExact(face, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_make_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_make_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_face_make_immutable(hb_face_t *face)
     * }
     */
    public static FunctionDescriptor hb_face_make_immutable$descriptor() {
        return hb_face_make_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_face_make_immutable(hb_face_t *face)
     * }
     */
    public static MethodHandle hb_face_make_immutable$handle() {
        return hb_face_make_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_face_make_immutable(hb_face_t *face)
     * }
     */
    public static void hb_face_make_immutable(MemorySegment face) {
        var mh$ = hb_face_make_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_make_immutable", face);
            }
            mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_is_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_is_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_face_is_immutable(const hb_face_t *face)
     * }
     */
    public static FunctionDescriptor hb_face_is_immutable$descriptor() {
        return hb_face_is_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_face_is_immutable(const hb_face_t *face)
     * }
     */
    public static MethodHandle hb_face_is_immutable$handle() {
        return hb_face_is_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_face_is_immutable(const hb_face_t *face)
     * }
     */
    public static int hb_face_is_immutable(MemorySegment face) {
        var mh$ = hb_face_is_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_is_immutable", face);
            }
            return (int)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_reference_table {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_reference_table"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_face_reference_table(const hb_face_t *face, hb_tag_t tag)
     * }
     */
    public static FunctionDescriptor hb_face_reference_table$descriptor() {
        return hb_face_reference_table.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_face_reference_table(const hb_face_t *face, hb_tag_t tag)
     * }
     */
    public static MethodHandle hb_face_reference_table$handle() {
        return hb_face_reference_table.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_blob_t *hb_face_reference_table(const hb_face_t *face, hb_tag_t tag)
     * }
     */
    public static MemorySegment hb_face_reference_table(MemorySegment face, int tag) {
        var mh$ = hb_face_reference_table.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_reference_table", face, tag);
            }
            return (MemorySegment)mh$.invokeExact(face, tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_reference_blob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_reference_blob"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_face_reference_blob(hb_face_t *face)
     * }
     */
    public static FunctionDescriptor hb_face_reference_blob$descriptor() {
        return hb_face_reference_blob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_blob_t *hb_face_reference_blob(hb_face_t *face)
     * }
     */
    public static MethodHandle hb_face_reference_blob$handle() {
        return hb_face_reference_blob.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_blob_t *hb_face_reference_blob(hb_face_t *face)
     * }
     */
    public static MemorySegment hb_face_reference_blob(MemorySegment face) {
        var mh$ = hb_face_reference_blob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_reference_blob", face);
            }
            return (MemorySegment)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_set_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_set_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_face_set_index(hb_face_t *face, unsigned int index)
     * }
     */
    public static FunctionDescriptor hb_face_set_index$descriptor() {
        return hb_face_set_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_face_set_index(hb_face_t *face, unsigned int index)
     * }
     */
    public static MethodHandle hb_face_set_index$handle() {
        return hb_face_set_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_face_set_index(hb_face_t *face, unsigned int index)
     * }
     */
    public static void hb_face_set_index(MemorySegment face, int index) {
        var mh$ = hb_face_set_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_set_index", face, index);
            }
            mh$.invokeExact(face, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_get_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_get_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_index(const hb_face_t *face)
     * }
     */
    public static FunctionDescriptor hb_face_get_index$descriptor() {
        return hb_face_get_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_index(const hb_face_t *face)
     * }
     */
    public static MethodHandle hb_face_get_index$handle() {
        return hb_face_get_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_index(const hb_face_t *face)
     * }
     */
    public static int hb_face_get_index(MemorySegment face) {
        var mh$ = hb_face_get_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_get_index", face);
            }
            return (int)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_set_upem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_set_upem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_face_set_upem(hb_face_t *face, unsigned int upem)
     * }
     */
    public static FunctionDescriptor hb_face_set_upem$descriptor() {
        return hb_face_set_upem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_face_set_upem(hb_face_t *face, unsigned int upem)
     * }
     */
    public static MethodHandle hb_face_set_upem$handle() {
        return hb_face_set_upem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_face_set_upem(hb_face_t *face, unsigned int upem)
     * }
     */
    public static void hb_face_set_upem(MemorySegment face, int upem) {
        var mh$ = hb_face_set_upem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_set_upem", face, upem);
            }
            mh$.invokeExact(face, upem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_get_upem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_get_upem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_upem(const hb_face_t *face)
     * }
     */
    public static FunctionDescriptor hb_face_get_upem$descriptor() {
        return hb_face_get_upem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_upem(const hb_face_t *face)
     * }
     */
    public static MethodHandle hb_face_get_upem$handle() {
        return hb_face_get_upem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_upem(const hb_face_t *face)
     * }
     */
    public static int hb_face_get_upem(MemorySegment face) {
        var mh$ = hb_face_get_upem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_get_upem", face);
            }
            return (int)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_set_glyph_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_set_glyph_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_face_set_glyph_count(hb_face_t *face, unsigned int glyph_count)
     * }
     */
    public static FunctionDescriptor hb_face_set_glyph_count$descriptor() {
        return hb_face_set_glyph_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_face_set_glyph_count(hb_face_t *face, unsigned int glyph_count)
     * }
     */
    public static MethodHandle hb_face_set_glyph_count$handle() {
        return hb_face_set_glyph_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_face_set_glyph_count(hb_face_t *face, unsigned int glyph_count)
     * }
     */
    public static void hb_face_set_glyph_count(MemorySegment face, int glyph_count) {
        var mh$ = hb_face_set_glyph_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_set_glyph_count", face, glyph_count);
            }
            mh$.invokeExact(face, glyph_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_get_glyph_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_get_glyph_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_glyph_count(const hb_face_t *face)
     * }
     */
    public static FunctionDescriptor hb_face_get_glyph_count$descriptor() {
        return hb_face_get_glyph_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_glyph_count(const hb_face_t *face)
     * }
     */
    public static MethodHandle hb_face_get_glyph_count$handle() {
        return hb_face_get_glyph_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_glyph_count(const hb_face_t *face)
     * }
     */
    public static int hb_face_get_glyph_count(MemorySegment face) {
        var mh$ = hb_face_get_glyph_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_get_glyph_count", face);
            }
            return (int)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_get_table_tags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_get_table_tags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_table_tags(const hb_face_t *face, unsigned int start_offset, unsigned int *table_count, hb_tag_t *table_tags)
     * }
     */
    public static FunctionDescriptor hb_face_get_table_tags$descriptor() {
        return hb_face_get_table_tags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_table_tags(const hb_face_t *face, unsigned int start_offset, unsigned int *table_count, hb_tag_t *table_tags)
     * }
     */
    public static MethodHandle hb_face_get_table_tags$handle() {
        return hb_face_get_table_tags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_face_get_table_tags(const hb_face_t *face, unsigned int start_offset, unsigned int *table_count, hb_tag_t *table_tags)
     * }
     */
    public static int hb_face_get_table_tags(MemorySegment face, int start_offset, MemorySegment table_count, MemorySegment table_tags) {
        var mh$ = hb_face_get_table_tags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_get_table_tags", face, start_offset, table_count, table_tags);
            }
            return (int)mh$.invokeExact(face, start_offset, table_count, table_tags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_collect_unicodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_collect_unicodes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_face_collect_unicodes(hb_face_t *face, hb_set_t *out)
     * }
     */
    public static FunctionDescriptor hb_face_collect_unicodes$descriptor() {
        return hb_face_collect_unicodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_face_collect_unicodes(hb_face_t *face, hb_set_t *out)
     * }
     */
    public static MethodHandle hb_face_collect_unicodes$handle() {
        return hb_face_collect_unicodes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_face_collect_unicodes(hb_face_t *face, hb_set_t *out)
     * }
     */
    public static void hb_face_collect_unicodes(MemorySegment face, MemorySegment out) {
        var mh$ = hb_face_collect_unicodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_collect_unicodes", face, out);
            }
            mh$.invokeExact(face, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_collect_nominal_glyph_mapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_collect_nominal_glyph_mapping"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_face_collect_nominal_glyph_mapping(hb_face_t *face, hb_map_t *mapping, hb_set_t *unicodes)
     * }
     */
    public static FunctionDescriptor hb_face_collect_nominal_glyph_mapping$descriptor() {
        return hb_face_collect_nominal_glyph_mapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_face_collect_nominal_glyph_mapping(hb_face_t *face, hb_map_t *mapping, hb_set_t *unicodes)
     * }
     */
    public static MethodHandle hb_face_collect_nominal_glyph_mapping$handle() {
        return hb_face_collect_nominal_glyph_mapping.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_face_collect_nominal_glyph_mapping(hb_face_t *face, hb_map_t *mapping, hb_set_t *unicodes)
     * }
     */
    public static void hb_face_collect_nominal_glyph_mapping(MemorySegment face, MemorySegment mapping, MemorySegment unicodes) {
        var mh$ = hb_face_collect_nominal_glyph_mapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_collect_nominal_glyph_mapping", face, mapping, unicodes);
            }
            mh$.invokeExact(face, mapping, unicodes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_collect_variation_selectors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_collect_variation_selectors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_face_collect_variation_selectors(hb_face_t *face, hb_set_t *out)
     * }
     */
    public static FunctionDescriptor hb_face_collect_variation_selectors$descriptor() {
        return hb_face_collect_variation_selectors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_face_collect_variation_selectors(hb_face_t *face, hb_set_t *out)
     * }
     */
    public static MethodHandle hb_face_collect_variation_selectors$handle() {
        return hb_face_collect_variation_selectors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_face_collect_variation_selectors(hb_face_t *face, hb_set_t *out)
     * }
     */
    public static void hb_face_collect_variation_selectors(MemorySegment face, MemorySegment out) {
        var mh$ = hb_face_collect_variation_selectors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_collect_variation_selectors", face, out);
            }
            mh$.invokeExact(face, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_collect_variation_unicodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_collect_variation_unicodes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_face_collect_variation_unicodes(hb_face_t *face, hb_codepoint_t variation_selector, hb_set_t *out)
     * }
     */
    public static FunctionDescriptor hb_face_collect_variation_unicodes$descriptor() {
        return hb_face_collect_variation_unicodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_face_collect_variation_unicodes(hb_face_t *face, hb_codepoint_t variation_selector, hb_set_t *out)
     * }
     */
    public static MethodHandle hb_face_collect_variation_unicodes$handle() {
        return hb_face_collect_variation_unicodes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_face_collect_variation_unicodes(hb_face_t *face, hb_codepoint_t variation_selector, hb_set_t *out)
     * }
     */
    public static void hb_face_collect_variation_unicodes(MemorySegment face, int variation_selector, MemorySegment out) {
        var mh$ = hb_face_collect_variation_unicodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_collect_variation_unicodes", face, variation_selector, out);
            }
            mh$.invokeExact(face, variation_selector, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_builder_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_builder_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_builder_create()
     * }
     */
    public static FunctionDescriptor hb_face_builder_create$descriptor() {
        return hb_face_builder_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_builder_create()
     * }
     */
    public static MethodHandle hb_face_builder_create$handle() {
        return hb_face_builder_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_face_t *hb_face_builder_create()
     * }
     */
    public static MemorySegment hb_face_builder_create() {
        var mh$ = hb_face_builder_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_builder_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_builder_add_table {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_builder_add_table"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_face_builder_add_table(hb_face_t *face, hb_tag_t tag, hb_blob_t *blob)
     * }
     */
    public static FunctionDescriptor hb_face_builder_add_table$descriptor() {
        return hb_face_builder_add_table.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_face_builder_add_table(hb_face_t *face, hb_tag_t tag, hb_blob_t *blob)
     * }
     */
    public static MethodHandle hb_face_builder_add_table$handle() {
        return hb_face_builder_add_table.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_face_builder_add_table(hb_face_t *face, hb_tag_t tag, hb_blob_t *blob)
     * }
     */
    public static int hb_face_builder_add_table(MemorySegment face, int tag, MemorySegment blob) {
        var mh$ = hb_face_builder_add_table.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_builder_add_table", face, tag, blob);
            }
            return (int)mh$.invokeExact(face, tag, blob);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_face_builder_sort_tables {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_face_builder_sort_tables"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_face_builder_sort_tables(hb_face_t *face, const hb_tag_t *tags)
     * }
     */
    public static FunctionDescriptor hb_face_builder_sort_tables$descriptor() {
        return hb_face_builder_sort_tables.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_face_builder_sort_tables(hb_face_t *face, const hb_tag_t *tags)
     * }
     */
    public static MethodHandle hb_face_builder_sort_tables$handle() {
        return hb_face_builder_sort_tables.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_face_builder_sort_tables(hb_face_t *face, const hb_tag_t *tags)
     * }
     */
    public static void hb_face_builder_sort_tables(MemorySegment face, MemorySegment tags) {
        var mh$ = hb_face_builder_sort_tables.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_face_builder_sort_tables", face, tags);
            }
            mh$.invokeExact(face, tags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_set_move_to_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_set_move_to_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_move_to_func(hb_draw_funcs_t *dfuncs, hb_draw_move_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_set_move_to_func$descriptor() {
        return hb_draw_funcs_set_move_to_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_move_to_func(hb_draw_funcs_t *dfuncs, hb_draw_move_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_draw_funcs_set_move_to_func$handle() {
        return hb_draw_funcs_set_move_to_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_move_to_func(hb_draw_funcs_t *dfuncs, hb_draw_move_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_draw_funcs_set_move_to_func(MemorySegment dfuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_draw_funcs_set_move_to_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_set_move_to_func", dfuncs, func, user_data, destroy);
            }
            mh$.invokeExact(dfuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_set_line_to_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_set_line_to_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_line_to_func(hb_draw_funcs_t *dfuncs, hb_draw_line_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_set_line_to_func$descriptor() {
        return hb_draw_funcs_set_line_to_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_line_to_func(hb_draw_funcs_t *dfuncs, hb_draw_line_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_draw_funcs_set_line_to_func$handle() {
        return hb_draw_funcs_set_line_to_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_line_to_func(hb_draw_funcs_t *dfuncs, hb_draw_line_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_draw_funcs_set_line_to_func(MemorySegment dfuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_draw_funcs_set_line_to_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_set_line_to_func", dfuncs, func, user_data, destroy);
            }
            mh$.invokeExact(dfuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_set_quadratic_to_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_set_quadratic_to_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_quadratic_to_func(hb_draw_funcs_t *dfuncs, hb_draw_quadratic_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_set_quadratic_to_func$descriptor() {
        return hb_draw_funcs_set_quadratic_to_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_quadratic_to_func(hb_draw_funcs_t *dfuncs, hb_draw_quadratic_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_draw_funcs_set_quadratic_to_func$handle() {
        return hb_draw_funcs_set_quadratic_to_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_quadratic_to_func(hb_draw_funcs_t *dfuncs, hb_draw_quadratic_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_draw_funcs_set_quadratic_to_func(MemorySegment dfuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_draw_funcs_set_quadratic_to_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_set_quadratic_to_func", dfuncs, func, user_data, destroy);
            }
            mh$.invokeExact(dfuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_set_cubic_to_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_set_cubic_to_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_cubic_to_func(hb_draw_funcs_t *dfuncs, hb_draw_cubic_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_set_cubic_to_func$descriptor() {
        return hb_draw_funcs_set_cubic_to_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_cubic_to_func(hb_draw_funcs_t *dfuncs, hb_draw_cubic_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_draw_funcs_set_cubic_to_func$handle() {
        return hb_draw_funcs_set_cubic_to_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_cubic_to_func(hb_draw_funcs_t *dfuncs, hb_draw_cubic_to_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_draw_funcs_set_cubic_to_func(MemorySegment dfuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_draw_funcs_set_cubic_to_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_set_cubic_to_func", dfuncs, func, user_data, destroy);
            }
            mh$.invokeExact(dfuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_set_close_path_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_set_close_path_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_close_path_func(hb_draw_funcs_t *dfuncs, hb_draw_close_path_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_set_close_path_func$descriptor() {
        return hb_draw_funcs_set_close_path_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_close_path_func(hb_draw_funcs_t *dfuncs, hb_draw_close_path_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_draw_funcs_set_close_path_func$handle() {
        return hb_draw_funcs_set_close_path_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_funcs_set_close_path_func(hb_draw_funcs_t *dfuncs, hb_draw_close_path_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_draw_funcs_set_close_path_func(MemorySegment dfuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_draw_funcs_set_close_path_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_set_close_path_func", dfuncs, func, user_data, destroy);
            }
            mh$.invokeExact(dfuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_draw_funcs_t *hb_draw_funcs_create()
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_create$descriptor() {
        return hb_draw_funcs_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_draw_funcs_t *hb_draw_funcs_create()
     * }
     */
    public static MethodHandle hb_draw_funcs_create$handle() {
        return hb_draw_funcs_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_draw_funcs_t *hb_draw_funcs_create()
     * }
     */
    public static MemorySegment hb_draw_funcs_create() {
        var mh$ = hb_draw_funcs_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_draw_funcs_t *hb_draw_funcs_get_empty()
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_get_empty$descriptor() {
        return hb_draw_funcs_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_draw_funcs_t *hb_draw_funcs_get_empty()
     * }
     */
    public static MethodHandle hb_draw_funcs_get_empty$handle() {
        return hb_draw_funcs_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_draw_funcs_t *hb_draw_funcs_get_empty()
     * }
     */
    public static MemorySegment hb_draw_funcs_get_empty() {
        var mh$ = hb_draw_funcs_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_draw_funcs_t *hb_draw_funcs_reference(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_reference$descriptor() {
        return hb_draw_funcs_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_draw_funcs_t *hb_draw_funcs_reference(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static MethodHandle hb_draw_funcs_reference$handle() {
        return hb_draw_funcs_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_draw_funcs_t *hb_draw_funcs_reference(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static MemorySegment hb_draw_funcs_reference(MemorySegment dfuncs) {
        var mh$ = hb_draw_funcs_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_reference", dfuncs);
            }
            return (MemorySegment)mh$.invokeExact(dfuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_destroy(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_destroy$descriptor() {
        return hb_draw_funcs_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_destroy(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static MethodHandle hb_draw_funcs_destroy$handle() {
        return hb_draw_funcs_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_funcs_destroy(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static void hb_draw_funcs_destroy(MemorySegment dfuncs) {
        var mh$ = hb_draw_funcs_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_destroy", dfuncs);
            }
            mh$.invokeExact(dfuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_draw_funcs_set_user_data(hb_draw_funcs_t *dfuncs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_set_user_data$descriptor() {
        return hb_draw_funcs_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_draw_funcs_set_user_data(hb_draw_funcs_t *dfuncs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_draw_funcs_set_user_data$handle() {
        return hb_draw_funcs_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_draw_funcs_set_user_data(hb_draw_funcs_t *dfuncs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_draw_funcs_set_user_data(MemorySegment dfuncs, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_draw_funcs_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_set_user_data", dfuncs, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(dfuncs, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_draw_funcs_get_user_data(const hb_draw_funcs_t *dfuncs, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_get_user_data$descriptor() {
        return hb_draw_funcs_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_draw_funcs_get_user_data(const hb_draw_funcs_t *dfuncs, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_draw_funcs_get_user_data$handle() {
        return hb_draw_funcs_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_draw_funcs_get_user_data(const hb_draw_funcs_t *dfuncs, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_draw_funcs_get_user_data(MemorySegment dfuncs, MemorySegment key) {
        var mh$ = hb_draw_funcs_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_get_user_data", dfuncs, key);
            }
            return (MemorySegment)mh$.invokeExact(dfuncs, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_make_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_make_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_make_immutable(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_make_immutable$descriptor() {
        return hb_draw_funcs_make_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_funcs_make_immutable(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static MethodHandle hb_draw_funcs_make_immutable$handle() {
        return hb_draw_funcs_make_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_funcs_make_immutable(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static void hb_draw_funcs_make_immutable(MemorySegment dfuncs) {
        var mh$ = hb_draw_funcs_make_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_make_immutable", dfuncs);
            }
            mh$.invokeExact(dfuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_funcs_is_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_funcs_is_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_draw_funcs_is_immutable(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static FunctionDescriptor hb_draw_funcs_is_immutable$descriptor() {
        return hb_draw_funcs_is_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_draw_funcs_is_immutable(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static MethodHandle hb_draw_funcs_is_immutable$handle() {
        return hb_draw_funcs_is_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_draw_funcs_is_immutable(hb_draw_funcs_t *dfuncs)
     * }
     */
    public static int hb_draw_funcs_is_immutable(MemorySegment dfuncs) {
        var mh$ = hb_draw_funcs_is_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_funcs_is_immutable", dfuncs);
            }
            return (int)mh$.invokeExact(dfuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_move_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_move_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_move_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float to_x, float to_y)
     * }
     */
    public static FunctionDescriptor hb_draw_move_to$descriptor() {
        return hb_draw_move_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_move_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float to_x, float to_y)
     * }
     */
    public static MethodHandle hb_draw_move_to$handle() {
        return hb_draw_move_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_move_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float to_x, float to_y)
     * }
     */
    public static void hb_draw_move_to(MemorySegment dfuncs, MemorySegment draw_data, MemorySegment st, float to_x, float to_y) {
        var mh$ = hb_draw_move_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_move_to", dfuncs, draw_data, st, to_x, to_y);
            }
            mh$.invokeExact(dfuncs, draw_data, st, to_x, to_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_line_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_line_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_line_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float to_x, float to_y)
     * }
     */
    public static FunctionDescriptor hb_draw_line_to$descriptor() {
        return hb_draw_line_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_line_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float to_x, float to_y)
     * }
     */
    public static MethodHandle hb_draw_line_to$handle() {
        return hb_draw_line_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_line_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float to_x, float to_y)
     * }
     */
    public static void hb_draw_line_to(MemorySegment dfuncs, MemorySegment draw_data, MemorySegment st, float to_x, float to_y) {
        var mh$ = hb_draw_line_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_line_to", dfuncs, draw_data, st, to_x, to_y);
            }
            mh$.invokeExact(dfuncs, draw_data, st, to_x, to_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_quadratic_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_quadratic_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_quadratic_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float control_x, float control_y, float to_x, float to_y)
     * }
     */
    public static FunctionDescriptor hb_draw_quadratic_to$descriptor() {
        return hb_draw_quadratic_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_quadratic_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float control_x, float control_y, float to_x, float to_y)
     * }
     */
    public static MethodHandle hb_draw_quadratic_to$handle() {
        return hb_draw_quadratic_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_quadratic_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float control_x, float control_y, float to_x, float to_y)
     * }
     */
    public static void hb_draw_quadratic_to(MemorySegment dfuncs, MemorySegment draw_data, MemorySegment st, float control_x, float control_y, float to_x, float to_y) {
        var mh$ = hb_draw_quadratic_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_quadratic_to", dfuncs, draw_data, st, control_x, control_y, to_x, to_y);
            }
            mh$.invokeExact(dfuncs, draw_data, st, control_x, control_y, to_x, to_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_cubic_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_cubic_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_cubic_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float control1_x, float control1_y, float control2_x, float control2_y, float to_x, float to_y)
     * }
     */
    public static FunctionDescriptor hb_draw_cubic_to$descriptor() {
        return hb_draw_cubic_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_cubic_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float control1_x, float control1_y, float control2_x, float control2_y, float to_x, float to_y)
     * }
     */
    public static MethodHandle hb_draw_cubic_to$handle() {
        return hb_draw_cubic_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_cubic_to(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st, float control1_x, float control1_y, float control2_x, float control2_y, float to_x, float to_y)
     * }
     */
    public static void hb_draw_cubic_to(MemorySegment dfuncs, MemorySegment draw_data, MemorySegment st, float control1_x, float control1_y, float control2_x, float control2_y, float to_x, float to_y) {
        var mh$ = hb_draw_cubic_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_cubic_to", dfuncs, draw_data, st, control1_x, control1_y, control2_x, control2_y, to_x, to_y);
            }
            mh$.invokeExact(dfuncs, draw_data, st, control1_x, control1_y, control2_x, control2_y, to_x, to_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_draw_close_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_draw_close_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_draw_close_path(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st)
     * }
     */
    public static FunctionDescriptor hb_draw_close_path$descriptor() {
        return hb_draw_close_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_draw_close_path(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st)
     * }
     */
    public static MethodHandle hb_draw_close_path$handle() {
        return hb_draw_close_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_draw_close_path(hb_draw_funcs_t *dfuncs, void *draw_data, hb_draw_state_t *st)
     * }
     */
    public static void hb_draw_close_path(MemorySegment dfuncs, MemorySegment draw_data, MemorySegment st) {
        var mh$ = hb_draw_close_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_draw_close_path", dfuncs, draw_data, st);
            }
            mh$.invokeExact(dfuncs, draw_data, st);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_paint_funcs_t *hb_paint_funcs_create()
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_create$descriptor() {
        return hb_paint_funcs_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_paint_funcs_t *hb_paint_funcs_create()
     * }
     */
    public static MethodHandle hb_paint_funcs_create$handle() {
        return hb_paint_funcs_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_paint_funcs_t *hb_paint_funcs_create()
     * }
     */
    public static MemorySegment hb_paint_funcs_create() {
        var mh$ = hb_paint_funcs_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_paint_funcs_t *hb_paint_funcs_get_empty()
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_get_empty$descriptor() {
        return hb_paint_funcs_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_paint_funcs_t *hb_paint_funcs_get_empty()
     * }
     */
    public static MethodHandle hb_paint_funcs_get_empty$handle() {
        return hb_paint_funcs_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_paint_funcs_t *hb_paint_funcs_get_empty()
     * }
     */
    public static MemorySegment hb_paint_funcs_get_empty() {
        var mh$ = hb_paint_funcs_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_paint_funcs_t *hb_paint_funcs_reference(hb_paint_funcs_t *funcs)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_reference$descriptor() {
        return hb_paint_funcs_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_paint_funcs_t *hb_paint_funcs_reference(hb_paint_funcs_t *funcs)
     * }
     */
    public static MethodHandle hb_paint_funcs_reference$handle() {
        return hb_paint_funcs_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_paint_funcs_t *hb_paint_funcs_reference(hb_paint_funcs_t *funcs)
     * }
     */
    public static MemorySegment hb_paint_funcs_reference(MemorySegment funcs) {
        var mh$ = hb_paint_funcs_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_reference", funcs);
            }
            return (MemorySegment)mh$.invokeExact(funcs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_destroy(hb_paint_funcs_t *funcs)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_destroy$descriptor() {
        return hb_paint_funcs_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_destroy(hb_paint_funcs_t *funcs)
     * }
     */
    public static MethodHandle hb_paint_funcs_destroy$handle() {
        return hb_paint_funcs_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_destroy(hb_paint_funcs_t *funcs)
     * }
     */
    public static void hb_paint_funcs_destroy(MemorySegment funcs) {
        var mh$ = hb_paint_funcs_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_destroy", funcs);
            }
            mh$.invokeExact(funcs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_funcs_set_user_data(hb_paint_funcs_t *funcs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_user_data$descriptor() {
        return hb_paint_funcs_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_funcs_set_user_data(hb_paint_funcs_t *funcs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_user_data$handle() {
        return hb_paint_funcs_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_funcs_set_user_data(hb_paint_funcs_t *funcs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_paint_funcs_set_user_data(MemorySegment funcs, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_paint_funcs_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_user_data", funcs, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(funcs, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_paint_funcs_get_user_data(const hb_paint_funcs_t *funcs, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_get_user_data$descriptor() {
        return hb_paint_funcs_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_paint_funcs_get_user_data(const hb_paint_funcs_t *funcs, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_paint_funcs_get_user_data$handle() {
        return hb_paint_funcs_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_paint_funcs_get_user_data(const hb_paint_funcs_t *funcs, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_paint_funcs_get_user_data(MemorySegment funcs, MemorySegment key) {
        var mh$ = hb_paint_funcs_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_get_user_data", funcs, key);
            }
            return (MemorySegment)mh$.invokeExact(funcs, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_make_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_make_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_make_immutable(hb_paint_funcs_t *funcs)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_make_immutable$descriptor() {
        return hb_paint_funcs_make_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_make_immutable(hb_paint_funcs_t *funcs)
     * }
     */
    public static MethodHandle hb_paint_funcs_make_immutable$handle() {
        return hb_paint_funcs_make_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_make_immutable(hb_paint_funcs_t *funcs)
     * }
     */
    public static void hb_paint_funcs_make_immutable(MemorySegment funcs) {
        var mh$ = hb_paint_funcs_make_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_make_immutable", funcs);
            }
            mh$.invokeExact(funcs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_is_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_is_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_funcs_is_immutable(hb_paint_funcs_t *funcs)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_is_immutable$descriptor() {
        return hb_paint_funcs_is_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_funcs_is_immutable(hb_paint_funcs_t *funcs)
     * }
     */
    public static MethodHandle hb_paint_funcs_is_immutable$handle() {
        return hb_paint_funcs_is_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_funcs_is_immutable(hb_paint_funcs_t *funcs)
     * }
     */
    public static int hb_paint_funcs_is_immutable(MemorySegment funcs) {
        var mh$ = hb_paint_funcs_is_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_is_immutable", funcs);
            }
            return (int)mh$.invokeExact(funcs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_PAINT_EXTEND_PAD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_EXTEND_PAD = 0
     * }
     */
    public static int HB_PAINT_EXTEND_PAD() {
        return HB_PAINT_EXTEND_PAD;
    }
    private static final int HB_PAINT_EXTEND_REPEAT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_EXTEND_REPEAT = 1
     * }
     */
    public static int HB_PAINT_EXTEND_REPEAT() {
        return HB_PAINT_EXTEND_REPEAT;
    }
    private static final int HB_PAINT_EXTEND_REFLECT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_EXTEND_REFLECT = 2
     * }
     */
    public static int HB_PAINT_EXTEND_REFLECT() {
        return HB_PAINT_EXTEND_REFLECT;
    }

    private static class hb_color_line_get_color_stops {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_color_line_get_color_stops"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_color_line_get_color_stops(hb_color_line_t *color_line, unsigned int start, unsigned int *count, hb_color_stop_t *color_stops)
     * }
     */
    public static FunctionDescriptor hb_color_line_get_color_stops$descriptor() {
        return hb_color_line_get_color_stops.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_color_line_get_color_stops(hb_color_line_t *color_line, unsigned int start, unsigned int *count, hb_color_stop_t *color_stops)
     * }
     */
    public static MethodHandle hb_color_line_get_color_stops$handle() {
        return hb_color_line_get_color_stops.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_color_line_get_color_stops(hb_color_line_t *color_line, unsigned int start, unsigned int *count, hb_color_stop_t *color_stops)
     * }
     */
    public static int hb_color_line_get_color_stops(MemorySegment color_line, int start, MemorySegment count, MemorySegment color_stops) {
        var mh$ = hb_color_line_get_color_stops.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_color_line_get_color_stops", color_line, start, count, color_stops);
            }
            return (int)mh$.invokeExact(color_line, start, count, color_stops);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_color_line_get_extend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_color_line_get_extend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_paint_extend_t hb_color_line_get_extend(hb_color_line_t *color_line)
     * }
     */
    public static FunctionDescriptor hb_color_line_get_extend$descriptor() {
        return hb_color_line_get_extend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_paint_extend_t hb_color_line_get_extend(hb_color_line_t *color_line)
     * }
     */
    public static MethodHandle hb_color_line_get_extend$handle() {
        return hb_color_line_get_extend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_paint_extend_t hb_color_line_get_extend(hb_color_line_t *color_line)
     * }
     */
    public static int hb_color_line_get_extend(MemorySegment color_line) {
        var mh$ = hb_color_line_get_extend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_color_line_get_extend", color_line);
            }
            return (int)mh$.invokeExact(color_line);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_PAINT_COMPOSITE_MODE_CLEAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_CLEAR = 0
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_CLEAR() {
        return HB_PAINT_COMPOSITE_MODE_CLEAR;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_SRC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_SRC = 1
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_SRC() {
        return HB_PAINT_COMPOSITE_MODE_SRC;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_DEST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_DEST = 2
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_DEST() {
        return HB_PAINT_COMPOSITE_MODE_DEST;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_SRC_OVER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_SRC_OVER = 3
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_SRC_OVER() {
        return HB_PAINT_COMPOSITE_MODE_SRC_OVER;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_DEST_OVER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_DEST_OVER = 4
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_DEST_OVER() {
        return HB_PAINT_COMPOSITE_MODE_DEST_OVER;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_SRC_IN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_SRC_IN = 5
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_SRC_IN() {
        return HB_PAINT_COMPOSITE_MODE_SRC_IN;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_DEST_IN = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_DEST_IN = 6
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_DEST_IN() {
        return HB_PAINT_COMPOSITE_MODE_DEST_IN;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_SRC_OUT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_SRC_OUT = 7
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_SRC_OUT() {
        return HB_PAINT_COMPOSITE_MODE_SRC_OUT;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_DEST_OUT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_DEST_OUT = 8
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_DEST_OUT() {
        return HB_PAINT_COMPOSITE_MODE_DEST_OUT;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_SRC_ATOP = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_SRC_ATOP = 9
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_SRC_ATOP() {
        return HB_PAINT_COMPOSITE_MODE_SRC_ATOP;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_DEST_ATOP = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_DEST_ATOP = 10
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_DEST_ATOP() {
        return HB_PAINT_COMPOSITE_MODE_DEST_ATOP;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_XOR = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_XOR = 11
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_XOR() {
        return HB_PAINT_COMPOSITE_MODE_XOR;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_PLUS = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_PLUS = 12
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_PLUS() {
        return HB_PAINT_COMPOSITE_MODE_PLUS;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_SCREEN = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_SCREEN = 13
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_SCREEN() {
        return HB_PAINT_COMPOSITE_MODE_SCREEN;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_OVERLAY = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_OVERLAY = 14
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_OVERLAY() {
        return HB_PAINT_COMPOSITE_MODE_OVERLAY;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_DARKEN = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_DARKEN = 15
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_DARKEN() {
        return HB_PAINT_COMPOSITE_MODE_DARKEN;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_LIGHTEN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_LIGHTEN = 16
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_LIGHTEN() {
        return HB_PAINT_COMPOSITE_MODE_LIGHTEN;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_COLOR_DODGE = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_COLOR_DODGE = 17
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_COLOR_DODGE() {
        return HB_PAINT_COMPOSITE_MODE_COLOR_DODGE;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_COLOR_BURN = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_COLOR_BURN = 18
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_COLOR_BURN() {
        return HB_PAINT_COMPOSITE_MODE_COLOR_BURN;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_HARD_LIGHT = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_HARD_LIGHT = 19
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_HARD_LIGHT() {
        return HB_PAINT_COMPOSITE_MODE_HARD_LIGHT;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_SOFT_LIGHT = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_SOFT_LIGHT = 20
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_SOFT_LIGHT() {
        return HB_PAINT_COMPOSITE_MODE_SOFT_LIGHT;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_DIFFERENCE = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_DIFFERENCE = 21
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_DIFFERENCE() {
        return HB_PAINT_COMPOSITE_MODE_DIFFERENCE;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_EXCLUSION = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_EXCLUSION = 22
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_EXCLUSION() {
        return HB_PAINT_COMPOSITE_MODE_EXCLUSION;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_MULTIPLY = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_MULTIPLY = 23
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_MULTIPLY() {
        return HB_PAINT_COMPOSITE_MODE_MULTIPLY;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_HSL_HUE = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_HSL_HUE = 24
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_HSL_HUE() {
        return HB_PAINT_COMPOSITE_MODE_HSL_HUE;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_HSL_SATURATION = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_HSL_SATURATION = 25
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_HSL_SATURATION() {
        return HB_PAINT_COMPOSITE_MODE_HSL_SATURATION;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_HSL_COLOR = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_HSL_COLOR = 26
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_HSL_COLOR() {
        return HB_PAINT_COMPOSITE_MODE_HSL_COLOR;
    }
    private static final int HB_PAINT_COMPOSITE_MODE_HSL_LUMINOSITY = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_PAINT_COMPOSITE_MODE_HSL_LUMINOSITY = 27
     * }
     */
    public static int HB_PAINT_COMPOSITE_MODE_HSL_LUMINOSITY() {
        return HB_PAINT_COMPOSITE_MODE_HSL_LUMINOSITY;
    }

    private static class hb_paint_funcs_set_push_transform_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_push_transform_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_transform_func(hb_paint_funcs_t *funcs, hb_paint_push_transform_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_push_transform_func$descriptor() {
        return hb_paint_funcs_set_push_transform_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_transform_func(hb_paint_funcs_t *funcs, hb_paint_push_transform_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_push_transform_func$handle() {
        return hb_paint_funcs_set_push_transform_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_transform_func(hb_paint_funcs_t *funcs, hb_paint_push_transform_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_push_transform_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_push_transform_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_push_transform_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_pop_transform_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_pop_transform_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_pop_transform_func(hb_paint_funcs_t *funcs, hb_paint_pop_transform_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_pop_transform_func$descriptor() {
        return hb_paint_funcs_set_pop_transform_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_pop_transform_func(hb_paint_funcs_t *funcs, hb_paint_pop_transform_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_pop_transform_func$handle() {
        return hb_paint_funcs_set_pop_transform_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_pop_transform_func(hb_paint_funcs_t *funcs, hb_paint_pop_transform_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_pop_transform_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_pop_transform_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_pop_transform_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_color_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_color_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_color_glyph_func(hb_paint_funcs_t *funcs, hb_paint_color_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_color_glyph_func$descriptor() {
        return hb_paint_funcs_set_color_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_color_glyph_func(hb_paint_funcs_t *funcs, hb_paint_color_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_color_glyph_func$handle() {
        return hb_paint_funcs_set_color_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_color_glyph_func(hb_paint_funcs_t *funcs, hb_paint_color_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_color_glyph_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_color_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_color_glyph_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_push_clip_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_push_clip_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_clip_glyph_func(hb_paint_funcs_t *funcs, hb_paint_push_clip_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_push_clip_glyph_func$descriptor() {
        return hb_paint_funcs_set_push_clip_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_clip_glyph_func(hb_paint_funcs_t *funcs, hb_paint_push_clip_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_push_clip_glyph_func$handle() {
        return hb_paint_funcs_set_push_clip_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_clip_glyph_func(hb_paint_funcs_t *funcs, hb_paint_push_clip_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_push_clip_glyph_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_push_clip_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_push_clip_glyph_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_push_clip_rectangle_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_push_clip_rectangle_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_clip_rectangle_func(hb_paint_funcs_t *funcs, hb_paint_push_clip_rectangle_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_push_clip_rectangle_func$descriptor() {
        return hb_paint_funcs_set_push_clip_rectangle_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_clip_rectangle_func(hb_paint_funcs_t *funcs, hb_paint_push_clip_rectangle_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_push_clip_rectangle_func$handle() {
        return hb_paint_funcs_set_push_clip_rectangle_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_clip_rectangle_func(hb_paint_funcs_t *funcs, hb_paint_push_clip_rectangle_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_push_clip_rectangle_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_push_clip_rectangle_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_push_clip_rectangle_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_pop_clip_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_pop_clip_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_pop_clip_func(hb_paint_funcs_t *funcs, hb_paint_pop_clip_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_pop_clip_func$descriptor() {
        return hb_paint_funcs_set_pop_clip_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_pop_clip_func(hb_paint_funcs_t *funcs, hb_paint_pop_clip_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_pop_clip_func$handle() {
        return hb_paint_funcs_set_pop_clip_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_pop_clip_func(hb_paint_funcs_t *funcs, hb_paint_pop_clip_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_pop_clip_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_pop_clip_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_pop_clip_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_color_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_color_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_color_func(hb_paint_funcs_t *funcs, hb_paint_color_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_color_func$descriptor() {
        return hb_paint_funcs_set_color_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_color_func(hb_paint_funcs_t *funcs, hb_paint_color_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_color_func$handle() {
        return hb_paint_funcs_set_color_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_color_func(hb_paint_funcs_t *funcs, hb_paint_color_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_color_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_color_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_color_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_image_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_image_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_image_func(hb_paint_funcs_t *funcs, hb_paint_image_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_image_func$descriptor() {
        return hb_paint_funcs_set_image_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_image_func(hb_paint_funcs_t *funcs, hb_paint_image_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_image_func$handle() {
        return hb_paint_funcs_set_image_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_image_func(hb_paint_funcs_t *funcs, hb_paint_image_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_image_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_image_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_image_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_linear_gradient_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_linear_gradient_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_linear_gradient_func(hb_paint_funcs_t *funcs, hb_paint_linear_gradient_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_linear_gradient_func$descriptor() {
        return hb_paint_funcs_set_linear_gradient_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_linear_gradient_func(hb_paint_funcs_t *funcs, hb_paint_linear_gradient_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_linear_gradient_func$handle() {
        return hb_paint_funcs_set_linear_gradient_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_linear_gradient_func(hb_paint_funcs_t *funcs, hb_paint_linear_gradient_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_linear_gradient_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_linear_gradient_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_linear_gradient_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_radial_gradient_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_radial_gradient_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_radial_gradient_func(hb_paint_funcs_t *funcs, hb_paint_radial_gradient_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_radial_gradient_func$descriptor() {
        return hb_paint_funcs_set_radial_gradient_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_radial_gradient_func(hb_paint_funcs_t *funcs, hb_paint_radial_gradient_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_radial_gradient_func$handle() {
        return hb_paint_funcs_set_radial_gradient_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_radial_gradient_func(hb_paint_funcs_t *funcs, hb_paint_radial_gradient_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_radial_gradient_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_radial_gradient_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_radial_gradient_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_sweep_gradient_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_sweep_gradient_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_sweep_gradient_func(hb_paint_funcs_t *funcs, hb_paint_sweep_gradient_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_sweep_gradient_func$descriptor() {
        return hb_paint_funcs_set_sweep_gradient_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_sweep_gradient_func(hb_paint_funcs_t *funcs, hb_paint_sweep_gradient_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_sweep_gradient_func$handle() {
        return hb_paint_funcs_set_sweep_gradient_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_sweep_gradient_func(hb_paint_funcs_t *funcs, hb_paint_sweep_gradient_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_sweep_gradient_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_sweep_gradient_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_sweep_gradient_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_push_group_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_push_group_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_group_func(hb_paint_funcs_t *funcs, hb_paint_push_group_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_push_group_func$descriptor() {
        return hb_paint_funcs_set_push_group_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_group_func(hb_paint_funcs_t *funcs, hb_paint_push_group_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_push_group_func$handle() {
        return hb_paint_funcs_set_push_group_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_push_group_func(hb_paint_funcs_t *funcs, hb_paint_push_group_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_push_group_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_push_group_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_push_group_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_pop_group_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_pop_group_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_pop_group_func(hb_paint_funcs_t *funcs, hb_paint_pop_group_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_pop_group_func$descriptor() {
        return hb_paint_funcs_set_pop_group_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_pop_group_func(hb_paint_funcs_t *funcs, hb_paint_pop_group_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_pop_group_func$handle() {
        return hb_paint_funcs_set_pop_group_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_pop_group_func(hb_paint_funcs_t *funcs, hb_paint_pop_group_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_pop_group_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_pop_group_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_pop_group_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_funcs_set_custom_palette_color_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_funcs_set_custom_palette_color_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_custom_palette_color_func(hb_paint_funcs_t *funcs, hb_paint_custom_palette_color_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_paint_funcs_set_custom_palette_color_func$descriptor() {
        return hb_paint_funcs_set_custom_palette_color_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_custom_palette_color_func(hb_paint_funcs_t *funcs, hb_paint_custom_palette_color_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_paint_funcs_set_custom_palette_color_func$handle() {
        return hb_paint_funcs_set_custom_palette_color_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_funcs_set_custom_palette_color_func(hb_paint_funcs_t *funcs, hb_paint_custom_palette_color_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_paint_funcs_set_custom_palette_color_func(MemorySegment funcs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_paint_funcs_set_custom_palette_color_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_funcs_set_custom_palette_color_func", funcs, func, user_data, destroy);
            }
            mh$.invokeExact(funcs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_push_transform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_push_transform"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_push_transform(hb_paint_funcs_t *funcs, void *paint_data, float xx, float yx, float xy, float yy, float dx, float dy)
     * }
     */
    public static FunctionDescriptor hb_paint_push_transform$descriptor() {
        return hb_paint_push_transform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_push_transform(hb_paint_funcs_t *funcs, void *paint_data, float xx, float yx, float xy, float yy, float dx, float dy)
     * }
     */
    public static MethodHandle hb_paint_push_transform$handle() {
        return hb_paint_push_transform.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_push_transform(hb_paint_funcs_t *funcs, void *paint_data, float xx, float yx, float xy, float yy, float dx, float dy)
     * }
     */
    public static void hb_paint_push_transform(MemorySegment funcs, MemorySegment paint_data, float xx, float yx, float xy, float yy, float dx, float dy) {
        var mh$ = hb_paint_push_transform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_push_transform", funcs, paint_data, xx, yx, xy, yy, dx, dy);
            }
            mh$.invokeExact(funcs, paint_data, xx, yx, xy, yy, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_pop_transform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_pop_transform"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_pop_transform(hb_paint_funcs_t *funcs, void *paint_data)
     * }
     */
    public static FunctionDescriptor hb_paint_pop_transform$descriptor() {
        return hb_paint_pop_transform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_pop_transform(hb_paint_funcs_t *funcs, void *paint_data)
     * }
     */
    public static MethodHandle hb_paint_pop_transform$handle() {
        return hb_paint_pop_transform.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_pop_transform(hb_paint_funcs_t *funcs, void *paint_data)
     * }
     */
    public static void hb_paint_pop_transform(MemorySegment funcs, MemorySegment paint_data) {
        var mh$ = hb_paint_pop_transform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_pop_transform", funcs, paint_data);
            }
            mh$.invokeExact(funcs, paint_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_color_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_color_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_color_glyph(hb_paint_funcs_t *funcs, void *paint_data, hb_codepoint_t glyph, hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_paint_color_glyph$descriptor() {
        return hb_paint_color_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_color_glyph(hb_paint_funcs_t *funcs, void *paint_data, hb_codepoint_t glyph, hb_font_t *font)
     * }
     */
    public static MethodHandle hb_paint_color_glyph$handle() {
        return hb_paint_color_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_color_glyph(hb_paint_funcs_t *funcs, void *paint_data, hb_codepoint_t glyph, hb_font_t *font)
     * }
     */
    public static int hb_paint_color_glyph(MemorySegment funcs, MemorySegment paint_data, int glyph, MemorySegment font) {
        var mh$ = hb_paint_color_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_color_glyph", funcs, paint_data, glyph, font);
            }
            return (int)mh$.invokeExact(funcs, paint_data, glyph, font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_push_clip_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_push_clip_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_push_clip_glyph(hb_paint_funcs_t *funcs, void *paint_data, hb_codepoint_t glyph, hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_paint_push_clip_glyph$descriptor() {
        return hb_paint_push_clip_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_push_clip_glyph(hb_paint_funcs_t *funcs, void *paint_data, hb_codepoint_t glyph, hb_font_t *font)
     * }
     */
    public static MethodHandle hb_paint_push_clip_glyph$handle() {
        return hb_paint_push_clip_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_push_clip_glyph(hb_paint_funcs_t *funcs, void *paint_data, hb_codepoint_t glyph, hb_font_t *font)
     * }
     */
    public static void hb_paint_push_clip_glyph(MemorySegment funcs, MemorySegment paint_data, int glyph, MemorySegment font) {
        var mh$ = hb_paint_push_clip_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_push_clip_glyph", funcs, paint_data, glyph, font);
            }
            mh$.invokeExact(funcs, paint_data, glyph, font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_push_clip_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_push_clip_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_push_clip_rectangle(hb_paint_funcs_t *funcs, void *paint_data, float xmin, float ymin, float xmax, float ymax)
     * }
     */
    public static FunctionDescriptor hb_paint_push_clip_rectangle$descriptor() {
        return hb_paint_push_clip_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_push_clip_rectangle(hb_paint_funcs_t *funcs, void *paint_data, float xmin, float ymin, float xmax, float ymax)
     * }
     */
    public static MethodHandle hb_paint_push_clip_rectangle$handle() {
        return hb_paint_push_clip_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_push_clip_rectangle(hb_paint_funcs_t *funcs, void *paint_data, float xmin, float ymin, float xmax, float ymax)
     * }
     */
    public static void hb_paint_push_clip_rectangle(MemorySegment funcs, MemorySegment paint_data, float xmin, float ymin, float xmax, float ymax) {
        var mh$ = hb_paint_push_clip_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_push_clip_rectangle", funcs, paint_data, xmin, ymin, xmax, ymax);
            }
            mh$.invokeExact(funcs, paint_data, xmin, ymin, xmax, ymax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_pop_clip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_pop_clip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_pop_clip(hb_paint_funcs_t *funcs, void *paint_data)
     * }
     */
    public static FunctionDescriptor hb_paint_pop_clip$descriptor() {
        return hb_paint_pop_clip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_pop_clip(hb_paint_funcs_t *funcs, void *paint_data)
     * }
     */
    public static MethodHandle hb_paint_pop_clip$handle() {
        return hb_paint_pop_clip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_pop_clip(hb_paint_funcs_t *funcs, void *paint_data)
     * }
     */
    public static void hb_paint_pop_clip(MemorySegment funcs, MemorySegment paint_data) {
        var mh$ = hb_paint_pop_clip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_pop_clip", funcs, paint_data);
            }
            mh$.invokeExact(funcs, paint_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_color(hb_paint_funcs_t *funcs, void *paint_data, hb_bool_t is_foreground, hb_color_t color)
     * }
     */
    public static FunctionDescriptor hb_paint_color$descriptor() {
        return hb_paint_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_color(hb_paint_funcs_t *funcs, void *paint_data, hb_bool_t is_foreground, hb_color_t color)
     * }
     */
    public static MethodHandle hb_paint_color$handle() {
        return hb_paint_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_color(hb_paint_funcs_t *funcs, void *paint_data, hb_bool_t is_foreground, hb_color_t color)
     * }
     */
    public static void hb_paint_color(MemorySegment funcs, MemorySegment paint_data, int is_foreground, int color) {
        var mh$ = hb_paint_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_color", funcs, paint_data, is_foreground, color);
            }
            mh$.invokeExact(funcs, paint_data, is_foreground, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_image(hb_paint_funcs_t *funcs, void *paint_data, hb_blob_t *image, unsigned int width, unsigned int height, hb_tag_t format, float slant, hb_glyph_extents_t *extents)
     * }
     */
    public static FunctionDescriptor hb_paint_image$descriptor() {
        return hb_paint_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_image(hb_paint_funcs_t *funcs, void *paint_data, hb_blob_t *image, unsigned int width, unsigned int height, hb_tag_t format, float slant, hb_glyph_extents_t *extents)
     * }
     */
    public static MethodHandle hb_paint_image$handle() {
        return hb_paint_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_image(hb_paint_funcs_t *funcs, void *paint_data, hb_blob_t *image, unsigned int width, unsigned int height, hb_tag_t format, float slant, hb_glyph_extents_t *extents)
     * }
     */
    public static void hb_paint_image(MemorySegment funcs, MemorySegment paint_data, MemorySegment image, int width, int height, int format, float slant, MemorySegment extents) {
        var mh$ = hb_paint_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_image", funcs, paint_data, image, width, height, format, slant, extents);
            }
            mh$.invokeExact(funcs, paint_data, image, width, height, format, slant, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_linear_gradient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_linear_gradient"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_linear_gradient(hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float x1, float y1, float x2, float y2)
     * }
     */
    public static FunctionDescriptor hb_paint_linear_gradient$descriptor() {
        return hb_paint_linear_gradient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_linear_gradient(hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float x1, float y1, float x2, float y2)
     * }
     */
    public static MethodHandle hb_paint_linear_gradient$handle() {
        return hb_paint_linear_gradient.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_linear_gradient(hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float x1, float y1, float x2, float y2)
     * }
     */
    public static void hb_paint_linear_gradient(MemorySegment funcs, MemorySegment paint_data, MemorySegment color_line, float x0, float y0, float x1, float y1, float x2, float y2) {
        var mh$ = hb_paint_linear_gradient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_linear_gradient", funcs, paint_data, color_line, x0, y0, x1, y1, x2, y2);
            }
            mh$.invokeExact(funcs, paint_data, color_line, x0, y0, x1, y1, x2, y2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_radial_gradient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_radial_gradient"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_radial_gradient(hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float r0, float x1, float y1, float r1)
     * }
     */
    public static FunctionDescriptor hb_paint_radial_gradient$descriptor() {
        return hb_paint_radial_gradient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_radial_gradient(hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float r0, float x1, float y1, float r1)
     * }
     */
    public static MethodHandle hb_paint_radial_gradient$handle() {
        return hb_paint_radial_gradient.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_radial_gradient(hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float r0, float x1, float y1, float r1)
     * }
     */
    public static void hb_paint_radial_gradient(MemorySegment funcs, MemorySegment paint_data, MemorySegment color_line, float x0, float y0, float r0, float x1, float y1, float r1) {
        var mh$ = hb_paint_radial_gradient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_radial_gradient", funcs, paint_data, color_line, x0, y0, r0, x1, y1, r1);
            }
            mh$.invokeExact(funcs, paint_data, color_line, x0, y0, r0, x1, y1, r1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_sweep_gradient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_sweep_gradient"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_sweep_gradient(hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float start_angle, float end_angle)
     * }
     */
    public static FunctionDescriptor hb_paint_sweep_gradient$descriptor() {
        return hb_paint_sweep_gradient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_sweep_gradient(hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float start_angle, float end_angle)
     * }
     */
    public static MethodHandle hb_paint_sweep_gradient$handle() {
        return hb_paint_sweep_gradient.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_sweep_gradient(hb_paint_funcs_t *funcs, void *paint_data, hb_color_line_t *color_line, float x0, float y0, float start_angle, float end_angle)
     * }
     */
    public static void hb_paint_sweep_gradient(MemorySegment funcs, MemorySegment paint_data, MemorySegment color_line, float x0, float y0, float start_angle, float end_angle) {
        var mh$ = hb_paint_sweep_gradient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_sweep_gradient", funcs, paint_data, color_line, x0, y0, start_angle, end_angle);
            }
            mh$.invokeExact(funcs, paint_data, color_line, x0, y0, start_angle, end_angle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_push_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_push_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_push_group(hb_paint_funcs_t *funcs, void *paint_data)
     * }
     */
    public static FunctionDescriptor hb_paint_push_group$descriptor() {
        return hb_paint_push_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_push_group(hb_paint_funcs_t *funcs, void *paint_data)
     * }
     */
    public static MethodHandle hb_paint_push_group$handle() {
        return hb_paint_push_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_push_group(hb_paint_funcs_t *funcs, void *paint_data)
     * }
     */
    public static void hb_paint_push_group(MemorySegment funcs, MemorySegment paint_data) {
        var mh$ = hb_paint_push_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_push_group", funcs, paint_data);
            }
            mh$.invokeExact(funcs, paint_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_pop_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_pop_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_paint_pop_group(hb_paint_funcs_t *funcs, void *paint_data, hb_paint_composite_mode_t mode)
     * }
     */
    public static FunctionDescriptor hb_paint_pop_group$descriptor() {
        return hb_paint_pop_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_paint_pop_group(hb_paint_funcs_t *funcs, void *paint_data, hb_paint_composite_mode_t mode)
     * }
     */
    public static MethodHandle hb_paint_pop_group$handle() {
        return hb_paint_pop_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_paint_pop_group(hb_paint_funcs_t *funcs, void *paint_data, hb_paint_composite_mode_t mode)
     * }
     */
    public static void hb_paint_pop_group(MemorySegment funcs, MemorySegment paint_data, int mode) {
        var mh$ = hb_paint_pop_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_pop_group", funcs, paint_data, mode);
            }
            mh$.invokeExact(funcs, paint_data, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_paint_custom_palette_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_paint_custom_palette_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_custom_palette_color(hb_paint_funcs_t *funcs, void *paint_data, unsigned int color_index, hb_color_t *color)
     * }
     */
    public static FunctionDescriptor hb_paint_custom_palette_color$descriptor() {
        return hb_paint_custom_palette_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_custom_palette_color(hb_paint_funcs_t *funcs, void *paint_data, unsigned int color_index, hb_color_t *color)
     * }
     */
    public static MethodHandle hb_paint_custom_palette_color$handle() {
        return hb_paint_custom_palette_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_paint_custom_palette_color(hb_paint_funcs_t *funcs, void *paint_data, unsigned int color_index, hb_color_t *color)
     * }
     */
    public static int hb_paint_custom_palette_color(MemorySegment funcs, MemorySegment paint_data, int color_index, MemorySegment color) {
        var mh$ = hb_paint_custom_palette_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_paint_custom_palette_color", funcs, paint_data, color_index, color);
            }
            return (int)mh$.invokeExact(funcs, paint_data, color_index, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_font_funcs_t *hb_font_funcs_create()
     * }
     */
    public static FunctionDescriptor hb_font_funcs_create$descriptor() {
        return hb_font_funcs_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_font_funcs_t *hb_font_funcs_create()
     * }
     */
    public static MethodHandle hb_font_funcs_create$handle() {
        return hb_font_funcs_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_font_funcs_t *hb_font_funcs_create()
     * }
     */
    public static MemorySegment hb_font_funcs_create() {
        var mh$ = hb_font_funcs_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_font_funcs_t *hb_font_funcs_get_empty()
     * }
     */
    public static FunctionDescriptor hb_font_funcs_get_empty$descriptor() {
        return hb_font_funcs_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_font_funcs_t *hb_font_funcs_get_empty()
     * }
     */
    public static MethodHandle hb_font_funcs_get_empty$handle() {
        return hb_font_funcs_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_font_funcs_t *hb_font_funcs_get_empty()
     * }
     */
    public static MemorySegment hb_font_funcs_get_empty() {
        var mh$ = hb_font_funcs_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_font_funcs_t *hb_font_funcs_reference(hb_font_funcs_t *ffuncs)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_reference$descriptor() {
        return hb_font_funcs_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_font_funcs_t *hb_font_funcs_reference(hb_font_funcs_t *ffuncs)
     * }
     */
    public static MethodHandle hb_font_funcs_reference$handle() {
        return hb_font_funcs_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_font_funcs_t *hb_font_funcs_reference(hb_font_funcs_t *ffuncs)
     * }
     */
    public static MemorySegment hb_font_funcs_reference(MemorySegment ffuncs) {
        var mh$ = hb_font_funcs_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_reference", ffuncs);
            }
            return (MemorySegment)mh$.invokeExact(ffuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_destroy(hb_font_funcs_t *ffuncs)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_destroy$descriptor() {
        return hb_font_funcs_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_destroy(hb_font_funcs_t *ffuncs)
     * }
     */
    public static MethodHandle hb_font_funcs_destroy$handle() {
        return hb_font_funcs_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_destroy(hb_font_funcs_t *ffuncs)
     * }
     */
    public static void hb_font_funcs_destroy(MemorySegment ffuncs) {
        var mh$ = hb_font_funcs_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_destroy", ffuncs);
            }
            mh$.invokeExact(ffuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_funcs_set_user_data(hb_font_funcs_t *ffuncs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_user_data$descriptor() {
        return hb_font_funcs_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_funcs_set_user_data(hb_font_funcs_t *ffuncs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_font_funcs_set_user_data$handle() {
        return hb_font_funcs_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_funcs_set_user_data(hb_font_funcs_t *ffuncs, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_font_funcs_set_user_data(MemorySegment ffuncs, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_font_funcs_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_user_data", ffuncs, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(ffuncs, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_font_funcs_get_user_data(const hb_font_funcs_t *ffuncs, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_get_user_data$descriptor() {
        return hb_font_funcs_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_font_funcs_get_user_data(const hb_font_funcs_t *ffuncs, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_font_funcs_get_user_data$handle() {
        return hb_font_funcs_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_font_funcs_get_user_data(const hb_font_funcs_t *ffuncs, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_font_funcs_get_user_data(MemorySegment ffuncs, MemorySegment key) {
        var mh$ = hb_font_funcs_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_get_user_data", ffuncs, key);
            }
            return (MemorySegment)mh$.invokeExact(ffuncs, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_make_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_make_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_make_immutable(hb_font_funcs_t *ffuncs)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_make_immutable$descriptor() {
        return hb_font_funcs_make_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_make_immutable(hb_font_funcs_t *ffuncs)
     * }
     */
    public static MethodHandle hb_font_funcs_make_immutable$handle() {
        return hb_font_funcs_make_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_make_immutable(hb_font_funcs_t *ffuncs)
     * }
     */
    public static void hb_font_funcs_make_immutable(MemorySegment ffuncs) {
        var mh$ = hb_font_funcs_make_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_make_immutable", ffuncs);
            }
            mh$.invokeExact(ffuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_is_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_is_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_funcs_is_immutable(hb_font_funcs_t *ffuncs)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_is_immutable$descriptor() {
        return hb_font_funcs_is_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_funcs_is_immutable(hb_font_funcs_t *ffuncs)
     * }
     */
    public static MethodHandle hb_font_funcs_is_immutable$handle() {
        return hb_font_funcs_is_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_funcs_is_immutable(hb_font_funcs_t *ffuncs)
     * }
     */
    public static int hb_font_funcs_is_immutable(MemorySegment ffuncs) {
        var mh$ = hb_font_funcs_is_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_is_immutable", ffuncs);
            }
            return (int)mh$.invokeExact(ffuncs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_font_h_extents_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_font_h_extents_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_font_h_extents_func(hb_font_funcs_t *ffuncs, hb_font_get_font_h_extents_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_font_h_extents_func$descriptor() {
        return hb_font_funcs_set_font_h_extents_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_font_h_extents_func(hb_font_funcs_t *ffuncs, hb_font_get_font_h_extents_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_font_h_extents_func$handle() {
        return hb_font_funcs_set_font_h_extents_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_font_h_extents_func(hb_font_funcs_t *ffuncs, hb_font_get_font_h_extents_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_font_h_extents_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_font_h_extents_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_font_h_extents_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_font_v_extents_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_font_v_extents_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_font_v_extents_func(hb_font_funcs_t *ffuncs, hb_font_get_font_v_extents_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_font_v_extents_func$descriptor() {
        return hb_font_funcs_set_font_v_extents_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_font_v_extents_func(hb_font_funcs_t *ffuncs, hb_font_get_font_v_extents_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_font_v_extents_func$handle() {
        return hb_font_funcs_set_font_v_extents_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_font_v_extents_func(hb_font_funcs_t *ffuncs, hb_font_get_font_v_extents_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_font_v_extents_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_font_v_extents_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_font_v_extents_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_nominal_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_nominal_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_nominal_glyph_func(hb_font_funcs_t *ffuncs, hb_font_get_nominal_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_nominal_glyph_func$descriptor() {
        return hb_font_funcs_set_nominal_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_nominal_glyph_func(hb_font_funcs_t *ffuncs, hb_font_get_nominal_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_nominal_glyph_func$handle() {
        return hb_font_funcs_set_nominal_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_nominal_glyph_func(hb_font_funcs_t *ffuncs, hb_font_get_nominal_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_nominal_glyph_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_nominal_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_nominal_glyph_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_nominal_glyphs_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_nominal_glyphs_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_nominal_glyphs_func(hb_font_funcs_t *ffuncs, hb_font_get_nominal_glyphs_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_nominal_glyphs_func$descriptor() {
        return hb_font_funcs_set_nominal_glyphs_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_nominal_glyphs_func(hb_font_funcs_t *ffuncs, hb_font_get_nominal_glyphs_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_nominal_glyphs_func$handle() {
        return hb_font_funcs_set_nominal_glyphs_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_nominal_glyphs_func(hb_font_funcs_t *ffuncs, hb_font_get_nominal_glyphs_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_nominal_glyphs_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_nominal_glyphs_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_nominal_glyphs_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_variation_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_variation_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_variation_glyph_func(hb_font_funcs_t *ffuncs, hb_font_get_variation_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_variation_glyph_func$descriptor() {
        return hb_font_funcs_set_variation_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_variation_glyph_func(hb_font_funcs_t *ffuncs, hb_font_get_variation_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_variation_glyph_func$handle() {
        return hb_font_funcs_set_variation_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_variation_glyph_func(hb_font_funcs_t *ffuncs, hb_font_get_variation_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_variation_glyph_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_variation_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_variation_glyph_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_h_advance_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_h_advance_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_advance_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_advance_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_h_advance_func$descriptor() {
        return hb_font_funcs_set_glyph_h_advance_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_advance_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_advance_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_h_advance_func$handle() {
        return hb_font_funcs_set_glyph_h_advance_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_advance_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_advance_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_h_advance_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_h_advance_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_h_advance_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_v_advance_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_v_advance_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_advance_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_advance_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_v_advance_func$descriptor() {
        return hb_font_funcs_set_glyph_v_advance_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_advance_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_advance_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_v_advance_func$handle() {
        return hb_font_funcs_set_glyph_v_advance_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_advance_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_advance_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_v_advance_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_v_advance_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_v_advance_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_h_advances_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_h_advances_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_advances_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_advances_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_h_advances_func$descriptor() {
        return hb_font_funcs_set_glyph_h_advances_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_advances_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_advances_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_h_advances_func$handle() {
        return hb_font_funcs_set_glyph_h_advances_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_advances_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_advances_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_h_advances_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_h_advances_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_h_advances_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_v_advances_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_v_advances_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_advances_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_advances_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_v_advances_func$descriptor() {
        return hb_font_funcs_set_glyph_v_advances_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_advances_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_advances_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_v_advances_func$handle() {
        return hb_font_funcs_set_glyph_v_advances_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_advances_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_advances_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_v_advances_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_v_advances_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_v_advances_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_h_origin_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_h_origin_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_origin_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_origin_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_h_origin_func$descriptor() {
        return hb_font_funcs_set_glyph_h_origin_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_origin_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_origin_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_h_origin_func$handle() {
        return hb_font_funcs_set_glyph_h_origin_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_origin_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_origin_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_h_origin_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_h_origin_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_h_origin_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_v_origin_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_v_origin_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_origin_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_origin_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_v_origin_func$descriptor() {
        return hb_font_funcs_set_glyph_v_origin_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_origin_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_origin_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_v_origin_func$handle() {
        return hb_font_funcs_set_glyph_v_origin_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_origin_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_origin_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_v_origin_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_v_origin_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_v_origin_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_h_kerning_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_h_kerning_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_kerning_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_kerning_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_h_kerning_func$descriptor() {
        return hb_font_funcs_set_glyph_h_kerning_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_kerning_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_kerning_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_h_kerning_func$handle() {
        return hb_font_funcs_set_glyph_h_kerning_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_h_kerning_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_h_kerning_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_h_kerning_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_h_kerning_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_h_kerning_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_extents_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_extents_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_extents_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_extents_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_extents_func$descriptor() {
        return hb_font_funcs_set_glyph_extents_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_extents_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_extents_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_extents_func$handle() {
        return hb_font_funcs_set_glyph_extents_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_extents_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_extents_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_extents_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_extents_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_extents_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_contour_point_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_contour_point_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_contour_point_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_contour_point_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_contour_point_func$descriptor() {
        return hb_font_funcs_set_glyph_contour_point_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_contour_point_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_contour_point_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_contour_point_func$handle() {
        return hb_font_funcs_set_glyph_contour_point_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_contour_point_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_contour_point_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_contour_point_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_contour_point_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_contour_point_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_name_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_name_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_name_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_name_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_name_func$descriptor() {
        return hb_font_funcs_set_glyph_name_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_name_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_name_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_name_func$handle() {
        return hb_font_funcs_set_glyph_name_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_name_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_name_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_name_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_name_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_name_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_from_name_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_from_name_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_from_name_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_from_name_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_from_name_func$descriptor() {
        return hb_font_funcs_set_glyph_from_name_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_from_name_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_from_name_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_from_name_func$handle() {
        return hb_font_funcs_set_glyph_from_name_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_from_name_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_from_name_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_from_name_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_from_name_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_from_name_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_draw_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_draw_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_draw_glyph_func(hb_font_funcs_t *ffuncs, hb_font_draw_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_draw_glyph_func$descriptor() {
        return hb_font_funcs_set_draw_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_draw_glyph_func(hb_font_funcs_t *ffuncs, hb_font_draw_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_draw_glyph_func$handle() {
        return hb_font_funcs_set_draw_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_draw_glyph_func(hb_font_funcs_t *ffuncs, hb_font_draw_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_draw_glyph_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_draw_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_draw_glyph_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_paint_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_paint_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_paint_glyph_func(hb_font_funcs_t *ffuncs, hb_font_paint_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_paint_glyph_func$descriptor() {
        return hb_font_funcs_set_paint_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_paint_glyph_func(hb_font_funcs_t *ffuncs, hb_font_paint_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_paint_glyph_func$handle() {
        return hb_font_funcs_set_paint_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_paint_glyph_func(hb_font_funcs_t *ffuncs, hb_font_paint_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_paint_glyph_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_paint_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_paint_glyph_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_h_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_h_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_h_extents(hb_font_t *font, hb_font_extents_t *extents)
     * }
     */
    public static FunctionDescriptor hb_font_get_h_extents$descriptor() {
        return hb_font_get_h_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_h_extents(hb_font_t *font, hb_font_extents_t *extents)
     * }
     */
    public static MethodHandle hb_font_get_h_extents$handle() {
        return hb_font_get_h_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_h_extents(hb_font_t *font, hb_font_extents_t *extents)
     * }
     */
    public static int hb_font_get_h_extents(MemorySegment font, MemorySegment extents) {
        var mh$ = hb_font_get_h_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_h_extents", font, extents);
            }
            return (int)mh$.invokeExact(font, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_v_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_v_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_v_extents(hb_font_t *font, hb_font_extents_t *extents)
     * }
     */
    public static FunctionDescriptor hb_font_get_v_extents$descriptor() {
        return hb_font_get_v_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_v_extents(hb_font_t *font, hb_font_extents_t *extents)
     * }
     */
    public static MethodHandle hb_font_get_v_extents$handle() {
        return hb_font_get_v_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_v_extents(hb_font_t *font, hb_font_extents_t *extents)
     * }
     */
    public static int hb_font_get_v_extents(MemorySegment font, MemorySegment extents) {
        var mh$ = hb_font_get_v_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_v_extents", font, extents);
            }
            return (int)mh$.invokeExact(font, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_nominal_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_nominal_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_nominal_glyph(hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t *glyph)
     * }
     */
    public static FunctionDescriptor hb_font_get_nominal_glyph$descriptor() {
        return hb_font_get_nominal_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_nominal_glyph(hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t *glyph)
     * }
     */
    public static MethodHandle hb_font_get_nominal_glyph$handle() {
        return hb_font_get_nominal_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_nominal_glyph(hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t *glyph)
     * }
     */
    public static int hb_font_get_nominal_glyph(MemorySegment font, int unicode, MemorySegment glyph) {
        var mh$ = hb_font_get_nominal_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_nominal_glyph", font, unicode, glyph);
            }
            return (int)mh$.invokeExact(font, unicode, glyph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_variation_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_variation_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_variation_glyph(hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t *glyph)
     * }
     */
    public static FunctionDescriptor hb_font_get_variation_glyph$descriptor() {
        return hb_font_get_variation_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_variation_glyph(hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t *glyph)
     * }
     */
    public static MethodHandle hb_font_get_variation_glyph$handle() {
        return hb_font_get_variation_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_variation_glyph(hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t *glyph)
     * }
     */
    public static int hb_font_get_variation_glyph(MemorySegment font, int unicode, int variation_selector, MemorySegment glyph) {
        var mh$ = hb_font_get_variation_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_variation_glyph", font, unicode, variation_selector, glyph);
            }
            return (int)mh$.invokeExact(font, unicode, variation_selector, glyph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_nominal_glyphs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_nominal_glyphs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_font_get_nominal_glyphs(hb_font_t *font, unsigned int count, const hb_codepoint_t *first_unicode, unsigned int unicode_stride, hb_codepoint_t *first_glyph, unsigned int glyph_stride)
     * }
     */
    public static FunctionDescriptor hb_font_get_nominal_glyphs$descriptor() {
        return hb_font_get_nominal_glyphs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_font_get_nominal_glyphs(hb_font_t *font, unsigned int count, const hb_codepoint_t *first_unicode, unsigned int unicode_stride, hb_codepoint_t *first_glyph, unsigned int glyph_stride)
     * }
     */
    public static MethodHandle hb_font_get_nominal_glyphs$handle() {
        return hb_font_get_nominal_glyphs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_font_get_nominal_glyphs(hb_font_t *font, unsigned int count, const hb_codepoint_t *first_unicode, unsigned int unicode_stride, hb_codepoint_t *first_glyph, unsigned int glyph_stride)
     * }
     */
    public static int hb_font_get_nominal_glyphs(MemorySegment font, int count, MemorySegment first_unicode, int unicode_stride, MemorySegment first_glyph, int glyph_stride) {
        var mh$ = hb_font_get_nominal_glyphs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_nominal_glyphs", font, count, first_unicode, unicode_stride, first_glyph, glyph_stride);
            }
            return (int)mh$.invokeExact(font, count, first_unicode, unicode_stride, first_glyph, glyph_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_h_advance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_h_advance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_h_advance(hb_font_t *font, hb_codepoint_t glyph)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_h_advance$descriptor() {
        return hb_font_get_glyph_h_advance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_h_advance(hb_font_t *font, hb_codepoint_t glyph)
     * }
     */
    public static MethodHandle hb_font_get_glyph_h_advance$handle() {
        return hb_font_get_glyph_h_advance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_h_advance(hb_font_t *font, hb_codepoint_t glyph)
     * }
     */
    public static int hb_font_get_glyph_h_advance(MemorySegment font, int glyph) {
        var mh$ = hb_font_get_glyph_h_advance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_h_advance", font, glyph);
            }
            return (int)mh$.invokeExact(font, glyph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_v_advance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_v_advance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_v_advance(hb_font_t *font, hb_codepoint_t glyph)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_v_advance$descriptor() {
        return hb_font_get_glyph_v_advance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_v_advance(hb_font_t *font, hb_codepoint_t glyph)
     * }
     */
    public static MethodHandle hb_font_get_glyph_v_advance$handle() {
        return hb_font_get_glyph_v_advance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_v_advance(hb_font_t *font, hb_codepoint_t glyph)
     * }
     */
    public static int hb_font_get_glyph_v_advance(MemorySegment font, int glyph) {
        var mh$ = hb_font_get_glyph_v_advance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_v_advance", font, glyph);
            }
            return (int)mh$.invokeExact(font, glyph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_h_advances {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_h_advances"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_h_advances(hb_font_t *font, unsigned int count, const hb_codepoint_t *first_glyph, unsigned int glyph_stride, hb_position_t *first_advance, unsigned int advance_stride)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_h_advances$descriptor() {
        return hb_font_get_glyph_h_advances.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_h_advances(hb_font_t *font, unsigned int count, const hb_codepoint_t *first_glyph, unsigned int glyph_stride, hb_position_t *first_advance, unsigned int advance_stride)
     * }
     */
    public static MethodHandle hb_font_get_glyph_h_advances$handle() {
        return hb_font_get_glyph_h_advances.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_h_advances(hb_font_t *font, unsigned int count, const hb_codepoint_t *first_glyph, unsigned int glyph_stride, hb_position_t *first_advance, unsigned int advance_stride)
     * }
     */
    public static void hb_font_get_glyph_h_advances(MemorySegment font, int count, MemorySegment first_glyph, int glyph_stride, MemorySegment first_advance, int advance_stride) {
        var mh$ = hb_font_get_glyph_h_advances.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_h_advances", font, count, first_glyph, glyph_stride, first_advance, advance_stride);
            }
            mh$.invokeExact(font, count, first_glyph, glyph_stride, first_advance, advance_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_v_advances {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_v_advances"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_v_advances(hb_font_t *font, unsigned int count, const hb_codepoint_t *first_glyph, unsigned int glyph_stride, hb_position_t *first_advance, unsigned int advance_stride)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_v_advances$descriptor() {
        return hb_font_get_glyph_v_advances.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_v_advances(hb_font_t *font, unsigned int count, const hb_codepoint_t *first_glyph, unsigned int glyph_stride, hb_position_t *first_advance, unsigned int advance_stride)
     * }
     */
    public static MethodHandle hb_font_get_glyph_v_advances$handle() {
        return hb_font_get_glyph_v_advances.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_v_advances(hb_font_t *font, unsigned int count, const hb_codepoint_t *first_glyph, unsigned int glyph_stride, hb_position_t *first_advance, unsigned int advance_stride)
     * }
     */
    public static void hb_font_get_glyph_v_advances(MemorySegment font, int count, MemorySegment first_glyph, int glyph_stride, MemorySegment first_advance, int advance_stride) {
        var mh$ = hb_font_get_glyph_v_advances.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_v_advances", font, count, first_glyph, glyph_stride, first_advance, advance_stride);
            }
            mh$.invokeExact(font, count, first_glyph, glyph_stride, first_advance, advance_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_h_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_h_origin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_h_origin(hb_font_t *font, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_h_origin$descriptor() {
        return hb_font_get_glyph_h_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_h_origin(hb_font_t *font, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static MethodHandle hb_font_get_glyph_h_origin$handle() {
        return hb_font_get_glyph_h_origin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_h_origin(hb_font_t *font, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static int hb_font_get_glyph_h_origin(MemorySegment font, int glyph, MemorySegment x, MemorySegment y) {
        var mh$ = hb_font_get_glyph_h_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_h_origin", font, glyph, x, y);
            }
            return (int)mh$.invokeExact(font, glyph, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_v_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_v_origin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_v_origin(hb_font_t *font, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_v_origin$descriptor() {
        return hb_font_get_glyph_v_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_v_origin(hb_font_t *font, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static MethodHandle hb_font_get_glyph_v_origin$handle() {
        return hb_font_get_glyph_v_origin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_v_origin(hb_font_t *font, hb_codepoint_t glyph, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static int hb_font_get_glyph_v_origin(MemorySegment font, int glyph, MemorySegment x, MemorySegment y) {
        var mh$ = hb_font_get_glyph_v_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_v_origin", font, glyph, x, y);
            }
            return (int)mh$.invokeExact(font, glyph, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_h_kerning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_h_kerning"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_h_kerning(hb_font_t *font, hb_codepoint_t left_glyph, hb_codepoint_t right_glyph)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_h_kerning$descriptor() {
        return hb_font_get_glyph_h_kerning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_h_kerning(hb_font_t *font, hb_codepoint_t left_glyph, hb_codepoint_t right_glyph)
     * }
     */
    public static MethodHandle hb_font_get_glyph_h_kerning$handle() {
        return hb_font_get_glyph_h_kerning.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_h_kerning(hb_font_t *font, hb_codepoint_t left_glyph, hb_codepoint_t right_glyph)
     * }
     */
    public static int hb_font_get_glyph_h_kerning(MemorySegment font, int left_glyph, int right_glyph) {
        var mh$ = hb_font_get_glyph_h_kerning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_h_kerning", font, left_glyph, right_glyph);
            }
            return (int)mh$.invokeExact(font, left_glyph, right_glyph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_extents(hb_font_t *font, hb_codepoint_t glyph, hb_glyph_extents_t *extents)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_extents$descriptor() {
        return hb_font_get_glyph_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_extents(hb_font_t *font, hb_codepoint_t glyph, hb_glyph_extents_t *extents)
     * }
     */
    public static MethodHandle hb_font_get_glyph_extents$handle() {
        return hb_font_get_glyph_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_extents(hb_font_t *font, hb_codepoint_t glyph, hb_glyph_extents_t *extents)
     * }
     */
    public static int hb_font_get_glyph_extents(MemorySegment font, int glyph, MemorySegment extents) {
        var mh$ = hb_font_get_glyph_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_extents", font, glyph, extents);
            }
            return (int)mh$.invokeExact(font, glyph, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_contour_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_contour_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_contour_point(hb_font_t *font, hb_codepoint_t glyph, unsigned int point_index, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_contour_point$descriptor() {
        return hb_font_get_glyph_contour_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_contour_point(hb_font_t *font, hb_codepoint_t glyph, unsigned int point_index, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static MethodHandle hb_font_get_glyph_contour_point$handle() {
        return hb_font_get_glyph_contour_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_contour_point(hb_font_t *font, hb_codepoint_t glyph, unsigned int point_index, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static int hb_font_get_glyph_contour_point(MemorySegment font, int glyph, int point_index, MemorySegment x, MemorySegment y) {
        var mh$ = hb_font_get_glyph_contour_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_contour_point", font, glyph, point_index, x, y);
            }
            return (int)mh$.invokeExact(font, glyph, point_index, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_name(hb_font_t *font, hb_codepoint_t glyph, char *name, unsigned int size)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_name$descriptor() {
        return hb_font_get_glyph_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_name(hb_font_t *font, hb_codepoint_t glyph, char *name, unsigned int size)
     * }
     */
    public static MethodHandle hb_font_get_glyph_name$handle() {
        return hb_font_get_glyph_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_name(hb_font_t *font, hb_codepoint_t glyph, char *name, unsigned int size)
     * }
     */
    public static int hb_font_get_glyph_name(MemorySegment font, int glyph, MemorySegment name, int size) {
        var mh$ = hb_font_get_glyph_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_name", font, glyph, name, size);
            }
            return (int)mh$.invokeExact(font, glyph, name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_from_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_from_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_from_name(hb_font_t *font, const char *name, int len, hb_codepoint_t *glyph)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_from_name$descriptor() {
        return hb_font_get_glyph_from_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_from_name(hb_font_t *font, const char *name, int len, hb_codepoint_t *glyph)
     * }
     */
    public static MethodHandle hb_font_get_glyph_from_name$handle() {
        return hb_font_get_glyph_from_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_from_name(hb_font_t *font, const char *name, int len, hb_codepoint_t *glyph)
     * }
     */
    public static int hb_font_get_glyph_from_name(MemorySegment font, MemorySegment name, int len, MemorySegment glyph) {
        var mh$ = hb_font_get_glyph_from_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_from_name", font, name, len, glyph);
            }
            return (int)mh$.invokeExact(font, name, len, glyph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_draw_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_draw_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_draw_glyph(hb_font_t *font, hb_codepoint_t glyph, hb_draw_funcs_t *dfuncs, void *draw_data)
     * }
     */
    public static FunctionDescriptor hb_font_draw_glyph$descriptor() {
        return hb_font_draw_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_draw_glyph(hb_font_t *font, hb_codepoint_t glyph, hb_draw_funcs_t *dfuncs, void *draw_data)
     * }
     */
    public static MethodHandle hb_font_draw_glyph$handle() {
        return hb_font_draw_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_draw_glyph(hb_font_t *font, hb_codepoint_t glyph, hb_draw_funcs_t *dfuncs, void *draw_data)
     * }
     */
    public static void hb_font_draw_glyph(MemorySegment font, int glyph, MemorySegment dfuncs, MemorySegment draw_data) {
        var mh$ = hb_font_draw_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_draw_glyph", font, glyph, dfuncs, draw_data);
            }
            mh$.invokeExact(font, glyph, dfuncs, draw_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_paint_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_paint_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_paint_glyph(hb_font_t *font, hb_codepoint_t glyph, hb_paint_funcs_t *pfuncs, void *paint_data, unsigned int palette_index, hb_color_t foreground)
     * }
     */
    public static FunctionDescriptor hb_font_paint_glyph$descriptor() {
        return hb_font_paint_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_paint_glyph(hb_font_t *font, hb_codepoint_t glyph, hb_paint_funcs_t *pfuncs, void *paint_data, unsigned int palette_index, hb_color_t foreground)
     * }
     */
    public static MethodHandle hb_font_paint_glyph$handle() {
        return hb_font_paint_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_paint_glyph(hb_font_t *font, hb_codepoint_t glyph, hb_paint_funcs_t *pfuncs, void *paint_data, unsigned int palette_index, hb_color_t foreground)
     * }
     */
    public static void hb_font_paint_glyph(MemorySegment font, int glyph, MemorySegment pfuncs, MemorySegment paint_data, int palette_index, int foreground) {
        var mh$ = hb_font_paint_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_paint_glyph", font, glyph, pfuncs, paint_data, palette_index, foreground);
            }
            mh$.invokeExact(font, glyph, pfuncs, paint_data, palette_index, foreground);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph(hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t *glyph)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph$descriptor() {
        return hb_font_get_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph(hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t *glyph)
     * }
     */
    public static MethodHandle hb_font_get_glyph$handle() {
        return hb_font_get_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph(hb_font_t *font, hb_codepoint_t unicode, hb_codepoint_t variation_selector, hb_codepoint_t *glyph)
     * }
     */
    public static int hb_font_get_glyph(MemorySegment font, int unicode, int variation_selector, MemorySegment glyph) {
        var mh$ = hb_font_get_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph", font, unicode, variation_selector, glyph);
            }
            return (int)mh$.invokeExact(font, unicode, variation_selector, glyph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_extents_for_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_extents_for_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_extents_for_direction(hb_font_t *font, hb_direction_t direction, hb_font_extents_t *extents)
     * }
     */
    public static FunctionDescriptor hb_font_get_extents_for_direction$descriptor() {
        return hb_font_get_extents_for_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_extents_for_direction(hb_font_t *font, hb_direction_t direction, hb_font_extents_t *extents)
     * }
     */
    public static MethodHandle hb_font_get_extents_for_direction$handle() {
        return hb_font_get_extents_for_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_extents_for_direction(hb_font_t *font, hb_direction_t direction, hb_font_extents_t *extents)
     * }
     */
    public static void hb_font_get_extents_for_direction(MemorySegment font, int direction, MemorySegment extents) {
        var mh$ = hb_font_get_extents_for_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_extents_for_direction", font, direction, extents);
            }
            mh$.invokeExact(font, direction, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_advance_for_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_advance_for_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_advance_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_advance_for_direction$descriptor() {
        return hb_font_get_glyph_advance_for_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_advance_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static MethodHandle hb_font_get_glyph_advance_for_direction$handle() {
        return hb_font_get_glyph_advance_for_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_advance_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static void hb_font_get_glyph_advance_for_direction(MemorySegment font, int glyph, int direction, MemorySegment x, MemorySegment y) {
        var mh$ = hb_font_get_glyph_advance_for_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_advance_for_direction", font, glyph, direction, x, y);
            }
            mh$.invokeExact(font, glyph, direction, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_advances_for_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_advances_for_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_advances_for_direction(hb_font_t *font, hb_direction_t direction, unsigned int count, const hb_codepoint_t *first_glyph, unsigned int glyph_stride, hb_position_t *first_advance, unsigned int advance_stride)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_advances_for_direction$descriptor() {
        return hb_font_get_glyph_advances_for_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_advances_for_direction(hb_font_t *font, hb_direction_t direction, unsigned int count, const hb_codepoint_t *first_glyph, unsigned int glyph_stride, hb_position_t *first_advance, unsigned int advance_stride)
     * }
     */
    public static MethodHandle hb_font_get_glyph_advances_for_direction$handle() {
        return hb_font_get_glyph_advances_for_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_advances_for_direction(hb_font_t *font, hb_direction_t direction, unsigned int count, const hb_codepoint_t *first_glyph, unsigned int glyph_stride, hb_position_t *first_advance, unsigned int advance_stride)
     * }
     */
    public static void hb_font_get_glyph_advances_for_direction(MemorySegment font, int direction, int count, MemorySegment first_glyph, int glyph_stride, MemorySegment first_advance, int advance_stride) {
        var mh$ = hb_font_get_glyph_advances_for_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_advances_for_direction", font, direction, count, first_glyph, glyph_stride, first_advance, advance_stride);
            }
            mh$.invokeExact(font, direction, count, first_glyph, glyph_stride, first_advance, advance_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_origin_for_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_origin_for_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_origin_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_origin_for_direction$descriptor() {
        return hb_font_get_glyph_origin_for_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_origin_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static MethodHandle hb_font_get_glyph_origin_for_direction$handle() {
        return hb_font_get_glyph_origin_for_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_origin_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static void hb_font_get_glyph_origin_for_direction(MemorySegment font, int glyph, int direction, MemorySegment x, MemorySegment y) {
        var mh$ = hb_font_get_glyph_origin_for_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_origin_for_direction", font, glyph, direction, x, y);
            }
            mh$.invokeExact(font, glyph, direction, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_add_glyph_origin_for_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_add_glyph_origin_for_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_add_glyph_origin_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static FunctionDescriptor hb_font_add_glyph_origin_for_direction$descriptor() {
        return hb_font_add_glyph_origin_for_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_add_glyph_origin_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static MethodHandle hb_font_add_glyph_origin_for_direction$handle() {
        return hb_font_add_glyph_origin_for_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_add_glyph_origin_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static void hb_font_add_glyph_origin_for_direction(MemorySegment font, int glyph, int direction, MemorySegment x, MemorySegment y) {
        var mh$ = hb_font_add_glyph_origin_for_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_add_glyph_origin_for_direction", font, glyph, direction, x, y);
            }
            mh$.invokeExact(font, glyph, direction, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_subtract_glyph_origin_for_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_subtract_glyph_origin_for_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_subtract_glyph_origin_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static FunctionDescriptor hb_font_subtract_glyph_origin_for_direction$descriptor() {
        return hb_font_subtract_glyph_origin_for_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_subtract_glyph_origin_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static MethodHandle hb_font_subtract_glyph_origin_for_direction$handle() {
        return hb_font_subtract_glyph_origin_for_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_subtract_glyph_origin_for_direction(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static void hb_font_subtract_glyph_origin_for_direction(MemorySegment font, int glyph, int direction, MemorySegment x, MemorySegment y) {
        var mh$ = hb_font_subtract_glyph_origin_for_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_subtract_glyph_origin_for_direction", font, glyph, direction, x, y);
            }
            mh$.invokeExact(font, glyph, direction, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_kerning_for_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_kerning_for_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_kerning_for_direction(hb_font_t *font, hb_codepoint_t first_glyph, hb_codepoint_t second_glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_kerning_for_direction$descriptor() {
        return hb_font_get_glyph_kerning_for_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_kerning_for_direction(hb_font_t *font, hb_codepoint_t first_glyph, hb_codepoint_t second_glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static MethodHandle hb_font_get_glyph_kerning_for_direction$handle() {
        return hb_font_get_glyph_kerning_for_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_kerning_for_direction(hb_font_t *font, hb_codepoint_t first_glyph, hb_codepoint_t second_glyph, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static void hb_font_get_glyph_kerning_for_direction(MemorySegment font, int first_glyph, int second_glyph, int direction, MemorySegment x, MemorySegment y) {
        var mh$ = hb_font_get_glyph_kerning_for_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_kerning_for_direction", font, first_glyph, second_glyph, direction, x, y);
            }
            mh$.invokeExact(font, first_glyph, second_glyph, direction, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_extents_for_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_extents_for_origin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_extents_for_origin(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_glyph_extents_t *extents)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_extents_for_origin$descriptor() {
        return hb_font_get_glyph_extents_for_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_extents_for_origin(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_glyph_extents_t *extents)
     * }
     */
    public static MethodHandle hb_font_get_glyph_extents_for_origin$handle() {
        return hb_font_get_glyph_extents_for_origin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_extents_for_origin(hb_font_t *font, hb_codepoint_t glyph, hb_direction_t direction, hb_glyph_extents_t *extents)
     * }
     */
    public static int hb_font_get_glyph_extents_for_origin(MemorySegment font, int glyph, int direction, MemorySegment extents) {
        var mh$ = hb_font_get_glyph_extents_for_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_extents_for_origin", font, glyph, direction, extents);
            }
            return (int)mh$.invokeExact(font, glyph, direction, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_contour_point_for_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_contour_point_for_origin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_contour_point_for_origin(hb_font_t *font, hb_codepoint_t glyph, unsigned int point_index, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_contour_point_for_origin$descriptor() {
        return hb_font_get_glyph_contour_point_for_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_contour_point_for_origin(hb_font_t *font, hb_codepoint_t glyph, unsigned int point_index, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static MethodHandle hb_font_get_glyph_contour_point_for_origin$handle() {
        return hb_font_get_glyph_contour_point_for_origin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_get_glyph_contour_point_for_origin(hb_font_t *font, hb_codepoint_t glyph, unsigned int point_index, hb_direction_t direction, hb_position_t *x, hb_position_t *y)
     * }
     */
    public static int hb_font_get_glyph_contour_point_for_origin(MemorySegment font, int glyph, int point_index, int direction, MemorySegment x, MemorySegment y) {
        var mh$ = hb_font_get_glyph_contour_point_for_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_contour_point_for_origin", font, glyph, point_index, direction, x, y);
            }
            return (int)mh$.invokeExact(font, glyph, point_index, direction, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_glyph_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_glyph_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_glyph_to_string(hb_font_t *font, hb_codepoint_t glyph, char *s, unsigned int size)
     * }
     */
    public static FunctionDescriptor hb_font_glyph_to_string$descriptor() {
        return hb_font_glyph_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_glyph_to_string(hb_font_t *font, hb_codepoint_t glyph, char *s, unsigned int size)
     * }
     */
    public static MethodHandle hb_font_glyph_to_string$handle() {
        return hb_font_glyph_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_glyph_to_string(hb_font_t *font, hb_codepoint_t glyph, char *s, unsigned int size)
     * }
     */
    public static void hb_font_glyph_to_string(MemorySegment font, int glyph, MemorySegment s, int size) {
        var mh$ = hb_font_glyph_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_glyph_to_string", font, glyph, s, size);
            }
            mh$.invokeExact(font, glyph, s, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_glyph_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_glyph_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_glyph_from_string(hb_font_t *font, const char *s, int len, hb_codepoint_t *glyph)
     * }
     */
    public static FunctionDescriptor hb_font_glyph_from_string$descriptor() {
        return hb_font_glyph_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_glyph_from_string(hb_font_t *font, const char *s, int len, hb_codepoint_t *glyph)
     * }
     */
    public static MethodHandle hb_font_glyph_from_string$handle() {
        return hb_font_glyph_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_glyph_from_string(hb_font_t *font, const char *s, int len, hb_codepoint_t *glyph)
     * }
     */
    public static int hb_font_glyph_from_string(MemorySegment font, MemorySegment s, int len, MemorySegment glyph) {
        var mh$ = hb_font_glyph_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_glyph_from_string", font, s, len, glyph);
            }
            return (int)mh$.invokeExact(font, s, len, glyph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_create(hb_face_t *face)
     * }
     */
    public static FunctionDescriptor hb_font_create$descriptor() {
        return hb_font_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_create(hb_face_t *face)
     * }
     */
    public static MethodHandle hb_font_create$handle() {
        return hb_font_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_create(hb_face_t *face)
     * }
     */
    public static MemorySegment hb_font_create(MemorySegment face) {
        var mh$ = hb_font_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_create", face);
            }
            return (MemorySegment)mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_create_sub_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_create_sub_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_create_sub_font(hb_font_t *parent)
     * }
     */
    public static FunctionDescriptor hb_font_create_sub_font$descriptor() {
        return hb_font_create_sub_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_create_sub_font(hb_font_t *parent)
     * }
     */
    public static MethodHandle hb_font_create_sub_font$handle() {
        return hb_font_create_sub_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_create_sub_font(hb_font_t *parent)
     * }
     */
    public static MemorySegment hb_font_create_sub_font(MemorySegment parent) {
        var mh$ = hb_font_create_sub_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_create_sub_font", parent);
            }
            return (MemorySegment)mh$.invokeExact(parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_get_empty()
     * }
     */
    public static FunctionDescriptor hb_font_get_empty$descriptor() {
        return hb_font_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_get_empty()
     * }
     */
    public static MethodHandle hb_font_get_empty$handle() {
        return hb_font_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_get_empty()
     * }
     */
    public static MemorySegment hb_font_get_empty() {
        var mh$ = hb_font_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_reference(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_reference$descriptor() {
        return hb_font_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_reference(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_reference$handle() {
        return hb_font_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_reference(hb_font_t *font)
     * }
     */
    public static MemorySegment hb_font_reference(MemorySegment font) {
        var mh$ = hb_font_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_reference", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_destroy(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_destroy$descriptor() {
        return hb_font_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_destroy(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_destroy$handle() {
        return hb_font_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_destroy(hb_font_t *font)
     * }
     */
    public static void hb_font_destroy(MemorySegment font) {
        var mh$ = hb_font_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_destroy", font);
            }
            mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_set_user_data(hb_font_t *font, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_font_set_user_data$descriptor() {
        return hb_font_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_set_user_data(hb_font_t *font, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_font_set_user_data$handle() {
        return hb_font_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_set_user_data(hb_font_t *font, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_font_set_user_data(MemorySegment font, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_font_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_user_data", font, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(font, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_font_get_user_data(const hb_font_t *font, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_font_get_user_data$descriptor() {
        return hb_font_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_font_get_user_data(const hb_font_t *font, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_font_get_user_data$handle() {
        return hb_font_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_font_get_user_data(const hb_font_t *font, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_font_get_user_data(MemorySegment font, MemorySegment key) {
        var mh$ = hb_font_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_user_data", font, key);
            }
            return (MemorySegment)mh$.invokeExact(font, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_make_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_make_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_make_immutable(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_make_immutable$descriptor() {
        return hb_font_make_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_make_immutable(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_make_immutable$handle() {
        return hb_font_make_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_make_immutable(hb_font_t *font)
     * }
     */
    public static void hb_font_make_immutable(MemorySegment font) {
        var mh$ = hb_font_make_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_make_immutable", font);
            }
            mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_is_immutable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_is_immutable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_is_immutable(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_is_immutable$descriptor() {
        return hb_font_is_immutable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_is_immutable(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_is_immutable$handle() {
        return hb_font_is_immutable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_font_is_immutable(hb_font_t *font)
     * }
     */
    public static int hb_font_is_immutable(MemorySegment font) {
        var mh$ = hb_font_is_immutable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_is_immutable", font);
            }
            return (int)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_font_get_serial(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_get_serial$descriptor() {
        return hb_font_get_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_font_get_serial(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_get_serial$handle() {
        return hb_font_get_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_font_get_serial(hb_font_t *font)
     * }
     */
    public static int hb_font_get_serial(MemorySegment font) {
        var mh$ = hb_font_get_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_serial", font);
            }
            return (int)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_changed(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_changed$descriptor() {
        return hb_font_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_changed(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_changed$handle() {
        return hb_font_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_changed(hb_font_t *font)
     * }
     */
    public static void hb_font_changed(MemorySegment font) {
        var mh$ = hb_font_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_changed", font);
            }
            mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_parent(hb_font_t *font, hb_font_t *parent)
     * }
     */
    public static FunctionDescriptor hb_font_set_parent$descriptor() {
        return hb_font_set_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_parent(hb_font_t *font, hb_font_t *parent)
     * }
     */
    public static MethodHandle hb_font_set_parent$handle() {
        return hb_font_set_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_parent(hb_font_t *font, hb_font_t *parent)
     * }
     */
    public static void hb_font_set_parent(MemorySegment font, MemorySegment parent) {
        var mh$ = hb_font_set_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_parent", font, parent);
            }
            mh$.invokeExact(font, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_get_parent(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_get_parent$descriptor() {
        return hb_font_get_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_get_parent(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_get_parent$handle() {
        return hb_font_get_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_font_t *hb_font_get_parent(hb_font_t *font)
     * }
     */
    public static MemorySegment hb_font_get_parent(MemorySegment font) {
        var mh$ = hb_font_get_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_parent", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_face {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_face"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_face(hb_font_t *font, hb_face_t *face)
     * }
     */
    public static FunctionDescriptor hb_font_set_face$descriptor() {
        return hb_font_set_face.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_face(hb_font_t *font, hb_face_t *face)
     * }
     */
    public static MethodHandle hb_font_set_face$handle() {
        return hb_font_set_face.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_face(hb_font_t *font, hb_face_t *face)
     * }
     */
    public static void hb_font_set_face(MemorySegment font, MemorySegment face) {
        var mh$ = hb_font_set_face.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_face", font, face);
            }
            mh$.invokeExact(font, face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_face {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_face"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_font_get_face(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_get_face$descriptor() {
        return hb_font_get_face.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_face_t *hb_font_get_face(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_get_face$handle() {
        return hb_font_get_face.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_face_t *hb_font_get_face(hb_font_t *font)
     * }
     */
    public static MemorySegment hb_font_get_face(MemorySegment font) {
        var mh$ = hb_font_get_face.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_face", font);
            }
            return (MemorySegment)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_funcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_funcs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_funcs(hb_font_t *font, hb_font_funcs_t *klass, void *font_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_set_funcs$descriptor() {
        return hb_font_set_funcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_funcs(hb_font_t *font, hb_font_funcs_t *klass, void *font_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_set_funcs$handle() {
        return hb_font_set_funcs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_funcs(hb_font_t *font, hb_font_funcs_t *klass, void *font_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_set_funcs(MemorySegment font, MemorySegment klass, MemorySegment font_data, MemorySegment destroy) {
        var mh$ = hb_font_set_funcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_funcs", font, klass, font_data, destroy);
            }
            mh$.invokeExact(font, klass, font_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_funcs_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_funcs_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_funcs_data(hb_font_t *font, void *font_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_set_funcs_data$descriptor() {
        return hb_font_set_funcs_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_funcs_data(hb_font_t *font, void *font_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_set_funcs_data$handle() {
        return hb_font_set_funcs_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_funcs_data(hb_font_t *font, void *font_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_set_funcs_data(MemorySegment font, MemorySegment font_data, MemorySegment destroy) {
        var mh$ = hb_font_set_funcs_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_funcs_data", font, font_data, destroy);
            }
            mh$.invokeExact(font, font_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_scale(hb_font_t *font, int x_scale, int y_scale)
     * }
     */
    public static FunctionDescriptor hb_font_set_scale$descriptor() {
        return hb_font_set_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_scale(hb_font_t *font, int x_scale, int y_scale)
     * }
     */
    public static MethodHandle hb_font_set_scale$handle() {
        return hb_font_set_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_scale(hb_font_t *font, int x_scale, int y_scale)
     * }
     */
    public static void hb_font_set_scale(MemorySegment font, int x_scale, int y_scale) {
        var mh$ = hb_font_set_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_scale", font, x_scale, y_scale);
            }
            mh$.invokeExact(font, x_scale, y_scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_scale(hb_font_t *font, int *x_scale, int *y_scale)
     * }
     */
    public static FunctionDescriptor hb_font_get_scale$descriptor() {
        return hb_font_get_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_scale(hb_font_t *font, int *x_scale, int *y_scale)
     * }
     */
    public static MethodHandle hb_font_get_scale$handle() {
        return hb_font_get_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_scale(hb_font_t *font, int *x_scale, int *y_scale)
     * }
     */
    public static void hb_font_get_scale(MemorySegment font, MemorySegment x_scale, MemorySegment y_scale) {
        var mh$ = hb_font_get_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_scale", font, x_scale, y_scale);
            }
            mh$.invokeExact(font, x_scale, y_scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_ppem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_ppem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_ppem(hb_font_t *font, unsigned int x_ppem, unsigned int y_ppem)
     * }
     */
    public static FunctionDescriptor hb_font_set_ppem$descriptor() {
        return hb_font_set_ppem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_ppem(hb_font_t *font, unsigned int x_ppem, unsigned int y_ppem)
     * }
     */
    public static MethodHandle hb_font_set_ppem$handle() {
        return hb_font_set_ppem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_ppem(hb_font_t *font, unsigned int x_ppem, unsigned int y_ppem)
     * }
     */
    public static void hb_font_set_ppem(MemorySegment font, int x_ppem, int y_ppem) {
        var mh$ = hb_font_set_ppem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_ppem", font, x_ppem, y_ppem);
            }
            mh$.invokeExact(font, x_ppem, y_ppem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_ppem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_ppem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_ppem(hb_font_t *font, unsigned int *x_ppem, unsigned int *y_ppem)
     * }
     */
    public static FunctionDescriptor hb_font_get_ppem$descriptor() {
        return hb_font_get_ppem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_ppem(hb_font_t *font, unsigned int *x_ppem, unsigned int *y_ppem)
     * }
     */
    public static MethodHandle hb_font_get_ppem$handle() {
        return hb_font_get_ppem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_ppem(hb_font_t *font, unsigned int *x_ppem, unsigned int *y_ppem)
     * }
     */
    public static void hb_font_get_ppem(MemorySegment font, MemorySegment x_ppem, MemorySegment y_ppem) {
        var mh$ = hb_font_get_ppem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_ppem", font, x_ppem, y_ppem);
            }
            mh$.invokeExact(font, x_ppem, y_ppem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_ptem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_ptem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_ptem(hb_font_t *font, float ptem)
     * }
     */
    public static FunctionDescriptor hb_font_set_ptem$descriptor() {
        return hb_font_set_ptem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_ptem(hb_font_t *font, float ptem)
     * }
     */
    public static MethodHandle hb_font_set_ptem$handle() {
        return hb_font_set_ptem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_ptem(hb_font_t *font, float ptem)
     * }
     */
    public static void hb_font_set_ptem(MemorySegment font, float ptem) {
        var mh$ = hb_font_set_ptem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_ptem", font, ptem);
            }
            mh$.invokeExact(font, ptem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_ptem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_ptem"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float hb_font_get_ptem(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_get_ptem$descriptor() {
        return hb_font_get_ptem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float hb_font_get_ptem(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_get_ptem$handle() {
        return hb_font_get_ptem.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern float hb_font_get_ptem(hb_font_t *font)
     * }
     */
    public static float hb_font_get_ptem(MemorySegment font) {
        var mh$ = hb_font_get_ptem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_ptem", font);
            }
            return (float)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_synthetic_bold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_synthetic_bold"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_synthetic_bold(hb_font_t *font, float x_embolden, float y_embolden, hb_bool_t in_place)
     * }
     */
    public static FunctionDescriptor hb_font_set_synthetic_bold$descriptor() {
        return hb_font_set_synthetic_bold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_synthetic_bold(hb_font_t *font, float x_embolden, float y_embolden, hb_bool_t in_place)
     * }
     */
    public static MethodHandle hb_font_set_synthetic_bold$handle() {
        return hb_font_set_synthetic_bold.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_synthetic_bold(hb_font_t *font, float x_embolden, float y_embolden, hb_bool_t in_place)
     * }
     */
    public static void hb_font_set_synthetic_bold(MemorySegment font, float x_embolden, float y_embolden, int in_place) {
        var mh$ = hb_font_set_synthetic_bold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_synthetic_bold", font, x_embolden, y_embolden, in_place);
            }
            mh$.invokeExact(font, x_embolden, y_embolden, in_place);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_synthetic_bold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_synthetic_bold"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_synthetic_bold(hb_font_t *font, float *x_embolden, float *y_embolden, hb_bool_t *in_place)
     * }
     */
    public static FunctionDescriptor hb_font_get_synthetic_bold$descriptor() {
        return hb_font_get_synthetic_bold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_synthetic_bold(hb_font_t *font, float *x_embolden, float *y_embolden, hb_bool_t *in_place)
     * }
     */
    public static MethodHandle hb_font_get_synthetic_bold$handle() {
        return hb_font_get_synthetic_bold.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_synthetic_bold(hb_font_t *font, float *x_embolden, float *y_embolden, hb_bool_t *in_place)
     * }
     */
    public static void hb_font_get_synthetic_bold(MemorySegment font, MemorySegment x_embolden, MemorySegment y_embolden, MemorySegment in_place) {
        var mh$ = hb_font_get_synthetic_bold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_synthetic_bold", font, x_embolden, y_embolden, in_place);
            }
            mh$.invokeExact(font, x_embolden, y_embolden, in_place);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_synthetic_slant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_synthetic_slant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_synthetic_slant(hb_font_t *font, float slant)
     * }
     */
    public static FunctionDescriptor hb_font_set_synthetic_slant$descriptor() {
        return hb_font_set_synthetic_slant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_synthetic_slant(hb_font_t *font, float slant)
     * }
     */
    public static MethodHandle hb_font_set_synthetic_slant$handle() {
        return hb_font_set_synthetic_slant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_synthetic_slant(hb_font_t *font, float slant)
     * }
     */
    public static void hb_font_set_synthetic_slant(MemorySegment font, float slant) {
        var mh$ = hb_font_set_synthetic_slant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_synthetic_slant", font, slant);
            }
            mh$.invokeExact(font, slant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_synthetic_slant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_synthetic_slant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float hb_font_get_synthetic_slant(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_get_synthetic_slant$descriptor() {
        return hb_font_get_synthetic_slant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float hb_font_get_synthetic_slant(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_get_synthetic_slant$handle() {
        return hb_font_get_synthetic_slant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern float hb_font_get_synthetic_slant(hb_font_t *font)
     * }
     */
    public static float hb_font_get_synthetic_slant(MemorySegment font) {
        var mh$ = hb_font_get_synthetic_slant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_synthetic_slant", font);
            }
            return (float)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_variations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_variations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_variations(hb_font_t *font, const hb_variation_t *variations, unsigned int variations_length)
     * }
     */
    public static FunctionDescriptor hb_font_set_variations$descriptor() {
        return hb_font_set_variations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_variations(hb_font_t *font, const hb_variation_t *variations, unsigned int variations_length)
     * }
     */
    public static MethodHandle hb_font_set_variations$handle() {
        return hb_font_set_variations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_variations(hb_font_t *font, const hb_variation_t *variations, unsigned int variations_length)
     * }
     */
    public static void hb_font_set_variations(MemorySegment font, MemorySegment variations, int variations_length) {
        var mh$ = hb_font_set_variations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_variations", font, variations, variations_length);
            }
            mh$.invokeExact(font, variations, variations_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_variation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_variation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_variation(hb_font_t *font, hb_tag_t tag, float value)
     * }
     */
    public static FunctionDescriptor hb_font_set_variation$descriptor() {
        return hb_font_set_variation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_variation(hb_font_t *font, hb_tag_t tag, float value)
     * }
     */
    public static MethodHandle hb_font_set_variation$handle() {
        return hb_font_set_variation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_variation(hb_font_t *font, hb_tag_t tag, float value)
     * }
     */
    public static void hb_font_set_variation(MemorySegment font, int tag, float value) {
        var mh$ = hb_font_set_variation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_variation", font, tag, value);
            }
            mh$.invokeExact(font, tag, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_var_coords_design {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_var_coords_design"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_var_coords_design(hb_font_t *font, const float *coords, unsigned int coords_length)
     * }
     */
    public static FunctionDescriptor hb_font_set_var_coords_design$descriptor() {
        return hb_font_set_var_coords_design.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_var_coords_design(hb_font_t *font, const float *coords, unsigned int coords_length)
     * }
     */
    public static MethodHandle hb_font_set_var_coords_design$handle() {
        return hb_font_set_var_coords_design.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_var_coords_design(hb_font_t *font, const float *coords, unsigned int coords_length)
     * }
     */
    public static void hb_font_set_var_coords_design(MemorySegment font, MemorySegment coords, int coords_length) {
        var mh$ = hb_font_set_var_coords_design.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_var_coords_design", font, coords, coords_length);
            }
            mh$.invokeExact(font, coords, coords_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_var_coords_design {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_var_coords_design"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const float *hb_font_get_var_coords_design(hb_font_t *font, unsigned int *length)
     * }
     */
    public static FunctionDescriptor hb_font_get_var_coords_design$descriptor() {
        return hb_font_get_var_coords_design.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const float *hb_font_get_var_coords_design(hb_font_t *font, unsigned int *length)
     * }
     */
    public static MethodHandle hb_font_get_var_coords_design$handle() {
        return hb_font_get_var_coords_design.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const float *hb_font_get_var_coords_design(hb_font_t *font, unsigned int *length)
     * }
     */
    public static MemorySegment hb_font_get_var_coords_design(MemorySegment font, MemorySegment length) {
        var mh$ = hb_font_get_var_coords_design.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_var_coords_design", font, length);
            }
            return (MemorySegment)mh$.invokeExact(font, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_var_coords_normalized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_var_coords_normalized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_var_coords_normalized(hb_font_t *font, const int *coords, unsigned int coords_length)
     * }
     */
    public static FunctionDescriptor hb_font_set_var_coords_normalized$descriptor() {
        return hb_font_set_var_coords_normalized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_var_coords_normalized(hb_font_t *font, const int *coords, unsigned int coords_length)
     * }
     */
    public static MethodHandle hb_font_set_var_coords_normalized$handle() {
        return hb_font_set_var_coords_normalized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_var_coords_normalized(hb_font_t *font, const int *coords, unsigned int coords_length)
     * }
     */
    public static void hb_font_set_var_coords_normalized(MemorySegment font, MemorySegment coords, int coords_length) {
        var mh$ = hb_font_set_var_coords_normalized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_var_coords_normalized", font, coords, coords_length);
            }
            mh$.invokeExact(font, coords, coords_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_var_coords_normalized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_var_coords_normalized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const int *hb_font_get_var_coords_normalized(hb_font_t *font, unsigned int *length)
     * }
     */
    public static FunctionDescriptor hb_font_get_var_coords_normalized$descriptor() {
        return hb_font_get_var_coords_normalized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const int *hb_font_get_var_coords_normalized(hb_font_t *font, unsigned int *length)
     * }
     */
    public static MethodHandle hb_font_get_var_coords_normalized$handle() {
        return hb_font_get_var_coords_normalized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const int *hb_font_get_var_coords_normalized(hb_font_t *font, unsigned int *length)
     * }
     */
    public static MemorySegment hb_font_get_var_coords_normalized(MemorySegment font, MemorySegment length) {
        var mh$ = hb_font_get_var_coords_normalized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_var_coords_normalized", font, length);
            }
            return (MemorySegment)mh$.invokeExact(font, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_set_var_named_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_set_var_named_instance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_set_var_named_instance(hb_font_t *font, unsigned int instance_index)
     * }
     */
    public static FunctionDescriptor hb_font_set_var_named_instance$descriptor() {
        return hb_font_set_var_named_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_set_var_named_instance(hb_font_t *font, unsigned int instance_index)
     * }
     */
    public static MethodHandle hb_font_set_var_named_instance$handle() {
        return hb_font_set_var_named_instance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_set_var_named_instance(hb_font_t *font, unsigned int instance_index)
     * }
     */
    public static void hb_font_set_var_named_instance(MemorySegment font, int instance_index) {
        var mh$ = hb_font_set_var_named_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_set_var_named_instance", font, instance_index);
            }
            mh$.invokeExact(font, instance_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_var_named_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_var_named_instance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_font_get_var_named_instance(hb_font_t *font)
     * }
     */
    public static FunctionDescriptor hb_font_get_var_named_instance$descriptor() {
        return hb_font_get_var_named_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_font_get_var_named_instance(hb_font_t *font)
     * }
     */
    public static MethodHandle hb_font_get_var_named_instance$handle() {
        return hb_font_get_var_named_instance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_font_get_var_named_instance(hb_font_t *font)
     * }
     */
    public static int hb_font_get_var_named_instance(MemorySegment font) {
        var mh$ = hb_font_get_var_named_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_var_named_instance", font);
            }
            return (int)mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_GLYPH_FLAG_UNSAFE_TO_BREAK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_GLYPH_FLAG_UNSAFE_TO_BREAK = 1
     * }
     */
    public static int HB_GLYPH_FLAG_UNSAFE_TO_BREAK() {
        return HB_GLYPH_FLAG_UNSAFE_TO_BREAK;
    }
    private static final int HB_GLYPH_FLAG_UNSAFE_TO_CONCAT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_GLYPH_FLAG_UNSAFE_TO_CONCAT = 2
     * }
     */
    public static int HB_GLYPH_FLAG_UNSAFE_TO_CONCAT() {
        return HB_GLYPH_FLAG_UNSAFE_TO_CONCAT;
    }
    private static final int HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL = 4
     * }
     */
    public static int HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL() {
        return HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL;
    }
    private static final int HB_GLYPH_FLAG_DEFINED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_GLYPH_FLAG_DEFINED = 7
     * }
     */
    public static int HB_GLYPH_FLAG_DEFINED() {
        return HB_GLYPH_FLAG_DEFINED;
    }

    private static class hb_glyph_info_get_glyph_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_glyph_info_get_glyph_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_glyph_flags_t hb_glyph_info_get_glyph_flags(const hb_glyph_info_t *info)
     * }
     */
    public static FunctionDescriptor hb_glyph_info_get_glyph_flags$descriptor() {
        return hb_glyph_info_get_glyph_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_glyph_flags_t hb_glyph_info_get_glyph_flags(const hb_glyph_info_t *info)
     * }
     */
    public static MethodHandle hb_glyph_info_get_glyph_flags$handle() {
        return hb_glyph_info_get_glyph_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_glyph_flags_t hb_glyph_info_get_glyph_flags(const hb_glyph_info_t *info)
     * }
     */
    public static int hb_glyph_info_get_glyph_flags(MemorySegment info) {
        var mh$ = hb_glyph_info_get_glyph_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_glyph_info_get_glyph_flags", info);
            }
            return (int)mh$.invokeExact(info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_segment_properties_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_segment_properties_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_segment_properties_equal(const hb_segment_properties_t *a, const hb_segment_properties_t *b)
     * }
     */
    public static FunctionDescriptor hb_segment_properties_equal$descriptor() {
        return hb_segment_properties_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_segment_properties_equal(const hb_segment_properties_t *a, const hb_segment_properties_t *b)
     * }
     */
    public static MethodHandle hb_segment_properties_equal$handle() {
        return hb_segment_properties_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_segment_properties_equal(const hb_segment_properties_t *a, const hb_segment_properties_t *b)
     * }
     */
    public static int hb_segment_properties_equal(MemorySegment a, MemorySegment b) {
        var mh$ = hb_segment_properties_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_segment_properties_equal", a, b);
            }
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_segment_properties_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_segment_properties_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_segment_properties_hash(const hb_segment_properties_t *p)
     * }
     */
    public static FunctionDescriptor hb_segment_properties_hash$descriptor() {
        return hb_segment_properties_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_segment_properties_hash(const hb_segment_properties_t *p)
     * }
     */
    public static MethodHandle hb_segment_properties_hash$handle() {
        return hb_segment_properties_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_segment_properties_hash(const hb_segment_properties_t *p)
     * }
     */
    public static int hb_segment_properties_hash(MemorySegment p) {
        var mh$ = hb_segment_properties_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_segment_properties_hash", p);
            }
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_segment_properties_overlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_segment_properties_overlay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_segment_properties_overlay(hb_segment_properties_t *p, const hb_segment_properties_t *src)
     * }
     */
    public static FunctionDescriptor hb_segment_properties_overlay$descriptor() {
        return hb_segment_properties_overlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_segment_properties_overlay(hb_segment_properties_t *p, const hb_segment_properties_t *src)
     * }
     */
    public static MethodHandle hb_segment_properties_overlay$handle() {
        return hb_segment_properties_overlay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_segment_properties_overlay(hb_segment_properties_t *p, const hb_segment_properties_t *src)
     * }
     */
    public static void hb_segment_properties_overlay(MemorySegment p, MemorySegment src) {
        var mh$ = hb_segment_properties_overlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_segment_properties_overlay", p, src);
            }
            mh$.invokeExact(p, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_create()
     * }
     */
    public static FunctionDescriptor hb_buffer_create$descriptor() {
        return hb_buffer_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_create()
     * }
     */
    public static MethodHandle hb_buffer_create$handle() {
        return hb_buffer_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_create()
     * }
     */
    public static MemorySegment hb_buffer_create() {
        var mh$ = hb_buffer_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_create_similar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_create_similar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_create_similar(const hb_buffer_t *src)
     * }
     */
    public static FunctionDescriptor hb_buffer_create_similar$descriptor() {
        return hb_buffer_create_similar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_create_similar(const hb_buffer_t *src)
     * }
     */
    public static MethodHandle hb_buffer_create_similar$handle() {
        return hb_buffer_create_similar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_create_similar(const hb_buffer_t *src)
     * }
     */
    public static MemorySegment hb_buffer_create_similar(MemorySegment src) {
        var mh$ = hb_buffer_create_similar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_create_similar", src);
            }
            return (MemorySegment)mh$.invokeExact(src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_reset(hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_reset$descriptor() {
        return hb_buffer_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_reset(hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_reset$handle() {
        return hb_buffer_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_reset(hb_buffer_t *buffer)
     * }
     */
    public static void hb_buffer_reset(MemorySegment buffer) {
        var mh$ = hb_buffer_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_reset", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_get_empty()
     * }
     */
    public static FunctionDescriptor hb_buffer_get_empty$descriptor() {
        return hb_buffer_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_get_empty()
     * }
     */
    public static MethodHandle hb_buffer_get_empty$handle() {
        return hb_buffer_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_get_empty()
     * }
     */
    public static MemorySegment hb_buffer_get_empty() {
        var mh$ = hb_buffer_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_reference(hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_reference$descriptor() {
        return hb_buffer_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_reference(hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_reference$handle() {
        return hb_buffer_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_buffer_t *hb_buffer_reference(hb_buffer_t *buffer)
     * }
     */
    public static MemorySegment hb_buffer_reference(MemorySegment buffer) {
        var mh$ = hb_buffer_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_reference", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_destroy(hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_destroy$descriptor() {
        return hb_buffer_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_destroy(hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_destroy$handle() {
        return hb_buffer_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_destroy(hb_buffer_t *buffer)
     * }
     */
    public static void hb_buffer_destroy(MemorySegment buffer) {
        var mh$ = hb_buffer_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_destroy", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_set_user_data(hb_buffer_t *buffer, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_user_data$descriptor() {
        return hb_buffer_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_set_user_data(hb_buffer_t *buffer, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_buffer_set_user_data$handle() {
        return hb_buffer_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_set_user_data(hb_buffer_t *buffer, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_buffer_set_user_data(MemorySegment buffer, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_buffer_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_user_data", buffer, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(buffer, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_buffer_get_user_data(const hb_buffer_t *buffer, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_user_data$descriptor() {
        return hb_buffer_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_buffer_get_user_data(const hb_buffer_t *buffer, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_buffer_get_user_data$handle() {
        return hb_buffer_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_buffer_get_user_data(const hb_buffer_t *buffer, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_buffer_get_user_data(MemorySegment buffer, MemorySegment key) {
        var mh$ = hb_buffer_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_user_data", buffer, key);
            }
            return (MemorySegment)mh$.invokeExact(buffer, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_BUFFER_CONTENT_TYPE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_CONTENT_TYPE_INVALID = 0
     * }
     */
    public static int HB_BUFFER_CONTENT_TYPE_INVALID() {
        return HB_BUFFER_CONTENT_TYPE_INVALID;
    }
    private static final int HB_BUFFER_CONTENT_TYPE_UNICODE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_CONTENT_TYPE_UNICODE = 1
     * }
     */
    public static int HB_BUFFER_CONTENT_TYPE_UNICODE() {
        return HB_BUFFER_CONTENT_TYPE_UNICODE;
    }
    private static final int HB_BUFFER_CONTENT_TYPE_GLYPHS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_CONTENT_TYPE_GLYPHS = 2
     * }
     */
    public static int HB_BUFFER_CONTENT_TYPE_GLYPHS() {
        return HB_BUFFER_CONTENT_TYPE_GLYPHS;
    }

    private static class hb_buffer_set_content_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_content_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_content_type(hb_buffer_t *buffer, hb_buffer_content_type_t content_type)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_content_type$descriptor() {
        return hb_buffer_set_content_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_content_type(hb_buffer_t *buffer, hb_buffer_content_type_t content_type)
     * }
     */
    public static MethodHandle hb_buffer_set_content_type$handle() {
        return hb_buffer_set_content_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_content_type(hb_buffer_t *buffer, hb_buffer_content_type_t content_type)
     * }
     */
    public static void hb_buffer_set_content_type(MemorySegment buffer, int content_type) {
        var mh$ = hb_buffer_set_content_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_content_type", buffer, content_type);
            }
            mh$.invokeExact(buffer, content_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_content_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_content_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_buffer_content_type_t hb_buffer_get_content_type(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_content_type$descriptor() {
        return hb_buffer_get_content_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_buffer_content_type_t hb_buffer_get_content_type(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_content_type$handle() {
        return hb_buffer_get_content_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_buffer_content_type_t hb_buffer_get_content_type(const hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_get_content_type(MemorySegment buffer) {
        var mh$ = hb_buffer_get_content_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_content_type", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_unicode_funcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_unicode_funcs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_unicode_funcs(hb_buffer_t *buffer, hb_unicode_funcs_t *unicode_funcs)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_unicode_funcs$descriptor() {
        return hb_buffer_set_unicode_funcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_unicode_funcs(hb_buffer_t *buffer, hb_unicode_funcs_t *unicode_funcs)
     * }
     */
    public static MethodHandle hb_buffer_set_unicode_funcs$handle() {
        return hb_buffer_set_unicode_funcs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_unicode_funcs(hb_buffer_t *buffer, hb_unicode_funcs_t *unicode_funcs)
     * }
     */
    public static void hb_buffer_set_unicode_funcs(MemorySegment buffer, MemorySegment unicode_funcs) {
        var mh$ = hb_buffer_set_unicode_funcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_unicode_funcs", buffer, unicode_funcs);
            }
            mh$.invokeExact(buffer, unicode_funcs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_unicode_funcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_unicode_funcs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_buffer_get_unicode_funcs(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_unicode_funcs$descriptor() {
        return hb_buffer_get_unicode_funcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_buffer_get_unicode_funcs(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_unicode_funcs$handle() {
        return hb_buffer_get_unicode_funcs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_unicode_funcs_t *hb_buffer_get_unicode_funcs(const hb_buffer_t *buffer)
     * }
     */
    public static MemorySegment hb_buffer_get_unicode_funcs(MemorySegment buffer) {
        var mh$ = hb_buffer_get_unicode_funcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_unicode_funcs", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_direction(hb_buffer_t *buffer, hb_direction_t direction)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_direction$descriptor() {
        return hb_buffer_set_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_direction(hb_buffer_t *buffer, hb_direction_t direction)
     * }
     */
    public static MethodHandle hb_buffer_set_direction$handle() {
        return hb_buffer_set_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_direction(hb_buffer_t *buffer, hb_direction_t direction)
     * }
     */
    public static void hb_buffer_set_direction(MemorySegment buffer, int direction) {
        var mh$ = hb_buffer_set_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_direction", buffer, direction);
            }
            mh$.invokeExact(buffer, direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_direction_t hb_buffer_get_direction(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_direction$descriptor() {
        return hb_buffer_get_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_direction_t hb_buffer_get_direction(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_direction$handle() {
        return hb_buffer_get_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_direction_t hb_buffer_get_direction(const hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_get_direction(MemorySegment buffer) {
        var mh$ = hb_buffer_get_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_direction", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_script {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_script"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_script(hb_buffer_t *buffer, hb_script_t script)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_script$descriptor() {
        return hb_buffer_set_script.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_script(hb_buffer_t *buffer, hb_script_t script)
     * }
     */
    public static MethodHandle hb_buffer_set_script$handle() {
        return hb_buffer_set_script.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_script(hb_buffer_t *buffer, hb_script_t script)
     * }
     */
    public static void hb_buffer_set_script(MemorySegment buffer, int script) {
        var mh$ = hb_buffer_set_script.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_script", buffer, script);
            }
            mh$.invokeExact(buffer, script);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_script {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_script"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_script_t hb_buffer_get_script(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_script$descriptor() {
        return hb_buffer_get_script.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_script_t hb_buffer_get_script(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_script$handle() {
        return hb_buffer_get_script.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_script_t hb_buffer_get_script(const hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_get_script(MemorySegment buffer) {
        var mh$ = hb_buffer_get_script.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_script", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_language"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_language(hb_buffer_t *buffer, hb_language_t language)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_language$descriptor() {
        return hb_buffer_set_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_language(hb_buffer_t *buffer, hb_language_t language)
     * }
     */
    public static MethodHandle hb_buffer_set_language$handle() {
        return hb_buffer_set_language.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_language(hb_buffer_t *buffer, hb_language_t language)
     * }
     */
    public static void hb_buffer_set_language(MemorySegment buffer, MemorySegment language) {
        var mh$ = hb_buffer_set_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_language", buffer, language);
            }
            mh$.invokeExact(buffer, language);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_language {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_language"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_language_t hb_buffer_get_language(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_language$descriptor() {
        return hb_buffer_get_language.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_language_t hb_buffer_get_language(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_language$handle() {
        return hb_buffer_get_language.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_language_t hb_buffer_get_language(const hb_buffer_t *buffer)
     * }
     */
    public static MemorySegment hb_buffer_get_language(MemorySegment buffer) {
        var mh$ = hb_buffer_get_language.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_language", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_segment_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_segment_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_segment_properties(hb_buffer_t *buffer, const hb_segment_properties_t *props)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_segment_properties$descriptor() {
        return hb_buffer_set_segment_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_segment_properties(hb_buffer_t *buffer, const hb_segment_properties_t *props)
     * }
     */
    public static MethodHandle hb_buffer_set_segment_properties$handle() {
        return hb_buffer_set_segment_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_segment_properties(hb_buffer_t *buffer, const hb_segment_properties_t *props)
     * }
     */
    public static void hb_buffer_set_segment_properties(MemorySegment buffer, MemorySegment props) {
        var mh$ = hb_buffer_set_segment_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_segment_properties", buffer, props);
            }
            mh$.invokeExact(buffer, props);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_segment_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_segment_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_get_segment_properties(const hb_buffer_t *buffer, hb_segment_properties_t *props)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_segment_properties$descriptor() {
        return hb_buffer_get_segment_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_get_segment_properties(const hb_buffer_t *buffer, hb_segment_properties_t *props)
     * }
     */
    public static MethodHandle hb_buffer_get_segment_properties$handle() {
        return hb_buffer_get_segment_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_get_segment_properties(const hb_buffer_t *buffer, hb_segment_properties_t *props)
     * }
     */
    public static void hb_buffer_get_segment_properties(MemorySegment buffer, MemorySegment props) {
        var mh$ = hb_buffer_get_segment_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_segment_properties", buffer, props);
            }
            mh$.invokeExact(buffer, props);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_guess_segment_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_guess_segment_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_guess_segment_properties(hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_guess_segment_properties$descriptor() {
        return hb_buffer_guess_segment_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_guess_segment_properties(hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_guess_segment_properties$handle() {
        return hb_buffer_guess_segment_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_guess_segment_properties(hb_buffer_t *buffer)
     * }
     */
    public static void hb_buffer_guess_segment_properties(MemorySegment buffer) {
        var mh$ = hb_buffer_guess_segment_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_guess_segment_properties", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_BUFFER_FLAG_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_FLAG_DEFAULT = 0
     * }
     */
    public static int HB_BUFFER_FLAG_DEFAULT() {
        return HB_BUFFER_FLAG_DEFAULT;
    }
    private static final int HB_BUFFER_FLAG_BOT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_FLAG_BOT = 1
     * }
     */
    public static int HB_BUFFER_FLAG_BOT() {
        return HB_BUFFER_FLAG_BOT;
    }
    private static final int HB_BUFFER_FLAG_EOT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_FLAG_EOT = 2
     * }
     */
    public static int HB_BUFFER_FLAG_EOT() {
        return HB_BUFFER_FLAG_EOT;
    }
    private static final int HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 4
     * }
     */
    public static int HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES() {
        return HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES;
    }
    private static final int HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES = 8
     * }
     */
    public static int HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES() {
        return HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES;
    }
    private static final int HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE = 16
     * }
     */
    public static int HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE() {
        return HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE;
    }
    private static final int HB_BUFFER_FLAG_VERIFY = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_FLAG_VERIFY = 32
     * }
     */
    public static int HB_BUFFER_FLAG_VERIFY() {
        return HB_BUFFER_FLAG_VERIFY;
    }
    private static final int HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT = 64
     * }
     */
    public static int HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT() {
        return HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT;
    }
    private static final int HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL = 128
     * }
     */
    public static int HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL() {
        return HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL;
    }
    private static final int HB_BUFFER_FLAG_DEFINED = (int)255L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_FLAG_DEFINED = 255
     * }
     */
    public static int HB_BUFFER_FLAG_DEFINED() {
        return HB_BUFFER_FLAG_DEFINED;
    }

    private static class hb_buffer_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_flags(hb_buffer_t *buffer, hb_buffer_flags_t flags)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_flags$descriptor() {
        return hb_buffer_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_flags(hb_buffer_t *buffer, hb_buffer_flags_t flags)
     * }
     */
    public static MethodHandle hb_buffer_set_flags$handle() {
        return hb_buffer_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_flags(hb_buffer_t *buffer, hb_buffer_flags_t flags)
     * }
     */
    public static void hb_buffer_set_flags(MemorySegment buffer, int flags) {
        var mh$ = hb_buffer_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_flags", buffer, flags);
            }
            mh$.invokeExact(buffer, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_buffer_flags_t hb_buffer_get_flags(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_flags$descriptor() {
        return hb_buffer_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_buffer_flags_t hb_buffer_get_flags(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_flags$handle() {
        return hb_buffer_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_buffer_flags_t hb_buffer_get_flags(const hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_get_flags(MemorySegment buffer) {
        var mh$ = hb_buffer_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_flags", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0
     * }
     */
    public static int HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES() {
        return HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES;
    }
    private static final int HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1
     * }
     */
    public static int HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS() {
        return HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS;
    }
    private static final int HB_BUFFER_CLUSTER_LEVEL_CHARACTERS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_CLUSTER_LEVEL_CHARACTERS = 2
     * }
     */
    public static int HB_BUFFER_CLUSTER_LEVEL_CHARACTERS() {
        return HB_BUFFER_CLUSTER_LEVEL_CHARACTERS;
    }
    private static final int HB_BUFFER_CLUSTER_LEVEL_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_CLUSTER_LEVEL_DEFAULT = 0
     * }
     */
    public static int HB_BUFFER_CLUSTER_LEVEL_DEFAULT() {
        return HB_BUFFER_CLUSTER_LEVEL_DEFAULT;
    }

    private static class hb_buffer_set_cluster_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_cluster_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_cluster_level(hb_buffer_t *buffer, hb_buffer_cluster_level_t cluster_level)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_cluster_level$descriptor() {
        return hb_buffer_set_cluster_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_cluster_level(hb_buffer_t *buffer, hb_buffer_cluster_level_t cluster_level)
     * }
     */
    public static MethodHandle hb_buffer_set_cluster_level$handle() {
        return hb_buffer_set_cluster_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_cluster_level(hb_buffer_t *buffer, hb_buffer_cluster_level_t cluster_level)
     * }
     */
    public static void hb_buffer_set_cluster_level(MemorySegment buffer, int cluster_level) {
        var mh$ = hb_buffer_set_cluster_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_cluster_level", buffer, cluster_level);
            }
            mh$.invokeExact(buffer, cluster_level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_cluster_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_cluster_level"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_buffer_cluster_level_t hb_buffer_get_cluster_level(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_cluster_level$descriptor() {
        return hb_buffer_get_cluster_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_buffer_cluster_level_t hb_buffer_get_cluster_level(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_cluster_level$handle() {
        return hb_buffer_get_cluster_level.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_buffer_cluster_level_t hb_buffer_get_cluster_level(const hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_get_cluster_level(MemorySegment buffer) {
        var mh$ = hb_buffer_get_cluster_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_cluster_level", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_replacement_codepoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_replacement_codepoint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_replacement_codepoint(hb_buffer_t *buffer, hb_codepoint_t replacement)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_replacement_codepoint$descriptor() {
        return hb_buffer_set_replacement_codepoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_replacement_codepoint(hb_buffer_t *buffer, hb_codepoint_t replacement)
     * }
     */
    public static MethodHandle hb_buffer_set_replacement_codepoint$handle() {
        return hb_buffer_set_replacement_codepoint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_replacement_codepoint(hb_buffer_t *buffer, hb_codepoint_t replacement)
     * }
     */
    public static void hb_buffer_set_replacement_codepoint(MemorySegment buffer, int replacement) {
        var mh$ = hb_buffer_set_replacement_codepoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_replacement_codepoint", buffer, replacement);
            }
            mh$.invokeExact(buffer, replacement);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_replacement_codepoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_replacement_codepoint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_buffer_get_replacement_codepoint(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_replacement_codepoint$descriptor() {
        return hb_buffer_get_replacement_codepoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_buffer_get_replacement_codepoint(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_replacement_codepoint$handle() {
        return hb_buffer_get_replacement_codepoint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_buffer_get_replacement_codepoint(const hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_get_replacement_codepoint(MemorySegment buffer) {
        var mh$ = hb_buffer_get_replacement_codepoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_replacement_codepoint", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_invisible_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_invisible_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_invisible_glyph(hb_buffer_t *buffer, hb_codepoint_t invisible)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_invisible_glyph$descriptor() {
        return hb_buffer_set_invisible_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_invisible_glyph(hb_buffer_t *buffer, hb_codepoint_t invisible)
     * }
     */
    public static MethodHandle hb_buffer_set_invisible_glyph$handle() {
        return hb_buffer_set_invisible_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_invisible_glyph(hb_buffer_t *buffer, hb_codepoint_t invisible)
     * }
     */
    public static void hb_buffer_set_invisible_glyph(MemorySegment buffer, int invisible) {
        var mh$ = hb_buffer_set_invisible_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_invisible_glyph", buffer, invisible);
            }
            mh$.invokeExact(buffer, invisible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_invisible_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_invisible_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_buffer_get_invisible_glyph(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_invisible_glyph$descriptor() {
        return hb_buffer_get_invisible_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_buffer_get_invisible_glyph(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_invisible_glyph$handle() {
        return hb_buffer_get_invisible_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_buffer_get_invisible_glyph(const hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_get_invisible_glyph(MemorySegment buffer) {
        var mh$ = hb_buffer_get_invisible_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_invisible_glyph", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_not_found_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_not_found_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_not_found_glyph(hb_buffer_t *buffer, hb_codepoint_t not_found)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_not_found_glyph$descriptor() {
        return hb_buffer_set_not_found_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_not_found_glyph(hb_buffer_t *buffer, hb_codepoint_t not_found)
     * }
     */
    public static MethodHandle hb_buffer_set_not_found_glyph$handle() {
        return hb_buffer_set_not_found_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_not_found_glyph(hb_buffer_t *buffer, hb_codepoint_t not_found)
     * }
     */
    public static void hb_buffer_set_not_found_glyph(MemorySegment buffer, int not_found) {
        var mh$ = hb_buffer_set_not_found_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_not_found_glyph", buffer, not_found);
            }
            mh$.invokeExact(buffer, not_found);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_not_found_glyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_not_found_glyph"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_buffer_get_not_found_glyph(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_not_found_glyph$descriptor() {
        return hb_buffer_get_not_found_glyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_buffer_get_not_found_glyph(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_not_found_glyph$handle() {
        return hb_buffer_get_not_found_glyph.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_codepoint_t hb_buffer_get_not_found_glyph(const hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_get_not_found_glyph(MemorySegment buffer) {
        var mh$ = hb_buffer_get_not_found_glyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_not_found_glyph", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_clear_contents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_clear_contents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_clear_contents(hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_clear_contents$descriptor() {
        return hb_buffer_clear_contents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_clear_contents(hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_clear_contents$handle() {
        return hb_buffer_clear_contents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_clear_contents(hb_buffer_t *buffer)
     * }
     */
    public static void hb_buffer_clear_contents(MemorySegment buffer) {
        var mh$ = hb_buffer_clear_contents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_clear_contents", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_pre_allocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_pre_allocate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_pre_allocate(hb_buffer_t *buffer, unsigned int size)
     * }
     */
    public static FunctionDescriptor hb_buffer_pre_allocate$descriptor() {
        return hb_buffer_pre_allocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_pre_allocate(hb_buffer_t *buffer, unsigned int size)
     * }
     */
    public static MethodHandle hb_buffer_pre_allocate$handle() {
        return hb_buffer_pre_allocate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_pre_allocate(hb_buffer_t *buffer, unsigned int size)
     * }
     */
    public static int hb_buffer_pre_allocate(MemorySegment buffer, int size) {
        var mh$ = hb_buffer_pre_allocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_pre_allocate", buffer, size);
            }
            return (int)mh$.invokeExact(buffer, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_allocation_successful {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_allocation_successful"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_allocation_successful(hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_allocation_successful$descriptor() {
        return hb_buffer_allocation_successful.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_allocation_successful(hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_allocation_successful$handle() {
        return hb_buffer_allocation_successful.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_allocation_successful(hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_allocation_successful(MemorySegment buffer) {
        var mh$ = hb_buffer_allocation_successful.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_allocation_successful", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_reverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_reverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_reverse(hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_reverse$descriptor() {
        return hb_buffer_reverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_reverse(hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_reverse$handle() {
        return hb_buffer_reverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_reverse(hb_buffer_t *buffer)
     * }
     */
    public static void hb_buffer_reverse(MemorySegment buffer) {
        var mh$ = hb_buffer_reverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_reverse", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_reverse_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_reverse_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_reverse_range(hb_buffer_t *buffer, unsigned int start, unsigned int end)
     * }
     */
    public static FunctionDescriptor hb_buffer_reverse_range$descriptor() {
        return hb_buffer_reverse_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_reverse_range(hb_buffer_t *buffer, unsigned int start, unsigned int end)
     * }
     */
    public static MethodHandle hb_buffer_reverse_range$handle() {
        return hb_buffer_reverse_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_reverse_range(hb_buffer_t *buffer, unsigned int start, unsigned int end)
     * }
     */
    public static void hb_buffer_reverse_range(MemorySegment buffer, int start, int end) {
        var mh$ = hb_buffer_reverse_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_reverse_range", buffer, start, end);
            }
            mh$.invokeExact(buffer, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_reverse_clusters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_reverse_clusters"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_reverse_clusters(hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_reverse_clusters$descriptor() {
        return hb_buffer_reverse_clusters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_reverse_clusters(hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_reverse_clusters$handle() {
        return hb_buffer_reverse_clusters.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_reverse_clusters(hb_buffer_t *buffer)
     * }
     */
    public static void hb_buffer_reverse_clusters(MemorySegment buffer) {
        var mh$ = hb_buffer_reverse_clusters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_reverse_clusters", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_add(hb_buffer_t *buffer, hb_codepoint_t codepoint, unsigned int cluster)
     * }
     */
    public static FunctionDescriptor hb_buffer_add$descriptor() {
        return hb_buffer_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_add(hb_buffer_t *buffer, hb_codepoint_t codepoint, unsigned int cluster)
     * }
     */
    public static MethodHandle hb_buffer_add$handle() {
        return hb_buffer_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_add(hb_buffer_t *buffer, hb_codepoint_t codepoint, unsigned int cluster)
     * }
     */
    public static void hb_buffer_add(MemorySegment buffer, int codepoint, int cluster) {
        var mh$ = hb_buffer_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_add", buffer, codepoint, cluster);
            }
            mh$.invokeExact(buffer, codepoint, cluster);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_add_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_add_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_add_utf8(hb_buffer_t *buffer, const char *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static FunctionDescriptor hb_buffer_add_utf8$descriptor() {
        return hb_buffer_add_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_add_utf8(hb_buffer_t *buffer, const char *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static MethodHandle hb_buffer_add_utf8$handle() {
        return hb_buffer_add_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_add_utf8(hb_buffer_t *buffer, const char *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static void hb_buffer_add_utf8(MemorySegment buffer, MemorySegment text, int text_length, int item_offset, int item_length) {
        var mh$ = hb_buffer_add_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_add_utf8", buffer, text, text_length, item_offset, item_length);
            }
            mh$.invokeExact(buffer, text, text_length, item_offset, item_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_add_utf16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_add_utf16"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_add_utf16(hb_buffer_t *buffer, const uint16_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static FunctionDescriptor hb_buffer_add_utf16$descriptor() {
        return hb_buffer_add_utf16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_add_utf16(hb_buffer_t *buffer, const uint16_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static MethodHandle hb_buffer_add_utf16$handle() {
        return hb_buffer_add_utf16.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_add_utf16(hb_buffer_t *buffer, const uint16_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static void hb_buffer_add_utf16(MemorySegment buffer, MemorySegment text, int text_length, int item_offset, int item_length) {
        var mh$ = hb_buffer_add_utf16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_add_utf16", buffer, text, text_length, item_offset, item_length);
            }
            mh$.invokeExact(buffer, text, text_length, item_offset, item_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_add_utf32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_add_utf32"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_add_utf32(hb_buffer_t *buffer, const uint32_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static FunctionDescriptor hb_buffer_add_utf32$descriptor() {
        return hb_buffer_add_utf32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_add_utf32(hb_buffer_t *buffer, const uint32_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static MethodHandle hb_buffer_add_utf32$handle() {
        return hb_buffer_add_utf32.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_add_utf32(hb_buffer_t *buffer, const uint32_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static void hb_buffer_add_utf32(MemorySegment buffer, MemorySegment text, int text_length, int item_offset, int item_length) {
        var mh$ = hb_buffer_add_utf32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_add_utf32", buffer, text, text_length, item_offset, item_length);
            }
            mh$.invokeExact(buffer, text, text_length, item_offset, item_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_add_latin1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_add_latin1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_add_latin1(hb_buffer_t *buffer, const uint8_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static FunctionDescriptor hb_buffer_add_latin1$descriptor() {
        return hb_buffer_add_latin1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_add_latin1(hb_buffer_t *buffer, const uint8_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static MethodHandle hb_buffer_add_latin1$handle() {
        return hb_buffer_add_latin1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_add_latin1(hb_buffer_t *buffer, const uint8_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static void hb_buffer_add_latin1(MemorySegment buffer, MemorySegment text, int text_length, int item_offset, int item_length) {
        var mh$ = hb_buffer_add_latin1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_add_latin1", buffer, text, text_length, item_offset, item_length);
            }
            mh$.invokeExact(buffer, text, text_length, item_offset, item_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_add_codepoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_add_codepoints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_add_codepoints(hb_buffer_t *buffer, const hb_codepoint_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static FunctionDescriptor hb_buffer_add_codepoints$descriptor() {
        return hb_buffer_add_codepoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_add_codepoints(hb_buffer_t *buffer, const hb_codepoint_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static MethodHandle hb_buffer_add_codepoints$handle() {
        return hb_buffer_add_codepoints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_add_codepoints(hb_buffer_t *buffer, const hb_codepoint_t *text, int text_length, unsigned int item_offset, int item_length)
     * }
     */
    public static void hb_buffer_add_codepoints(MemorySegment buffer, MemorySegment text, int text_length, int item_offset, int item_length) {
        var mh$ = hb_buffer_add_codepoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_add_codepoints", buffer, text, text_length, item_offset, item_length);
            }
            mh$.invokeExact(buffer, text, text_length, item_offset, item_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_append(hb_buffer_t *buffer, const hb_buffer_t *source, unsigned int start, unsigned int end)
     * }
     */
    public static FunctionDescriptor hb_buffer_append$descriptor() {
        return hb_buffer_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_append(hb_buffer_t *buffer, const hb_buffer_t *source, unsigned int start, unsigned int end)
     * }
     */
    public static MethodHandle hb_buffer_append$handle() {
        return hb_buffer_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_append(hb_buffer_t *buffer, const hb_buffer_t *source, unsigned int start, unsigned int end)
     * }
     */
    public static void hb_buffer_append(MemorySegment buffer, MemorySegment source, int start, int end) {
        var mh$ = hb_buffer_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_append", buffer, source, start, end);
            }
            mh$.invokeExact(buffer, source, start, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_set_length(hb_buffer_t *buffer, unsigned int length)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_length$descriptor() {
        return hb_buffer_set_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_set_length(hb_buffer_t *buffer, unsigned int length)
     * }
     */
    public static MethodHandle hb_buffer_set_length$handle() {
        return hb_buffer_set_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_set_length(hb_buffer_t *buffer, unsigned int length)
     * }
     */
    public static int hb_buffer_set_length(MemorySegment buffer, int length) {
        var mh$ = hb_buffer_set_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_length", buffer, length);
            }
            return (int)mh$.invokeExact(buffer, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_get_length(const hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_length$descriptor() {
        return hb_buffer_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_get_length(const hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_get_length$handle() {
        return hb_buffer_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_get_length(const hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_get_length(MemorySegment buffer) {
        var mh$ = hb_buffer_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_length", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_glyph_infos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_glyph_infos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_glyph_info_t *hb_buffer_get_glyph_infos(hb_buffer_t *buffer, unsigned int *length)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_glyph_infos$descriptor() {
        return hb_buffer_get_glyph_infos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_glyph_info_t *hb_buffer_get_glyph_infos(hb_buffer_t *buffer, unsigned int *length)
     * }
     */
    public static MethodHandle hb_buffer_get_glyph_infos$handle() {
        return hb_buffer_get_glyph_infos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_glyph_info_t *hb_buffer_get_glyph_infos(hb_buffer_t *buffer, unsigned int *length)
     * }
     */
    public static MemorySegment hb_buffer_get_glyph_infos(MemorySegment buffer, MemorySegment length) {
        var mh$ = hb_buffer_get_glyph_infos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_glyph_infos", buffer, length);
            }
            return (MemorySegment)mh$.invokeExact(buffer, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_get_glyph_positions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_get_glyph_positions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_glyph_position_t *hb_buffer_get_glyph_positions(hb_buffer_t *buffer, unsigned int *length)
     * }
     */
    public static FunctionDescriptor hb_buffer_get_glyph_positions$descriptor() {
        return hb_buffer_get_glyph_positions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_glyph_position_t *hb_buffer_get_glyph_positions(hb_buffer_t *buffer, unsigned int *length)
     * }
     */
    public static MethodHandle hb_buffer_get_glyph_positions$handle() {
        return hb_buffer_get_glyph_positions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_glyph_position_t *hb_buffer_get_glyph_positions(hb_buffer_t *buffer, unsigned int *length)
     * }
     */
    public static MemorySegment hb_buffer_get_glyph_positions(MemorySegment buffer, MemorySegment length) {
        var mh$ = hb_buffer_get_glyph_positions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_get_glyph_positions", buffer, length);
            }
            return (MemorySegment)mh$.invokeExact(buffer, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_has_positions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_has_positions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_has_positions(hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_has_positions$descriptor() {
        return hb_buffer_has_positions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_has_positions(hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_has_positions$handle() {
        return hb_buffer_has_positions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_has_positions(hb_buffer_t *buffer)
     * }
     */
    public static int hb_buffer_has_positions(MemorySegment buffer) {
        var mh$ = hb_buffer_has_positions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_has_positions", buffer);
            }
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_normalize_glyphs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_normalize_glyphs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_normalize_glyphs(hb_buffer_t *buffer)
     * }
     */
    public static FunctionDescriptor hb_buffer_normalize_glyphs$descriptor() {
        return hb_buffer_normalize_glyphs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_normalize_glyphs(hb_buffer_t *buffer)
     * }
     */
    public static MethodHandle hb_buffer_normalize_glyphs$handle() {
        return hb_buffer_normalize_glyphs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_normalize_glyphs(hb_buffer_t *buffer)
     * }
     */
    public static void hb_buffer_normalize_glyphs(MemorySegment buffer) {
        var mh$ = hb_buffer_normalize_glyphs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_normalize_glyphs", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_BUFFER_SERIALIZE_FLAG_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FLAG_DEFAULT() {
        return HB_BUFFER_SERIALIZE_FLAG_DEFAULT;
    }
    private static final int HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 1
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS() {
        return HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS;
    }
    private static final int HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 2
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS() {
        return HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS;
    }
    private static final int HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 4
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES() {
        return HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES;
    }
    private static final int HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = 8
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS() {
        return HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS;
    }
    private static final int HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS = 16
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS() {
        return HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS;
    }
    private static final int HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES = 32
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES() {
        return HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES;
    }
    private static final int HB_BUFFER_SERIALIZE_FLAG_DEFINED = (int)63L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FLAG_DEFINED = 63
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FLAG_DEFINED() {
        return HB_BUFFER_SERIALIZE_FLAG_DEFINED;
    }
    private static final int HB_BUFFER_SERIALIZE_FORMAT_TEXT = (int)1413830740L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FORMAT_TEXT = 1413830740
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FORMAT_TEXT() {
        return HB_BUFFER_SERIALIZE_FORMAT_TEXT;
    }
    private static final int HB_BUFFER_SERIALIZE_FORMAT_JSON = (int)1246973774L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FORMAT_JSON = 1246973774
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FORMAT_JSON() {
        return HB_BUFFER_SERIALIZE_FORMAT_JSON;
    }
    private static final int HB_BUFFER_SERIALIZE_FORMAT_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_SERIALIZE_FORMAT_INVALID = 0
     * }
     */
    public static int HB_BUFFER_SERIALIZE_FORMAT_INVALID() {
        return HB_BUFFER_SERIALIZE_FORMAT_INVALID;
    }

    private static class hb_buffer_serialize_format_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_serialize_format_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_buffer_serialize_format_t hb_buffer_serialize_format_from_string(const char *str, int len)
     * }
     */
    public static FunctionDescriptor hb_buffer_serialize_format_from_string$descriptor() {
        return hb_buffer_serialize_format_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_buffer_serialize_format_t hb_buffer_serialize_format_from_string(const char *str, int len)
     * }
     */
    public static MethodHandle hb_buffer_serialize_format_from_string$handle() {
        return hb_buffer_serialize_format_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_buffer_serialize_format_t hb_buffer_serialize_format_from_string(const char *str, int len)
     * }
     */
    public static int hb_buffer_serialize_format_from_string(MemorySegment str, int len) {
        var mh$ = hb_buffer_serialize_format_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_serialize_format_from_string", str, len);
            }
            return (int)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_serialize_format_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_serialize_format_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *hb_buffer_serialize_format_to_string(hb_buffer_serialize_format_t format)
     * }
     */
    public static FunctionDescriptor hb_buffer_serialize_format_to_string$descriptor() {
        return hb_buffer_serialize_format_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *hb_buffer_serialize_format_to_string(hb_buffer_serialize_format_t format)
     * }
     */
    public static MethodHandle hb_buffer_serialize_format_to_string$handle() {
        return hb_buffer_serialize_format_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *hb_buffer_serialize_format_to_string(hb_buffer_serialize_format_t format)
     * }
     */
    public static MemorySegment hb_buffer_serialize_format_to_string(int format) {
        var mh$ = hb_buffer_serialize_format_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_serialize_format_to_string", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_serialize_list_formats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_serialize_list_formats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char **hb_buffer_serialize_list_formats()
     * }
     */
    public static FunctionDescriptor hb_buffer_serialize_list_formats$descriptor() {
        return hb_buffer_serialize_list_formats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char **hb_buffer_serialize_list_formats()
     * }
     */
    public static MethodHandle hb_buffer_serialize_list_formats$handle() {
        return hb_buffer_serialize_list_formats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char **hb_buffer_serialize_list_formats()
     * }
     */
    public static MemorySegment hb_buffer_serialize_list_formats() {
        var mh$ = hb_buffer_serialize_list_formats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_serialize_list_formats");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_serialize_glyphs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_serialize_glyphs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_serialize_glyphs(hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_font_t *font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags)
     * }
     */
    public static FunctionDescriptor hb_buffer_serialize_glyphs$descriptor() {
        return hb_buffer_serialize_glyphs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_serialize_glyphs(hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_font_t *font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags)
     * }
     */
    public static MethodHandle hb_buffer_serialize_glyphs$handle() {
        return hb_buffer_serialize_glyphs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_serialize_glyphs(hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_font_t *font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags)
     * }
     */
    public static int hb_buffer_serialize_glyphs(MemorySegment buffer, int start, int end, MemorySegment buf, int buf_size, MemorySegment buf_consumed, MemorySegment font, int format, int flags) {
        var mh$ = hb_buffer_serialize_glyphs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_serialize_glyphs", buffer, start, end, buf, buf_size, buf_consumed, font, format, flags);
            }
            return (int)mh$.invokeExact(buffer, start, end, buf, buf_size, buf_consumed, font, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_serialize_unicode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_serialize_unicode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_serialize_unicode(hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags)
     * }
     */
    public static FunctionDescriptor hb_buffer_serialize_unicode$descriptor() {
        return hb_buffer_serialize_unicode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_serialize_unicode(hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags)
     * }
     */
    public static MethodHandle hb_buffer_serialize_unicode$handle() {
        return hb_buffer_serialize_unicode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_serialize_unicode(hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags)
     * }
     */
    public static int hb_buffer_serialize_unicode(MemorySegment buffer, int start, int end, MemorySegment buf, int buf_size, MemorySegment buf_consumed, int format, int flags) {
        var mh$ = hb_buffer_serialize_unicode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_serialize_unicode", buffer, start, end, buf, buf_size, buf_consumed, format, flags);
            }
            return (int)mh$.invokeExact(buffer, start, end, buf, buf_size, buf_consumed, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_serialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_serialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_serialize(hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_font_t *font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags)
     * }
     */
    public static FunctionDescriptor hb_buffer_serialize$descriptor() {
        return hb_buffer_serialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_serialize(hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_font_t *font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags)
     * }
     */
    public static MethodHandle hb_buffer_serialize$handle() {
        return hb_buffer_serialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_buffer_serialize(hb_buffer_t *buffer, unsigned int start, unsigned int end, char *buf, unsigned int buf_size, unsigned int *buf_consumed, hb_font_t *font, hb_buffer_serialize_format_t format, hb_buffer_serialize_flags_t flags)
     * }
     */
    public static int hb_buffer_serialize(MemorySegment buffer, int start, int end, MemorySegment buf, int buf_size, MemorySegment buf_consumed, MemorySegment font, int format, int flags) {
        var mh$ = hb_buffer_serialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_serialize", buffer, start, end, buf, buf_size, buf_consumed, font, format, flags);
            }
            return (int)mh$.invokeExact(buffer, start, end, buf, buf_size, buf_consumed, font, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_deserialize_glyphs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_deserialize_glyphs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_deserialize_glyphs(hb_buffer_t *buffer, const char *buf, int buf_len, const char **end_ptr, hb_font_t *font, hb_buffer_serialize_format_t format)
     * }
     */
    public static FunctionDescriptor hb_buffer_deserialize_glyphs$descriptor() {
        return hb_buffer_deserialize_glyphs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_deserialize_glyphs(hb_buffer_t *buffer, const char *buf, int buf_len, const char **end_ptr, hb_font_t *font, hb_buffer_serialize_format_t format)
     * }
     */
    public static MethodHandle hb_buffer_deserialize_glyphs$handle() {
        return hb_buffer_deserialize_glyphs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_deserialize_glyphs(hb_buffer_t *buffer, const char *buf, int buf_len, const char **end_ptr, hb_font_t *font, hb_buffer_serialize_format_t format)
     * }
     */
    public static int hb_buffer_deserialize_glyphs(MemorySegment buffer, MemorySegment buf, int buf_len, MemorySegment end_ptr, MemorySegment font, int format) {
        var mh$ = hb_buffer_deserialize_glyphs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_deserialize_glyphs", buffer, buf, buf_len, end_ptr, font, format);
            }
            return (int)mh$.invokeExact(buffer, buf, buf_len, end_ptr, font, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_deserialize_unicode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_deserialize_unicode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_deserialize_unicode(hb_buffer_t *buffer, const char *buf, int buf_len, const char **end_ptr, hb_buffer_serialize_format_t format)
     * }
     */
    public static FunctionDescriptor hb_buffer_deserialize_unicode$descriptor() {
        return hb_buffer_deserialize_unicode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_deserialize_unicode(hb_buffer_t *buffer, const char *buf, int buf_len, const char **end_ptr, hb_buffer_serialize_format_t format)
     * }
     */
    public static MethodHandle hb_buffer_deserialize_unicode$handle() {
        return hb_buffer_deserialize_unicode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_buffer_deserialize_unicode(hb_buffer_t *buffer, const char *buf, int buf_len, const char **end_ptr, hb_buffer_serialize_format_t format)
     * }
     */
    public static int hb_buffer_deserialize_unicode(MemorySegment buffer, MemorySegment buf, int buf_len, MemorySegment end_ptr, int format) {
        var mh$ = hb_buffer_deserialize_unicode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_deserialize_unicode", buffer, buf, buf_len, end_ptr, format);
            }
            return (int)mh$.invokeExact(buffer, buf, buf_len, end_ptr, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_BUFFER_DIFF_FLAG_EQUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_DIFF_FLAG_EQUAL = 0
     * }
     */
    public static int HB_BUFFER_DIFF_FLAG_EQUAL() {
        return HB_BUFFER_DIFF_FLAG_EQUAL;
    }
    private static final int HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH = 1
     * }
     */
    public static int HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH() {
        return HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH;
    }
    private static final int HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH = 2
     * }
     */
    public static int HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH() {
        return HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH;
    }
    private static final int HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT = 4
     * }
     */
    public static int HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT() {
        return HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT;
    }
    private static final int HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT = 8
     * }
     */
    public static int HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT() {
        return HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT;
    }
    private static final int HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH = 16
     * }
     */
    public static int HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH() {
        return HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH;
    }
    private static final int HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH = 32
     * }
     */
    public static int HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH() {
        return HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH;
    }
    private static final int HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH = 64
     * }
     */
    public static int HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH() {
        return HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH;
    }
    private static final int HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH = 128
     * }
     */
    public static int HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH() {
        return HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH;
    }

    private static class hb_buffer_diff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_diff"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_buffer_diff_flags_t hb_buffer_diff(hb_buffer_t *buffer, hb_buffer_t *reference, hb_codepoint_t dottedcircle_glyph, unsigned int position_fuzz)
     * }
     */
    public static FunctionDescriptor hb_buffer_diff$descriptor() {
        return hb_buffer_diff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_buffer_diff_flags_t hb_buffer_diff(hb_buffer_t *buffer, hb_buffer_t *reference, hb_codepoint_t dottedcircle_glyph, unsigned int position_fuzz)
     * }
     */
    public static MethodHandle hb_buffer_diff$handle() {
        return hb_buffer_diff.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_buffer_diff_flags_t hb_buffer_diff(hb_buffer_t *buffer, hb_buffer_t *reference, hb_codepoint_t dottedcircle_glyph, unsigned int position_fuzz)
     * }
     */
    public static int hb_buffer_diff(MemorySegment buffer, MemorySegment reference, int dottedcircle_glyph, int position_fuzz) {
        var mh$ = hb_buffer_diff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_diff", buffer, reference, dottedcircle_glyph, position_fuzz);
            }
            return (int)mh$.invokeExact(buffer, reference, dottedcircle_glyph, position_fuzz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_buffer_set_message_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_buffer_set_message_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_message_func(hb_buffer_t *buffer, hb_buffer_message_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_buffer_set_message_func$descriptor() {
        return hb_buffer_set_message_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_buffer_set_message_func(hb_buffer_t *buffer, hb_buffer_message_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_buffer_set_message_func$handle() {
        return hb_buffer_set_message_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_buffer_set_message_func(hb_buffer_t *buffer, hb_buffer_message_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_buffer_set_message_func(MemorySegment buffer, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_buffer_set_message_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_buffer_set_message_func", buffer, func, user_data, destroy);
            }
            mh$.invokeExact(buffer, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_func$descriptor() {
        return hb_font_funcs_set_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_func$handle() {
        return hb_font_funcs_set_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_set_eastasian_width_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_set_eastasian_width_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_eastasian_width_func(hb_unicode_funcs_t *ufuncs, hb_unicode_eastasian_width_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_set_eastasian_width_func$descriptor() {
        return hb_unicode_funcs_set_eastasian_width_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_eastasian_width_func(hb_unicode_funcs_t *ufuncs, hb_unicode_eastasian_width_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_unicode_funcs_set_eastasian_width_func$handle() {
        return hb_unicode_funcs_set_eastasian_width_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_eastasian_width_func(hb_unicode_funcs_t *ufuncs, hb_unicode_eastasian_width_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_unicode_funcs_set_eastasian_width_func(MemorySegment ufuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_unicode_funcs_set_eastasian_width_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_set_eastasian_width_func", ufuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ufuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_eastasian_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_eastasian_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_unicode_eastasian_width(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static FunctionDescriptor hb_unicode_eastasian_width$descriptor() {
        return hb_unicode_eastasian_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_unicode_eastasian_width(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static MethodHandle hb_unicode_eastasian_width$handle() {
        return hb_unicode_eastasian_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_unicode_eastasian_width(hb_unicode_funcs_t *ufuncs, hb_codepoint_t unicode)
     * }
     */
    public static int hb_unicode_eastasian_width(MemorySegment ufuncs, int unicode) {
        var mh$ = hb_unicode_eastasian_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_eastasian_width", ufuncs, unicode);
            }
            return (int)mh$.invokeExact(ufuncs, unicode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_funcs_set_decompose_compatibility_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_funcs_set_decompose_compatibility_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_decompose_compatibility_func(hb_unicode_funcs_t *ufuncs, hb_unicode_decompose_compatibility_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_unicode_funcs_set_decompose_compatibility_func$descriptor() {
        return hb_unicode_funcs_set_decompose_compatibility_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_decompose_compatibility_func(hb_unicode_funcs_t *ufuncs, hb_unicode_decompose_compatibility_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_unicode_funcs_set_decompose_compatibility_func$handle() {
        return hb_unicode_funcs_set_decompose_compatibility_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_unicode_funcs_set_decompose_compatibility_func(hb_unicode_funcs_t *ufuncs, hb_unicode_decompose_compatibility_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_unicode_funcs_set_decompose_compatibility_func(MemorySegment ufuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_unicode_funcs_set_decompose_compatibility_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_funcs_set_decompose_compatibility_func", ufuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ufuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_unicode_decompose_compatibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_unicode_decompose_compatibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int hb_unicode_decompose_compatibility(hb_unicode_funcs_t *ufuncs, hb_codepoint_t u, hb_codepoint_t *decomposed)
     * }
     */
    public static FunctionDescriptor hb_unicode_decompose_compatibility$descriptor() {
        return hb_unicode_decompose_compatibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int hb_unicode_decompose_compatibility(hb_unicode_funcs_t *ufuncs, hb_codepoint_t u, hb_codepoint_t *decomposed)
     * }
     */
    public static MethodHandle hb_unicode_decompose_compatibility$handle() {
        return hb_unicode_decompose_compatibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int hb_unicode_decompose_compatibility(hb_unicode_funcs_t *ufuncs, hb_codepoint_t u, hb_codepoint_t *decomposed)
     * }
     */
    public static int hb_unicode_decompose_compatibility(MemorySegment ufuncs, int u, MemorySegment decomposed) {
        var mh$ = hb_unicode_decompose_compatibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_unicode_decompose_compatibility", ufuncs, u, decomposed);
            }
            return (int)mh$.invokeExact(ufuncs, u, decomposed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_v_kerning_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_v_kerning_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_kerning_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_kerning_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_v_kerning_func$descriptor() {
        return hb_font_funcs_set_glyph_v_kerning_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_kerning_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_kerning_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_v_kerning_func$handle() {
        return hb_font_funcs_set_glyph_v_kerning_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_v_kerning_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_v_kerning_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_v_kerning_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_v_kerning_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_v_kerning_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_v_kerning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_v_kerning"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_v_kerning(hb_font_t *font, hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_v_kerning$descriptor() {
        return hb_font_get_glyph_v_kerning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_v_kerning(hb_font_t *font, hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph)
     * }
     */
    public static MethodHandle hb_font_get_glyph_v_kerning$handle() {
        return hb_font_get_glyph_v_kerning.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_position_t hb_font_get_glyph_v_kerning(hb_font_t *font, hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph)
     * }
     */
    public static int hb_font_get_glyph_v_kerning(MemorySegment font, int top_glyph, int bottom_glyph) {
        var mh$ = hb_font_get_glyph_v_kerning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_v_kerning", font, top_glyph, bottom_glyph);
            }
            return (int)mh$.invokeExact(font, top_glyph, bottom_glyph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_funcs_set_glyph_shape_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_funcs_set_glyph_shape_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_shape_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_shape_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor hb_font_funcs_set_glyph_shape_func$descriptor() {
        return hb_font_funcs_set_glyph_shape_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_shape_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_shape_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static MethodHandle hb_font_funcs_set_glyph_shape_func$handle() {
        return hb_font_funcs_set_glyph_shape_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_funcs_set_glyph_shape_func(hb_font_funcs_t *ffuncs, hb_font_get_glyph_shape_func_t func, void *user_data, hb_destroy_func_t destroy)
     * }
     */
    public static void hb_font_funcs_set_glyph_shape_func(MemorySegment ffuncs, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = hb_font_funcs_set_glyph_shape_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_funcs_set_glyph_shape_func", ffuncs, func, user_data, destroy);
            }
            mh$.invokeExact(ffuncs, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_font_get_glyph_shape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_font_get_glyph_shape"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_shape(hb_font_t *font, hb_codepoint_t glyph, hb_draw_funcs_t *dfuncs, void *draw_data)
     * }
     */
    public static FunctionDescriptor hb_font_get_glyph_shape$descriptor() {
        return hb_font_get_glyph_shape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_shape(hb_font_t *font, hb_codepoint_t glyph, hb_draw_funcs_t *dfuncs, void *draw_data)
     * }
     */
    public static MethodHandle hb_font_get_glyph_shape$handle() {
        return hb_font_get_glyph_shape.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_font_get_glyph_shape(hb_font_t *font, hb_codepoint_t glyph, hb_draw_funcs_t *dfuncs, void *draw_data)
     * }
     */
    public static void hb_font_get_glyph_shape(MemorySegment font, int glyph, MemorySegment dfuncs, MemorySegment draw_data) {
        var mh$ = hb_font_get_glyph_shape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_font_get_glyph_shape", font, glyph, dfuncs, draw_data);
            }
            mh$.invokeExact(font, glyph, dfuncs, draw_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_shape(hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features)
     * }
     */
    public static FunctionDescriptor hb_shape$descriptor() {
        return hb_shape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_shape(hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features)
     * }
     */
    public static MethodHandle hb_shape$handle() {
        return hb_shape.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_shape(hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features)
     * }
     */
    public static void hb_shape(MemorySegment font, MemorySegment buffer, MemorySegment features, int num_features) {
        var mh$ = hb_shape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape", font, buffer, features, num_features);
            }
            mh$.invokeExact(font, buffer, features, num_features);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_full(hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features, const char *const *shaper_list)
     * }
     */
    public static FunctionDescriptor hb_shape_full$descriptor() {
        return hb_shape_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_full(hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features, const char *const *shaper_list)
     * }
     */
    public static MethodHandle hb_shape_full$handle() {
        return hb_shape_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_full(hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features, const char *const *shaper_list)
     * }
     */
    public static int hb_shape_full(MemorySegment font, MemorySegment buffer, MemorySegment features, int num_features, MemorySegment shaper_list) {
        var mh$ = hb_shape_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_full", font, buffer, features, num_features, shaper_list);
            }
            return (int)mh$.invokeExact(font, buffer, features, num_features, shaper_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_justify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_justify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_justify(hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features, const char *const *shaper_list, float min_target_advance, float max_target_advance, float *advance, hb_tag_t *var_tag, float *var_value)
     * }
     */
    public static FunctionDescriptor hb_shape_justify$descriptor() {
        return hb_shape_justify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_justify(hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features, const char *const *shaper_list, float min_target_advance, float max_target_advance, float *advance, hb_tag_t *var_tag, float *var_value)
     * }
     */
    public static MethodHandle hb_shape_justify$handle() {
        return hb_shape_justify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_justify(hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features, const char *const *shaper_list, float min_target_advance, float max_target_advance, float *advance, hb_tag_t *var_tag, float *var_value)
     * }
     */
    public static int hb_shape_justify(MemorySegment font, MemorySegment buffer, MemorySegment features, int num_features, MemorySegment shaper_list, float min_target_advance, float max_target_advance, MemorySegment advance, MemorySegment var_tag, MemorySegment var_value) {
        var mh$ = hb_shape_justify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_justify", font, buffer, features, num_features, shaper_list, min_target_advance, max_target_advance, advance, var_tag, var_value);
            }
            return (int)mh$.invokeExact(font, buffer, features, num_features, shaper_list, min_target_advance, max_target_advance, advance, var_tag, var_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_list_shapers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_list_shapers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char **hb_shape_list_shapers()
     * }
     */
    public static FunctionDescriptor hb_shape_list_shapers$descriptor() {
        return hb_shape_list_shapers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char **hb_shape_list_shapers()
     * }
     */
    public static MethodHandle hb_shape_list_shapers$handle() {
        return hb_shape_list_shapers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char **hb_shape_list_shapers()
     * }
     */
    public static MemorySegment hb_shape_list_shapers() {
        var mh$ = hb_shape_list_shapers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_list_shapers");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const char *const *shaper_list)
     * }
     */
    public static FunctionDescriptor hb_shape_plan_create$descriptor() {
        return hb_shape_plan_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const char *const *shaper_list)
     * }
     */
    public static MethodHandle hb_shape_plan_create$handle() {
        return hb_shape_plan_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const char *const *shaper_list)
     * }
     */
    public static MemorySegment hb_shape_plan_create(MemorySegment face, MemorySegment props, MemorySegment user_features, int num_user_features, MemorySegment shaper_list) {
        var mh$ = hb_shape_plan_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_create", face, props, user_features, num_user_features, shaper_list);
            }
            return (MemorySegment)mh$.invokeExact(face, props, user_features, num_user_features, shaper_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_create_cached {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_create_cached"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create_cached(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const char *const *shaper_list)
     * }
     */
    public static FunctionDescriptor hb_shape_plan_create_cached$descriptor() {
        return hb_shape_plan_create_cached.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create_cached(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const char *const *shaper_list)
     * }
     */
    public static MethodHandle hb_shape_plan_create_cached$handle() {
        return hb_shape_plan_create_cached.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create_cached(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const char *const *shaper_list)
     * }
     */
    public static MemorySegment hb_shape_plan_create_cached(MemorySegment face, MemorySegment props, MemorySegment user_features, int num_user_features, MemorySegment shaper_list) {
        var mh$ = hb_shape_plan_create_cached.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_create_cached", face, props, user_features, num_user_features, shaper_list);
            }
            return (MemorySegment)mh$.invokeExact(face, props, user_features, num_user_features, shaper_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_create2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_create2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create2(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const int *coords, unsigned int num_coords, const char *const *shaper_list)
     * }
     */
    public static FunctionDescriptor hb_shape_plan_create2$descriptor() {
        return hb_shape_plan_create2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create2(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const int *coords, unsigned int num_coords, const char *const *shaper_list)
     * }
     */
    public static MethodHandle hb_shape_plan_create2$handle() {
        return hb_shape_plan_create2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create2(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const int *coords, unsigned int num_coords, const char *const *shaper_list)
     * }
     */
    public static MemorySegment hb_shape_plan_create2(MemorySegment face, MemorySegment props, MemorySegment user_features, int num_user_features, MemorySegment coords, int num_coords, MemorySegment shaper_list) {
        var mh$ = hb_shape_plan_create2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_create2", face, props, user_features, num_user_features, coords, num_coords, shaper_list);
            }
            return (MemorySegment)mh$.invokeExact(face, props, user_features, num_user_features, coords, num_coords, shaper_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_create_cached2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_create_cached2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create_cached2(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const int *coords, unsigned int num_coords, const char *const *shaper_list)
     * }
     */
    public static FunctionDescriptor hb_shape_plan_create_cached2$descriptor() {
        return hb_shape_plan_create_cached2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create_cached2(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const int *coords, unsigned int num_coords, const char *const *shaper_list)
     * }
     */
    public static MethodHandle hb_shape_plan_create_cached2$handle() {
        return hb_shape_plan_create_cached2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_create_cached2(hb_face_t *face, const hb_segment_properties_t *props, const hb_feature_t *user_features, unsigned int num_user_features, const int *coords, unsigned int num_coords, const char *const *shaper_list)
     * }
     */
    public static MemorySegment hb_shape_plan_create_cached2(MemorySegment face, MemorySegment props, MemorySegment user_features, int num_user_features, MemorySegment coords, int num_coords, MemorySegment shaper_list) {
        var mh$ = hb_shape_plan_create_cached2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_create_cached2", face, props, user_features, num_user_features, coords, num_coords, shaper_list);
            }
            return (MemorySegment)mh$.invokeExact(face, props, user_features, num_user_features, coords, num_coords, shaper_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_get_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_get_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_get_empty()
     * }
     */
    public static FunctionDescriptor hb_shape_plan_get_empty$descriptor() {
        return hb_shape_plan_get_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_get_empty()
     * }
     */
    public static MethodHandle hb_shape_plan_get_empty$handle() {
        return hb_shape_plan_get_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_get_empty()
     * }
     */
    public static MemorySegment hb_shape_plan_get_empty() {
        var mh$ = hb_shape_plan_get_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_get_empty");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_reference(hb_shape_plan_t *shape_plan)
     * }
     */
    public static FunctionDescriptor hb_shape_plan_reference$descriptor() {
        return hb_shape_plan_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_reference(hb_shape_plan_t *shape_plan)
     * }
     */
    public static MethodHandle hb_shape_plan_reference$handle() {
        return hb_shape_plan_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_shape_plan_t *hb_shape_plan_reference(hb_shape_plan_t *shape_plan)
     * }
     */
    public static MemorySegment hb_shape_plan_reference(MemorySegment shape_plan) {
        var mh$ = hb_shape_plan_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_reference", shape_plan);
            }
            return (MemorySegment)mh$.invokeExact(shape_plan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_shape_plan_destroy(hb_shape_plan_t *shape_plan)
     * }
     */
    public static FunctionDescriptor hb_shape_plan_destroy$descriptor() {
        return hb_shape_plan_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_shape_plan_destroy(hb_shape_plan_t *shape_plan)
     * }
     */
    public static MethodHandle hb_shape_plan_destroy$handle() {
        return hb_shape_plan_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_shape_plan_destroy(hb_shape_plan_t *shape_plan)
     * }
     */
    public static void hb_shape_plan_destroy(MemorySegment shape_plan) {
        var mh$ = hb_shape_plan_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_destroy", shape_plan);
            }
            mh$.invokeExact(shape_plan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_plan_set_user_data(hb_shape_plan_t *shape_plan, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static FunctionDescriptor hb_shape_plan_set_user_data$descriptor() {
        return hb_shape_plan_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_plan_set_user_data(hb_shape_plan_t *shape_plan, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static MethodHandle hb_shape_plan_set_user_data$handle() {
        return hb_shape_plan_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_plan_set_user_data(hb_shape_plan_t *shape_plan, hb_user_data_key_t *key, void *data, hb_destroy_func_t destroy, hb_bool_t replace)
     * }
     */
    public static int hb_shape_plan_set_user_data(MemorySegment shape_plan, MemorySegment key, MemorySegment data, MemorySegment destroy, int replace) {
        var mh$ = hb_shape_plan_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_set_user_data", shape_plan, key, data, destroy, replace);
            }
            return (int)mh$.invokeExact(shape_plan, key, data, destroy, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *hb_shape_plan_get_user_data(const hb_shape_plan_t *shape_plan, hb_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor hb_shape_plan_get_user_data$descriptor() {
        return hb_shape_plan_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *hb_shape_plan_get_user_data(const hb_shape_plan_t *shape_plan, hb_user_data_key_t *key)
     * }
     */
    public static MethodHandle hb_shape_plan_get_user_data$handle() {
        return hb_shape_plan_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *hb_shape_plan_get_user_data(const hb_shape_plan_t *shape_plan, hb_user_data_key_t *key)
     * }
     */
    public static MemorySegment hb_shape_plan_get_user_data(MemorySegment shape_plan, MemorySegment key) {
        var mh$ = hb_shape_plan_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_get_user_data", shape_plan, key);
            }
            return (MemorySegment)mh$.invokeExact(shape_plan, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_execute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_execute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_plan_execute(hb_shape_plan_t *shape_plan, hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features)
     * }
     */
    public static FunctionDescriptor hb_shape_plan_execute$descriptor() {
        return hb_shape_plan_execute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_plan_execute(hb_shape_plan_t *shape_plan, hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features)
     * }
     */
    public static MethodHandle hb_shape_plan_execute$handle() {
        return hb_shape_plan_execute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_shape_plan_execute(hb_shape_plan_t *shape_plan, hb_font_t *font, hb_buffer_t *buffer, const hb_feature_t *features, unsigned int num_features)
     * }
     */
    public static int hb_shape_plan_execute(MemorySegment shape_plan, MemorySegment font, MemorySegment buffer, MemorySegment features, int num_features) {
        var mh$ = hb_shape_plan_execute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_execute", shape_plan, font, buffer, features, num_features);
            }
            return (int)mh$.invokeExact(shape_plan, font, buffer, features, num_features);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_shape_plan_get_shaper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_shape_plan_get_shaper"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *hb_shape_plan_get_shaper(hb_shape_plan_t *shape_plan)
     * }
     */
    public static FunctionDescriptor hb_shape_plan_get_shaper$descriptor() {
        return hb_shape_plan_get_shaper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *hb_shape_plan_get_shaper(hb_shape_plan_t *shape_plan)
     * }
     */
    public static MethodHandle hb_shape_plan_get_shaper$handle() {
        return hb_shape_plan_get_shaper.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *hb_shape_plan_get_shaper(hb_shape_plan_t *shape_plan)
     * }
     */
    public static MemorySegment hb_shape_plan_get_shaper(MemorySegment shape_plan) {
        var mh$ = hb_shape_plan_get_shaper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_shape_plan_get_shaper", shape_plan);
            }
            return (MemorySegment)mh$.invokeExact(shape_plan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int HB_STYLE_TAG_ITALIC = (int)1769234796L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_STYLE_TAG_ITALIC = 1769234796
     * }
     */
    public static int HB_STYLE_TAG_ITALIC() {
        return HB_STYLE_TAG_ITALIC;
    }
    private static final int HB_STYLE_TAG_OPTICAL_SIZE = (int)1869640570L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_STYLE_TAG_OPTICAL_SIZE = 1869640570
     * }
     */
    public static int HB_STYLE_TAG_OPTICAL_SIZE() {
        return HB_STYLE_TAG_OPTICAL_SIZE;
    }
    private static final int HB_STYLE_TAG_SLANT_ANGLE = (int)1936486004L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_STYLE_TAG_SLANT_ANGLE = 1936486004
     * }
     */
    public static int HB_STYLE_TAG_SLANT_ANGLE() {
        return HB_STYLE_TAG_SLANT_ANGLE;
    }
    private static final int HB_STYLE_TAG_SLANT_RATIO = (int)1399615092L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_STYLE_TAG_SLANT_RATIO = 1399615092
     * }
     */
    public static int HB_STYLE_TAG_SLANT_RATIO() {
        return HB_STYLE_TAG_SLANT_RATIO;
    }
    private static final int HB_STYLE_TAG_WIDTH = (int)2003072104L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_STYLE_TAG_WIDTH = 2003072104
     * }
     */
    public static int HB_STYLE_TAG_WIDTH() {
        return HB_STYLE_TAG_WIDTH;
    }
    private static final int HB_STYLE_TAG_WEIGHT = (int)2003265652L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.HB_STYLE_TAG_WEIGHT = 2003265652
     * }
     */
    public static int HB_STYLE_TAG_WEIGHT() {
        return HB_STYLE_TAG_WEIGHT;
    }
    private static final int _HB_STYLE_TAG_MAX_VALUE = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>._HB_STYLE_TAG_MAX_VALUE = 2147483647
     * }
     */
    public static int _HB_STYLE_TAG_MAX_VALUE() {
        return _HB_STYLE_TAG_MAX_VALUE;
    }

    private static class hb_style_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_style_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float hb_style_get_value(hb_font_t *font, hb_style_tag_t style_tag)
     * }
     */
    public static FunctionDescriptor hb_style_get_value$descriptor() {
        return hb_style_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float hb_style_get_value(hb_font_t *font, hb_style_tag_t style_tag)
     * }
     */
    public static MethodHandle hb_style_get_value$handle() {
        return hb_style_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern float hb_style_get_value(hb_font_t *font, hb_style_tag_t style_tag)
     * }
     */
    public static float hb_style_get_value(MemorySegment font, int style_tag) {
        var mh$ = hb_style_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_style_get_value", font, style_tag);
            }
            return (float)mh$.invokeExact(font, style_tag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void hb_version(unsigned int *major, unsigned int *minor, unsigned int *micro)
     * }
     */
    public static FunctionDescriptor hb_version$descriptor() {
        return hb_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void hb_version(unsigned int *major, unsigned int *minor, unsigned int *micro)
     * }
     */
    public static MethodHandle hb_version$handle() {
        return hb_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void hb_version(unsigned int *major, unsigned int *minor, unsigned int *micro)
     * }
     */
    public static void hb_version(MemorySegment major, MemorySegment minor, MemorySegment micro) {
        var mh$ = hb_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_version", major, minor, micro);
            }
            mh$.invokeExact(major, minor, micro);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_version_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_version_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *hb_version_string()
     * }
     */
    public static FunctionDescriptor hb_version_string$descriptor() {
        return hb_version_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *hb_version_string()
     * }
     */
    public static MethodHandle hb_version_string$handle() {
        return hb_version_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *hb_version_string()
     * }
     */
    public static MemorySegment hb_version_string() {
        var mh$ = hb_version_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_version_string");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hb_version_atleast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("hb_version_atleast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_version_atleast(unsigned int major, unsigned int minor, unsigned int micro)
     * }
     */
    public static FunctionDescriptor hb_version_atleast$descriptor() {
        return hb_version_atleast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern hb_bool_t hb_version_atleast(unsigned int major, unsigned int minor, unsigned int micro)
     * }
     */
    public static MethodHandle hb_version_atleast$handle() {
        return hb_version_atleast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern hb_bool_t hb_version_atleast(unsigned int major, unsigned int minor, unsigned int micro)
     * }
     */
    public static int hb_version_atleast(int major, int minor, int micro) {
        var mh$ = hb_version_atleast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hb_version_atleast", major, minor, micro);
            }
            return (int)mh$.invokeExact(major, minor, micro);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_COVERAGE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_COVERAGE_NONE = 0
     * }
     */
    public static int PANGO_COVERAGE_NONE() {
        return PANGO_COVERAGE_NONE;
    }
    private static final int PANGO_COVERAGE_FALLBACK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_COVERAGE_FALLBACK = 1
     * }
     */
    public static int PANGO_COVERAGE_FALLBACK() {
        return PANGO_COVERAGE_FALLBACK;
    }
    private static final int PANGO_COVERAGE_APPROXIMATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_COVERAGE_APPROXIMATE = 2
     * }
     */
    public static int PANGO_COVERAGE_APPROXIMATE() {
        return PANGO_COVERAGE_APPROXIMATE;
    }
    private static final int PANGO_COVERAGE_EXACT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_COVERAGE_EXACT = 3
     * }
     */
    public static int PANGO_COVERAGE_EXACT() {
        return PANGO_COVERAGE_EXACT;
    }

    private static class pango_coverage_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_coverage_get_type()
     * }
     */
    public static FunctionDescriptor pango_coverage_get_type$descriptor() {
        return pango_coverage_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_coverage_get_type()
     * }
     */
    public static MethodHandle pango_coverage_get_type$handle() {
        return pango_coverage_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_coverage_get_type()
     * }
     */
    public static long pango_coverage_get_type() {
        var mh$ = pango_coverage_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_coverage_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_new()
     * }
     */
    public static FunctionDescriptor pango_coverage_new$descriptor() {
        return pango_coverage_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_new()
     * }
     */
    public static MethodHandle pango_coverage_new$handle() {
        return pango_coverage_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_new()
     * }
     */
    public static MemorySegment pango_coverage_new() {
        var mh$ = pango_coverage_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_coverage_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_ref(PangoCoverage *coverage)
     * }
     */
    public static FunctionDescriptor pango_coverage_ref$descriptor() {
        return pango_coverage_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_ref(PangoCoverage *coverage)
     * }
     */
    public static MethodHandle pango_coverage_ref$handle() {
        return pango_coverage_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_ref(PangoCoverage *coverage)
     * }
     */
    public static MemorySegment pango_coverage_ref(MemorySegment coverage) {
        var mh$ = pango_coverage_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_ref", coverage);
            }
            return (MemorySegment)mh$.invokeExact(coverage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_coverage_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_coverage_unref(PangoCoverage *coverage)
     * }
     */
    public static FunctionDescriptor pango_coverage_unref$descriptor() {
        return pango_coverage_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_coverage_unref(PangoCoverage *coverage)
     * }
     */
    public static MethodHandle pango_coverage_unref$handle() {
        return pango_coverage_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_coverage_unref(PangoCoverage *coverage)
     * }
     */
    public static void pango_coverage_unref(MemorySegment coverage) {
        var mh$ = pango_coverage_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_unref", coverage);
            }
            mh$.invokeExact(coverage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_coverage_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_copy(PangoCoverage *coverage)
     * }
     */
    public static FunctionDescriptor pango_coverage_copy$descriptor() {
        return pango_coverage_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_copy(PangoCoverage *coverage)
     * }
     */
    public static MethodHandle pango_coverage_copy$handle() {
        return pango_coverage_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_copy(PangoCoverage *coverage)
     * }
     */
    public static MemorySegment pango_coverage_copy(MemorySegment coverage) {
        var mh$ = pango_coverage_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_copy", coverage);
            }
            return (MemorySegment)mh$.invokeExact(coverage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_coverage_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoCoverageLevel pango_coverage_get(PangoCoverage *coverage, int index_)
     * }
     */
    public static FunctionDescriptor pango_coverage_get$descriptor() {
        return pango_coverage_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoCoverageLevel pango_coverage_get(PangoCoverage *coverage, int index_)
     * }
     */
    public static MethodHandle pango_coverage_get$handle() {
        return pango_coverage_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoCoverageLevel pango_coverage_get(PangoCoverage *coverage, int index_)
     * }
     */
    public static int pango_coverage_get(MemorySegment coverage, int index_) {
        var mh$ = pango_coverage_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_get", coverage, index_);
            }
            return (int)mh$.invokeExact(coverage, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_coverage_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_coverage_set(PangoCoverage *coverage, int index_, PangoCoverageLevel level)
     * }
     */
    public static FunctionDescriptor pango_coverage_set$descriptor() {
        return pango_coverage_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_coverage_set(PangoCoverage *coverage, int index_, PangoCoverageLevel level)
     * }
     */
    public static MethodHandle pango_coverage_set$handle() {
        return pango_coverage_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_coverage_set(PangoCoverage *coverage, int index_, PangoCoverageLevel level)
     * }
     */
    public static void pango_coverage_set(MemorySegment coverage, int index_, int level) {
        var mh$ = pango_coverage_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_set", coverage, index_, level);
            }
            mh$.invokeExact(coverage, index_, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_coverage_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_max"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_coverage_max(PangoCoverage *coverage, PangoCoverage *other)
     * }
     */
    public static FunctionDescriptor pango_coverage_max$descriptor() {
        return pango_coverage_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_coverage_max(PangoCoverage *coverage, PangoCoverage *other)
     * }
     */
    public static MethodHandle pango_coverage_max$handle() {
        return pango_coverage_max.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_coverage_max(PangoCoverage *coverage, PangoCoverage *other)
     * }
     */
    public static void pango_coverage_max(MemorySegment coverage, MemorySegment other) {
        var mh$ = pango_coverage_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_max", coverage, other);
            }
            mh$.invokeExact(coverage, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_coverage_to_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_to_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_coverage_to_bytes(PangoCoverage *coverage, guchar **bytes, int *n_bytes)
     * }
     */
    public static FunctionDescriptor pango_coverage_to_bytes$descriptor() {
        return pango_coverage_to_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_coverage_to_bytes(PangoCoverage *coverage, guchar **bytes, int *n_bytes)
     * }
     */
    public static MethodHandle pango_coverage_to_bytes$handle() {
        return pango_coverage_to_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_coverage_to_bytes(PangoCoverage *coverage, guchar **bytes, int *n_bytes)
     * }
     */
    public static void pango_coverage_to_bytes(MemorySegment coverage, MemorySegment bytes, MemorySegment n_bytes) {
        var mh$ = pango_coverage_to_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_to_bytes", coverage, bytes, n_bytes);
            }
            mh$.invokeExact(coverage, bytes, n_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_coverage_from_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_coverage_from_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_from_bytes(guchar *bytes, int n_bytes)
     * }
     */
    public static FunctionDescriptor pango_coverage_from_bytes$descriptor() {
        return pango_coverage_from_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_from_bytes(guchar *bytes, int n_bytes)
     * }
     */
    public static MethodHandle pango_coverage_from_bytes$handle() {
        return pango_coverage_from_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoCoverage *pango_coverage_from_bytes(guchar *bytes, int n_bytes)
     * }
     */
    public static MemorySegment pango_coverage_from_bytes(MemorySegment bytes, int n_bytes) {
        var mh$ = pango_coverage_from_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_coverage_from_bytes", bytes, n_bytes);
            }
            return (MemorySegment)mh$.invokeExact(bytes, n_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef PangoCoverage *PangoCoverage_autoptr
     * }
     */
    public static final AddressLayout PangoCoverage_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *PangoCoverage_listautoptr
     * }
     */
    public static final AddressLayout PangoCoverage_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *PangoCoverage_slistautoptr
     * }
     */
    public static final AddressLayout PangoCoverage_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *PangoCoverage_queueautoptr
     * }
     */
    public static final AddressLayout PangoCoverage_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef guint32 PangoGlyph
     * }
     */
    public static final OfInt PangoGlyph = app_indicator_h.C_INT;

    private static class pango_units_from_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_units_from_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pango_units_from_double(double d)
     * }
     */
    public static FunctionDescriptor pango_units_from_double$descriptor() {
        return pango_units_from_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pango_units_from_double(double d)
     * }
     */
    public static MethodHandle pango_units_from_double$handle() {
        return pango_units_from_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pango_units_from_double(double d)
     * }
     */
    public static int pango_units_from_double(double d) {
        var mh$ = pango_units_from_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_units_from_double", d);
            }
            return (int)mh$.invokeExact(d);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_units_to_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_units_to_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double pango_units_to_double(int i)
     * }
     */
    public static FunctionDescriptor pango_units_to_double$descriptor() {
        return pango_units_to_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double pango_units_to_double(int i)
     * }
     */
    public static MethodHandle pango_units_to_double$handle() {
        return pango_units_to_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double pango_units_to_double(int i)
     * }
     */
    public static double pango_units_to_double(int i) {
        var mh$ = pango_units_to_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_units_to_double", i);
            }
            return (double)mh$.invokeExact(i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_extents_to_pixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_extents_to_pixels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_extents_to_pixels(PangoRectangle *inclusive, PangoRectangle *nearest)
     * }
     */
    public static FunctionDescriptor pango_extents_to_pixels$descriptor() {
        return pango_extents_to_pixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_extents_to_pixels(PangoRectangle *inclusive, PangoRectangle *nearest)
     * }
     */
    public static MethodHandle pango_extents_to_pixels$handle() {
        return pango_extents_to_pixels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_extents_to_pixels(PangoRectangle *inclusive, PangoRectangle *nearest)
     * }
     */
    public static void pango_extents_to_pixels(MemorySegment inclusive, MemorySegment nearest) {
        var mh$ = pango_extents_to_pixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_extents_to_pixels", inclusive, nearest);
            }
            mh$.invokeExact(inclusive, nearest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PANGO_GRAVITY_SOUTH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_GRAVITY_SOUTH = 0
     * }
     */
    public static int PANGO_GRAVITY_SOUTH() {
        return PANGO_GRAVITY_SOUTH;
    }
    private static final int PANGO_GRAVITY_EAST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_GRAVITY_EAST = 1
     * }
     */
    public static int PANGO_GRAVITY_EAST() {
        return PANGO_GRAVITY_EAST;
    }
    private static final int PANGO_GRAVITY_NORTH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_GRAVITY_NORTH = 2
     * }
     */
    public static int PANGO_GRAVITY_NORTH() {
        return PANGO_GRAVITY_NORTH;
    }
    private static final int PANGO_GRAVITY_WEST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_GRAVITY_WEST = 3
     * }
     */
    public static int PANGO_GRAVITY_WEST() {
        return PANGO_GRAVITY_WEST;
    }
    private static final int PANGO_GRAVITY_AUTO = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_GRAVITY_AUTO = 4
     * }
     */
    public static int PANGO_GRAVITY_AUTO() {
        return PANGO_GRAVITY_AUTO;
    }
    private static final int PANGO_GRAVITY_HINT_NATURAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_GRAVITY_HINT_NATURAL = 0
     * }
     */
    public static int PANGO_GRAVITY_HINT_NATURAL() {
        return PANGO_GRAVITY_HINT_NATURAL;
    }
    private static final int PANGO_GRAVITY_HINT_STRONG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_GRAVITY_HINT_STRONG = 1
     * }
     */
    public static int PANGO_GRAVITY_HINT_STRONG() {
        return PANGO_GRAVITY_HINT_STRONG;
    }
    private static final int PANGO_GRAVITY_HINT_LINE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PANGO_GRAVITY_HINT_LINE = 2
     * }
     */
    public static int PANGO_GRAVITY_HINT_LINE() {
        return PANGO_GRAVITY_HINT_LINE;
    }

    private static class pango_matrix_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType pango_matrix_get_type()
     * }
     */
    public static FunctionDescriptor pango_matrix_get_type$descriptor() {
        return pango_matrix_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType pango_matrix_get_type()
     * }
     */
    public static MethodHandle pango_matrix_get_type$handle() {
        return pango_matrix_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType pango_matrix_get_type()
     * }
     */
    public static long pango_matrix_get_type() {
        var mh$ = pango_matrix_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoMatrix *pango_matrix_copy(const PangoMatrix *matrix)
     * }
     */
    public static FunctionDescriptor pango_matrix_copy$descriptor() {
        return pango_matrix_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoMatrix *pango_matrix_copy(const PangoMatrix *matrix)
     * }
     */
    public static MethodHandle pango_matrix_copy$handle() {
        return pango_matrix_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoMatrix *pango_matrix_copy(const PangoMatrix *matrix)
     * }
     */
    public static MemorySegment pango_matrix_copy(MemorySegment matrix) {
        var mh$ = pango_matrix_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_copy", matrix);
            }
            return (MemorySegment)mh$.invokeExact(matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_matrix_free(PangoMatrix *matrix)
     * }
     */
    public static FunctionDescriptor pango_matrix_free$descriptor() {
        return pango_matrix_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_matrix_free(PangoMatrix *matrix)
     * }
     */
    public static MethodHandle pango_matrix_free$handle() {
        return pango_matrix_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_matrix_free(PangoMatrix *matrix)
     * }
     */
    public static void pango_matrix_free(MemorySegment matrix) {
        var mh$ = pango_matrix_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_free", matrix);
            }
            mh$.invokeExact(matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_translate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_translate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_matrix_translate(PangoMatrix *matrix, double tx, double ty)
     * }
     */
    public static FunctionDescriptor pango_matrix_translate$descriptor() {
        return pango_matrix_translate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_matrix_translate(PangoMatrix *matrix, double tx, double ty)
     * }
     */
    public static MethodHandle pango_matrix_translate$handle() {
        return pango_matrix_translate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_matrix_translate(PangoMatrix *matrix, double tx, double ty)
     * }
     */
    public static void pango_matrix_translate(MemorySegment matrix, double tx, double ty) {
        var mh$ = pango_matrix_translate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_translate", matrix, tx, ty);
            }
            mh$.invokeExact(matrix, tx, ty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_matrix_scale(PangoMatrix *matrix, double scale_x, double scale_y)
     * }
     */
    public static FunctionDescriptor pango_matrix_scale$descriptor() {
        return pango_matrix_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_matrix_scale(PangoMatrix *matrix, double scale_x, double scale_y)
     * }
     */
    public static MethodHandle pango_matrix_scale$handle() {
        return pango_matrix_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_matrix_scale(PangoMatrix *matrix, double scale_x, double scale_y)
     * }
     */
    public static void pango_matrix_scale(MemorySegment matrix, double scale_x, double scale_y) {
        var mh$ = pango_matrix_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_scale", matrix, scale_x, scale_y);
            }
            mh$.invokeExact(matrix, scale_x, scale_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_rotate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_rotate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_matrix_rotate(PangoMatrix *matrix, double degrees)
     * }
     */
    public static FunctionDescriptor pango_matrix_rotate$descriptor() {
        return pango_matrix_rotate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_matrix_rotate(PangoMatrix *matrix, double degrees)
     * }
     */
    public static MethodHandle pango_matrix_rotate$handle() {
        return pango_matrix_rotate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_matrix_rotate(PangoMatrix *matrix, double degrees)
     * }
     */
    public static void pango_matrix_rotate(MemorySegment matrix, double degrees) {
        var mh$ = pango_matrix_rotate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_rotate", matrix, degrees);
            }
            mh$.invokeExact(matrix, degrees);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_concat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_concat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_matrix_concat(PangoMatrix *matrix, const PangoMatrix *new_matrix)
     * }
     */
    public static FunctionDescriptor pango_matrix_concat$descriptor() {
        return pango_matrix_concat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_matrix_concat(PangoMatrix *matrix, const PangoMatrix *new_matrix)
     * }
     */
    public static MethodHandle pango_matrix_concat$handle() {
        return pango_matrix_concat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_matrix_concat(PangoMatrix *matrix, const PangoMatrix *new_matrix)
     * }
     */
    public static void pango_matrix_concat(MemorySegment matrix, MemorySegment new_matrix) {
        var mh$ = pango_matrix_concat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_concat", matrix, new_matrix);
            }
            mh$.invokeExact(matrix, new_matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_transform_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_transform_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_matrix_transform_point(const PangoMatrix *matrix, double *x, double *y)
     * }
     */
    public static FunctionDescriptor pango_matrix_transform_point$descriptor() {
        return pango_matrix_transform_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_matrix_transform_point(const PangoMatrix *matrix, double *x, double *y)
     * }
     */
    public static MethodHandle pango_matrix_transform_point$handle() {
        return pango_matrix_transform_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_matrix_transform_point(const PangoMatrix *matrix, double *x, double *y)
     * }
     */
    public static void pango_matrix_transform_point(MemorySegment matrix, MemorySegment x, MemorySegment y) {
        var mh$ = pango_matrix_transform_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_transform_point", matrix, x, y);
            }
            mh$.invokeExact(matrix, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_transform_distance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_transform_distance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_matrix_transform_distance(const PangoMatrix *matrix, double *dx, double *dy)
     * }
     */
    public static FunctionDescriptor pango_matrix_transform_distance$descriptor() {
        return pango_matrix_transform_distance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_matrix_transform_distance(const PangoMatrix *matrix, double *dx, double *dy)
     * }
     */
    public static MethodHandle pango_matrix_transform_distance$handle() {
        return pango_matrix_transform_distance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_matrix_transform_distance(const PangoMatrix *matrix, double *dx, double *dy)
     * }
     */
    public static void pango_matrix_transform_distance(MemorySegment matrix, MemorySegment dx, MemorySegment dy) {
        var mh$ = pango_matrix_transform_distance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_transform_distance", matrix, dx, dy);
            }
            mh$.invokeExact(matrix, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_transform_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_transform_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_matrix_transform_rectangle(const PangoMatrix *matrix, PangoRectangle *rect)
     * }
     */
    public static FunctionDescriptor pango_matrix_transform_rectangle$descriptor() {
        return pango_matrix_transform_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_matrix_transform_rectangle(const PangoMatrix *matrix, PangoRectangle *rect)
     * }
     */
    public static MethodHandle pango_matrix_transform_rectangle$handle() {
        return pango_matrix_transform_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_matrix_transform_rectangle(const PangoMatrix *matrix, PangoRectangle *rect)
     * }
     */
    public static void pango_matrix_transform_rectangle(MemorySegment matrix, MemorySegment rect) {
        var mh$ = pango_matrix_transform_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_transform_rectangle", matrix, rect);
            }
            mh$.invokeExact(matrix, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_transform_pixel_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_transform_pixel_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_matrix_transform_pixel_rectangle(const PangoMatrix *matrix, PangoRectangle *rect)
     * }
     */
    public static FunctionDescriptor pango_matrix_transform_pixel_rectangle$descriptor() {
        return pango_matrix_transform_pixel_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_matrix_transform_pixel_rectangle(const PangoMatrix *matrix, PangoRectangle *rect)
     * }
     */
    public static MethodHandle pango_matrix_transform_pixel_rectangle$handle() {
        return pango_matrix_transform_pixel_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_matrix_transform_pixel_rectangle(const PangoMatrix *matrix, PangoRectangle *rect)
     * }
     */
    public static void pango_matrix_transform_pixel_rectangle(MemorySegment matrix, MemorySegment rect) {
        var mh$ = pango_matrix_transform_pixel_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_transform_pixel_rectangle", matrix, rect);
            }
            mh$.invokeExact(matrix, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_get_font_scale_factor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_get_font_scale_factor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double pango_matrix_get_font_scale_factor(const PangoMatrix *matrix)
     * }
     */
    public static FunctionDescriptor pango_matrix_get_font_scale_factor$descriptor() {
        return pango_matrix_get_font_scale_factor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double pango_matrix_get_font_scale_factor(const PangoMatrix *matrix)
     * }
     */
    public static MethodHandle pango_matrix_get_font_scale_factor$handle() {
        return pango_matrix_get_font_scale_factor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double pango_matrix_get_font_scale_factor(const PangoMatrix *matrix)
     * }
     */
    public static double pango_matrix_get_font_scale_factor(MemorySegment matrix) {
        var mh$ = pango_matrix_get_font_scale_factor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_get_font_scale_factor", matrix);
            }
            return (double)mh$.invokeExact(matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_get_font_scale_factors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_get_font_scale_factors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pango_matrix_get_font_scale_factors(const PangoMatrix *matrix, double *xscale, double *yscale)
     * }
     */
    public static FunctionDescriptor pango_matrix_get_font_scale_factors$descriptor() {
        return pango_matrix_get_font_scale_factors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pango_matrix_get_font_scale_factors(const PangoMatrix *matrix, double *xscale, double *yscale)
     * }
     */
    public static MethodHandle pango_matrix_get_font_scale_factors$handle() {
        return pango_matrix_get_font_scale_factors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pango_matrix_get_font_scale_factors(const PangoMatrix *matrix, double *xscale, double *yscale)
     * }
     */
    public static void pango_matrix_get_font_scale_factors(MemorySegment matrix, MemorySegment xscale, MemorySegment yscale) {
        var mh$ = pango_matrix_get_font_scale_factors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_get_font_scale_factors", matrix, xscale, yscale);
            }
            mh$.invokeExact(matrix, xscale, yscale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pango_matrix_get_slant_ratio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pango_matrix_get_slant_ratio"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double pango_matrix_get_slant_ratio(const PangoMatrix *matrix)
     * }
     */
    public static FunctionDescriptor pango_matrix_get_slant_ratio$descriptor() {
        return pango_matrix_get_slant_ratio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double pango_matrix_get_slant_ratio(const PangoMatrix *matrix)
     * }
     */
    public static MethodHandle pango_matrix_get_slant_ratio$handle() {
        return pango_matrix_get_slant_ratio.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double pango_matrix_get_slant_ratio(const PangoMatrix *matrix)
     * }
     */
    public static double pango_matrix_get_slant_ratio(MemorySegment matrix) {
        var mh$ = pango_matrix_get_slant_ratio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pango_matrix_get_slant_ratio", matrix);
            }
            return (double)mh$.invokeExact(matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

