// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_5 extends app_indicator_h_6 {

    app_indicator_h_5() {
        // Should not be called directly
    }

    private static class gtk_tree_model_filter_clear_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_model_filter_clear_cache"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_clear_cache(GtkTreeModelFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_tree_model_filter_clear_cache$descriptor() {
        return gtk_tree_model_filter_clear_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_clear_cache(GtkTreeModelFilter *filter)
     * }
     */
    public static MethodHandle gtk_tree_model_filter_clear_cache$handle() {
        return gtk_tree_model_filter_clear_cache.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_model_filter_clear_cache(GtkTreeModelFilter *filter)
     * }
     */
    public static void gtk_tree_model_filter_clear_cache(MemorySegment filter) {
        var mh$ = gtk_tree_model_filter_clear_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_model_filter_clear_cache", filter);
            }
            mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_entry_completion_get_type()
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_type$descriptor() {
        return gtk_entry_completion_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_entry_completion_get_type()
     * }
     */
    public static MethodHandle gtk_entry_completion_get_type$handle() {
        return gtk_entry_completion_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_entry_completion_get_type()
     * }
     */
    public static long gtk_entry_completion_get_type() {
        var mh$ = gtk_entry_completion_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEntryCompletion *gtk_entry_completion_new()
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_new$descriptor() {
        return gtk_entry_completion_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEntryCompletion *gtk_entry_completion_new()
     * }
     */
    public static MethodHandle gtk_entry_completion_new$handle() {
        return gtk_entry_completion_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEntryCompletion *gtk_entry_completion_new()
     * }
     */
    public static MemorySegment gtk_entry_completion_new() {
        var mh$ = gtk_entry_completion_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_new_with_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_new_with_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEntryCompletion *gtk_entry_completion_new_with_area(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_new_with_area$descriptor() {
        return gtk_entry_completion_new_with_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEntryCompletion *gtk_entry_completion_new_with_area(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_entry_completion_new_with_area$handle() {
        return gtk_entry_completion_new_with_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEntryCompletion *gtk_entry_completion_new_with_area(GtkCellArea *area)
     * }
     */
    public static MemorySegment gtk_entry_completion_new_with_area(MemorySegment area) {
        var mh$ = gtk_entry_completion_new_with_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_new_with_area", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_entry_completion_get_entry(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_entry$descriptor() {
        return gtk_entry_completion_get_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_entry_completion_get_entry(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_get_entry$handle() {
        return gtk_entry_completion_get_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_entry_completion_get_entry(GtkEntryCompletion *completion)
     * }
     */
    public static MemorySegment gtk_entry_completion_get_entry(MemorySegment completion) {
        var mh$ = gtk_entry_completion_get_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_entry", completion);
            }
            return (MemorySegment)mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_set_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_set_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_model(GtkEntryCompletion *completion, GtkTreeModel *model)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_set_model$descriptor() {
        return gtk_entry_completion_set_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_model(GtkEntryCompletion *completion, GtkTreeModel *model)
     * }
     */
    public static MethodHandle gtk_entry_completion_set_model$handle() {
        return gtk_entry_completion_set_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_model(GtkEntryCompletion *completion, GtkTreeModel *model)
     * }
     */
    public static void gtk_entry_completion_set_model(MemorySegment completion, MemorySegment model) {
        var mh$ = gtk_entry_completion_set_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_set_model", completion, model);
            }
            mh$.invokeExact(completion, model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_entry_completion_get_model(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_model$descriptor() {
        return gtk_entry_completion_get_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_entry_completion_get_model(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_get_model$handle() {
        return gtk_entry_completion_get_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_entry_completion_get_model(GtkEntryCompletion *completion)
     * }
     */
    public static MemorySegment gtk_entry_completion_get_model(MemorySegment completion) {
        var mh$ = gtk_entry_completion_get_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_model", completion);
            }
            return (MemorySegment)mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_set_match_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_set_match_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_match_func(GtkEntryCompletion *completion, GtkEntryCompletionMatchFunc func, gpointer func_data, GDestroyNotify func_notify)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_set_match_func$descriptor() {
        return gtk_entry_completion_set_match_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_match_func(GtkEntryCompletion *completion, GtkEntryCompletionMatchFunc func, gpointer func_data, GDestroyNotify func_notify)
     * }
     */
    public static MethodHandle gtk_entry_completion_set_match_func$handle() {
        return gtk_entry_completion_set_match_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_match_func(GtkEntryCompletion *completion, GtkEntryCompletionMatchFunc func, gpointer func_data, GDestroyNotify func_notify)
     * }
     */
    public static void gtk_entry_completion_set_match_func(MemorySegment completion, MemorySegment func, MemorySegment func_data, MemorySegment func_notify) {
        var mh$ = gtk_entry_completion_set_match_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_set_match_func", completion, func, func_data, func_notify);
            }
            mh$.invokeExact(completion, func, func_data, func_notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_set_minimum_key_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_set_minimum_key_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_minimum_key_length(GtkEntryCompletion *completion, gint length)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_set_minimum_key_length$descriptor() {
        return gtk_entry_completion_set_minimum_key_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_minimum_key_length(GtkEntryCompletion *completion, gint length)
     * }
     */
    public static MethodHandle gtk_entry_completion_set_minimum_key_length$handle() {
        return gtk_entry_completion_set_minimum_key_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_minimum_key_length(GtkEntryCompletion *completion, gint length)
     * }
     */
    public static void gtk_entry_completion_set_minimum_key_length(MemorySegment completion, int length) {
        var mh$ = gtk_entry_completion_set_minimum_key_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_set_minimum_key_length", completion, length);
            }
            mh$.invokeExact(completion, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_minimum_key_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_minimum_key_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_entry_completion_get_minimum_key_length(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_minimum_key_length$descriptor() {
        return gtk_entry_completion_get_minimum_key_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_entry_completion_get_minimum_key_length(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_get_minimum_key_length$handle() {
        return gtk_entry_completion_get_minimum_key_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_entry_completion_get_minimum_key_length(GtkEntryCompletion *completion)
     * }
     */
    public static int gtk_entry_completion_get_minimum_key_length(MemorySegment completion) {
        var mh$ = gtk_entry_completion_get_minimum_key_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_minimum_key_length", completion);
            }
            return (int)mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_compute_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_compute_prefix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_entry_completion_compute_prefix(GtkEntryCompletion *completion, const char *key)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_compute_prefix$descriptor() {
        return gtk_entry_completion_compute_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_entry_completion_compute_prefix(GtkEntryCompletion *completion, const char *key)
     * }
     */
    public static MethodHandle gtk_entry_completion_compute_prefix$handle() {
        return gtk_entry_completion_compute_prefix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_entry_completion_compute_prefix(GtkEntryCompletion *completion, const char *key)
     * }
     */
    public static MemorySegment gtk_entry_completion_compute_prefix(MemorySegment completion, MemorySegment key) {
        var mh$ = gtk_entry_completion_compute_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_compute_prefix", completion, key);
            }
            return (MemorySegment)mh$.invokeExact(completion, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_complete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_complete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_complete(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_complete$descriptor() {
        return gtk_entry_completion_complete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_complete(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_complete$handle() {
        return gtk_entry_completion_complete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_complete(GtkEntryCompletion *completion)
     * }
     */
    public static void gtk_entry_completion_complete(MemorySegment completion) {
        var mh$ = gtk_entry_completion_complete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_complete", completion);
            }
            mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_insert_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_insert_prefix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_insert_prefix(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_insert_prefix$descriptor() {
        return gtk_entry_completion_insert_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_insert_prefix(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_insert_prefix$handle() {
        return gtk_entry_completion_insert_prefix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_insert_prefix(GtkEntryCompletion *completion)
     * }
     */
    public static void gtk_entry_completion_insert_prefix(MemorySegment completion) {
        var mh$ = gtk_entry_completion_insert_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_insert_prefix", completion);
            }
            mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_insert_action_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_insert_action_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_insert_action_text(GtkEntryCompletion *completion, gint index_, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_insert_action_text$descriptor() {
        return gtk_entry_completion_insert_action_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_insert_action_text(GtkEntryCompletion *completion, gint index_, const gchar *text)
     * }
     */
    public static MethodHandle gtk_entry_completion_insert_action_text$handle() {
        return gtk_entry_completion_insert_action_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_insert_action_text(GtkEntryCompletion *completion, gint index_, const gchar *text)
     * }
     */
    public static void gtk_entry_completion_insert_action_text(MemorySegment completion, int index_, MemorySegment text) {
        var mh$ = gtk_entry_completion_insert_action_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_insert_action_text", completion, index_, text);
            }
            mh$.invokeExact(completion, index_, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_insert_action_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_insert_action_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_insert_action_markup(GtkEntryCompletion *completion, gint index_, const gchar *markup)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_insert_action_markup$descriptor() {
        return gtk_entry_completion_insert_action_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_insert_action_markup(GtkEntryCompletion *completion, gint index_, const gchar *markup)
     * }
     */
    public static MethodHandle gtk_entry_completion_insert_action_markup$handle() {
        return gtk_entry_completion_insert_action_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_insert_action_markup(GtkEntryCompletion *completion, gint index_, const gchar *markup)
     * }
     */
    public static void gtk_entry_completion_insert_action_markup(MemorySegment completion, int index_, MemorySegment markup) {
        var mh$ = gtk_entry_completion_insert_action_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_insert_action_markup", completion, index_, markup);
            }
            mh$.invokeExact(completion, index_, markup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_delete_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_delete_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_delete_action(GtkEntryCompletion *completion, gint index_)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_delete_action$descriptor() {
        return gtk_entry_completion_delete_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_delete_action(GtkEntryCompletion *completion, gint index_)
     * }
     */
    public static MethodHandle gtk_entry_completion_delete_action$handle() {
        return gtk_entry_completion_delete_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_delete_action(GtkEntryCompletion *completion, gint index_)
     * }
     */
    public static void gtk_entry_completion_delete_action(MemorySegment completion, int index_) {
        var mh$ = gtk_entry_completion_delete_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_delete_action", completion, index_);
            }
            mh$.invokeExact(completion, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_set_inline_completion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_set_inline_completion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_inline_completion(GtkEntryCompletion *completion, gboolean inline_completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_set_inline_completion$descriptor() {
        return gtk_entry_completion_set_inline_completion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_inline_completion(GtkEntryCompletion *completion, gboolean inline_completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_set_inline_completion$handle() {
        return gtk_entry_completion_set_inline_completion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_inline_completion(GtkEntryCompletion *completion, gboolean inline_completion)
     * }
     */
    public static void gtk_entry_completion_set_inline_completion(MemorySegment completion, int inline_completion) {
        var mh$ = gtk_entry_completion_set_inline_completion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_set_inline_completion", completion, inline_completion);
            }
            mh$.invokeExact(completion, inline_completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_inline_completion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_inline_completion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_inline_completion(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_inline_completion$descriptor() {
        return gtk_entry_completion_get_inline_completion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_inline_completion(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_get_inline_completion$handle() {
        return gtk_entry_completion_get_inline_completion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_inline_completion(GtkEntryCompletion *completion)
     * }
     */
    public static int gtk_entry_completion_get_inline_completion(MemorySegment completion) {
        var mh$ = gtk_entry_completion_get_inline_completion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_inline_completion", completion);
            }
            return (int)mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_set_inline_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_set_inline_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_inline_selection(GtkEntryCompletion *completion, gboolean inline_selection)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_set_inline_selection$descriptor() {
        return gtk_entry_completion_set_inline_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_inline_selection(GtkEntryCompletion *completion, gboolean inline_selection)
     * }
     */
    public static MethodHandle gtk_entry_completion_set_inline_selection$handle() {
        return gtk_entry_completion_set_inline_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_inline_selection(GtkEntryCompletion *completion, gboolean inline_selection)
     * }
     */
    public static void gtk_entry_completion_set_inline_selection(MemorySegment completion, int inline_selection) {
        var mh$ = gtk_entry_completion_set_inline_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_set_inline_selection", completion, inline_selection);
            }
            mh$.invokeExact(completion, inline_selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_inline_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_inline_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_inline_selection(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_inline_selection$descriptor() {
        return gtk_entry_completion_get_inline_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_inline_selection(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_get_inline_selection$handle() {
        return gtk_entry_completion_get_inline_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_inline_selection(GtkEntryCompletion *completion)
     * }
     */
    public static int gtk_entry_completion_get_inline_selection(MemorySegment completion) {
        var mh$ = gtk_entry_completion_get_inline_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_inline_selection", completion);
            }
            return (int)mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_set_popup_completion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_set_popup_completion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_popup_completion(GtkEntryCompletion *completion, gboolean popup_completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_set_popup_completion$descriptor() {
        return gtk_entry_completion_set_popup_completion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_popup_completion(GtkEntryCompletion *completion, gboolean popup_completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_set_popup_completion$handle() {
        return gtk_entry_completion_set_popup_completion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_popup_completion(GtkEntryCompletion *completion, gboolean popup_completion)
     * }
     */
    public static void gtk_entry_completion_set_popup_completion(MemorySegment completion, int popup_completion) {
        var mh$ = gtk_entry_completion_set_popup_completion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_set_popup_completion", completion, popup_completion);
            }
            mh$.invokeExact(completion, popup_completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_popup_completion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_popup_completion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_popup_completion(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_popup_completion$descriptor() {
        return gtk_entry_completion_get_popup_completion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_popup_completion(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_get_popup_completion$handle() {
        return gtk_entry_completion_get_popup_completion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_popup_completion(GtkEntryCompletion *completion)
     * }
     */
    public static int gtk_entry_completion_get_popup_completion(MemorySegment completion) {
        var mh$ = gtk_entry_completion_get_popup_completion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_popup_completion", completion);
            }
            return (int)mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_set_popup_set_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_set_popup_set_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_popup_set_width(GtkEntryCompletion *completion, gboolean popup_set_width)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_set_popup_set_width$descriptor() {
        return gtk_entry_completion_set_popup_set_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_popup_set_width(GtkEntryCompletion *completion, gboolean popup_set_width)
     * }
     */
    public static MethodHandle gtk_entry_completion_set_popup_set_width$handle() {
        return gtk_entry_completion_set_popup_set_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_popup_set_width(GtkEntryCompletion *completion, gboolean popup_set_width)
     * }
     */
    public static void gtk_entry_completion_set_popup_set_width(MemorySegment completion, int popup_set_width) {
        var mh$ = gtk_entry_completion_set_popup_set_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_set_popup_set_width", completion, popup_set_width);
            }
            mh$.invokeExact(completion, popup_set_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_popup_set_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_popup_set_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_popup_set_width(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_popup_set_width$descriptor() {
        return gtk_entry_completion_get_popup_set_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_popup_set_width(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_get_popup_set_width$handle() {
        return gtk_entry_completion_get_popup_set_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_popup_set_width(GtkEntryCompletion *completion)
     * }
     */
    public static int gtk_entry_completion_get_popup_set_width(MemorySegment completion) {
        var mh$ = gtk_entry_completion_get_popup_set_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_popup_set_width", completion);
            }
            return (int)mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_set_popup_single_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_set_popup_single_match"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_popup_single_match(GtkEntryCompletion *completion, gboolean popup_single_match)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_set_popup_single_match$descriptor() {
        return gtk_entry_completion_set_popup_single_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_popup_single_match(GtkEntryCompletion *completion, gboolean popup_single_match)
     * }
     */
    public static MethodHandle gtk_entry_completion_set_popup_single_match$handle() {
        return gtk_entry_completion_set_popup_single_match.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_popup_single_match(GtkEntryCompletion *completion, gboolean popup_single_match)
     * }
     */
    public static void gtk_entry_completion_set_popup_single_match(MemorySegment completion, int popup_single_match) {
        var mh$ = gtk_entry_completion_set_popup_single_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_set_popup_single_match", completion, popup_single_match);
            }
            mh$.invokeExact(completion, popup_single_match);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_popup_single_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_popup_single_match"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_popup_single_match(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_popup_single_match$descriptor() {
        return gtk_entry_completion_get_popup_single_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_popup_single_match(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_get_popup_single_match$handle() {
        return gtk_entry_completion_get_popup_single_match.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_completion_get_popup_single_match(GtkEntryCompletion *completion)
     * }
     */
    public static int gtk_entry_completion_get_popup_single_match(MemorySegment completion) {
        var mh$ = gtk_entry_completion_get_popup_single_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_popup_single_match", completion);
            }
            return (int)mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_completion_prefix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_completion_prefix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_completion_get_completion_prefix(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_completion_prefix$descriptor() {
        return gtk_entry_completion_get_completion_prefix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_completion_get_completion_prefix(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_get_completion_prefix$handle() {
        return gtk_entry_completion_get_completion_prefix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_completion_get_completion_prefix(GtkEntryCompletion *completion)
     * }
     */
    public static MemorySegment gtk_entry_completion_get_completion_prefix(MemorySegment completion) {
        var mh$ = gtk_entry_completion_get_completion_prefix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_completion_prefix", completion);
            }
            return (MemorySegment)mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_set_text_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_set_text_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_text_column(GtkEntryCompletion *completion, gint column)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_set_text_column$descriptor() {
        return gtk_entry_completion_set_text_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_text_column(GtkEntryCompletion *completion, gint column)
     * }
     */
    public static MethodHandle gtk_entry_completion_set_text_column$handle() {
        return gtk_entry_completion_set_text_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_completion_set_text_column(GtkEntryCompletion *completion, gint column)
     * }
     */
    public static void gtk_entry_completion_set_text_column(MemorySegment completion, int column) {
        var mh$ = gtk_entry_completion_set_text_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_set_text_column", completion, column);
            }
            mh$.invokeExact(completion, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_completion_get_text_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_completion_get_text_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_entry_completion_get_text_column(GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_completion_get_text_column$descriptor() {
        return gtk_entry_completion_get_text_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_entry_completion_get_text_column(GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_completion_get_text_column$handle() {
        return gtk_entry_completion_get_text_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_entry_completion_get_text_column(GtkEntryCompletion *completion)
     * }
     */
    public static int gtk_entry_completion_get_text_column(MemorySegment completion) {
        var mh$ = gtk_entry_completion_get_text_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_completion_get_text_column", completion);
            }
            return (int)mh$.invokeExact(completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_IMAGE_EMPTY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IMAGE_EMPTY = 0
     * }
     */
    public static int GTK_IMAGE_EMPTY() {
        return GTK_IMAGE_EMPTY;
    }
    private static final int GTK_IMAGE_PIXBUF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IMAGE_PIXBUF = 1
     * }
     */
    public static int GTK_IMAGE_PIXBUF() {
        return GTK_IMAGE_PIXBUF;
    }
    private static final int GTK_IMAGE_STOCK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IMAGE_STOCK = 2
     * }
     */
    public static int GTK_IMAGE_STOCK() {
        return GTK_IMAGE_STOCK;
    }
    private static final int GTK_IMAGE_ICON_SET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IMAGE_ICON_SET = 3
     * }
     */
    public static int GTK_IMAGE_ICON_SET() {
        return GTK_IMAGE_ICON_SET;
    }
    private static final int GTK_IMAGE_ANIMATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IMAGE_ANIMATION = 4
     * }
     */
    public static int GTK_IMAGE_ANIMATION() {
        return GTK_IMAGE_ANIMATION;
    }
    private static final int GTK_IMAGE_ICON_NAME = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IMAGE_ICON_NAME = 5
     * }
     */
    public static int GTK_IMAGE_ICON_NAME() {
        return GTK_IMAGE_ICON_NAME;
    }
    private static final int GTK_IMAGE_GICON = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IMAGE_GICON = 6
     * }
     */
    public static int GTK_IMAGE_GICON() {
        return GTK_IMAGE_GICON;
    }
    private static final int GTK_IMAGE_SURFACE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_IMAGE_SURFACE = 7
     * }
     */
    public static int GTK_IMAGE_SURFACE() {
        return GTK_IMAGE_SURFACE;
    }

    private static class gtk_image_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_image_get_type()
     * }
     */
    public static FunctionDescriptor gtk_image_get_type$descriptor() {
        return gtk_image_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_image_get_type()
     * }
     */
    public static MethodHandle gtk_image_get_type$handle() {
        return gtk_image_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_image_get_type()
     * }
     */
    public static long gtk_image_get_type() {
        var mh$ = gtk_image_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new()
     * }
     */
    public static FunctionDescriptor gtk_image_new$descriptor() {
        return gtk_image_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new()
     * }
     */
    public static MethodHandle gtk_image_new$handle() {
        return gtk_image_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new()
     * }
     */
    public static MemorySegment gtk_image_new() {
        var mh$ = gtk_image_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_new_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_file(const gchar *filename)
     * }
     */
    public static FunctionDescriptor gtk_image_new_from_file$descriptor() {
        return gtk_image_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_file(const gchar *filename)
     * }
     */
    public static MethodHandle gtk_image_new_from_file$handle() {
        return gtk_image_new_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_file(const gchar *filename)
     * }
     */
    public static MemorySegment gtk_image_new_from_file(MemorySegment filename) {
        var mh$ = gtk_image_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_new_from_file", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_new_from_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_new_from_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_resource(const gchar *resource_path)
     * }
     */
    public static FunctionDescriptor gtk_image_new_from_resource$descriptor() {
        return gtk_image_new_from_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_resource(const gchar *resource_path)
     * }
     */
    public static MethodHandle gtk_image_new_from_resource$handle() {
        return gtk_image_new_from_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_resource(const gchar *resource_path)
     * }
     */
    public static MemorySegment gtk_image_new_from_resource(MemorySegment resource_path) {
        var mh$ = gtk_image_new_from_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_new_from_resource", resource_path);
            }
            return (MemorySegment)mh$.invokeExact(resource_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_new_from_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_new_from_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_image_new_from_pixbuf$descriptor() {
        return gtk_image_new_from_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_image_new_from_pixbuf$handle() {
        return gtk_image_new_from_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gtk_image_new_from_pixbuf(MemorySegment pixbuf) {
        var mh$ = gtk_image_new_from_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_new_from_pixbuf", pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_new_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_new_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_stock(const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_image_new_from_stock$descriptor() {
        return gtk_image_new_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_stock(const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_image_new_from_stock$handle() {
        return gtk_image_new_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_stock(const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static MemorySegment gtk_image_new_from_stock(MemorySegment stock_id, int size) {
        var mh$ = gtk_image_new_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_new_from_stock", stock_id, size);
            }
            return (MemorySegment)mh$.invokeExact(stock_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_new_from_icon_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_new_from_icon_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_icon_set(GtkIconSet *icon_set, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_image_new_from_icon_set$descriptor() {
        return gtk_image_new_from_icon_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_icon_set(GtkIconSet *icon_set, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_image_new_from_icon_set$handle() {
        return gtk_image_new_from_icon_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_icon_set(GtkIconSet *icon_set, GtkIconSize size)
     * }
     */
    public static MemorySegment gtk_image_new_from_icon_set(MemorySegment icon_set, int size) {
        var mh$ = gtk_image_new_from_icon_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_new_from_icon_set", icon_set, size);
            }
            return (MemorySegment)mh$.invokeExact(icon_set, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_new_from_animation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_new_from_animation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_animation(GdkPixbufAnimation *animation)
     * }
     */
    public static FunctionDescriptor gtk_image_new_from_animation$descriptor() {
        return gtk_image_new_from_animation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_animation(GdkPixbufAnimation *animation)
     * }
     */
    public static MethodHandle gtk_image_new_from_animation$handle() {
        return gtk_image_new_from_animation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_animation(GdkPixbufAnimation *animation)
     * }
     */
    public static MemorySegment gtk_image_new_from_animation(MemorySegment animation) {
        var mh$ = gtk_image_new_from_animation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_new_from_animation", animation);
            }
            return (MemorySegment)mh$.invokeExact(animation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_new_from_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_new_from_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_icon_name(const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_image_new_from_icon_name$descriptor() {
        return gtk_image_new_from_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_icon_name(const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_image_new_from_icon_name$handle() {
        return gtk_image_new_from_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_icon_name(const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static MemorySegment gtk_image_new_from_icon_name(MemorySegment icon_name, int size) {
        var mh$ = gtk_image_new_from_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_new_from_icon_name", icon_name, size);
            }
            return (MemorySegment)mh$.invokeExact(icon_name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_new_from_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_new_from_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_gicon(GIcon *icon, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_image_new_from_gicon$descriptor() {
        return gtk_image_new_from_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_gicon(GIcon *icon, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_image_new_from_gicon$handle() {
        return gtk_image_new_from_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_gicon(GIcon *icon, GtkIconSize size)
     * }
     */
    public static MemorySegment gtk_image_new_from_gicon(MemorySegment icon, int size) {
        var mh$ = gtk_image_new_from_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_new_from_gicon", icon, size);
            }
            return (MemorySegment)mh$.invokeExact(icon, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_new_from_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_new_from_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_surface(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor gtk_image_new_from_surface$descriptor() {
        return gtk_image_new_from_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_surface(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle gtk_image_new_from_surface$handle() {
        return gtk_image_new_from_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_image_new_from_surface(cairo_surface_t *surface)
     * }
     */
    public static MemorySegment gtk_image_new_from_surface(MemorySegment surface) {
        var mh$ = gtk_image_new_from_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_new_from_surface", surface);
            }
            return (MemorySegment)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_clear(GtkImage *image)
     * }
     */
    public static FunctionDescriptor gtk_image_clear$descriptor() {
        return gtk_image_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_clear(GtkImage *image)
     * }
     */
    public static MethodHandle gtk_image_clear$handle() {
        return gtk_image_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_clear(GtkImage *image)
     * }
     */
    public static void gtk_image_clear(MemorySegment image) {
        var mh$ = gtk_image_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_clear", image);
            }
            mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_set_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_set_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_file(GtkImage *image, const gchar *filename)
     * }
     */
    public static FunctionDescriptor gtk_image_set_from_file$descriptor() {
        return gtk_image_set_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_file(GtkImage *image, const gchar *filename)
     * }
     */
    public static MethodHandle gtk_image_set_from_file$handle() {
        return gtk_image_set_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_set_from_file(GtkImage *image, const gchar *filename)
     * }
     */
    public static void gtk_image_set_from_file(MemorySegment image, MemorySegment filename) {
        var mh$ = gtk_image_set_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_set_from_file", image, filename);
            }
            mh$.invokeExact(image, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_set_from_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_set_from_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_resource(GtkImage *image, const gchar *resource_path)
     * }
     */
    public static FunctionDescriptor gtk_image_set_from_resource$descriptor() {
        return gtk_image_set_from_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_resource(GtkImage *image, const gchar *resource_path)
     * }
     */
    public static MethodHandle gtk_image_set_from_resource$handle() {
        return gtk_image_set_from_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_set_from_resource(GtkImage *image, const gchar *resource_path)
     * }
     */
    public static void gtk_image_set_from_resource(MemorySegment image, MemorySegment resource_path) {
        var mh$ = gtk_image_set_from_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_set_from_resource", image, resource_path);
            }
            mh$.invokeExact(image, resource_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_set_from_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_set_from_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_pixbuf(GtkImage *image, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_image_set_from_pixbuf$descriptor() {
        return gtk_image_set_from_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_pixbuf(GtkImage *image, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_image_set_from_pixbuf$handle() {
        return gtk_image_set_from_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_set_from_pixbuf(GtkImage *image, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_image_set_from_pixbuf(MemorySegment image, MemorySegment pixbuf) {
        var mh$ = gtk_image_set_from_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_set_from_pixbuf", image, pixbuf);
            }
            mh$.invokeExact(image, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_set_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_set_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_stock(GtkImage *image, const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_image_set_from_stock$descriptor() {
        return gtk_image_set_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_stock(GtkImage *image, const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_image_set_from_stock$handle() {
        return gtk_image_set_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_set_from_stock(GtkImage *image, const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static void gtk_image_set_from_stock(MemorySegment image, MemorySegment stock_id, int size) {
        var mh$ = gtk_image_set_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_set_from_stock", image, stock_id, size);
            }
            mh$.invokeExact(image, stock_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_set_from_icon_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_set_from_icon_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_icon_set(GtkImage *image, GtkIconSet *icon_set, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_image_set_from_icon_set$descriptor() {
        return gtk_image_set_from_icon_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_icon_set(GtkImage *image, GtkIconSet *icon_set, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_image_set_from_icon_set$handle() {
        return gtk_image_set_from_icon_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_set_from_icon_set(GtkImage *image, GtkIconSet *icon_set, GtkIconSize size)
     * }
     */
    public static void gtk_image_set_from_icon_set(MemorySegment image, MemorySegment icon_set, int size) {
        var mh$ = gtk_image_set_from_icon_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_set_from_icon_set", image, icon_set, size);
            }
            mh$.invokeExact(image, icon_set, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_set_from_animation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_set_from_animation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_animation(GtkImage *image, GdkPixbufAnimation *animation)
     * }
     */
    public static FunctionDescriptor gtk_image_set_from_animation$descriptor() {
        return gtk_image_set_from_animation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_animation(GtkImage *image, GdkPixbufAnimation *animation)
     * }
     */
    public static MethodHandle gtk_image_set_from_animation$handle() {
        return gtk_image_set_from_animation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_set_from_animation(GtkImage *image, GdkPixbufAnimation *animation)
     * }
     */
    public static void gtk_image_set_from_animation(MemorySegment image, MemorySegment animation) {
        var mh$ = gtk_image_set_from_animation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_set_from_animation", image, animation);
            }
            mh$.invokeExact(image, animation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_set_from_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_set_from_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_icon_name(GtkImage *image, const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_image_set_from_icon_name$descriptor() {
        return gtk_image_set_from_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_icon_name(GtkImage *image, const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_image_set_from_icon_name$handle() {
        return gtk_image_set_from_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_set_from_icon_name(GtkImage *image, const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static void gtk_image_set_from_icon_name(MemorySegment image, MemorySegment icon_name, int size) {
        var mh$ = gtk_image_set_from_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_set_from_icon_name", image, icon_name, size);
            }
            mh$.invokeExact(image, icon_name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_set_from_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_set_from_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_gicon(GtkImage *image, GIcon *icon, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_image_set_from_gicon$descriptor() {
        return gtk_image_set_from_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_gicon(GtkImage *image, GIcon *icon, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_image_set_from_gicon$handle() {
        return gtk_image_set_from_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_set_from_gicon(GtkImage *image, GIcon *icon, GtkIconSize size)
     * }
     */
    public static void gtk_image_set_from_gicon(MemorySegment image, MemorySegment icon, int size) {
        var mh$ = gtk_image_set_from_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_set_from_gicon", image, icon, size);
            }
            mh$.invokeExact(image, icon, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_set_from_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_set_from_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_surface(GtkImage *image, cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor gtk_image_set_from_surface$descriptor() {
        return gtk_image_set_from_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_set_from_surface(GtkImage *image, cairo_surface_t *surface)
     * }
     */
    public static MethodHandle gtk_image_set_from_surface$handle() {
        return gtk_image_set_from_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_set_from_surface(GtkImage *image, cairo_surface_t *surface)
     * }
     */
    public static void gtk_image_set_from_surface(MemorySegment image, MemorySegment surface) {
        var mh$ = gtk_image_set_from_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_set_from_surface", image, surface);
            }
            mh$.invokeExact(image, surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_set_pixel_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_set_pixel_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_set_pixel_size(GtkImage *image, gint pixel_size)
     * }
     */
    public static FunctionDescriptor gtk_image_set_pixel_size$descriptor() {
        return gtk_image_set_pixel_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_set_pixel_size(GtkImage *image, gint pixel_size)
     * }
     */
    public static MethodHandle gtk_image_set_pixel_size$handle() {
        return gtk_image_set_pixel_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_set_pixel_size(GtkImage *image, gint pixel_size)
     * }
     */
    public static void gtk_image_set_pixel_size(MemorySegment image, int pixel_size) {
        var mh$ = gtk_image_set_pixel_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_set_pixel_size", image, pixel_size);
            }
            mh$.invokeExact(image, pixel_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_get_storage_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_get_storage_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkImageType gtk_image_get_storage_type(GtkImage *image)
     * }
     */
    public static FunctionDescriptor gtk_image_get_storage_type$descriptor() {
        return gtk_image_get_storage_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkImageType gtk_image_get_storage_type(GtkImage *image)
     * }
     */
    public static MethodHandle gtk_image_get_storage_type$handle() {
        return gtk_image_get_storage_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkImageType gtk_image_get_storage_type(GtkImage *image)
     * }
     */
    public static int gtk_image_get_storage_type(MemorySegment image) {
        var mh$ = gtk_image_get_storage_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_get_storage_type", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_get_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_get_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_image_get_pixbuf(GtkImage *image)
     * }
     */
    public static FunctionDescriptor gtk_image_get_pixbuf$descriptor() {
        return gtk_image_get_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_image_get_pixbuf(GtkImage *image)
     * }
     */
    public static MethodHandle gtk_image_get_pixbuf$handle() {
        return gtk_image_get_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_image_get_pixbuf(GtkImage *image)
     * }
     */
    public static MemorySegment gtk_image_get_pixbuf(MemorySegment image) {
        var mh$ = gtk_image_get_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_get_pixbuf", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_get_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_get_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_get_stock(GtkImage *image, gchar **stock_id, GtkIconSize *size)
     * }
     */
    public static FunctionDescriptor gtk_image_get_stock$descriptor() {
        return gtk_image_get_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_get_stock(GtkImage *image, gchar **stock_id, GtkIconSize *size)
     * }
     */
    public static MethodHandle gtk_image_get_stock$handle() {
        return gtk_image_get_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_get_stock(GtkImage *image, gchar **stock_id, GtkIconSize *size)
     * }
     */
    public static void gtk_image_get_stock(MemorySegment image, MemorySegment stock_id, MemorySegment size) {
        var mh$ = gtk_image_get_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_get_stock", image, stock_id, size);
            }
            mh$.invokeExact(image, stock_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_get_icon_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_get_icon_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_get_icon_set(GtkImage *image, GtkIconSet **icon_set, GtkIconSize *size)
     * }
     */
    public static FunctionDescriptor gtk_image_get_icon_set$descriptor() {
        return gtk_image_get_icon_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_get_icon_set(GtkImage *image, GtkIconSet **icon_set, GtkIconSize *size)
     * }
     */
    public static MethodHandle gtk_image_get_icon_set$handle() {
        return gtk_image_get_icon_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_get_icon_set(GtkImage *image, GtkIconSet **icon_set, GtkIconSize *size)
     * }
     */
    public static void gtk_image_get_icon_set(MemorySegment image, MemorySegment icon_set, MemorySegment size) {
        var mh$ = gtk_image_get_icon_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_get_icon_set", image, icon_set, size);
            }
            mh$.invokeExact(image, icon_set, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_get_animation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_get_animation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gtk_image_get_animation(GtkImage *image)
     * }
     */
    public static FunctionDescriptor gtk_image_get_animation$descriptor() {
        return gtk_image_get_animation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gtk_image_get_animation(GtkImage *image)
     * }
     */
    public static MethodHandle gtk_image_get_animation$handle() {
        return gtk_image_get_animation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbufAnimation *gtk_image_get_animation(GtkImage *image)
     * }
     */
    public static MemorySegment gtk_image_get_animation(MemorySegment image) {
        var mh$ = gtk_image_get_animation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_get_animation", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_get_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_get_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_get_icon_name(GtkImage *image, const gchar **icon_name, GtkIconSize *size)
     * }
     */
    public static FunctionDescriptor gtk_image_get_icon_name$descriptor() {
        return gtk_image_get_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_get_icon_name(GtkImage *image, const gchar **icon_name, GtkIconSize *size)
     * }
     */
    public static MethodHandle gtk_image_get_icon_name$handle() {
        return gtk_image_get_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_get_icon_name(GtkImage *image, const gchar **icon_name, GtkIconSize *size)
     * }
     */
    public static void gtk_image_get_icon_name(MemorySegment image, MemorySegment icon_name, MemorySegment size) {
        var mh$ = gtk_image_get_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_get_icon_name", image, icon_name, size);
            }
            mh$.invokeExact(image, icon_name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_get_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_get_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_image_get_gicon(GtkImage *image, GIcon **gicon, GtkIconSize *size)
     * }
     */
    public static FunctionDescriptor gtk_image_get_gicon$descriptor() {
        return gtk_image_get_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_image_get_gicon(GtkImage *image, GIcon **gicon, GtkIconSize *size)
     * }
     */
    public static MethodHandle gtk_image_get_gicon$handle() {
        return gtk_image_get_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_image_get_gicon(GtkImage *image, GIcon **gicon, GtkIconSize *size)
     * }
     */
    public static void gtk_image_get_gicon(MemorySegment image, MemorySegment gicon, MemorySegment size) {
        var mh$ = gtk_image_get_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_get_gicon", image, gicon, size);
            }
            mh$.invokeExact(image, gicon, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_image_get_pixel_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_image_get_pixel_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_image_get_pixel_size(GtkImage *image)
     * }
     */
    public static FunctionDescriptor gtk_image_get_pixel_size$descriptor() {
        return gtk_image_get_pixel_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_image_get_pixel_size(GtkImage *image)
     * }
     */
    public static MethodHandle gtk_image_get_pixel_size$handle() {
        return gtk_image_get_pixel_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_image_get_pixel_size(GtkImage *image)
     * }
     */
    public static int gtk_image_get_pixel_size(MemorySegment image) {
        var mh$ = gtk_image_get_pixel_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_image_get_pixel_size", image);
            }
            return (int)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_ENTRY_ICON_PRIMARY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ENTRY_ICON_PRIMARY = 0
     * }
     */
    public static int GTK_ENTRY_ICON_PRIMARY() {
        return GTK_ENTRY_ICON_PRIMARY;
    }
    private static final int GTK_ENTRY_ICON_SECONDARY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ENTRY_ICON_SECONDARY = 1
     * }
     */
    public static int GTK_ENTRY_ICON_SECONDARY() {
        return GTK_ENTRY_ICON_SECONDARY;
    }

    private static class gtk_entry_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_entry_get_type()
     * }
     */
    public static FunctionDescriptor gtk_entry_get_type$descriptor() {
        return gtk_entry_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_entry_get_type()
     * }
     */
    public static MethodHandle gtk_entry_get_type$handle() {
        return gtk_entry_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_entry_get_type()
     * }
     */
    public static long gtk_entry_get_type() {
        var mh$ = gtk_entry_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_entry_new()
     * }
     */
    public static FunctionDescriptor gtk_entry_new$descriptor() {
        return gtk_entry_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_entry_new()
     * }
     */
    public static MethodHandle gtk_entry_new$handle() {
        return gtk_entry_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_entry_new()
     * }
     */
    public static MemorySegment gtk_entry_new() {
        var mh$ = gtk_entry_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_new_with_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_new_with_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_entry_new_with_buffer(GtkEntryBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_entry_new_with_buffer$descriptor() {
        return gtk_entry_new_with_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_entry_new_with_buffer(GtkEntryBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_entry_new_with_buffer$handle() {
        return gtk_entry_new_with_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_entry_new_with_buffer(GtkEntryBuffer *buffer)
     * }
     */
    public static MemorySegment gtk_entry_new_with_buffer(MemorySegment buffer) {
        var mh$ = gtk_entry_new_with_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_new_with_buffer", buffer);
            }
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEntryBuffer *gtk_entry_get_buffer(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_buffer$descriptor() {
        return gtk_entry_get_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEntryBuffer *gtk_entry_get_buffer(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_buffer$handle() {
        return gtk_entry_get_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEntryBuffer *gtk_entry_get_buffer(GtkEntry *entry)
     * }
     */
    public static MemorySegment gtk_entry_get_buffer(MemorySegment entry) {
        var mh$ = gtk_entry_get_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_buffer", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_buffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_buffer(GtkEntry *entry, GtkEntryBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_buffer$descriptor() {
        return gtk_entry_set_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_buffer(GtkEntry *entry, GtkEntryBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_entry_set_buffer$handle() {
        return gtk_entry_set_buffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_buffer(GtkEntry *entry, GtkEntryBuffer *buffer)
     * }
     */
    public static void gtk_entry_set_buffer(MemorySegment entry, MemorySegment buffer) {
        var mh$ = gtk_entry_set_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_buffer", entry, buffer);
            }
            mh$.invokeExact(entry, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_text_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_text_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_get_text_area(GtkEntry *entry, GdkRectangle *text_area)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_text_area$descriptor() {
        return gtk_entry_get_text_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_get_text_area(GtkEntry *entry, GdkRectangle *text_area)
     * }
     */
    public static MethodHandle gtk_entry_get_text_area$handle() {
        return gtk_entry_get_text_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_get_text_area(GtkEntry *entry, GdkRectangle *text_area)
     * }
     */
    public static void gtk_entry_get_text_area(MemorySegment entry, MemorySegment text_area) {
        var mh$ = gtk_entry_get_text_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_text_area", entry, text_area);
            }
            mh$.invokeExact(entry, text_area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_visibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_visibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_visibility(GtkEntry *entry, gboolean visible)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_visibility$descriptor() {
        return gtk_entry_set_visibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_visibility(GtkEntry *entry, gboolean visible)
     * }
     */
    public static MethodHandle gtk_entry_set_visibility$handle() {
        return gtk_entry_set_visibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_visibility(GtkEntry *entry, gboolean visible)
     * }
     */
    public static void gtk_entry_set_visibility(MemorySegment entry, int visible) {
        var mh$ = gtk_entry_set_visibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_visibility", entry, visible);
            }
            mh$.invokeExact(entry, visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_visibility {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_visibility"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_visibility(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_visibility$descriptor() {
        return gtk_entry_get_visibility.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_visibility(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_visibility$handle() {
        return gtk_entry_get_visibility.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_visibility(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_visibility(MemorySegment entry) {
        var mh$ = gtk_entry_get_visibility.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_visibility", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_invisible_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_invisible_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_invisible_char(GtkEntry *entry, gunichar ch)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_invisible_char$descriptor() {
        return gtk_entry_set_invisible_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_invisible_char(GtkEntry *entry, gunichar ch)
     * }
     */
    public static MethodHandle gtk_entry_set_invisible_char$handle() {
        return gtk_entry_set_invisible_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_invisible_char(GtkEntry *entry, gunichar ch)
     * }
     */
    public static void gtk_entry_set_invisible_char(MemorySegment entry, int ch) {
        var mh$ = gtk_entry_set_invisible_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_invisible_char", entry, ch);
            }
            mh$.invokeExact(entry, ch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_invisible_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_invisible_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar gtk_entry_get_invisible_char(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_invisible_char$descriptor() {
        return gtk_entry_get_invisible_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar gtk_entry_get_invisible_char(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_invisible_char$handle() {
        return gtk_entry_get_invisible_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar gtk_entry_get_invisible_char(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_invisible_char(MemorySegment entry) {
        var mh$ = gtk_entry_get_invisible_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_invisible_char", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_unset_invisible_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_unset_invisible_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_unset_invisible_char(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_unset_invisible_char$descriptor() {
        return gtk_entry_unset_invisible_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_unset_invisible_char(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_unset_invisible_char$handle() {
        return gtk_entry_unset_invisible_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_unset_invisible_char(GtkEntry *entry)
     * }
     */
    public static void gtk_entry_unset_invisible_char(MemorySegment entry) {
        var mh$ = gtk_entry_unset_invisible_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_unset_invisible_char", entry);
            }
            mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_has_frame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_has_frame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_has_frame(GtkEntry *entry, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_has_frame$descriptor() {
        return gtk_entry_set_has_frame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_has_frame(GtkEntry *entry, gboolean setting)
     * }
     */
    public static MethodHandle gtk_entry_set_has_frame$handle() {
        return gtk_entry_set_has_frame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_has_frame(GtkEntry *entry, gboolean setting)
     * }
     */
    public static void gtk_entry_set_has_frame(MemorySegment entry, int setting) {
        var mh$ = gtk_entry_set_has_frame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_has_frame", entry, setting);
            }
            mh$.invokeExact(entry, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_has_frame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_has_frame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_has_frame(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_has_frame$descriptor() {
        return gtk_entry_get_has_frame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_has_frame(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_has_frame$handle() {
        return gtk_entry_get_has_frame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_has_frame(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_has_frame(MemorySegment entry) {
        var mh$ = gtk_entry_get_has_frame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_has_frame", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_inner_border {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_inner_border"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_inner_border(GtkEntry *entry, const GtkBorder *border)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_inner_border$descriptor() {
        return gtk_entry_set_inner_border.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_inner_border(GtkEntry *entry, const GtkBorder *border)
     * }
     */
    public static MethodHandle gtk_entry_set_inner_border$handle() {
        return gtk_entry_set_inner_border.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_inner_border(GtkEntry *entry, const GtkBorder *border)
     * }
     */
    public static void gtk_entry_set_inner_border(MemorySegment entry, MemorySegment border) {
        var mh$ = gtk_entry_set_inner_border.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_inner_border", entry, border);
            }
            mh$.invokeExact(entry, border);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_inner_border {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_inner_border"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GtkBorder *gtk_entry_get_inner_border(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_inner_border$descriptor() {
        return gtk_entry_get_inner_border.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GtkBorder *gtk_entry_get_inner_border(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_inner_border$handle() {
        return gtk_entry_get_inner_border.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GtkBorder *gtk_entry_get_inner_border(GtkEntry *entry)
     * }
     */
    public static MemorySegment gtk_entry_get_inner_border(MemorySegment entry) {
        var mh$ = gtk_entry_get_inner_border.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_inner_border", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_overwrite_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_overwrite_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_overwrite_mode(GtkEntry *entry, gboolean overwrite)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_overwrite_mode$descriptor() {
        return gtk_entry_set_overwrite_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_overwrite_mode(GtkEntry *entry, gboolean overwrite)
     * }
     */
    public static MethodHandle gtk_entry_set_overwrite_mode$handle() {
        return gtk_entry_set_overwrite_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_overwrite_mode(GtkEntry *entry, gboolean overwrite)
     * }
     */
    public static void gtk_entry_set_overwrite_mode(MemorySegment entry, int overwrite) {
        var mh$ = gtk_entry_set_overwrite_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_overwrite_mode", entry, overwrite);
            }
            mh$.invokeExact(entry, overwrite);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_overwrite_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_overwrite_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_overwrite_mode(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_overwrite_mode$descriptor() {
        return gtk_entry_get_overwrite_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_overwrite_mode(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_overwrite_mode$handle() {
        return gtk_entry_get_overwrite_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_overwrite_mode(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_overwrite_mode(MemorySegment entry) {
        var mh$ = gtk_entry_get_overwrite_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_overwrite_mode", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_max_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_max_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_max_length(GtkEntry *entry, gint max)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_max_length$descriptor() {
        return gtk_entry_set_max_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_max_length(GtkEntry *entry, gint max)
     * }
     */
    public static MethodHandle gtk_entry_set_max_length$handle() {
        return gtk_entry_set_max_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_max_length(GtkEntry *entry, gint max)
     * }
     */
    public static void gtk_entry_set_max_length(MemorySegment entry, int max) {
        var mh$ = gtk_entry_set_max_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_max_length", entry, max);
            }
            mh$.invokeExact(entry, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_max_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_max_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_entry_get_max_length(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_max_length$descriptor() {
        return gtk_entry_get_max_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_entry_get_max_length(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_max_length$handle() {
        return gtk_entry_get_max_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_entry_get_max_length(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_max_length(MemorySegment entry) {
        var mh$ = gtk_entry_get_max_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_max_length", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_text_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_text_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 gtk_entry_get_text_length(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_text_length$descriptor() {
        return gtk_entry_get_text_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 gtk_entry_get_text_length(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_text_length$handle() {
        return gtk_entry_get_text_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 gtk_entry_get_text_length(GtkEntry *entry)
     * }
     */
    public static short gtk_entry_get_text_length(MemorySegment entry) {
        var mh$ = gtk_entry_get_text_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_text_length", entry);
            }
            return (short)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_activates_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_activates_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_activates_default(GtkEntry *entry, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_activates_default$descriptor() {
        return gtk_entry_set_activates_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_activates_default(GtkEntry *entry, gboolean setting)
     * }
     */
    public static MethodHandle gtk_entry_set_activates_default$handle() {
        return gtk_entry_set_activates_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_activates_default(GtkEntry *entry, gboolean setting)
     * }
     */
    public static void gtk_entry_set_activates_default(MemorySegment entry, int setting) {
        var mh$ = gtk_entry_set_activates_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_activates_default", entry, setting);
            }
            mh$.invokeExact(entry, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_activates_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_activates_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_activates_default(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_activates_default$descriptor() {
        return gtk_entry_get_activates_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_activates_default(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_activates_default$handle() {
        return gtk_entry_get_activates_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_activates_default(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_activates_default(MemorySegment entry) {
        var mh$ = gtk_entry_get_activates_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_activates_default", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_width_chars(GtkEntry *entry, gint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_width_chars$descriptor() {
        return gtk_entry_set_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_width_chars(GtkEntry *entry, gint n_chars)
     * }
     */
    public static MethodHandle gtk_entry_set_width_chars$handle() {
        return gtk_entry_set_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_width_chars(GtkEntry *entry, gint n_chars)
     * }
     */
    public static void gtk_entry_set_width_chars(MemorySegment entry, int n_chars) {
        var mh$ = gtk_entry_set_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_width_chars", entry, n_chars);
            }
            mh$.invokeExact(entry, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_entry_get_width_chars(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_width_chars$descriptor() {
        return gtk_entry_get_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_entry_get_width_chars(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_width_chars$handle() {
        return gtk_entry_get_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_entry_get_width_chars(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_width_chars(MemorySegment entry) {
        var mh$ = gtk_entry_get_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_width_chars", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_max_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_max_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_max_width_chars(GtkEntry *entry, gint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_max_width_chars$descriptor() {
        return gtk_entry_set_max_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_max_width_chars(GtkEntry *entry, gint n_chars)
     * }
     */
    public static MethodHandle gtk_entry_set_max_width_chars$handle() {
        return gtk_entry_set_max_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_max_width_chars(GtkEntry *entry, gint n_chars)
     * }
     */
    public static void gtk_entry_set_max_width_chars(MemorySegment entry, int n_chars) {
        var mh$ = gtk_entry_set_max_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_max_width_chars", entry, n_chars);
            }
            mh$.invokeExact(entry, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_max_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_max_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_entry_get_max_width_chars(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_max_width_chars$descriptor() {
        return gtk_entry_get_max_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_entry_get_max_width_chars(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_max_width_chars$handle() {
        return gtk_entry_get_max_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_entry_get_max_width_chars(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_max_width_chars(MemorySegment entry) {
        var mh$ = gtk_entry_get_max_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_max_width_chars", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_text(GtkEntry *entry, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_text$descriptor() {
        return gtk_entry_set_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_text(GtkEntry *entry, const gchar *text)
     * }
     */
    public static MethodHandle gtk_entry_set_text$handle() {
        return gtk_entry_set_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_text(GtkEntry *entry, const gchar *text)
     * }
     */
    public static void gtk_entry_set_text(MemorySegment entry, MemorySegment text) {
        var mh$ = gtk_entry_set_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_text", entry, text);
            }
            mh$.invokeExact(entry, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_text(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_text$descriptor() {
        return gtk_entry_get_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_text(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_text$handle() {
        return gtk_entry_get_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_text(GtkEntry *entry)
     * }
     */
    public static MemorySegment gtk_entry_get_text(MemorySegment entry) {
        var mh$ = gtk_entry_get_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_text", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *gtk_entry_get_layout(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_layout$descriptor() {
        return gtk_entry_get_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *gtk_entry_get_layout(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_layout$handle() {
        return gtk_entry_get_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *gtk_entry_get_layout(GtkEntry *entry)
     * }
     */
    public static MemorySegment gtk_entry_get_layout(MemorySegment entry) {
        var mh$ = gtk_entry_get_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_layout", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_layout_offsets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_layout_offsets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_get_layout_offsets(GtkEntry *entry, gint *x, gint *y)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_layout_offsets$descriptor() {
        return gtk_entry_get_layout_offsets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_get_layout_offsets(GtkEntry *entry, gint *x, gint *y)
     * }
     */
    public static MethodHandle gtk_entry_get_layout_offsets$handle() {
        return gtk_entry_get_layout_offsets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_get_layout_offsets(GtkEntry *entry, gint *x, gint *y)
     * }
     */
    public static void gtk_entry_get_layout_offsets(MemorySegment entry, MemorySegment x, MemorySegment y) {
        var mh$ = gtk_entry_get_layout_offsets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_layout_offsets", entry, x, y);
            }
            mh$.invokeExact(entry, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_alignment(GtkEntry *entry, gfloat xalign)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_alignment$descriptor() {
        return gtk_entry_set_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_alignment(GtkEntry *entry, gfloat xalign)
     * }
     */
    public static MethodHandle gtk_entry_set_alignment$handle() {
        return gtk_entry_set_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_alignment(GtkEntry *entry, gfloat xalign)
     * }
     */
    public static void gtk_entry_set_alignment(MemorySegment entry, float xalign) {
        var mh$ = gtk_entry_set_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_alignment", entry, xalign);
            }
            mh$.invokeExact(entry, xalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gfloat gtk_entry_get_alignment(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_alignment$descriptor() {
        return gtk_entry_get_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gfloat gtk_entry_get_alignment(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_alignment$handle() {
        return gtk_entry_get_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gfloat gtk_entry_get_alignment(GtkEntry *entry)
     * }
     */
    public static float gtk_entry_get_alignment(MemorySegment entry) {
        var mh$ = gtk_entry_get_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_alignment", entry);
            }
            return (float)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_completion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_completion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_completion(GtkEntry *entry, GtkEntryCompletion *completion)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_completion$descriptor() {
        return gtk_entry_set_completion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_completion(GtkEntry *entry, GtkEntryCompletion *completion)
     * }
     */
    public static MethodHandle gtk_entry_set_completion$handle() {
        return gtk_entry_set_completion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_completion(GtkEntry *entry, GtkEntryCompletion *completion)
     * }
     */
    public static void gtk_entry_set_completion(MemorySegment entry, MemorySegment completion) {
        var mh$ = gtk_entry_set_completion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_completion", entry, completion);
            }
            mh$.invokeExact(entry, completion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_completion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_completion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEntryCompletion *gtk_entry_get_completion(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_completion$descriptor() {
        return gtk_entry_get_completion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEntryCompletion *gtk_entry_get_completion(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_completion$handle() {
        return gtk_entry_get_completion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEntryCompletion *gtk_entry_get_completion(GtkEntry *entry)
     * }
     */
    public static MemorySegment gtk_entry_get_completion(MemorySegment entry) {
        var mh$ = gtk_entry_get_completion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_completion", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_layout_index_to_text_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_layout_index_to_text_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_entry_layout_index_to_text_index(GtkEntry *entry, gint layout_index)
     * }
     */
    public static FunctionDescriptor gtk_entry_layout_index_to_text_index$descriptor() {
        return gtk_entry_layout_index_to_text_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_entry_layout_index_to_text_index(GtkEntry *entry, gint layout_index)
     * }
     */
    public static MethodHandle gtk_entry_layout_index_to_text_index$handle() {
        return gtk_entry_layout_index_to_text_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_entry_layout_index_to_text_index(GtkEntry *entry, gint layout_index)
     * }
     */
    public static int gtk_entry_layout_index_to_text_index(MemorySegment entry, int layout_index) {
        var mh$ = gtk_entry_layout_index_to_text_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_layout_index_to_text_index", entry, layout_index);
            }
            return (int)mh$.invokeExact(entry, layout_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_text_index_to_layout_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_text_index_to_layout_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_entry_text_index_to_layout_index(GtkEntry *entry, gint text_index)
     * }
     */
    public static FunctionDescriptor gtk_entry_text_index_to_layout_index$descriptor() {
        return gtk_entry_text_index_to_layout_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_entry_text_index_to_layout_index(GtkEntry *entry, gint text_index)
     * }
     */
    public static MethodHandle gtk_entry_text_index_to_layout_index$handle() {
        return gtk_entry_text_index_to_layout_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_entry_text_index_to_layout_index(GtkEntry *entry, gint text_index)
     * }
     */
    public static int gtk_entry_text_index_to_layout_index(MemorySegment entry, int text_index) {
        var mh$ = gtk_entry_text_index_to_layout_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_text_index_to_layout_index", entry, text_index);
            }
            return (int)mh$.invokeExact(entry, text_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_cursor_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_cursor_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_cursor_hadjustment(GtkEntry *entry, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_cursor_hadjustment$descriptor() {
        return gtk_entry_set_cursor_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_cursor_hadjustment(GtkEntry *entry, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_entry_set_cursor_hadjustment$handle() {
        return gtk_entry_set_cursor_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_cursor_hadjustment(GtkEntry *entry, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_entry_set_cursor_hadjustment(MemorySegment entry, MemorySegment adjustment) {
        var mh$ = gtk_entry_set_cursor_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_cursor_hadjustment", entry, adjustment);
            }
            mh$.invokeExact(entry, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_cursor_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_cursor_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_entry_get_cursor_hadjustment(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_cursor_hadjustment$descriptor() {
        return gtk_entry_get_cursor_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_entry_get_cursor_hadjustment(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_cursor_hadjustment$handle() {
        return gtk_entry_get_cursor_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_entry_get_cursor_hadjustment(GtkEntry *entry)
     * }
     */
    public static MemorySegment gtk_entry_get_cursor_hadjustment(MemorySegment entry) {
        var mh$ = gtk_entry_get_cursor_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_cursor_hadjustment", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_progress_fraction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_progress_fraction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_progress_fraction(GtkEntry *entry, gdouble fraction)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_progress_fraction$descriptor() {
        return gtk_entry_set_progress_fraction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_progress_fraction(GtkEntry *entry, gdouble fraction)
     * }
     */
    public static MethodHandle gtk_entry_set_progress_fraction$handle() {
        return gtk_entry_set_progress_fraction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_progress_fraction(GtkEntry *entry, gdouble fraction)
     * }
     */
    public static void gtk_entry_set_progress_fraction(MemorySegment entry, double fraction) {
        var mh$ = gtk_entry_set_progress_fraction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_progress_fraction", entry, fraction);
            }
            mh$.invokeExact(entry, fraction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_progress_fraction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_progress_fraction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_entry_get_progress_fraction(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_progress_fraction$descriptor() {
        return gtk_entry_get_progress_fraction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_entry_get_progress_fraction(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_progress_fraction$handle() {
        return gtk_entry_get_progress_fraction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_entry_get_progress_fraction(GtkEntry *entry)
     * }
     */
    public static double gtk_entry_get_progress_fraction(MemorySegment entry) {
        var mh$ = gtk_entry_get_progress_fraction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_progress_fraction", entry);
            }
            return (double)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_progress_pulse_step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_progress_pulse_step"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_progress_pulse_step(GtkEntry *entry, gdouble fraction)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_progress_pulse_step$descriptor() {
        return gtk_entry_set_progress_pulse_step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_progress_pulse_step(GtkEntry *entry, gdouble fraction)
     * }
     */
    public static MethodHandle gtk_entry_set_progress_pulse_step$handle() {
        return gtk_entry_set_progress_pulse_step.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_progress_pulse_step(GtkEntry *entry, gdouble fraction)
     * }
     */
    public static void gtk_entry_set_progress_pulse_step(MemorySegment entry, double fraction) {
        var mh$ = gtk_entry_set_progress_pulse_step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_progress_pulse_step", entry, fraction);
            }
            mh$.invokeExact(entry, fraction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_progress_pulse_step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_progress_pulse_step"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble gtk_entry_get_progress_pulse_step(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_progress_pulse_step$descriptor() {
        return gtk_entry_get_progress_pulse_step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble gtk_entry_get_progress_pulse_step(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_progress_pulse_step$handle() {
        return gtk_entry_get_progress_pulse_step.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble gtk_entry_get_progress_pulse_step(GtkEntry *entry)
     * }
     */
    public static double gtk_entry_get_progress_pulse_step(MemorySegment entry) {
        var mh$ = gtk_entry_get_progress_pulse_step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_progress_pulse_step", entry);
            }
            return (double)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_progress_pulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_progress_pulse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_progress_pulse(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_progress_pulse$descriptor() {
        return gtk_entry_progress_pulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_progress_pulse(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_progress_pulse$handle() {
        return gtk_entry_progress_pulse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_progress_pulse(GtkEntry *entry)
     * }
     */
    public static void gtk_entry_progress_pulse(MemorySegment entry) {
        var mh$ = gtk_entry_progress_pulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_progress_pulse", entry);
            }
            mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_placeholder_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_placeholder_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_placeholder_text(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_placeholder_text$descriptor() {
        return gtk_entry_get_placeholder_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_placeholder_text(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_placeholder_text$handle() {
        return gtk_entry_get_placeholder_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_placeholder_text(GtkEntry *entry)
     * }
     */
    public static MemorySegment gtk_entry_get_placeholder_text(MemorySegment entry) {
        var mh$ = gtk_entry_get_placeholder_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_placeholder_text", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_placeholder_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_placeholder_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_placeholder_text(GtkEntry *entry, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_placeholder_text$descriptor() {
        return gtk_entry_set_placeholder_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_placeholder_text(GtkEntry *entry, const gchar *text)
     * }
     */
    public static MethodHandle gtk_entry_set_placeholder_text$handle() {
        return gtk_entry_set_placeholder_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_placeholder_text(GtkEntry *entry, const gchar *text)
     * }
     */
    public static void gtk_entry_set_placeholder_text(MemorySegment entry, MemorySegment text) {
        var mh$ = gtk_entry_set_placeholder_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_placeholder_text", entry, text);
            }
            mh$.invokeExact(entry, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_icon_from_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_icon_from_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_pixbuf(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_icon_from_pixbuf$descriptor() {
        return gtk_entry_set_icon_from_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_pixbuf(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_entry_set_icon_from_pixbuf$handle() {
        return gtk_entry_set_icon_from_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_pixbuf(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_entry_set_icon_from_pixbuf(MemorySegment entry, int icon_pos, MemorySegment pixbuf) {
        var mh$ = gtk_entry_set_icon_from_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_icon_from_pixbuf", entry, icon_pos, pixbuf);
            }
            mh$.invokeExact(entry, icon_pos, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_icon_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_icon_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_stock(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_icon_from_stock$descriptor() {
        return gtk_entry_set_icon_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_stock(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_entry_set_icon_from_stock$handle() {
        return gtk_entry_set_icon_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_stock(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *stock_id)
     * }
     */
    public static void gtk_entry_set_icon_from_stock(MemorySegment entry, int icon_pos, MemorySegment stock_id) {
        var mh$ = gtk_entry_set_icon_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_icon_from_stock", entry, icon_pos, stock_id);
            }
            mh$.invokeExact(entry, icon_pos, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_icon_from_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_icon_from_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_icon_name(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_icon_from_icon_name$descriptor() {
        return gtk_entry_set_icon_from_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_icon_name(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_entry_set_icon_from_icon_name$handle() {
        return gtk_entry_set_icon_from_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_icon_name(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *icon_name)
     * }
     */
    public static void gtk_entry_set_icon_from_icon_name(MemorySegment entry, int icon_pos, MemorySegment icon_name) {
        var mh$ = gtk_entry_set_icon_from_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_icon_from_icon_name", entry, icon_pos, icon_name);
            }
            mh$.invokeExact(entry, icon_pos, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_icon_from_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_icon_from_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_gicon(GtkEntry *entry, GtkEntryIconPosition icon_pos, GIcon *icon)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_icon_from_gicon$descriptor() {
        return gtk_entry_set_icon_from_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_gicon(GtkEntry *entry, GtkEntryIconPosition icon_pos, GIcon *icon)
     * }
     */
    public static MethodHandle gtk_entry_set_icon_from_gicon$handle() {
        return gtk_entry_set_icon_from_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_from_gicon(GtkEntry *entry, GtkEntryIconPosition icon_pos, GIcon *icon)
     * }
     */
    public static void gtk_entry_set_icon_from_gicon(MemorySegment entry, int icon_pos, MemorySegment icon) {
        var mh$ = gtk_entry_set_icon_from_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_icon_from_gicon", entry, icon_pos, icon);
            }
            mh$.invokeExact(entry, icon_pos, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_storage_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_storage_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkImageType gtk_entry_get_icon_storage_type(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_storage_type$descriptor() {
        return gtk_entry_get_icon_storage_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkImageType gtk_entry_get_icon_storage_type(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_storage_type$handle() {
        return gtk_entry_get_icon_storage_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkImageType gtk_entry_get_icon_storage_type(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static int gtk_entry_get_icon_storage_type(MemorySegment entry, int icon_pos) {
        var mh$ = gtk_entry_get_icon_storage_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_storage_type", entry, icon_pos);
            }
            return (int)mh$.invokeExact(entry, icon_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_entry_get_icon_pixbuf(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_pixbuf$descriptor() {
        return gtk_entry_get_icon_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_entry_get_icon_pixbuf(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_pixbuf$handle() {
        return gtk_entry_get_icon_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_entry_get_icon_pixbuf(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MemorySegment gtk_entry_get_icon_pixbuf(MemorySegment entry, int icon_pos) {
        var mh$ = gtk_entry_get_icon_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_pixbuf", entry, icon_pos);
            }
            return (MemorySegment)mh$.invokeExact(entry, icon_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_icon_stock(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_stock$descriptor() {
        return gtk_entry_get_icon_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_icon_stock(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_stock$handle() {
        return gtk_entry_get_icon_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_icon_stock(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MemorySegment gtk_entry_get_icon_stock(MemorySegment entry, int icon_pos) {
        var mh$ = gtk_entry_get_icon_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_stock", entry, icon_pos);
            }
            return (MemorySegment)mh$.invokeExact(entry, icon_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_icon_name(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_name$descriptor() {
        return gtk_entry_get_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_icon_name(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_name$handle() {
        return gtk_entry_get_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_entry_get_icon_name(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MemorySegment gtk_entry_get_icon_name(MemorySegment entry, int icon_pos) {
        var mh$ = gtk_entry_get_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_name", entry, icon_pos);
            }
            return (MemorySegment)mh$.invokeExact(entry, icon_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIcon *gtk_entry_get_icon_gicon(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_gicon$descriptor() {
        return gtk_entry_get_icon_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIcon *gtk_entry_get_icon_gicon(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_gicon$handle() {
        return gtk_entry_get_icon_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIcon *gtk_entry_get_icon_gicon(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MemorySegment gtk_entry_get_icon_gicon(MemorySegment entry, int icon_pos) {
        var mh$ = gtk_entry_get_icon_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_gicon", entry, icon_pos);
            }
            return (MemorySegment)mh$.invokeExact(entry, icon_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_icon_activatable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_icon_activatable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_activatable(GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean activatable)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_icon_activatable$descriptor() {
        return gtk_entry_set_icon_activatable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_activatable(GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean activatable)
     * }
     */
    public static MethodHandle gtk_entry_set_icon_activatable$handle() {
        return gtk_entry_set_icon_activatable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_activatable(GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean activatable)
     * }
     */
    public static void gtk_entry_set_icon_activatable(MemorySegment entry, int icon_pos, int activatable) {
        var mh$ = gtk_entry_set_icon_activatable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_icon_activatable", entry, icon_pos, activatable);
            }
            mh$.invokeExact(entry, icon_pos, activatable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_activatable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_activatable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_icon_activatable(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_activatable$descriptor() {
        return gtk_entry_get_icon_activatable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_icon_activatable(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_activatable$handle() {
        return gtk_entry_get_icon_activatable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_icon_activatable(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static int gtk_entry_get_icon_activatable(MemorySegment entry, int icon_pos) {
        var mh$ = gtk_entry_get_icon_activatable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_activatable", entry, icon_pos);
            }
            return (int)mh$.invokeExact(entry, icon_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_icon_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_icon_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_sensitive(GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean sensitive)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_icon_sensitive$descriptor() {
        return gtk_entry_set_icon_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_sensitive(GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean sensitive)
     * }
     */
    public static MethodHandle gtk_entry_set_icon_sensitive$handle() {
        return gtk_entry_set_icon_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_sensitive(GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean sensitive)
     * }
     */
    public static void gtk_entry_set_icon_sensitive(MemorySegment entry, int icon_pos, int sensitive) {
        var mh$ = gtk_entry_set_icon_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_icon_sensitive", entry, icon_pos, sensitive);
            }
            mh$.invokeExact(entry, icon_pos, sensitive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_icon_sensitive(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_sensitive$descriptor() {
        return gtk_entry_get_icon_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_icon_sensitive(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_sensitive$handle() {
        return gtk_entry_get_icon_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_get_icon_sensitive(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static int gtk_entry_get_icon_sensitive(MemorySegment entry, int icon_pos) {
        var mh$ = gtk_entry_get_icon_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_sensitive", entry, icon_pos);
            }
            return (int)mh$.invokeExact(entry, icon_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_at_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_at_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_entry_get_icon_at_pos(GtkEntry *entry, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_at_pos$descriptor() {
        return gtk_entry_get_icon_at_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_entry_get_icon_at_pos(GtkEntry *entry, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_at_pos$handle() {
        return gtk_entry_get_icon_at_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_entry_get_icon_at_pos(GtkEntry *entry, gint x, gint y)
     * }
     */
    public static int gtk_entry_get_icon_at_pos(MemorySegment entry, int x, int y) {
        var mh$ = gtk_entry_get_icon_at_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_at_pos", entry, x, y);
            }
            return (int)mh$.invokeExact(entry, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_icon_tooltip_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_icon_tooltip_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_tooltip_text(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *tooltip)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_icon_tooltip_text$descriptor() {
        return gtk_entry_set_icon_tooltip_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_tooltip_text(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *tooltip)
     * }
     */
    public static MethodHandle gtk_entry_set_icon_tooltip_text$handle() {
        return gtk_entry_set_icon_tooltip_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_tooltip_text(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *tooltip)
     * }
     */
    public static void gtk_entry_set_icon_tooltip_text(MemorySegment entry, int icon_pos, MemorySegment tooltip) {
        var mh$ = gtk_entry_set_icon_tooltip_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_icon_tooltip_text", entry, icon_pos, tooltip);
            }
            mh$.invokeExact(entry, icon_pos, tooltip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_tooltip_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_tooltip_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_entry_get_icon_tooltip_text(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_tooltip_text$descriptor() {
        return gtk_entry_get_icon_tooltip_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_entry_get_icon_tooltip_text(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_tooltip_text$handle() {
        return gtk_entry_get_icon_tooltip_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_entry_get_icon_tooltip_text(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MemorySegment gtk_entry_get_icon_tooltip_text(MemorySegment entry, int icon_pos) {
        var mh$ = gtk_entry_get_icon_tooltip_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_tooltip_text", entry, icon_pos);
            }
            return (MemorySegment)mh$.invokeExact(entry, icon_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_icon_tooltip_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_icon_tooltip_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_tooltip_markup(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *tooltip)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_icon_tooltip_markup$descriptor() {
        return gtk_entry_set_icon_tooltip_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_tooltip_markup(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *tooltip)
     * }
     */
    public static MethodHandle gtk_entry_set_icon_tooltip_markup$handle() {
        return gtk_entry_set_icon_tooltip_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_tooltip_markup(GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *tooltip)
     * }
     */
    public static void gtk_entry_set_icon_tooltip_markup(MemorySegment entry, int icon_pos, MemorySegment tooltip) {
        var mh$ = gtk_entry_set_icon_tooltip_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_icon_tooltip_markup", entry, icon_pos, tooltip);
            }
            mh$.invokeExact(entry, icon_pos, tooltip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_tooltip_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_tooltip_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_entry_get_icon_tooltip_markup(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_tooltip_markup$descriptor() {
        return gtk_entry_get_icon_tooltip_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_entry_get_icon_tooltip_markup(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_tooltip_markup$handle() {
        return gtk_entry_get_icon_tooltip_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_entry_get_icon_tooltip_markup(GtkEntry *entry, GtkEntryIconPosition icon_pos)
     * }
     */
    public static MemorySegment gtk_entry_get_icon_tooltip_markup(MemorySegment entry, int icon_pos) {
        var mh$ = gtk_entry_get_icon_tooltip_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_tooltip_markup", entry, icon_pos);
            }
            return (MemorySegment)mh$.invokeExact(entry, icon_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_icon_drag_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_icon_drag_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_drag_source(GtkEntry *entry, GtkEntryIconPosition icon_pos, GtkTargetList *target_list, GdkDragAction actions)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_icon_drag_source$descriptor() {
        return gtk_entry_set_icon_drag_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_drag_source(GtkEntry *entry, GtkEntryIconPosition icon_pos, GtkTargetList *target_list, GdkDragAction actions)
     * }
     */
    public static MethodHandle gtk_entry_set_icon_drag_source$handle() {
        return gtk_entry_set_icon_drag_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_icon_drag_source(GtkEntry *entry, GtkEntryIconPosition icon_pos, GtkTargetList *target_list, GdkDragAction actions)
     * }
     */
    public static void gtk_entry_set_icon_drag_source(MemorySegment entry, int icon_pos, MemorySegment target_list, int actions) {
        var mh$ = gtk_entry_set_icon_drag_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_icon_drag_source", entry, icon_pos, target_list, actions);
            }
            mh$.invokeExact(entry, icon_pos, target_list, actions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_current_icon_drag_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_current_icon_drag_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_entry_get_current_icon_drag_source(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_current_icon_drag_source$descriptor() {
        return gtk_entry_get_current_icon_drag_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_entry_get_current_icon_drag_source(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_current_icon_drag_source$handle() {
        return gtk_entry_get_current_icon_drag_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_entry_get_current_icon_drag_source(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_current_icon_drag_source(MemorySegment entry) {
        var mh$ = gtk_entry_get_current_icon_drag_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_current_icon_drag_source", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_icon_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_icon_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_get_icon_area(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkRectangle *icon_area)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_icon_area$descriptor() {
        return gtk_entry_get_icon_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_get_icon_area(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkRectangle *icon_area)
     * }
     */
    public static MethodHandle gtk_entry_get_icon_area$handle() {
        return gtk_entry_get_icon_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_get_icon_area(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkRectangle *icon_area)
     * }
     */
    public static void gtk_entry_get_icon_area(MemorySegment entry, int icon_pos, MemorySegment icon_area) {
        var mh$ = gtk_entry_get_icon_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_icon_area", entry, icon_pos, icon_area);
            }
            mh$.invokeExact(entry, icon_pos, icon_area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_im_context_filter_keypress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_im_context_filter_keypress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_im_context_filter_keypress(GtkEntry *entry, GdkEventKey *event)
     * }
     */
    public static FunctionDescriptor gtk_entry_im_context_filter_keypress$descriptor() {
        return gtk_entry_im_context_filter_keypress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_entry_im_context_filter_keypress(GtkEntry *entry, GdkEventKey *event)
     * }
     */
    public static MethodHandle gtk_entry_im_context_filter_keypress$handle() {
        return gtk_entry_im_context_filter_keypress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_entry_im_context_filter_keypress(GtkEntry *entry, GdkEventKey *event)
     * }
     */
    public static int gtk_entry_im_context_filter_keypress(MemorySegment entry, MemorySegment event) {
        var mh$ = gtk_entry_im_context_filter_keypress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_im_context_filter_keypress", entry, event);
            }
            return (int)mh$.invokeExact(entry, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_reset_im_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_reset_im_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_reset_im_context(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_reset_im_context$descriptor() {
        return gtk_entry_reset_im_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_reset_im_context(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_reset_im_context$handle() {
        return gtk_entry_reset_im_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_reset_im_context(GtkEntry *entry)
     * }
     */
    public static void gtk_entry_reset_im_context(MemorySegment entry) {
        var mh$ = gtk_entry_reset_im_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_reset_im_context", entry);
            }
            mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_input_purpose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_input_purpose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_input_purpose(GtkEntry *entry, GtkInputPurpose purpose)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_input_purpose$descriptor() {
        return gtk_entry_set_input_purpose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_input_purpose(GtkEntry *entry, GtkInputPurpose purpose)
     * }
     */
    public static MethodHandle gtk_entry_set_input_purpose$handle() {
        return gtk_entry_set_input_purpose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_input_purpose(GtkEntry *entry, GtkInputPurpose purpose)
     * }
     */
    public static void gtk_entry_set_input_purpose(MemorySegment entry, int purpose) {
        var mh$ = gtk_entry_set_input_purpose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_input_purpose", entry, purpose);
            }
            mh$.invokeExact(entry, purpose);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_input_purpose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_input_purpose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkInputPurpose gtk_entry_get_input_purpose(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_input_purpose$descriptor() {
        return gtk_entry_get_input_purpose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkInputPurpose gtk_entry_get_input_purpose(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_input_purpose$handle() {
        return gtk_entry_get_input_purpose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkInputPurpose gtk_entry_get_input_purpose(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_input_purpose(MemorySegment entry) {
        var mh$ = gtk_entry_get_input_purpose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_input_purpose", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_input_hints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_input_hints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_input_hints(GtkEntry *entry, GtkInputHints hints)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_input_hints$descriptor() {
        return gtk_entry_set_input_hints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_input_hints(GtkEntry *entry, GtkInputHints hints)
     * }
     */
    public static MethodHandle gtk_entry_set_input_hints$handle() {
        return gtk_entry_set_input_hints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_input_hints(GtkEntry *entry, GtkInputHints hints)
     * }
     */
    public static void gtk_entry_set_input_hints(MemorySegment entry, int hints) {
        var mh$ = gtk_entry_set_input_hints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_input_hints", entry, hints);
            }
            mh$.invokeExact(entry, hints);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_input_hints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_input_hints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkInputHints gtk_entry_get_input_hints(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_input_hints$descriptor() {
        return gtk_entry_get_input_hints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkInputHints gtk_entry_get_input_hints(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_input_hints$handle() {
        return gtk_entry_get_input_hints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkInputHints gtk_entry_get_input_hints(GtkEntry *entry)
     * }
     */
    public static int gtk_entry_get_input_hints(MemorySegment entry) {
        var mh$ = gtk_entry_get_input_hints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_input_hints", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_attributes(GtkEntry *entry, PangoAttrList *attrs)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_attributes$descriptor() {
        return gtk_entry_set_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_attributes(GtkEntry *entry, PangoAttrList *attrs)
     * }
     */
    public static MethodHandle gtk_entry_set_attributes$handle() {
        return gtk_entry_set_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_attributes(GtkEntry *entry, PangoAttrList *attrs)
     * }
     */
    public static void gtk_entry_set_attributes(MemorySegment entry, MemorySegment attrs) {
        var mh$ = gtk_entry_set_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_attributes", entry, attrs);
            }
            mh$.invokeExact(entry, attrs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoAttrList *gtk_entry_get_attributes(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_attributes$descriptor() {
        return gtk_entry_get_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoAttrList *gtk_entry_get_attributes(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_attributes$handle() {
        return gtk_entry_get_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoAttrList *gtk_entry_get_attributes(GtkEntry *entry)
     * }
     */
    public static MemorySegment gtk_entry_get_attributes(MemorySegment entry) {
        var mh$ = gtk_entry_get_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_attributes", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_set_tabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_set_tabs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_tabs(GtkEntry *entry, PangoTabArray *tabs)
     * }
     */
    public static FunctionDescriptor gtk_entry_set_tabs$descriptor() {
        return gtk_entry_set_tabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_set_tabs(GtkEntry *entry, PangoTabArray *tabs)
     * }
     */
    public static MethodHandle gtk_entry_set_tabs$handle() {
        return gtk_entry_set_tabs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_set_tabs(GtkEntry *entry, PangoTabArray *tabs)
     * }
     */
    public static void gtk_entry_set_tabs(MemorySegment entry, MemorySegment tabs) {
        var mh$ = gtk_entry_set_tabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_set_tabs", entry, tabs);
            }
            mh$.invokeExact(entry, tabs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_get_tabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_get_tabs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoTabArray *gtk_entry_get_tabs(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_get_tabs$descriptor() {
        return gtk_entry_get_tabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoTabArray *gtk_entry_get_tabs(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_get_tabs$handle() {
        return gtk_entry_get_tabs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoTabArray *gtk_entry_get_tabs(GtkEntry *entry)
     * }
     */
    public static MemorySegment gtk_entry_get_tabs(MemorySegment entry) {
        var mh$ = gtk_entry_get_tabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_get_tabs", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_entry_grab_focus_without_selecting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_entry_grab_focus_without_selecting"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_entry_grab_focus_without_selecting(GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_entry_grab_focus_without_selecting$descriptor() {
        return gtk_entry_grab_focus_without_selecting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_entry_grab_focus_without_selecting(GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_entry_grab_focus_without_selecting$handle() {
        return gtk_entry_grab_focus_without_selecting.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_entry_grab_focus_without_selecting(GtkEntry *entry)
     * }
     */
    public static void gtk_entry_grab_focus_without_selecting(MemorySegment entry) {
        var mh$ = gtk_entry_grab_focus_without_selecting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_entry_grab_focus_without_selecting", entry);
            }
            mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_TREE_VIEW_DROP_BEFORE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_DROP_BEFORE = 0
     * }
     */
    public static int GTK_TREE_VIEW_DROP_BEFORE() {
        return GTK_TREE_VIEW_DROP_BEFORE;
    }
    private static final int GTK_TREE_VIEW_DROP_AFTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_DROP_AFTER = 1
     * }
     */
    public static int GTK_TREE_VIEW_DROP_AFTER() {
        return GTK_TREE_VIEW_DROP_AFTER;
    }
    private static final int GTK_TREE_VIEW_DROP_INTO_OR_BEFORE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_DROP_INTO_OR_BEFORE = 2
     * }
     */
    public static int GTK_TREE_VIEW_DROP_INTO_OR_BEFORE() {
        return GTK_TREE_VIEW_DROP_INTO_OR_BEFORE;
    }
    private static final int GTK_TREE_VIEW_DROP_INTO_OR_AFTER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_TREE_VIEW_DROP_INTO_OR_AFTER = 3
     * }
     */
    public static int GTK_TREE_VIEW_DROP_INTO_OR_AFTER() {
        return GTK_TREE_VIEW_DROP_INTO_OR_AFTER;
    }

    private static class gtk_tree_view_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_tree_view_get_type()
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_type$descriptor() {
        return gtk_tree_view_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_tree_view_get_type()
     * }
     */
    public static MethodHandle gtk_tree_view_get_type$handle() {
        return gtk_tree_view_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_tree_view_get_type()
     * }
     */
    public static long gtk_tree_view_get_type() {
        var mh$ = gtk_tree_view_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_new()
     * }
     */
    public static FunctionDescriptor gtk_tree_view_new$descriptor() {
        return gtk_tree_view_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_new()
     * }
     */
    public static MethodHandle gtk_tree_view_new$handle() {
        return gtk_tree_view_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_new()
     * }
     */
    public static MemorySegment gtk_tree_view_new() {
        var mh$ = gtk_tree_view_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_new_with_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_new_with_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_new_with_model(GtkTreeModel *model)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_new_with_model$descriptor() {
        return gtk_tree_view_new_with_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_new_with_model(GtkTreeModel *model)
     * }
     */
    public static MethodHandle gtk_tree_view_new_with_model$handle() {
        return gtk_tree_view_new_with_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_tree_view_new_with_model(GtkTreeModel *model)
     * }
     */
    public static MemorySegment gtk_tree_view_new_with_model(MemorySegment model) {
        var mh$ = gtk_tree_view_new_with_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_new_with_model", model);
            }
            return (MemorySegment)mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_view_get_model(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_model$descriptor() {
        return gtk_tree_view_get_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_view_get_model(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_model$handle() {
        return gtk_tree_view_get_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_tree_view_get_model(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_model(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_model", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_model(GtkTreeView *tree_view, GtkTreeModel *model)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_model$descriptor() {
        return gtk_tree_view_set_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_model(GtkTreeView *tree_view, GtkTreeModel *model)
     * }
     */
    public static MethodHandle gtk_tree_view_set_model$handle() {
        return gtk_tree_view_set_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_model(GtkTreeView *tree_view, GtkTreeModel *model)
     * }
     */
    public static void gtk_tree_view_set_model(MemorySegment tree_view, MemorySegment model) {
        var mh$ = gtk_tree_view_set_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_model", tree_view, model);
            }
            mh$.invokeExact(tree_view, model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeSelection *gtk_tree_view_get_selection(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_selection$descriptor() {
        return gtk_tree_view_get_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeSelection *gtk_tree_view_get_selection(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_selection$handle() {
        return gtk_tree_view_get_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeSelection *gtk_tree_view_get_selection(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_selection(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_selection", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tree_view_get_hadjustment(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_hadjustment$descriptor() {
        return gtk_tree_view_get_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tree_view_get_hadjustment(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_hadjustment$handle() {
        return gtk_tree_view_get_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tree_view_get_hadjustment(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_hadjustment(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_hadjustment", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_hadjustment(GtkTreeView *tree_view, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_hadjustment$descriptor() {
        return gtk_tree_view_set_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_hadjustment(GtkTreeView *tree_view, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_tree_view_set_hadjustment$handle() {
        return gtk_tree_view_set_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_hadjustment(GtkTreeView *tree_view, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_tree_view_set_hadjustment(MemorySegment tree_view, MemorySegment adjustment) {
        var mh$ = gtk_tree_view_set_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_hadjustment", tree_view, adjustment);
            }
            mh$.invokeExact(tree_view, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tree_view_get_vadjustment(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_vadjustment$descriptor() {
        return gtk_tree_view_get_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tree_view_get_vadjustment(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_vadjustment$handle() {
        return gtk_tree_view_get_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAdjustment *gtk_tree_view_get_vadjustment(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_vadjustment(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_vadjustment", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_vadjustment(GtkTreeView *tree_view, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_vadjustment$descriptor() {
        return gtk_tree_view_set_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_vadjustment(GtkTreeView *tree_view, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_tree_view_set_vadjustment$handle() {
        return gtk_tree_view_set_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_vadjustment(GtkTreeView *tree_view, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_tree_view_set_vadjustment(MemorySegment tree_view, MemorySegment adjustment) {
        var mh$ = gtk_tree_view_set_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_vadjustment", tree_view, adjustment);
            }
            mh$.invokeExact(tree_view, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_headers_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_headers_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_headers_visible(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_headers_visible$descriptor() {
        return gtk_tree_view_get_headers_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_headers_visible(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_headers_visible$handle() {
        return gtk_tree_view_get_headers_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_headers_visible(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_headers_visible(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_headers_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_headers_visible", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_headers_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_headers_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_headers_visible(GtkTreeView *tree_view, gboolean headers_visible)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_headers_visible$descriptor() {
        return gtk_tree_view_set_headers_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_headers_visible(GtkTreeView *tree_view, gboolean headers_visible)
     * }
     */
    public static MethodHandle gtk_tree_view_set_headers_visible$handle() {
        return gtk_tree_view_set_headers_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_headers_visible(GtkTreeView *tree_view, gboolean headers_visible)
     * }
     */
    public static void gtk_tree_view_set_headers_visible(MemorySegment tree_view, int headers_visible) {
        var mh$ = gtk_tree_view_set_headers_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_headers_visible", tree_view, headers_visible);
            }
            mh$.invokeExact(tree_view, headers_visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_columns_autosize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_columns_autosize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_columns_autosize(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_columns_autosize$descriptor() {
        return gtk_tree_view_columns_autosize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_columns_autosize(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_columns_autosize$handle() {
        return gtk_tree_view_columns_autosize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_columns_autosize(GtkTreeView *tree_view)
     * }
     */
    public static void gtk_tree_view_columns_autosize(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_columns_autosize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_columns_autosize", tree_view);
            }
            mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_headers_clickable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_headers_clickable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_headers_clickable(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_headers_clickable$descriptor() {
        return gtk_tree_view_get_headers_clickable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_headers_clickable(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_headers_clickable$handle() {
        return gtk_tree_view_get_headers_clickable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_headers_clickable(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_headers_clickable(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_headers_clickable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_headers_clickable", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_headers_clickable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_headers_clickable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_headers_clickable(GtkTreeView *tree_view, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_headers_clickable$descriptor() {
        return gtk_tree_view_set_headers_clickable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_headers_clickable(GtkTreeView *tree_view, gboolean setting)
     * }
     */
    public static MethodHandle gtk_tree_view_set_headers_clickable$handle() {
        return gtk_tree_view_set_headers_clickable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_headers_clickable(GtkTreeView *tree_view, gboolean setting)
     * }
     */
    public static void gtk_tree_view_set_headers_clickable(MemorySegment tree_view, int setting) {
        var mh$ = gtk_tree_view_set_headers_clickable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_headers_clickable", tree_view, setting);
            }
            mh$.invokeExact(tree_view, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_rules_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_rules_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_rules_hint(GtkTreeView *tree_view, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_rules_hint$descriptor() {
        return gtk_tree_view_set_rules_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_rules_hint(GtkTreeView *tree_view, gboolean setting)
     * }
     */
    public static MethodHandle gtk_tree_view_set_rules_hint$handle() {
        return gtk_tree_view_set_rules_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_rules_hint(GtkTreeView *tree_view, gboolean setting)
     * }
     */
    public static void gtk_tree_view_set_rules_hint(MemorySegment tree_view, int setting) {
        var mh$ = gtk_tree_view_set_rules_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_rules_hint", tree_view, setting);
            }
            mh$.invokeExact(tree_view, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_rules_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_rules_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_rules_hint(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_rules_hint$descriptor() {
        return gtk_tree_view_get_rules_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_rules_hint(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_rules_hint$handle() {
        return gtk_tree_view_get_rules_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_rules_hint(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_rules_hint(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_rules_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_rules_hint", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_activate_on_single_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_activate_on_single_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_activate_on_single_click(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_activate_on_single_click$descriptor() {
        return gtk_tree_view_get_activate_on_single_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_activate_on_single_click(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_activate_on_single_click$handle() {
        return gtk_tree_view_get_activate_on_single_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_activate_on_single_click(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_activate_on_single_click(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_activate_on_single_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_activate_on_single_click", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_activate_on_single_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_activate_on_single_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_activate_on_single_click(GtkTreeView *tree_view, gboolean single)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_activate_on_single_click$descriptor() {
        return gtk_tree_view_set_activate_on_single_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_activate_on_single_click(GtkTreeView *tree_view, gboolean single)
     * }
     */
    public static MethodHandle gtk_tree_view_set_activate_on_single_click$handle() {
        return gtk_tree_view_set_activate_on_single_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_activate_on_single_click(GtkTreeView *tree_view, gboolean single)
     * }
     */
    public static void gtk_tree_view_set_activate_on_single_click(MemorySegment tree_view, int single) {
        var mh$ = gtk_tree_view_set_activate_on_single_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_activate_on_single_click", tree_view, single);
            }
            mh$.invokeExact(tree_view, single);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_append_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_append_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_append_column(GtkTreeView *tree_view, GtkTreeViewColumn *column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_append_column$descriptor() {
        return gtk_tree_view_append_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_append_column(GtkTreeView *tree_view, GtkTreeViewColumn *column)
     * }
     */
    public static MethodHandle gtk_tree_view_append_column$handle() {
        return gtk_tree_view_append_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_append_column(GtkTreeView *tree_view, GtkTreeViewColumn *column)
     * }
     */
    public static int gtk_tree_view_append_column(MemorySegment tree_view, MemorySegment column) {
        var mh$ = gtk_tree_view_append_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_append_column", tree_view, column);
            }
            return (int)mh$.invokeExact(tree_view, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_remove_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_remove_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_remove_column(GtkTreeView *tree_view, GtkTreeViewColumn *column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_remove_column$descriptor() {
        return gtk_tree_view_remove_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_remove_column(GtkTreeView *tree_view, GtkTreeViewColumn *column)
     * }
     */
    public static MethodHandle gtk_tree_view_remove_column$handle() {
        return gtk_tree_view_remove_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_remove_column(GtkTreeView *tree_view, GtkTreeViewColumn *column)
     * }
     */
    public static int gtk_tree_view_remove_column(MemorySegment tree_view, MemorySegment column) {
        var mh$ = gtk_tree_view_remove_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_remove_column", tree_view, column);
            }
            return (int)mh$.invokeExact(tree_view, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_insert_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_insert_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_insert_column(GtkTreeView *tree_view, GtkTreeViewColumn *column, gint position)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_insert_column$descriptor() {
        return gtk_tree_view_insert_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_insert_column(GtkTreeView *tree_view, GtkTreeViewColumn *column, gint position)
     * }
     */
    public static MethodHandle gtk_tree_view_insert_column$handle() {
        return gtk_tree_view_insert_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_insert_column(GtkTreeView *tree_view, GtkTreeViewColumn *column, gint position)
     * }
     */
    public static int gtk_tree_view_insert_column(MemorySegment tree_view, MemorySegment column, int position) {
        var mh$ = gtk_tree_view_insert_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_insert_column", tree_view, column, position);
            }
            return (int)mh$.invokeExact(tree_view, column, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_insert_column_with_attributes(GtkTreeView *tree_view, gint position, const gchar *title, GtkCellRenderer *cell, ...)
     * }
     */
    public static class gtk_tree_view_insert_column_with_attributes {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_tree_view_insert_column_with_attributes");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_tree_view_insert_column_with_attributes(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gint gtk_tree_view_insert_column_with_attributes(GtkTreeView *tree_view, gint position, const gchar *title, GtkCellRenderer *cell, ...)
         * }
         */
        public static gtk_tree_view_insert_column_with_attributes makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_tree_view_insert_column_with_attributes(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment tree_view, int position, MemorySegment title, MemorySegment cell, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_tree_view_insert_column_with_attributes", tree_view, position, title, cell, x4);
                }
                return (int)spreader.invokeExact(tree_view, position, title, cell, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_tree_view_insert_column_with_data_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_insert_column_with_data_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_insert_column_with_data_func(GtkTreeView *tree_view, gint position, const gchar *title, GtkCellRenderer *cell, GtkTreeCellDataFunc func, gpointer data, GDestroyNotify dnotify)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_insert_column_with_data_func$descriptor() {
        return gtk_tree_view_insert_column_with_data_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_insert_column_with_data_func(GtkTreeView *tree_view, gint position, const gchar *title, GtkCellRenderer *cell, GtkTreeCellDataFunc func, gpointer data, GDestroyNotify dnotify)
     * }
     */
    public static MethodHandle gtk_tree_view_insert_column_with_data_func$handle() {
        return gtk_tree_view_insert_column_with_data_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_insert_column_with_data_func(GtkTreeView *tree_view, gint position, const gchar *title, GtkCellRenderer *cell, GtkTreeCellDataFunc func, gpointer data, GDestroyNotify dnotify)
     * }
     */
    public static int gtk_tree_view_insert_column_with_data_func(MemorySegment tree_view, int position, MemorySegment title, MemorySegment cell, MemorySegment func, MemorySegment data, MemorySegment dnotify) {
        var mh$ = gtk_tree_view_insert_column_with_data_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_insert_column_with_data_func", tree_view, position, title, cell, func, data, dnotify);
            }
            return (int)mh$.invokeExact(tree_view, position, title, cell, func, data, dnotify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_n_columns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_n_columns"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_tree_view_get_n_columns(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_n_columns$descriptor() {
        return gtk_tree_view_get_n_columns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_tree_view_get_n_columns(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_n_columns$handle() {
        return gtk_tree_view_get_n_columns.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_tree_view_get_n_columns(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_n_columns(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_n_columns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_n_columns", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_get_column(GtkTreeView *tree_view, gint n)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_column$descriptor() {
        return gtk_tree_view_get_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_get_column(GtkTreeView *tree_view, gint n)
     * }
     */
    public static MethodHandle gtk_tree_view_get_column$handle() {
        return gtk_tree_view_get_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_get_column(GtkTreeView *tree_view, gint n)
     * }
     */
    public static MemorySegment gtk_tree_view_get_column(MemorySegment tree_view, int n) {
        var mh$ = gtk_tree_view_get_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_column", tree_view, n);
            }
            return (MemorySegment)mh$.invokeExact(tree_view, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_columns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_columns"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_tree_view_get_columns(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_columns$descriptor() {
        return gtk_tree_view_get_columns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_tree_view_get_columns(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_columns$handle() {
        return gtk_tree_view_get_columns.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_tree_view_get_columns(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_columns(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_columns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_columns", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_move_column_after {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_move_column_after"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_move_column_after(GtkTreeView *tree_view, GtkTreeViewColumn *column, GtkTreeViewColumn *base_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_move_column_after$descriptor() {
        return gtk_tree_view_move_column_after.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_move_column_after(GtkTreeView *tree_view, GtkTreeViewColumn *column, GtkTreeViewColumn *base_column)
     * }
     */
    public static MethodHandle gtk_tree_view_move_column_after$handle() {
        return gtk_tree_view_move_column_after.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_move_column_after(GtkTreeView *tree_view, GtkTreeViewColumn *column, GtkTreeViewColumn *base_column)
     * }
     */
    public static void gtk_tree_view_move_column_after(MemorySegment tree_view, MemorySegment column, MemorySegment base_column) {
        var mh$ = gtk_tree_view_move_column_after.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_move_column_after", tree_view, column, base_column);
            }
            mh$.invokeExact(tree_view, column, base_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_expander_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_expander_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_expander_column(GtkTreeView *tree_view, GtkTreeViewColumn *column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_expander_column$descriptor() {
        return gtk_tree_view_set_expander_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_expander_column(GtkTreeView *tree_view, GtkTreeViewColumn *column)
     * }
     */
    public static MethodHandle gtk_tree_view_set_expander_column$handle() {
        return gtk_tree_view_set_expander_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_expander_column(GtkTreeView *tree_view, GtkTreeViewColumn *column)
     * }
     */
    public static void gtk_tree_view_set_expander_column(MemorySegment tree_view, MemorySegment column) {
        var mh$ = gtk_tree_view_set_expander_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_expander_column", tree_view, column);
            }
            mh$.invokeExact(tree_view, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_expander_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_expander_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_get_expander_column(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_expander_column$descriptor() {
        return gtk_tree_view_get_expander_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_get_expander_column(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_expander_column$handle() {
        return gtk_tree_view_get_expander_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeViewColumn *gtk_tree_view_get_expander_column(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_expander_column(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_expander_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_expander_column", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_column_drag_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_column_drag_function"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_column_drag_function(GtkTreeView *tree_view, GtkTreeViewColumnDropFunc func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_column_drag_function$descriptor() {
        return gtk_tree_view_set_column_drag_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_column_drag_function(GtkTreeView *tree_view, GtkTreeViewColumnDropFunc func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_tree_view_set_column_drag_function$handle() {
        return gtk_tree_view_set_column_drag_function.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_column_drag_function(GtkTreeView *tree_view, GtkTreeViewColumnDropFunc func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_tree_view_set_column_drag_function(MemorySegment tree_view, MemorySegment func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_tree_view_set_column_drag_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_column_drag_function", tree_view, func, user_data, destroy);
            }
            mh$.invokeExact(tree_view, func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_scroll_to_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_scroll_to_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_scroll_to_point(GtkTreeView *tree_view, gint tree_x, gint tree_y)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_scroll_to_point$descriptor() {
        return gtk_tree_view_scroll_to_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_scroll_to_point(GtkTreeView *tree_view, gint tree_x, gint tree_y)
     * }
     */
    public static MethodHandle gtk_tree_view_scroll_to_point$handle() {
        return gtk_tree_view_scroll_to_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_scroll_to_point(GtkTreeView *tree_view, gint tree_x, gint tree_y)
     * }
     */
    public static void gtk_tree_view_scroll_to_point(MemorySegment tree_view, int tree_x, int tree_y) {
        var mh$ = gtk_tree_view_scroll_to_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_scroll_to_point", tree_view, tree_x, tree_y);
            }
            mh$.invokeExact(tree_view, tree_x, tree_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_scroll_to_cell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_scroll_to_cell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_scroll_to_cell(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, gboolean use_align, gfloat row_align, gfloat col_align)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_scroll_to_cell$descriptor() {
        return gtk_tree_view_scroll_to_cell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_scroll_to_cell(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, gboolean use_align, gfloat row_align, gfloat col_align)
     * }
     */
    public static MethodHandle gtk_tree_view_scroll_to_cell$handle() {
        return gtk_tree_view_scroll_to_cell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_scroll_to_cell(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, gboolean use_align, gfloat row_align, gfloat col_align)
     * }
     */
    public static void gtk_tree_view_scroll_to_cell(MemorySegment tree_view, MemorySegment path, MemorySegment column, int use_align, float row_align, float col_align) {
        var mh$ = gtk_tree_view_scroll_to_cell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_scroll_to_cell", tree_view, path, column, use_align, row_align, col_align);
            }
            mh$.invokeExact(tree_view, path, column, use_align, row_align, col_align);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_row_activated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_row_activated"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_row_activated(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_row_activated$descriptor() {
        return gtk_tree_view_row_activated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_row_activated(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column)
     * }
     */
    public static MethodHandle gtk_tree_view_row_activated$handle() {
        return gtk_tree_view_row_activated.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_row_activated(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column)
     * }
     */
    public static void gtk_tree_view_row_activated(MemorySegment tree_view, MemorySegment path, MemorySegment column) {
        var mh$ = gtk_tree_view_row_activated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_row_activated", tree_view, path, column);
            }
            mh$.invokeExact(tree_view, path, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_expand_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_expand_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_expand_all(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_expand_all$descriptor() {
        return gtk_tree_view_expand_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_expand_all(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_expand_all$handle() {
        return gtk_tree_view_expand_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_expand_all(GtkTreeView *tree_view)
     * }
     */
    public static void gtk_tree_view_expand_all(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_expand_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_expand_all", tree_view);
            }
            mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_collapse_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_collapse_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_collapse_all(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_collapse_all$descriptor() {
        return gtk_tree_view_collapse_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_collapse_all(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_collapse_all$handle() {
        return gtk_tree_view_collapse_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_collapse_all(GtkTreeView *tree_view)
     * }
     */
    public static void gtk_tree_view_collapse_all(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_collapse_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_collapse_all", tree_view);
            }
            mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_expand_to_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_expand_to_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_expand_to_path(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_expand_to_path$descriptor() {
        return gtk_tree_view_expand_to_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_expand_to_path(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_view_expand_to_path$handle() {
        return gtk_tree_view_expand_to_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_expand_to_path(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static void gtk_tree_view_expand_to_path(MemorySegment tree_view, MemorySegment path) {
        var mh$ = gtk_tree_view_expand_to_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_expand_to_path", tree_view, path);
            }
            mh$.invokeExact(tree_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_expand_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_expand_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_expand_row(GtkTreeView *tree_view, GtkTreePath *path, gboolean open_all)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_expand_row$descriptor() {
        return gtk_tree_view_expand_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_expand_row(GtkTreeView *tree_view, GtkTreePath *path, gboolean open_all)
     * }
     */
    public static MethodHandle gtk_tree_view_expand_row$handle() {
        return gtk_tree_view_expand_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_expand_row(GtkTreeView *tree_view, GtkTreePath *path, gboolean open_all)
     * }
     */
    public static int gtk_tree_view_expand_row(MemorySegment tree_view, MemorySegment path, int open_all) {
        var mh$ = gtk_tree_view_expand_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_expand_row", tree_view, path, open_all);
            }
            return (int)mh$.invokeExact(tree_view, path, open_all);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_collapse_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_collapse_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_collapse_row(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_collapse_row$descriptor() {
        return gtk_tree_view_collapse_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_collapse_row(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_view_collapse_row$handle() {
        return gtk_tree_view_collapse_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_collapse_row(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static int gtk_tree_view_collapse_row(MemorySegment tree_view, MemorySegment path) {
        var mh$ = gtk_tree_view_collapse_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_collapse_row", tree_view, path);
            }
            return (int)mh$.invokeExact(tree_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_map_expanded_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_map_expanded_rows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_map_expanded_rows(GtkTreeView *tree_view, GtkTreeViewMappingFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_map_expanded_rows$descriptor() {
        return gtk_tree_view_map_expanded_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_map_expanded_rows(GtkTreeView *tree_view, GtkTreeViewMappingFunc func, gpointer data)
     * }
     */
    public static MethodHandle gtk_tree_view_map_expanded_rows$handle() {
        return gtk_tree_view_map_expanded_rows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_map_expanded_rows(GtkTreeView *tree_view, GtkTreeViewMappingFunc func, gpointer data)
     * }
     */
    public static void gtk_tree_view_map_expanded_rows(MemorySegment tree_view, MemorySegment func, MemorySegment data) {
        var mh$ = gtk_tree_view_map_expanded_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_map_expanded_rows", tree_view, func, data);
            }
            mh$.invokeExact(tree_view, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_row_expanded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_row_expanded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_row_expanded(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_row_expanded$descriptor() {
        return gtk_tree_view_row_expanded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_row_expanded(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_view_row_expanded$handle() {
        return gtk_tree_view_row_expanded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_row_expanded(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static int gtk_tree_view_row_expanded(MemorySegment tree_view, MemorySegment path) {
        var mh$ = gtk_tree_view_row_expanded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_row_expanded", tree_view, path);
            }
            return (int)mh$.invokeExact(tree_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_reorderable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_reorderable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_reorderable(GtkTreeView *tree_view, gboolean reorderable)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_reorderable$descriptor() {
        return gtk_tree_view_set_reorderable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_reorderable(GtkTreeView *tree_view, gboolean reorderable)
     * }
     */
    public static MethodHandle gtk_tree_view_set_reorderable$handle() {
        return gtk_tree_view_set_reorderable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_reorderable(GtkTreeView *tree_view, gboolean reorderable)
     * }
     */
    public static void gtk_tree_view_set_reorderable(MemorySegment tree_view, int reorderable) {
        var mh$ = gtk_tree_view_set_reorderable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_reorderable", tree_view, reorderable);
            }
            mh$.invokeExact(tree_view, reorderable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_reorderable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_reorderable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_reorderable(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_reorderable$descriptor() {
        return gtk_tree_view_get_reorderable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_reorderable(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_reorderable$handle() {
        return gtk_tree_view_get_reorderable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_reorderable(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_reorderable(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_reorderable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_reorderable", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_cursor(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, gboolean start_editing)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_cursor$descriptor() {
        return gtk_tree_view_set_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_cursor(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, gboolean start_editing)
     * }
     */
    public static MethodHandle gtk_tree_view_set_cursor$handle() {
        return gtk_tree_view_set_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_cursor(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, gboolean start_editing)
     * }
     */
    public static void gtk_tree_view_set_cursor(MemorySegment tree_view, MemorySegment path, MemorySegment focus_column, int start_editing) {
        var mh$ = gtk_tree_view_set_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_cursor", tree_view, path, focus_column, start_editing);
            }
            mh$.invokeExact(tree_view, path, focus_column, start_editing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_cursor_on_cell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_cursor_on_cell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_cursor_on_cell(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, GtkCellRenderer *focus_cell, gboolean start_editing)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_cursor_on_cell$descriptor() {
        return gtk_tree_view_set_cursor_on_cell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_cursor_on_cell(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, GtkCellRenderer *focus_cell, gboolean start_editing)
     * }
     */
    public static MethodHandle gtk_tree_view_set_cursor_on_cell$handle() {
        return gtk_tree_view_set_cursor_on_cell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_cursor_on_cell(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, GtkCellRenderer *focus_cell, gboolean start_editing)
     * }
     */
    public static void gtk_tree_view_set_cursor_on_cell(MemorySegment tree_view, MemorySegment path, MemorySegment focus_column, MemorySegment focus_cell, int start_editing) {
        var mh$ = gtk_tree_view_set_cursor_on_cell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_cursor_on_cell", tree_view, path, focus_column, focus_cell, start_editing);
            }
            mh$.invokeExact(tree_view, path, focus_column, focus_cell, start_editing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_cursor(GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewColumn **focus_column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_cursor$descriptor() {
        return gtk_tree_view_get_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_cursor(GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewColumn **focus_column)
     * }
     */
    public static MethodHandle gtk_tree_view_get_cursor$handle() {
        return gtk_tree_view_get_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_cursor(GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewColumn **focus_column)
     * }
     */
    public static void gtk_tree_view_get_cursor(MemorySegment tree_view, MemorySegment path, MemorySegment focus_column) {
        var mh$ = gtk_tree_view_get_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_cursor", tree_view, path, focus_column);
            }
            mh$.invokeExact(tree_view, path, focus_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_bin_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_bin_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_tree_view_get_bin_window(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_bin_window$descriptor() {
        return gtk_tree_view_get_bin_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_tree_view_get_bin_window(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_bin_window$handle() {
        return gtk_tree_view_get_bin_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_tree_view_get_bin_window(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_bin_window(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_bin_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_bin_window", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_path_at_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_path_at_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_path_at_pos(GtkTreeView *tree_view, gint x, gint y, GtkTreePath **path, GtkTreeViewColumn **column, gint *cell_x, gint *cell_y)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_path_at_pos$descriptor() {
        return gtk_tree_view_get_path_at_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_path_at_pos(GtkTreeView *tree_view, gint x, gint y, GtkTreePath **path, GtkTreeViewColumn **column, gint *cell_x, gint *cell_y)
     * }
     */
    public static MethodHandle gtk_tree_view_get_path_at_pos$handle() {
        return gtk_tree_view_get_path_at_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_path_at_pos(GtkTreeView *tree_view, gint x, gint y, GtkTreePath **path, GtkTreeViewColumn **column, gint *cell_x, gint *cell_y)
     * }
     */
    public static int gtk_tree_view_get_path_at_pos(MemorySegment tree_view, int x, int y, MemorySegment path, MemorySegment column, MemorySegment cell_x, MemorySegment cell_y) {
        var mh$ = gtk_tree_view_get_path_at_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_path_at_pos", tree_view, x, y, path, column, cell_x, cell_y);
            }
            return (int)mh$.invokeExact(tree_view, x, y, path, column, cell_x, cell_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_cell_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_cell_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_cell_area(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_cell_area$descriptor() {
        return gtk_tree_view_get_cell_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_cell_area(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect)
     * }
     */
    public static MethodHandle gtk_tree_view_get_cell_area$handle() {
        return gtk_tree_view_get_cell_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_cell_area(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect)
     * }
     */
    public static void gtk_tree_view_get_cell_area(MemorySegment tree_view, MemorySegment path, MemorySegment column, MemorySegment rect) {
        var mh$ = gtk_tree_view_get_cell_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_cell_area", tree_view, path, column, rect);
            }
            mh$.invokeExact(tree_view, path, column, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_background_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_background_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_background_area(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_background_area$descriptor() {
        return gtk_tree_view_get_background_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_background_area(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect)
     * }
     */
    public static MethodHandle gtk_tree_view_get_background_area$handle() {
        return gtk_tree_view_get_background_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_background_area(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect)
     * }
     */
    public static void gtk_tree_view_get_background_area(MemorySegment tree_view, MemorySegment path, MemorySegment column, MemorySegment rect) {
        var mh$ = gtk_tree_view_get_background_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_background_area", tree_view, path, column, rect);
            }
            mh$.invokeExact(tree_view, path, column, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_visible_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_visible_rect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_visible_rect(GtkTreeView *tree_view, GdkRectangle *visible_rect)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_visible_rect$descriptor() {
        return gtk_tree_view_get_visible_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_visible_rect(GtkTreeView *tree_view, GdkRectangle *visible_rect)
     * }
     */
    public static MethodHandle gtk_tree_view_get_visible_rect$handle() {
        return gtk_tree_view_get_visible_rect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_visible_rect(GtkTreeView *tree_view, GdkRectangle *visible_rect)
     * }
     */
    public static void gtk_tree_view_get_visible_rect(MemorySegment tree_view, MemorySegment visible_rect) {
        var mh$ = gtk_tree_view_get_visible_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_visible_rect", tree_view, visible_rect);
            }
            mh$.invokeExact(tree_view, visible_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_visible_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_visible_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_visible_range(GtkTreeView *tree_view, GtkTreePath **start_path, GtkTreePath **end_path)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_visible_range$descriptor() {
        return gtk_tree_view_get_visible_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_visible_range(GtkTreeView *tree_view, GtkTreePath **start_path, GtkTreePath **end_path)
     * }
     */
    public static MethodHandle gtk_tree_view_get_visible_range$handle() {
        return gtk_tree_view_get_visible_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_visible_range(GtkTreeView *tree_view, GtkTreePath **start_path, GtkTreePath **end_path)
     * }
     */
    public static int gtk_tree_view_get_visible_range(MemorySegment tree_view, MemorySegment start_path, MemorySegment end_path) {
        var mh$ = gtk_tree_view_get_visible_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_visible_range", tree_view, start_path, end_path);
            }
            return (int)mh$.invokeExact(tree_view, start_path, end_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_is_blank_at_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_is_blank_at_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_is_blank_at_pos(GtkTreeView *tree_view, gint x, gint y, GtkTreePath **path, GtkTreeViewColumn **column, gint *cell_x, gint *cell_y)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_is_blank_at_pos$descriptor() {
        return gtk_tree_view_is_blank_at_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_is_blank_at_pos(GtkTreeView *tree_view, gint x, gint y, GtkTreePath **path, GtkTreeViewColumn **column, gint *cell_x, gint *cell_y)
     * }
     */
    public static MethodHandle gtk_tree_view_is_blank_at_pos$handle() {
        return gtk_tree_view_is_blank_at_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_is_blank_at_pos(GtkTreeView *tree_view, gint x, gint y, GtkTreePath **path, GtkTreeViewColumn **column, gint *cell_x, gint *cell_y)
     * }
     */
    public static int gtk_tree_view_is_blank_at_pos(MemorySegment tree_view, int x, int y, MemorySegment path, MemorySegment column, MemorySegment cell_x, MemorySegment cell_y) {
        var mh$ = gtk_tree_view_is_blank_at_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_is_blank_at_pos", tree_view, x, y, path, column, cell_x, cell_y);
            }
            return (int)mh$.invokeExact(tree_view, x, y, path, column, cell_x, cell_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_enable_model_drag_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_enable_model_drag_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_enable_model_drag_source(GtkTreeView *tree_view, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_enable_model_drag_source$descriptor() {
        return gtk_tree_view_enable_model_drag_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_enable_model_drag_source(GtkTreeView *tree_view, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static MethodHandle gtk_tree_view_enable_model_drag_source$handle() {
        return gtk_tree_view_enable_model_drag_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_enable_model_drag_source(GtkTreeView *tree_view, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static void gtk_tree_view_enable_model_drag_source(MemorySegment tree_view, int start_button_mask, MemorySegment targets, int n_targets, int actions) {
        var mh$ = gtk_tree_view_enable_model_drag_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_enable_model_drag_source", tree_view, start_button_mask, targets, n_targets, actions);
            }
            mh$.invokeExact(tree_view, start_button_mask, targets, n_targets, actions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_enable_model_drag_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_enable_model_drag_dest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_enable_model_drag_dest(GtkTreeView *tree_view, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_enable_model_drag_dest$descriptor() {
        return gtk_tree_view_enable_model_drag_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_enable_model_drag_dest(GtkTreeView *tree_view, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static MethodHandle gtk_tree_view_enable_model_drag_dest$handle() {
        return gtk_tree_view_enable_model_drag_dest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_enable_model_drag_dest(GtkTreeView *tree_view, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static void gtk_tree_view_enable_model_drag_dest(MemorySegment tree_view, MemorySegment targets, int n_targets, int actions) {
        var mh$ = gtk_tree_view_enable_model_drag_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_enable_model_drag_dest", tree_view, targets, n_targets, actions);
            }
            mh$.invokeExact(tree_view, targets, n_targets, actions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_unset_rows_drag_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_unset_rows_drag_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_unset_rows_drag_source(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_unset_rows_drag_source$descriptor() {
        return gtk_tree_view_unset_rows_drag_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_unset_rows_drag_source(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_unset_rows_drag_source$handle() {
        return gtk_tree_view_unset_rows_drag_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_unset_rows_drag_source(GtkTreeView *tree_view)
     * }
     */
    public static void gtk_tree_view_unset_rows_drag_source(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_unset_rows_drag_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_unset_rows_drag_source", tree_view);
            }
            mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_unset_rows_drag_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_unset_rows_drag_dest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_unset_rows_drag_dest(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_unset_rows_drag_dest$descriptor() {
        return gtk_tree_view_unset_rows_drag_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_unset_rows_drag_dest(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_unset_rows_drag_dest$handle() {
        return gtk_tree_view_unset_rows_drag_dest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_unset_rows_drag_dest(GtkTreeView *tree_view)
     * }
     */
    public static void gtk_tree_view_unset_rows_drag_dest(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_unset_rows_drag_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_unset_rows_drag_dest", tree_view);
            }
            mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_drag_dest_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_drag_dest_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_drag_dest_row(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewDropPosition pos)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_drag_dest_row$descriptor() {
        return gtk_tree_view_set_drag_dest_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_drag_dest_row(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewDropPosition pos)
     * }
     */
    public static MethodHandle gtk_tree_view_set_drag_dest_row$handle() {
        return gtk_tree_view_set_drag_dest_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_drag_dest_row(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewDropPosition pos)
     * }
     */
    public static void gtk_tree_view_set_drag_dest_row(MemorySegment tree_view, MemorySegment path, int pos) {
        var mh$ = gtk_tree_view_set_drag_dest_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_drag_dest_row", tree_view, path, pos);
            }
            mh$.invokeExact(tree_view, path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_drag_dest_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_drag_dest_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_drag_dest_row(GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewDropPosition *pos)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_drag_dest_row$descriptor() {
        return gtk_tree_view_get_drag_dest_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_drag_dest_row(GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewDropPosition *pos)
     * }
     */
    public static MethodHandle gtk_tree_view_get_drag_dest_row$handle() {
        return gtk_tree_view_get_drag_dest_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_get_drag_dest_row(GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewDropPosition *pos)
     * }
     */
    public static void gtk_tree_view_get_drag_dest_row(MemorySegment tree_view, MemorySegment path, MemorySegment pos) {
        var mh$ = gtk_tree_view_get_drag_dest_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_drag_dest_row", tree_view, path, pos);
            }
            mh$.invokeExact(tree_view, path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_dest_row_at_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_dest_row_at_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_dest_row_at_pos(GtkTreeView *tree_view, gint drag_x, gint drag_y, GtkTreePath **path, GtkTreeViewDropPosition *pos)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_dest_row_at_pos$descriptor() {
        return gtk_tree_view_get_dest_row_at_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_dest_row_at_pos(GtkTreeView *tree_view, gint drag_x, gint drag_y, GtkTreePath **path, GtkTreeViewDropPosition *pos)
     * }
     */
    public static MethodHandle gtk_tree_view_get_dest_row_at_pos$handle() {
        return gtk_tree_view_get_dest_row_at_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_dest_row_at_pos(GtkTreeView *tree_view, gint drag_x, gint drag_y, GtkTreePath **path, GtkTreeViewDropPosition *pos)
     * }
     */
    public static int gtk_tree_view_get_dest_row_at_pos(MemorySegment tree_view, int drag_x, int drag_y, MemorySegment path, MemorySegment pos) {
        var mh$ = gtk_tree_view_get_dest_row_at_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_dest_row_at_pos", tree_view, drag_x, drag_y, path, pos);
            }
            return (int)mh$.invokeExact(tree_view, drag_x, drag_y, path, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_create_row_drag_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_create_row_drag_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_tree_view_create_row_drag_icon(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_create_row_drag_icon$descriptor() {
        return gtk_tree_view_create_row_drag_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_tree_view_create_row_drag_icon(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_view_create_row_drag_icon$handle() {
        return gtk_tree_view_create_row_drag_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *gtk_tree_view_create_row_drag_icon(GtkTreeView *tree_view, GtkTreePath *path)
     * }
     */
    public static MemorySegment gtk_tree_view_create_row_drag_icon(MemorySegment tree_view, MemorySegment path) {
        var mh$ = gtk_tree_view_create_row_drag_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_create_row_drag_icon", tree_view, path);
            }
            return (MemorySegment)mh$.invokeExact(tree_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_enable_search {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_enable_search"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_enable_search(GtkTreeView *tree_view, gboolean enable_search)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_enable_search$descriptor() {
        return gtk_tree_view_set_enable_search.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_enable_search(GtkTreeView *tree_view, gboolean enable_search)
     * }
     */
    public static MethodHandle gtk_tree_view_set_enable_search$handle() {
        return gtk_tree_view_set_enable_search.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_enable_search(GtkTreeView *tree_view, gboolean enable_search)
     * }
     */
    public static void gtk_tree_view_set_enable_search(MemorySegment tree_view, int enable_search) {
        var mh$ = gtk_tree_view_set_enable_search.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_enable_search", tree_view, enable_search);
            }
            mh$.invokeExact(tree_view, enable_search);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_enable_search {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_enable_search"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_enable_search(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_enable_search$descriptor() {
        return gtk_tree_view_get_enable_search.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_enable_search(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_enable_search$handle() {
        return gtk_tree_view_get_enable_search.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_enable_search(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_enable_search(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_enable_search.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_enable_search", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_search_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_search_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_get_search_column(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_search_column$descriptor() {
        return gtk_tree_view_get_search_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_get_search_column(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_search_column$handle() {
        return gtk_tree_view_get_search_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_get_search_column(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_search_column(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_search_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_search_column", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_search_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_search_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_column(GtkTreeView *tree_view, gint column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_search_column$descriptor() {
        return gtk_tree_view_set_search_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_column(GtkTreeView *tree_view, gint column)
     * }
     */
    public static MethodHandle gtk_tree_view_set_search_column$handle() {
        return gtk_tree_view_set_search_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_column(GtkTreeView *tree_view, gint column)
     * }
     */
    public static void gtk_tree_view_set_search_column(MemorySegment tree_view, int column) {
        var mh$ = gtk_tree_view_set_search_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_search_column", tree_view, column);
            }
            mh$.invokeExact(tree_view, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_search_equal_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_search_equal_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_search_equal_func$descriptor() {
        return gtk_tree_view_get_search_equal_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_search_equal_func$handle() {
        return gtk_tree_view_get_search_equal_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_search_equal_func(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_search_equal_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_search_equal_func", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_search_equal_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_search_equal_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_equal_func(GtkTreeView *tree_view, GtkTreeViewSearchEqualFunc search_equal_func, gpointer search_user_data, GDestroyNotify search_destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_search_equal_func$descriptor() {
        return gtk_tree_view_set_search_equal_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_equal_func(GtkTreeView *tree_view, GtkTreeViewSearchEqualFunc search_equal_func, gpointer search_user_data, GDestroyNotify search_destroy)
     * }
     */
    public static MethodHandle gtk_tree_view_set_search_equal_func$handle() {
        return gtk_tree_view_set_search_equal_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_equal_func(GtkTreeView *tree_view, GtkTreeViewSearchEqualFunc search_equal_func, gpointer search_user_data, GDestroyNotify search_destroy)
     * }
     */
    public static void gtk_tree_view_set_search_equal_func(MemorySegment tree_view, MemorySegment search_equal_func, MemorySegment search_user_data, MemorySegment search_destroy) {
        var mh$ = gtk_tree_view_set_search_equal_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_search_equal_func", tree_view, search_equal_func, search_user_data, search_destroy);
            }
            mh$.invokeExact(tree_view, search_equal_func, search_user_data, search_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_search_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_search_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEntry *gtk_tree_view_get_search_entry(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_search_entry$descriptor() {
        return gtk_tree_view_get_search_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEntry *gtk_tree_view_get_search_entry(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_search_entry$handle() {
        return gtk_tree_view_get_search_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEntry *gtk_tree_view_get_search_entry(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_search_entry(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_search_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_search_entry", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_search_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_search_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_entry(GtkTreeView *tree_view, GtkEntry *entry)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_search_entry$descriptor() {
        return gtk_tree_view_set_search_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_entry(GtkTreeView *tree_view, GtkEntry *entry)
     * }
     */
    public static MethodHandle gtk_tree_view_set_search_entry$handle() {
        return gtk_tree_view_set_search_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_entry(GtkTreeView *tree_view, GtkEntry *entry)
     * }
     */
    public static void gtk_tree_view_set_search_entry(MemorySegment tree_view, MemorySegment entry) {
        var mh$ = gtk_tree_view_set_search_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_search_entry", tree_view, entry);
            }
            mh$.invokeExact(tree_view, entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_search_position_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_search_position_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeViewSearchPositionFunc gtk_tree_view_get_search_position_func(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_search_position_func$descriptor() {
        return gtk_tree_view_get_search_position_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeViewSearchPositionFunc gtk_tree_view_get_search_position_func(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_search_position_func$handle() {
        return gtk_tree_view_get_search_position_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeViewSearchPositionFunc gtk_tree_view_get_search_position_func(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_search_position_func(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_search_position_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_search_position_func", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_search_position_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_search_position_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_position_func(GtkTreeView *tree_view, GtkTreeViewSearchPositionFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_search_position_func$descriptor() {
        return gtk_tree_view_set_search_position_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_position_func(GtkTreeView *tree_view, GtkTreeViewSearchPositionFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_tree_view_set_search_position_func$handle() {
        return gtk_tree_view_set_search_position_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_search_position_func(GtkTreeView *tree_view, GtkTreeViewSearchPositionFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_tree_view_set_search_position_func(MemorySegment tree_view, MemorySegment func, MemorySegment data, MemorySegment destroy) {
        var mh$ = gtk_tree_view_set_search_position_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_search_position_func", tree_view, func, data, destroy);
            }
            mh$.invokeExact(tree_view, func, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_convert_widget_to_tree_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_convert_widget_to_tree_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_widget_to_tree_coords(GtkTreeView *tree_view, gint wx, gint wy, gint *tx, gint *ty)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_convert_widget_to_tree_coords$descriptor() {
        return gtk_tree_view_convert_widget_to_tree_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_widget_to_tree_coords(GtkTreeView *tree_view, gint wx, gint wy, gint *tx, gint *ty)
     * }
     */
    public static MethodHandle gtk_tree_view_convert_widget_to_tree_coords$handle() {
        return gtk_tree_view_convert_widget_to_tree_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_widget_to_tree_coords(GtkTreeView *tree_view, gint wx, gint wy, gint *tx, gint *ty)
     * }
     */
    public static void gtk_tree_view_convert_widget_to_tree_coords(MemorySegment tree_view, int wx, int wy, MemorySegment tx, MemorySegment ty) {
        var mh$ = gtk_tree_view_convert_widget_to_tree_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_convert_widget_to_tree_coords", tree_view, wx, wy, tx, ty);
            }
            mh$.invokeExact(tree_view, wx, wy, tx, ty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_convert_tree_to_widget_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_convert_tree_to_widget_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_tree_to_widget_coords(GtkTreeView *tree_view, gint tx, gint ty, gint *wx, gint *wy)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_convert_tree_to_widget_coords$descriptor() {
        return gtk_tree_view_convert_tree_to_widget_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_tree_to_widget_coords(GtkTreeView *tree_view, gint tx, gint ty, gint *wx, gint *wy)
     * }
     */
    public static MethodHandle gtk_tree_view_convert_tree_to_widget_coords$handle() {
        return gtk_tree_view_convert_tree_to_widget_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_tree_to_widget_coords(GtkTreeView *tree_view, gint tx, gint ty, gint *wx, gint *wy)
     * }
     */
    public static void gtk_tree_view_convert_tree_to_widget_coords(MemorySegment tree_view, int tx, int ty, MemorySegment wx, MemorySegment wy) {
        var mh$ = gtk_tree_view_convert_tree_to_widget_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_convert_tree_to_widget_coords", tree_view, tx, ty, wx, wy);
            }
            mh$.invokeExact(tree_view, tx, ty, wx, wy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_convert_widget_to_bin_window_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_convert_widget_to_bin_window_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_widget_to_bin_window_coords(GtkTreeView *tree_view, gint wx, gint wy, gint *bx, gint *by)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_convert_widget_to_bin_window_coords$descriptor() {
        return gtk_tree_view_convert_widget_to_bin_window_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_widget_to_bin_window_coords(GtkTreeView *tree_view, gint wx, gint wy, gint *bx, gint *by)
     * }
     */
    public static MethodHandle gtk_tree_view_convert_widget_to_bin_window_coords$handle() {
        return gtk_tree_view_convert_widget_to_bin_window_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_widget_to_bin_window_coords(GtkTreeView *tree_view, gint wx, gint wy, gint *bx, gint *by)
     * }
     */
    public static void gtk_tree_view_convert_widget_to_bin_window_coords(MemorySegment tree_view, int wx, int wy, MemorySegment bx, MemorySegment by) {
        var mh$ = gtk_tree_view_convert_widget_to_bin_window_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_convert_widget_to_bin_window_coords", tree_view, wx, wy, bx, by);
            }
            mh$.invokeExact(tree_view, wx, wy, bx, by);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_convert_bin_window_to_widget_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_convert_bin_window_to_widget_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_bin_window_to_widget_coords(GtkTreeView *tree_view, gint bx, gint by, gint *wx, gint *wy)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_convert_bin_window_to_widget_coords$descriptor() {
        return gtk_tree_view_convert_bin_window_to_widget_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_bin_window_to_widget_coords(GtkTreeView *tree_view, gint bx, gint by, gint *wx, gint *wy)
     * }
     */
    public static MethodHandle gtk_tree_view_convert_bin_window_to_widget_coords$handle() {
        return gtk_tree_view_convert_bin_window_to_widget_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_bin_window_to_widget_coords(GtkTreeView *tree_view, gint bx, gint by, gint *wx, gint *wy)
     * }
     */
    public static void gtk_tree_view_convert_bin_window_to_widget_coords(MemorySegment tree_view, int bx, int by, MemorySegment wx, MemorySegment wy) {
        var mh$ = gtk_tree_view_convert_bin_window_to_widget_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_convert_bin_window_to_widget_coords", tree_view, bx, by, wx, wy);
            }
            mh$.invokeExact(tree_view, bx, by, wx, wy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_convert_tree_to_bin_window_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_convert_tree_to_bin_window_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_tree_to_bin_window_coords(GtkTreeView *tree_view, gint tx, gint ty, gint *bx, gint *by)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_convert_tree_to_bin_window_coords$descriptor() {
        return gtk_tree_view_convert_tree_to_bin_window_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_tree_to_bin_window_coords(GtkTreeView *tree_view, gint tx, gint ty, gint *bx, gint *by)
     * }
     */
    public static MethodHandle gtk_tree_view_convert_tree_to_bin_window_coords$handle() {
        return gtk_tree_view_convert_tree_to_bin_window_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_tree_to_bin_window_coords(GtkTreeView *tree_view, gint tx, gint ty, gint *bx, gint *by)
     * }
     */
    public static void gtk_tree_view_convert_tree_to_bin_window_coords(MemorySegment tree_view, int tx, int ty, MemorySegment bx, MemorySegment by) {
        var mh$ = gtk_tree_view_convert_tree_to_bin_window_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_convert_tree_to_bin_window_coords", tree_view, tx, ty, bx, by);
            }
            mh$.invokeExact(tree_view, tx, ty, bx, by);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_convert_bin_window_to_tree_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_convert_bin_window_to_tree_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_bin_window_to_tree_coords(GtkTreeView *tree_view, gint bx, gint by, gint *tx, gint *ty)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_convert_bin_window_to_tree_coords$descriptor() {
        return gtk_tree_view_convert_bin_window_to_tree_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_bin_window_to_tree_coords(GtkTreeView *tree_view, gint bx, gint by, gint *tx, gint *ty)
     * }
     */
    public static MethodHandle gtk_tree_view_convert_bin_window_to_tree_coords$handle() {
        return gtk_tree_view_convert_bin_window_to_tree_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_convert_bin_window_to_tree_coords(GtkTreeView *tree_view, gint bx, gint by, gint *tx, gint *ty)
     * }
     */
    public static void gtk_tree_view_convert_bin_window_to_tree_coords(MemorySegment tree_view, int bx, int by, MemorySegment tx, MemorySegment ty) {
        var mh$ = gtk_tree_view_convert_bin_window_to_tree_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_convert_bin_window_to_tree_coords", tree_view, bx, by, tx, ty);
            }
            mh$.invokeExact(tree_view, bx, by, tx, ty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_destroy_count_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_destroy_count_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_destroy_count_func(GtkTreeView *tree_view, GtkTreeDestroyCountFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_destroy_count_func$descriptor() {
        return gtk_tree_view_set_destroy_count_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_destroy_count_func(GtkTreeView *tree_view, GtkTreeDestroyCountFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_tree_view_set_destroy_count_func$handle() {
        return gtk_tree_view_set_destroy_count_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_destroy_count_func(GtkTreeView *tree_view, GtkTreeDestroyCountFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_tree_view_set_destroy_count_func(MemorySegment tree_view, MemorySegment func, MemorySegment data, MemorySegment destroy) {
        var mh$ = gtk_tree_view_set_destroy_count_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_destroy_count_func", tree_view, func, data, destroy);
            }
            mh$.invokeExact(tree_view, func, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_fixed_height_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_fixed_height_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_fixed_height_mode(GtkTreeView *tree_view, gboolean enable)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_fixed_height_mode$descriptor() {
        return gtk_tree_view_set_fixed_height_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_fixed_height_mode(GtkTreeView *tree_view, gboolean enable)
     * }
     */
    public static MethodHandle gtk_tree_view_set_fixed_height_mode$handle() {
        return gtk_tree_view_set_fixed_height_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_fixed_height_mode(GtkTreeView *tree_view, gboolean enable)
     * }
     */
    public static void gtk_tree_view_set_fixed_height_mode(MemorySegment tree_view, int enable) {
        var mh$ = gtk_tree_view_set_fixed_height_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_fixed_height_mode", tree_view, enable);
            }
            mh$.invokeExact(tree_view, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_fixed_height_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_fixed_height_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_fixed_height_mode(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_fixed_height_mode$descriptor() {
        return gtk_tree_view_get_fixed_height_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_fixed_height_mode(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_fixed_height_mode$handle() {
        return gtk_tree_view_get_fixed_height_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_fixed_height_mode(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_fixed_height_mode(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_fixed_height_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_fixed_height_mode", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_hover_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_hover_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_hover_selection(GtkTreeView *tree_view, gboolean hover)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_hover_selection$descriptor() {
        return gtk_tree_view_set_hover_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_hover_selection(GtkTreeView *tree_view, gboolean hover)
     * }
     */
    public static MethodHandle gtk_tree_view_set_hover_selection$handle() {
        return gtk_tree_view_set_hover_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_hover_selection(GtkTreeView *tree_view, gboolean hover)
     * }
     */
    public static void gtk_tree_view_set_hover_selection(MemorySegment tree_view, int hover) {
        var mh$ = gtk_tree_view_set_hover_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_hover_selection", tree_view, hover);
            }
            mh$.invokeExact(tree_view, hover);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_hover_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_hover_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_hover_selection(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_hover_selection$descriptor() {
        return gtk_tree_view_get_hover_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_hover_selection(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_hover_selection$handle() {
        return gtk_tree_view_get_hover_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_hover_selection(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_hover_selection(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_hover_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_hover_selection", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_hover_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_hover_expand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_hover_expand(GtkTreeView *tree_view, gboolean expand)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_hover_expand$descriptor() {
        return gtk_tree_view_set_hover_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_hover_expand(GtkTreeView *tree_view, gboolean expand)
     * }
     */
    public static MethodHandle gtk_tree_view_set_hover_expand$handle() {
        return gtk_tree_view_set_hover_expand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_hover_expand(GtkTreeView *tree_view, gboolean expand)
     * }
     */
    public static void gtk_tree_view_set_hover_expand(MemorySegment tree_view, int expand) {
        var mh$ = gtk_tree_view_set_hover_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_hover_expand", tree_view, expand);
            }
            mh$.invokeExact(tree_view, expand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_hover_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_hover_expand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_hover_expand(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_hover_expand$descriptor() {
        return gtk_tree_view_get_hover_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_hover_expand(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_hover_expand$handle() {
        return gtk_tree_view_get_hover_expand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_hover_expand(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_hover_expand(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_hover_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_hover_expand", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_rubber_banding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_rubber_banding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_rubber_banding(GtkTreeView *tree_view, gboolean enable)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_rubber_banding$descriptor() {
        return gtk_tree_view_set_rubber_banding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_rubber_banding(GtkTreeView *tree_view, gboolean enable)
     * }
     */
    public static MethodHandle gtk_tree_view_set_rubber_banding$handle() {
        return gtk_tree_view_set_rubber_banding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_rubber_banding(GtkTreeView *tree_view, gboolean enable)
     * }
     */
    public static void gtk_tree_view_set_rubber_banding(MemorySegment tree_view, int enable) {
        var mh$ = gtk_tree_view_set_rubber_banding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_rubber_banding", tree_view, enable);
            }
            mh$.invokeExact(tree_view, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_rubber_banding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_rubber_banding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_rubber_banding(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_rubber_banding$descriptor() {
        return gtk_tree_view_get_rubber_banding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_rubber_banding(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_rubber_banding$handle() {
        return gtk_tree_view_get_rubber_banding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_rubber_banding(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_rubber_banding(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_rubber_banding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_rubber_banding", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_is_rubber_banding_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_is_rubber_banding_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_is_rubber_banding_active(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_is_rubber_banding_active$descriptor() {
        return gtk_tree_view_is_rubber_banding_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_is_rubber_banding_active(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_is_rubber_banding_active$handle() {
        return gtk_tree_view_is_rubber_banding_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_is_rubber_banding_active(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_is_rubber_banding_active(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_is_rubber_banding_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_is_rubber_banding_active", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_row_separator_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_row_separator_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_row_separator_func$descriptor() {
        return gtk_tree_view_get_row_separator_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_row_separator_func$handle() {
        return gtk_tree_view_get_row_separator_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func(GtkTreeView *tree_view)
     * }
     */
    public static MemorySegment gtk_tree_view_get_row_separator_func(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_row_separator_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_row_separator_func", tree_view);
            }
            return (MemorySegment)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_row_separator_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_row_separator_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_row_separator_func(GtkTreeView *tree_view, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_row_separator_func$descriptor() {
        return gtk_tree_view_set_row_separator_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_row_separator_func(GtkTreeView *tree_view, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_tree_view_set_row_separator_func$handle() {
        return gtk_tree_view_set_row_separator_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_row_separator_func(GtkTreeView *tree_view, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_tree_view_set_row_separator_func(MemorySegment tree_view, MemorySegment func, MemorySegment data, MemorySegment destroy) {
        var mh$ = gtk_tree_view_set_row_separator_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_row_separator_func", tree_view, func, data, destroy);
            }
            mh$.invokeExact(tree_view, func, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_grid_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_grid_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeViewGridLines gtk_tree_view_get_grid_lines(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_grid_lines$descriptor() {
        return gtk_tree_view_get_grid_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeViewGridLines gtk_tree_view_get_grid_lines(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_grid_lines$handle() {
        return gtk_tree_view_get_grid_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeViewGridLines gtk_tree_view_get_grid_lines(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_grid_lines(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_grid_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_grid_lines", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_grid_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_grid_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_grid_lines(GtkTreeView *tree_view, GtkTreeViewGridLines grid_lines)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_grid_lines$descriptor() {
        return gtk_tree_view_set_grid_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_grid_lines(GtkTreeView *tree_view, GtkTreeViewGridLines grid_lines)
     * }
     */
    public static MethodHandle gtk_tree_view_set_grid_lines$handle() {
        return gtk_tree_view_set_grid_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_grid_lines(GtkTreeView *tree_view, GtkTreeViewGridLines grid_lines)
     * }
     */
    public static void gtk_tree_view_set_grid_lines(MemorySegment tree_view, int grid_lines) {
        var mh$ = gtk_tree_view_set_grid_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_grid_lines", tree_view, grid_lines);
            }
            mh$.invokeExact(tree_view, grid_lines);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_enable_tree_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_enable_tree_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_enable_tree_lines(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_enable_tree_lines$descriptor() {
        return gtk_tree_view_get_enable_tree_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_enable_tree_lines(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_enable_tree_lines$handle() {
        return gtk_tree_view_get_enable_tree_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_enable_tree_lines(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_enable_tree_lines(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_enable_tree_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_enable_tree_lines", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_enable_tree_lines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_enable_tree_lines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_enable_tree_lines(GtkTreeView *tree_view, gboolean enabled)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_enable_tree_lines$descriptor() {
        return gtk_tree_view_set_enable_tree_lines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_enable_tree_lines(GtkTreeView *tree_view, gboolean enabled)
     * }
     */
    public static MethodHandle gtk_tree_view_set_enable_tree_lines$handle() {
        return gtk_tree_view_set_enable_tree_lines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_enable_tree_lines(GtkTreeView *tree_view, gboolean enabled)
     * }
     */
    public static void gtk_tree_view_set_enable_tree_lines(MemorySegment tree_view, int enabled) {
        var mh$ = gtk_tree_view_set_enable_tree_lines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_enable_tree_lines", tree_view, enabled);
            }
            mh$.invokeExact(tree_view, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_show_expanders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_show_expanders"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_show_expanders(GtkTreeView *tree_view, gboolean enabled)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_show_expanders$descriptor() {
        return gtk_tree_view_set_show_expanders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_show_expanders(GtkTreeView *tree_view, gboolean enabled)
     * }
     */
    public static MethodHandle gtk_tree_view_set_show_expanders$handle() {
        return gtk_tree_view_set_show_expanders.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_show_expanders(GtkTreeView *tree_view, gboolean enabled)
     * }
     */
    public static void gtk_tree_view_set_show_expanders(MemorySegment tree_view, int enabled) {
        var mh$ = gtk_tree_view_set_show_expanders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_show_expanders", tree_view, enabled);
            }
            mh$.invokeExact(tree_view, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_show_expanders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_show_expanders"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_show_expanders(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_show_expanders$descriptor() {
        return gtk_tree_view_get_show_expanders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_show_expanders(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_show_expanders$handle() {
        return gtk_tree_view_get_show_expanders.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_show_expanders(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_show_expanders(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_show_expanders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_show_expanders", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_level_indentation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_level_indentation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_level_indentation(GtkTreeView *tree_view, gint indentation)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_level_indentation$descriptor() {
        return gtk_tree_view_set_level_indentation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_level_indentation(GtkTreeView *tree_view, gint indentation)
     * }
     */
    public static MethodHandle gtk_tree_view_set_level_indentation$handle() {
        return gtk_tree_view_set_level_indentation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_level_indentation(GtkTreeView *tree_view, gint indentation)
     * }
     */
    public static void gtk_tree_view_set_level_indentation(MemorySegment tree_view, int indentation) {
        var mh$ = gtk_tree_view_set_level_indentation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_level_indentation", tree_view, indentation);
            }
            mh$.invokeExact(tree_view, indentation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_level_indentation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_level_indentation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_get_level_indentation(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_level_indentation$descriptor() {
        return gtk_tree_view_get_level_indentation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_get_level_indentation(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_level_indentation$handle() {
        return gtk_tree_view_get_level_indentation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_get_level_indentation(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_level_indentation(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_level_indentation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_level_indentation", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_tooltip_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_tooltip_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_tooltip_row(GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_tooltip_row$descriptor() {
        return gtk_tree_view_set_tooltip_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_tooltip_row(GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_tree_view_set_tooltip_row$handle() {
        return gtk_tree_view_set_tooltip_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_tooltip_row(GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path)
     * }
     */
    public static void gtk_tree_view_set_tooltip_row(MemorySegment tree_view, MemorySegment tooltip, MemorySegment path) {
        var mh$ = gtk_tree_view_set_tooltip_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_tooltip_row", tree_view, tooltip, path);
            }
            mh$.invokeExact(tree_view, tooltip, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_tooltip_cell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_tooltip_cell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_tooltip_cell(GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path, GtkTreeViewColumn *column, GtkCellRenderer *cell)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_tooltip_cell$descriptor() {
        return gtk_tree_view_set_tooltip_cell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_tooltip_cell(GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path, GtkTreeViewColumn *column, GtkCellRenderer *cell)
     * }
     */
    public static MethodHandle gtk_tree_view_set_tooltip_cell$handle() {
        return gtk_tree_view_set_tooltip_cell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_tooltip_cell(GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path, GtkTreeViewColumn *column, GtkCellRenderer *cell)
     * }
     */
    public static void gtk_tree_view_set_tooltip_cell(MemorySegment tree_view, MemorySegment tooltip, MemorySegment path, MemorySegment column, MemorySegment cell) {
        var mh$ = gtk_tree_view_set_tooltip_cell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_tooltip_cell", tree_view, tooltip, path, column, cell);
            }
            mh$.invokeExact(tree_view, tooltip, path, column, cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_tooltip_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_tooltip_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_tooltip_context(GtkTreeView *tree_view, gint *x, gint *y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_tooltip_context$descriptor() {
        return gtk_tree_view_get_tooltip_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_tooltip_context(GtkTreeView *tree_view, gint *x, gint *y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_tree_view_get_tooltip_context$handle() {
        return gtk_tree_view_get_tooltip_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_tree_view_get_tooltip_context(GtkTreeView *tree_view, gint *x, gint *y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter)
     * }
     */
    public static int gtk_tree_view_get_tooltip_context(MemorySegment tree_view, MemorySegment x, MemorySegment y, int keyboard_tip, MemorySegment model, MemorySegment path, MemorySegment iter) {
        var mh$ = gtk_tree_view_get_tooltip_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_tooltip_context", tree_view, x, y, keyboard_tip, model, path, iter);
            }
            return (int)mh$.invokeExact(tree_view, x, y, keyboard_tip, model, path, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_set_tooltip_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_set_tooltip_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_tooltip_column(GtkTreeView *tree_view, gint column)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_set_tooltip_column$descriptor() {
        return gtk_tree_view_set_tooltip_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_tooltip_column(GtkTreeView *tree_view, gint column)
     * }
     */
    public static MethodHandle gtk_tree_view_set_tooltip_column$handle() {
        return gtk_tree_view_set_tooltip_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_tree_view_set_tooltip_column(GtkTreeView *tree_view, gint column)
     * }
     */
    public static void gtk_tree_view_set_tooltip_column(MemorySegment tree_view, int column) {
        var mh$ = gtk_tree_view_set_tooltip_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_set_tooltip_column", tree_view, column);
            }
            mh$.invokeExact(tree_view, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_tree_view_get_tooltip_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_tree_view_get_tooltip_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_get_tooltip_column(GtkTreeView *tree_view)
     * }
     */
    public static FunctionDescriptor gtk_tree_view_get_tooltip_column$descriptor() {
        return gtk_tree_view_get_tooltip_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_tree_view_get_tooltip_column(GtkTreeView *tree_view)
     * }
     */
    public static MethodHandle gtk_tree_view_get_tooltip_column$handle() {
        return gtk_tree_view_get_tooltip_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_tree_view_get_tooltip_column(GtkTreeView *tree_view)
     * }
     */
    public static int gtk_tree_view_get_tooltip_column(MemorySegment tree_view) {
        var mh$ = gtk_tree_view_get_tooltip_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_tree_view_get_tooltip_column", tree_view);
            }
            return (int)mh$.invokeExact(tree_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_combo_box_get_type()
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_type$descriptor() {
        return gtk_combo_box_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_combo_box_get_type()
     * }
     */
    public static MethodHandle gtk_combo_box_get_type$handle() {
        return gtk_combo_box_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_combo_box_get_type()
     * }
     */
    public static long gtk_combo_box_get_type() {
        var mh$ = gtk_combo_box_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new()
     * }
     */
    public static FunctionDescriptor gtk_combo_box_new$descriptor() {
        return gtk_combo_box_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new()
     * }
     */
    public static MethodHandle gtk_combo_box_new$handle() {
        return gtk_combo_box_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new()
     * }
     */
    public static MemorySegment gtk_combo_box_new() {
        var mh$ = gtk_combo_box_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_new_with_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_new_with_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_area(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_new_with_area$descriptor() {
        return gtk_combo_box_new_with_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_area(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_combo_box_new_with_area$handle() {
        return gtk_combo_box_new_with_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_area(GtkCellArea *area)
     * }
     */
    public static MemorySegment gtk_combo_box_new_with_area(MemorySegment area) {
        var mh$ = gtk_combo_box_new_with_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_new_with_area", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_new_with_area_and_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_new_with_area_and_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_area_and_entry(GtkCellArea *area)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_new_with_area_and_entry$descriptor() {
        return gtk_combo_box_new_with_area_and_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_area_and_entry(GtkCellArea *area)
     * }
     */
    public static MethodHandle gtk_combo_box_new_with_area_and_entry$handle() {
        return gtk_combo_box_new_with_area_and_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_area_and_entry(GtkCellArea *area)
     * }
     */
    public static MemorySegment gtk_combo_box_new_with_area_and_entry(MemorySegment area) {
        var mh$ = gtk_combo_box_new_with_area_and_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_new_with_area_and_entry", area);
            }
            return (MemorySegment)mh$.invokeExact(area);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_new_with_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_new_with_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_entry()
     * }
     */
    public static FunctionDescriptor gtk_combo_box_new_with_entry$descriptor() {
        return gtk_combo_box_new_with_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_entry()
     * }
     */
    public static MethodHandle gtk_combo_box_new_with_entry$handle() {
        return gtk_combo_box_new_with_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_entry()
     * }
     */
    public static MemorySegment gtk_combo_box_new_with_entry() {
        var mh$ = gtk_combo_box_new_with_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_new_with_entry");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_new_with_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_new_with_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_model(GtkTreeModel *model)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_new_with_model$descriptor() {
        return gtk_combo_box_new_with_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_model(GtkTreeModel *model)
     * }
     */
    public static MethodHandle gtk_combo_box_new_with_model$handle() {
        return gtk_combo_box_new_with_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_model(GtkTreeModel *model)
     * }
     */
    public static MemorySegment gtk_combo_box_new_with_model(MemorySegment model) {
        var mh$ = gtk_combo_box_new_with_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_new_with_model", model);
            }
            return (MemorySegment)mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_new_with_model_and_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_new_with_model_and_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_model_and_entry(GtkTreeModel *model)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_new_with_model_and_entry$descriptor() {
        return gtk_combo_box_new_with_model_and_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_model_and_entry(GtkTreeModel *model)
     * }
     */
    public static MethodHandle gtk_combo_box_new_with_model_and_entry$handle() {
        return gtk_combo_box_new_with_model_and_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_new_with_model_and_entry(GtkTreeModel *model)
     * }
     */
    public static MemorySegment gtk_combo_box_new_with_model_and_entry(MemorySegment model) {
        var mh$ = gtk_combo_box_new_with_model_and_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_new_with_model_and_entry", model);
            }
            return (MemorySegment)mh$.invokeExact(model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_wrap_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_wrap_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_wrap_width(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_wrap_width$descriptor() {
        return gtk_combo_box_get_wrap_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_wrap_width(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_wrap_width$handle() {
        return gtk_combo_box_get_wrap_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_wrap_width(GtkComboBox *combo_box)
     * }
     */
    public static int gtk_combo_box_get_wrap_width(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_wrap_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_wrap_width", combo_box);
            }
            return (int)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_wrap_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_wrap_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_wrap_width(GtkComboBox *combo_box, gint width)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_wrap_width$descriptor() {
        return gtk_combo_box_set_wrap_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_wrap_width(GtkComboBox *combo_box, gint width)
     * }
     */
    public static MethodHandle gtk_combo_box_set_wrap_width$handle() {
        return gtk_combo_box_set_wrap_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_wrap_width(GtkComboBox *combo_box, gint width)
     * }
     */
    public static void gtk_combo_box_set_wrap_width(MemorySegment combo_box, int width) {
        var mh$ = gtk_combo_box_set_wrap_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_wrap_width", combo_box, width);
            }
            mh$.invokeExact(combo_box, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_row_span_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_row_span_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_row_span_column(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_row_span_column$descriptor() {
        return gtk_combo_box_get_row_span_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_row_span_column(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_row_span_column$handle() {
        return gtk_combo_box_get_row_span_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_row_span_column(GtkComboBox *combo_box)
     * }
     */
    public static int gtk_combo_box_get_row_span_column(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_row_span_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_row_span_column", combo_box);
            }
            return (int)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_row_span_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_row_span_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_row_span_column(GtkComboBox *combo_box, gint row_span)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_row_span_column$descriptor() {
        return gtk_combo_box_set_row_span_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_row_span_column(GtkComboBox *combo_box, gint row_span)
     * }
     */
    public static MethodHandle gtk_combo_box_set_row_span_column$handle() {
        return gtk_combo_box_set_row_span_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_row_span_column(GtkComboBox *combo_box, gint row_span)
     * }
     */
    public static void gtk_combo_box_set_row_span_column(MemorySegment combo_box, int row_span) {
        var mh$ = gtk_combo_box_set_row_span_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_row_span_column", combo_box, row_span);
            }
            mh$.invokeExact(combo_box, row_span);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_column_span_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_column_span_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_column_span_column(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_column_span_column$descriptor() {
        return gtk_combo_box_get_column_span_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_column_span_column(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_column_span_column$handle() {
        return gtk_combo_box_get_column_span_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_column_span_column(GtkComboBox *combo_box)
     * }
     */
    public static int gtk_combo_box_get_column_span_column(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_column_span_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_column_span_column", combo_box);
            }
            return (int)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_column_span_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_column_span_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_column_span_column(GtkComboBox *combo_box, gint column_span)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_column_span_column$descriptor() {
        return gtk_combo_box_set_column_span_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_column_span_column(GtkComboBox *combo_box, gint column_span)
     * }
     */
    public static MethodHandle gtk_combo_box_set_column_span_column$handle() {
        return gtk_combo_box_set_column_span_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_column_span_column(GtkComboBox *combo_box, gint column_span)
     * }
     */
    public static void gtk_combo_box_set_column_span_column(MemorySegment combo_box, int column_span) {
        var mh$ = gtk_combo_box_set_column_span_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_column_span_column", combo_box, column_span);
            }
            mh$.invokeExact(combo_box, column_span);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_add_tearoffs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_add_tearoffs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_add_tearoffs(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_add_tearoffs$descriptor() {
        return gtk_combo_box_get_add_tearoffs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_add_tearoffs(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_add_tearoffs$handle() {
        return gtk_combo_box_get_add_tearoffs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_add_tearoffs(GtkComboBox *combo_box)
     * }
     */
    public static int gtk_combo_box_get_add_tearoffs(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_add_tearoffs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_add_tearoffs", combo_box);
            }
            return (int)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_add_tearoffs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_add_tearoffs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_add_tearoffs(GtkComboBox *combo_box, gboolean add_tearoffs)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_add_tearoffs$descriptor() {
        return gtk_combo_box_set_add_tearoffs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_add_tearoffs(GtkComboBox *combo_box, gboolean add_tearoffs)
     * }
     */
    public static MethodHandle gtk_combo_box_set_add_tearoffs$handle() {
        return gtk_combo_box_set_add_tearoffs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_add_tearoffs(GtkComboBox *combo_box, gboolean add_tearoffs)
     * }
     */
    public static void gtk_combo_box_set_add_tearoffs(MemorySegment combo_box, int add_tearoffs) {
        var mh$ = gtk_combo_box_set_add_tearoffs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_add_tearoffs", combo_box, add_tearoffs);
            }
            mh$.invokeExact(combo_box, add_tearoffs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_combo_box_get_title(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_title$descriptor() {
        return gtk_combo_box_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_combo_box_get_title(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_title$handle() {
        return gtk_combo_box_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_combo_box_get_title(GtkComboBox *combo_box)
     * }
     */
    public static MemorySegment gtk_combo_box_get_title(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_title", combo_box);
            }
            return (MemorySegment)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_title(GtkComboBox *combo_box, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_title$descriptor() {
        return gtk_combo_box_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_title(GtkComboBox *combo_box, const gchar *title)
     * }
     */
    public static MethodHandle gtk_combo_box_set_title$handle() {
        return gtk_combo_box_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_title(GtkComboBox *combo_box, const gchar *title)
     * }
     */
    public static void gtk_combo_box_set_title(MemorySegment combo_box, MemorySegment title) {
        var mh$ = gtk_combo_box_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_title", combo_box, title);
            }
            mh$.invokeExact(combo_box, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_focus_on_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_focus_on_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_focus_on_click(GtkComboBox *combo)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_focus_on_click$descriptor() {
        return gtk_combo_box_get_focus_on_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_focus_on_click(GtkComboBox *combo)
     * }
     */
    public static MethodHandle gtk_combo_box_get_focus_on_click$handle() {
        return gtk_combo_box_get_focus_on_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_focus_on_click(GtkComboBox *combo)
     * }
     */
    public static int gtk_combo_box_get_focus_on_click(MemorySegment combo) {
        var mh$ = gtk_combo_box_get_focus_on_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_focus_on_click", combo);
            }
            return (int)mh$.invokeExact(combo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_focus_on_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_focus_on_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_focus_on_click(GtkComboBox *combo, gboolean focus_on_click)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_focus_on_click$descriptor() {
        return gtk_combo_box_set_focus_on_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_focus_on_click(GtkComboBox *combo, gboolean focus_on_click)
     * }
     */
    public static MethodHandle gtk_combo_box_set_focus_on_click$handle() {
        return gtk_combo_box_set_focus_on_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_focus_on_click(GtkComboBox *combo, gboolean focus_on_click)
     * }
     */
    public static void gtk_combo_box_set_focus_on_click(MemorySegment combo, int focus_on_click) {
        var mh$ = gtk_combo_box_set_focus_on_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_focus_on_click", combo, focus_on_click);
            }
            mh$.invokeExact(combo, focus_on_click);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_active(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_active$descriptor() {
        return gtk_combo_box_get_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_active(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_active$handle() {
        return gtk_combo_box_get_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_active(GtkComboBox *combo_box)
     * }
     */
    public static int gtk_combo_box_get_active(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_active", combo_box);
            }
            return (int)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_active(GtkComboBox *combo_box, gint index_)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_active$descriptor() {
        return gtk_combo_box_set_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_active(GtkComboBox *combo_box, gint index_)
     * }
     */
    public static MethodHandle gtk_combo_box_set_active$handle() {
        return gtk_combo_box_set_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_active(GtkComboBox *combo_box, gint index_)
     * }
     */
    public static void gtk_combo_box_set_active(MemorySegment combo_box, int index_) {
        var mh$ = gtk_combo_box_set_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_active", combo_box, index_);
            }
            mh$.invokeExact(combo_box, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_active_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_active_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_active_iter(GtkComboBox *combo_box, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_active_iter$descriptor() {
        return gtk_combo_box_get_active_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_active_iter(GtkComboBox *combo_box, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_combo_box_get_active_iter$handle() {
        return gtk_combo_box_get_active_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_active_iter(GtkComboBox *combo_box, GtkTreeIter *iter)
     * }
     */
    public static int gtk_combo_box_get_active_iter(MemorySegment combo_box, MemorySegment iter) {
        var mh$ = gtk_combo_box_get_active_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_active_iter", combo_box, iter);
            }
            return (int)mh$.invokeExact(combo_box, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_active_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_active_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_active_iter(GtkComboBox *combo_box, GtkTreeIter *iter)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_active_iter$descriptor() {
        return gtk_combo_box_set_active_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_active_iter(GtkComboBox *combo_box, GtkTreeIter *iter)
     * }
     */
    public static MethodHandle gtk_combo_box_set_active_iter$handle() {
        return gtk_combo_box_set_active_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_active_iter(GtkComboBox *combo_box, GtkTreeIter *iter)
     * }
     */
    public static void gtk_combo_box_set_active_iter(MemorySegment combo_box, MemorySegment iter) {
        var mh$ = gtk_combo_box_set_active_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_active_iter", combo_box, iter);
            }
            mh$.invokeExact(combo_box, iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_model(GtkComboBox *combo_box, GtkTreeModel *model)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_model$descriptor() {
        return gtk_combo_box_set_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_model(GtkComboBox *combo_box, GtkTreeModel *model)
     * }
     */
    public static MethodHandle gtk_combo_box_set_model$handle() {
        return gtk_combo_box_set_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_model(GtkComboBox *combo_box, GtkTreeModel *model)
     * }
     */
    public static void gtk_combo_box_set_model(MemorySegment combo_box, MemorySegment model) {
        var mh$ = gtk_combo_box_set_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_model", combo_box, model);
            }
            mh$.invokeExact(combo_box, model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_combo_box_get_model(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_model$descriptor() {
        return gtk_combo_box_get_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_combo_box_get_model(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_model$handle() {
        return gtk_combo_box_get_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_combo_box_get_model(GtkComboBox *combo_box)
     * }
     */
    public static MemorySegment gtk_combo_box_get_model(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_model", combo_box);
            }
            return (MemorySegment)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_row_separator_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_row_separator_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeViewRowSeparatorFunc gtk_combo_box_get_row_separator_func(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_row_separator_func$descriptor() {
        return gtk_combo_box_get_row_separator_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeViewRowSeparatorFunc gtk_combo_box_get_row_separator_func(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_row_separator_func$handle() {
        return gtk_combo_box_get_row_separator_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeViewRowSeparatorFunc gtk_combo_box_get_row_separator_func(GtkComboBox *combo_box)
     * }
     */
    public static MemorySegment gtk_combo_box_get_row_separator_func(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_row_separator_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_row_separator_func", combo_box);
            }
            return (MemorySegment)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_row_separator_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_row_separator_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_row_separator_func(GtkComboBox *combo_box, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_row_separator_func$descriptor() {
        return gtk_combo_box_set_row_separator_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_row_separator_func(GtkComboBox *combo_box, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_combo_box_set_row_separator_func$handle() {
        return gtk_combo_box_set_row_separator_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_row_separator_func(GtkComboBox *combo_box, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_combo_box_set_row_separator_func(MemorySegment combo_box, MemorySegment func, MemorySegment data, MemorySegment destroy) {
        var mh$ = gtk_combo_box_set_row_separator_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_row_separator_func", combo_box, func, data, destroy);
            }
            mh$.invokeExact(combo_box, func, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_button_sensitivity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_button_sensitivity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_button_sensitivity(GtkComboBox *combo_box, GtkSensitivityType sensitivity)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_button_sensitivity$descriptor() {
        return gtk_combo_box_set_button_sensitivity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_button_sensitivity(GtkComboBox *combo_box, GtkSensitivityType sensitivity)
     * }
     */
    public static MethodHandle gtk_combo_box_set_button_sensitivity$handle() {
        return gtk_combo_box_set_button_sensitivity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_button_sensitivity(GtkComboBox *combo_box, GtkSensitivityType sensitivity)
     * }
     */
    public static void gtk_combo_box_set_button_sensitivity(MemorySegment combo_box, int sensitivity) {
        var mh$ = gtk_combo_box_set_button_sensitivity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_button_sensitivity", combo_box, sensitivity);
            }
            mh$.invokeExact(combo_box, sensitivity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_button_sensitivity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_button_sensitivity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSensitivityType gtk_combo_box_get_button_sensitivity(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_button_sensitivity$descriptor() {
        return gtk_combo_box_get_button_sensitivity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSensitivityType gtk_combo_box_get_button_sensitivity(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_button_sensitivity$handle() {
        return gtk_combo_box_get_button_sensitivity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSensitivityType gtk_combo_box_get_button_sensitivity(GtkComboBox *combo_box)
     * }
     */
    public static int gtk_combo_box_get_button_sensitivity(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_button_sensitivity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_button_sensitivity", combo_box);
            }
            return (int)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_has_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_has_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_has_entry(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_has_entry$descriptor() {
        return gtk_combo_box_get_has_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_has_entry(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_has_entry$handle() {
        return gtk_combo_box_get_has_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_has_entry(GtkComboBox *combo_box)
     * }
     */
    public static int gtk_combo_box_get_has_entry(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_has_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_has_entry", combo_box);
            }
            return (int)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_entry_text_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_entry_text_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_entry_text_column(GtkComboBox *combo_box, gint text_column)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_entry_text_column$descriptor() {
        return gtk_combo_box_set_entry_text_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_entry_text_column(GtkComboBox *combo_box, gint text_column)
     * }
     */
    public static MethodHandle gtk_combo_box_set_entry_text_column$handle() {
        return gtk_combo_box_set_entry_text_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_entry_text_column(GtkComboBox *combo_box, gint text_column)
     * }
     */
    public static void gtk_combo_box_set_entry_text_column(MemorySegment combo_box, int text_column) {
        var mh$ = gtk_combo_box_set_entry_text_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_entry_text_column", combo_box, text_column);
            }
            mh$.invokeExact(combo_box, text_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_entry_text_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_entry_text_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_entry_text_column(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_entry_text_column$descriptor() {
        return gtk_combo_box_get_entry_text_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_entry_text_column(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_entry_text_column$handle() {
        return gtk_combo_box_get_entry_text_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_entry_text_column(GtkComboBox *combo_box)
     * }
     */
    public static int gtk_combo_box_get_entry_text_column(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_entry_text_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_entry_text_column", combo_box);
            }
            return (int)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_popup_fixed_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_popup_fixed_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_popup_fixed_width(GtkComboBox *combo_box, gboolean fixed)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_popup_fixed_width$descriptor() {
        return gtk_combo_box_set_popup_fixed_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_popup_fixed_width(GtkComboBox *combo_box, gboolean fixed)
     * }
     */
    public static MethodHandle gtk_combo_box_set_popup_fixed_width$handle() {
        return gtk_combo_box_set_popup_fixed_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_popup_fixed_width(GtkComboBox *combo_box, gboolean fixed)
     * }
     */
    public static void gtk_combo_box_set_popup_fixed_width(MemorySegment combo_box, int fixed) {
        var mh$ = gtk_combo_box_set_popup_fixed_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_popup_fixed_width", combo_box, fixed);
            }
            mh$.invokeExact(combo_box, fixed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_popup_fixed_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_popup_fixed_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_popup_fixed_width(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_popup_fixed_width$descriptor() {
        return gtk_combo_box_get_popup_fixed_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_popup_fixed_width(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_popup_fixed_width$handle() {
        return gtk_combo_box_get_popup_fixed_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_get_popup_fixed_width(GtkComboBox *combo_box)
     * }
     */
    public static int gtk_combo_box_get_popup_fixed_width(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_popup_fixed_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_popup_fixed_width", combo_box);
            }
            return (int)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_popup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_popup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_popup(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_popup$descriptor() {
        return gtk_combo_box_popup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_popup(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_popup$handle() {
        return gtk_combo_box_popup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_popup(GtkComboBox *combo_box)
     * }
     */
    public static void gtk_combo_box_popup(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_popup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_popup", combo_box);
            }
            mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_popup_for_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_popup_for_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_popup_for_device(GtkComboBox *combo_box, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_popup_for_device$descriptor() {
        return gtk_combo_box_popup_for_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_popup_for_device(GtkComboBox *combo_box, GdkDevice *device)
     * }
     */
    public static MethodHandle gtk_combo_box_popup_for_device$handle() {
        return gtk_combo_box_popup_for_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_popup_for_device(GtkComboBox *combo_box, GdkDevice *device)
     * }
     */
    public static void gtk_combo_box_popup_for_device(MemorySegment combo_box, MemorySegment device) {
        var mh$ = gtk_combo_box_popup_for_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_popup_for_device", combo_box, device);
            }
            mh$.invokeExact(combo_box, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_popdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_popdown"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_popdown(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_popdown$descriptor() {
        return gtk_combo_box_popdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_popdown(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_popdown$handle() {
        return gtk_combo_box_popdown.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_popdown(GtkComboBox *combo_box)
     * }
     */
    public static void gtk_combo_box_popdown(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_popdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_popdown", combo_box);
            }
            mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_popup_accessible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_popup_accessible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *gtk_combo_box_get_popup_accessible(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_popup_accessible$descriptor() {
        return gtk_combo_box_get_popup_accessible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *gtk_combo_box_get_popup_accessible(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_popup_accessible$handle() {
        return gtk_combo_box_get_popup_accessible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *gtk_combo_box_get_popup_accessible(GtkComboBox *combo_box)
     * }
     */
    public static MemorySegment gtk_combo_box_get_popup_accessible(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_popup_accessible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_popup_accessible", combo_box);
            }
            return (MemorySegment)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_id_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_id_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_id_column(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_id_column$descriptor() {
        return gtk_combo_box_get_id_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_id_column(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_id_column$handle() {
        return gtk_combo_box_get_id_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_combo_box_get_id_column(GtkComboBox *combo_box)
     * }
     */
    public static int gtk_combo_box_get_id_column(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_id_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_id_column", combo_box);
            }
            return (int)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_id_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_id_column"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_id_column(GtkComboBox *combo_box, gint id_column)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_id_column$descriptor() {
        return gtk_combo_box_set_id_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_id_column(GtkComboBox *combo_box, gint id_column)
     * }
     */
    public static MethodHandle gtk_combo_box_set_id_column$handle() {
        return gtk_combo_box_set_id_column.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_set_id_column(GtkComboBox *combo_box, gint id_column)
     * }
     */
    public static void gtk_combo_box_set_id_column(MemorySegment combo_box, int id_column) {
        var mh$ = gtk_combo_box_set_id_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_id_column", combo_box, id_column);
            }
            mh$.invokeExact(combo_box, id_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_get_active_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_get_active_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_combo_box_get_active_id(GtkComboBox *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_get_active_id$descriptor() {
        return gtk_combo_box_get_active_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_combo_box_get_active_id(GtkComboBox *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_get_active_id$handle() {
        return gtk_combo_box_get_active_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_combo_box_get_active_id(GtkComboBox *combo_box)
     * }
     */
    public static MemorySegment gtk_combo_box_get_active_id(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_get_active_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_get_active_id", combo_box);
            }
            return (MemorySegment)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_set_active_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_set_active_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_set_active_id(GtkComboBox *combo_box, const gchar *active_id)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_set_active_id$descriptor() {
        return gtk_combo_box_set_active_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_set_active_id(GtkComboBox *combo_box, const gchar *active_id)
     * }
     */
    public static MethodHandle gtk_combo_box_set_active_id$handle() {
        return gtk_combo_box_set_active_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_combo_box_set_active_id(GtkComboBox *combo_box, const gchar *active_id)
     * }
     */
    public static int gtk_combo_box_set_active_id(MemorySegment combo_box, MemorySegment active_id) {
        var mh$ = gtk_combo_box_set_active_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_set_active_id", combo_box, active_id);
            }
            return (int)mh$.invokeExact(combo_box, active_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_get_type$descriptor() {
        return gtk_app_chooser_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_button_get_type()
     * }
     */
    public static MethodHandle gtk_app_chooser_button_get_type$handle() {
        return gtk_app_chooser_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_app_chooser_button_get_type()
     * }
     */
    public static long gtk_app_chooser_button_get_type() {
        var mh$ = gtk_app_chooser_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_button_new(const gchar *content_type)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_new$descriptor() {
        return gtk_app_chooser_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_button_new(const gchar *content_type)
     * }
     */
    public static MethodHandle gtk_app_chooser_button_new$handle() {
        return gtk_app_chooser_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_app_chooser_button_new(const gchar *content_type)
     * }
     */
    public static MemorySegment gtk_app_chooser_button_new(MemorySegment content_type) {
        var mh$ = gtk_app_chooser_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_new", content_type);
            }
            return (MemorySegment)mh$.invokeExact(content_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_append_separator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_append_separator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_append_separator(GtkAppChooserButton *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_append_separator$descriptor() {
        return gtk_app_chooser_button_append_separator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_append_separator(GtkAppChooserButton *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_button_append_separator$handle() {
        return gtk_app_chooser_button_append_separator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_append_separator(GtkAppChooserButton *self)
     * }
     */
    public static void gtk_app_chooser_button_append_separator(MemorySegment self) {
        var mh$ = gtk_app_chooser_button_append_separator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_append_separator", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_append_custom_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_append_custom_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_append_custom_item(GtkAppChooserButton *self, const gchar *name, const gchar *label, GIcon *icon)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_append_custom_item$descriptor() {
        return gtk_app_chooser_button_append_custom_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_append_custom_item(GtkAppChooserButton *self, const gchar *name, const gchar *label, GIcon *icon)
     * }
     */
    public static MethodHandle gtk_app_chooser_button_append_custom_item$handle() {
        return gtk_app_chooser_button_append_custom_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_append_custom_item(GtkAppChooserButton *self, const gchar *name, const gchar *label, GIcon *icon)
     * }
     */
    public static void gtk_app_chooser_button_append_custom_item(MemorySegment self, MemorySegment name, MemorySegment label, MemorySegment icon) {
        var mh$ = gtk_app_chooser_button_append_custom_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_append_custom_item", self, name, label, icon);
            }
            mh$.invokeExact(self, name, label, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_set_active_custom_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_set_active_custom_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_active_custom_item(GtkAppChooserButton *self, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_set_active_custom_item$descriptor() {
        return gtk_app_chooser_button_set_active_custom_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_active_custom_item(GtkAppChooserButton *self, const gchar *name)
     * }
     */
    public static MethodHandle gtk_app_chooser_button_set_active_custom_item$handle() {
        return gtk_app_chooser_button_set_active_custom_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_active_custom_item(GtkAppChooserButton *self, const gchar *name)
     * }
     */
    public static void gtk_app_chooser_button_set_active_custom_item(MemorySegment self, MemorySegment name) {
        var mh$ = gtk_app_chooser_button_set_active_custom_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_set_active_custom_item", self, name);
            }
            mh$.invokeExact(self, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_set_show_dialog_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_set_show_dialog_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_show_dialog_item(GtkAppChooserButton *self, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_set_show_dialog_item$descriptor() {
        return gtk_app_chooser_button_set_show_dialog_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_show_dialog_item(GtkAppChooserButton *self, gboolean setting)
     * }
     */
    public static MethodHandle gtk_app_chooser_button_set_show_dialog_item$handle() {
        return gtk_app_chooser_button_set_show_dialog_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_show_dialog_item(GtkAppChooserButton *self, gboolean setting)
     * }
     */
    public static void gtk_app_chooser_button_set_show_dialog_item(MemorySegment self, int setting) {
        var mh$ = gtk_app_chooser_button_set_show_dialog_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_set_show_dialog_item", self, setting);
            }
            mh$.invokeExact(self, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_get_show_dialog_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_get_show_dialog_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_button_get_show_dialog_item(GtkAppChooserButton *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_get_show_dialog_item$descriptor() {
        return gtk_app_chooser_button_get_show_dialog_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_button_get_show_dialog_item(GtkAppChooserButton *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_button_get_show_dialog_item$handle() {
        return gtk_app_chooser_button_get_show_dialog_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_button_get_show_dialog_item(GtkAppChooserButton *self)
     * }
     */
    public static int gtk_app_chooser_button_get_show_dialog_item(MemorySegment self) {
        var mh$ = gtk_app_chooser_button_get_show_dialog_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_get_show_dialog_item", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_set_heading {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_set_heading"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_heading(GtkAppChooserButton *self, const gchar *heading)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_set_heading$descriptor() {
        return gtk_app_chooser_button_set_heading.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_heading(GtkAppChooserButton *self, const gchar *heading)
     * }
     */
    public static MethodHandle gtk_app_chooser_button_set_heading$handle() {
        return gtk_app_chooser_button_set_heading.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_heading(GtkAppChooserButton *self, const gchar *heading)
     * }
     */
    public static void gtk_app_chooser_button_set_heading(MemorySegment self, MemorySegment heading) {
        var mh$ = gtk_app_chooser_button_set_heading.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_set_heading", self, heading);
            }
            mh$.invokeExact(self, heading);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_get_heading {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_get_heading"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_app_chooser_button_get_heading(GtkAppChooserButton *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_get_heading$descriptor() {
        return gtk_app_chooser_button_get_heading.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_app_chooser_button_get_heading(GtkAppChooserButton *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_button_get_heading$handle() {
        return gtk_app_chooser_button_get_heading.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_app_chooser_button_get_heading(GtkAppChooserButton *self)
     * }
     */
    public static MemorySegment gtk_app_chooser_button_get_heading(MemorySegment self) {
        var mh$ = gtk_app_chooser_button_get_heading.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_get_heading", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_set_show_default_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_set_show_default_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_show_default_item(GtkAppChooserButton *self, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_set_show_default_item$descriptor() {
        return gtk_app_chooser_button_set_show_default_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_show_default_item(GtkAppChooserButton *self, gboolean setting)
     * }
     */
    public static MethodHandle gtk_app_chooser_button_set_show_default_item$handle() {
        return gtk_app_chooser_button_set_show_default_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_app_chooser_button_set_show_default_item(GtkAppChooserButton *self, gboolean setting)
     * }
     */
    public static void gtk_app_chooser_button_set_show_default_item(MemorySegment self, int setting) {
        var mh$ = gtk_app_chooser_button_set_show_default_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_set_show_default_item", self, setting);
            }
            mh$.invokeExact(self, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_app_chooser_button_get_show_default_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_app_chooser_button_get_show_default_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_button_get_show_default_item(GtkAppChooserButton *self)
     * }
     */
    public static FunctionDescriptor gtk_app_chooser_button_get_show_default_item$descriptor() {
        return gtk_app_chooser_button_get_show_default_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_button_get_show_default_item(GtkAppChooserButton *self)
     * }
     */
    public static MethodHandle gtk_app_chooser_button_get_show_default_item$handle() {
        return gtk_app_chooser_button_get_show_default_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_app_chooser_button_get_show_default_item(GtkAppChooserButton *self)
     * }
     */
    public static int gtk_app_chooser_button_get_show_default_item(MemorySegment self) {
        var mh$ = gtk_app_chooser_button_get_show_default_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_app_chooser_button_get_show_default_item", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_shortcuts_window_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_shortcuts_window_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_window_get_type()
     * }
     */
    public static FunctionDescriptor gtk_shortcuts_window_get_type$descriptor() {
        return gtk_shortcuts_window_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_window_get_type()
     * }
     */
    public static MethodHandle gtk_shortcuts_window_get_type$handle() {
        return gtk_shortcuts_window_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_shortcuts_window_get_type()
     * }
     */
    public static long gtk_shortcuts_window_get_type() {
        var mh$ = gtk_shortcuts_window_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_shortcuts_window_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkShortcutsWindow *GtkShortcutsWindow_autoptr
     * }
     */
    public static final AddressLayout GtkShortcutsWindow_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkShortcutsWindow_listautoptr
     * }
     */
    public static final AddressLayout GtkShortcutsWindow_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkShortcutsWindow_slistautoptr
     * }
     */
    public static final AddressLayout GtkShortcutsWindow_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkShortcutsWindow_queueautoptr
     * }
     */
    public static final AddressLayout GtkShortcutsWindow_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_application_window_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_window_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_application_window_get_type()
     * }
     */
    public static FunctionDescriptor gtk_application_window_get_type$descriptor() {
        return gtk_application_window_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_application_window_get_type()
     * }
     */
    public static MethodHandle gtk_application_window_get_type$handle() {
        return gtk_application_window_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_application_window_get_type()
     * }
     */
    public static long gtk_application_window_get_type() {
        var mh$ = gtk_application_window_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_window_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_window_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_window_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_application_window_new(GtkApplication *application)
     * }
     */
    public static FunctionDescriptor gtk_application_window_new$descriptor() {
        return gtk_application_window_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_application_window_new(GtkApplication *application)
     * }
     */
    public static MethodHandle gtk_application_window_new$handle() {
        return gtk_application_window_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_application_window_new(GtkApplication *application)
     * }
     */
    public static MemorySegment gtk_application_window_new(MemorySegment application) {
        var mh$ = gtk_application_window_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_window_new", application);
            }
            return (MemorySegment)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_window_set_show_menubar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_window_set_show_menubar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_application_window_set_show_menubar(GtkApplicationWindow *window, gboolean show_menubar)
     * }
     */
    public static FunctionDescriptor gtk_application_window_set_show_menubar$descriptor() {
        return gtk_application_window_set_show_menubar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_application_window_set_show_menubar(GtkApplicationWindow *window, gboolean show_menubar)
     * }
     */
    public static MethodHandle gtk_application_window_set_show_menubar$handle() {
        return gtk_application_window_set_show_menubar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_application_window_set_show_menubar(GtkApplicationWindow *window, gboolean show_menubar)
     * }
     */
    public static void gtk_application_window_set_show_menubar(MemorySegment window, int show_menubar) {
        var mh$ = gtk_application_window_set_show_menubar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_window_set_show_menubar", window, show_menubar);
            }
            mh$.invokeExact(window, show_menubar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_window_get_show_menubar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_window_get_show_menubar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_application_window_get_show_menubar(GtkApplicationWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_application_window_get_show_menubar$descriptor() {
        return gtk_application_window_get_show_menubar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_application_window_get_show_menubar(GtkApplicationWindow *window)
     * }
     */
    public static MethodHandle gtk_application_window_get_show_menubar$handle() {
        return gtk_application_window_get_show_menubar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_application_window_get_show_menubar(GtkApplicationWindow *window)
     * }
     */
    public static int gtk_application_window_get_show_menubar(MemorySegment window) {
        var mh$ = gtk_application_window_get_show_menubar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_window_get_show_menubar", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_window_get_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_window_get_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_application_window_get_id(GtkApplicationWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_application_window_get_id$descriptor() {
        return gtk_application_window_get_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_application_window_get_id(GtkApplicationWindow *window)
     * }
     */
    public static MethodHandle gtk_application_window_get_id$handle() {
        return gtk_application_window_get_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_application_window_get_id(GtkApplicationWindow *window)
     * }
     */
    public static int gtk_application_window_get_id(MemorySegment window) {
        var mh$ = gtk_application_window_get_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_window_get_id", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_window_set_help_overlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_window_set_help_overlay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_application_window_set_help_overlay(GtkApplicationWindow *window, GtkShortcutsWindow *help_overlay)
     * }
     */
    public static FunctionDescriptor gtk_application_window_set_help_overlay$descriptor() {
        return gtk_application_window_set_help_overlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_application_window_set_help_overlay(GtkApplicationWindow *window, GtkShortcutsWindow *help_overlay)
     * }
     */
    public static MethodHandle gtk_application_window_set_help_overlay$handle() {
        return gtk_application_window_set_help_overlay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_application_window_set_help_overlay(GtkApplicationWindow *window, GtkShortcutsWindow *help_overlay)
     * }
     */
    public static void gtk_application_window_set_help_overlay(MemorySegment window, MemorySegment help_overlay) {
        var mh$ = gtk_application_window_set_help_overlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_window_set_help_overlay", window, help_overlay);
            }
            mh$.invokeExact(window, help_overlay);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_window_get_help_overlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_window_get_help_overlay"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkShortcutsWindow *gtk_application_window_get_help_overlay(GtkApplicationWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_application_window_get_help_overlay$descriptor() {
        return gtk_application_window_get_help_overlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkShortcutsWindow *gtk_application_window_get_help_overlay(GtkApplicationWindow *window)
     * }
     */
    public static MethodHandle gtk_application_window_get_help_overlay$handle() {
        return gtk_application_window_get_help_overlay.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkShortcutsWindow *gtk_application_window_get_help_overlay(GtkApplicationWindow *window)
     * }
     */
    public static MemorySegment gtk_application_window_get_help_overlay(MemorySegment window) {
        var mh$ = gtk_application_window_get_help_overlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_window_get_help_overlay", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_frame_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_frame_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_frame_get_type()
     * }
     */
    public static FunctionDescriptor gtk_frame_get_type$descriptor() {
        return gtk_frame_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_frame_get_type()
     * }
     */
    public static MethodHandle gtk_frame_get_type$handle() {
        return gtk_frame_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_frame_get_type()
     * }
     */
    public static long gtk_frame_get_type() {
        var mh$ = gtk_frame_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_frame_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_frame_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_frame_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_frame_new(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_frame_new$descriptor() {
        return gtk_frame_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_frame_new(const gchar *label)
     * }
     */
    public static MethodHandle gtk_frame_new$handle() {
        return gtk_frame_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_frame_new(const gchar *label)
     * }
     */
    public static MemorySegment gtk_frame_new(MemorySegment label) {
        var mh$ = gtk_frame_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_frame_new", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_frame_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_frame_set_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_frame_set_label(GtkFrame *frame, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_frame_set_label$descriptor() {
        return gtk_frame_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_frame_set_label(GtkFrame *frame, const gchar *label)
     * }
     */
    public static MethodHandle gtk_frame_set_label$handle() {
        return gtk_frame_set_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_frame_set_label(GtkFrame *frame, const gchar *label)
     * }
     */
    public static void gtk_frame_set_label(MemorySegment frame, MemorySegment label) {
        var mh$ = gtk_frame_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_frame_set_label", frame, label);
            }
            mh$.invokeExact(frame, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_frame_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_frame_get_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_frame_get_label(GtkFrame *frame)
     * }
     */
    public static FunctionDescriptor gtk_frame_get_label$descriptor() {
        return gtk_frame_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_frame_get_label(GtkFrame *frame)
     * }
     */
    public static MethodHandle gtk_frame_get_label$handle() {
        return gtk_frame_get_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_frame_get_label(GtkFrame *frame)
     * }
     */
    public static MemorySegment gtk_frame_get_label(MemorySegment frame) {
        var mh$ = gtk_frame_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_frame_get_label", frame);
            }
            return (MemorySegment)mh$.invokeExact(frame);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_frame_set_label_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_frame_set_label_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_frame_set_label_widget(GtkFrame *frame, GtkWidget *label_widget)
     * }
     */
    public static FunctionDescriptor gtk_frame_set_label_widget$descriptor() {
        return gtk_frame_set_label_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_frame_set_label_widget(GtkFrame *frame, GtkWidget *label_widget)
     * }
     */
    public static MethodHandle gtk_frame_set_label_widget$handle() {
        return gtk_frame_set_label_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_frame_set_label_widget(GtkFrame *frame, GtkWidget *label_widget)
     * }
     */
    public static void gtk_frame_set_label_widget(MemorySegment frame, MemorySegment label_widget) {
        var mh$ = gtk_frame_set_label_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_frame_set_label_widget", frame, label_widget);
            }
            mh$.invokeExact(frame, label_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_frame_get_label_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_frame_get_label_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_frame_get_label_widget(GtkFrame *frame)
     * }
     */
    public static FunctionDescriptor gtk_frame_get_label_widget$descriptor() {
        return gtk_frame_get_label_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_frame_get_label_widget(GtkFrame *frame)
     * }
     */
    public static MethodHandle gtk_frame_get_label_widget$handle() {
        return gtk_frame_get_label_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_frame_get_label_widget(GtkFrame *frame)
     * }
     */
    public static MemorySegment gtk_frame_get_label_widget(MemorySegment frame) {
        var mh$ = gtk_frame_get_label_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_frame_get_label_widget", frame);
            }
            return (MemorySegment)mh$.invokeExact(frame);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_frame_set_label_align {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_frame_set_label_align"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_frame_set_label_align(GtkFrame *frame, gfloat xalign, gfloat yalign)
     * }
     */
    public static FunctionDescriptor gtk_frame_set_label_align$descriptor() {
        return gtk_frame_set_label_align.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_frame_set_label_align(GtkFrame *frame, gfloat xalign, gfloat yalign)
     * }
     */
    public static MethodHandle gtk_frame_set_label_align$handle() {
        return gtk_frame_set_label_align.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_frame_set_label_align(GtkFrame *frame, gfloat xalign, gfloat yalign)
     * }
     */
    public static void gtk_frame_set_label_align(MemorySegment frame, float xalign, float yalign) {
        var mh$ = gtk_frame_set_label_align.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_frame_set_label_align", frame, xalign, yalign);
            }
            mh$.invokeExact(frame, xalign, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_frame_get_label_align {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_frame_get_label_align"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_frame_get_label_align(GtkFrame *frame, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static FunctionDescriptor gtk_frame_get_label_align$descriptor() {
        return gtk_frame_get_label_align.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_frame_get_label_align(GtkFrame *frame, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static MethodHandle gtk_frame_get_label_align$handle() {
        return gtk_frame_get_label_align.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_frame_get_label_align(GtkFrame *frame, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static void gtk_frame_get_label_align(MemorySegment frame, MemorySegment xalign, MemorySegment yalign) {
        var mh$ = gtk_frame_get_label_align.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_frame_get_label_align", frame, xalign, yalign);
            }
            mh$.invokeExact(frame, xalign, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_frame_set_shadow_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_frame_set_shadow_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_frame_set_shadow_type(GtkFrame *frame, GtkShadowType type)
     * }
     */
    public static FunctionDescriptor gtk_frame_set_shadow_type$descriptor() {
        return gtk_frame_set_shadow_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_frame_set_shadow_type(GtkFrame *frame, GtkShadowType type)
     * }
     */
    public static MethodHandle gtk_frame_set_shadow_type$handle() {
        return gtk_frame_set_shadow_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_frame_set_shadow_type(GtkFrame *frame, GtkShadowType type)
     * }
     */
    public static void gtk_frame_set_shadow_type(MemorySegment frame, int type) {
        var mh$ = gtk_frame_set_shadow_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_frame_set_shadow_type", frame, type);
            }
            mh$.invokeExact(frame, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_frame_get_shadow_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_frame_get_shadow_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkShadowType gtk_frame_get_shadow_type(GtkFrame *frame)
     * }
     */
    public static FunctionDescriptor gtk_frame_get_shadow_type$descriptor() {
        return gtk_frame_get_shadow_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkShadowType gtk_frame_get_shadow_type(GtkFrame *frame)
     * }
     */
    public static MethodHandle gtk_frame_get_shadow_type$handle() {
        return gtk_frame_get_shadow_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkShadowType gtk_frame_get_shadow_type(GtkFrame *frame)
     * }
     */
    public static int gtk_frame_get_shadow_type(MemorySegment frame) {
        var mh$ = gtk_frame_get_shadow_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_frame_get_shadow_type", frame);
            }
            return (int)mh$.invokeExact(frame);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_aspect_frame_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_aspect_frame_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_aspect_frame_get_type()
     * }
     */
    public static FunctionDescriptor gtk_aspect_frame_get_type$descriptor() {
        return gtk_aspect_frame_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_aspect_frame_get_type()
     * }
     */
    public static MethodHandle gtk_aspect_frame_get_type$handle() {
        return gtk_aspect_frame_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_aspect_frame_get_type()
     * }
     */
    public static long gtk_aspect_frame_get_type() {
        var mh$ = gtk_aspect_frame_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_aspect_frame_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_aspect_frame_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_aspect_frame_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_aspect_frame_new(const gchar *label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child)
     * }
     */
    public static FunctionDescriptor gtk_aspect_frame_new$descriptor() {
        return gtk_aspect_frame_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_aspect_frame_new(const gchar *label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child)
     * }
     */
    public static MethodHandle gtk_aspect_frame_new$handle() {
        return gtk_aspect_frame_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_aspect_frame_new(const gchar *label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child)
     * }
     */
    public static MemorySegment gtk_aspect_frame_new(MemorySegment label, float xalign, float yalign, float ratio, int obey_child) {
        var mh$ = gtk_aspect_frame_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_aspect_frame_new", label, xalign, yalign, ratio, obey_child);
            }
            return (MemorySegment)mh$.invokeExact(label, xalign, yalign, ratio, obey_child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_aspect_frame_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_aspect_frame_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_aspect_frame_set(GtkAspectFrame *aspect_frame, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child)
     * }
     */
    public static FunctionDescriptor gtk_aspect_frame_set$descriptor() {
        return gtk_aspect_frame_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_aspect_frame_set(GtkAspectFrame *aspect_frame, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child)
     * }
     */
    public static MethodHandle gtk_aspect_frame_set$handle() {
        return gtk_aspect_frame_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_aspect_frame_set(GtkAspectFrame *aspect_frame, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child)
     * }
     */
    public static void gtk_aspect_frame_set(MemorySegment aspect_frame, float xalign, float yalign, float ratio, int obey_child) {
        var mh$ = gtk_aspect_frame_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_aspect_frame_set", aspect_frame, xalign, yalign, ratio, obey_child);
            }
            mh$.invokeExact(aspect_frame, xalign, yalign, ratio, obey_child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_ASSISTANT_PAGE_CONTENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ASSISTANT_PAGE_CONTENT = 0
     * }
     */
    public static int GTK_ASSISTANT_PAGE_CONTENT() {
        return GTK_ASSISTANT_PAGE_CONTENT;
    }
    private static final int GTK_ASSISTANT_PAGE_INTRO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ASSISTANT_PAGE_INTRO = 1
     * }
     */
    public static int GTK_ASSISTANT_PAGE_INTRO() {
        return GTK_ASSISTANT_PAGE_INTRO;
    }
    private static final int GTK_ASSISTANT_PAGE_CONFIRM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ASSISTANT_PAGE_CONFIRM = 2
     * }
     */
    public static int GTK_ASSISTANT_PAGE_CONFIRM() {
        return GTK_ASSISTANT_PAGE_CONFIRM;
    }
    private static final int GTK_ASSISTANT_PAGE_SUMMARY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ASSISTANT_PAGE_SUMMARY = 3
     * }
     */
    public static int GTK_ASSISTANT_PAGE_SUMMARY() {
        return GTK_ASSISTANT_PAGE_SUMMARY;
    }
    private static final int GTK_ASSISTANT_PAGE_PROGRESS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ASSISTANT_PAGE_PROGRESS = 4
     * }
     */
    public static int GTK_ASSISTANT_PAGE_PROGRESS() {
        return GTK_ASSISTANT_PAGE_PROGRESS;
    }
    private static final int GTK_ASSISTANT_PAGE_CUSTOM = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ASSISTANT_PAGE_CUSTOM = 5
     * }
     */
    public static int GTK_ASSISTANT_PAGE_CUSTOM() {
        return GTK_ASSISTANT_PAGE_CUSTOM;
    }

    private static class gtk_assistant_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_assistant_get_type()
     * }
     */
    public static FunctionDescriptor gtk_assistant_get_type$descriptor() {
        return gtk_assistant_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_assistant_get_type()
     * }
     */
    public static MethodHandle gtk_assistant_get_type$handle() {
        return gtk_assistant_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_assistant_get_type()
     * }
     */
    public static long gtk_assistant_get_type() {
        var mh$ = gtk_assistant_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_assistant_new()
     * }
     */
    public static FunctionDescriptor gtk_assistant_new$descriptor() {
        return gtk_assistant_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_assistant_new()
     * }
     */
    public static MethodHandle gtk_assistant_new$handle() {
        return gtk_assistant_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_assistant_new()
     * }
     */
    public static MemorySegment gtk_assistant_new() {
        var mh$ = gtk_assistant_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_next_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_next_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_next_page(GtkAssistant *assistant)
     * }
     */
    public static FunctionDescriptor gtk_assistant_next_page$descriptor() {
        return gtk_assistant_next_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_next_page(GtkAssistant *assistant)
     * }
     */
    public static MethodHandle gtk_assistant_next_page$handle() {
        return gtk_assistant_next_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_next_page(GtkAssistant *assistant)
     * }
     */
    public static void gtk_assistant_next_page(MemorySegment assistant) {
        var mh$ = gtk_assistant_next_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_next_page", assistant);
            }
            mh$.invokeExact(assistant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_previous_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_previous_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_previous_page(GtkAssistant *assistant)
     * }
     */
    public static FunctionDescriptor gtk_assistant_previous_page$descriptor() {
        return gtk_assistant_previous_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_previous_page(GtkAssistant *assistant)
     * }
     */
    public static MethodHandle gtk_assistant_previous_page$handle() {
        return gtk_assistant_previous_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_previous_page(GtkAssistant *assistant)
     * }
     */
    public static void gtk_assistant_previous_page(MemorySegment assistant) {
        var mh$ = gtk_assistant_previous_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_previous_page", assistant);
            }
            mh$.invokeExact(assistant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_get_current_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_get_current_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_assistant_get_current_page(GtkAssistant *assistant)
     * }
     */
    public static FunctionDescriptor gtk_assistant_get_current_page$descriptor() {
        return gtk_assistant_get_current_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_assistant_get_current_page(GtkAssistant *assistant)
     * }
     */
    public static MethodHandle gtk_assistant_get_current_page$handle() {
        return gtk_assistant_get_current_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_assistant_get_current_page(GtkAssistant *assistant)
     * }
     */
    public static int gtk_assistant_get_current_page(MemorySegment assistant) {
        var mh$ = gtk_assistant_get_current_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_get_current_page", assistant);
            }
            return (int)mh$.invokeExact(assistant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_set_current_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_set_current_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_current_page(GtkAssistant *assistant, gint page_num)
     * }
     */
    public static FunctionDescriptor gtk_assistant_set_current_page$descriptor() {
        return gtk_assistant_set_current_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_current_page(GtkAssistant *assistant, gint page_num)
     * }
     */
    public static MethodHandle gtk_assistant_set_current_page$handle() {
        return gtk_assistant_set_current_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_set_current_page(GtkAssistant *assistant, gint page_num)
     * }
     */
    public static void gtk_assistant_set_current_page(MemorySegment assistant, int page_num) {
        var mh$ = gtk_assistant_set_current_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_set_current_page", assistant, page_num);
            }
            mh$.invokeExact(assistant, page_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_get_n_pages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_get_n_pages"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_assistant_get_n_pages(GtkAssistant *assistant)
     * }
     */
    public static FunctionDescriptor gtk_assistant_get_n_pages$descriptor() {
        return gtk_assistant_get_n_pages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_assistant_get_n_pages(GtkAssistant *assistant)
     * }
     */
    public static MethodHandle gtk_assistant_get_n_pages$handle() {
        return gtk_assistant_get_n_pages.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_assistant_get_n_pages(GtkAssistant *assistant)
     * }
     */
    public static int gtk_assistant_get_n_pages(MemorySegment assistant) {
        var mh$ = gtk_assistant_get_n_pages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_get_n_pages", assistant);
            }
            return (int)mh$.invokeExact(assistant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_get_nth_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_get_nth_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_assistant_get_nth_page(GtkAssistant *assistant, gint page_num)
     * }
     */
    public static FunctionDescriptor gtk_assistant_get_nth_page$descriptor() {
        return gtk_assistant_get_nth_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_assistant_get_nth_page(GtkAssistant *assistant, gint page_num)
     * }
     */
    public static MethodHandle gtk_assistant_get_nth_page$handle() {
        return gtk_assistant_get_nth_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_assistant_get_nth_page(GtkAssistant *assistant, gint page_num)
     * }
     */
    public static MemorySegment gtk_assistant_get_nth_page(MemorySegment assistant, int page_num) {
        var mh$ = gtk_assistant_get_nth_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_get_nth_page", assistant, page_num);
            }
            return (MemorySegment)mh$.invokeExact(assistant, page_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_prepend_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_prepend_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_assistant_prepend_page(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static FunctionDescriptor gtk_assistant_prepend_page$descriptor() {
        return gtk_assistant_prepend_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_assistant_prepend_page(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MethodHandle gtk_assistant_prepend_page$handle() {
        return gtk_assistant_prepend_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_assistant_prepend_page(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static int gtk_assistant_prepend_page(MemorySegment assistant, MemorySegment page) {
        var mh$ = gtk_assistant_prepend_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_prepend_page", assistant, page);
            }
            return (int)mh$.invokeExact(assistant, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_append_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_append_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_assistant_append_page(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static FunctionDescriptor gtk_assistant_append_page$descriptor() {
        return gtk_assistant_append_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_assistant_append_page(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MethodHandle gtk_assistant_append_page$handle() {
        return gtk_assistant_append_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_assistant_append_page(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static int gtk_assistant_append_page(MemorySegment assistant, MemorySegment page) {
        var mh$ = gtk_assistant_append_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_append_page", assistant, page);
            }
            return (int)mh$.invokeExact(assistant, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_insert_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_insert_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_assistant_insert_page(GtkAssistant *assistant, GtkWidget *page, gint position)
     * }
     */
    public static FunctionDescriptor gtk_assistant_insert_page$descriptor() {
        return gtk_assistant_insert_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_assistant_insert_page(GtkAssistant *assistant, GtkWidget *page, gint position)
     * }
     */
    public static MethodHandle gtk_assistant_insert_page$handle() {
        return gtk_assistant_insert_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_assistant_insert_page(GtkAssistant *assistant, GtkWidget *page, gint position)
     * }
     */
    public static int gtk_assistant_insert_page(MemorySegment assistant, MemorySegment page, int position) {
        var mh$ = gtk_assistant_insert_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_insert_page", assistant, page, position);
            }
            return (int)mh$.invokeExact(assistant, page, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_remove_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_remove_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_remove_page(GtkAssistant *assistant, gint page_num)
     * }
     */
    public static FunctionDescriptor gtk_assistant_remove_page$descriptor() {
        return gtk_assistant_remove_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_remove_page(GtkAssistant *assistant, gint page_num)
     * }
     */
    public static MethodHandle gtk_assistant_remove_page$handle() {
        return gtk_assistant_remove_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_remove_page(GtkAssistant *assistant, gint page_num)
     * }
     */
    public static void gtk_assistant_remove_page(MemorySegment assistant, int page_num) {
        var mh$ = gtk_assistant_remove_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_remove_page", assistant, page_num);
            }
            mh$.invokeExact(assistant, page_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_set_forward_page_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_set_forward_page_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_forward_page_func(GtkAssistant *assistant, GtkAssistantPageFunc page_func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_assistant_set_forward_page_func$descriptor() {
        return gtk_assistant_set_forward_page_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_forward_page_func(GtkAssistant *assistant, GtkAssistantPageFunc page_func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_assistant_set_forward_page_func$handle() {
        return gtk_assistant_set_forward_page_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_set_forward_page_func(GtkAssistant *assistant, GtkAssistantPageFunc page_func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_assistant_set_forward_page_func(MemorySegment assistant, MemorySegment page_func, MemorySegment data, MemorySegment destroy) {
        var mh$ = gtk_assistant_set_forward_page_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_set_forward_page_func", assistant, page_func, data, destroy);
            }
            mh$.invokeExact(assistant, page_func, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_set_page_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_set_page_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_type(GtkAssistant *assistant, GtkWidget *page, GtkAssistantPageType type)
     * }
     */
    public static FunctionDescriptor gtk_assistant_set_page_type$descriptor() {
        return gtk_assistant_set_page_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_type(GtkAssistant *assistant, GtkWidget *page, GtkAssistantPageType type)
     * }
     */
    public static MethodHandle gtk_assistant_set_page_type$handle() {
        return gtk_assistant_set_page_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_type(GtkAssistant *assistant, GtkWidget *page, GtkAssistantPageType type)
     * }
     */
    public static void gtk_assistant_set_page_type(MemorySegment assistant, MemorySegment page, int type) {
        var mh$ = gtk_assistant_set_page_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_set_page_type", assistant, page, type);
            }
            mh$.invokeExact(assistant, page, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_get_page_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_get_page_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAssistantPageType gtk_assistant_get_page_type(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static FunctionDescriptor gtk_assistant_get_page_type$descriptor() {
        return gtk_assistant_get_page_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAssistantPageType gtk_assistant_get_page_type(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MethodHandle gtk_assistant_get_page_type$handle() {
        return gtk_assistant_get_page_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAssistantPageType gtk_assistant_get_page_type(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static int gtk_assistant_get_page_type(MemorySegment assistant, MemorySegment page) {
        var mh$ = gtk_assistant_get_page_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_get_page_type", assistant, page);
            }
            return (int)mh$.invokeExact(assistant, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_set_page_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_set_page_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_title(GtkAssistant *assistant, GtkWidget *page, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_assistant_set_page_title$descriptor() {
        return gtk_assistant_set_page_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_title(GtkAssistant *assistant, GtkWidget *page, const gchar *title)
     * }
     */
    public static MethodHandle gtk_assistant_set_page_title$handle() {
        return gtk_assistant_set_page_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_title(GtkAssistant *assistant, GtkWidget *page, const gchar *title)
     * }
     */
    public static void gtk_assistant_set_page_title(MemorySegment assistant, MemorySegment page, MemorySegment title) {
        var mh$ = gtk_assistant_set_page_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_set_page_title", assistant, page, title);
            }
            mh$.invokeExact(assistant, page, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_get_page_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_get_page_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_assistant_get_page_title(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static FunctionDescriptor gtk_assistant_get_page_title$descriptor() {
        return gtk_assistant_get_page_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_assistant_get_page_title(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MethodHandle gtk_assistant_get_page_title$handle() {
        return gtk_assistant_get_page_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_assistant_get_page_title(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MemorySegment gtk_assistant_get_page_title(MemorySegment assistant, MemorySegment page) {
        var mh$ = gtk_assistant_get_page_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_get_page_title", assistant, page);
            }
            return (MemorySegment)mh$.invokeExact(assistant, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_set_page_header_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_set_page_header_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_header_image(GtkAssistant *assistant, GtkWidget *page, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_assistant_set_page_header_image$descriptor() {
        return gtk_assistant_set_page_header_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_header_image(GtkAssistant *assistant, GtkWidget *page, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_assistant_set_page_header_image$handle() {
        return gtk_assistant_set_page_header_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_header_image(GtkAssistant *assistant, GtkWidget *page, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_assistant_set_page_header_image(MemorySegment assistant, MemorySegment page, MemorySegment pixbuf) {
        var mh$ = gtk_assistant_set_page_header_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_set_page_header_image", assistant, page, pixbuf);
            }
            mh$.invokeExact(assistant, page, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_get_page_header_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_get_page_header_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_assistant_get_page_header_image(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static FunctionDescriptor gtk_assistant_get_page_header_image$descriptor() {
        return gtk_assistant_get_page_header_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_assistant_get_page_header_image(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MethodHandle gtk_assistant_get_page_header_image$handle() {
        return gtk_assistant_get_page_header_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_assistant_get_page_header_image(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MemorySegment gtk_assistant_get_page_header_image(MemorySegment assistant, MemorySegment page) {
        var mh$ = gtk_assistant_get_page_header_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_get_page_header_image", assistant, page);
            }
            return (MemorySegment)mh$.invokeExact(assistant, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_set_page_side_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_set_page_side_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_side_image(GtkAssistant *assistant, GtkWidget *page, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_assistant_set_page_side_image$descriptor() {
        return gtk_assistant_set_page_side_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_side_image(GtkAssistant *assistant, GtkWidget *page, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_assistant_set_page_side_image$handle() {
        return gtk_assistant_set_page_side_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_side_image(GtkAssistant *assistant, GtkWidget *page, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_assistant_set_page_side_image(MemorySegment assistant, MemorySegment page, MemorySegment pixbuf) {
        var mh$ = gtk_assistant_set_page_side_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_set_page_side_image", assistant, page, pixbuf);
            }
            mh$.invokeExact(assistant, page, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_get_page_side_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_get_page_side_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_assistant_get_page_side_image(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static FunctionDescriptor gtk_assistant_get_page_side_image$descriptor() {
        return gtk_assistant_get_page_side_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_assistant_get_page_side_image(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MethodHandle gtk_assistant_get_page_side_image$handle() {
        return gtk_assistant_get_page_side_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_assistant_get_page_side_image(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MemorySegment gtk_assistant_get_page_side_image(MemorySegment assistant, MemorySegment page) {
        var mh$ = gtk_assistant_get_page_side_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_get_page_side_image", assistant, page);
            }
            return (MemorySegment)mh$.invokeExact(assistant, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_set_page_complete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_set_page_complete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_complete(GtkAssistant *assistant, GtkWidget *page, gboolean complete)
     * }
     */
    public static FunctionDescriptor gtk_assistant_set_page_complete$descriptor() {
        return gtk_assistant_set_page_complete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_complete(GtkAssistant *assistant, GtkWidget *page, gboolean complete)
     * }
     */
    public static MethodHandle gtk_assistant_set_page_complete$handle() {
        return gtk_assistant_set_page_complete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_complete(GtkAssistant *assistant, GtkWidget *page, gboolean complete)
     * }
     */
    public static void gtk_assistant_set_page_complete(MemorySegment assistant, MemorySegment page, int complete) {
        var mh$ = gtk_assistant_set_page_complete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_set_page_complete", assistant, page, complete);
            }
            mh$.invokeExact(assistant, page, complete);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_get_page_complete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_get_page_complete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_assistant_get_page_complete(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static FunctionDescriptor gtk_assistant_get_page_complete$descriptor() {
        return gtk_assistant_get_page_complete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_assistant_get_page_complete(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MethodHandle gtk_assistant_get_page_complete$handle() {
        return gtk_assistant_get_page_complete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_assistant_get_page_complete(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static int gtk_assistant_get_page_complete(MemorySegment assistant, MemorySegment page) {
        var mh$ = gtk_assistant_get_page_complete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_get_page_complete", assistant, page);
            }
            return (int)mh$.invokeExact(assistant, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_add_action_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_add_action_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_add_action_widget(GtkAssistant *assistant, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_assistant_add_action_widget$descriptor() {
        return gtk_assistant_add_action_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_add_action_widget(GtkAssistant *assistant, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_assistant_add_action_widget$handle() {
        return gtk_assistant_add_action_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_add_action_widget(GtkAssistant *assistant, GtkWidget *child)
     * }
     */
    public static void gtk_assistant_add_action_widget(MemorySegment assistant, MemorySegment child) {
        var mh$ = gtk_assistant_add_action_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_add_action_widget", assistant, child);
            }
            mh$.invokeExact(assistant, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_remove_action_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_remove_action_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_remove_action_widget(GtkAssistant *assistant, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_assistant_remove_action_widget$descriptor() {
        return gtk_assistant_remove_action_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_remove_action_widget(GtkAssistant *assistant, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_assistant_remove_action_widget$handle() {
        return gtk_assistant_remove_action_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_remove_action_widget(GtkAssistant *assistant, GtkWidget *child)
     * }
     */
    public static void gtk_assistant_remove_action_widget(MemorySegment assistant, MemorySegment child) {
        var mh$ = gtk_assistant_remove_action_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_remove_action_widget", assistant, child);
            }
            mh$.invokeExact(assistant, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_update_buttons_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_update_buttons_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_update_buttons_state(GtkAssistant *assistant)
     * }
     */
    public static FunctionDescriptor gtk_assistant_update_buttons_state$descriptor() {
        return gtk_assistant_update_buttons_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_update_buttons_state(GtkAssistant *assistant)
     * }
     */
    public static MethodHandle gtk_assistant_update_buttons_state$handle() {
        return gtk_assistant_update_buttons_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_update_buttons_state(GtkAssistant *assistant)
     * }
     */
    public static void gtk_assistant_update_buttons_state(MemorySegment assistant) {
        var mh$ = gtk_assistant_update_buttons_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_update_buttons_state", assistant);
            }
            mh$.invokeExact(assistant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_commit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_commit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_commit(GtkAssistant *assistant)
     * }
     */
    public static FunctionDescriptor gtk_assistant_commit$descriptor() {
        return gtk_assistant_commit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_commit(GtkAssistant *assistant)
     * }
     */
    public static MethodHandle gtk_assistant_commit$handle() {
        return gtk_assistant_commit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_commit(GtkAssistant *assistant)
     * }
     */
    public static void gtk_assistant_commit(MemorySegment assistant) {
        var mh$ = gtk_assistant_commit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_commit", assistant);
            }
            mh$.invokeExact(assistant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_set_page_has_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_set_page_has_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_has_padding(GtkAssistant *assistant, GtkWidget *page, gboolean has_padding)
     * }
     */
    public static FunctionDescriptor gtk_assistant_set_page_has_padding$descriptor() {
        return gtk_assistant_set_page_has_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_has_padding(GtkAssistant *assistant, GtkWidget *page, gboolean has_padding)
     * }
     */
    public static MethodHandle gtk_assistant_set_page_has_padding$handle() {
        return gtk_assistant_set_page_has_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_assistant_set_page_has_padding(GtkAssistant *assistant, GtkWidget *page, gboolean has_padding)
     * }
     */
    public static void gtk_assistant_set_page_has_padding(MemorySegment assistant, MemorySegment page, int has_padding) {
        var mh$ = gtk_assistant_set_page_has_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_set_page_has_padding", assistant, page, has_padding);
            }
            mh$.invokeExact(assistant, page, has_padding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_assistant_get_page_has_padding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_assistant_get_page_has_padding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_assistant_get_page_has_padding(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static FunctionDescriptor gtk_assistant_get_page_has_padding$descriptor() {
        return gtk_assistant_get_page_has_padding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_assistant_get_page_has_padding(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static MethodHandle gtk_assistant_get_page_has_padding$handle() {
        return gtk_assistant_get_page_has_padding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_assistant_get_page_has_padding(GtkAssistant *assistant, GtkWidget *page)
     * }
     */
    public static int gtk_assistant_get_page_has_padding(MemorySegment assistant, MemorySegment page) {
        var mh$ = gtk_assistant_get_page_has_padding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_assistant_get_page_has_padding", assistant, page);
            }
            return (int)mh$.invokeExact(assistant, page);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_BUTTONBOX_SPREAD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONBOX_SPREAD = 1
     * }
     */
    public static int GTK_BUTTONBOX_SPREAD() {
        return GTK_BUTTONBOX_SPREAD;
    }
    private static final int GTK_BUTTONBOX_EDGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONBOX_EDGE = 2
     * }
     */
    public static int GTK_BUTTONBOX_EDGE() {
        return GTK_BUTTONBOX_EDGE;
    }
    private static final int GTK_BUTTONBOX_START = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONBOX_START = 3
     * }
     */
    public static int GTK_BUTTONBOX_START() {
        return GTK_BUTTONBOX_START;
    }
    private static final int GTK_BUTTONBOX_END = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONBOX_END = 4
     * }
     */
    public static int GTK_BUTTONBOX_END() {
        return GTK_BUTTONBOX_END;
    }
    private static final int GTK_BUTTONBOX_CENTER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONBOX_CENTER = 5
     * }
     */
    public static int GTK_BUTTONBOX_CENTER() {
        return GTK_BUTTONBOX_CENTER;
    }
    private static final int GTK_BUTTONBOX_EXPAND = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUTTONBOX_EXPAND = 6
     * }
     */
    public static int GTK_BUTTONBOX_EXPAND() {
        return GTK_BUTTONBOX_EXPAND;
    }

    private static class gtk_button_box_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_box_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_button_box_get_type()
     * }
     */
    public static FunctionDescriptor gtk_button_box_get_type$descriptor() {
        return gtk_button_box_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_button_box_get_type()
     * }
     */
    public static MethodHandle gtk_button_box_get_type$handle() {
        return gtk_button_box_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_button_box_get_type()
     * }
     */
    public static long gtk_button_box_get_type() {
        var mh$ = gtk_button_box_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_box_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_box_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_box_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_box_new(GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_button_box_new$descriptor() {
        return gtk_button_box_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_box_new(GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_button_box_new$handle() {
        return gtk_button_box_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_box_new(GtkOrientation orientation)
     * }
     */
    public static MemorySegment gtk_button_box_new(int orientation) {
        var mh$ = gtk_button_box_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_box_new", orientation);
            }
            return (MemorySegment)mh$.invokeExact(orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_box_get_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_box_get_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkButtonBoxStyle gtk_button_box_get_layout(GtkButtonBox *widget)
     * }
     */
    public static FunctionDescriptor gtk_button_box_get_layout$descriptor() {
        return gtk_button_box_get_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkButtonBoxStyle gtk_button_box_get_layout(GtkButtonBox *widget)
     * }
     */
    public static MethodHandle gtk_button_box_get_layout$handle() {
        return gtk_button_box_get_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkButtonBoxStyle gtk_button_box_get_layout(GtkButtonBox *widget)
     * }
     */
    public static int gtk_button_box_get_layout(MemorySegment widget) {
        var mh$ = gtk_button_box_get_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_box_get_layout", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_box_set_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_box_set_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_box_set_layout(GtkButtonBox *widget, GtkButtonBoxStyle layout_style)
     * }
     */
    public static FunctionDescriptor gtk_button_box_set_layout$descriptor() {
        return gtk_button_box_set_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_box_set_layout(GtkButtonBox *widget, GtkButtonBoxStyle layout_style)
     * }
     */
    public static MethodHandle gtk_button_box_set_layout$handle() {
        return gtk_button_box_set_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_box_set_layout(GtkButtonBox *widget, GtkButtonBoxStyle layout_style)
     * }
     */
    public static void gtk_button_box_set_layout(MemorySegment widget, int layout_style) {
        var mh$ = gtk_button_box_set_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_box_set_layout", widget, layout_style);
            }
            mh$.invokeExact(widget, layout_style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_box_get_child_secondary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_box_get_child_secondary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_box_get_child_secondary(GtkButtonBox *widget, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_button_box_get_child_secondary$descriptor() {
        return gtk_button_box_get_child_secondary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_box_get_child_secondary(GtkButtonBox *widget, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_button_box_get_child_secondary$handle() {
        return gtk_button_box_get_child_secondary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_button_box_get_child_secondary(GtkButtonBox *widget, GtkWidget *child)
     * }
     */
    public static int gtk_button_box_get_child_secondary(MemorySegment widget, MemorySegment child) {
        var mh$ = gtk_button_box_get_child_secondary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_box_get_child_secondary", widget, child);
            }
            return (int)mh$.invokeExact(widget, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_box_set_child_secondary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_box_set_child_secondary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_box_set_child_secondary(GtkButtonBox *widget, GtkWidget *child, gboolean is_secondary)
     * }
     */
    public static FunctionDescriptor gtk_button_box_set_child_secondary$descriptor() {
        return gtk_button_box_set_child_secondary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_box_set_child_secondary(GtkButtonBox *widget, GtkWidget *child, gboolean is_secondary)
     * }
     */
    public static MethodHandle gtk_button_box_set_child_secondary$handle() {
        return gtk_button_box_set_child_secondary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_box_set_child_secondary(GtkButtonBox *widget, GtkWidget *child, gboolean is_secondary)
     * }
     */
    public static void gtk_button_box_set_child_secondary(MemorySegment widget, MemorySegment child, int is_secondary) {
        var mh$ = gtk_button_box_set_child_secondary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_box_set_child_secondary", widget, child, is_secondary);
            }
            mh$.invokeExact(widget, child, is_secondary);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_box_get_child_non_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_box_get_child_non_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_box_get_child_non_homogeneous(GtkButtonBox *widget, GtkWidget *child)
     * }
     */
    public static FunctionDescriptor gtk_button_box_get_child_non_homogeneous$descriptor() {
        return gtk_button_box_get_child_non_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_box_get_child_non_homogeneous(GtkButtonBox *widget, GtkWidget *child)
     * }
     */
    public static MethodHandle gtk_button_box_get_child_non_homogeneous$handle() {
        return gtk_button_box_get_child_non_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_button_box_get_child_non_homogeneous(GtkButtonBox *widget, GtkWidget *child)
     * }
     */
    public static int gtk_button_box_get_child_non_homogeneous(MemorySegment widget, MemorySegment child) {
        var mh$ = gtk_button_box_get_child_non_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_box_get_child_non_homogeneous", widget, child);
            }
            return (int)mh$.invokeExact(widget, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_box_set_child_non_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_box_set_child_non_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_box_set_child_non_homogeneous(GtkButtonBox *widget, GtkWidget *child, gboolean non_homogeneous)
     * }
     */
    public static FunctionDescriptor gtk_button_box_set_child_non_homogeneous$descriptor() {
        return gtk_button_box_set_child_non_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_box_set_child_non_homogeneous(GtkButtonBox *widget, GtkWidget *child, gboolean non_homogeneous)
     * }
     */
    public static MethodHandle gtk_button_box_set_child_non_homogeneous$handle() {
        return gtk_button_box_set_child_non_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_box_set_child_non_homogeneous(GtkButtonBox *widget, GtkWidget *child, gboolean non_homogeneous)
     * }
     */
    public static void gtk_button_box_set_child_non_homogeneous(MemorySegment widget, MemorySegment child, int non_homogeneous) {
        var mh$ = gtk_button_box_set_child_non_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_box_set_child_non_homogeneous", widget, child, non_homogeneous);
            }
            mh$.invokeExact(widget, child, non_homogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_binding_set_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_binding_set_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBindingSet *gtk_binding_set_new(const gchar *set_name)
     * }
     */
    public static FunctionDescriptor gtk_binding_set_new$descriptor() {
        return gtk_binding_set_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBindingSet *gtk_binding_set_new(const gchar *set_name)
     * }
     */
    public static MethodHandle gtk_binding_set_new$handle() {
        return gtk_binding_set_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBindingSet *gtk_binding_set_new(const gchar *set_name)
     * }
     */
    public static MemorySegment gtk_binding_set_new(MemorySegment set_name) {
        var mh$ = gtk_binding_set_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_binding_set_new", set_name);
            }
            return (MemorySegment)mh$.invokeExact(set_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_binding_set_by_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_binding_set_by_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBindingSet *gtk_binding_set_by_class(gpointer object_class)
     * }
     */
    public static FunctionDescriptor gtk_binding_set_by_class$descriptor() {
        return gtk_binding_set_by_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBindingSet *gtk_binding_set_by_class(gpointer object_class)
     * }
     */
    public static MethodHandle gtk_binding_set_by_class$handle() {
        return gtk_binding_set_by_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBindingSet *gtk_binding_set_by_class(gpointer object_class)
     * }
     */
    public static MemorySegment gtk_binding_set_by_class(MemorySegment object_class) {
        var mh$ = gtk_binding_set_by_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_binding_set_by_class", object_class);
            }
            return (MemorySegment)mh$.invokeExact(object_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_binding_set_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_binding_set_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBindingSet *gtk_binding_set_find(const gchar *set_name)
     * }
     */
    public static FunctionDescriptor gtk_binding_set_find$descriptor() {
        return gtk_binding_set_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBindingSet *gtk_binding_set_find(const gchar *set_name)
     * }
     */
    public static MethodHandle gtk_binding_set_find$handle() {
        return gtk_binding_set_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBindingSet *gtk_binding_set_find(const gchar *set_name)
     * }
     */
    public static MemorySegment gtk_binding_set_find(MemorySegment set_name) {
        var mh$ = gtk_binding_set_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_binding_set_find", set_name);
            }
            return (MemorySegment)mh$.invokeExact(set_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_bindings_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_bindings_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_bindings_activate(GObject *object, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static FunctionDescriptor gtk_bindings_activate$descriptor() {
        return gtk_bindings_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_bindings_activate(GObject *object, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static MethodHandle gtk_bindings_activate$handle() {
        return gtk_bindings_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_bindings_activate(GObject *object, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static int gtk_bindings_activate(MemorySegment object, int keyval, int modifiers) {
        var mh$ = gtk_bindings_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_bindings_activate", object, keyval, modifiers);
            }
            return (int)mh$.invokeExact(object, keyval, modifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_bindings_activate_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_bindings_activate_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_bindings_activate_event(GObject *object, GdkEventKey *event)
     * }
     */
    public static FunctionDescriptor gtk_bindings_activate_event$descriptor() {
        return gtk_bindings_activate_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_bindings_activate_event(GObject *object, GdkEventKey *event)
     * }
     */
    public static MethodHandle gtk_bindings_activate_event$handle() {
        return gtk_bindings_activate_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_bindings_activate_event(GObject *object, GdkEventKey *event)
     * }
     */
    public static int gtk_bindings_activate_event(MemorySegment object, MemorySegment event) {
        var mh$ = gtk_bindings_activate_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_bindings_activate_event", object, event);
            }
            return (int)mh$.invokeExact(object, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_binding_set_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_binding_set_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_binding_set_activate(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, GObject *object)
     * }
     */
    public static FunctionDescriptor gtk_binding_set_activate$descriptor() {
        return gtk_binding_set_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_binding_set_activate(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, GObject *object)
     * }
     */
    public static MethodHandle gtk_binding_set_activate$handle() {
        return gtk_binding_set_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_binding_set_activate(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, GObject *object)
     * }
     */
    public static int gtk_binding_set_activate(MemorySegment binding_set, int keyval, int modifiers, MemorySegment object) {
        var mh$ = gtk_binding_set_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_binding_set_activate", binding_set, keyval, modifiers, object);
            }
            return (int)mh$.invokeExact(binding_set, keyval, modifiers, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_binding_entry_skip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_binding_entry_skip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_binding_entry_skip(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static FunctionDescriptor gtk_binding_entry_skip$descriptor() {
        return gtk_binding_entry_skip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_binding_entry_skip(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static MethodHandle gtk_binding_entry_skip$handle() {
        return gtk_binding_entry_skip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_binding_entry_skip(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static void gtk_binding_entry_skip(MemorySegment binding_set, int keyval, int modifiers) {
        var mh$ = gtk_binding_entry_skip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_binding_entry_skip", binding_set, keyval, modifiers);
            }
            mh$.invokeExact(binding_set, keyval, modifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_binding_entry_add_signal(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, const gchar *signal_name, guint n_args, ...)
     * }
     */
    public static class gtk_binding_entry_add_signal {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_binding_entry_add_signal");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_binding_entry_add_signal(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_binding_entry_add_signal(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, const gchar *signal_name, guint n_args, ...)
         * }
         */
        public static gtk_binding_entry_add_signal makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_binding_entry_add_signal(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment binding_set, int keyval, int modifiers, MemorySegment signal_name, int n_args, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_binding_entry_add_signal", binding_set, keyval, modifiers, signal_name, n_args, x5);
                }
                spreader.invokeExact(binding_set, keyval, modifiers, signal_name, n_args, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_binding_entry_add_signall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_binding_entry_add_signall"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_binding_entry_add_signall(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, const gchar *signal_name, GSList *binding_args)
     * }
     */
    public static FunctionDescriptor gtk_binding_entry_add_signall$descriptor() {
        return gtk_binding_entry_add_signall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_binding_entry_add_signall(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, const gchar *signal_name, GSList *binding_args)
     * }
     */
    public static MethodHandle gtk_binding_entry_add_signall$handle() {
        return gtk_binding_entry_add_signall.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_binding_entry_add_signall(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, const gchar *signal_name, GSList *binding_args)
     * }
     */
    public static void gtk_binding_entry_add_signall(MemorySegment binding_set, int keyval, int modifiers, MemorySegment signal_name, MemorySegment binding_args) {
        var mh$ = gtk_binding_entry_add_signall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_binding_entry_add_signall", binding_set, keyval, modifiers, signal_name, binding_args);
            }
            mh$.invokeExact(binding_set, keyval, modifiers, signal_name, binding_args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_binding_entry_add_signal_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_binding_entry_add_signal_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTokenType gtk_binding_entry_add_signal_from_string(GtkBindingSet *binding_set, const gchar *signal_desc)
     * }
     */
    public static FunctionDescriptor gtk_binding_entry_add_signal_from_string$descriptor() {
        return gtk_binding_entry_add_signal_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTokenType gtk_binding_entry_add_signal_from_string(GtkBindingSet *binding_set, const gchar *signal_desc)
     * }
     */
    public static MethodHandle gtk_binding_entry_add_signal_from_string$handle() {
        return gtk_binding_entry_add_signal_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTokenType gtk_binding_entry_add_signal_from_string(GtkBindingSet *binding_set, const gchar *signal_desc)
     * }
     */
    public static int gtk_binding_entry_add_signal_from_string(MemorySegment binding_set, MemorySegment signal_desc) {
        var mh$ = gtk_binding_entry_add_signal_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_binding_entry_add_signal_from_string", binding_set, signal_desc);
            }
            return (int)mh$.invokeExact(binding_set, signal_desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_binding_entry_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_binding_entry_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_binding_entry_remove(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static FunctionDescriptor gtk_binding_entry_remove$descriptor() {
        return gtk_binding_entry_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_binding_entry_remove(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static MethodHandle gtk_binding_entry_remove$handle() {
        return gtk_binding_entry_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_binding_entry_remove(GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static void gtk_binding_entry_remove(MemorySegment binding_set, int keyval, int modifiers) {
        var mh$ = gtk_binding_entry_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_binding_entry_remove", binding_set, keyval, modifiers);
            }
            mh$.invokeExact(binding_set, keyval, modifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION = 0
     * }
     */
    public static int GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION() {
        return GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION;
    }
    private static final int GTK_BUILDER_ERROR_UNHANDLED_TAG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_UNHANDLED_TAG = 1
     * }
     */
    public static int GTK_BUILDER_ERROR_UNHANDLED_TAG() {
        return GTK_BUILDER_ERROR_UNHANDLED_TAG;
    }
    private static final int GTK_BUILDER_ERROR_MISSING_ATTRIBUTE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_MISSING_ATTRIBUTE = 2
     * }
     */
    public static int GTK_BUILDER_ERROR_MISSING_ATTRIBUTE() {
        return GTK_BUILDER_ERROR_MISSING_ATTRIBUTE;
    }
    private static final int GTK_BUILDER_ERROR_INVALID_ATTRIBUTE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_INVALID_ATTRIBUTE = 3
     * }
     */
    public static int GTK_BUILDER_ERROR_INVALID_ATTRIBUTE() {
        return GTK_BUILDER_ERROR_INVALID_ATTRIBUTE;
    }
    private static final int GTK_BUILDER_ERROR_INVALID_TAG = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_INVALID_TAG = 4
     * }
     */
    public static int GTK_BUILDER_ERROR_INVALID_TAG() {
        return GTK_BUILDER_ERROR_INVALID_TAG;
    }
    private static final int GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE = 5
     * }
     */
    public static int GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE() {
        return GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE;
    }
    private static final int GTK_BUILDER_ERROR_INVALID_VALUE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_INVALID_VALUE = 6
     * }
     */
    public static int GTK_BUILDER_ERROR_INVALID_VALUE() {
        return GTK_BUILDER_ERROR_INVALID_VALUE;
    }
    private static final int GTK_BUILDER_ERROR_VERSION_MISMATCH = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_VERSION_MISMATCH = 7
     * }
     */
    public static int GTK_BUILDER_ERROR_VERSION_MISMATCH() {
        return GTK_BUILDER_ERROR_VERSION_MISMATCH;
    }
    private static final int GTK_BUILDER_ERROR_DUPLICATE_ID = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_DUPLICATE_ID = 8
     * }
     */
    public static int GTK_BUILDER_ERROR_DUPLICATE_ID() {
        return GTK_BUILDER_ERROR_DUPLICATE_ID;
    }
    private static final int GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED = 9
     * }
     */
    public static int GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED() {
        return GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED;
    }
    private static final int GTK_BUILDER_ERROR_TEMPLATE_MISMATCH = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_TEMPLATE_MISMATCH = 10
     * }
     */
    public static int GTK_BUILDER_ERROR_TEMPLATE_MISMATCH() {
        return GTK_BUILDER_ERROR_TEMPLATE_MISMATCH;
    }
    private static final int GTK_BUILDER_ERROR_INVALID_PROPERTY = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_INVALID_PROPERTY = 11
     * }
     */
    public static int GTK_BUILDER_ERROR_INVALID_PROPERTY() {
        return GTK_BUILDER_ERROR_INVALID_PROPERTY;
    }
    private static final int GTK_BUILDER_ERROR_INVALID_SIGNAL = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_INVALID_SIGNAL = 12
     * }
     */
    public static int GTK_BUILDER_ERROR_INVALID_SIGNAL() {
        return GTK_BUILDER_ERROR_INVALID_SIGNAL;
    }
    private static final int GTK_BUILDER_ERROR_INVALID_ID = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_BUILDER_ERROR_INVALID_ID = 13
     * }
     */
    public static int GTK_BUILDER_ERROR_INVALID_ID() {
        return GTK_BUILDER_ERROR_INVALID_ID;
    }

    private static class gtk_builder_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark gtk_builder_error_quark()
     * }
     */
    public static FunctionDescriptor gtk_builder_error_quark$descriptor() {
        return gtk_builder_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark gtk_builder_error_quark()
     * }
     */
    public static MethodHandle gtk_builder_error_quark$handle() {
        return gtk_builder_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark gtk_builder_error_quark()
     * }
     */
    public static int gtk_builder_error_quark() {
        var mh$ = gtk_builder_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_builder_get_type()
     * }
     */
    public static FunctionDescriptor gtk_builder_get_type$descriptor() {
        return gtk_builder_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_builder_get_type()
     * }
     */
    public static MethodHandle gtk_builder_get_type$handle() {
        return gtk_builder_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_builder_get_type()
     * }
     */
    public static long gtk_builder_get_type() {
        var mh$ = gtk_builder_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new()
     * }
     */
    public static FunctionDescriptor gtk_builder_new$descriptor() {
        return gtk_builder_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new()
     * }
     */
    public static MethodHandle gtk_builder_new$handle() {
        return gtk_builder_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new()
     * }
     */
    public static MemorySegment gtk_builder_new() {
        var mh$ = gtk_builder_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_add_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_add_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_from_file(GtkBuilder *builder, const gchar *filename, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_builder_add_from_file$descriptor() {
        return gtk_builder_add_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_from_file(GtkBuilder *builder, const gchar *filename, GError **error)
     * }
     */
    public static MethodHandle gtk_builder_add_from_file$handle() {
        return gtk_builder_add_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_builder_add_from_file(GtkBuilder *builder, const gchar *filename, GError **error)
     * }
     */
    public static int gtk_builder_add_from_file(MemorySegment builder, MemorySegment filename, MemorySegment error) {
        var mh$ = gtk_builder_add_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_add_from_file", builder, filename, error);
            }
            return (int)mh$.invokeExact(builder, filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_add_from_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_add_from_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_from_resource(GtkBuilder *builder, const gchar *resource_path, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_builder_add_from_resource$descriptor() {
        return gtk_builder_add_from_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_from_resource(GtkBuilder *builder, const gchar *resource_path, GError **error)
     * }
     */
    public static MethodHandle gtk_builder_add_from_resource$handle() {
        return gtk_builder_add_from_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_builder_add_from_resource(GtkBuilder *builder, const gchar *resource_path, GError **error)
     * }
     */
    public static int gtk_builder_add_from_resource(MemorySegment builder, MemorySegment resource_path, MemorySegment error) {
        var mh$ = gtk_builder_add_from_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_add_from_resource", builder, resource_path, error);
            }
            return (int)mh$.invokeExact(builder, resource_path, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_add_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_add_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_from_string(GtkBuilder *builder, const gchar *buffer, gsize length, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_builder_add_from_string$descriptor() {
        return gtk_builder_add_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_from_string(GtkBuilder *builder, const gchar *buffer, gsize length, GError **error)
     * }
     */
    public static MethodHandle gtk_builder_add_from_string$handle() {
        return gtk_builder_add_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_builder_add_from_string(GtkBuilder *builder, const gchar *buffer, gsize length, GError **error)
     * }
     */
    public static int gtk_builder_add_from_string(MemorySegment builder, MemorySegment buffer, long length, MemorySegment error) {
        var mh$ = gtk_builder_add_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_add_from_string", builder, buffer, length, error);
            }
            return (int)mh$.invokeExact(builder, buffer, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_add_objects_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_add_objects_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_objects_from_file(GtkBuilder *builder, const gchar *filename, gchar **object_ids, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_builder_add_objects_from_file$descriptor() {
        return gtk_builder_add_objects_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_objects_from_file(GtkBuilder *builder, const gchar *filename, gchar **object_ids, GError **error)
     * }
     */
    public static MethodHandle gtk_builder_add_objects_from_file$handle() {
        return gtk_builder_add_objects_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_builder_add_objects_from_file(GtkBuilder *builder, const gchar *filename, gchar **object_ids, GError **error)
     * }
     */
    public static int gtk_builder_add_objects_from_file(MemorySegment builder, MemorySegment filename, MemorySegment object_ids, MemorySegment error) {
        var mh$ = gtk_builder_add_objects_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_add_objects_from_file", builder, filename, object_ids, error);
            }
            return (int)mh$.invokeExact(builder, filename, object_ids, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_add_objects_from_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_add_objects_from_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_objects_from_resource(GtkBuilder *builder, const gchar *resource_path, gchar **object_ids, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_builder_add_objects_from_resource$descriptor() {
        return gtk_builder_add_objects_from_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_objects_from_resource(GtkBuilder *builder, const gchar *resource_path, gchar **object_ids, GError **error)
     * }
     */
    public static MethodHandle gtk_builder_add_objects_from_resource$handle() {
        return gtk_builder_add_objects_from_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_builder_add_objects_from_resource(GtkBuilder *builder, const gchar *resource_path, gchar **object_ids, GError **error)
     * }
     */
    public static int gtk_builder_add_objects_from_resource(MemorySegment builder, MemorySegment resource_path, MemorySegment object_ids, MemorySegment error) {
        var mh$ = gtk_builder_add_objects_from_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_add_objects_from_resource", builder, resource_path, object_ids, error);
            }
            return (int)mh$.invokeExact(builder, resource_path, object_ids, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_add_objects_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_add_objects_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_objects_from_string(GtkBuilder *builder, const gchar *buffer, gsize length, gchar **object_ids, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_builder_add_objects_from_string$descriptor() {
        return gtk_builder_add_objects_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_builder_add_objects_from_string(GtkBuilder *builder, const gchar *buffer, gsize length, gchar **object_ids, GError **error)
     * }
     */
    public static MethodHandle gtk_builder_add_objects_from_string$handle() {
        return gtk_builder_add_objects_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_builder_add_objects_from_string(GtkBuilder *builder, const gchar *buffer, gsize length, gchar **object_ids, GError **error)
     * }
     */
    public static int gtk_builder_add_objects_from_string(MemorySegment builder, MemorySegment buffer, long length, MemorySegment object_ids, MemorySegment error) {
        var mh$ = gtk_builder_add_objects_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_add_objects_from_string", builder, buffer, length, object_ids, error);
            }
            return (int)mh$.invokeExact(builder, buffer, length, object_ids, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_get_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_get_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *gtk_builder_get_object(GtkBuilder *builder, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_builder_get_object$descriptor() {
        return gtk_builder_get_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *gtk_builder_get_object(GtkBuilder *builder, const gchar *name)
     * }
     */
    public static MethodHandle gtk_builder_get_object$handle() {
        return gtk_builder_get_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *gtk_builder_get_object(GtkBuilder *builder, const gchar *name)
     * }
     */
    public static MemorySegment gtk_builder_get_object(MemorySegment builder, MemorySegment name) {
        var mh$ = gtk_builder_get_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_get_object", builder, name);
            }
            return (MemorySegment)mh$.invokeExact(builder, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_get_objects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_get_objects"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_builder_get_objects(GtkBuilder *builder)
     * }
     */
    public static FunctionDescriptor gtk_builder_get_objects$descriptor() {
        return gtk_builder_get_objects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_builder_get_objects(GtkBuilder *builder)
     * }
     */
    public static MethodHandle gtk_builder_get_objects$handle() {
        return gtk_builder_get_objects.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_builder_get_objects(GtkBuilder *builder)
     * }
     */
    public static MemorySegment gtk_builder_get_objects(MemorySegment builder) {
        var mh$ = gtk_builder_get_objects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_get_objects", builder);
            }
            return (MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_expose_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_expose_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_builder_expose_object(GtkBuilder *builder, const gchar *name, GObject *object)
     * }
     */
    public static FunctionDescriptor gtk_builder_expose_object$descriptor() {
        return gtk_builder_expose_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_builder_expose_object(GtkBuilder *builder, const gchar *name, GObject *object)
     * }
     */
    public static MethodHandle gtk_builder_expose_object$handle() {
        return gtk_builder_expose_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_builder_expose_object(GtkBuilder *builder, const gchar *name, GObject *object)
     * }
     */
    public static void gtk_builder_expose_object(MemorySegment builder, MemorySegment name, MemorySegment object) {
        var mh$ = gtk_builder_expose_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_expose_object", builder, name, object);
            }
            mh$.invokeExact(builder, name, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_connect_signals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_connect_signals"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_builder_connect_signals(GtkBuilder *builder, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_builder_connect_signals$descriptor() {
        return gtk_builder_connect_signals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_builder_connect_signals(GtkBuilder *builder, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_builder_connect_signals$handle() {
        return gtk_builder_connect_signals.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_builder_connect_signals(GtkBuilder *builder, gpointer user_data)
     * }
     */
    public static void gtk_builder_connect_signals(MemorySegment builder, MemorySegment user_data) {
        var mh$ = gtk_builder_connect_signals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_connect_signals", builder, user_data);
            }
            mh$.invokeExact(builder, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_connect_signals_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_connect_signals_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_builder_connect_signals_full(GtkBuilder *builder, GtkBuilderConnectFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_builder_connect_signals_full$descriptor() {
        return gtk_builder_connect_signals_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_builder_connect_signals_full(GtkBuilder *builder, GtkBuilderConnectFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_builder_connect_signals_full$handle() {
        return gtk_builder_connect_signals_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_builder_connect_signals_full(GtkBuilder *builder, GtkBuilderConnectFunc func, gpointer user_data)
     * }
     */
    public static void gtk_builder_connect_signals_full(MemorySegment builder, MemorySegment func, MemorySegment user_data) {
        var mh$ = gtk_builder_connect_signals_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_connect_signals_full", builder, func, user_data);
            }
            mh$.invokeExact(builder, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_set_translation_domain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_set_translation_domain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_builder_set_translation_domain(GtkBuilder *builder, const gchar *domain)
     * }
     */
    public static FunctionDescriptor gtk_builder_set_translation_domain$descriptor() {
        return gtk_builder_set_translation_domain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_builder_set_translation_domain(GtkBuilder *builder, const gchar *domain)
     * }
     */
    public static MethodHandle gtk_builder_set_translation_domain$handle() {
        return gtk_builder_set_translation_domain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_builder_set_translation_domain(GtkBuilder *builder, const gchar *domain)
     * }
     */
    public static void gtk_builder_set_translation_domain(MemorySegment builder, MemorySegment domain) {
        var mh$ = gtk_builder_set_translation_domain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_set_translation_domain", builder, domain);
            }
            mh$.invokeExact(builder, domain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_get_translation_domain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_get_translation_domain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_builder_get_translation_domain(GtkBuilder *builder)
     * }
     */
    public static FunctionDescriptor gtk_builder_get_translation_domain$descriptor() {
        return gtk_builder_get_translation_domain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_builder_get_translation_domain(GtkBuilder *builder)
     * }
     */
    public static MethodHandle gtk_builder_get_translation_domain$handle() {
        return gtk_builder_get_translation_domain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_builder_get_translation_domain(GtkBuilder *builder)
     * }
     */
    public static MemorySegment gtk_builder_get_translation_domain(MemorySegment builder) {
        var mh$ = gtk_builder_get_translation_domain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_get_translation_domain", builder);
            }
            return (MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_get_type_from_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_get_type_from_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_builder_get_type_from_name(GtkBuilder *builder, const char *type_name)
     * }
     */
    public static FunctionDescriptor gtk_builder_get_type_from_name$descriptor() {
        return gtk_builder_get_type_from_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_builder_get_type_from_name(GtkBuilder *builder, const char *type_name)
     * }
     */
    public static MethodHandle gtk_builder_get_type_from_name$handle() {
        return gtk_builder_get_type_from_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_builder_get_type_from_name(GtkBuilder *builder, const char *type_name)
     * }
     */
    public static long gtk_builder_get_type_from_name(MemorySegment builder, MemorySegment type_name) {
        var mh$ = gtk_builder_get_type_from_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_get_type_from_name", builder, type_name);
            }
            return (long)mh$.invokeExact(builder, type_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_value_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_value_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_builder_value_from_string(GtkBuilder *builder, GParamSpec *pspec, const gchar *string, GValue *value, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_builder_value_from_string$descriptor() {
        return gtk_builder_value_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_builder_value_from_string(GtkBuilder *builder, GParamSpec *pspec, const gchar *string, GValue *value, GError **error)
     * }
     */
    public static MethodHandle gtk_builder_value_from_string$handle() {
        return gtk_builder_value_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_builder_value_from_string(GtkBuilder *builder, GParamSpec *pspec, const gchar *string, GValue *value, GError **error)
     * }
     */
    public static int gtk_builder_value_from_string(MemorySegment builder, MemorySegment pspec, MemorySegment string, MemorySegment value, MemorySegment error) {
        var mh$ = gtk_builder_value_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_value_from_string", builder, pspec, string, value, error);
            }
            return (int)mh$.invokeExact(builder, pspec, string, value, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_value_from_string_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_value_from_string_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_builder_value_from_string_type(GtkBuilder *builder, GType type, const gchar *string, GValue *value, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_builder_value_from_string_type$descriptor() {
        return gtk_builder_value_from_string_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_builder_value_from_string_type(GtkBuilder *builder, GType type, const gchar *string, GValue *value, GError **error)
     * }
     */
    public static MethodHandle gtk_builder_value_from_string_type$handle() {
        return gtk_builder_value_from_string_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_builder_value_from_string_type(GtkBuilder *builder, GType type, const gchar *string, GValue *value, GError **error)
     * }
     */
    public static int gtk_builder_value_from_string_type(MemorySegment builder, long type, MemorySegment string, MemorySegment value, MemorySegment error) {
        var mh$ = gtk_builder_value_from_string_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_value_from_string_type", builder, type, string, value, error);
            }
            return (int)mh$.invokeExact(builder, type, string, value, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_new_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_new_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new_from_file(const gchar *filename)
     * }
     */
    public static FunctionDescriptor gtk_builder_new_from_file$descriptor() {
        return gtk_builder_new_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new_from_file(const gchar *filename)
     * }
     */
    public static MethodHandle gtk_builder_new_from_file$handle() {
        return gtk_builder_new_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new_from_file(const gchar *filename)
     * }
     */
    public static MemorySegment gtk_builder_new_from_file(MemorySegment filename) {
        var mh$ = gtk_builder_new_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_new_from_file", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_new_from_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_new_from_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new_from_resource(const gchar *resource_path)
     * }
     */
    public static FunctionDescriptor gtk_builder_new_from_resource$descriptor() {
        return gtk_builder_new_from_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new_from_resource(const gchar *resource_path)
     * }
     */
    public static MethodHandle gtk_builder_new_from_resource$handle() {
        return gtk_builder_new_from_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new_from_resource(const gchar *resource_path)
     * }
     */
    public static MemorySegment gtk_builder_new_from_resource(MemorySegment resource_path) {
        var mh$ = gtk_builder_new_from_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_new_from_resource", resource_path);
            }
            return (MemorySegment)mh$.invokeExact(resource_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_new_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_new_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new_from_string(const gchar *string, gssize length)
     * }
     */
    public static FunctionDescriptor gtk_builder_new_from_string$descriptor() {
        return gtk_builder_new_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new_from_string(const gchar *string, gssize length)
     * }
     */
    public static MethodHandle gtk_builder_new_from_string$handle() {
        return gtk_builder_new_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBuilder *gtk_builder_new_from_string(const gchar *string, gssize length)
     * }
     */
    public static MemorySegment gtk_builder_new_from_string(MemorySegment string, long length) {
        var mh$ = gtk_builder_new_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_new_from_string", string, length);
            }
            return (MemorySegment)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_add_callback_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_add_callback_symbol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_builder_add_callback_symbol(GtkBuilder *builder, const gchar *callback_name, GCallback callback_symbol)
     * }
     */
    public static FunctionDescriptor gtk_builder_add_callback_symbol$descriptor() {
        return gtk_builder_add_callback_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_builder_add_callback_symbol(GtkBuilder *builder, const gchar *callback_name, GCallback callback_symbol)
     * }
     */
    public static MethodHandle gtk_builder_add_callback_symbol$handle() {
        return gtk_builder_add_callback_symbol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_builder_add_callback_symbol(GtkBuilder *builder, const gchar *callback_name, GCallback callback_symbol)
     * }
     */
    public static void gtk_builder_add_callback_symbol(MemorySegment builder, MemorySegment callback_name, MemorySegment callback_symbol) {
        var mh$ = gtk_builder_add_callback_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_add_callback_symbol", builder, callback_name, callback_symbol);
            }
            mh$.invokeExact(builder, callback_name, callback_symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_builder_add_callback_symbols(GtkBuilder *builder, const gchar *first_callback_name, GCallback first_callback_symbol, ...)
     * }
     */
    public static class gtk_builder_add_callback_symbols {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_builder_add_callback_symbols");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_builder_add_callback_symbols(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_builder_add_callback_symbols(GtkBuilder *builder, const gchar *first_callback_name, GCallback first_callback_symbol, ...)
         * }
         */
        public static gtk_builder_add_callback_symbols makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_builder_add_callback_symbols(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment builder, MemorySegment first_callback_name, MemorySegment first_callback_symbol, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_builder_add_callback_symbols", builder, first_callback_name, first_callback_symbol, x3);
                }
                spreader.invokeExact(builder, first_callback_name, first_callback_symbol, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_builder_lookup_callback_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_lookup_callback_symbol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCallback gtk_builder_lookup_callback_symbol(GtkBuilder *builder, const gchar *callback_name)
     * }
     */
    public static FunctionDescriptor gtk_builder_lookup_callback_symbol$descriptor() {
        return gtk_builder_lookup_callback_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCallback gtk_builder_lookup_callback_symbol(GtkBuilder *builder, const gchar *callback_name)
     * }
     */
    public static MethodHandle gtk_builder_lookup_callback_symbol$handle() {
        return gtk_builder_lookup_callback_symbol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCallback gtk_builder_lookup_callback_symbol(GtkBuilder *builder, const gchar *callback_name)
     * }
     */
    public static MemorySegment gtk_builder_lookup_callback_symbol(MemorySegment builder, MemorySegment callback_name) {
        var mh$ = gtk_builder_lookup_callback_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_lookup_callback_symbol", builder, callback_name);
            }
            return (MemorySegment)mh$.invokeExact(builder, callback_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_set_application {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_set_application"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_builder_set_application(GtkBuilder *builder, GtkApplication *application)
     * }
     */
    public static FunctionDescriptor gtk_builder_set_application$descriptor() {
        return gtk_builder_set_application.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_builder_set_application(GtkBuilder *builder, GtkApplication *application)
     * }
     */
    public static MethodHandle gtk_builder_set_application$handle() {
        return gtk_builder_set_application.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_builder_set_application(GtkBuilder *builder, GtkApplication *application)
     * }
     */
    public static void gtk_builder_set_application(MemorySegment builder, MemorySegment application) {
        var mh$ = gtk_builder_set_application.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_set_application", builder, application);
            }
            mh$.invokeExact(builder, application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_get_application {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_get_application"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkApplication *gtk_builder_get_application(GtkBuilder *builder)
     * }
     */
    public static FunctionDescriptor gtk_builder_get_application$descriptor() {
        return gtk_builder_get_application.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkApplication *gtk_builder_get_application(GtkBuilder *builder)
     * }
     */
    public static MethodHandle gtk_builder_get_application$handle() {
        return gtk_builder_get_application.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkApplication *gtk_builder_get_application(GtkBuilder *builder)
     * }
     */
    public static MemorySegment gtk_builder_get_application(MemorySegment builder) {
        var mh$ = gtk_builder_get_application.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_get_application", builder);
            }
            return (MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_builder_extend_with_template {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_builder_extend_with_template"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_builder_extend_with_template(GtkBuilder *builder, GtkWidget *widget, GType template_type, const gchar *buffer, gsize length, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_builder_extend_with_template$descriptor() {
        return gtk_builder_extend_with_template.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_builder_extend_with_template(GtkBuilder *builder, GtkWidget *widget, GType template_type, const gchar *buffer, gsize length, GError **error)
     * }
     */
    public static MethodHandle gtk_builder_extend_with_template$handle() {
        return gtk_builder_extend_with_template.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_builder_extend_with_template(GtkBuilder *builder, GtkWidget *widget, GType template_type, const gchar *buffer, gsize length, GError **error)
     * }
     */
    public static int gtk_builder_extend_with_template(MemorySegment builder, MemorySegment widget, long template_type, MemorySegment buffer, long length, MemorySegment error) {
        var mh$ = gtk_builder_extend_with_template.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_builder_extend_with_template", builder, widget, template_type, buffer, length, error);
            }
            return (int)mh$.invokeExact(builder, widget, template_type, buffer, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_buildable_get_type()
     * }
     */
    public static FunctionDescriptor gtk_buildable_get_type$descriptor() {
        return gtk_buildable_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_buildable_get_type()
     * }
     */
    public static MethodHandle gtk_buildable_get_type$handle() {
        return gtk_buildable_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_buildable_get_type()
     * }
     */
    public static long gtk_buildable_get_type() {
        var mh$ = gtk_buildable_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_buildable_set_name(GtkBuildable *buildable, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_buildable_set_name$descriptor() {
        return gtk_buildable_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_buildable_set_name(GtkBuildable *buildable, const gchar *name)
     * }
     */
    public static MethodHandle gtk_buildable_set_name$handle() {
        return gtk_buildable_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_buildable_set_name(GtkBuildable *buildable, const gchar *name)
     * }
     */
    public static void gtk_buildable_set_name(MemorySegment buildable, MemorySegment name) {
        var mh$ = gtk_buildable_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_set_name", buildable, name);
            }
            mh$.invokeExact(buildable, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_buildable_get_name(GtkBuildable *buildable)
     * }
     */
    public static FunctionDescriptor gtk_buildable_get_name$descriptor() {
        return gtk_buildable_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_buildable_get_name(GtkBuildable *buildable)
     * }
     */
    public static MethodHandle gtk_buildable_get_name$handle() {
        return gtk_buildable_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_buildable_get_name(GtkBuildable *buildable)
     * }
     */
    public static MemorySegment gtk_buildable_get_name(MemorySegment buildable) {
        var mh$ = gtk_buildable_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_get_name", buildable);
            }
            return (MemorySegment)mh$.invokeExact(buildable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_add_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_add_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_buildable_add_child(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *type)
     * }
     */
    public static FunctionDescriptor gtk_buildable_add_child$descriptor() {
        return gtk_buildable_add_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_buildable_add_child(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *type)
     * }
     */
    public static MethodHandle gtk_buildable_add_child$handle() {
        return gtk_buildable_add_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_buildable_add_child(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *type)
     * }
     */
    public static void gtk_buildable_add_child(MemorySegment buildable, MemorySegment builder, MemorySegment child, MemorySegment type) {
        var mh$ = gtk_buildable_add_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_add_child", buildable, builder, child, type);
            }
            mh$.invokeExact(buildable, builder, child, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_set_buildable_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_set_buildable_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_buildable_set_buildable_property(GtkBuildable *buildable, GtkBuilder *builder, const gchar *name, const GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_buildable_set_buildable_property$descriptor() {
        return gtk_buildable_set_buildable_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_buildable_set_buildable_property(GtkBuildable *buildable, GtkBuilder *builder, const gchar *name, const GValue *value)
     * }
     */
    public static MethodHandle gtk_buildable_set_buildable_property$handle() {
        return gtk_buildable_set_buildable_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_buildable_set_buildable_property(GtkBuildable *buildable, GtkBuilder *builder, const gchar *name, const GValue *value)
     * }
     */
    public static void gtk_buildable_set_buildable_property(MemorySegment buildable, MemorySegment builder, MemorySegment name, MemorySegment value) {
        var mh$ = gtk_buildable_set_buildable_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_set_buildable_property", buildable, builder, name, value);
            }
            mh$.invokeExact(buildable, builder, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_construct_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_construct_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *gtk_buildable_construct_child(GtkBuildable *buildable, GtkBuilder *builder, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_buildable_construct_child$descriptor() {
        return gtk_buildable_construct_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *gtk_buildable_construct_child(GtkBuildable *buildable, GtkBuilder *builder, const gchar *name)
     * }
     */
    public static MethodHandle gtk_buildable_construct_child$handle() {
        return gtk_buildable_construct_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *gtk_buildable_construct_child(GtkBuildable *buildable, GtkBuilder *builder, const gchar *name)
     * }
     */
    public static MemorySegment gtk_buildable_construct_child(MemorySegment buildable, MemorySegment builder, MemorySegment name) {
        var mh$ = gtk_buildable_construct_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_construct_child", buildable, builder, name);
            }
            return (MemorySegment)mh$.invokeExact(buildable, builder, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_custom_tag_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_custom_tag_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_buildable_custom_tag_start(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, GMarkupParser *parser, gpointer *data)
     * }
     */
    public static FunctionDescriptor gtk_buildable_custom_tag_start$descriptor() {
        return gtk_buildable_custom_tag_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_buildable_custom_tag_start(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, GMarkupParser *parser, gpointer *data)
     * }
     */
    public static MethodHandle gtk_buildable_custom_tag_start$handle() {
        return gtk_buildable_custom_tag_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_buildable_custom_tag_start(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, GMarkupParser *parser, gpointer *data)
     * }
     */
    public static int gtk_buildable_custom_tag_start(MemorySegment buildable, MemorySegment builder, MemorySegment child, MemorySegment tagname, MemorySegment parser, MemorySegment data) {
        var mh$ = gtk_buildable_custom_tag_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_custom_tag_start", buildable, builder, child, tagname, parser, data);
            }
            return (int)mh$.invokeExact(buildable, builder, child, tagname, parser, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_custom_tag_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_custom_tag_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_buildable_custom_tag_end(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer *data)
     * }
     */
    public static FunctionDescriptor gtk_buildable_custom_tag_end$descriptor() {
        return gtk_buildable_custom_tag_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_buildable_custom_tag_end(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer *data)
     * }
     */
    public static MethodHandle gtk_buildable_custom_tag_end$handle() {
        return gtk_buildable_custom_tag_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_buildable_custom_tag_end(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer *data)
     * }
     */
    public static void gtk_buildable_custom_tag_end(MemorySegment buildable, MemorySegment builder, MemorySegment child, MemorySegment tagname, MemorySegment data) {
        var mh$ = gtk_buildable_custom_tag_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_custom_tag_end", buildable, builder, child, tagname, data);
            }
            mh$.invokeExact(buildable, builder, child, tagname, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_custom_finished {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_custom_finished"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_buildable_custom_finished(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer data)
     * }
     */
    public static FunctionDescriptor gtk_buildable_custom_finished$descriptor() {
        return gtk_buildable_custom_finished.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_buildable_custom_finished(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer data)
     * }
     */
    public static MethodHandle gtk_buildable_custom_finished$handle() {
        return gtk_buildable_custom_finished.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_buildable_custom_finished(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer data)
     * }
     */
    public static void gtk_buildable_custom_finished(MemorySegment buildable, MemorySegment builder, MemorySegment child, MemorySegment tagname, MemorySegment data) {
        var mh$ = gtk_buildable_custom_finished.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_custom_finished", buildable, builder, child, tagname, data);
            }
            mh$.invokeExact(buildable, builder, child, tagname, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_parser_finished {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_parser_finished"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_buildable_parser_finished(GtkBuildable *buildable, GtkBuilder *builder)
     * }
     */
    public static FunctionDescriptor gtk_buildable_parser_finished$descriptor() {
        return gtk_buildable_parser_finished.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_buildable_parser_finished(GtkBuildable *buildable, GtkBuilder *builder)
     * }
     */
    public static MethodHandle gtk_buildable_parser_finished$handle() {
        return gtk_buildable_parser_finished.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_buildable_parser_finished(GtkBuildable *buildable, GtkBuilder *builder)
     * }
     */
    public static void gtk_buildable_parser_finished(MemorySegment buildable, MemorySegment builder) {
        var mh$ = gtk_buildable_parser_finished.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_parser_finished", buildable, builder);
            }
            mh$.invokeExact(buildable, builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_buildable_get_internal_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_buildable_get_internal_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *gtk_buildable_get_internal_child(GtkBuildable *buildable, GtkBuilder *builder, const gchar *childname)
     * }
     */
    public static FunctionDescriptor gtk_buildable_get_internal_child$descriptor() {
        return gtk_buildable_get_internal_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *gtk_buildable_get_internal_child(GtkBuildable *buildable, GtkBuilder *builder, const gchar *childname)
     * }
     */
    public static MethodHandle gtk_buildable_get_internal_child$handle() {
        return gtk_buildable_get_internal_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *gtk_buildable_get_internal_child(GtkBuildable *buildable, GtkBuilder *builder, const gchar *childname)
     * }
     */
    public static MemorySegment gtk_buildable_get_internal_child(MemorySegment buildable, MemorySegment builder, MemorySegment childname) {
        var mh$ = gtk_buildable_get_internal_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_buildable_get_internal_child", buildable, builder, childname);
            }
            return (MemorySegment)mh$.invokeExact(buildable, builder, childname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_button_get_type$descriptor() {
        return gtk_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_button_get_type()
     * }
     */
    public static MethodHandle gtk_button_get_type$handle() {
        return gtk_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_button_get_type()
     * }
     */
    public static long gtk_button_get_type() {
        var mh$ = gtk_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new()
     * }
     */
    public static FunctionDescriptor gtk_button_new$descriptor() {
        return gtk_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new()
     * }
     */
    public static MethodHandle gtk_button_new$handle() {
        return gtk_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new()
     * }
     */
    public static MemorySegment gtk_button_new() {
        var mh$ = gtk_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_new_with_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_new_with_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_with_label(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_button_new_with_label$descriptor() {
        return gtk_button_new_with_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_with_label(const gchar *label)
     * }
     */
    public static MethodHandle gtk_button_new_with_label$handle() {
        return gtk_button_new_with_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_with_label(const gchar *label)
     * }
     */
    public static MemorySegment gtk_button_new_with_label(MemorySegment label) {
        var mh$ = gtk_button_new_with_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_new_with_label", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_new_from_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_new_from_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_from_icon_name(const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_button_new_from_icon_name$descriptor() {
        return gtk_button_new_from_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_from_icon_name(const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_button_new_from_icon_name$handle() {
        return gtk_button_new_from_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_from_icon_name(const gchar *icon_name, GtkIconSize size)
     * }
     */
    public static MemorySegment gtk_button_new_from_icon_name(MemorySegment icon_name, int size) {
        var mh$ = gtk_button_new_from_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_new_from_icon_name", icon_name, size);
            }
            return (MemorySegment)mh$.invokeExact(icon_name, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_new_from_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_new_from_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_button_new_from_stock$descriptor() {
        return gtk_button_new_from_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_button_new_from_stock$handle() {
        return gtk_button_new_from_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_from_stock(const gchar *stock_id)
     * }
     */
    public static MemorySegment gtk_button_new_from_stock(MemorySegment stock_id) {
        var mh$ = gtk_button_new_from_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_new_from_stock", stock_id);
            }
            return (MemorySegment)mh$.invokeExact(stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_new_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_new_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_with_mnemonic(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_button_new_with_mnemonic$descriptor() {
        return gtk_button_new_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MethodHandle gtk_button_new_with_mnemonic$handle() {
        return gtk_button_new_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MemorySegment gtk_button_new_with_mnemonic(MemorySegment label) {
        var mh$ = gtk_button_new_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_new_with_mnemonic", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_clicked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_clicked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_clicked(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_clicked$descriptor() {
        return gtk_button_clicked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_clicked(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_clicked$handle() {
        return gtk_button_clicked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_clicked(GtkButton *button)
     * }
     */
    public static void gtk_button_clicked(MemorySegment button) {
        var mh$ = gtk_button_clicked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_clicked", button);
            }
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_pressed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_pressed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_pressed(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_pressed$descriptor() {
        return gtk_button_pressed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_pressed(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_pressed$handle() {
        return gtk_button_pressed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_pressed(GtkButton *button)
     * }
     */
    public static void gtk_button_pressed(MemorySegment button) {
        var mh$ = gtk_button_pressed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_pressed", button);
            }
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_released {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_released"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_released(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_released$descriptor() {
        return gtk_button_released.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_released(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_released$handle() {
        return gtk_button_released.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_released(GtkButton *button)
     * }
     */
    public static void gtk_button_released(MemorySegment button) {
        var mh$ = gtk_button_released.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_released", button);
            }
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_enter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_enter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_enter(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_enter$descriptor() {
        return gtk_button_enter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_enter(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_enter$handle() {
        return gtk_button_enter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_enter(GtkButton *button)
     * }
     */
    public static void gtk_button_enter(MemorySegment button) {
        var mh$ = gtk_button_enter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_enter", button);
            }
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_leave {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_leave"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_leave(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_leave$descriptor() {
        return gtk_button_leave.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_leave(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_leave$handle() {
        return gtk_button_leave.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_leave(GtkButton *button)
     * }
     */
    public static void gtk_button_leave(MemorySegment button) {
        var mh$ = gtk_button_leave.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_leave", button);
            }
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_set_relief {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_set_relief"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_set_relief(GtkButton *button, GtkReliefStyle relief)
     * }
     */
    public static FunctionDescriptor gtk_button_set_relief$descriptor() {
        return gtk_button_set_relief.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_set_relief(GtkButton *button, GtkReliefStyle relief)
     * }
     */
    public static MethodHandle gtk_button_set_relief$handle() {
        return gtk_button_set_relief.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_set_relief(GtkButton *button, GtkReliefStyle relief)
     * }
     */
    public static void gtk_button_set_relief(MemorySegment button, int relief) {
        var mh$ = gtk_button_set_relief.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_set_relief", button, relief);
            }
            mh$.invokeExact(button, relief);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_relief {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_relief"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_button_get_relief(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_get_relief$descriptor() {
        return gtk_button_get_relief.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_button_get_relief(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_get_relief$handle() {
        return gtk_button_get_relief.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkReliefStyle gtk_button_get_relief(GtkButton *button)
     * }
     */
    public static int gtk_button_get_relief(MemorySegment button) {
        var mh$ = gtk_button_get_relief.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_relief", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_set_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_set_label(GtkButton *button, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_button_set_label$descriptor() {
        return gtk_button_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_set_label(GtkButton *button, const gchar *label)
     * }
     */
    public static MethodHandle gtk_button_set_label$handle() {
        return gtk_button_set_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_set_label(GtkButton *button, const gchar *label)
     * }
     */
    public static void gtk_button_set_label(MemorySegment button, MemorySegment label) {
        var mh$ = gtk_button_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_set_label", button, label);
            }
            mh$.invokeExact(button, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_button_get_label(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_get_label$descriptor() {
        return gtk_button_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_button_get_label(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_get_label$handle() {
        return gtk_button_get_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_button_get_label(GtkButton *button)
     * }
     */
    public static MemorySegment gtk_button_get_label(MemorySegment button) {
        var mh$ = gtk_button_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_label", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_set_use_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_set_use_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_set_use_underline(GtkButton *button, gboolean use_underline)
     * }
     */
    public static FunctionDescriptor gtk_button_set_use_underline$descriptor() {
        return gtk_button_set_use_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_set_use_underline(GtkButton *button, gboolean use_underline)
     * }
     */
    public static MethodHandle gtk_button_set_use_underline$handle() {
        return gtk_button_set_use_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_set_use_underline(GtkButton *button, gboolean use_underline)
     * }
     */
    public static void gtk_button_set_use_underline(MemorySegment button, int use_underline) {
        var mh$ = gtk_button_set_use_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_set_use_underline", button, use_underline);
            }
            mh$.invokeExact(button, use_underline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_use_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_use_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_use_underline(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_get_use_underline$descriptor() {
        return gtk_button_get_use_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_use_underline(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_get_use_underline$handle() {
        return gtk_button_get_use_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_use_underline(GtkButton *button)
     * }
     */
    public static int gtk_button_get_use_underline(MemorySegment button) {
        var mh$ = gtk_button_get_use_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_use_underline", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_set_use_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_set_use_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_set_use_stock(GtkButton *button, gboolean use_stock)
     * }
     */
    public static FunctionDescriptor gtk_button_set_use_stock$descriptor() {
        return gtk_button_set_use_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_set_use_stock(GtkButton *button, gboolean use_stock)
     * }
     */
    public static MethodHandle gtk_button_set_use_stock$handle() {
        return gtk_button_set_use_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_set_use_stock(GtkButton *button, gboolean use_stock)
     * }
     */
    public static void gtk_button_set_use_stock(MemorySegment button, int use_stock) {
        var mh$ = gtk_button_set_use_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_set_use_stock", button, use_stock);
            }
            mh$.invokeExact(button, use_stock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_use_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_use_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_use_stock(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_get_use_stock$descriptor() {
        return gtk_button_get_use_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_use_stock(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_get_use_stock$handle() {
        return gtk_button_get_use_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_use_stock(GtkButton *button)
     * }
     */
    public static int gtk_button_get_use_stock(MemorySegment button) {
        var mh$ = gtk_button_get_use_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_use_stock", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_set_focus_on_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_set_focus_on_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_set_focus_on_click(GtkButton *button, gboolean focus_on_click)
     * }
     */
    public static FunctionDescriptor gtk_button_set_focus_on_click$descriptor() {
        return gtk_button_set_focus_on_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_set_focus_on_click(GtkButton *button, gboolean focus_on_click)
     * }
     */
    public static MethodHandle gtk_button_set_focus_on_click$handle() {
        return gtk_button_set_focus_on_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_set_focus_on_click(GtkButton *button, gboolean focus_on_click)
     * }
     */
    public static void gtk_button_set_focus_on_click(MemorySegment button, int focus_on_click) {
        var mh$ = gtk_button_set_focus_on_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_set_focus_on_click", button, focus_on_click);
            }
            mh$.invokeExact(button, focus_on_click);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_focus_on_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_focus_on_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_focus_on_click(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_get_focus_on_click$descriptor() {
        return gtk_button_get_focus_on_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_focus_on_click(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_get_focus_on_click$handle() {
        return gtk_button_get_focus_on_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_focus_on_click(GtkButton *button)
     * }
     */
    public static int gtk_button_get_focus_on_click(MemorySegment button) {
        var mh$ = gtk_button_get_focus_on_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_focus_on_click", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_set_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_set_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_set_alignment(GtkButton *button, gfloat xalign, gfloat yalign)
     * }
     */
    public static FunctionDescriptor gtk_button_set_alignment$descriptor() {
        return gtk_button_set_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_set_alignment(GtkButton *button, gfloat xalign, gfloat yalign)
     * }
     */
    public static MethodHandle gtk_button_set_alignment$handle() {
        return gtk_button_set_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_set_alignment(GtkButton *button, gfloat xalign, gfloat yalign)
     * }
     */
    public static void gtk_button_set_alignment(MemorySegment button, float xalign, float yalign) {
        var mh$ = gtk_button_set_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_set_alignment", button, xalign, yalign);
            }
            mh$.invokeExact(button, xalign, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_alignment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_alignment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_get_alignment(GtkButton *button, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static FunctionDescriptor gtk_button_get_alignment$descriptor() {
        return gtk_button_get_alignment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_get_alignment(GtkButton *button, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static MethodHandle gtk_button_get_alignment$handle() {
        return gtk_button_get_alignment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_get_alignment(GtkButton *button, gfloat *xalign, gfloat *yalign)
     * }
     */
    public static void gtk_button_get_alignment(MemorySegment button, MemorySegment xalign, MemorySegment yalign) {
        var mh$ = gtk_button_get_alignment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_alignment", button, xalign, yalign);
            }
            mh$.invokeExact(button, xalign, yalign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_set_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_set_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_set_image(GtkButton *button, GtkWidget *image)
     * }
     */
    public static FunctionDescriptor gtk_button_set_image$descriptor() {
        return gtk_button_set_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_set_image(GtkButton *button, GtkWidget *image)
     * }
     */
    public static MethodHandle gtk_button_set_image$handle() {
        return gtk_button_set_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_set_image(GtkButton *button, GtkWidget *image)
     * }
     */
    public static void gtk_button_set_image(MemorySegment button, MemorySegment image) {
        var mh$ = gtk_button_set_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_set_image", button, image);
            }
            mh$.invokeExact(button, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_get_image(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_get_image$descriptor() {
        return gtk_button_get_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_get_image(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_get_image$handle() {
        return gtk_button_get_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_button_get_image(GtkButton *button)
     * }
     */
    public static MemorySegment gtk_button_get_image(MemorySegment button) {
        var mh$ = gtk_button_get_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_image", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_set_image_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_set_image_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_set_image_position(GtkButton *button, GtkPositionType position)
     * }
     */
    public static FunctionDescriptor gtk_button_set_image_position$descriptor() {
        return gtk_button_set_image_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_set_image_position(GtkButton *button, GtkPositionType position)
     * }
     */
    public static MethodHandle gtk_button_set_image_position$handle() {
        return gtk_button_set_image_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_set_image_position(GtkButton *button, GtkPositionType position)
     * }
     */
    public static void gtk_button_set_image_position(MemorySegment button, int position) {
        var mh$ = gtk_button_set_image_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_set_image_position", button, position);
            }
            mh$.invokeExact(button, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_image_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_image_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_button_get_image_position(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_get_image_position$descriptor() {
        return gtk_button_get_image_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPositionType gtk_button_get_image_position(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_get_image_position$handle() {
        return gtk_button_get_image_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPositionType gtk_button_get_image_position(GtkButton *button)
     * }
     */
    public static int gtk_button_get_image_position(MemorySegment button) {
        var mh$ = gtk_button_get_image_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_image_position", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_set_always_show_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_set_always_show_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_button_set_always_show_image(GtkButton *button, gboolean always_show)
     * }
     */
    public static FunctionDescriptor gtk_button_set_always_show_image$descriptor() {
        return gtk_button_set_always_show_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_button_set_always_show_image(GtkButton *button, gboolean always_show)
     * }
     */
    public static MethodHandle gtk_button_set_always_show_image$handle() {
        return gtk_button_set_always_show_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_button_set_always_show_image(GtkButton *button, gboolean always_show)
     * }
     */
    public static void gtk_button_set_always_show_image(MemorySegment button, int always_show) {
        var mh$ = gtk_button_set_always_show_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_set_always_show_image", button, always_show);
            }
            mh$.invokeExact(button, always_show);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_always_show_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_always_show_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_always_show_image(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_get_always_show_image$descriptor() {
        return gtk_button_get_always_show_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_always_show_image(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_get_always_show_image$handle() {
        return gtk_button_get_always_show_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_button_get_always_show_image(GtkButton *button)
     * }
     */
    public static int gtk_button_get_always_show_image(MemorySegment button) {
        var mh$ = gtk_button_get_always_show_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_always_show_image", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_button_get_event_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_button_get_event_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_button_get_event_window(GtkButton *button)
     * }
     */
    public static FunctionDescriptor gtk_button_get_event_window$descriptor() {
        return gtk_button_get_event_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_button_get_event_window(GtkButton *button)
     * }
     */
    public static MethodHandle gtk_button_get_event_window$handle() {
        return gtk_button_get_event_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_button_get_event_window(GtkButton *button)
     * }
     */
    public static MemorySegment gtk_button_get_event_window(MemorySegment button) {
        var mh$ = gtk_button_get_event_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_button_get_event_window", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_CALENDAR_SHOW_HEADING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CALENDAR_SHOW_HEADING = 1
     * }
     */
    public static int GTK_CALENDAR_SHOW_HEADING() {
        return GTK_CALENDAR_SHOW_HEADING;
    }
    private static final int GTK_CALENDAR_SHOW_DAY_NAMES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CALENDAR_SHOW_DAY_NAMES = 2
     * }
     */
    public static int GTK_CALENDAR_SHOW_DAY_NAMES() {
        return GTK_CALENDAR_SHOW_DAY_NAMES;
    }
    private static final int GTK_CALENDAR_NO_MONTH_CHANGE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CALENDAR_NO_MONTH_CHANGE = 4
     * }
     */
    public static int GTK_CALENDAR_NO_MONTH_CHANGE() {
        return GTK_CALENDAR_NO_MONTH_CHANGE;
    }
    private static final int GTK_CALENDAR_SHOW_WEEK_NUMBERS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CALENDAR_SHOW_WEEK_NUMBERS = 8
     * }
     */
    public static int GTK_CALENDAR_SHOW_WEEK_NUMBERS() {
        return GTK_CALENDAR_SHOW_WEEK_NUMBERS;
    }
    private static final int GTK_CALENDAR_SHOW_DETAILS = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CALENDAR_SHOW_DETAILS = 32
     * }
     */
    public static int GTK_CALENDAR_SHOW_DETAILS() {
        return GTK_CALENDAR_SHOW_DETAILS;
    }

    private static class gtk_calendar_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_calendar_get_type()
     * }
     */
    public static FunctionDescriptor gtk_calendar_get_type$descriptor() {
        return gtk_calendar_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_calendar_get_type()
     * }
     */
    public static MethodHandle gtk_calendar_get_type$handle() {
        return gtk_calendar_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_calendar_get_type()
     * }
     */
    public static long gtk_calendar_get_type() {
        var mh$ = gtk_calendar_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_calendar_new()
     * }
     */
    public static FunctionDescriptor gtk_calendar_new$descriptor() {
        return gtk_calendar_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_calendar_new()
     * }
     */
    public static MethodHandle gtk_calendar_new$handle() {
        return gtk_calendar_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_calendar_new()
     * }
     */
    public static MemorySegment gtk_calendar_new() {
        var mh$ = gtk_calendar_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_select_month {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_select_month"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_calendar_select_month(GtkCalendar *calendar, guint month, guint year)
     * }
     */
    public static FunctionDescriptor gtk_calendar_select_month$descriptor() {
        return gtk_calendar_select_month.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_calendar_select_month(GtkCalendar *calendar, guint month, guint year)
     * }
     */
    public static MethodHandle gtk_calendar_select_month$handle() {
        return gtk_calendar_select_month.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_calendar_select_month(GtkCalendar *calendar, guint month, guint year)
     * }
     */
    public static void gtk_calendar_select_month(MemorySegment calendar, int month, int year) {
        var mh$ = gtk_calendar_select_month.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_select_month", calendar, month, year);
            }
            mh$.invokeExact(calendar, month, year);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_select_day {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_select_day"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_calendar_select_day(GtkCalendar *calendar, guint day)
     * }
     */
    public static FunctionDescriptor gtk_calendar_select_day$descriptor() {
        return gtk_calendar_select_day.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_calendar_select_day(GtkCalendar *calendar, guint day)
     * }
     */
    public static MethodHandle gtk_calendar_select_day$handle() {
        return gtk_calendar_select_day.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_calendar_select_day(GtkCalendar *calendar, guint day)
     * }
     */
    public static void gtk_calendar_select_day(MemorySegment calendar, int day) {
        var mh$ = gtk_calendar_select_day.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_select_day", calendar, day);
            }
            mh$.invokeExact(calendar, day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_mark_day {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_mark_day"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_calendar_mark_day(GtkCalendar *calendar, guint day)
     * }
     */
    public static FunctionDescriptor gtk_calendar_mark_day$descriptor() {
        return gtk_calendar_mark_day.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_calendar_mark_day(GtkCalendar *calendar, guint day)
     * }
     */
    public static MethodHandle gtk_calendar_mark_day$handle() {
        return gtk_calendar_mark_day.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_calendar_mark_day(GtkCalendar *calendar, guint day)
     * }
     */
    public static void gtk_calendar_mark_day(MemorySegment calendar, int day) {
        var mh$ = gtk_calendar_mark_day.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_mark_day", calendar, day);
            }
            mh$.invokeExact(calendar, day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_unmark_day {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_unmark_day"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_calendar_unmark_day(GtkCalendar *calendar, guint day)
     * }
     */
    public static FunctionDescriptor gtk_calendar_unmark_day$descriptor() {
        return gtk_calendar_unmark_day.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_calendar_unmark_day(GtkCalendar *calendar, guint day)
     * }
     */
    public static MethodHandle gtk_calendar_unmark_day$handle() {
        return gtk_calendar_unmark_day.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_calendar_unmark_day(GtkCalendar *calendar, guint day)
     * }
     */
    public static void gtk_calendar_unmark_day(MemorySegment calendar, int day) {
        var mh$ = gtk_calendar_unmark_day.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_unmark_day", calendar, day);
            }
            mh$.invokeExact(calendar, day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_clear_marks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_clear_marks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_calendar_clear_marks(GtkCalendar *calendar)
     * }
     */
    public static FunctionDescriptor gtk_calendar_clear_marks$descriptor() {
        return gtk_calendar_clear_marks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_calendar_clear_marks(GtkCalendar *calendar)
     * }
     */
    public static MethodHandle gtk_calendar_clear_marks$handle() {
        return gtk_calendar_clear_marks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_calendar_clear_marks(GtkCalendar *calendar)
     * }
     */
    public static void gtk_calendar_clear_marks(MemorySegment calendar) {
        var mh$ = gtk_calendar_clear_marks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_clear_marks", calendar);
            }
            mh$.invokeExact(calendar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_set_display_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_set_display_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_calendar_set_display_options(GtkCalendar *calendar, GtkCalendarDisplayOptions flags)
     * }
     */
    public static FunctionDescriptor gtk_calendar_set_display_options$descriptor() {
        return gtk_calendar_set_display_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_calendar_set_display_options(GtkCalendar *calendar, GtkCalendarDisplayOptions flags)
     * }
     */
    public static MethodHandle gtk_calendar_set_display_options$handle() {
        return gtk_calendar_set_display_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_calendar_set_display_options(GtkCalendar *calendar, GtkCalendarDisplayOptions flags)
     * }
     */
    public static void gtk_calendar_set_display_options(MemorySegment calendar, int flags) {
        var mh$ = gtk_calendar_set_display_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_set_display_options", calendar, flags);
            }
            mh$.invokeExact(calendar, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_get_display_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_get_display_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCalendarDisplayOptions gtk_calendar_get_display_options(GtkCalendar *calendar)
     * }
     */
    public static FunctionDescriptor gtk_calendar_get_display_options$descriptor() {
        return gtk_calendar_get_display_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCalendarDisplayOptions gtk_calendar_get_display_options(GtkCalendar *calendar)
     * }
     */
    public static MethodHandle gtk_calendar_get_display_options$handle() {
        return gtk_calendar_get_display_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCalendarDisplayOptions gtk_calendar_get_display_options(GtkCalendar *calendar)
     * }
     */
    public static int gtk_calendar_get_display_options(MemorySegment calendar) {
        var mh$ = gtk_calendar_get_display_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_get_display_options", calendar);
            }
            return (int)mh$.invokeExact(calendar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_get_date {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_get_date"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_calendar_get_date(GtkCalendar *calendar, guint *year, guint *month, guint *day)
     * }
     */
    public static FunctionDescriptor gtk_calendar_get_date$descriptor() {
        return gtk_calendar_get_date.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_calendar_get_date(GtkCalendar *calendar, guint *year, guint *month, guint *day)
     * }
     */
    public static MethodHandle gtk_calendar_get_date$handle() {
        return gtk_calendar_get_date.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_calendar_get_date(GtkCalendar *calendar, guint *year, guint *month, guint *day)
     * }
     */
    public static void gtk_calendar_get_date(MemorySegment calendar, MemorySegment year, MemorySegment month, MemorySegment day) {
        var mh$ = gtk_calendar_get_date.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_get_date", calendar, year, month, day);
            }
            mh$.invokeExact(calendar, year, month, day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_set_detail_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_set_detail_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_calendar_set_detail_func(GtkCalendar *calendar, GtkCalendarDetailFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_calendar_set_detail_func$descriptor() {
        return gtk_calendar_set_detail_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_calendar_set_detail_func(GtkCalendar *calendar, GtkCalendarDetailFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_calendar_set_detail_func$handle() {
        return gtk_calendar_set_detail_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_calendar_set_detail_func(GtkCalendar *calendar, GtkCalendarDetailFunc func, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_calendar_set_detail_func(MemorySegment calendar, MemorySegment func, MemorySegment data, MemorySegment destroy) {
        var mh$ = gtk_calendar_set_detail_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_set_detail_func", calendar, func, data, destroy);
            }
            mh$.invokeExact(calendar, func, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_set_detail_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_set_detail_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_calendar_set_detail_width_chars(GtkCalendar *calendar, gint chars)
     * }
     */
    public static FunctionDescriptor gtk_calendar_set_detail_width_chars$descriptor() {
        return gtk_calendar_set_detail_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_calendar_set_detail_width_chars(GtkCalendar *calendar, gint chars)
     * }
     */
    public static MethodHandle gtk_calendar_set_detail_width_chars$handle() {
        return gtk_calendar_set_detail_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_calendar_set_detail_width_chars(GtkCalendar *calendar, gint chars)
     * }
     */
    public static void gtk_calendar_set_detail_width_chars(MemorySegment calendar, int chars) {
        var mh$ = gtk_calendar_set_detail_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_set_detail_width_chars", calendar, chars);
            }
            mh$.invokeExact(calendar, chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_set_detail_height_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_set_detail_height_rows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_calendar_set_detail_height_rows(GtkCalendar *calendar, gint rows)
     * }
     */
    public static FunctionDescriptor gtk_calendar_set_detail_height_rows$descriptor() {
        return gtk_calendar_set_detail_height_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_calendar_set_detail_height_rows(GtkCalendar *calendar, gint rows)
     * }
     */
    public static MethodHandle gtk_calendar_set_detail_height_rows$handle() {
        return gtk_calendar_set_detail_height_rows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_calendar_set_detail_height_rows(GtkCalendar *calendar, gint rows)
     * }
     */
    public static void gtk_calendar_set_detail_height_rows(MemorySegment calendar, int rows) {
        var mh$ = gtk_calendar_set_detail_height_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_set_detail_height_rows", calendar, rows);
            }
            mh$.invokeExact(calendar, rows);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_get_detail_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_get_detail_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_calendar_get_detail_width_chars(GtkCalendar *calendar)
     * }
     */
    public static FunctionDescriptor gtk_calendar_get_detail_width_chars$descriptor() {
        return gtk_calendar_get_detail_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_calendar_get_detail_width_chars(GtkCalendar *calendar)
     * }
     */
    public static MethodHandle gtk_calendar_get_detail_width_chars$handle() {
        return gtk_calendar_get_detail_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_calendar_get_detail_width_chars(GtkCalendar *calendar)
     * }
     */
    public static int gtk_calendar_get_detail_width_chars(MemorySegment calendar) {
        var mh$ = gtk_calendar_get_detail_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_get_detail_width_chars", calendar);
            }
            return (int)mh$.invokeExact(calendar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_get_detail_height_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_get_detail_height_rows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_calendar_get_detail_height_rows(GtkCalendar *calendar)
     * }
     */
    public static FunctionDescriptor gtk_calendar_get_detail_height_rows$descriptor() {
        return gtk_calendar_get_detail_height_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_calendar_get_detail_height_rows(GtkCalendar *calendar)
     * }
     */
    public static MethodHandle gtk_calendar_get_detail_height_rows$handle() {
        return gtk_calendar_get_detail_height_rows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_calendar_get_detail_height_rows(GtkCalendar *calendar)
     * }
     */
    public static int gtk_calendar_get_detail_height_rows(MemorySegment calendar) {
        var mh$ = gtk_calendar_get_detail_height_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_get_detail_height_rows", calendar);
            }
            return (int)mh$.invokeExact(calendar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_calendar_get_day_is_marked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_calendar_get_day_is_marked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_calendar_get_day_is_marked(GtkCalendar *calendar, guint day)
     * }
     */
    public static FunctionDescriptor gtk_calendar_get_day_is_marked$descriptor() {
        return gtk_calendar_get_day_is_marked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_calendar_get_day_is_marked(GtkCalendar *calendar, guint day)
     * }
     */
    public static MethodHandle gtk_calendar_get_day_is_marked$handle() {
        return gtk_calendar_get_day_is_marked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_calendar_get_day_is_marked(GtkCalendar *calendar, guint day)
     * }
     */
    public static int gtk_calendar_get_day_is_marked(MemorySegment calendar, int day) {
        var mh$ = gtk_calendar_get_day_is_marked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_calendar_get_day_is_marked", calendar, day);
            }
            return (int)mh$.invokeExact(calendar, day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_box_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_box_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_area_box_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_area_box_get_type$descriptor() {
        return gtk_cell_area_box_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_area_box_get_type()
     * }
     */
    public static MethodHandle gtk_cell_area_box_get_type$handle() {
        return gtk_cell_area_box_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_area_box_get_type()
     * }
     */
    public static long gtk_cell_area_box_get_type() {
        var mh$ = gtk_cell_area_box_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_box_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_box_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_box_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellArea *gtk_cell_area_box_new()
     * }
     */
    public static FunctionDescriptor gtk_cell_area_box_new$descriptor() {
        return gtk_cell_area_box_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellArea *gtk_cell_area_box_new()
     * }
     */
    public static MethodHandle gtk_cell_area_box_new$handle() {
        return gtk_cell_area_box_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellArea *gtk_cell_area_box_new()
     * }
     */
    public static MemorySegment gtk_cell_area_box_new() {
        var mh$ = gtk_cell_area_box_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_box_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_box_pack_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_box_pack_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_box_pack_start(GtkCellAreaBox *box, GtkCellRenderer *renderer, gboolean expand, gboolean align, gboolean fixed)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_box_pack_start$descriptor() {
        return gtk_cell_area_box_pack_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_box_pack_start(GtkCellAreaBox *box, GtkCellRenderer *renderer, gboolean expand, gboolean align, gboolean fixed)
     * }
     */
    public static MethodHandle gtk_cell_area_box_pack_start$handle() {
        return gtk_cell_area_box_pack_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_box_pack_start(GtkCellAreaBox *box, GtkCellRenderer *renderer, gboolean expand, gboolean align, gboolean fixed)
     * }
     */
    public static void gtk_cell_area_box_pack_start(MemorySegment box, MemorySegment renderer, int expand, int align, int fixed) {
        var mh$ = gtk_cell_area_box_pack_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_box_pack_start", box, renderer, expand, align, fixed);
            }
            mh$.invokeExact(box, renderer, expand, align, fixed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_box_pack_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_box_pack_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_box_pack_end(GtkCellAreaBox *box, GtkCellRenderer *renderer, gboolean expand, gboolean align, gboolean fixed)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_box_pack_end$descriptor() {
        return gtk_cell_area_box_pack_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_box_pack_end(GtkCellAreaBox *box, GtkCellRenderer *renderer, gboolean expand, gboolean align, gboolean fixed)
     * }
     */
    public static MethodHandle gtk_cell_area_box_pack_end$handle() {
        return gtk_cell_area_box_pack_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_box_pack_end(GtkCellAreaBox *box, GtkCellRenderer *renderer, gboolean expand, gboolean align, gboolean fixed)
     * }
     */
    public static void gtk_cell_area_box_pack_end(MemorySegment box, MemorySegment renderer, int expand, int align, int fixed) {
        var mh$ = gtk_cell_area_box_pack_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_box_pack_end", box, renderer, expand, align, fixed);
            }
            mh$.invokeExact(box, renderer, expand, align, fixed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_box_get_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_box_get_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_cell_area_box_get_spacing(GtkCellAreaBox *box)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_box_get_spacing$descriptor() {
        return gtk_cell_area_box_get_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_cell_area_box_get_spacing(GtkCellAreaBox *box)
     * }
     */
    public static MethodHandle gtk_cell_area_box_get_spacing$handle() {
        return gtk_cell_area_box_get_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_cell_area_box_get_spacing(GtkCellAreaBox *box)
     * }
     */
    public static int gtk_cell_area_box_get_spacing(MemorySegment box) {
        var mh$ = gtk_cell_area_box_get_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_box_get_spacing", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_box_set_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_box_set_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_box_set_spacing(GtkCellAreaBox *box, gint spacing)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_box_set_spacing$descriptor() {
        return gtk_cell_area_box_set_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_box_set_spacing(GtkCellAreaBox *box, gint spacing)
     * }
     */
    public static MethodHandle gtk_cell_area_box_set_spacing$handle() {
        return gtk_cell_area_box_set_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_box_set_spacing(GtkCellAreaBox *box, gint spacing)
     * }
     */
    public static void gtk_cell_area_box_set_spacing(MemorySegment box, int spacing) {
        var mh$ = gtk_cell_area_box_set_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_box_set_spacing", box, spacing);
            }
            mh$.invokeExact(box, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_cell_area_box_group_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_cell_area_box_group_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gboolean _gtk_cell_area_box_group_visible(GtkCellAreaBox *box, gint group_idx)
     * }
     */
    public static FunctionDescriptor _gtk_cell_area_box_group_visible$descriptor() {
        return _gtk_cell_area_box_group_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gboolean _gtk_cell_area_box_group_visible(GtkCellAreaBox *box, gint group_idx)
     * }
     */
    public static MethodHandle _gtk_cell_area_box_group_visible$handle() {
        return _gtk_cell_area_box_group_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * gboolean _gtk_cell_area_box_group_visible(GtkCellAreaBox *box, gint group_idx)
     * }
     */
    public static int _gtk_cell_area_box_group_visible(MemorySegment box, int group_idx) {
        var mh$ = _gtk_cell_area_box_group_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_cell_area_box_group_visible", box, group_idx);
            }
            return (int)mh$.invokeExact(box, group_idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_area_context_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_get_type$descriptor() {
        return gtk_cell_area_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_area_context_get_type()
     * }
     */
    public static MethodHandle gtk_cell_area_context_get_type$handle() {
        return gtk_cell_area_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_area_context_get_type()
     * }
     */
    public static long gtk_cell_area_context_get_type() {
        var mh$ = gtk_cell_area_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_get_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_get_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellArea *gtk_cell_area_context_get_area(GtkCellAreaContext *context)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_get_area$descriptor() {
        return gtk_cell_area_context_get_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellArea *gtk_cell_area_context_get_area(GtkCellAreaContext *context)
     * }
     */
    public static MethodHandle gtk_cell_area_context_get_area$handle() {
        return gtk_cell_area_context_get_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellArea *gtk_cell_area_context_get_area(GtkCellAreaContext *context)
     * }
     */
    public static MemorySegment gtk_cell_area_context_get_area(MemorySegment context) {
        var mh$ = gtk_cell_area_context_get_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_get_area", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_allocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_allocate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_allocate(GtkCellAreaContext *context, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_allocate$descriptor() {
        return gtk_cell_area_context_allocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_allocate(GtkCellAreaContext *context, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_cell_area_context_allocate$handle() {
        return gtk_cell_area_context_allocate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_allocate(GtkCellAreaContext *context, gint width, gint height)
     * }
     */
    public static void gtk_cell_area_context_allocate(MemorySegment context, int width, int height) {
        var mh$ = gtk_cell_area_context_allocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_allocate", context, width, height);
            }
            mh$.invokeExact(context, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_reset(GtkCellAreaContext *context)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_reset$descriptor() {
        return gtk_cell_area_context_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_reset(GtkCellAreaContext *context)
     * }
     */
    public static MethodHandle gtk_cell_area_context_reset$handle() {
        return gtk_cell_area_context_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_reset(GtkCellAreaContext *context)
     * }
     */
    public static void gtk_cell_area_context_reset(MemorySegment context) {
        var mh$ = gtk_cell_area_context_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_reset", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_get_preferred_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_get_preferred_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_width(GtkCellAreaContext *context, gint *minimum_width, gint *natural_width)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_get_preferred_width$descriptor() {
        return gtk_cell_area_context_get_preferred_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_width(GtkCellAreaContext *context, gint *minimum_width, gint *natural_width)
     * }
     */
    public static MethodHandle gtk_cell_area_context_get_preferred_width$handle() {
        return gtk_cell_area_context_get_preferred_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_width(GtkCellAreaContext *context, gint *minimum_width, gint *natural_width)
     * }
     */
    public static void gtk_cell_area_context_get_preferred_width(MemorySegment context, MemorySegment minimum_width, MemorySegment natural_width) {
        var mh$ = gtk_cell_area_context_get_preferred_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_get_preferred_width", context, minimum_width, natural_width);
            }
            mh$.invokeExact(context, minimum_width, natural_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_get_preferred_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_get_preferred_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_height(GtkCellAreaContext *context, gint *minimum_height, gint *natural_height)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_get_preferred_height$descriptor() {
        return gtk_cell_area_context_get_preferred_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_height(GtkCellAreaContext *context, gint *minimum_height, gint *natural_height)
     * }
     */
    public static MethodHandle gtk_cell_area_context_get_preferred_height$handle() {
        return gtk_cell_area_context_get_preferred_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_height(GtkCellAreaContext *context, gint *minimum_height, gint *natural_height)
     * }
     */
    public static void gtk_cell_area_context_get_preferred_height(MemorySegment context, MemorySegment minimum_height, MemorySegment natural_height) {
        var mh$ = gtk_cell_area_context_get_preferred_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_get_preferred_height", context, minimum_height, natural_height);
            }
            mh$.invokeExact(context, minimum_height, natural_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_get_preferred_height_for_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_get_preferred_height_for_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_height_for_width(GtkCellAreaContext *context, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_get_preferred_height_for_width$descriptor() {
        return gtk_cell_area_context_get_preferred_height_for_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_height_for_width(GtkCellAreaContext *context, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static MethodHandle gtk_cell_area_context_get_preferred_height_for_width$handle() {
        return gtk_cell_area_context_get_preferred_height_for_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_height_for_width(GtkCellAreaContext *context, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static void gtk_cell_area_context_get_preferred_height_for_width(MemorySegment context, int width, MemorySegment minimum_height, MemorySegment natural_height) {
        var mh$ = gtk_cell_area_context_get_preferred_height_for_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_get_preferred_height_for_width", context, width, minimum_height, natural_height);
            }
            mh$.invokeExact(context, width, minimum_height, natural_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_get_preferred_width_for_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_get_preferred_width_for_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_width_for_height(GtkCellAreaContext *context, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_get_preferred_width_for_height$descriptor() {
        return gtk_cell_area_context_get_preferred_width_for_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_width_for_height(GtkCellAreaContext *context, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static MethodHandle gtk_cell_area_context_get_preferred_width_for_height$handle() {
        return gtk_cell_area_context_get_preferred_width_for_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_preferred_width_for_height(GtkCellAreaContext *context, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static void gtk_cell_area_context_get_preferred_width_for_height(MemorySegment context, int height, MemorySegment minimum_width, MemorySegment natural_width) {
        var mh$ = gtk_cell_area_context_get_preferred_width_for_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_get_preferred_width_for_height", context, height, minimum_width, natural_width);
            }
            mh$.invokeExact(context, height, minimum_width, natural_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_get_allocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_get_allocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_allocation(GtkCellAreaContext *context, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_get_allocation$descriptor() {
        return gtk_cell_area_context_get_allocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_allocation(GtkCellAreaContext *context, gint *width, gint *height)
     * }
     */
    public static MethodHandle gtk_cell_area_context_get_allocation$handle() {
        return gtk_cell_area_context_get_allocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_get_allocation(GtkCellAreaContext *context, gint *width, gint *height)
     * }
     */
    public static void gtk_cell_area_context_get_allocation(MemorySegment context, MemorySegment width, MemorySegment height) {
        var mh$ = gtk_cell_area_context_get_allocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_get_allocation", context, width, height);
            }
            mh$.invokeExact(context, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_push_preferred_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_push_preferred_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_push_preferred_width(GtkCellAreaContext *context, gint minimum_width, gint natural_width)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_push_preferred_width$descriptor() {
        return gtk_cell_area_context_push_preferred_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_push_preferred_width(GtkCellAreaContext *context, gint minimum_width, gint natural_width)
     * }
     */
    public static MethodHandle gtk_cell_area_context_push_preferred_width$handle() {
        return gtk_cell_area_context_push_preferred_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_push_preferred_width(GtkCellAreaContext *context, gint minimum_width, gint natural_width)
     * }
     */
    public static void gtk_cell_area_context_push_preferred_width(MemorySegment context, int minimum_width, int natural_width) {
        var mh$ = gtk_cell_area_context_push_preferred_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_push_preferred_width", context, minimum_width, natural_width);
            }
            mh$.invokeExact(context, minimum_width, natural_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_area_context_push_preferred_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_area_context_push_preferred_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_push_preferred_height(GtkCellAreaContext *context, gint minimum_height, gint natural_height)
     * }
     */
    public static FunctionDescriptor gtk_cell_area_context_push_preferred_height$descriptor() {
        return gtk_cell_area_context_push_preferred_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_push_preferred_height(GtkCellAreaContext *context, gint minimum_height, gint natural_height)
     * }
     */
    public static MethodHandle gtk_cell_area_context_push_preferred_height$handle() {
        return gtk_cell_area_context_push_preferred_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_area_context_push_preferred_height(GtkCellAreaContext *context, gint minimum_height, gint natural_height)
     * }
     */
    public static void gtk_cell_area_context_push_preferred_height(MemorySegment context, int minimum_height, int natural_height) {
        var mh$ = gtk_cell_area_context_push_preferred_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_area_context_push_preferred_height", context, minimum_height, natural_height);
            }
            mh$.invokeExact(context, minimum_height, natural_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_layout_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_layout_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_layout_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_layout_get_type$descriptor() {
        return gtk_cell_layout_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_layout_get_type()
     * }
     */
    public static MethodHandle gtk_cell_layout_get_type$handle() {
        return gtk_cell_layout_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_layout_get_type()
     * }
     */
    public static long gtk_cell_layout_get_type() {
        var mh$ = gtk_cell_layout_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_layout_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_layout_pack_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_layout_pack_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_pack_start(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static FunctionDescriptor gtk_cell_layout_pack_start$descriptor() {
        return gtk_cell_layout_pack_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_pack_start(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static MethodHandle gtk_cell_layout_pack_start$handle() {
        return gtk_cell_layout_pack_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_layout_pack_start(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static void gtk_cell_layout_pack_start(MemorySegment cell_layout, MemorySegment cell, int expand) {
        var mh$ = gtk_cell_layout_pack_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_layout_pack_start", cell_layout, cell, expand);
            }
            mh$.invokeExact(cell_layout, cell, expand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_layout_pack_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_layout_pack_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_pack_end(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static FunctionDescriptor gtk_cell_layout_pack_end$descriptor() {
        return gtk_cell_layout_pack_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_pack_end(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static MethodHandle gtk_cell_layout_pack_end$handle() {
        return gtk_cell_layout_pack_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_layout_pack_end(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand)
     * }
     */
    public static void gtk_cell_layout_pack_end(MemorySegment cell_layout, MemorySegment cell, int expand) {
        var mh$ = gtk_cell_layout_pack_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_layout_pack_end", cell_layout, cell, expand);
            }
            mh$.invokeExact(cell_layout, cell, expand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_layout_get_cells {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_layout_get_cells"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_cell_layout_get_cells(GtkCellLayout *cell_layout)
     * }
     */
    public static FunctionDescriptor gtk_cell_layout_get_cells$descriptor() {
        return gtk_cell_layout_get_cells.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_cell_layout_get_cells(GtkCellLayout *cell_layout)
     * }
     */
    public static MethodHandle gtk_cell_layout_get_cells$handle() {
        return gtk_cell_layout_get_cells.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_cell_layout_get_cells(GtkCellLayout *cell_layout)
     * }
     */
    public static MemorySegment gtk_cell_layout_get_cells(MemorySegment cell_layout) {
        var mh$ = gtk_cell_layout_get_cells.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_layout_get_cells", cell_layout);
            }
            return (MemorySegment)mh$.invokeExact(cell_layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_layout_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_layout_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_clear(GtkCellLayout *cell_layout)
     * }
     */
    public static FunctionDescriptor gtk_cell_layout_clear$descriptor() {
        return gtk_cell_layout_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_clear(GtkCellLayout *cell_layout)
     * }
     */
    public static MethodHandle gtk_cell_layout_clear$handle() {
        return gtk_cell_layout_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_layout_clear(GtkCellLayout *cell_layout)
     * }
     */
    public static void gtk_cell_layout_clear(MemorySegment cell_layout) {
        var mh$ = gtk_cell_layout_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_layout_clear", cell_layout);
            }
            mh$.invokeExact(cell_layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_set_attributes(GtkCellLayout *cell_layout, GtkCellRenderer *cell, ...)
     * }
     */
    public static class gtk_cell_layout_set_attributes {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_cell_layout_set_attributes");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_cell_layout_set_attributes(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_cell_layout_set_attributes(GtkCellLayout *cell_layout, GtkCellRenderer *cell, ...)
         * }
         */
        public static gtk_cell_layout_set_attributes makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_cell_layout_set_attributes(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment cell_layout, MemorySegment cell, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_cell_layout_set_attributes", cell_layout, cell, x2);
                }
                spreader.invokeExact(cell_layout, cell, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_cell_layout_add_attribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_layout_add_attribute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_add_attribute(GtkCellLayout *cell_layout, GtkCellRenderer *cell, const gchar *attribute, gint column)
     * }
     */
    public static FunctionDescriptor gtk_cell_layout_add_attribute$descriptor() {
        return gtk_cell_layout_add_attribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_add_attribute(GtkCellLayout *cell_layout, GtkCellRenderer *cell, const gchar *attribute, gint column)
     * }
     */
    public static MethodHandle gtk_cell_layout_add_attribute$handle() {
        return gtk_cell_layout_add_attribute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_layout_add_attribute(GtkCellLayout *cell_layout, GtkCellRenderer *cell, const gchar *attribute, gint column)
     * }
     */
    public static void gtk_cell_layout_add_attribute(MemorySegment cell_layout, MemorySegment cell, MemorySegment attribute, int column) {
        var mh$ = gtk_cell_layout_add_attribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_layout_add_attribute", cell_layout, cell, attribute, column);
            }
            mh$.invokeExact(cell_layout, cell, attribute, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_layout_set_cell_data_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_layout_set_cell_data_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_set_cell_data_func(GtkCellLayout *cell_layout, GtkCellRenderer *cell, GtkCellLayoutDataFunc func, gpointer func_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_cell_layout_set_cell_data_func$descriptor() {
        return gtk_cell_layout_set_cell_data_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_set_cell_data_func(GtkCellLayout *cell_layout, GtkCellRenderer *cell, GtkCellLayoutDataFunc func, gpointer func_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_cell_layout_set_cell_data_func$handle() {
        return gtk_cell_layout_set_cell_data_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_layout_set_cell_data_func(GtkCellLayout *cell_layout, GtkCellRenderer *cell, GtkCellLayoutDataFunc func, gpointer func_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_cell_layout_set_cell_data_func(MemorySegment cell_layout, MemorySegment cell, MemorySegment func, MemorySegment func_data, MemorySegment destroy) {
        var mh$ = gtk_cell_layout_set_cell_data_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_layout_set_cell_data_func", cell_layout, cell, func, func_data, destroy);
            }
            mh$.invokeExact(cell_layout, cell, func, func_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_layout_clear_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_layout_clear_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_clear_attributes(GtkCellLayout *cell_layout, GtkCellRenderer *cell)
     * }
     */
    public static FunctionDescriptor gtk_cell_layout_clear_attributes$descriptor() {
        return gtk_cell_layout_clear_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_clear_attributes(GtkCellLayout *cell_layout, GtkCellRenderer *cell)
     * }
     */
    public static MethodHandle gtk_cell_layout_clear_attributes$handle() {
        return gtk_cell_layout_clear_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_layout_clear_attributes(GtkCellLayout *cell_layout, GtkCellRenderer *cell)
     * }
     */
    public static void gtk_cell_layout_clear_attributes(MemorySegment cell_layout, MemorySegment cell) {
        var mh$ = gtk_cell_layout_clear_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_layout_clear_attributes", cell_layout, cell);
            }
            mh$.invokeExact(cell_layout, cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_layout_reorder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_layout_reorder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_reorder(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gint position)
     * }
     */
    public static FunctionDescriptor gtk_cell_layout_reorder$descriptor() {
        return gtk_cell_layout_reorder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_layout_reorder(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gint position)
     * }
     */
    public static MethodHandle gtk_cell_layout_reorder$handle() {
        return gtk_cell_layout_reorder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_layout_reorder(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gint position)
     * }
     */
    public static void gtk_cell_layout_reorder(MemorySegment cell_layout, MemorySegment cell, int position) {
        var mh$ = gtk_cell_layout_reorder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_layout_reorder", cell_layout, cell, position);
            }
            mh$.invokeExact(cell_layout, cell, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_layout_get_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_layout_get_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellArea *gtk_cell_layout_get_area(GtkCellLayout *cell_layout)
     * }
     */
    public static FunctionDescriptor gtk_cell_layout_get_area$descriptor() {
        return gtk_cell_layout_get_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellArea *gtk_cell_layout_get_area(GtkCellLayout *cell_layout)
     * }
     */
    public static MethodHandle gtk_cell_layout_get_area$handle() {
        return gtk_cell_layout_get_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellArea *gtk_cell_layout_get_area(GtkCellLayout *cell_layout)
     * }
     */
    public static MemorySegment gtk_cell_layout_get_area(MemorySegment cell_layout) {
        var mh$ = gtk_cell_layout_get_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_layout_get_area", cell_layout);
            }
            return (MemorySegment)mh$.invokeExact(cell_layout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_cell_layout_buildable_custom_tag_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_cell_layout_buildable_custom_tag_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gboolean _gtk_cell_layout_buildable_custom_tag_start(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, GMarkupParser *parser, gpointer *data)
     * }
     */
    public static FunctionDescriptor _gtk_cell_layout_buildable_custom_tag_start$descriptor() {
        return _gtk_cell_layout_buildable_custom_tag_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gboolean _gtk_cell_layout_buildable_custom_tag_start(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, GMarkupParser *parser, gpointer *data)
     * }
     */
    public static MethodHandle _gtk_cell_layout_buildable_custom_tag_start$handle() {
        return _gtk_cell_layout_buildable_custom_tag_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * gboolean _gtk_cell_layout_buildable_custom_tag_start(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, GMarkupParser *parser, gpointer *data)
     * }
     */
    public static int _gtk_cell_layout_buildable_custom_tag_start(MemorySegment buildable, MemorySegment builder, MemorySegment child, MemorySegment tagname, MemorySegment parser, MemorySegment data) {
        var mh$ = _gtk_cell_layout_buildable_custom_tag_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_cell_layout_buildable_custom_tag_start", buildable, builder, child, tagname, parser, data);
            }
            return (int)mh$.invokeExact(buildable, builder, child, tagname, parser, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_cell_layout_buildable_custom_tag_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_cell_layout_buildable_custom_tag_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * gboolean _gtk_cell_layout_buildable_custom_tag_end(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer *data)
     * }
     */
    public static FunctionDescriptor _gtk_cell_layout_buildable_custom_tag_end$descriptor() {
        return _gtk_cell_layout_buildable_custom_tag_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * gboolean _gtk_cell_layout_buildable_custom_tag_end(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer *data)
     * }
     */
    public static MethodHandle _gtk_cell_layout_buildable_custom_tag_end$handle() {
        return _gtk_cell_layout_buildable_custom_tag_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * gboolean _gtk_cell_layout_buildable_custom_tag_end(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer *data)
     * }
     */
    public static int _gtk_cell_layout_buildable_custom_tag_end(MemorySegment buildable, MemorySegment builder, MemorySegment child, MemorySegment tagname, MemorySegment data) {
        var mh$ = _gtk_cell_layout_buildable_custom_tag_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_cell_layout_buildable_custom_tag_end", buildable, builder, child, tagname, data);
            }
            return (int)mh$.invokeExact(buildable, builder, child, tagname, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_cell_layout_buildable_add_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_cell_layout_buildable_add_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_cell_layout_buildable_add_child(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *type)
     * }
     */
    public static FunctionDescriptor _gtk_cell_layout_buildable_add_child$descriptor() {
        return _gtk_cell_layout_buildable_add_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_cell_layout_buildable_add_child(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *type)
     * }
     */
    public static MethodHandle _gtk_cell_layout_buildable_add_child$handle() {
        return _gtk_cell_layout_buildable_add_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_cell_layout_buildable_add_child(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *type)
     * }
     */
    public static void _gtk_cell_layout_buildable_add_child(MemorySegment buildable, MemorySegment builder, MemorySegment child, MemorySegment type) {
        var mh$ = _gtk_cell_layout_buildable_add_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_cell_layout_buildable_add_child", buildable, builder, child, type);
            }
            mh$.invokeExact(buildable, builder, child, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_text_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_text_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_text_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_text_get_type$descriptor() {
        return gtk_cell_renderer_text_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_text_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_text_get_type$handle() {
        return gtk_cell_renderer_text_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_text_get_type()
     * }
     */
    public static long gtk_cell_renderer_text_get_type() {
        var mh$ = gtk_cell_renderer_text_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_text_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_text_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_text_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_text_new()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_text_new$descriptor() {
        return gtk_cell_renderer_text_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_text_new()
     * }
     */
    public static MethodHandle gtk_cell_renderer_text_new$handle() {
        return gtk_cell_renderer_text_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_text_new()
     * }
     */
    public static MemorySegment gtk_cell_renderer_text_new() {
        var mh$ = gtk_cell_renderer_text_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_text_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_text_set_fixed_height_from_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_text_set_fixed_height_from_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_text_set_fixed_height_from_font(GtkCellRendererText *renderer, gint number_of_rows)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_text_set_fixed_height_from_font$descriptor() {
        return gtk_cell_renderer_text_set_fixed_height_from_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_text_set_fixed_height_from_font(GtkCellRendererText *renderer, gint number_of_rows)
     * }
     */
    public static MethodHandle gtk_cell_renderer_text_set_fixed_height_from_font$handle() {
        return gtk_cell_renderer_text_set_fixed_height_from_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_text_set_fixed_height_from_font(GtkCellRendererText *renderer, gint number_of_rows)
     * }
     */
    public static void gtk_cell_renderer_text_set_fixed_height_from_font(MemorySegment renderer, int number_of_rows) {
        var mh$ = gtk_cell_renderer_text_set_fixed_height_from_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_text_set_fixed_height_from_font", renderer, number_of_rows);
            }
            mh$.invokeExact(renderer, number_of_rows);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_CELL_RENDERER_ACCEL_MODE_GTK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_ACCEL_MODE_GTK = 0
     * }
     */
    public static int GTK_CELL_RENDERER_ACCEL_MODE_GTK() {
        return GTK_CELL_RENDERER_ACCEL_MODE_GTK;
    }
    private static final int GTK_CELL_RENDERER_ACCEL_MODE_OTHER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CELL_RENDERER_ACCEL_MODE_OTHER = 1
     * }
     */
    public static int GTK_CELL_RENDERER_ACCEL_MODE_OTHER() {
        return GTK_CELL_RENDERER_ACCEL_MODE_OTHER;
    }

    private static class gtk_cell_renderer_accel_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_accel_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_accel_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_accel_get_type$descriptor() {
        return gtk_cell_renderer_accel_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_accel_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_accel_get_type$handle() {
        return gtk_cell_renderer_accel_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_accel_get_type()
     * }
     */
    public static long gtk_cell_renderer_accel_get_type() {
        var mh$ = gtk_cell_renderer_accel_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_accel_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_accel_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_accel_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_accel_new()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_accel_new$descriptor() {
        return gtk_cell_renderer_accel_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_accel_new()
     * }
     */
    public static MethodHandle gtk_cell_renderer_accel_new$handle() {
        return gtk_cell_renderer_accel_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_accel_new()
     * }
     */
    public static MemorySegment gtk_cell_renderer_accel_new() {
        var mh$ = gtk_cell_renderer_accel_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_accel_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_combo_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_combo_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_combo_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_combo_get_type$descriptor() {
        return gtk_cell_renderer_combo_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_combo_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_combo_get_type$handle() {
        return gtk_cell_renderer_combo_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_combo_get_type()
     * }
     */
    public static long gtk_cell_renderer_combo_get_type() {
        var mh$ = gtk_cell_renderer_combo_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_combo_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_combo_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_combo_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_combo_new()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_combo_new$descriptor() {
        return gtk_cell_renderer_combo_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_combo_new()
     * }
     */
    public static MethodHandle gtk_cell_renderer_combo_new$handle() {
        return gtk_cell_renderer_combo_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_combo_new()
     * }
     */
    public static MemorySegment gtk_cell_renderer_combo_new() {
        var mh$ = gtk_cell_renderer_combo_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_combo_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_pixbuf_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_pixbuf_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_pixbuf_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_pixbuf_get_type$descriptor() {
        return gtk_cell_renderer_pixbuf_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_pixbuf_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_pixbuf_get_type$handle() {
        return gtk_cell_renderer_pixbuf_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_pixbuf_get_type()
     * }
     */
    public static long gtk_cell_renderer_pixbuf_get_type() {
        var mh$ = gtk_cell_renderer_pixbuf_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_pixbuf_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_pixbuf_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_pixbuf_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_pixbuf_new()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_pixbuf_new$descriptor() {
        return gtk_cell_renderer_pixbuf_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_pixbuf_new()
     * }
     */
    public static MethodHandle gtk_cell_renderer_pixbuf_new$handle() {
        return gtk_cell_renderer_pixbuf_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_pixbuf_new()
     * }
     */
    public static MemorySegment gtk_cell_renderer_pixbuf_new() {
        var mh$ = gtk_cell_renderer_pixbuf_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_pixbuf_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_progress_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_progress_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_progress_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_progress_get_type$descriptor() {
        return gtk_cell_renderer_progress_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_progress_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_progress_get_type$handle() {
        return gtk_cell_renderer_progress_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_progress_get_type()
     * }
     */
    public static long gtk_cell_renderer_progress_get_type() {
        var mh$ = gtk_cell_renderer_progress_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_progress_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_progress_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_progress_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_progress_new()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_progress_new$descriptor() {
        return gtk_cell_renderer_progress_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_progress_new()
     * }
     */
    public static MethodHandle gtk_cell_renderer_progress_new$handle() {
        return gtk_cell_renderer_progress_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_progress_new()
     * }
     */
    public static MemorySegment gtk_cell_renderer_progress_new() {
        var mh$ = gtk_cell_renderer_progress_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_progress_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_spin_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_spin_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_spin_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_spin_get_type$descriptor() {
        return gtk_cell_renderer_spin_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_spin_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_spin_get_type$handle() {
        return gtk_cell_renderer_spin_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_spin_get_type()
     * }
     */
    public static long gtk_cell_renderer_spin_get_type() {
        var mh$ = gtk_cell_renderer_spin_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_spin_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_spin_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_spin_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_spin_new()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_spin_new$descriptor() {
        return gtk_cell_renderer_spin_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_spin_new()
     * }
     */
    public static MethodHandle gtk_cell_renderer_spin_new$handle() {
        return gtk_cell_renderer_spin_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_spin_new()
     * }
     */
    public static MemorySegment gtk_cell_renderer_spin_new() {
        var mh$ = gtk_cell_renderer_spin_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_spin_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_spinner_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_spinner_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_spinner_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_spinner_get_type$descriptor() {
        return gtk_cell_renderer_spinner_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_spinner_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_spinner_get_type$handle() {
        return gtk_cell_renderer_spinner_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_spinner_get_type()
     * }
     */
    public static long gtk_cell_renderer_spinner_get_type() {
        var mh$ = gtk_cell_renderer_spinner_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_spinner_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_spinner_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_spinner_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_spinner_new()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_spinner_new$descriptor() {
        return gtk_cell_renderer_spinner_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_spinner_new()
     * }
     */
    public static MethodHandle gtk_cell_renderer_spinner_new$handle() {
        return gtk_cell_renderer_spinner_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_spinner_new()
     * }
     */
    public static MemorySegment gtk_cell_renderer_spinner_new() {
        var mh$ = gtk_cell_renderer_spinner_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_spinner_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_toggle_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_toggle_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_toggle_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_toggle_get_type$descriptor() {
        return gtk_cell_renderer_toggle_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_toggle_get_type()
     * }
     */
    public static MethodHandle gtk_cell_renderer_toggle_get_type$handle() {
        return gtk_cell_renderer_toggle_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_renderer_toggle_get_type()
     * }
     */
    public static long gtk_cell_renderer_toggle_get_type() {
        var mh$ = gtk_cell_renderer_toggle_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_toggle_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_toggle_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_toggle_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_toggle_new()
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_toggle_new$descriptor() {
        return gtk_cell_renderer_toggle_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_toggle_new()
     * }
     */
    public static MethodHandle gtk_cell_renderer_toggle_new$handle() {
        return gtk_cell_renderer_toggle_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCellRenderer *gtk_cell_renderer_toggle_new()
     * }
     */
    public static MemorySegment gtk_cell_renderer_toggle_new() {
        var mh$ = gtk_cell_renderer_toggle_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_toggle_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_toggle_get_radio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_toggle_get_radio"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_toggle_get_radio(GtkCellRendererToggle *toggle)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_toggle_get_radio$descriptor() {
        return gtk_cell_renderer_toggle_get_radio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_toggle_get_radio(GtkCellRendererToggle *toggle)
     * }
     */
    public static MethodHandle gtk_cell_renderer_toggle_get_radio$handle() {
        return gtk_cell_renderer_toggle_get_radio.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_toggle_get_radio(GtkCellRendererToggle *toggle)
     * }
     */
    public static int gtk_cell_renderer_toggle_get_radio(MemorySegment toggle) {
        var mh$ = gtk_cell_renderer_toggle_get_radio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_toggle_get_radio", toggle);
            }
            return (int)mh$.invokeExact(toggle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_toggle_set_radio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_toggle_set_radio"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_toggle_set_radio(GtkCellRendererToggle *toggle, gboolean radio)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_toggle_set_radio$descriptor() {
        return gtk_cell_renderer_toggle_set_radio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_toggle_set_radio(GtkCellRendererToggle *toggle, gboolean radio)
     * }
     */
    public static MethodHandle gtk_cell_renderer_toggle_set_radio$handle() {
        return gtk_cell_renderer_toggle_set_radio.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_toggle_set_radio(GtkCellRendererToggle *toggle, gboolean radio)
     * }
     */
    public static void gtk_cell_renderer_toggle_set_radio(MemorySegment toggle, int radio) {
        var mh$ = gtk_cell_renderer_toggle_set_radio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_toggle_set_radio", toggle, radio);
            }
            mh$.invokeExact(toggle, radio);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_toggle_get_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_toggle_get_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_toggle_get_active(GtkCellRendererToggle *toggle)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_toggle_get_active$descriptor() {
        return gtk_cell_renderer_toggle_get_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_toggle_get_active(GtkCellRendererToggle *toggle)
     * }
     */
    public static MethodHandle gtk_cell_renderer_toggle_get_active$handle() {
        return gtk_cell_renderer_toggle_get_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_toggle_get_active(GtkCellRendererToggle *toggle)
     * }
     */
    public static int gtk_cell_renderer_toggle_get_active(MemorySegment toggle) {
        var mh$ = gtk_cell_renderer_toggle_get_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_toggle_get_active", toggle);
            }
            return (int)mh$.invokeExact(toggle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_toggle_set_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_toggle_set_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_toggle_set_active(GtkCellRendererToggle *toggle, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_toggle_set_active$descriptor() {
        return gtk_cell_renderer_toggle_set_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_toggle_set_active(GtkCellRendererToggle *toggle, gboolean setting)
     * }
     */
    public static MethodHandle gtk_cell_renderer_toggle_set_active$handle() {
        return gtk_cell_renderer_toggle_set_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_toggle_set_active(GtkCellRendererToggle *toggle, gboolean setting)
     * }
     */
    public static void gtk_cell_renderer_toggle_set_active(MemorySegment toggle, int setting) {
        var mh$ = gtk_cell_renderer_toggle_set_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_toggle_set_active", toggle, setting);
            }
            mh$.invokeExact(toggle, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_toggle_get_activatable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_toggle_get_activatable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_toggle_get_activatable(GtkCellRendererToggle *toggle)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_toggle_get_activatable$descriptor() {
        return gtk_cell_renderer_toggle_get_activatable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_toggle_get_activatable(GtkCellRendererToggle *toggle)
     * }
     */
    public static MethodHandle gtk_cell_renderer_toggle_get_activatable$handle() {
        return gtk_cell_renderer_toggle_get_activatable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_renderer_toggle_get_activatable(GtkCellRendererToggle *toggle)
     * }
     */
    public static int gtk_cell_renderer_toggle_get_activatable(MemorySegment toggle) {
        var mh$ = gtk_cell_renderer_toggle_get_activatable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_toggle_get_activatable", toggle);
            }
            return (int)mh$.invokeExact(toggle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_renderer_toggle_set_activatable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_renderer_toggle_set_activatable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_toggle_set_activatable(GtkCellRendererToggle *toggle, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_cell_renderer_toggle_set_activatable$descriptor() {
        return gtk_cell_renderer_toggle_set_activatable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_toggle_set_activatable(GtkCellRendererToggle *toggle, gboolean setting)
     * }
     */
    public static MethodHandle gtk_cell_renderer_toggle_set_activatable$handle() {
        return gtk_cell_renderer_toggle_set_activatable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_renderer_toggle_set_activatable(GtkCellRendererToggle *toggle, gboolean setting)
     * }
     */
    public static void gtk_cell_renderer_toggle_set_activatable(MemorySegment toggle, int setting) {
        var mh$ = gtk_cell_renderer_toggle_set_activatable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_renderer_toggle_set_activatable", toggle, setting);
            }
            mh$.invokeExact(toggle, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_cell_view_get_type()
     * }
     */
    public static FunctionDescriptor gtk_cell_view_get_type$descriptor() {
        return gtk_cell_view_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_cell_view_get_type()
     * }
     */
    public static MethodHandle gtk_cell_view_get_type$handle() {
        return gtk_cell_view_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_cell_view_get_type()
     * }
     */
    public static long gtk_cell_view_get_type() {
        var mh$ = gtk_cell_view_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new()
     * }
     */
    public static FunctionDescriptor gtk_cell_view_new$descriptor() {
        return gtk_cell_view_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new()
     * }
     */
    public static MethodHandle gtk_cell_view_new$handle() {
        return gtk_cell_view_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new()
     * }
     */
    public static MemorySegment gtk_cell_view_new() {
        var mh$ = gtk_cell_view_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_new_with_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_new_with_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_context(GtkCellArea *area, GtkCellAreaContext *context)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_new_with_context$descriptor() {
        return gtk_cell_view_new_with_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_context(GtkCellArea *area, GtkCellAreaContext *context)
     * }
     */
    public static MethodHandle gtk_cell_view_new_with_context$handle() {
        return gtk_cell_view_new_with_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_context(GtkCellArea *area, GtkCellAreaContext *context)
     * }
     */
    public static MemorySegment gtk_cell_view_new_with_context(MemorySegment area, MemorySegment context) {
        var mh$ = gtk_cell_view_new_with_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_new_with_context", area, context);
            }
            return (MemorySegment)mh$.invokeExact(area, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_new_with_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_new_with_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_text(const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_new_with_text$descriptor() {
        return gtk_cell_view_new_with_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_text(const gchar *text)
     * }
     */
    public static MethodHandle gtk_cell_view_new_with_text$handle() {
        return gtk_cell_view_new_with_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_text(const gchar *text)
     * }
     */
    public static MemorySegment gtk_cell_view_new_with_text(MemorySegment text) {
        var mh$ = gtk_cell_view_new_with_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_new_with_text", text);
            }
            return (MemorySegment)mh$.invokeExact(text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_new_with_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_new_with_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_markup(const gchar *markup)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_new_with_markup$descriptor() {
        return gtk_cell_view_new_with_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_markup(const gchar *markup)
     * }
     */
    public static MethodHandle gtk_cell_view_new_with_markup$handle() {
        return gtk_cell_view_new_with_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_markup(const gchar *markup)
     * }
     */
    public static MemorySegment gtk_cell_view_new_with_markup(MemorySegment markup) {
        var mh$ = gtk_cell_view_new_with_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_new_with_markup", markup);
            }
            return (MemorySegment)mh$.invokeExact(markup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_new_with_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_new_with_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_new_with_pixbuf$descriptor() {
        return gtk_cell_view_new_with_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_cell_view_new_with_pixbuf$handle() {
        return gtk_cell_view_new_with_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_cell_view_new_with_pixbuf(GdkPixbuf *pixbuf)
     * }
     */
    public static MemorySegment gtk_cell_view_new_with_pixbuf(MemorySegment pixbuf) {
        var mh$ = gtk_cell_view_new_with_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_new_with_pixbuf", pixbuf);
            }
            return (MemorySegment)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_set_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_set_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_model(GtkCellView *cell_view, GtkTreeModel *model)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_set_model$descriptor() {
        return gtk_cell_view_set_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_model(GtkCellView *cell_view, GtkTreeModel *model)
     * }
     */
    public static MethodHandle gtk_cell_view_set_model$handle() {
        return gtk_cell_view_set_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_model(GtkCellView *cell_view, GtkTreeModel *model)
     * }
     */
    public static void gtk_cell_view_set_model(MemorySegment cell_view, MemorySegment model) {
        var mh$ = gtk_cell_view_set_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_set_model", cell_view, model);
            }
            mh$.invokeExact(cell_view, model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_get_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_get_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_cell_view_get_model(GtkCellView *cell_view)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_get_model$descriptor() {
        return gtk_cell_view_get_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_cell_view_get_model(GtkCellView *cell_view)
     * }
     */
    public static MethodHandle gtk_cell_view_get_model$handle() {
        return gtk_cell_view_get_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreeModel *gtk_cell_view_get_model(GtkCellView *cell_view)
     * }
     */
    public static MemorySegment gtk_cell_view_get_model(MemorySegment cell_view) {
        var mh$ = gtk_cell_view_get_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_get_model", cell_view);
            }
            return (MemorySegment)mh$.invokeExact(cell_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_set_displayed_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_set_displayed_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_displayed_row(GtkCellView *cell_view, GtkTreePath *path)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_set_displayed_row$descriptor() {
        return gtk_cell_view_set_displayed_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_displayed_row(GtkCellView *cell_view, GtkTreePath *path)
     * }
     */
    public static MethodHandle gtk_cell_view_set_displayed_row$handle() {
        return gtk_cell_view_set_displayed_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_displayed_row(GtkCellView *cell_view, GtkTreePath *path)
     * }
     */
    public static void gtk_cell_view_set_displayed_row(MemorySegment cell_view, MemorySegment path) {
        var mh$ = gtk_cell_view_set_displayed_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_set_displayed_row", cell_view, path);
            }
            mh$.invokeExact(cell_view, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_get_displayed_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_get_displayed_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_cell_view_get_displayed_row(GtkCellView *cell_view)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_get_displayed_row$descriptor() {
        return gtk_cell_view_get_displayed_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_cell_view_get_displayed_row(GtkCellView *cell_view)
     * }
     */
    public static MethodHandle gtk_cell_view_get_displayed_row$handle() {
        return gtk_cell_view_get_displayed_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTreePath *gtk_cell_view_get_displayed_row(GtkCellView *cell_view)
     * }
     */
    public static MemorySegment gtk_cell_view_get_displayed_row(MemorySegment cell_view) {
        var mh$ = gtk_cell_view_get_displayed_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_get_displayed_row", cell_view);
            }
            return (MemorySegment)mh$.invokeExact(cell_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_set_background_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_set_background_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_background_rgba(GtkCellView *cell_view, const GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_set_background_rgba$descriptor() {
        return gtk_cell_view_set_background_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_background_rgba(GtkCellView *cell_view, const GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gtk_cell_view_set_background_rgba$handle() {
        return gtk_cell_view_set_background_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_background_rgba(GtkCellView *cell_view, const GdkRGBA *rgba)
     * }
     */
    public static void gtk_cell_view_set_background_rgba(MemorySegment cell_view, MemorySegment rgba) {
        var mh$ = gtk_cell_view_set_background_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_set_background_rgba", cell_view, rgba);
            }
            mh$.invokeExact(cell_view, rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_get_draw_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_get_draw_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_view_get_draw_sensitive(GtkCellView *cell_view)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_get_draw_sensitive$descriptor() {
        return gtk_cell_view_get_draw_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_view_get_draw_sensitive(GtkCellView *cell_view)
     * }
     */
    public static MethodHandle gtk_cell_view_get_draw_sensitive$handle() {
        return gtk_cell_view_get_draw_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_view_get_draw_sensitive(GtkCellView *cell_view)
     * }
     */
    public static int gtk_cell_view_get_draw_sensitive(MemorySegment cell_view) {
        var mh$ = gtk_cell_view_get_draw_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_get_draw_sensitive", cell_view);
            }
            return (int)mh$.invokeExact(cell_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_set_draw_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_set_draw_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_draw_sensitive(GtkCellView *cell_view, gboolean draw_sensitive)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_set_draw_sensitive$descriptor() {
        return gtk_cell_view_set_draw_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_draw_sensitive(GtkCellView *cell_view, gboolean draw_sensitive)
     * }
     */
    public static MethodHandle gtk_cell_view_set_draw_sensitive$handle() {
        return gtk_cell_view_set_draw_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_draw_sensitive(GtkCellView *cell_view, gboolean draw_sensitive)
     * }
     */
    public static void gtk_cell_view_set_draw_sensitive(MemorySegment cell_view, int draw_sensitive) {
        var mh$ = gtk_cell_view_set_draw_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_set_draw_sensitive", cell_view, draw_sensitive);
            }
            mh$.invokeExact(cell_view, draw_sensitive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_get_fit_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_get_fit_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_view_get_fit_model(GtkCellView *cell_view)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_get_fit_model$descriptor() {
        return gtk_cell_view_get_fit_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_view_get_fit_model(GtkCellView *cell_view)
     * }
     */
    public static MethodHandle gtk_cell_view_get_fit_model$handle() {
        return gtk_cell_view_get_fit_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_view_get_fit_model(GtkCellView *cell_view)
     * }
     */
    public static int gtk_cell_view_get_fit_model(MemorySegment cell_view) {
        var mh$ = gtk_cell_view_get_fit_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_get_fit_model", cell_view);
            }
            return (int)mh$.invokeExact(cell_view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_set_fit_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_set_fit_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_fit_model(GtkCellView *cell_view, gboolean fit_model)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_set_fit_model$descriptor() {
        return gtk_cell_view_set_fit_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_fit_model(GtkCellView *cell_view, gboolean fit_model)
     * }
     */
    public static MethodHandle gtk_cell_view_set_fit_model$handle() {
        return gtk_cell_view_set_fit_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_fit_model(GtkCellView *cell_view, gboolean fit_model)
     * }
     */
    public static void gtk_cell_view_set_fit_model(MemorySegment cell_view, int fit_model) {
        var mh$ = gtk_cell_view_set_fit_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_set_fit_model", cell_view, fit_model);
            }
            mh$.invokeExact(cell_view, fit_model);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_get_size_of_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_get_size_of_row"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_view_get_size_of_row(GtkCellView *cell_view, GtkTreePath *path, GtkRequisition *requisition)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_get_size_of_row$descriptor() {
        return gtk_cell_view_get_size_of_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cell_view_get_size_of_row(GtkCellView *cell_view, GtkTreePath *path, GtkRequisition *requisition)
     * }
     */
    public static MethodHandle gtk_cell_view_get_size_of_row$handle() {
        return gtk_cell_view_get_size_of_row.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cell_view_get_size_of_row(GtkCellView *cell_view, GtkTreePath *path, GtkRequisition *requisition)
     * }
     */
    public static int gtk_cell_view_get_size_of_row(MemorySegment cell_view, MemorySegment path, MemorySegment requisition) {
        var mh$ = gtk_cell_view_get_size_of_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_get_size_of_row", cell_view, path, requisition);
            }
            return (int)mh$.invokeExact(cell_view, path, requisition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cell_view_set_background_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cell_view_set_background_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_background_color(GtkCellView *cell_view, const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_cell_view_set_background_color$descriptor() {
        return gtk_cell_view_set_background_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_background_color(GtkCellView *cell_view, const GdkColor *color)
     * }
     */
    public static MethodHandle gtk_cell_view_set_background_color$handle() {
        return gtk_cell_view_set_background_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cell_view_set_background_color(GtkCellView *cell_view, const GdkColor *color)
     * }
     */
    public static void gtk_cell_view_set_background_color(MemorySegment cell_view, MemorySegment color) {
        var mh$ = gtk_cell_view_set_background_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cell_view_set_background_color", cell_view, color);
            }
            mh$.invokeExact(cell_view, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_toggle_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_get_type$descriptor() {
        return gtk_toggle_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_toggle_button_get_type()
     * }
     */
    public static MethodHandle gtk_toggle_button_get_type$handle() {
        return gtk_toggle_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_toggle_button_get_type()
     * }
     */
    public static long gtk_toggle_button_get_type() {
        var mh$ = gtk_toggle_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toggle_button_new()
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_new$descriptor() {
        return gtk_toggle_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toggle_button_new()
     * }
     */
    public static MethodHandle gtk_toggle_button_new$handle() {
        return gtk_toggle_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toggle_button_new()
     * }
     */
    public static MemorySegment gtk_toggle_button_new() {
        var mh$ = gtk_toggle_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_new_with_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_new_with_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toggle_button_new_with_label(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_new_with_label$descriptor() {
        return gtk_toggle_button_new_with_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toggle_button_new_with_label(const gchar *label)
     * }
     */
    public static MethodHandle gtk_toggle_button_new_with_label$handle() {
        return gtk_toggle_button_new_with_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toggle_button_new_with_label(const gchar *label)
     * }
     */
    public static MemorySegment gtk_toggle_button_new_with_label(MemorySegment label) {
        var mh$ = gtk_toggle_button_new_with_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_new_with_label", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_new_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_new_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toggle_button_new_with_mnemonic(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_new_with_mnemonic$descriptor() {
        return gtk_toggle_button_new_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toggle_button_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MethodHandle gtk_toggle_button_new_with_mnemonic$handle() {
        return gtk_toggle_button_new_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_toggle_button_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MemorySegment gtk_toggle_button_new_with_mnemonic(MemorySegment label) {
        var mh$ = gtk_toggle_button_new_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_new_with_mnemonic", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_set_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_set_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toggle_button_set_mode(GtkToggleButton *toggle_button, gboolean draw_indicator)
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_set_mode$descriptor() {
        return gtk_toggle_button_set_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toggle_button_set_mode(GtkToggleButton *toggle_button, gboolean draw_indicator)
     * }
     */
    public static MethodHandle gtk_toggle_button_set_mode$handle() {
        return gtk_toggle_button_set_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toggle_button_set_mode(GtkToggleButton *toggle_button, gboolean draw_indicator)
     * }
     */
    public static void gtk_toggle_button_set_mode(MemorySegment toggle_button, int draw_indicator) {
        var mh$ = gtk_toggle_button_set_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_set_mode", toggle_button, draw_indicator);
            }
            mh$.invokeExact(toggle_button, draw_indicator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_get_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_get_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_button_get_mode(GtkToggleButton *toggle_button)
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_get_mode$descriptor() {
        return gtk_toggle_button_get_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_button_get_mode(GtkToggleButton *toggle_button)
     * }
     */
    public static MethodHandle gtk_toggle_button_get_mode$handle() {
        return gtk_toggle_button_get_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_button_get_mode(GtkToggleButton *toggle_button)
     * }
     */
    public static int gtk_toggle_button_get_mode(MemorySegment toggle_button) {
        var mh$ = gtk_toggle_button_get_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_get_mode", toggle_button);
            }
            return (int)mh$.invokeExact(toggle_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_set_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_set_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toggle_button_set_active(GtkToggleButton *toggle_button, gboolean is_active)
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_set_active$descriptor() {
        return gtk_toggle_button_set_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toggle_button_set_active(GtkToggleButton *toggle_button, gboolean is_active)
     * }
     */
    public static MethodHandle gtk_toggle_button_set_active$handle() {
        return gtk_toggle_button_set_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toggle_button_set_active(GtkToggleButton *toggle_button, gboolean is_active)
     * }
     */
    public static void gtk_toggle_button_set_active(MemorySegment toggle_button, int is_active) {
        var mh$ = gtk_toggle_button_set_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_set_active", toggle_button, is_active);
            }
            mh$.invokeExact(toggle_button, is_active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_get_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_get_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_button_get_active(GtkToggleButton *toggle_button)
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_get_active$descriptor() {
        return gtk_toggle_button_get_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_button_get_active(GtkToggleButton *toggle_button)
     * }
     */
    public static MethodHandle gtk_toggle_button_get_active$handle() {
        return gtk_toggle_button_get_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_button_get_active(GtkToggleButton *toggle_button)
     * }
     */
    public static int gtk_toggle_button_get_active(MemorySegment toggle_button) {
        var mh$ = gtk_toggle_button_get_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_get_active", toggle_button);
            }
            return (int)mh$.invokeExact(toggle_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_toggled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_toggled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toggle_button_toggled(GtkToggleButton *toggle_button)
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_toggled$descriptor() {
        return gtk_toggle_button_toggled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toggle_button_toggled(GtkToggleButton *toggle_button)
     * }
     */
    public static MethodHandle gtk_toggle_button_toggled$handle() {
        return gtk_toggle_button_toggled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toggle_button_toggled(GtkToggleButton *toggle_button)
     * }
     */
    public static void gtk_toggle_button_toggled(MemorySegment toggle_button) {
        var mh$ = gtk_toggle_button_toggled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_toggled", toggle_button);
            }
            mh$.invokeExact(toggle_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_set_inconsistent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_set_inconsistent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_toggle_button_set_inconsistent(GtkToggleButton *toggle_button, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_set_inconsistent$descriptor() {
        return gtk_toggle_button_set_inconsistent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_toggle_button_set_inconsistent(GtkToggleButton *toggle_button, gboolean setting)
     * }
     */
    public static MethodHandle gtk_toggle_button_set_inconsistent$handle() {
        return gtk_toggle_button_set_inconsistent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_toggle_button_set_inconsistent(GtkToggleButton *toggle_button, gboolean setting)
     * }
     */
    public static void gtk_toggle_button_set_inconsistent(MemorySegment toggle_button, int setting) {
        var mh$ = gtk_toggle_button_set_inconsistent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_set_inconsistent", toggle_button, setting);
            }
            mh$.invokeExact(toggle_button, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_toggle_button_get_inconsistent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_toggle_button_get_inconsistent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_button_get_inconsistent(GtkToggleButton *toggle_button)
     * }
     */
    public static FunctionDescriptor gtk_toggle_button_get_inconsistent$descriptor() {
        return gtk_toggle_button_get_inconsistent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_button_get_inconsistent(GtkToggleButton *toggle_button)
     * }
     */
    public static MethodHandle gtk_toggle_button_get_inconsistent$handle() {
        return gtk_toggle_button_get_inconsistent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_toggle_button_get_inconsistent(GtkToggleButton *toggle_button)
     * }
     */
    public static int gtk_toggle_button_get_inconsistent(MemorySegment toggle_button) {
        var mh$ = gtk_toggle_button_get_inconsistent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_toggle_button_get_inconsistent", toggle_button);
            }
            return (int)mh$.invokeExact(toggle_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_check_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_check_button_get_type$descriptor() {
        return gtk_check_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_check_button_get_type()
     * }
     */
    public static MethodHandle gtk_check_button_get_type$handle() {
        return gtk_check_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_check_button_get_type()
     * }
     */
    public static long gtk_check_button_get_type() {
        var mh$ = gtk_check_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_button_new()
     * }
     */
    public static FunctionDescriptor gtk_check_button_new$descriptor() {
        return gtk_check_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_button_new()
     * }
     */
    public static MethodHandle gtk_check_button_new$handle() {
        return gtk_check_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_button_new()
     * }
     */
    public static MemorySegment gtk_check_button_new() {
        var mh$ = gtk_check_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_button_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_button_new_with_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_button_new_with_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_button_new_with_label(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_check_button_new_with_label$descriptor() {
        return gtk_check_button_new_with_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_button_new_with_label(const gchar *label)
     * }
     */
    public static MethodHandle gtk_check_button_new_with_label$handle() {
        return gtk_check_button_new_with_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_button_new_with_label(const gchar *label)
     * }
     */
    public static MemorySegment gtk_check_button_new_with_label(MemorySegment label) {
        var mh$ = gtk_check_button_new_with_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_button_new_with_label", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_button_new_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_button_new_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_button_new_with_mnemonic(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_check_button_new_with_mnemonic$descriptor() {
        return gtk_check_button_new_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_button_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MethodHandle gtk_check_button_new_with_mnemonic$handle() {
        return gtk_check_button_new_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_button_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MemorySegment gtk_check_button_new_with_mnemonic(MemorySegment label) {
        var mh$ = gtk_check_button_new_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_button_new_with_mnemonic", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_check_button_get_props {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_check_button_get_props"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_check_button_get_props(GtkCheckButton *check_button, gint *indicator_size, gint *indicator_spacing)
     * }
     */
    public static FunctionDescriptor _gtk_check_button_get_props$descriptor() {
        return _gtk_check_button_get_props.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_check_button_get_props(GtkCheckButton *check_button, gint *indicator_size, gint *indicator_spacing)
     * }
     */
    public static MethodHandle _gtk_check_button_get_props$handle() {
        return _gtk_check_button_get_props.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_check_button_get_props(GtkCheckButton *check_button, gint *indicator_size, gint *indicator_spacing)
     * }
     */
    public static void _gtk_check_button_get_props(MemorySegment check_button, MemorySegment indicator_size, MemorySegment indicator_spacing) {
        var mh$ = _gtk_check_button_get_props.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_check_button_get_props", check_button, indicator_size, indicator_spacing);
            }
            mh$.invokeExact(check_button, indicator_size, indicator_spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_menu_item_get_type()
     * }
     */
    public static FunctionDescriptor gtk_menu_item_get_type$descriptor() {
        return gtk_menu_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_menu_item_get_type()
     * }
     */
    public static MethodHandle gtk_menu_item_get_type$handle() {
        return gtk_menu_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_menu_item_get_type()
     * }
     */
    public static long gtk_menu_item_get_type() {
        var mh$ = gtk_menu_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new()
     * }
     */
    public static FunctionDescriptor gtk_menu_item_new$descriptor() {
        return gtk_menu_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new()
     * }
     */
    public static MethodHandle gtk_menu_item_new$handle() {
        return gtk_menu_item_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new()
     * }
     */
    public static MemorySegment gtk_menu_item_new() {
        var mh$ = gtk_menu_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_new_with_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_new_with_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_new_with_label$descriptor() {
        return gtk_menu_item_new_with_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static MethodHandle gtk_menu_item_new_with_label$handle() {
        return gtk_menu_item_new_with_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static MemorySegment gtk_menu_item_new_with_label(MemorySegment label) {
        var mh$ = gtk_menu_item_new_with_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_new_with_label", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_new_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_new_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new_with_mnemonic(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_new_with_mnemonic$descriptor() {
        return gtk_menu_item_new_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MethodHandle gtk_menu_item_new_with_mnemonic$handle() {
        return gtk_menu_item_new_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MemorySegment gtk_menu_item_new_with_mnemonic(MemorySegment label) {
        var mh$ = gtk_menu_item_new_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_new_with_mnemonic", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_set_submenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_set_submenu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_submenu(GtkMenuItem *menu_item, GtkWidget *submenu)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_set_submenu$descriptor() {
        return gtk_menu_item_set_submenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_submenu(GtkMenuItem *menu_item, GtkWidget *submenu)
     * }
     */
    public static MethodHandle gtk_menu_item_set_submenu$handle() {
        return gtk_menu_item_set_submenu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_submenu(GtkMenuItem *menu_item, GtkWidget *submenu)
     * }
     */
    public static void gtk_menu_item_set_submenu(MemorySegment menu_item, MemorySegment submenu) {
        var mh$ = gtk_menu_item_set_submenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_set_submenu", menu_item, submenu);
            }
            mh$.invokeExact(menu_item, submenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_get_submenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_get_submenu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_get_submenu(GtkMenuItem *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_get_submenu$descriptor() {
        return gtk_menu_item_get_submenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_get_submenu(GtkMenuItem *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_item_get_submenu$handle() {
        return gtk_menu_item_get_submenu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_menu_item_get_submenu(GtkMenuItem *menu_item)
     * }
     */
    public static MemorySegment gtk_menu_item_get_submenu(MemorySegment menu_item) {
        var mh$ = gtk_menu_item_get_submenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_get_submenu", menu_item);
            }
            return (MemorySegment)mh$.invokeExact(menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_select"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_select(GtkMenuItem *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_select$descriptor() {
        return gtk_menu_item_select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_select(GtkMenuItem *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_item_select$handle() {
        return gtk_menu_item_select.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_select(GtkMenuItem *menu_item)
     * }
     */
    public static void gtk_menu_item_select(MemorySegment menu_item) {
        var mh$ = gtk_menu_item_select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_select", menu_item);
            }
            mh$.invokeExact(menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_deselect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_deselect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_deselect(GtkMenuItem *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_deselect$descriptor() {
        return gtk_menu_item_deselect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_deselect(GtkMenuItem *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_item_deselect$handle() {
        return gtk_menu_item_deselect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_deselect(GtkMenuItem *menu_item)
     * }
     */
    public static void gtk_menu_item_deselect(MemorySegment menu_item) {
        var mh$ = gtk_menu_item_deselect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_deselect", menu_item);
            }
            mh$.invokeExact(menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_activate(GtkMenuItem *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_activate$descriptor() {
        return gtk_menu_item_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_activate(GtkMenuItem *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_item_activate$handle() {
        return gtk_menu_item_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_activate(GtkMenuItem *menu_item)
     * }
     */
    public static void gtk_menu_item_activate(MemorySegment menu_item) {
        var mh$ = gtk_menu_item_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_activate", menu_item);
            }
            mh$.invokeExact(menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_toggle_size_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_toggle_size_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_toggle_size_request(GtkMenuItem *menu_item, gint *requisition)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_toggle_size_request$descriptor() {
        return gtk_menu_item_toggle_size_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_toggle_size_request(GtkMenuItem *menu_item, gint *requisition)
     * }
     */
    public static MethodHandle gtk_menu_item_toggle_size_request$handle() {
        return gtk_menu_item_toggle_size_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_toggle_size_request(GtkMenuItem *menu_item, gint *requisition)
     * }
     */
    public static void gtk_menu_item_toggle_size_request(MemorySegment menu_item, MemorySegment requisition) {
        var mh$ = gtk_menu_item_toggle_size_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_toggle_size_request", menu_item, requisition);
            }
            mh$.invokeExact(menu_item, requisition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_toggle_size_allocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_toggle_size_allocate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_toggle_size_allocate(GtkMenuItem *menu_item, gint allocation)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_toggle_size_allocate$descriptor() {
        return gtk_menu_item_toggle_size_allocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_toggle_size_allocate(GtkMenuItem *menu_item, gint allocation)
     * }
     */
    public static MethodHandle gtk_menu_item_toggle_size_allocate$handle() {
        return gtk_menu_item_toggle_size_allocate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_toggle_size_allocate(GtkMenuItem *menu_item, gint allocation)
     * }
     */
    public static void gtk_menu_item_toggle_size_allocate(MemorySegment menu_item, int allocation) {
        var mh$ = gtk_menu_item_toggle_size_allocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_toggle_size_allocate", menu_item, allocation);
            }
            mh$.invokeExact(menu_item, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_set_right_justified {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_set_right_justified"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_right_justified(GtkMenuItem *menu_item, gboolean right_justified)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_set_right_justified$descriptor() {
        return gtk_menu_item_set_right_justified.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_right_justified(GtkMenuItem *menu_item, gboolean right_justified)
     * }
     */
    public static MethodHandle gtk_menu_item_set_right_justified$handle() {
        return gtk_menu_item_set_right_justified.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_right_justified(GtkMenuItem *menu_item, gboolean right_justified)
     * }
     */
    public static void gtk_menu_item_set_right_justified(MemorySegment menu_item, int right_justified) {
        var mh$ = gtk_menu_item_set_right_justified.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_set_right_justified", menu_item, right_justified);
            }
            mh$.invokeExact(menu_item, right_justified);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_get_right_justified {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_get_right_justified"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_item_get_right_justified(GtkMenuItem *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_get_right_justified$descriptor() {
        return gtk_menu_item_get_right_justified.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_item_get_right_justified(GtkMenuItem *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_item_get_right_justified$handle() {
        return gtk_menu_item_get_right_justified.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_menu_item_get_right_justified(GtkMenuItem *menu_item)
     * }
     */
    public static int gtk_menu_item_get_right_justified(MemorySegment menu_item) {
        var mh$ = gtk_menu_item_get_right_justified.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_get_right_justified", menu_item);
            }
            return (int)mh$.invokeExact(menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_set_accel_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_set_accel_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_accel_path(GtkMenuItem *menu_item, const gchar *accel_path)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_set_accel_path$descriptor() {
        return gtk_menu_item_set_accel_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_accel_path(GtkMenuItem *menu_item, const gchar *accel_path)
     * }
     */
    public static MethodHandle gtk_menu_item_set_accel_path$handle() {
        return gtk_menu_item_set_accel_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_accel_path(GtkMenuItem *menu_item, const gchar *accel_path)
     * }
     */
    public static void gtk_menu_item_set_accel_path(MemorySegment menu_item, MemorySegment accel_path) {
        var mh$ = gtk_menu_item_set_accel_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_set_accel_path", menu_item, accel_path);
            }
            mh$.invokeExact(menu_item, accel_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_get_accel_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_get_accel_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_item_get_accel_path(GtkMenuItem *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_get_accel_path$descriptor() {
        return gtk_menu_item_get_accel_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_item_get_accel_path(GtkMenuItem *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_item_get_accel_path$handle() {
        return gtk_menu_item_get_accel_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_item_get_accel_path(GtkMenuItem *menu_item)
     * }
     */
    public static MemorySegment gtk_menu_item_get_accel_path(MemorySegment menu_item) {
        var mh$ = gtk_menu_item_get_accel_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_get_accel_path", menu_item);
            }
            return (MemorySegment)mh$.invokeExact(menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_set_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_label(GtkMenuItem *menu_item, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_set_label$descriptor() {
        return gtk_menu_item_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_label(GtkMenuItem *menu_item, const gchar *label)
     * }
     */
    public static MethodHandle gtk_menu_item_set_label$handle() {
        return gtk_menu_item_set_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_label(GtkMenuItem *menu_item, const gchar *label)
     * }
     */
    public static void gtk_menu_item_set_label(MemorySegment menu_item, MemorySegment label) {
        var mh$ = gtk_menu_item_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_set_label", menu_item, label);
            }
            mh$.invokeExact(menu_item, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_get_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_item_get_label(GtkMenuItem *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_get_label$descriptor() {
        return gtk_menu_item_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_item_get_label(GtkMenuItem *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_item_get_label$handle() {
        return gtk_menu_item_get_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_menu_item_get_label(GtkMenuItem *menu_item)
     * }
     */
    public static MemorySegment gtk_menu_item_get_label(MemorySegment menu_item) {
        var mh$ = gtk_menu_item_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_get_label", menu_item);
            }
            return (MemorySegment)mh$.invokeExact(menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_set_use_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_set_use_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_use_underline(GtkMenuItem *menu_item, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_set_use_underline$descriptor() {
        return gtk_menu_item_set_use_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_use_underline(GtkMenuItem *menu_item, gboolean setting)
     * }
     */
    public static MethodHandle gtk_menu_item_set_use_underline$handle() {
        return gtk_menu_item_set_use_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_use_underline(GtkMenuItem *menu_item, gboolean setting)
     * }
     */
    public static void gtk_menu_item_set_use_underline(MemorySegment menu_item, int setting) {
        var mh$ = gtk_menu_item_set_use_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_set_use_underline", menu_item, setting);
            }
            mh$.invokeExact(menu_item, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_get_use_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_get_use_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_item_get_use_underline(GtkMenuItem *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_get_use_underline$descriptor() {
        return gtk_menu_item_get_use_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_item_get_use_underline(GtkMenuItem *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_item_get_use_underline$handle() {
        return gtk_menu_item_get_use_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_menu_item_get_use_underline(GtkMenuItem *menu_item)
     * }
     */
    public static int gtk_menu_item_get_use_underline(MemorySegment menu_item) {
        var mh$ = gtk_menu_item_get_use_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_get_use_underline", menu_item);
            }
            return (int)mh$.invokeExact(menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_set_reserve_indicator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_set_reserve_indicator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_reserve_indicator(GtkMenuItem *menu_item, gboolean reserve)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_set_reserve_indicator$descriptor() {
        return gtk_menu_item_set_reserve_indicator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_reserve_indicator(GtkMenuItem *menu_item, gboolean reserve)
     * }
     */
    public static MethodHandle gtk_menu_item_set_reserve_indicator$handle() {
        return gtk_menu_item_set_reserve_indicator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_menu_item_set_reserve_indicator(GtkMenuItem *menu_item, gboolean reserve)
     * }
     */
    public static void gtk_menu_item_set_reserve_indicator(MemorySegment menu_item, int reserve) {
        var mh$ = gtk_menu_item_set_reserve_indicator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_set_reserve_indicator", menu_item, reserve);
            }
            mh$.invokeExact(menu_item, reserve);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_menu_item_get_reserve_indicator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_menu_item_get_reserve_indicator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_item_get_reserve_indicator(GtkMenuItem *menu_item)
     * }
     */
    public static FunctionDescriptor gtk_menu_item_get_reserve_indicator$descriptor() {
        return gtk_menu_item_get_reserve_indicator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_menu_item_get_reserve_indicator(GtkMenuItem *menu_item)
     * }
     */
    public static MethodHandle gtk_menu_item_get_reserve_indicator$handle() {
        return gtk_menu_item_get_reserve_indicator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_menu_item_get_reserve_indicator(GtkMenuItem *menu_item)
     * }
     */
    public static int gtk_menu_item_get_reserve_indicator(MemorySegment menu_item) {
        var mh$ = gtk_menu_item_get_reserve_indicator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_menu_item_get_reserve_indicator", menu_item);
            }
            return (int)mh$.invokeExact(menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_check_menu_item_get_type()
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_get_type$descriptor() {
        return gtk_check_menu_item_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_check_menu_item_get_type()
     * }
     */
    public static MethodHandle gtk_check_menu_item_get_type$handle() {
        return gtk_check_menu_item_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_check_menu_item_get_type()
     * }
     */
    public static long gtk_check_menu_item_get_type() {
        var mh$ = gtk_check_menu_item_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_menu_item_new()
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_new$descriptor() {
        return gtk_check_menu_item_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_menu_item_new()
     * }
     */
    public static MethodHandle gtk_check_menu_item_new$handle() {
        return gtk_check_menu_item_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_menu_item_new()
     * }
     */
    public static MemorySegment gtk_check_menu_item_new() {
        var mh$ = gtk_check_menu_item_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_new_with_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_new_with_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_new_with_label$descriptor() {
        return gtk_check_menu_item_new_with_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static MethodHandle gtk_check_menu_item_new_with_label$handle() {
        return gtk_check_menu_item_new_with_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_menu_item_new_with_label(const gchar *label)
     * }
     */
    public static MemorySegment gtk_check_menu_item_new_with_label(MemorySegment label) {
        var mh$ = gtk_check_menu_item_new_with_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_new_with_label", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_new_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_new_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_menu_item_new_with_mnemonic(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_new_with_mnemonic$descriptor() {
        return gtk_check_menu_item_new_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_menu_item_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MethodHandle gtk_check_menu_item_new_with_mnemonic$handle() {
        return gtk_check_menu_item_new_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_check_menu_item_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MemorySegment gtk_check_menu_item_new_with_mnemonic(MemorySegment label) {
        var mh$ = gtk_check_menu_item_new_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_new_with_mnemonic", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_set_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_set_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_set_active(GtkCheckMenuItem *check_menu_item, gboolean is_active)
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_set_active$descriptor() {
        return gtk_check_menu_item_set_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_set_active(GtkCheckMenuItem *check_menu_item, gboolean is_active)
     * }
     */
    public static MethodHandle gtk_check_menu_item_set_active$handle() {
        return gtk_check_menu_item_set_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_set_active(GtkCheckMenuItem *check_menu_item, gboolean is_active)
     * }
     */
    public static void gtk_check_menu_item_set_active(MemorySegment check_menu_item, int is_active) {
        var mh$ = gtk_check_menu_item_set_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_set_active", check_menu_item, is_active);
            }
            mh$.invokeExact(check_menu_item, is_active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_get_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_get_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_check_menu_item_get_active(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_get_active$descriptor() {
        return gtk_check_menu_item_get_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_check_menu_item_get_active(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static MethodHandle gtk_check_menu_item_get_active$handle() {
        return gtk_check_menu_item_get_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_check_menu_item_get_active(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static int gtk_check_menu_item_get_active(MemorySegment check_menu_item) {
        var mh$ = gtk_check_menu_item_get_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_get_active", check_menu_item);
            }
            return (int)mh$.invokeExact(check_menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_toggled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_toggled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_toggled(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_toggled$descriptor() {
        return gtk_check_menu_item_toggled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_toggled(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static MethodHandle gtk_check_menu_item_toggled$handle() {
        return gtk_check_menu_item_toggled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_toggled(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static void gtk_check_menu_item_toggled(MemorySegment check_menu_item) {
        var mh$ = gtk_check_menu_item_toggled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_toggled", check_menu_item);
            }
            mh$.invokeExact(check_menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_set_inconsistent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_set_inconsistent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_set_inconsistent(GtkCheckMenuItem *check_menu_item, gboolean setting)
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_set_inconsistent$descriptor() {
        return gtk_check_menu_item_set_inconsistent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_set_inconsistent(GtkCheckMenuItem *check_menu_item, gboolean setting)
     * }
     */
    public static MethodHandle gtk_check_menu_item_set_inconsistent$handle() {
        return gtk_check_menu_item_set_inconsistent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_set_inconsistent(GtkCheckMenuItem *check_menu_item, gboolean setting)
     * }
     */
    public static void gtk_check_menu_item_set_inconsistent(MemorySegment check_menu_item, int setting) {
        var mh$ = gtk_check_menu_item_set_inconsistent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_set_inconsistent", check_menu_item, setting);
            }
            mh$.invokeExact(check_menu_item, setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_get_inconsistent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_get_inconsistent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_check_menu_item_get_inconsistent(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_get_inconsistent$descriptor() {
        return gtk_check_menu_item_get_inconsistent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_check_menu_item_get_inconsistent(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static MethodHandle gtk_check_menu_item_get_inconsistent$handle() {
        return gtk_check_menu_item_get_inconsistent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_check_menu_item_get_inconsistent(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static int gtk_check_menu_item_get_inconsistent(MemorySegment check_menu_item) {
        var mh$ = gtk_check_menu_item_get_inconsistent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_get_inconsistent", check_menu_item);
            }
            return (int)mh$.invokeExact(check_menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_set_draw_as_radio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_set_draw_as_radio"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_set_draw_as_radio(GtkCheckMenuItem *check_menu_item, gboolean draw_as_radio)
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_set_draw_as_radio$descriptor() {
        return gtk_check_menu_item_set_draw_as_radio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_set_draw_as_radio(GtkCheckMenuItem *check_menu_item, gboolean draw_as_radio)
     * }
     */
    public static MethodHandle gtk_check_menu_item_set_draw_as_radio$handle() {
        return gtk_check_menu_item_set_draw_as_radio.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_check_menu_item_set_draw_as_radio(GtkCheckMenuItem *check_menu_item, gboolean draw_as_radio)
     * }
     */
    public static void gtk_check_menu_item_set_draw_as_radio(MemorySegment check_menu_item, int draw_as_radio) {
        var mh$ = gtk_check_menu_item_set_draw_as_radio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_set_draw_as_radio", check_menu_item, draw_as_radio);
            }
            mh$.invokeExact(check_menu_item, draw_as_radio);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_check_menu_item_get_draw_as_radio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_check_menu_item_get_draw_as_radio"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_check_menu_item_get_draw_as_radio(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static FunctionDescriptor gtk_check_menu_item_get_draw_as_radio$descriptor() {
        return gtk_check_menu_item_get_draw_as_radio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_check_menu_item_get_draw_as_radio(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static MethodHandle gtk_check_menu_item_get_draw_as_radio$handle() {
        return gtk_check_menu_item_get_draw_as_radio.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_check_menu_item_get_draw_as_radio(GtkCheckMenuItem *check_menu_item)
     * }
     */
    public static int gtk_check_menu_item_get_draw_as_radio(MemorySegment check_menu_item) {
        var mh$ = gtk_check_menu_item_get_draw_as_radio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_check_menu_item_get_draw_as_radio", check_menu_item);
            }
            return (int)mh$.invokeExact(check_menu_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_clipboard_get_type()
     * }
     */
    public static FunctionDescriptor gtk_clipboard_get_type$descriptor() {
        return gtk_clipboard_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_clipboard_get_type()
     * }
     */
    public static MethodHandle gtk_clipboard_get_type$handle() {
        return gtk_clipboard_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_clipboard_get_type()
     * }
     */
    public static long gtk_clipboard_get_type() {
        var mh$ = gtk_clipboard_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_get_for_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_get_for_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_clipboard_get_for_display(GdkDisplay *display, GdkAtom selection)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_get_for_display$descriptor() {
        return gtk_clipboard_get_for_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_clipboard_get_for_display(GdkDisplay *display, GdkAtom selection)
     * }
     */
    public static MethodHandle gtk_clipboard_get_for_display$handle() {
        return gtk_clipboard_get_for_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_clipboard_get_for_display(GdkDisplay *display, GdkAtom selection)
     * }
     */
    public static MemorySegment gtk_clipboard_get_for_display(MemorySegment display, MemorySegment selection) {
        var mh$ = gtk_clipboard_get_for_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_get_for_display", display, selection);
            }
            return (MemorySegment)mh$.invokeExact(display, selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_clipboard_get(GdkAtom selection)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_get$descriptor() {
        return gtk_clipboard_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_clipboard_get(GdkAtom selection)
     * }
     */
    public static MethodHandle gtk_clipboard_get$handle() {
        return gtk_clipboard_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_clipboard_get(GdkAtom selection)
     * }
     */
    public static MemorySegment gtk_clipboard_get(MemorySegment selection) {
        var mh$ = gtk_clipboard_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_get", selection);
            }
            return (MemorySegment)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_clipboard_get_default(GdkDisplay *display)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_get_default$descriptor() {
        return gtk_clipboard_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_clipboard_get_default(GdkDisplay *display)
     * }
     */
    public static MethodHandle gtk_clipboard_get_default$handle() {
        return gtk_clipboard_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_clipboard_get_default(GdkDisplay *display)
     * }
     */
    public static MemorySegment gtk_clipboard_get_default(MemorySegment display) {
        var mh$ = gtk_clipboard_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_get_default", display);
            }
            return (MemorySegment)mh$.invokeExact(display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gtk_clipboard_get_display(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_get_display$descriptor() {
        return gtk_clipboard_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gtk_clipboard_get_display(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_get_display$handle() {
        return gtk_clipboard_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gtk_clipboard_get_display(GtkClipboard *clipboard)
     * }
     */
    public static MemorySegment gtk_clipboard_get_display(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_get_display", clipboard);
            }
            return (MemorySegment)mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_set_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_set_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_set_with_data(GtkClipboard *clipboard, const GtkTargetEntry *targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_set_with_data$descriptor() {
        return gtk_clipboard_set_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_set_with_data(GtkClipboard *clipboard, const GtkTargetEntry *targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_clipboard_set_with_data$handle() {
        return gtk_clipboard_set_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_set_with_data(GtkClipboard *clipboard, const GtkTargetEntry *targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, gpointer user_data)
     * }
     */
    public static int gtk_clipboard_set_with_data(MemorySegment clipboard, MemorySegment targets, int n_targets, MemorySegment get_func, MemorySegment clear_func, MemorySegment user_data) {
        var mh$ = gtk_clipboard_set_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_set_with_data", clipboard, targets, n_targets, get_func, clear_func, user_data);
            }
            return (int)mh$.invokeExact(clipboard, targets, n_targets, get_func, clear_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_set_with_owner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_set_with_owner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_set_with_owner(GtkClipboard *clipboard, const GtkTargetEntry *targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, GObject *owner)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_set_with_owner$descriptor() {
        return gtk_clipboard_set_with_owner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_set_with_owner(GtkClipboard *clipboard, const GtkTargetEntry *targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, GObject *owner)
     * }
     */
    public static MethodHandle gtk_clipboard_set_with_owner$handle() {
        return gtk_clipboard_set_with_owner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_set_with_owner(GtkClipboard *clipboard, const GtkTargetEntry *targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, GObject *owner)
     * }
     */
    public static int gtk_clipboard_set_with_owner(MemorySegment clipboard, MemorySegment targets, int n_targets, MemorySegment get_func, MemorySegment clear_func, MemorySegment owner) {
        var mh$ = gtk_clipboard_set_with_owner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_set_with_owner", clipboard, targets, n_targets, get_func, clear_func, owner);
            }
            return (int)mh$.invokeExact(clipboard, targets, n_targets, get_func, clear_func, owner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_get_owner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_get_owner"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *gtk_clipboard_get_owner(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_get_owner$descriptor() {
        return gtk_clipboard_get_owner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *gtk_clipboard_get_owner(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_get_owner$handle() {
        return gtk_clipboard_get_owner.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *gtk_clipboard_get_owner(GtkClipboard *clipboard)
     * }
     */
    public static MemorySegment gtk_clipboard_get_owner(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_get_owner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_get_owner", clipboard);
            }
            return (MemorySegment)mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_clear(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_clear$descriptor() {
        return gtk_clipboard_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_clear(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_clear$handle() {
        return gtk_clipboard_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_clear(GtkClipboard *clipboard)
     * }
     */
    public static void gtk_clipboard_clear(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_clear", clipboard);
            }
            mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_set_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_set_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_set_text(GtkClipboard *clipboard, const gchar *text, gint len)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_set_text$descriptor() {
        return gtk_clipboard_set_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_set_text(GtkClipboard *clipboard, const gchar *text, gint len)
     * }
     */
    public static MethodHandle gtk_clipboard_set_text$handle() {
        return gtk_clipboard_set_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_set_text(GtkClipboard *clipboard, const gchar *text, gint len)
     * }
     */
    public static void gtk_clipboard_set_text(MemorySegment clipboard, MemorySegment text, int len) {
        var mh$ = gtk_clipboard_set_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_set_text", clipboard, text, len);
            }
            mh$.invokeExact(clipboard, text, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_set_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_set_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_set_image(GtkClipboard *clipboard, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_set_image$descriptor() {
        return gtk_clipboard_set_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_set_image(GtkClipboard *clipboard, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_clipboard_set_image$handle() {
        return gtk_clipboard_set_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_set_image(GtkClipboard *clipboard, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_clipboard_set_image(MemorySegment clipboard, MemorySegment pixbuf) {
        var mh$ = gtk_clipboard_set_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_set_image", clipboard, pixbuf);
            }
            mh$.invokeExact(clipboard, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_request_contents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_request_contents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_contents(GtkClipboard *clipboard, GdkAtom target, GtkClipboardReceivedFunc callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_request_contents$descriptor() {
        return gtk_clipboard_request_contents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_contents(GtkClipboard *clipboard, GdkAtom target, GtkClipboardReceivedFunc callback, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_clipboard_request_contents$handle() {
        return gtk_clipboard_request_contents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_contents(GtkClipboard *clipboard, GdkAtom target, GtkClipboardReceivedFunc callback, gpointer user_data)
     * }
     */
    public static void gtk_clipboard_request_contents(MemorySegment clipboard, MemorySegment target, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gtk_clipboard_request_contents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_request_contents", clipboard, target, callback, user_data);
            }
            mh$.invokeExact(clipboard, target, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_request_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_request_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_text(GtkClipboard *clipboard, GtkClipboardTextReceivedFunc callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_request_text$descriptor() {
        return gtk_clipboard_request_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_text(GtkClipboard *clipboard, GtkClipboardTextReceivedFunc callback, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_clipboard_request_text$handle() {
        return gtk_clipboard_request_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_text(GtkClipboard *clipboard, GtkClipboardTextReceivedFunc callback, gpointer user_data)
     * }
     */
    public static void gtk_clipboard_request_text(MemorySegment clipboard, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gtk_clipboard_request_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_request_text", clipboard, callback, user_data);
            }
            mh$.invokeExact(clipboard, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_request_rich_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_request_rich_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_rich_text(GtkClipboard *clipboard, GtkTextBuffer *buffer, GtkClipboardRichTextReceivedFunc callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_request_rich_text$descriptor() {
        return gtk_clipboard_request_rich_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_rich_text(GtkClipboard *clipboard, GtkTextBuffer *buffer, GtkClipboardRichTextReceivedFunc callback, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_clipboard_request_rich_text$handle() {
        return gtk_clipboard_request_rich_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_rich_text(GtkClipboard *clipboard, GtkTextBuffer *buffer, GtkClipboardRichTextReceivedFunc callback, gpointer user_data)
     * }
     */
    public static void gtk_clipboard_request_rich_text(MemorySegment clipboard, MemorySegment buffer, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gtk_clipboard_request_rich_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_request_rich_text", clipboard, buffer, callback, user_data);
            }
            mh$.invokeExact(clipboard, buffer, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_request_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_request_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_image(GtkClipboard *clipboard, GtkClipboardImageReceivedFunc callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_request_image$descriptor() {
        return gtk_clipboard_request_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_image(GtkClipboard *clipboard, GtkClipboardImageReceivedFunc callback, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_clipboard_request_image$handle() {
        return gtk_clipboard_request_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_image(GtkClipboard *clipboard, GtkClipboardImageReceivedFunc callback, gpointer user_data)
     * }
     */
    public static void gtk_clipboard_request_image(MemorySegment clipboard, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gtk_clipboard_request_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_request_image", clipboard, callback, user_data);
            }
            mh$.invokeExact(clipboard, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_request_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_request_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_uris(GtkClipboard *clipboard, GtkClipboardURIReceivedFunc callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_request_uris$descriptor() {
        return gtk_clipboard_request_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_uris(GtkClipboard *clipboard, GtkClipboardURIReceivedFunc callback, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_clipboard_request_uris$handle() {
        return gtk_clipboard_request_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_uris(GtkClipboard *clipboard, GtkClipboardURIReceivedFunc callback, gpointer user_data)
     * }
     */
    public static void gtk_clipboard_request_uris(MemorySegment clipboard, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gtk_clipboard_request_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_request_uris", clipboard, callback, user_data);
            }
            mh$.invokeExact(clipboard, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_request_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_request_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_targets(GtkClipboard *clipboard, GtkClipboardTargetsReceivedFunc callback, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_request_targets$descriptor() {
        return gtk_clipboard_request_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_targets(GtkClipboard *clipboard, GtkClipboardTargetsReceivedFunc callback, gpointer user_data)
     * }
     */
    public static MethodHandle gtk_clipboard_request_targets$handle() {
        return gtk_clipboard_request_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_request_targets(GtkClipboard *clipboard, GtkClipboardTargetsReceivedFunc callback, gpointer user_data)
     * }
     */
    public static void gtk_clipboard_request_targets(MemorySegment clipboard, MemorySegment callback, MemorySegment user_data) {
        var mh$ = gtk_clipboard_request_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_request_targets", clipboard, callback, user_data);
            }
            mh$.invokeExact(clipboard, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_for_contents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_for_contents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSelectionData *gtk_clipboard_wait_for_contents(GtkClipboard *clipboard, GdkAtom target)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_for_contents$descriptor() {
        return gtk_clipboard_wait_for_contents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSelectionData *gtk_clipboard_wait_for_contents(GtkClipboard *clipboard, GdkAtom target)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_for_contents$handle() {
        return gtk_clipboard_wait_for_contents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSelectionData *gtk_clipboard_wait_for_contents(GtkClipboard *clipboard, GdkAtom target)
     * }
     */
    public static MemorySegment gtk_clipboard_wait_for_contents(MemorySegment clipboard, MemorySegment target) {
        var mh$ = gtk_clipboard_wait_for_contents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_for_contents", clipboard, target);
            }
            return (MemorySegment)mh$.invokeExact(clipboard, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_for_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_for_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_clipboard_wait_for_text(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_for_text$descriptor() {
        return gtk_clipboard_wait_for_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_clipboard_wait_for_text(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_for_text$handle() {
        return gtk_clipboard_wait_for_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_clipboard_wait_for_text(GtkClipboard *clipboard)
     * }
     */
    public static MemorySegment gtk_clipboard_wait_for_text(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_wait_for_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_for_text", clipboard);
            }
            return (MemorySegment)mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_for_rich_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_for_rich_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint8 *gtk_clipboard_wait_for_rich_text(GtkClipboard *clipboard, GtkTextBuffer *buffer, GdkAtom *format, gsize *length)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_for_rich_text$descriptor() {
        return gtk_clipboard_wait_for_rich_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint8 *gtk_clipboard_wait_for_rich_text(GtkClipboard *clipboard, GtkTextBuffer *buffer, GdkAtom *format, gsize *length)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_for_rich_text$handle() {
        return gtk_clipboard_wait_for_rich_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint8 *gtk_clipboard_wait_for_rich_text(GtkClipboard *clipboard, GtkTextBuffer *buffer, GdkAtom *format, gsize *length)
     * }
     */
    public static MemorySegment gtk_clipboard_wait_for_rich_text(MemorySegment clipboard, MemorySegment buffer, MemorySegment format, MemorySegment length) {
        var mh$ = gtk_clipboard_wait_for_rich_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_for_rich_text", clipboard, buffer, format, length);
            }
            return (MemorySegment)mh$.invokeExact(clipboard, buffer, format, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_for_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_for_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_clipboard_wait_for_image(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_for_image$descriptor() {
        return gtk_clipboard_wait_for_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_clipboard_wait_for_image(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_for_image$handle() {
        return gtk_clipboard_wait_for_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_clipboard_wait_for_image(GtkClipboard *clipboard)
     * }
     */
    public static MemorySegment gtk_clipboard_wait_for_image(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_wait_for_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_for_image", clipboard);
            }
            return (MemorySegment)mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_for_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_for_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **gtk_clipboard_wait_for_uris(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_for_uris$descriptor() {
        return gtk_clipboard_wait_for_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **gtk_clipboard_wait_for_uris(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_for_uris$handle() {
        return gtk_clipboard_wait_for_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **gtk_clipboard_wait_for_uris(GtkClipboard *clipboard)
     * }
     */
    public static MemorySegment gtk_clipboard_wait_for_uris(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_wait_for_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_for_uris", clipboard);
            }
            return (MemorySegment)mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_for_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_for_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_for_targets(GtkClipboard *clipboard, GdkAtom **targets, gint *n_targets)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_for_targets$descriptor() {
        return gtk_clipboard_wait_for_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_for_targets(GtkClipboard *clipboard, GdkAtom **targets, gint *n_targets)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_for_targets$handle() {
        return gtk_clipboard_wait_for_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_for_targets(GtkClipboard *clipboard, GdkAtom **targets, gint *n_targets)
     * }
     */
    public static int gtk_clipboard_wait_for_targets(MemorySegment clipboard, MemorySegment targets, MemorySegment n_targets) {
        var mh$ = gtk_clipboard_wait_for_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_for_targets", clipboard, targets, n_targets);
            }
            return (int)mh$.invokeExact(clipboard, targets, n_targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_is_text_available {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_is_text_available"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_text_available(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_is_text_available$descriptor() {
        return gtk_clipboard_wait_is_text_available.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_text_available(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_is_text_available$handle() {
        return gtk_clipboard_wait_is_text_available.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_text_available(GtkClipboard *clipboard)
     * }
     */
    public static int gtk_clipboard_wait_is_text_available(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_wait_is_text_available.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_is_text_available", clipboard);
            }
            return (int)mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_is_rich_text_available {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_is_rich_text_available"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_rich_text_available(GtkClipboard *clipboard, GtkTextBuffer *buffer)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_is_rich_text_available$descriptor() {
        return gtk_clipboard_wait_is_rich_text_available.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_rich_text_available(GtkClipboard *clipboard, GtkTextBuffer *buffer)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_is_rich_text_available$handle() {
        return gtk_clipboard_wait_is_rich_text_available.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_rich_text_available(GtkClipboard *clipboard, GtkTextBuffer *buffer)
     * }
     */
    public static int gtk_clipboard_wait_is_rich_text_available(MemorySegment clipboard, MemorySegment buffer) {
        var mh$ = gtk_clipboard_wait_is_rich_text_available.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_is_rich_text_available", clipboard, buffer);
            }
            return (int)mh$.invokeExact(clipboard, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_is_image_available {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_is_image_available"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_image_available(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_is_image_available$descriptor() {
        return gtk_clipboard_wait_is_image_available.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_image_available(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_is_image_available$handle() {
        return gtk_clipboard_wait_is_image_available.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_image_available(GtkClipboard *clipboard)
     * }
     */
    public static int gtk_clipboard_wait_is_image_available(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_wait_is_image_available.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_is_image_available", clipboard);
            }
            return (int)mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_is_uris_available {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_is_uris_available"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_uris_available(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_is_uris_available$descriptor() {
        return gtk_clipboard_wait_is_uris_available.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_uris_available(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_is_uris_available$handle() {
        return gtk_clipboard_wait_is_uris_available.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_uris_available(GtkClipboard *clipboard)
     * }
     */
    public static int gtk_clipboard_wait_is_uris_available(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_wait_is_uris_available.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_is_uris_available", clipboard);
            }
            return (int)mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_wait_is_target_available {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_wait_is_target_available"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_target_available(GtkClipboard *clipboard, GdkAtom target)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_wait_is_target_available$descriptor() {
        return gtk_clipboard_wait_is_target_available.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_target_available(GtkClipboard *clipboard, GdkAtom target)
     * }
     */
    public static MethodHandle gtk_clipboard_wait_is_target_available$handle() {
        return gtk_clipboard_wait_is_target_available.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_clipboard_wait_is_target_available(GtkClipboard *clipboard, GdkAtom target)
     * }
     */
    public static int gtk_clipboard_wait_is_target_available(MemorySegment clipboard, MemorySegment target) {
        var mh$ = gtk_clipboard_wait_is_target_available.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_wait_is_target_available", clipboard, target);
            }
            return (int)mh$.invokeExact(clipboard, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_set_can_store {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_set_can_store"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_set_can_store(GtkClipboard *clipboard, const GtkTargetEntry *targets, gint n_targets)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_set_can_store$descriptor() {
        return gtk_clipboard_set_can_store.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_set_can_store(GtkClipboard *clipboard, const GtkTargetEntry *targets, gint n_targets)
     * }
     */
    public static MethodHandle gtk_clipboard_set_can_store$handle() {
        return gtk_clipboard_set_can_store.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_set_can_store(GtkClipboard *clipboard, const GtkTargetEntry *targets, gint n_targets)
     * }
     */
    public static void gtk_clipboard_set_can_store(MemorySegment clipboard, MemorySegment targets, int n_targets) {
        var mh$ = gtk_clipboard_set_can_store.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_set_can_store", clipboard, targets, n_targets);
            }
            mh$.invokeExact(clipboard, targets, n_targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_store {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_store"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_store(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_store$descriptor() {
        return gtk_clipboard_store.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_clipboard_store(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_store$handle() {
        return gtk_clipboard_store.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_clipboard_store(GtkClipboard *clipboard)
     * }
     */
    public static void gtk_clipboard_store(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_store.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_store", clipboard);
            }
            mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_clipboard_get_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_clipboard_get_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_clipboard_get_selection(GtkClipboard *clipboard)
     * }
     */
    public static FunctionDescriptor gtk_clipboard_get_selection$descriptor() {
        return gtk_clipboard_get_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_clipboard_get_selection(GtkClipboard *clipboard)
     * }
     */
    public static MethodHandle gtk_clipboard_get_selection$handle() {
        return gtk_clipboard_get_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gtk_clipboard_get_selection(GtkClipboard *clipboard)
     * }
     */
    public static MemorySegment gtk_clipboard_get_selection(MemorySegment clipboard) {
        var mh$ = gtk_clipboard_get_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_clipboard_get_selection", clipboard);
            }
            return (MemorySegment)mh$.invokeExact(clipboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_color_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_color_button_get_type$descriptor() {
        return gtk_color_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_color_button_get_type()
     * }
     */
    public static MethodHandle gtk_color_button_get_type$handle() {
        return gtk_color_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_color_button_get_type()
     * }
     */
    public static long gtk_color_button_get_type() {
        var mh$ = gtk_color_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_button_new()
     * }
     */
    public static FunctionDescriptor gtk_color_button_new$descriptor() {
        return gtk_color_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_button_new()
     * }
     */
    public static MethodHandle gtk_color_button_new$handle() {
        return gtk_color_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_button_new()
     * }
     */
    public static MemorySegment gtk_color_button_new() {
        var mh$ = gtk_color_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_new_with_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_new_with_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_button_new_with_rgba(const GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gtk_color_button_new_with_rgba$descriptor() {
        return gtk_color_button_new_with_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_button_new_with_rgba(const GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gtk_color_button_new_with_rgba$handle() {
        return gtk_color_button_new_with_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_button_new_with_rgba(const GdkRGBA *rgba)
     * }
     */
    public static MemorySegment gtk_color_button_new_with_rgba(MemorySegment rgba) {
        var mh$ = gtk_color_button_new_with_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_new_with_rgba", rgba);
            }
            return (MemorySegment)mh$.invokeExact(rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_button_set_title(GtkColorButton *button, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_color_button_set_title$descriptor() {
        return gtk_color_button_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_button_set_title(GtkColorButton *button, const gchar *title)
     * }
     */
    public static MethodHandle gtk_color_button_set_title$handle() {
        return gtk_color_button_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_button_set_title(GtkColorButton *button, const gchar *title)
     * }
     */
    public static void gtk_color_button_set_title(MemorySegment button, MemorySegment title) {
        var mh$ = gtk_color_button_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_set_title", button, title);
            }
            mh$.invokeExact(button, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_color_button_get_title(GtkColorButton *button)
     * }
     */
    public static FunctionDescriptor gtk_color_button_get_title$descriptor() {
        return gtk_color_button_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_color_button_get_title(GtkColorButton *button)
     * }
     */
    public static MethodHandle gtk_color_button_get_title$handle() {
        return gtk_color_button_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_color_button_get_title(GtkColorButton *button)
     * }
     */
    public static MemorySegment gtk_color_button_get_title(MemorySegment button) {
        var mh$ = gtk_color_button_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_get_title", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_new_with_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_new_with_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_button_new_with_color(const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_color_button_new_with_color$descriptor() {
        return gtk_color_button_new_with_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_button_new_with_color(const GdkColor *color)
     * }
     */
    public static MethodHandle gtk_color_button_new_with_color$handle() {
        return gtk_color_button_new_with_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_button_new_with_color(const GdkColor *color)
     * }
     */
    public static MemorySegment gtk_color_button_new_with_color(MemorySegment color) {
        var mh$ = gtk_color_button_new_with_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_new_with_color", color);
            }
            return (MemorySegment)mh$.invokeExact(color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_set_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_set_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_button_set_color(GtkColorButton *button, const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_color_button_set_color$descriptor() {
        return gtk_color_button_set_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_button_set_color(GtkColorButton *button, const GdkColor *color)
     * }
     */
    public static MethodHandle gtk_color_button_set_color$handle() {
        return gtk_color_button_set_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_button_set_color(GtkColorButton *button, const GdkColor *color)
     * }
     */
    public static void gtk_color_button_set_color(MemorySegment button, MemorySegment color) {
        var mh$ = gtk_color_button_set_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_set_color", button, color);
            }
            mh$.invokeExact(button, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_get_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_get_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_button_get_color(GtkColorButton *button, GdkColor *color)
     * }
     */
    public static FunctionDescriptor gtk_color_button_get_color$descriptor() {
        return gtk_color_button_get_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_button_get_color(GtkColorButton *button, GdkColor *color)
     * }
     */
    public static MethodHandle gtk_color_button_get_color$handle() {
        return gtk_color_button_get_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_button_get_color(GtkColorButton *button, GdkColor *color)
     * }
     */
    public static void gtk_color_button_get_color(MemorySegment button, MemorySegment color) {
        var mh$ = gtk_color_button_get_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_get_color", button, color);
            }
            mh$.invokeExact(button, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_set_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_set_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_button_set_alpha(GtkColorButton *button, guint16 alpha)
     * }
     */
    public static FunctionDescriptor gtk_color_button_set_alpha$descriptor() {
        return gtk_color_button_set_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_button_set_alpha(GtkColorButton *button, guint16 alpha)
     * }
     */
    public static MethodHandle gtk_color_button_set_alpha$handle() {
        return gtk_color_button_set_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_button_set_alpha(GtkColorButton *button, guint16 alpha)
     * }
     */
    public static void gtk_color_button_set_alpha(MemorySegment button, short alpha) {
        var mh$ = gtk_color_button_set_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_set_alpha", button, alpha);
            }
            mh$.invokeExact(button, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_get_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_get_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint16 gtk_color_button_get_alpha(GtkColorButton *button)
     * }
     */
    public static FunctionDescriptor gtk_color_button_get_alpha$descriptor() {
        return gtk_color_button_get_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint16 gtk_color_button_get_alpha(GtkColorButton *button)
     * }
     */
    public static MethodHandle gtk_color_button_get_alpha$handle() {
        return gtk_color_button_get_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint16 gtk_color_button_get_alpha(GtkColorButton *button)
     * }
     */
    public static short gtk_color_button_get_alpha(MemorySegment button) {
        var mh$ = gtk_color_button_get_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_get_alpha", button);
            }
            return (short)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_set_use_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_set_use_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_button_set_use_alpha(GtkColorButton *button, gboolean use_alpha)
     * }
     */
    public static FunctionDescriptor gtk_color_button_set_use_alpha$descriptor() {
        return gtk_color_button_set_use_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_button_set_use_alpha(GtkColorButton *button, gboolean use_alpha)
     * }
     */
    public static MethodHandle gtk_color_button_set_use_alpha$handle() {
        return gtk_color_button_set_use_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_button_set_use_alpha(GtkColorButton *button, gboolean use_alpha)
     * }
     */
    public static void gtk_color_button_set_use_alpha(MemorySegment button, int use_alpha) {
        var mh$ = gtk_color_button_set_use_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_set_use_alpha", button, use_alpha);
            }
            mh$.invokeExact(button, use_alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_get_use_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_get_use_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_button_get_use_alpha(GtkColorButton *button)
     * }
     */
    public static FunctionDescriptor gtk_color_button_get_use_alpha$descriptor() {
        return gtk_color_button_get_use_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_button_get_use_alpha(GtkColorButton *button)
     * }
     */
    public static MethodHandle gtk_color_button_get_use_alpha$handle() {
        return gtk_color_button_get_use_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_color_button_get_use_alpha(GtkColorButton *button)
     * }
     */
    public static int gtk_color_button_get_use_alpha(MemorySegment button) {
        var mh$ = gtk_color_button_get_use_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_get_use_alpha", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_set_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_set_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_button_set_rgba(GtkColorButton *button, const GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gtk_color_button_set_rgba$descriptor() {
        return gtk_color_button_set_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_button_set_rgba(GtkColorButton *button, const GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gtk_color_button_set_rgba$handle() {
        return gtk_color_button_set_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_button_set_rgba(GtkColorButton *button, const GdkRGBA *rgba)
     * }
     */
    public static void gtk_color_button_set_rgba(MemorySegment button, MemorySegment rgba) {
        var mh$ = gtk_color_button_set_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_set_rgba", button, rgba);
            }
            mh$.invokeExact(button, rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_button_get_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_button_get_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_button_get_rgba(GtkColorButton *button, GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gtk_color_button_get_rgba$descriptor() {
        return gtk_color_button_get_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_button_get_rgba(GtkColorButton *button, GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gtk_color_button_get_rgba$handle() {
        return gtk_color_button_get_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_button_get_rgba(GtkColorButton *button, GdkRGBA *rgba)
     * }
     */
    public static void gtk_color_button_get_rgba(MemorySegment button, MemorySegment rgba) {
        var mh$ = gtk_color_button_get_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_button_get_rgba", button, rgba);
            }
            mh$.invokeExact(button, rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_chooser_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_chooser_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_color_chooser_get_type()
     * }
     */
    public static FunctionDescriptor gtk_color_chooser_get_type$descriptor() {
        return gtk_color_chooser_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_color_chooser_get_type()
     * }
     */
    public static MethodHandle gtk_color_chooser_get_type$handle() {
        return gtk_color_chooser_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_color_chooser_get_type()
     * }
     */
    public static long gtk_color_chooser_get_type() {
        var mh$ = gtk_color_chooser_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_chooser_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_chooser_get_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_chooser_get_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_chooser_get_rgba(GtkColorChooser *chooser, GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_color_chooser_get_rgba$descriptor() {
        return gtk_color_chooser_get_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_chooser_get_rgba(GtkColorChooser *chooser, GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_color_chooser_get_rgba$handle() {
        return gtk_color_chooser_get_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_chooser_get_rgba(GtkColorChooser *chooser, GdkRGBA *color)
     * }
     */
    public static void gtk_color_chooser_get_rgba(MemorySegment chooser, MemorySegment color) {
        var mh$ = gtk_color_chooser_get_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_chooser_get_rgba", chooser, color);
            }
            mh$.invokeExact(chooser, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_chooser_set_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_chooser_set_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_chooser_set_rgba(GtkColorChooser *chooser, const GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_color_chooser_set_rgba$descriptor() {
        return gtk_color_chooser_set_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_chooser_set_rgba(GtkColorChooser *chooser, const GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_color_chooser_set_rgba$handle() {
        return gtk_color_chooser_set_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_chooser_set_rgba(GtkColorChooser *chooser, const GdkRGBA *color)
     * }
     */
    public static void gtk_color_chooser_set_rgba(MemorySegment chooser, MemorySegment color) {
        var mh$ = gtk_color_chooser_set_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_chooser_set_rgba", chooser, color);
            }
            mh$.invokeExact(chooser, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_chooser_get_use_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_chooser_get_use_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_chooser_get_use_alpha(GtkColorChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_color_chooser_get_use_alpha$descriptor() {
        return gtk_color_chooser_get_use_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_color_chooser_get_use_alpha(GtkColorChooser *chooser)
     * }
     */
    public static MethodHandle gtk_color_chooser_get_use_alpha$handle() {
        return gtk_color_chooser_get_use_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_color_chooser_get_use_alpha(GtkColorChooser *chooser)
     * }
     */
    public static int gtk_color_chooser_get_use_alpha(MemorySegment chooser) {
        var mh$ = gtk_color_chooser_get_use_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_chooser_get_use_alpha", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_chooser_set_use_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_chooser_set_use_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_chooser_set_use_alpha(GtkColorChooser *chooser, gboolean use_alpha)
     * }
     */
    public static FunctionDescriptor gtk_color_chooser_set_use_alpha$descriptor() {
        return gtk_color_chooser_set_use_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_chooser_set_use_alpha(GtkColorChooser *chooser, gboolean use_alpha)
     * }
     */
    public static MethodHandle gtk_color_chooser_set_use_alpha$handle() {
        return gtk_color_chooser_set_use_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_chooser_set_use_alpha(GtkColorChooser *chooser, gboolean use_alpha)
     * }
     */
    public static void gtk_color_chooser_set_use_alpha(MemorySegment chooser, int use_alpha) {
        var mh$ = gtk_color_chooser_set_use_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_chooser_set_use_alpha", chooser, use_alpha);
            }
            mh$.invokeExact(chooser, use_alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_chooser_add_palette {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_chooser_add_palette"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_color_chooser_add_palette(GtkColorChooser *chooser, GtkOrientation orientation, gint colors_per_line, gint n_colors, GdkRGBA *colors)
     * }
     */
    public static FunctionDescriptor gtk_color_chooser_add_palette$descriptor() {
        return gtk_color_chooser_add_palette.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_color_chooser_add_palette(GtkColorChooser *chooser, GtkOrientation orientation, gint colors_per_line, gint n_colors, GdkRGBA *colors)
     * }
     */
    public static MethodHandle gtk_color_chooser_add_palette$handle() {
        return gtk_color_chooser_add_palette.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_color_chooser_add_palette(GtkColorChooser *chooser, GtkOrientation orientation, gint colors_per_line, gint n_colors, GdkRGBA *colors)
     * }
     */
    public static void gtk_color_chooser_add_palette(MemorySegment chooser, int orientation, int colors_per_line, int n_colors, MemorySegment colors) {
        var mh$ = gtk_color_chooser_add_palette.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_chooser_add_palette", chooser, orientation, colors_per_line, n_colors, colors);
            }
            mh$.invokeExact(chooser, orientation, colors_per_line, n_colors, colors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_chooser_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_chooser_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_color_chooser_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_color_chooser_dialog_get_type$descriptor() {
        return gtk_color_chooser_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_color_chooser_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_color_chooser_dialog_get_type$handle() {
        return gtk_color_chooser_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_color_chooser_dialog_get_type()
     * }
     */
    public static long gtk_color_chooser_dialog_get_type() {
        var mh$ = gtk_color_chooser_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_chooser_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_chooser_dialog_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_chooser_dialog_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_chooser_dialog_new(const gchar *title, GtkWindow *parent)
     * }
     */
    public static FunctionDescriptor gtk_color_chooser_dialog_new$descriptor() {
        return gtk_color_chooser_dialog_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_chooser_dialog_new(const gchar *title, GtkWindow *parent)
     * }
     */
    public static MethodHandle gtk_color_chooser_dialog_new$handle() {
        return gtk_color_chooser_dialog_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_chooser_dialog_new(const gchar *title, GtkWindow *parent)
     * }
     */
    public static MemorySegment gtk_color_chooser_dialog_new(MemorySegment title, MemorySegment parent) {
        var mh$ = gtk_color_chooser_dialog_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_chooser_dialog_new", title, parent);
            }
            return (MemorySegment)mh$.invokeExact(title, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_chooser_widget_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_chooser_widget_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_color_chooser_widget_get_type()
     * }
     */
    public static FunctionDescriptor gtk_color_chooser_widget_get_type$descriptor() {
        return gtk_color_chooser_widget_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_color_chooser_widget_get_type()
     * }
     */
    public static MethodHandle gtk_color_chooser_widget_get_type$handle() {
        return gtk_color_chooser_widget_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_color_chooser_widget_get_type()
     * }
     */
    public static long gtk_color_chooser_widget_get_type() {
        var mh$ = gtk_color_chooser_widget_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_chooser_widget_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_color_chooser_widget_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_color_chooser_widget_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_chooser_widget_new()
     * }
     */
    public static FunctionDescriptor gtk_color_chooser_widget_new$descriptor() {
        return gtk_color_chooser_widget_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_chooser_widget_new()
     * }
     */
    public static MethodHandle gtk_color_chooser_widget_new$handle() {
        return gtk_color_chooser_widget_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_color_chooser_widget_new()
     * }
     */
    public static MemorySegment gtk_color_chooser_widget_new() {
        var mh$ = gtk_color_chooser_widget_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_color_chooser_widget_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_hsv_to_rgb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_hsv_to_rgb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_hsv_to_rgb(gdouble h, gdouble s, gdouble v, gdouble *r, gdouble *g, gdouble *b)
     * }
     */
    public static FunctionDescriptor gtk_hsv_to_rgb$descriptor() {
        return gtk_hsv_to_rgb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_hsv_to_rgb(gdouble h, gdouble s, gdouble v, gdouble *r, gdouble *g, gdouble *b)
     * }
     */
    public static MethodHandle gtk_hsv_to_rgb$handle() {
        return gtk_hsv_to_rgb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_hsv_to_rgb(gdouble h, gdouble s, gdouble v, gdouble *r, gdouble *g, gdouble *b)
     * }
     */
    public static void gtk_hsv_to_rgb(double h, double s, double v, MemorySegment r, MemorySegment g, MemorySegment b) {
        var mh$ = gtk_hsv_to_rgb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_hsv_to_rgb", h, s, v, r, g, b);
            }
            mh$.invokeExact(h, s, v, r, g, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_rgb_to_hsv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_rgb_to_hsv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_rgb_to_hsv(gdouble r, gdouble g, gdouble b, gdouble *h, gdouble *s, gdouble *v)
     * }
     */
    public static FunctionDescriptor gtk_rgb_to_hsv$descriptor() {
        return gtk_rgb_to_hsv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_rgb_to_hsv(gdouble r, gdouble g, gdouble b, gdouble *h, gdouble *s, gdouble *v)
     * }
     */
    public static MethodHandle gtk_rgb_to_hsv$handle() {
        return gtk_rgb_to_hsv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_rgb_to_hsv(gdouble r, gdouble g, gdouble b, gdouble *h, gdouble *s, gdouble *v)
     * }
     */
    public static void gtk_rgb_to_hsv(double r, double g, double b, MemorySegment h, MemorySegment s, MemorySegment v) {
        var mh$ = gtk_rgb_to_hsv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_rgb_to_hsv", r, g, b, h, s, v);
            }
            mh$.invokeExact(r, g, b, h, s, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_combo_box_text_get_type()
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_get_type$descriptor() {
        return gtk_combo_box_text_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_combo_box_text_get_type()
     * }
     */
    public static MethodHandle gtk_combo_box_text_get_type$handle() {
        return gtk_combo_box_text_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_combo_box_text_get_type()
     * }
     */
    public static long gtk_combo_box_text_get_type() {
        var mh$ = gtk_combo_box_text_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_text_new()
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_new$descriptor() {
        return gtk_combo_box_text_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_text_new()
     * }
     */
    public static MethodHandle gtk_combo_box_text_new$handle() {
        return gtk_combo_box_text_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_text_new()
     * }
     */
    public static MemorySegment gtk_combo_box_text_new() {
        var mh$ = gtk_combo_box_text_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_new_with_entry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_new_with_entry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_text_new_with_entry()
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_new_with_entry$descriptor() {
        return gtk_combo_box_text_new_with_entry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_text_new_with_entry()
     * }
     */
    public static MethodHandle gtk_combo_box_text_new_with_entry$handle() {
        return gtk_combo_box_text_new_with_entry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_combo_box_text_new_with_entry()
     * }
     */
    public static MemorySegment gtk_combo_box_text_new_with_entry() {
        var mh$ = gtk_combo_box_text_new_with_entry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_new_with_entry");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_append_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_append_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_append_text(GtkComboBoxText *combo_box, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_append_text$descriptor() {
        return gtk_combo_box_text_append_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_append_text(GtkComboBoxText *combo_box, const gchar *text)
     * }
     */
    public static MethodHandle gtk_combo_box_text_append_text$handle() {
        return gtk_combo_box_text_append_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_append_text(GtkComboBoxText *combo_box, const gchar *text)
     * }
     */
    public static void gtk_combo_box_text_append_text(MemorySegment combo_box, MemorySegment text) {
        var mh$ = gtk_combo_box_text_append_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_append_text", combo_box, text);
            }
            mh$.invokeExact(combo_box, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_insert_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_insert_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_insert_text(GtkComboBoxText *combo_box, gint position, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_insert_text$descriptor() {
        return gtk_combo_box_text_insert_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_insert_text(GtkComboBoxText *combo_box, gint position, const gchar *text)
     * }
     */
    public static MethodHandle gtk_combo_box_text_insert_text$handle() {
        return gtk_combo_box_text_insert_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_insert_text(GtkComboBoxText *combo_box, gint position, const gchar *text)
     * }
     */
    public static void gtk_combo_box_text_insert_text(MemorySegment combo_box, int position, MemorySegment text) {
        var mh$ = gtk_combo_box_text_insert_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_insert_text", combo_box, position, text);
            }
            mh$.invokeExact(combo_box, position, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_prepend_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_prepend_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_prepend_text(GtkComboBoxText *combo_box, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_prepend_text$descriptor() {
        return gtk_combo_box_text_prepend_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_prepend_text(GtkComboBoxText *combo_box, const gchar *text)
     * }
     */
    public static MethodHandle gtk_combo_box_text_prepend_text$handle() {
        return gtk_combo_box_text_prepend_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_prepend_text(GtkComboBoxText *combo_box, const gchar *text)
     * }
     */
    public static void gtk_combo_box_text_prepend_text(MemorySegment combo_box, MemorySegment text) {
        var mh$ = gtk_combo_box_text_prepend_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_prepend_text", combo_box, text);
            }
            mh$.invokeExact(combo_box, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_remove(GtkComboBoxText *combo_box, gint position)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_remove$descriptor() {
        return gtk_combo_box_text_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_remove(GtkComboBoxText *combo_box, gint position)
     * }
     */
    public static MethodHandle gtk_combo_box_text_remove$handle() {
        return gtk_combo_box_text_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_remove(GtkComboBoxText *combo_box, gint position)
     * }
     */
    public static void gtk_combo_box_text_remove(MemorySegment combo_box, int position) {
        var mh$ = gtk_combo_box_text_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_remove", combo_box, position);
            }
            mh$.invokeExact(combo_box, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_remove_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_remove_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_remove_all(GtkComboBoxText *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_remove_all$descriptor() {
        return gtk_combo_box_text_remove_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_remove_all(GtkComboBoxText *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_text_remove_all$handle() {
        return gtk_combo_box_text_remove_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_remove_all(GtkComboBoxText *combo_box)
     * }
     */
    public static void gtk_combo_box_text_remove_all(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_text_remove_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_remove_all", combo_box);
            }
            mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_get_active_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_get_active_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_combo_box_text_get_active_text(GtkComboBoxText *combo_box)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_get_active_text$descriptor() {
        return gtk_combo_box_text_get_active_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_combo_box_text_get_active_text(GtkComboBoxText *combo_box)
     * }
     */
    public static MethodHandle gtk_combo_box_text_get_active_text$handle() {
        return gtk_combo_box_text_get_active_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_combo_box_text_get_active_text(GtkComboBoxText *combo_box)
     * }
     */
    public static MemorySegment gtk_combo_box_text_get_active_text(MemorySegment combo_box) {
        var mh$ = gtk_combo_box_text_get_active_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_get_active_text", combo_box);
            }
            return (MemorySegment)mh$.invokeExact(combo_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_insert(GtkComboBoxText *combo_box, gint position, const gchar *id, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_insert$descriptor() {
        return gtk_combo_box_text_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_insert(GtkComboBoxText *combo_box, gint position, const gchar *id, const gchar *text)
     * }
     */
    public static MethodHandle gtk_combo_box_text_insert$handle() {
        return gtk_combo_box_text_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_insert(GtkComboBoxText *combo_box, gint position, const gchar *id, const gchar *text)
     * }
     */
    public static void gtk_combo_box_text_insert(MemorySegment combo_box, int position, MemorySegment id, MemorySegment text) {
        var mh$ = gtk_combo_box_text_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_insert", combo_box, position, id, text);
            }
            mh$.invokeExact(combo_box, position, id, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_append(GtkComboBoxText *combo_box, const gchar *id, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_append$descriptor() {
        return gtk_combo_box_text_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_append(GtkComboBoxText *combo_box, const gchar *id, const gchar *text)
     * }
     */
    public static MethodHandle gtk_combo_box_text_append$handle() {
        return gtk_combo_box_text_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_append(GtkComboBoxText *combo_box, const gchar *id, const gchar *text)
     * }
     */
    public static void gtk_combo_box_text_append(MemorySegment combo_box, MemorySegment id, MemorySegment text) {
        var mh$ = gtk_combo_box_text_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_append", combo_box, id, text);
            }
            mh$.invokeExact(combo_box, id, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_combo_box_text_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_combo_box_text_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_prepend(GtkComboBoxText *combo_box, const gchar *id, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_combo_box_text_prepend$descriptor() {
        return gtk_combo_box_text_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_prepend(GtkComboBoxText *combo_box, const gchar *id, const gchar *text)
     * }
     */
    public static MethodHandle gtk_combo_box_text_prepend$handle() {
        return gtk_combo_box_text_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_combo_box_text_prepend(GtkComboBoxText *combo_box, const gchar *id, const gchar *text)
     * }
     */
    public static void gtk_combo_box_text_prepend(MemorySegment combo_box, MemorySegment id, MemorySegment text) {
        var mh$ = gtk_combo_box_text_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_combo_box_text_prepend", combo_box, id, text);
            }
            mh$.invokeExact(combo_box, id, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_CSS_SECTION_DOCUMENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_SECTION_DOCUMENT = 0
     * }
     */
    public static int GTK_CSS_SECTION_DOCUMENT() {
        return GTK_CSS_SECTION_DOCUMENT;
    }
    private static final int GTK_CSS_SECTION_IMPORT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_SECTION_IMPORT = 1
     * }
     */
    public static int GTK_CSS_SECTION_IMPORT() {
        return GTK_CSS_SECTION_IMPORT;
    }
    private static final int GTK_CSS_SECTION_COLOR_DEFINITION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_SECTION_COLOR_DEFINITION = 2
     * }
     */
    public static int GTK_CSS_SECTION_COLOR_DEFINITION() {
        return GTK_CSS_SECTION_COLOR_DEFINITION;
    }
    private static final int GTK_CSS_SECTION_BINDING_SET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_SECTION_BINDING_SET = 3
     * }
     */
    public static int GTK_CSS_SECTION_BINDING_SET() {
        return GTK_CSS_SECTION_BINDING_SET;
    }
    private static final int GTK_CSS_SECTION_RULESET = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_SECTION_RULESET = 4
     * }
     */
    public static int GTK_CSS_SECTION_RULESET() {
        return GTK_CSS_SECTION_RULESET;
    }
    private static final int GTK_CSS_SECTION_SELECTOR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_SECTION_SELECTOR = 5
     * }
     */
    public static int GTK_CSS_SECTION_SELECTOR() {
        return GTK_CSS_SECTION_SELECTOR;
    }
    private static final int GTK_CSS_SECTION_DECLARATION = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_SECTION_DECLARATION = 6
     * }
     */
    public static int GTK_CSS_SECTION_DECLARATION() {
        return GTK_CSS_SECTION_DECLARATION;
    }
    private static final int GTK_CSS_SECTION_VALUE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_SECTION_VALUE = 7
     * }
     */
    public static int GTK_CSS_SECTION_VALUE() {
        return GTK_CSS_SECTION_VALUE;
    }
    private static final int GTK_CSS_SECTION_KEYFRAMES = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_SECTION_KEYFRAMES = 8
     * }
     */
    public static int GTK_CSS_SECTION_KEYFRAMES() {
        return GTK_CSS_SECTION_KEYFRAMES;
    }

    private static class gtk_css_section_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_css_section_get_type()
     * }
     */
    public static FunctionDescriptor gtk_css_section_get_type$descriptor() {
        return gtk_css_section_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_css_section_get_type()
     * }
     */
    public static MethodHandle gtk_css_section_get_type$handle() {
        return gtk_css_section_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_css_section_get_type()
     * }
     */
    public static long gtk_css_section_get_type() {
        var mh$ = gtk_css_section_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_section_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCssSection *gtk_css_section_ref(GtkCssSection *section)
     * }
     */
    public static FunctionDescriptor gtk_css_section_ref$descriptor() {
        return gtk_css_section_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCssSection *gtk_css_section_ref(GtkCssSection *section)
     * }
     */
    public static MethodHandle gtk_css_section_ref$handle() {
        return gtk_css_section_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCssSection *gtk_css_section_ref(GtkCssSection *section)
     * }
     */
    public static MemorySegment gtk_css_section_ref(MemorySegment section) {
        var mh$ = gtk_css_section_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_ref", section);
            }
            return (MemorySegment)mh$.invokeExact(section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_section_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_css_section_unref(GtkCssSection *section)
     * }
     */
    public static FunctionDescriptor gtk_css_section_unref$descriptor() {
        return gtk_css_section_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_css_section_unref(GtkCssSection *section)
     * }
     */
    public static MethodHandle gtk_css_section_unref$handle() {
        return gtk_css_section_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_css_section_unref(GtkCssSection *section)
     * }
     */
    public static void gtk_css_section_unref(MemorySegment section) {
        var mh$ = gtk_css_section_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_unref", section);
            }
            mh$.invokeExact(section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_section_get_section_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_get_section_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCssSectionType gtk_css_section_get_section_type(const GtkCssSection *section)
     * }
     */
    public static FunctionDescriptor gtk_css_section_get_section_type$descriptor() {
        return gtk_css_section_get_section_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCssSectionType gtk_css_section_get_section_type(const GtkCssSection *section)
     * }
     */
    public static MethodHandle gtk_css_section_get_section_type$handle() {
        return gtk_css_section_get_section_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCssSectionType gtk_css_section_get_section_type(const GtkCssSection *section)
     * }
     */
    public static int gtk_css_section_get_section_type(MemorySegment section) {
        var mh$ = gtk_css_section_get_section_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_get_section_type", section);
            }
            return (int)mh$.invokeExact(section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_section_get_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_get_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCssSection *gtk_css_section_get_parent(const GtkCssSection *section)
     * }
     */
    public static FunctionDescriptor gtk_css_section_get_parent$descriptor() {
        return gtk_css_section_get_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCssSection *gtk_css_section_get_parent(const GtkCssSection *section)
     * }
     */
    public static MethodHandle gtk_css_section_get_parent$handle() {
        return gtk_css_section_get_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCssSection *gtk_css_section_get_parent(const GtkCssSection *section)
     * }
     */
    public static MemorySegment gtk_css_section_get_parent(MemorySegment section) {
        var mh$ = gtk_css_section_get_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_get_parent", section);
            }
            return (MemorySegment)mh$.invokeExact(section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_section_get_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_get_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *gtk_css_section_get_file(const GtkCssSection *section)
     * }
     */
    public static FunctionDescriptor gtk_css_section_get_file$descriptor() {
        return gtk_css_section_get_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *gtk_css_section_get_file(const GtkCssSection *section)
     * }
     */
    public static MethodHandle gtk_css_section_get_file$handle() {
        return gtk_css_section_get_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *gtk_css_section_get_file(const GtkCssSection *section)
     * }
     */
    public static MemorySegment gtk_css_section_get_file(MemorySegment section) {
        var mh$ = gtk_css_section_get_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_get_file", section);
            }
            return (MemorySegment)mh$.invokeExact(section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_section_get_start_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_get_start_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_start_line(const GtkCssSection *section)
     * }
     */
    public static FunctionDescriptor gtk_css_section_get_start_line$descriptor() {
        return gtk_css_section_get_start_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_start_line(const GtkCssSection *section)
     * }
     */
    public static MethodHandle gtk_css_section_get_start_line$handle() {
        return gtk_css_section_get_start_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_start_line(const GtkCssSection *section)
     * }
     */
    public static int gtk_css_section_get_start_line(MemorySegment section) {
        var mh$ = gtk_css_section_get_start_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_get_start_line", section);
            }
            return (int)mh$.invokeExact(section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_section_get_start_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_get_start_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_start_position(const GtkCssSection *section)
     * }
     */
    public static FunctionDescriptor gtk_css_section_get_start_position$descriptor() {
        return gtk_css_section_get_start_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_start_position(const GtkCssSection *section)
     * }
     */
    public static MethodHandle gtk_css_section_get_start_position$handle() {
        return gtk_css_section_get_start_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_start_position(const GtkCssSection *section)
     * }
     */
    public static int gtk_css_section_get_start_position(MemorySegment section) {
        var mh$ = gtk_css_section_get_start_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_get_start_position", section);
            }
            return (int)mh$.invokeExact(section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_section_get_end_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_get_end_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_end_line(const GtkCssSection *section)
     * }
     */
    public static FunctionDescriptor gtk_css_section_get_end_line$descriptor() {
        return gtk_css_section_get_end_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_end_line(const GtkCssSection *section)
     * }
     */
    public static MethodHandle gtk_css_section_get_end_line$handle() {
        return gtk_css_section_get_end_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_end_line(const GtkCssSection *section)
     * }
     */
    public static int gtk_css_section_get_end_line(MemorySegment section) {
        var mh$ = gtk_css_section_get_end_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_get_end_line", section);
            }
            return (int)mh$.invokeExact(section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_section_get_end_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_section_get_end_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_end_position(const GtkCssSection *section)
     * }
     */
    public static FunctionDescriptor gtk_css_section_get_end_position$descriptor() {
        return gtk_css_section_get_end_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_end_position(const GtkCssSection *section)
     * }
     */
    public static MethodHandle gtk_css_section_get_end_position$handle() {
        return gtk_css_section_get_end_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_css_section_get_end_position(const GtkCssSection *section)
     * }
     */
    public static int gtk_css_section_get_end_position(MemorySegment section) {
        var mh$ = gtk_css_section_get_end_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_section_get_end_position", section);
            }
            return (int)mh$.invokeExact(section);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_CSS_PROVIDER_ERROR_FAILED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_PROVIDER_ERROR_FAILED = 0
     * }
     */
    public static int GTK_CSS_PROVIDER_ERROR_FAILED() {
        return GTK_CSS_PROVIDER_ERROR_FAILED;
    }
    private static final int GTK_CSS_PROVIDER_ERROR_SYNTAX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_PROVIDER_ERROR_SYNTAX = 1
     * }
     */
    public static int GTK_CSS_PROVIDER_ERROR_SYNTAX() {
        return GTK_CSS_PROVIDER_ERROR_SYNTAX;
    }
    private static final int GTK_CSS_PROVIDER_ERROR_IMPORT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_PROVIDER_ERROR_IMPORT = 2
     * }
     */
    public static int GTK_CSS_PROVIDER_ERROR_IMPORT() {
        return GTK_CSS_PROVIDER_ERROR_IMPORT;
    }
    private static final int GTK_CSS_PROVIDER_ERROR_NAME = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_PROVIDER_ERROR_NAME = 3
     * }
     */
    public static int GTK_CSS_PROVIDER_ERROR_NAME() {
        return GTK_CSS_PROVIDER_ERROR_NAME;
    }
    private static final int GTK_CSS_PROVIDER_ERROR_DEPRECATED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_PROVIDER_ERROR_DEPRECATED = 4
     * }
     */
    public static int GTK_CSS_PROVIDER_ERROR_DEPRECATED() {
        return GTK_CSS_PROVIDER_ERROR_DEPRECATED;
    }
    private static final int GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE = 5
     * }
     */
    public static int GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE() {
        return GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE;
    }

    private static class gtk_css_provider_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark gtk_css_provider_error_quark()
     * }
     */
    public static FunctionDescriptor gtk_css_provider_error_quark$descriptor() {
        return gtk_css_provider_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark gtk_css_provider_error_quark()
     * }
     */
    public static MethodHandle gtk_css_provider_error_quark$handle() {
        return gtk_css_provider_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark gtk_css_provider_error_quark()
     * }
     */
    public static int gtk_css_provider_error_quark() {
        var mh$ = gtk_css_provider_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_provider_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_css_provider_get_type()
     * }
     */
    public static FunctionDescriptor gtk_css_provider_get_type$descriptor() {
        return gtk_css_provider_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_css_provider_get_type()
     * }
     */
    public static MethodHandle gtk_css_provider_get_type$handle() {
        return gtk_css_provider_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_css_provider_get_type()
     * }
     */
    public static long gtk_css_provider_get_type() {
        var mh$ = gtk_css_provider_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_provider_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCssProvider *gtk_css_provider_new()
     * }
     */
    public static FunctionDescriptor gtk_css_provider_new$descriptor() {
        return gtk_css_provider_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCssProvider *gtk_css_provider_new()
     * }
     */
    public static MethodHandle gtk_css_provider_new$handle() {
        return gtk_css_provider_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCssProvider *gtk_css_provider_new()
     * }
     */
    public static MemorySegment gtk_css_provider_new() {
        var mh$ = gtk_css_provider_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_provider_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gtk_css_provider_to_string(GtkCssProvider *provider)
     * }
     */
    public static FunctionDescriptor gtk_css_provider_to_string$descriptor() {
        return gtk_css_provider_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gtk_css_provider_to_string(GtkCssProvider *provider)
     * }
     */
    public static MethodHandle gtk_css_provider_to_string$handle() {
        return gtk_css_provider_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gtk_css_provider_to_string(GtkCssProvider *provider)
     * }
     */
    public static MemorySegment gtk_css_provider_to_string(MemorySegment provider) {
        var mh$ = gtk_css_provider_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_to_string", provider);
            }
            return (MemorySegment)mh$.invokeExact(provider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_provider_load_from_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_load_from_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_css_provider_load_from_data(GtkCssProvider *css_provider, const gchar *data, gssize length, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_css_provider_load_from_data$descriptor() {
        return gtk_css_provider_load_from_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_css_provider_load_from_data(GtkCssProvider *css_provider, const gchar *data, gssize length, GError **error)
     * }
     */
    public static MethodHandle gtk_css_provider_load_from_data$handle() {
        return gtk_css_provider_load_from_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_css_provider_load_from_data(GtkCssProvider *css_provider, const gchar *data, gssize length, GError **error)
     * }
     */
    public static int gtk_css_provider_load_from_data(MemorySegment css_provider, MemorySegment data, long length, MemorySegment error) {
        var mh$ = gtk_css_provider_load_from_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_load_from_data", css_provider, data, length, error);
            }
            return (int)mh$.invokeExact(css_provider, data, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_provider_load_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_load_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_css_provider_load_from_file(GtkCssProvider *css_provider, GFile *file, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_css_provider_load_from_file$descriptor() {
        return gtk_css_provider_load_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_css_provider_load_from_file(GtkCssProvider *css_provider, GFile *file, GError **error)
     * }
     */
    public static MethodHandle gtk_css_provider_load_from_file$handle() {
        return gtk_css_provider_load_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_css_provider_load_from_file(GtkCssProvider *css_provider, GFile *file, GError **error)
     * }
     */
    public static int gtk_css_provider_load_from_file(MemorySegment css_provider, MemorySegment file, MemorySegment error) {
        var mh$ = gtk_css_provider_load_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_load_from_file", css_provider, file, error);
            }
            return (int)mh$.invokeExact(css_provider, file, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_provider_load_from_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_load_from_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_css_provider_load_from_path(GtkCssProvider *css_provider, const gchar *path, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_css_provider_load_from_path$descriptor() {
        return gtk_css_provider_load_from_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_css_provider_load_from_path(GtkCssProvider *css_provider, const gchar *path, GError **error)
     * }
     */
    public static MethodHandle gtk_css_provider_load_from_path$handle() {
        return gtk_css_provider_load_from_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_css_provider_load_from_path(GtkCssProvider *css_provider, const gchar *path, GError **error)
     * }
     */
    public static int gtk_css_provider_load_from_path(MemorySegment css_provider, MemorySegment path, MemorySegment error) {
        var mh$ = gtk_css_provider_load_from_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_load_from_path", css_provider, path, error);
            }
            return (int)mh$.invokeExact(css_provider, path, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_provider_load_from_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_load_from_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_css_provider_load_from_resource(GtkCssProvider *css_provider, const gchar *resource_path)
     * }
     */
    public static FunctionDescriptor gtk_css_provider_load_from_resource$descriptor() {
        return gtk_css_provider_load_from_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_css_provider_load_from_resource(GtkCssProvider *css_provider, const gchar *resource_path)
     * }
     */
    public static MethodHandle gtk_css_provider_load_from_resource$handle() {
        return gtk_css_provider_load_from_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_css_provider_load_from_resource(GtkCssProvider *css_provider, const gchar *resource_path)
     * }
     */
    public static void gtk_css_provider_load_from_resource(MemorySegment css_provider, MemorySegment resource_path) {
        var mh$ = gtk_css_provider_load_from_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_load_from_resource", css_provider, resource_path);
            }
            mh$.invokeExact(css_provider, resource_path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_provider_get_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_get_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCssProvider *gtk_css_provider_get_default()
     * }
     */
    public static FunctionDescriptor gtk_css_provider_get_default$descriptor() {
        return gtk_css_provider_get_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCssProvider *gtk_css_provider_get_default()
     * }
     */
    public static MethodHandle gtk_css_provider_get_default$handle() {
        return gtk_css_provider_get_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCssProvider *gtk_css_provider_get_default()
     * }
     */
    public static MemorySegment gtk_css_provider_get_default() {
        var mh$ = gtk_css_provider_get_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_get_default");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_css_provider_get_named {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_css_provider_get_named"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkCssProvider *gtk_css_provider_get_named(const gchar *name, const gchar *variant)
     * }
     */
    public static FunctionDescriptor gtk_css_provider_get_named$descriptor() {
        return gtk_css_provider_get_named.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkCssProvider *gtk_css_provider_get_named(const gchar *name, const gchar *variant)
     * }
     */
    public static MethodHandle gtk_css_provider_get_named$handle() {
        return gtk_css_provider_get_named.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkCssProvider *gtk_css_provider_get_named(const gchar *name, const gchar *variant)
     * }
     */
    public static MemorySegment gtk_css_provider_get_named(MemorySegment name, MemorySegment variant) {
        var mh$ = gtk_css_provider_get_named.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_css_provider_get_named", name, variant);
            }
            return (MemorySegment)mh$.invokeExact(name, variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_DEBUG_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_MISC = 1
     * }
     */
    public static int GTK_DEBUG_MISC() {
        return GTK_DEBUG_MISC;
    }
    private static final int GTK_DEBUG_PLUGSOCKET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_PLUGSOCKET = 2
     * }
     */
    public static int GTK_DEBUG_PLUGSOCKET() {
        return GTK_DEBUG_PLUGSOCKET;
    }
    private static final int GTK_DEBUG_TEXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_TEXT = 4
     * }
     */
    public static int GTK_DEBUG_TEXT() {
        return GTK_DEBUG_TEXT;
    }
    private static final int GTK_DEBUG_TREE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_TREE = 8
     * }
     */
    public static int GTK_DEBUG_TREE() {
        return GTK_DEBUG_TREE;
    }
    private static final int GTK_DEBUG_UPDATES = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_UPDATES = 16
     * }
     */
    public static int GTK_DEBUG_UPDATES() {
        return GTK_DEBUG_UPDATES;
    }
    private static final int GTK_DEBUG_KEYBINDINGS = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_KEYBINDINGS = 32
     * }
     */
    public static int GTK_DEBUG_KEYBINDINGS() {
        return GTK_DEBUG_KEYBINDINGS;
    }
    private static final int GTK_DEBUG_MULTIHEAD = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_MULTIHEAD = 64
     * }
     */
    public static int GTK_DEBUG_MULTIHEAD() {
        return GTK_DEBUG_MULTIHEAD;
    }
    private static final int GTK_DEBUG_MODULES = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_MODULES = 128
     * }
     */
    public static int GTK_DEBUG_MODULES() {
        return GTK_DEBUG_MODULES;
    }
    private static final int GTK_DEBUG_GEOMETRY = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_GEOMETRY = 256
     * }
     */
    public static int GTK_DEBUG_GEOMETRY() {
        return GTK_DEBUG_GEOMETRY;
    }
    private static final int GTK_DEBUG_ICONTHEME = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_ICONTHEME = 512
     * }
     */
    public static int GTK_DEBUG_ICONTHEME() {
        return GTK_DEBUG_ICONTHEME;
    }
    private static final int GTK_DEBUG_PRINTING = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_PRINTING = 1024
     * }
     */
    public static int GTK_DEBUG_PRINTING() {
        return GTK_DEBUG_PRINTING;
    }
    private static final int GTK_DEBUG_BUILDER = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_BUILDER = 2048
     * }
     */
    public static int GTK_DEBUG_BUILDER() {
        return GTK_DEBUG_BUILDER;
    }
    private static final int GTK_DEBUG_SIZE_REQUEST = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_SIZE_REQUEST = 4096
     * }
     */
    public static int GTK_DEBUG_SIZE_REQUEST() {
        return GTK_DEBUG_SIZE_REQUEST;
    }
    private static final int GTK_DEBUG_NO_CSS_CACHE = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_NO_CSS_CACHE = 8192
     * }
     */
    public static int GTK_DEBUG_NO_CSS_CACHE() {
        return GTK_DEBUG_NO_CSS_CACHE;
    }
    private static final int GTK_DEBUG_BASELINES = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_BASELINES = 16384
     * }
     */
    public static int GTK_DEBUG_BASELINES() {
        return GTK_DEBUG_BASELINES;
    }
    private static final int GTK_DEBUG_PIXEL_CACHE = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_PIXEL_CACHE = 32768
     * }
     */
    public static int GTK_DEBUG_PIXEL_CACHE() {
        return GTK_DEBUG_PIXEL_CACHE;
    }
    private static final int GTK_DEBUG_NO_PIXEL_CACHE = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_NO_PIXEL_CACHE = 65536
     * }
     */
    public static int GTK_DEBUG_NO_PIXEL_CACHE() {
        return GTK_DEBUG_NO_PIXEL_CACHE;
    }
    private static final int GTK_DEBUG_INTERACTIVE = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_INTERACTIVE = 131072
     * }
     */
    public static int GTK_DEBUG_INTERACTIVE() {
        return GTK_DEBUG_INTERACTIVE;
    }
    private static final int GTK_DEBUG_TOUCHSCREEN = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_TOUCHSCREEN = 262144
     * }
     */
    public static int GTK_DEBUG_TOUCHSCREEN() {
        return GTK_DEBUG_TOUCHSCREEN;
    }
    private static final int GTK_DEBUG_ACTIONS = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_ACTIONS = 524288
     * }
     */
    public static int GTK_DEBUG_ACTIONS() {
        return GTK_DEBUG_ACTIONS;
    }
    private static final int GTK_DEBUG_RESIZE = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_RESIZE = 1048576
     * }
     */
    public static int GTK_DEBUG_RESIZE() {
        return GTK_DEBUG_RESIZE;
    }
    private static final int GTK_DEBUG_LAYOUT = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEBUG_LAYOUT = 2097152
     * }
     */
    public static int GTK_DEBUG_LAYOUT() {
        return GTK_DEBUG_LAYOUT;
    }

    private static class gtk_get_debug_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_get_debug_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_get_debug_flags()
     * }
     */
    public static FunctionDescriptor gtk_get_debug_flags$descriptor() {
        return gtk_get_debug_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_get_debug_flags()
     * }
     */
    public static MethodHandle gtk_get_debug_flags$handle() {
        return gtk_get_debug_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_get_debug_flags()
     * }
     */
    public static int gtk_get_debug_flags() {
        var mh$ = gtk_get_debug_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_get_debug_flags");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_set_debug_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_set_debug_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_set_debug_flags(guint flags)
     * }
     */
    public static FunctionDescriptor gtk_set_debug_flags$descriptor() {
        return gtk_set_debug_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_set_debug_flags(guint flags)
     * }
     */
    public static MethodHandle gtk_set_debug_flags$handle() {
        return gtk_set_debug_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_set_debug_flags(guint flags)
     * }
     */
    public static void gtk_set_debug_flags(int flags) {
        var mh$ = gtk_set_debug_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_set_debug_flags", flags);
            }
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_DEST_DEFAULT_MOTION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEST_DEFAULT_MOTION = 1
     * }
     */
    public static int GTK_DEST_DEFAULT_MOTION() {
        return GTK_DEST_DEFAULT_MOTION;
    }
    private static final int GTK_DEST_DEFAULT_HIGHLIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEST_DEFAULT_HIGHLIGHT = 2
     * }
     */
    public static int GTK_DEST_DEFAULT_HIGHLIGHT() {
        return GTK_DEST_DEFAULT_HIGHLIGHT;
    }
    private static final int GTK_DEST_DEFAULT_DROP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEST_DEFAULT_DROP = 4
     * }
     */
    public static int GTK_DEST_DEFAULT_DROP() {
        return GTK_DEST_DEFAULT_DROP;
    }
    private static final int GTK_DEST_DEFAULT_ALL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_DEST_DEFAULT_ALL = 7
     * }
     */
    public static int GTK_DEST_DEFAULT_ALL() {
        return GTK_DEST_DEFAULT_ALL;
    }

    private static class gtk_drag_dest_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set(GtkWidget *widget, GtkDestDefaults flags, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_set$descriptor() {
        return gtk_drag_dest_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set(GtkWidget *widget, GtkDestDefaults flags, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static MethodHandle gtk_drag_dest_set$handle() {
        return gtk_drag_dest_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set(GtkWidget *widget, GtkDestDefaults flags, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static void gtk_drag_dest_set(MemorySegment widget, int flags, MemorySegment targets, int n_targets, int actions) {
        var mh$ = gtk_drag_dest_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_set", widget, flags, targets, n_targets, actions);
            }
            mh$.invokeExact(widget, flags, targets, n_targets, actions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_dest_set_proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_set_proxy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set_proxy(GtkWidget *widget, GdkWindow *proxy_window, GdkDragProtocol protocol, gboolean use_coordinates)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_set_proxy$descriptor() {
        return gtk_drag_dest_set_proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set_proxy(GtkWidget *widget, GdkWindow *proxy_window, GdkDragProtocol protocol, gboolean use_coordinates)
     * }
     */
    public static MethodHandle gtk_drag_dest_set_proxy$handle() {
        return gtk_drag_dest_set_proxy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set_proxy(GtkWidget *widget, GdkWindow *proxy_window, GdkDragProtocol protocol, gboolean use_coordinates)
     * }
     */
    public static void gtk_drag_dest_set_proxy(MemorySegment widget, MemorySegment proxy_window, int protocol, int use_coordinates) {
        var mh$ = gtk_drag_dest_set_proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_set_proxy", widget, proxy_window, protocol, use_coordinates);
            }
            mh$.invokeExact(widget, proxy_window, protocol, use_coordinates);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_dest_unset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_unset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_unset(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_unset$descriptor() {
        return gtk_drag_dest_unset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_unset(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_dest_unset$handle() {
        return gtk_drag_dest_unset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_dest_unset(GtkWidget *widget)
     * }
     */
    public static void gtk_drag_dest_unset(MemorySegment widget) {
        var mh$ = gtk_drag_dest_unset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_unset", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_dest_find_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_find_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_drag_dest_find_target(GtkWidget *widget, GdkDragContext *context, GtkTargetList *target_list)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_find_target$descriptor() {
        return gtk_drag_dest_find_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gtk_drag_dest_find_target(GtkWidget *widget, GdkDragContext *context, GtkTargetList *target_list)
     * }
     */
    public static MethodHandle gtk_drag_dest_find_target$handle() {
        return gtk_drag_dest_find_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gtk_drag_dest_find_target(GtkWidget *widget, GdkDragContext *context, GtkTargetList *target_list)
     * }
     */
    public static MemorySegment gtk_drag_dest_find_target(MemorySegment widget, MemorySegment context, MemorySegment target_list) {
        var mh$ = gtk_drag_dest_find_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_find_target", widget, context, target_list);
            }
            return (MemorySegment)mh$.invokeExact(widget, context, target_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_dest_get_target_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_get_target_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_drag_dest_get_target_list(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_get_target_list$descriptor() {
        return gtk_drag_dest_get_target_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_drag_dest_get_target_list(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_dest_get_target_list$handle() {
        return gtk_drag_dest_get_target_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_drag_dest_get_target_list(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_drag_dest_get_target_list(MemorySegment widget) {
        var mh$ = gtk_drag_dest_get_target_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_get_target_list", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_dest_set_target_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_set_target_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set_target_list(GtkWidget *widget, GtkTargetList *target_list)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_set_target_list$descriptor() {
        return gtk_drag_dest_set_target_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set_target_list(GtkWidget *widget, GtkTargetList *target_list)
     * }
     */
    public static MethodHandle gtk_drag_dest_set_target_list$handle() {
        return gtk_drag_dest_set_target_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set_target_list(GtkWidget *widget, GtkTargetList *target_list)
     * }
     */
    public static void gtk_drag_dest_set_target_list(MemorySegment widget, MemorySegment target_list) {
        var mh$ = gtk_drag_dest_set_target_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_set_target_list", widget, target_list);
            }
            mh$.invokeExact(widget, target_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_dest_add_text_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_add_text_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_add_text_targets(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_add_text_targets$descriptor() {
        return gtk_drag_dest_add_text_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_add_text_targets(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_dest_add_text_targets$handle() {
        return gtk_drag_dest_add_text_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_dest_add_text_targets(GtkWidget *widget)
     * }
     */
    public static void gtk_drag_dest_add_text_targets(MemorySegment widget) {
        var mh$ = gtk_drag_dest_add_text_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_add_text_targets", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_dest_add_image_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_add_image_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_add_image_targets(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_add_image_targets$descriptor() {
        return gtk_drag_dest_add_image_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_add_image_targets(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_dest_add_image_targets$handle() {
        return gtk_drag_dest_add_image_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_dest_add_image_targets(GtkWidget *widget)
     * }
     */
    public static void gtk_drag_dest_add_image_targets(MemorySegment widget) {
        var mh$ = gtk_drag_dest_add_image_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_add_image_targets", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_dest_add_uri_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_add_uri_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_add_uri_targets(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_add_uri_targets$descriptor() {
        return gtk_drag_dest_add_uri_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_add_uri_targets(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_dest_add_uri_targets$handle() {
        return gtk_drag_dest_add_uri_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_dest_add_uri_targets(GtkWidget *widget)
     * }
     */
    public static void gtk_drag_dest_add_uri_targets(MemorySegment widget) {
        var mh$ = gtk_drag_dest_add_uri_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_add_uri_targets", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_dest_set_track_motion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_set_track_motion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set_track_motion(GtkWidget *widget, gboolean track_motion)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_set_track_motion$descriptor() {
        return gtk_drag_dest_set_track_motion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set_track_motion(GtkWidget *widget, gboolean track_motion)
     * }
     */
    public static MethodHandle gtk_drag_dest_set_track_motion$handle() {
        return gtk_drag_dest_set_track_motion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_dest_set_track_motion(GtkWidget *widget, gboolean track_motion)
     * }
     */
    public static void gtk_drag_dest_set_track_motion(MemorySegment widget, int track_motion) {
        var mh$ = gtk_drag_dest_set_track_motion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_set_track_motion", widget, track_motion);
            }
            mh$.invokeExact(widget, track_motion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_dest_get_track_motion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_dest_get_track_motion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_drag_dest_get_track_motion(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_dest_get_track_motion$descriptor() {
        return gtk_drag_dest_get_track_motion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_drag_dest_get_track_motion(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_dest_get_track_motion$handle() {
        return gtk_drag_dest_get_track_motion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_drag_dest_get_track_motion(GtkWidget *widget)
     * }
     */
    public static int gtk_drag_dest_get_track_motion(MemorySegment widget) {
        var mh$ = gtk_drag_dest_get_track_motion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_dest_get_track_motion", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set(GtkWidget *widget, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_set$descriptor() {
        return gtk_drag_source_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set(GtkWidget *widget, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static MethodHandle gtk_drag_source_set$handle() {
        return gtk_drag_source_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_source_set(GtkWidget *widget, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions)
     * }
     */
    public static void gtk_drag_source_set(MemorySegment widget, int start_button_mask, MemorySegment targets, int n_targets, int actions) {
        var mh$ = gtk_drag_source_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_set", widget, start_button_mask, targets, n_targets, actions);
            }
            mh$.invokeExact(widget, start_button_mask, targets, n_targets, actions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_unset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_unset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_unset(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_unset$descriptor() {
        return gtk_drag_source_unset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_unset(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_source_unset$handle() {
        return gtk_drag_source_unset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_source_unset(GtkWidget *widget)
     * }
     */
    public static void gtk_drag_source_unset(MemorySegment widget) {
        var mh$ = gtk_drag_source_unset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_unset", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_get_target_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_get_target_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_drag_source_get_target_list(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_get_target_list$descriptor() {
        return gtk_drag_source_get_target_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_drag_source_get_target_list(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_source_get_target_list$handle() {
        return gtk_drag_source_get_target_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTargetList *gtk_drag_source_get_target_list(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_drag_source_get_target_list(MemorySegment widget) {
        var mh$ = gtk_drag_source_get_target_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_get_target_list", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_set_target_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_set_target_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_target_list(GtkWidget *widget, GtkTargetList *target_list)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_set_target_list$descriptor() {
        return gtk_drag_source_set_target_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_target_list(GtkWidget *widget, GtkTargetList *target_list)
     * }
     */
    public static MethodHandle gtk_drag_source_set_target_list$handle() {
        return gtk_drag_source_set_target_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_target_list(GtkWidget *widget, GtkTargetList *target_list)
     * }
     */
    public static void gtk_drag_source_set_target_list(MemorySegment widget, MemorySegment target_list) {
        var mh$ = gtk_drag_source_set_target_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_set_target_list", widget, target_list);
            }
            mh$.invokeExact(widget, target_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_add_text_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_add_text_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_add_text_targets(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_add_text_targets$descriptor() {
        return gtk_drag_source_add_text_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_add_text_targets(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_source_add_text_targets$handle() {
        return gtk_drag_source_add_text_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_source_add_text_targets(GtkWidget *widget)
     * }
     */
    public static void gtk_drag_source_add_text_targets(MemorySegment widget) {
        var mh$ = gtk_drag_source_add_text_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_add_text_targets", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_add_image_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_add_image_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_add_image_targets(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_add_image_targets$descriptor() {
        return gtk_drag_source_add_image_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_add_image_targets(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_source_add_image_targets$handle() {
        return gtk_drag_source_add_image_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_source_add_image_targets(GtkWidget *widget)
     * }
     */
    public static void gtk_drag_source_add_image_targets(MemorySegment widget) {
        var mh$ = gtk_drag_source_add_image_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_add_image_targets", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_add_uri_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_add_uri_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_add_uri_targets(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_add_uri_targets$descriptor() {
        return gtk_drag_source_add_uri_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_add_uri_targets(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_drag_source_add_uri_targets$handle() {
        return gtk_drag_source_add_uri_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_source_add_uri_targets(GtkWidget *widget)
     * }
     */
    public static void gtk_drag_source_add_uri_targets(MemorySegment widget) {
        var mh$ = gtk_drag_source_add_uri_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_add_uri_targets", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_set_icon_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_set_icon_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_pixbuf(GtkWidget *widget, GdkPixbuf *pixbuf)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_set_icon_pixbuf$descriptor() {
        return gtk_drag_source_set_icon_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_pixbuf(GtkWidget *widget, GdkPixbuf *pixbuf)
     * }
     */
    public static MethodHandle gtk_drag_source_set_icon_pixbuf$handle() {
        return gtk_drag_source_set_icon_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_pixbuf(GtkWidget *widget, GdkPixbuf *pixbuf)
     * }
     */
    public static void gtk_drag_source_set_icon_pixbuf(MemorySegment widget, MemorySegment pixbuf) {
        var mh$ = gtk_drag_source_set_icon_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_set_icon_pixbuf", widget, pixbuf);
            }
            mh$.invokeExact(widget, pixbuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_set_icon_stock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_set_icon_stock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_stock(GtkWidget *widget, const gchar *stock_id)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_set_icon_stock$descriptor() {
        return gtk_drag_source_set_icon_stock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_stock(GtkWidget *widget, const gchar *stock_id)
     * }
     */
    public static MethodHandle gtk_drag_source_set_icon_stock$handle() {
        return gtk_drag_source_set_icon_stock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_stock(GtkWidget *widget, const gchar *stock_id)
     * }
     */
    public static void gtk_drag_source_set_icon_stock(MemorySegment widget, MemorySegment stock_id) {
        var mh$ = gtk_drag_source_set_icon_stock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_set_icon_stock", widget, stock_id);
            }
            mh$.invokeExact(widget, stock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_set_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_set_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_name(GtkWidget *widget, const gchar *icon_name)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_set_icon_name$descriptor() {
        return gtk_drag_source_set_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_name(GtkWidget *widget, const gchar *icon_name)
     * }
     */
    public static MethodHandle gtk_drag_source_set_icon_name$handle() {
        return gtk_drag_source_set_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_name(GtkWidget *widget, const gchar *icon_name)
     * }
     */
    public static void gtk_drag_source_set_icon_name(MemorySegment widget, MemorySegment icon_name) {
        var mh$ = gtk_drag_source_set_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_set_icon_name", widget, icon_name);
            }
            mh$.invokeExact(widget, icon_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drag_source_set_icon_gicon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drag_source_set_icon_gicon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_gicon(GtkWidget *widget, GIcon *icon)
     * }
     */
    public static FunctionDescriptor gtk_drag_source_set_icon_gicon$descriptor() {
        return gtk_drag_source_set_icon_gicon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_gicon(GtkWidget *widget, GIcon *icon)
     * }
     */
    public static MethodHandle gtk_drag_source_set_icon_gicon$handle() {
        return gtk_drag_source_set_icon_gicon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_drag_source_set_icon_gicon(GtkWidget *widget, GIcon *icon)
     * }
     */
    public static void gtk_drag_source_set_icon_gicon(MemorySegment widget, MemorySegment icon) {
        var mh$ = gtk_drag_source_set_icon_gicon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drag_source_set_icon_gicon", widget, icon);
            }
            mh$.invokeExact(widget, icon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drawing_area_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drawing_area_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_drawing_area_get_type()
     * }
     */
    public static FunctionDescriptor gtk_drawing_area_get_type$descriptor() {
        return gtk_drawing_area_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_drawing_area_get_type()
     * }
     */
    public static MethodHandle gtk_drawing_area_get_type$handle() {
        return gtk_drawing_area_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_drawing_area_get_type()
     * }
     */
    public static long gtk_drawing_area_get_type() {
        var mh$ = gtk_drawing_area_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drawing_area_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_drawing_area_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_drawing_area_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_drawing_area_new()
     * }
     */
    public static FunctionDescriptor gtk_drawing_area_new$descriptor() {
        return gtk_drawing_area_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_drawing_area_new()
     * }
     */
    public static MethodHandle gtk_drawing_area_new$handle() {
        return gtk_drawing_area_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_drawing_area_new()
     * }
     */
    public static MemorySegment gtk_drawing_area_new() {
        var mh$ = gtk_drawing_area_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_drawing_area_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_box_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_box_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_event_box_get_type()
     * }
     */
    public static FunctionDescriptor gtk_event_box_get_type$descriptor() {
        return gtk_event_box_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_event_box_get_type()
     * }
     */
    public static MethodHandle gtk_event_box_get_type$handle() {
        return gtk_event_box_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_event_box_get_type()
     * }
     */
    public static long gtk_event_box_get_type() {
        var mh$ = gtk_event_box_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_box_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_box_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_box_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_event_box_new()
     * }
     */
    public static FunctionDescriptor gtk_event_box_new$descriptor() {
        return gtk_event_box_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_event_box_new()
     * }
     */
    public static MethodHandle gtk_event_box_new$handle() {
        return gtk_event_box_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_event_box_new()
     * }
     */
    public static MemorySegment gtk_event_box_new() {
        var mh$ = gtk_event_box_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_box_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_box_get_visible_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_box_get_visible_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_event_box_get_visible_window(GtkEventBox *event_box)
     * }
     */
    public static FunctionDescriptor gtk_event_box_get_visible_window$descriptor() {
        return gtk_event_box_get_visible_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_event_box_get_visible_window(GtkEventBox *event_box)
     * }
     */
    public static MethodHandle gtk_event_box_get_visible_window$handle() {
        return gtk_event_box_get_visible_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_event_box_get_visible_window(GtkEventBox *event_box)
     * }
     */
    public static int gtk_event_box_get_visible_window(MemorySegment event_box) {
        var mh$ = gtk_event_box_get_visible_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_box_get_visible_window", event_box);
            }
            return (int)mh$.invokeExact(event_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_box_set_visible_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_box_set_visible_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_event_box_set_visible_window(GtkEventBox *event_box, gboolean visible_window)
     * }
     */
    public static FunctionDescriptor gtk_event_box_set_visible_window$descriptor() {
        return gtk_event_box_set_visible_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_event_box_set_visible_window(GtkEventBox *event_box, gboolean visible_window)
     * }
     */
    public static MethodHandle gtk_event_box_set_visible_window$handle() {
        return gtk_event_box_set_visible_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_event_box_set_visible_window(GtkEventBox *event_box, gboolean visible_window)
     * }
     */
    public static void gtk_event_box_set_visible_window(MemorySegment event_box, int visible_window) {
        var mh$ = gtk_event_box_set_visible_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_box_set_visible_window", event_box, visible_window);
            }
            mh$.invokeExact(event_box, visible_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_box_get_above_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_box_get_above_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_event_box_get_above_child(GtkEventBox *event_box)
     * }
     */
    public static FunctionDescriptor gtk_event_box_get_above_child$descriptor() {
        return gtk_event_box_get_above_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_event_box_get_above_child(GtkEventBox *event_box)
     * }
     */
    public static MethodHandle gtk_event_box_get_above_child$handle() {
        return gtk_event_box_get_above_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_event_box_get_above_child(GtkEventBox *event_box)
     * }
     */
    public static int gtk_event_box_get_above_child(MemorySegment event_box) {
        var mh$ = gtk_event_box_get_above_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_box_get_above_child", event_box);
            }
            return (int)mh$.invokeExact(event_box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_box_set_above_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_box_set_above_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_event_box_set_above_child(GtkEventBox *event_box, gboolean above_child)
     * }
     */
    public static FunctionDescriptor gtk_event_box_set_above_child$descriptor() {
        return gtk_event_box_set_above_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_event_box_set_above_child(GtkEventBox *event_box, gboolean above_child)
     * }
     */
    public static MethodHandle gtk_event_box_set_above_child$handle() {
        return gtk_event_box_set_above_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_event_box_set_above_child(GtkEventBox *event_box, gboolean above_child)
     * }
     */
    public static void gtk_event_box_set_above_child(MemorySegment event_box, int above_child) {
        var mh$ = gtk_event_box_set_above_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_box_set_above_child", event_box, above_child);
            }
            mh$.invokeExact(event_box, above_child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_event_controller_get_type()
     * }
     */
    public static FunctionDescriptor gtk_event_controller_get_type$descriptor() {
        return gtk_event_controller_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_event_controller_get_type()
     * }
     */
    public static MethodHandle gtk_event_controller_get_type$handle() {
        return gtk_event_controller_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_event_controller_get_type()
     * }
     */
    public static long gtk_event_controller_get_type() {
        var mh$ = gtk_event_controller_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_get_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_get_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_event_controller_get_widget(GtkEventController *controller)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_get_widget$descriptor() {
        return gtk_event_controller_get_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_event_controller_get_widget(GtkEventController *controller)
     * }
     */
    public static MethodHandle gtk_event_controller_get_widget$handle() {
        return gtk_event_controller_get_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_event_controller_get_widget(GtkEventController *controller)
     * }
     */
    public static MemorySegment gtk_event_controller_get_widget(MemorySegment controller) {
        var mh$ = gtk_event_controller_get_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_get_widget", controller);
            }
            return (MemorySegment)mh$.invokeExact(controller);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_handle_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_handle_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_event_controller_handle_event(GtkEventController *controller, const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_handle_event$descriptor() {
        return gtk_event_controller_handle_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_event_controller_handle_event(GtkEventController *controller, const GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_event_controller_handle_event$handle() {
        return gtk_event_controller_handle_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_event_controller_handle_event(GtkEventController *controller, const GdkEvent *event)
     * }
     */
    public static int gtk_event_controller_handle_event(MemorySegment controller, MemorySegment event) {
        var mh$ = gtk_event_controller_handle_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_handle_event", controller, event);
            }
            return (int)mh$.invokeExact(controller, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_event_controller_reset(GtkEventController *controller)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_reset$descriptor() {
        return gtk_event_controller_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_event_controller_reset(GtkEventController *controller)
     * }
     */
    public static MethodHandle gtk_event_controller_reset$handle() {
        return gtk_event_controller_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_event_controller_reset(GtkEventController *controller)
     * }
     */
    public static void gtk_event_controller_reset(MemorySegment controller) {
        var mh$ = gtk_event_controller_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_reset", controller);
            }
            mh$.invokeExact(controller);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_get_propagation_phase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_get_propagation_phase"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkPropagationPhase gtk_event_controller_get_propagation_phase(GtkEventController *controller)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_get_propagation_phase$descriptor() {
        return gtk_event_controller_get_propagation_phase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkPropagationPhase gtk_event_controller_get_propagation_phase(GtkEventController *controller)
     * }
     */
    public static MethodHandle gtk_event_controller_get_propagation_phase$handle() {
        return gtk_event_controller_get_propagation_phase.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkPropagationPhase gtk_event_controller_get_propagation_phase(GtkEventController *controller)
     * }
     */
    public static int gtk_event_controller_get_propagation_phase(MemorySegment controller) {
        var mh$ = gtk_event_controller_get_propagation_phase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_get_propagation_phase", controller);
            }
            return (int)mh$.invokeExact(controller);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_set_propagation_phase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_set_propagation_phase"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_event_controller_set_propagation_phase(GtkEventController *controller, GtkPropagationPhase phase)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_set_propagation_phase$descriptor() {
        return gtk_event_controller_set_propagation_phase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_event_controller_set_propagation_phase(GtkEventController *controller, GtkPropagationPhase phase)
     * }
     */
    public static MethodHandle gtk_event_controller_set_propagation_phase$handle() {
        return gtk_event_controller_set_propagation_phase.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_event_controller_set_propagation_phase(GtkEventController *controller, GtkPropagationPhase phase)
     * }
     */
    public static void gtk_event_controller_set_propagation_phase(MemorySegment controller, int phase) {
        var mh$ = gtk_event_controller_set_propagation_phase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_set_propagation_phase", controller, phase);
            }
            mh$.invokeExact(controller, phase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_key_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_key_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_event_controller_key_get_type()
     * }
     */
    public static FunctionDescriptor gtk_event_controller_key_get_type$descriptor() {
        return gtk_event_controller_key_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_event_controller_key_get_type()
     * }
     */
    public static MethodHandle gtk_event_controller_key_get_type$handle() {
        return gtk_event_controller_key_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_event_controller_key_get_type()
     * }
     */
    public static long gtk_event_controller_key_get_type() {
        var mh$ = gtk_event_controller_key_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_key_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_key_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_key_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEventController *gtk_event_controller_key_new(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_key_new$descriptor() {
        return gtk_event_controller_key_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEventController *gtk_event_controller_key_new(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_event_controller_key_new$handle() {
        return gtk_event_controller_key_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEventController *gtk_event_controller_key_new(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_event_controller_key_new(MemorySegment widget) {
        var mh$ = gtk_event_controller_key_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_key_new", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_key_set_im_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_key_set_im_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_event_controller_key_set_im_context(GtkEventControllerKey *controller, GtkIMContext *im_context)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_key_set_im_context$descriptor() {
        return gtk_event_controller_key_set_im_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_event_controller_key_set_im_context(GtkEventControllerKey *controller, GtkIMContext *im_context)
     * }
     */
    public static MethodHandle gtk_event_controller_key_set_im_context$handle() {
        return gtk_event_controller_key_set_im_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_event_controller_key_set_im_context(GtkEventControllerKey *controller, GtkIMContext *im_context)
     * }
     */
    public static void gtk_event_controller_key_set_im_context(MemorySegment controller, MemorySegment im_context) {
        var mh$ = gtk_event_controller_key_set_im_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_key_set_im_context", controller, im_context);
            }
            mh$.invokeExact(controller, im_context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_key_get_im_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_key_get_im_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkIMContext *gtk_event_controller_key_get_im_context(GtkEventControllerKey *controller)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_key_get_im_context$descriptor() {
        return gtk_event_controller_key_get_im_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkIMContext *gtk_event_controller_key_get_im_context(GtkEventControllerKey *controller)
     * }
     */
    public static MethodHandle gtk_event_controller_key_get_im_context$handle() {
        return gtk_event_controller_key_get_im_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkIMContext *gtk_event_controller_key_get_im_context(GtkEventControllerKey *controller)
     * }
     */
    public static MemorySegment gtk_event_controller_key_get_im_context(MemorySegment controller) {
        var mh$ = gtk_event_controller_key_get_im_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_key_get_im_context", controller);
            }
            return (MemorySegment)mh$.invokeExact(controller);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_key_forward {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_key_forward"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_event_controller_key_forward(GtkEventControllerKey *controller, GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_key_forward$descriptor() {
        return gtk_event_controller_key_forward.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_event_controller_key_forward(GtkEventControllerKey *controller, GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_event_controller_key_forward$handle() {
        return gtk_event_controller_key_forward.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_event_controller_key_forward(GtkEventControllerKey *controller, GtkWidget *widget)
     * }
     */
    public static int gtk_event_controller_key_forward(MemorySegment controller, MemorySegment widget) {
        var mh$ = gtk_event_controller_key_forward.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_key_forward", controller, widget);
            }
            return (int)mh$.invokeExact(controller, widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_key_get_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_key_get_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_event_controller_key_get_group(GtkEventControllerKey *controller)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_key_get_group$descriptor() {
        return gtk_event_controller_key_get_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_event_controller_key_get_group(GtkEventControllerKey *controller)
     * }
     */
    public static MethodHandle gtk_event_controller_key_get_group$handle() {
        return gtk_event_controller_key_get_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_event_controller_key_get_group(GtkEventControllerKey *controller)
     * }
     */
    public static int gtk_event_controller_key_get_group(MemorySegment controller) {
        var mh$ = gtk_event_controller_key_get_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_key_get_group", controller);
            }
            return (int)mh$.invokeExact(controller);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_motion_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_motion_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_event_controller_motion_get_type()
     * }
     */
    public static FunctionDescriptor gtk_event_controller_motion_get_type$descriptor() {
        return gtk_event_controller_motion_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_event_controller_motion_get_type()
     * }
     */
    public static MethodHandle gtk_event_controller_motion_get_type$handle() {
        return gtk_event_controller_motion_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_event_controller_motion_get_type()
     * }
     */
    public static long gtk_event_controller_motion_get_type() {
        var mh$ = gtk_event_controller_motion_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_motion_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_motion_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_motion_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEventController *gtk_event_controller_motion_new(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_motion_new$descriptor() {
        return gtk_event_controller_motion_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEventController *gtk_event_controller_motion_new(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_event_controller_motion_new$handle() {
        return gtk_event_controller_motion_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEventController *gtk_event_controller_motion_new(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_event_controller_motion_new(MemorySegment widget) {
        var mh$ = gtk_event_controller_motion_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_motion_new", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_EVENT_CONTROLLER_SCROLL_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EVENT_CONTROLLER_SCROLL_NONE = 0
     * }
     */
    public static int GTK_EVENT_CONTROLLER_SCROLL_NONE() {
        return GTK_EVENT_CONTROLLER_SCROLL_NONE;
    }
    private static final int GTK_EVENT_CONTROLLER_SCROLL_VERTICAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EVENT_CONTROLLER_SCROLL_VERTICAL = 1
     * }
     */
    public static int GTK_EVENT_CONTROLLER_SCROLL_VERTICAL() {
        return GTK_EVENT_CONTROLLER_SCROLL_VERTICAL;
    }
    private static final int GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL = 2
     * }
     */
    public static int GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL() {
        return GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL;
    }
    private static final int GTK_EVENT_CONTROLLER_SCROLL_DISCRETE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EVENT_CONTROLLER_SCROLL_DISCRETE = 4
     * }
     */
    public static int GTK_EVENT_CONTROLLER_SCROLL_DISCRETE() {
        return GTK_EVENT_CONTROLLER_SCROLL_DISCRETE;
    }
    private static final int GTK_EVENT_CONTROLLER_SCROLL_KINETIC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EVENT_CONTROLLER_SCROLL_KINETIC = 8
     * }
     */
    public static int GTK_EVENT_CONTROLLER_SCROLL_KINETIC() {
        return GTK_EVENT_CONTROLLER_SCROLL_KINETIC;
    }
    private static final int GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES = 3
     * }
     */
    public static int GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES() {
        return GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES;
    }

    private static class gtk_event_controller_scroll_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_scroll_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_event_controller_scroll_get_type()
     * }
     */
    public static FunctionDescriptor gtk_event_controller_scroll_get_type$descriptor() {
        return gtk_event_controller_scroll_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_event_controller_scroll_get_type()
     * }
     */
    public static MethodHandle gtk_event_controller_scroll_get_type$handle() {
        return gtk_event_controller_scroll_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_event_controller_scroll_get_type()
     * }
     */
    public static long gtk_event_controller_scroll_get_type() {
        var mh$ = gtk_event_controller_scroll_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_scroll_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_scroll_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_scroll_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEventController *gtk_event_controller_scroll_new(GtkWidget *widget, GtkEventControllerScrollFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_scroll_new$descriptor() {
        return gtk_event_controller_scroll_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEventController *gtk_event_controller_scroll_new(GtkWidget *widget, GtkEventControllerScrollFlags flags)
     * }
     */
    public static MethodHandle gtk_event_controller_scroll_new$handle() {
        return gtk_event_controller_scroll_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEventController *gtk_event_controller_scroll_new(GtkWidget *widget, GtkEventControllerScrollFlags flags)
     * }
     */
    public static MemorySegment gtk_event_controller_scroll_new(MemorySegment widget, int flags) {
        var mh$ = gtk_event_controller_scroll_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_scroll_new", widget, flags);
            }
            return (MemorySegment)mh$.invokeExact(widget, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_scroll_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_scroll_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_event_controller_scroll_set_flags(GtkEventControllerScroll *scroll, GtkEventControllerScrollFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_scroll_set_flags$descriptor() {
        return gtk_event_controller_scroll_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_event_controller_scroll_set_flags(GtkEventControllerScroll *scroll, GtkEventControllerScrollFlags flags)
     * }
     */
    public static MethodHandle gtk_event_controller_scroll_set_flags$handle() {
        return gtk_event_controller_scroll_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_event_controller_scroll_set_flags(GtkEventControllerScroll *scroll, GtkEventControllerScrollFlags flags)
     * }
     */
    public static void gtk_event_controller_scroll_set_flags(MemorySegment scroll, int flags) {
        var mh$ = gtk_event_controller_scroll_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_scroll_set_flags", scroll, flags);
            }
            mh$.invokeExact(scroll, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_event_controller_scroll_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_event_controller_scroll_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkEventControllerScrollFlags gtk_event_controller_scroll_get_flags(GtkEventControllerScroll *scroll)
     * }
     */
    public static FunctionDescriptor gtk_event_controller_scroll_get_flags$descriptor() {
        return gtk_event_controller_scroll_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkEventControllerScrollFlags gtk_event_controller_scroll_get_flags(GtkEventControllerScroll *scroll)
     * }
     */
    public static MethodHandle gtk_event_controller_scroll_get_flags$handle() {
        return gtk_event_controller_scroll_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkEventControllerScrollFlags gtk_event_controller_scroll_get_flags(GtkEventControllerScroll *scroll)
     * }
     */
    public static int gtk_event_controller_scroll_get_flags(MemorySegment scroll) {
        var mh$ = gtk_event_controller_scroll_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_event_controller_scroll_get_flags", scroll);
            }
            return (int)mh$.invokeExact(scroll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_expander_get_type()
     * }
     */
    public static FunctionDescriptor gtk_expander_get_type$descriptor() {
        return gtk_expander_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_expander_get_type()
     * }
     */
    public static MethodHandle gtk_expander_get_type$handle() {
        return gtk_expander_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_expander_get_type()
     * }
     */
    public static long gtk_expander_get_type() {
        var mh$ = gtk_expander_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_expander_new(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_expander_new$descriptor() {
        return gtk_expander_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_expander_new(const gchar *label)
     * }
     */
    public static MethodHandle gtk_expander_new$handle() {
        return gtk_expander_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_expander_new(const gchar *label)
     * }
     */
    public static MemorySegment gtk_expander_new(MemorySegment label) {
        var mh$ = gtk_expander_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_new", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_new_with_mnemonic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_new_with_mnemonic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_expander_new_with_mnemonic(const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_expander_new_with_mnemonic$descriptor() {
        return gtk_expander_new_with_mnemonic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_expander_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MethodHandle gtk_expander_new_with_mnemonic$handle() {
        return gtk_expander_new_with_mnemonic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_expander_new_with_mnemonic(const gchar *label)
     * }
     */
    public static MemorySegment gtk_expander_new_with_mnemonic(MemorySegment label) {
        var mh$ = gtk_expander_new_with_mnemonic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_new_with_mnemonic", label);
            }
            return (MemorySegment)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_set_expanded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_set_expanded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_expanded(GtkExpander *expander, gboolean expanded)
     * }
     */
    public static FunctionDescriptor gtk_expander_set_expanded$descriptor() {
        return gtk_expander_set_expanded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_expanded(GtkExpander *expander, gboolean expanded)
     * }
     */
    public static MethodHandle gtk_expander_set_expanded$handle() {
        return gtk_expander_set_expanded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_expander_set_expanded(GtkExpander *expander, gboolean expanded)
     * }
     */
    public static void gtk_expander_set_expanded(MemorySegment expander, int expanded) {
        var mh$ = gtk_expander_set_expanded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_set_expanded", expander, expanded);
            }
            mh$.invokeExact(expander, expanded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_get_expanded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_get_expanded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_expanded(GtkExpander *expander)
     * }
     */
    public static FunctionDescriptor gtk_expander_get_expanded$descriptor() {
        return gtk_expander_get_expanded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_expanded(GtkExpander *expander)
     * }
     */
    public static MethodHandle gtk_expander_get_expanded$handle() {
        return gtk_expander_get_expanded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_expanded(GtkExpander *expander)
     * }
     */
    public static int gtk_expander_get_expanded(MemorySegment expander) {
        var mh$ = gtk_expander_get_expanded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_get_expanded", expander);
            }
            return (int)mh$.invokeExact(expander);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_set_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_set_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_spacing(GtkExpander *expander, gint spacing)
     * }
     */
    public static FunctionDescriptor gtk_expander_set_spacing$descriptor() {
        return gtk_expander_set_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_spacing(GtkExpander *expander, gint spacing)
     * }
     */
    public static MethodHandle gtk_expander_set_spacing$handle() {
        return gtk_expander_set_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_expander_set_spacing(GtkExpander *expander, gint spacing)
     * }
     */
    public static void gtk_expander_set_spacing(MemorySegment expander, int spacing) {
        var mh$ = gtk_expander_set_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_set_spacing", expander, spacing);
            }
            mh$.invokeExact(expander, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_get_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_get_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_expander_get_spacing(GtkExpander *expander)
     * }
     */
    public static FunctionDescriptor gtk_expander_get_spacing$descriptor() {
        return gtk_expander_get_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_expander_get_spacing(GtkExpander *expander)
     * }
     */
    public static MethodHandle gtk_expander_get_spacing$handle() {
        return gtk_expander_get_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_expander_get_spacing(GtkExpander *expander)
     * }
     */
    public static int gtk_expander_get_spacing(MemorySegment expander) {
        var mh$ = gtk_expander_get_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_get_spacing", expander);
            }
            return (int)mh$.invokeExact(expander);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_set_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_set_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_label(GtkExpander *expander, const gchar *label)
     * }
     */
    public static FunctionDescriptor gtk_expander_set_label$descriptor() {
        return gtk_expander_set_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_label(GtkExpander *expander, const gchar *label)
     * }
     */
    public static MethodHandle gtk_expander_set_label$handle() {
        return gtk_expander_set_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_expander_set_label(GtkExpander *expander, const gchar *label)
     * }
     */
    public static void gtk_expander_set_label(MemorySegment expander, MemorySegment label) {
        var mh$ = gtk_expander_set_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_set_label", expander, label);
            }
            mh$.invokeExact(expander, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_get_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_expander_get_label(GtkExpander *expander)
     * }
     */
    public static FunctionDescriptor gtk_expander_get_label$descriptor() {
        return gtk_expander_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_expander_get_label(GtkExpander *expander)
     * }
     */
    public static MethodHandle gtk_expander_get_label$handle() {
        return gtk_expander_get_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_expander_get_label(GtkExpander *expander)
     * }
     */
    public static MemorySegment gtk_expander_get_label(MemorySegment expander) {
        var mh$ = gtk_expander_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_get_label", expander);
            }
            return (MemorySegment)mh$.invokeExact(expander);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_set_use_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_set_use_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_use_underline(GtkExpander *expander, gboolean use_underline)
     * }
     */
    public static FunctionDescriptor gtk_expander_set_use_underline$descriptor() {
        return gtk_expander_set_use_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_use_underline(GtkExpander *expander, gboolean use_underline)
     * }
     */
    public static MethodHandle gtk_expander_set_use_underline$handle() {
        return gtk_expander_set_use_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_expander_set_use_underline(GtkExpander *expander, gboolean use_underline)
     * }
     */
    public static void gtk_expander_set_use_underline(MemorySegment expander, int use_underline) {
        var mh$ = gtk_expander_set_use_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_set_use_underline", expander, use_underline);
            }
            mh$.invokeExact(expander, use_underline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_get_use_underline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_get_use_underline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_use_underline(GtkExpander *expander)
     * }
     */
    public static FunctionDescriptor gtk_expander_get_use_underline$descriptor() {
        return gtk_expander_get_use_underline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_use_underline(GtkExpander *expander)
     * }
     */
    public static MethodHandle gtk_expander_get_use_underline$handle() {
        return gtk_expander_get_use_underline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_use_underline(GtkExpander *expander)
     * }
     */
    public static int gtk_expander_get_use_underline(MemorySegment expander) {
        var mh$ = gtk_expander_get_use_underline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_get_use_underline", expander);
            }
            return (int)mh$.invokeExact(expander);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_set_use_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_set_use_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_use_markup(GtkExpander *expander, gboolean use_markup)
     * }
     */
    public static FunctionDescriptor gtk_expander_set_use_markup$descriptor() {
        return gtk_expander_set_use_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_use_markup(GtkExpander *expander, gboolean use_markup)
     * }
     */
    public static MethodHandle gtk_expander_set_use_markup$handle() {
        return gtk_expander_set_use_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_expander_set_use_markup(GtkExpander *expander, gboolean use_markup)
     * }
     */
    public static void gtk_expander_set_use_markup(MemorySegment expander, int use_markup) {
        var mh$ = gtk_expander_set_use_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_set_use_markup", expander, use_markup);
            }
            mh$.invokeExact(expander, use_markup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_get_use_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_get_use_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_use_markup(GtkExpander *expander)
     * }
     */
    public static FunctionDescriptor gtk_expander_get_use_markup$descriptor() {
        return gtk_expander_get_use_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_use_markup(GtkExpander *expander)
     * }
     */
    public static MethodHandle gtk_expander_get_use_markup$handle() {
        return gtk_expander_get_use_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_use_markup(GtkExpander *expander)
     * }
     */
    public static int gtk_expander_get_use_markup(MemorySegment expander) {
        var mh$ = gtk_expander_get_use_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_get_use_markup", expander);
            }
            return (int)mh$.invokeExact(expander);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_set_label_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_set_label_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_label_widget(GtkExpander *expander, GtkWidget *label_widget)
     * }
     */
    public static FunctionDescriptor gtk_expander_set_label_widget$descriptor() {
        return gtk_expander_set_label_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_label_widget(GtkExpander *expander, GtkWidget *label_widget)
     * }
     */
    public static MethodHandle gtk_expander_set_label_widget$handle() {
        return gtk_expander_set_label_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_expander_set_label_widget(GtkExpander *expander, GtkWidget *label_widget)
     * }
     */
    public static void gtk_expander_set_label_widget(MemorySegment expander, MemorySegment label_widget) {
        var mh$ = gtk_expander_set_label_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_set_label_widget", expander, label_widget);
            }
            mh$.invokeExact(expander, label_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_get_label_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_get_label_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_expander_get_label_widget(GtkExpander *expander)
     * }
     */
    public static FunctionDescriptor gtk_expander_get_label_widget$descriptor() {
        return gtk_expander_get_label_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_expander_get_label_widget(GtkExpander *expander)
     * }
     */
    public static MethodHandle gtk_expander_get_label_widget$handle() {
        return gtk_expander_get_label_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_expander_get_label_widget(GtkExpander *expander)
     * }
     */
    public static MemorySegment gtk_expander_get_label_widget(MemorySegment expander) {
        var mh$ = gtk_expander_get_label_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_get_label_widget", expander);
            }
            return (MemorySegment)mh$.invokeExact(expander);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_set_label_fill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_set_label_fill"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_label_fill(GtkExpander *expander, gboolean label_fill)
     * }
     */
    public static FunctionDescriptor gtk_expander_set_label_fill$descriptor() {
        return gtk_expander_set_label_fill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_label_fill(GtkExpander *expander, gboolean label_fill)
     * }
     */
    public static MethodHandle gtk_expander_set_label_fill$handle() {
        return gtk_expander_set_label_fill.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_expander_set_label_fill(GtkExpander *expander, gboolean label_fill)
     * }
     */
    public static void gtk_expander_set_label_fill(MemorySegment expander, int label_fill) {
        var mh$ = gtk_expander_set_label_fill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_set_label_fill", expander, label_fill);
            }
            mh$.invokeExact(expander, label_fill);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_get_label_fill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_get_label_fill"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_label_fill(GtkExpander *expander)
     * }
     */
    public static FunctionDescriptor gtk_expander_get_label_fill$descriptor() {
        return gtk_expander_get_label_fill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_label_fill(GtkExpander *expander)
     * }
     */
    public static MethodHandle gtk_expander_get_label_fill$handle() {
        return gtk_expander_get_label_fill.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_label_fill(GtkExpander *expander)
     * }
     */
    public static int gtk_expander_get_label_fill(MemorySegment expander) {
        var mh$ = gtk_expander_get_label_fill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_get_label_fill", expander);
            }
            return (int)mh$.invokeExact(expander);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_set_resize_toplevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_set_resize_toplevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_resize_toplevel(GtkExpander *expander, gboolean resize_toplevel)
     * }
     */
    public static FunctionDescriptor gtk_expander_set_resize_toplevel$descriptor() {
        return gtk_expander_set_resize_toplevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_expander_set_resize_toplevel(GtkExpander *expander, gboolean resize_toplevel)
     * }
     */
    public static MethodHandle gtk_expander_set_resize_toplevel$handle() {
        return gtk_expander_set_resize_toplevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_expander_set_resize_toplevel(GtkExpander *expander, gboolean resize_toplevel)
     * }
     */
    public static void gtk_expander_set_resize_toplevel(MemorySegment expander, int resize_toplevel) {
        var mh$ = gtk_expander_set_resize_toplevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_set_resize_toplevel", expander, resize_toplevel);
            }
            mh$.invokeExact(expander, resize_toplevel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_expander_get_resize_toplevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_expander_get_resize_toplevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_resize_toplevel(GtkExpander *expander)
     * }
     */
    public static FunctionDescriptor gtk_expander_get_resize_toplevel$descriptor() {
        return gtk_expander_get_resize_toplevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_resize_toplevel(GtkExpander *expander)
     * }
     */
    public static MethodHandle gtk_expander_get_resize_toplevel$handle() {
        return gtk_expander_get_resize_toplevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_expander_get_resize_toplevel(GtkExpander *expander)
     * }
     */
    public static int gtk_expander_get_resize_toplevel(MemorySegment expander) {
        var mh$ = gtk_expander_get_resize_toplevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_expander_get_resize_toplevel", expander);
            }
            return (int)mh$.invokeExact(expander);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_fixed_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_fixed_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_fixed_get_type()
     * }
     */
    public static FunctionDescriptor gtk_fixed_get_type$descriptor() {
        return gtk_fixed_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_fixed_get_type()
     * }
     */
    public static MethodHandle gtk_fixed_get_type$handle() {
        return gtk_fixed_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_fixed_get_type()
     * }
     */
    public static long gtk_fixed_get_type() {
        var mh$ = gtk_fixed_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_fixed_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_fixed_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_fixed_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_fixed_new()
     * }
     */
    public static FunctionDescriptor gtk_fixed_new$descriptor() {
        return gtk_fixed_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_fixed_new()
     * }
     */
    public static MethodHandle gtk_fixed_new$handle() {
        return gtk_fixed_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_fixed_new()
     * }
     */
    public static MemorySegment gtk_fixed_new() {
        var mh$ = gtk_fixed_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_fixed_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_fixed_put {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_fixed_put"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_fixed_put(GtkFixed *fixed, GtkWidget *widget, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_fixed_put$descriptor() {
        return gtk_fixed_put.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_fixed_put(GtkFixed *fixed, GtkWidget *widget, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_fixed_put$handle() {
        return gtk_fixed_put.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_fixed_put(GtkFixed *fixed, GtkWidget *widget, gint x, gint y)
     * }
     */
    public static void gtk_fixed_put(MemorySegment fixed, MemorySegment widget, int x, int y) {
        var mh$ = gtk_fixed_put.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_fixed_put", fixed, widget, x, y);
            }
            mh$.invokeExact(fixed, widget, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_fixed_move {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_fixed_move"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_fixed_move(GtkFixed *fixed, GtkWidget *widget, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_fixed_move$descriptor() {
        return gtk_fixed_move.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_fixed_move(GtkFixed *fixed, GtkWidget *widget, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_fixed_move$handle() {
        return gtk_fixed_move.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_fixed_move(GtkFixed *fixed, GtkWidget *widget, gint x, gint y)
     * }
     */
    public static void gtk_fixed_move(MemorySegment fixed, MemorySegment widget, int x, int y) {
        var mh$ = gtk_fixed_move.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_fixed_move", fixed, widget, x, y);
            }
            mh$.invokeExact(fixed, widget, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_FILE_FILTER_FILENAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_FILTER_FILENAME = 1
     * }
     */
    public static int GTK_FILE_FILTER_FILENAME() {
        return GTK_FILE_FILTER_FILENAME;
    }
    private static final int GTK_FILE_FILTER_URI = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_FILTER_URI = 2
     * }
     */
    public static int GTK_FILE_FILTER_URI() {
        return GTK_FILE_FILTER_URI;
    }
    private static final int GTK_FILE_FILTER_DISPLAY_NAME = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_FILTER_DISPLAY_NAME = 4
     * }
     */
    public static int GTK_FILE_FILTER_DISPLAY_NAME() {
        return GTK_FILE_FILTER_DISPLAY_NAME;
    }
    private static final int GTK_FILE_FILTER_MIME_TYPE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_FILTER_MIME_TYPE = 8
     * }
     */
    public static int GTK_FILE_FILTER_MIME_TYPE() {
        return GTK_FILE_FILTER_MIME_TYPE;
    }

    private static class gtk_file_filter_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_file_filter_get_type()
     * }
     */
    public static FunctionDescriptor gtk_file_filter_get_type$descriptor() {
        return gtk_file_filter_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_file_filter_get_type()
     * }
     */
    public static MethodHandle gtk_file_filter_get_type$handle() {
        return gtk_file_filter_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_file_filter_get_type()
     * }
     */
    public static long gtk_file_filter_get_type() {
        var mh$ = gtk_file_filter_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkFileFilter *gtk_file_filter_new()
     * }
     */
    public static FunctionDescriptor gtk_file_filter_new$descriptor() {
        return gtk_file_filter_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkFileFilter *gtk_file_filter_new()
     * }
     */
    public static MethodHandle gtk_file_filter_new$handle() {
        return gtk_file_filter_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkFileFilter *gtk_file_filter_new()
     * }
     */
    public static MemorySegment gtk_file_filter_new() {
        var mh$ = gtk_file_filter_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_filter_set_name(GtkFileFilter *filter, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_file_filter_set_name$descriptor() {
        return gtk_file_filter_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_filter_set_name(GtkFileFilter *filter, const gchar *name)
     * }
     */
    public static MethodHandle gtk_file_filter_set_name$handle() {
        return gtk_file_filter_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_filter_set_name(GtkFileFilter *filter, const gchar *name)
     * }
     */
    public static void gtk_file_filter_set_name(MemorySegment filter, MemorySegment name) {
        var mh$ = gtk_file_filter_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_set_name", filter, name);
            }
            mh$.invokeExact(filter, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_file_filter_get_name(GtkFileFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_file_filter_get_name$descriptor() {
        return gtk_file_filter_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_file_filter_get_name(GtkFileFilter *filter)
     * }
     */
    public static MethodHandle gtk_file_filter_get_name$handle() {
        return gtk_file_filter_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_file_filter_get_name(GtkFileFilter *filter)
     * }
     */
    public static MemorySegment gtk_file_filter_get_name(MemorySegment filter) {
        var mh$ = gtk_file_filter_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_get_name", filter);
            }
            return (MemorySegment)mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_add_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_add_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_mime_type(GtkFileFilter *filter, const gchar *mime_type)
     * }
     */
    public static FunctionDescriptor gtk_file_filter_add_mime_type$descriptor() {
        return gtk_file_filter_add_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_mime_type(GtkFileFilter *filter, const gchar *mime_type)
     * }
     */
    public static MethodHandle gtk_file_filter_add_mime_type$handle() {
        return gtk_file_filter_add_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_mime_type(GtkFileFilter *filter, const gchar *mime_type)
     * }
     */
    public static void gtk_file_filter_add_mime_type(MemorySegment filter, MemorySegment mime_type) {
        var mh$ = gtk_file_filter_add_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_add_mime_type", filter, mime_type);
            }
            mh$.invokeExact(filter, mime_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_add_pattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_add_pattern"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_pattern(GtkFileFilter *filter, const gchar *pattern)
     * }
     */
    public static FunctionDescriptor gtk_file_filter_add_pattern$descriptor() {
        return gtk_file_filter_add_pattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_pattern(GtkFileFilter *filter, const gchar *pattern)
     * }
     */
    public static MethodHandle gtk_file_filter_add_pattern$handle() {
        return gtk_file_filter_add_pattern.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_pattern(GtkFileFilter *filter, const gchar *pattern)
     * }
     */
    public static void gtk_file_filter_add_pattern(MemorySegment filter, MemorySegment pattern) {
        var mh$ = gtk_file_filter_add_pattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_add_pattern", filter, pattern);
            }
            mh$.invokeExact(filter, pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_add_pixbuf_formats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_add_pixbuf_formats"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_pixbuf_formats(GtkFileFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_file_filter_add_pixbuf_formats$descriptor() {
        return gtk_file_filter_add_pixbuf_formats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_pixbuf_formats(GtkFileFilter *filter)
     * }
     */
    public static MethodHandle gtk_file_filter_add_pixbuf_formats$handle() {
        return gtk_file_filter_add_pixbuf_formats.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_pixbuf_formats(GtkFileFilter *filter)
     * }
     */
    public static void gtk_file_filter_add_pixbuf_formats(MemorySegment filter) {
        var mh$ = gtk_file_filter_add_pixbuf_formats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_add_pixbuf_formats", filter);
            }
            mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_add_custom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_add_custom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_custom(GtkFileFilter *filter, GtkFileFilterFlags needed, GtkFileFilterFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor gtk_file_filter_add_custom$descriptor() {
        return gtk_file_filter_add_custom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_custom(GtkFileFilter *filter, GtkFileFilterFlags needed, GtkFileFilterFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle gtk_file_filter_add_custom$handle() {
        return gtk_file_filter_add_custom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_filter_add_custom(GtkFileFilter *filter, GtkFileFilterFlags needed, GtkFileFilterFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static void gtk_file_filter_add_custom(MemorySegment filter, int needed, MemorySegment func, MemorySegment data, MemorySegment notify) {
        var mh$ = gtk_file_filter_add_custom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_add_custom", filter, needed, func, data, notify);
            }
            mh$.invokeExact(filter, needed, func, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_get_needed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_get_needed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkFileFilterFlags gtk_file_filter_get_needed(GtkFileFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_file_filter_get_needed$descriptor() {
        return gtk_file_filter_get_needed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkFileFilterFlags gtk_file_filter_get_needed(GtkFileFilter *filter)
     * }
     */
    public static MethodHandle gtk_file_filter_get_needed$handle() {
        return gtk_file_filter_get_needed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkFileFilterFlags gtk_file_filter_get_needed(GtkFileFilter *filter)
     * }
     */
    public static int gtk_file_filter_get_needed(MemorySegment filter) {
        var mh$ = gtk_file_filter_get_needed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_get_needed", filter);
            }
            return (int)mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_filter_filter(GtkFileFilter *filter, const GtkFileFilterInfo *filter_info)
     * }
     */
    public static FunctionDescriptor gtk_file_filter_filter$descriptor() {
        return gtk_file_filter_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_filter_filter(GtkFileFilter *filter, const GtkFileFilterInfo *filter_info)
     * }
     */
    public static MethodHandle gtk_file_filter_filter$handle() {
        return gtk_file_filter_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_filter_filter(GtkFileFilter *filter, const GtkFileFilterInfo *filter_info)
     * }
     */
    public static int gtk_file_filter_filter(MemorySegment filter, MemorySegment filter_info) {
        var mh$ = gtk_file_filter_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_filter", filter, filter_info);
            }
            return (int)mh$.invokeExact(filter, filter_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_to_gvariant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_to_gvariant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *gtk_file_filter_to_gvariant(GtkFileFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_file_filter_to_gvariant$descriptor() {
        return gtk_file_filter_to_gvariant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *gtk_file_filter_to_gvariant(GtkFileFilter *filter)
     * }
     */
    public static MethodHandle gtk_file_filter_to_gvariant$handle() {
        return gtk_file_filter_to_gvariant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *gtk_file_filter_to_gvariant(GtkFileFilter *filter)
     * }
     */
    public static MemorySegment gtk_file_filter_to_gvariant(MemorySegment filter) {
        var mh$ = gtk_file_filter_to_gvariant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_to_gvariant", filter);
            }
            return (MemorySegment)mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_filter_new_from_gvariant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_filter_new_from_gvariant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkFileFilter *gtk_file_filter_new_from_gvariant(GVariant *variant)
     * }
     */
    public static FunctionDescriptor gtk_file_filter_new_from_gvariant$descriptor() {
        return gtk_file_filter_new_from_gvariant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkFileFilter *gtk_file_filter_new_from_gvariant(GVariant *variant)
     * }
     */
    public static MethodHandle gtk_file_filter_new_from_gvariant$handle() {
        return gtk_file_filter_new_from_gvariant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkFileFilter *gtk_file_filter_new_from_gvariant(GVariant *variant)
     * }
     */
    public static MemorySegment gtk_file_filter_new_from_gvariant(MemorySegment variant) {
        var mh$ = gtk_file_filter_new_from_gvariant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_filter_new_from_gvariant", variant);
            }
            return (MemorySegment)mh$.invokeExact(variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_FILE_CHOOSER_ACTION_OPEN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_ACTION_OPEN = 0
     * }
     */
    public static int GTK_FILE_CHOOSER_ACTION_OPEN() {
        return GTK_FILE_CHOOSER_ACTION_OPEN;
    }
    private static final int GTK_FILE_CHOOSER_ACTION_SAVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_ACTION_SAVE = 1
     * }
     */
    public static int GTK_FILE_CHOOSER_ACTION_SAVE() {
        return GTK_FILE_CHOOSER_ACTION_SAVE;
    }
    private static final int GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER = 2
     * }
     */
    public static int GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER() {
        return GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER;
    }
    private static final int GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER = 3
     * }
     */
    public static int GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER() {
        return GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER;
    }
    private static final int GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM = 0
     * }
     */
    public static int GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM() {
        return GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM;
    }
    private static final int GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = 1
     * }
     */
    public static int GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME() {
        return GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME;
    }
    private static final int GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = 2
     * }
     */
    public static int GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN() {
        return GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN;
    }

    private static class gtk_file_chooser_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_get_type()
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_type$descriptor() {
        return gtk_file_chooser_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_get_type()
     * }
     */
    public static MethodHandle gtk_file_chooser_get_type$handle() {
        return gtk_file_chooser_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_get_type()
     * }
     */
    public static long gtk_file_chooser_get_type() {
        var mh$ = gtk_file_chooser_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GTK_FILE_CHOOSER_ERROR_NONEXISTENT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_ERROR_NONEXISTENT = 0
     * }
     */
    public static int GTK_FILE_CHOOSER_ERROR_NONEXISTENT() {
        return GTK_FILE_CHOOSER_ERROR_NONEXISTENT;
    }
    private static final int GTK_FILE_CHOOSER_ERROR_BAD_FILENAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_ERROR_BAD_FILENAME = 1
     * }
     */
    public static int GTK_FILE_CHOOSER_ERROR_BAD_FILENAME() {
        return GTK_FILE_CHOOSER_ERROR_BAD_FILENAME;
    }
    private static final int GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS = 2
     * }
     */
    public static int GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS() {
        return GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS;
    }
    private static final int GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = 3
     * }
     */
    public static int GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME() {
        return GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME;
    }

    private static class gtk_file_chooser_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark gtk_file_chooser_error_quark()
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_error_quark$descriptor() {
        return gtk_file_chooser_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark gtk_file_chooser_error_quark()
     * }
     */
    public static MethodHandle gtk_file_chooser_error_quark$handle() {
        return gtk_file_chooser_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark gtk_file_chooser_error_quark()
     * }
     */
    public static int gtk_file_chooser_error_quark() {
        var mh$ = gtk_file_chooser_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_action(GtkFileChooser *chooser, GtkFileChooserAction action)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_action$descriptor() {
        return gtk_file_chooser_set_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_action(GtkFileChooser *chooser, GtkFileChooserAction action)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_action$handle() {
        return gtk_file_chooser_set_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_action(GtkFileChooser *chooser, GtkFileChooserAction action)
     * }
     */
    public static void gtk_file_chooser_set_action(MemorySegment chooser, int action) {
        var mh$ = gtk_file_chooser_set_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_action", chooser, action);
            }
            mh$.invokeExact(chooser, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkFileChooserAction gtk_file_chooser_get_action(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_action$descriptor() {
        return gtk_file_chooser_get_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkFileChooserAction gtk_file_chooser_get_action(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_action$handle() {
        return gtk_file_chooser_get_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkFileChooserAction gtk_file_chooser_get_action(GtkFileChooser *chooser)
     * }
     */
    public static int gtk_file_chooser_get_action(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_action", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_local_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_local_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_local_only(GtkFileChooser *chooser, gboolean local_only)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_local_only$descriptor() {
        return gtk_file_chooser_set_local_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_local_only(GtkFileChooser *chooser, gboolean local_only)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_local_only$handle() {
        return gtk_file_chooser_set_local_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_local_only(GtkFileChooser *chooser, gboolean local_only)
     * }
     */
    public static void gtk_file_chooser_set_local_only(MemorySegment chooser, int local_only) {
        var mh$ = gtk_file_chooser_set_local_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_local_only", chooser, local_only);
            }
            mh$.invokeExact(chooser, local_only);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_local_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_local_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_local_only(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_local_only$descriptor() {
        return gtk_file_chooser_get_local_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_local_only(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_local_only$handle() {
        return gtk_file_chooser_get_local_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_local_only(GtkFileChooser *chooser)
     * }
     */
    public static int gtk_file_chooser_get_local_only(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_local_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_local_only", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_select_multiple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_select_multiple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_select_multiple(GtkFileChooser *chooser, gboolean select_multiple)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_select_multiple$descriptor() {
        return gtk_file_chooser_set_select_multiple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_select_multiple(GtkFileChooser *chooser, gboolean select_multiple)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_select_multiple$handle() {
        return gtk_file_chooser_set_select_multiple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_select_multiple(GtkFileChooser *chooser, gboolean select_multiple)
     * }
     */
    public static void gtk_file_chooser_set_select_multiple(MemorySegment chooser, int select_multiple) {
        var mh$ = gtk_file_chooser_set_select_multiple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_select_multiple", chooser, select_multiple);
            }
            mh$.invokeExact(chooser, select_multiple);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_select_multiple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_select_multiple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_select_multiple(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_select_multiple$descriptor() {
        return gtk_file_chooser_get_select_multiple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_select_multiple(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_select_multiple$handle() {
        return gtk_file_chooser_get_select_multiple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_select_multiple(GtkFileChooser *chooser)
     * }
     */
    public static int gtk_file_chooser_get_select_multiple(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_select_multiple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_select_multiple", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_show_hidden {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_show_hidden"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_show_hidden(GtkFileChooser *chooser, gboolean show_hidden)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_show_hidden$descriptor() {
        return gtk_file_chooser_set_show_hidden.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_show_hidden(GtkFileChooser *chooser, gboolean show_hidden)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_show_hidden$handle() {
        return gtk_file_chooser_set_show_hidden.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_show_hidden(GtkFileChooser *chooser, gboolean show_hidden)
     * }
     */
    public static void gtk_file_chooser_set_show_hidden(MemorySegment chooser, int show_hidden) {
        var mh$ = gtk_file_chooser_set_show_hidden.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_show_hidden", chooser, show_hidden);
            }
            mh$.invokeExact(chooser, show_hidden);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_show_hidden {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_show_hidden"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_show_hidden(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_show_hidden$descriptor() {
        return gtk_file_chooser_get_show_hidden.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_show_hidden(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_show_hidden$handle() {
        return gtk_file_chooser_get_show_hidden.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_show_hidden(GtkFileChooser *chooser)
     * }
     */
    public static int gtk_file_chooser_get_show_hidden(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_show_hidden.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_show_hidden", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_do_overwrite_confirmation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_do_overwrite_confirmation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_do_overwrite_confirmation(GtkFileChooser *chooser, gboolean do_overwrite_confirmation)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_do_overwrite_confirmation$descriptor() {
        return gtk_file_chooser_set_do_overwrite_confirmation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_do_overwrite_confirmation(GtkFileChooser *chooser, gboolean do_overwrite_confirmation)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_do_overwrite_confirmation$handle() {
        return gtk_file_chooser_set_do_overwrite_confirmation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_do_overwrite_confirmation(GtkFileChooser *chooser, gboolean do_overwrite_confirmation)
     * }
     */
    public static void gtk_file_chooser_set_do_overwrite_confirmation(MemorySegment chooser, int do_overwrite_confirmation) {
        var mh$ = gtk_file_chooser_set_do_overwrite_confirmation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_do_overwrite_confirmation", chooser, do_overwrite_confirmation);
            }
            mh$.invokeExact(chooser, do_overwrite_confirmation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_do_overwrite_confirmation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_do_overwrite_confirmation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_do_overwrite_confirmation(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_do_overwrite_confirmation$descriptor() {
        return gtk_file_chooser_get_do_overwrite_confirmation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_do_overwrite_confirmation(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_do_overwrite_confirmation$handle() {
        return gtk_file_chooser_get_do_overwrite_confirmation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_do_overwrite_confirmation(GtkFileChooser *chooser)
     * }
     */
    public static int gtk_file_chooser_get_do_overwrite_confirmation(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_do_overwrite_confirmation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_do_overwrite_confirmation", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_create_folders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_create_folders"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_create_folders(GtkFileChooser *chooser, gboolean create_folders)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_create_folders$descriptor() {
        return gtk_file_chooser_set_create_folders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_create_folders(GtkFileChooser *chooser, gboolean create_folders)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_create_folders$handle() {
        return gtk_file_chooser_set_create_folders.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_create_folders(GtkFileChooser *chooser, gboolean create_folders)
     * }
     */
    public static void gtk_file_chooser_set_create_folders(MemorySegment chooser, int create_folders) {
        var mh$ = gtk_file_chooser_set_create_folders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_create_folders", chooser, create_folders);
            }
            mh$.invokeExact(chooser, create_folders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_create_folders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_create_folders"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_create_folders(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_create_folders$descriptor() {
        return gtk_file_chooser_get_create_folders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_create_folders(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_create_folders$handle() {
        return gtk_file_chooser_get_create_folders.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_create_folders(GtkFileChooser *chooser)
     * }
     */
    public static int gtk_file_chooser_get_create_folders(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_create_folders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_create_folders", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_current_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_current_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_current_name(GtkFileChooser *chooser, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_current_name$descriptor() {
        return gtk_file_chooser_set_current_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_current_name(GtkFileChooser *chooser, const gchar *name)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_current_name$handle() {
        return gtk_file_chooser_set_current_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_current_name(GtkFileChooser *chooser, const gchar *name)
     * }
     */
    public static void gtk_file_chooser_set_current_name(MemorySegment chooser, MemorySegment name) {
        var mh$ = gtk_file_chooser_set_current_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_current_name", chooser, name);
            }
            mh$.invokeExact(chooser, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_current_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_current_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_current_name(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_current_name$descriptor() {
        return gtk_file_chooser_get_current_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_current_name(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_current_name$handle() {
        return gtk_file_chooser_get_current_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_current_name(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_current_name(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_current_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_current_name", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_filename(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_filename$descriptor() {
        return gtk_file_chooser_get_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_filename(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_filename$handle() {
        return gtk_file_chooser_get_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_filename(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_filename(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_filename", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_filename(GtkFileChooser *chooser, const char *filename)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_filename$descriptor() {
        return gtk_file_chooser_set_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_filename(GtkFileChooser *chooser, const char *filename)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_filename$handle() {
        return gtk_file_chooser_set_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_filename(GtkFileChooser *chooser, const char *filename)
     * }
     */
    public static int gtk_file_chooser_set_filename(MemorySegment chooser, MemorySegment filename) {
        var mh$ = gtk_file_chooser_set_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_filename", chooser, filename);
            }
            return (int)mh$.invokeExact(chooser, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_select_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_select_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_select_filename(GtkFileChooser *chooser, const char *filename)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_select_filename$descriptor() {
        return gtk_file_chooser_select_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_select_filename(GtkFileChooser *chooser, const char *filename)
     * }
     */
    public static MethodHandle gtk_file_chooser_select_filename$handle() {
        return gtk_file_chooser_select_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_select_filename(GtkFileChooser *chooser, const char *filename)
     * }
     */
    public static int gtk_file_chooser_select_filename(MemorySegment chooser, MemorySegment filename) {
        var mh$ = gtk_file_chooser_select_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_select_filename", chooser, filename);
            }
            return (int)mh$.invokeExact(chooser, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_unselect_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_unselect_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_filename(GtkFileChooser *chooser, const char *filename)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_unselect_filename$descriptor() {
        return gtk_file_chooser_unselect_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_filename(GtkFileChooser *chooser, const char *filename)
     * }
     */
    public static MethodHandle gtk_file_chooser_unselect_filename$handle() {
        return gtk_file_chooser_unselect_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_filename(GtkFileChooser *chooser, const char *filename)
     * }
     */
    public static void gtk_file_chooser_unselect_filename(MemorySegment chooser, MemorySegment filename) {
        var mh$ = gtk_file_chooser_unselect_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_unselect_filename", chooser, filename);
            }
            mh$.invokeExact(chooser, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_select_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_select_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_select_all(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_select_all$descriptor() {
        return gtk_file_chooser_select_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_select_all(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_select_all$handle() {
        return gtk_file_chooser_select_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_select_all(GtkFileChooser *chooser)
     * }
     */
    public static void gtk_file_chooser_select_all(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_select_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_select_all", chooser);
            }
            mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_unselect_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_unselect_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_all(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_unselect_all$descriptor() {
        return gtk_file_chooser_unselect_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_all(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_unselect_all$handle() {
        return gtk_file_chooser_unselect_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_all(GtkFileChooser *chooser)
     * }
     */
    public static void gtk_file_chooser_unselect_all(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_unselect_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_unselect_all", chooser);
            }
            mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_filenames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_filenames"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_get_filenames(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_filenames$descriptor() {
        return gtk_file_chooser_get_filenames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_get_filenames(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_filenames$handle() {
        return gtk_file_chooser_get_filenames.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_get_filenames(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_filenames(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_filenames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_filenames", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_current_folder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_current_folder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_current_folder(GtkFileChooser *chooser, const gchar *filename)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_current_folder$descriptor() {
        return gtk_file_chooser_set_current_folder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_current_folder(GtkFileChooser *chooser, const gchar *filename)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_current_folder$handle() {
        return gtk_file_chooser_set_current_folder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_current_folder(GtkFileChooser *chooser, const gchar *filename)
     * }
     */
    public static int gtk_file_chooser_set_current_folder(MemorySegment chooser, MemorySegment filename) {
        var mh$ = gtk_file_chooser_set_current_folder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_current_folder", chooser, filename);
            }
            return (int)mh$.invokeExact(chooser, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_current_folder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_current_folder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_current_folder(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_current_folder$descriptor() {
        return gtk_file_chooser_get_current_folder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_current_folder(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_current_folder$handle() {
        return gtk_file_chooser_get_current_folder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_current_folder(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_current_folder(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_current_folder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_current_folder", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_uri(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_uri$descriptor() {
        return gtk_file_chooser_get_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_uri(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_uri$handle() {
        return gtk_file_chooser_get_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_uri(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_uri(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_uri", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_uri(GtkFileChooser *chooser, const char *uri)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_uri$descriptor() {
        return gtk_file_chooser_set_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_uri(GtkFileChooser *chooser, const char *uri)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_uri$handle() {
        return gtk_file_chooser_set_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_uri(GtkFileChooser *chooser, const char *uri)
     * }
     */
    public static int gtk_file_chooser_set_uri(MemorySegment chooser, MemorySegment uri) {
        var mh$ = gtk_file_chooser_set_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_uri", chooser, uri);
            }
            return (int)mh$.invokeExact(chooser, uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_select_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_select_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_select_uri(GtkFileChooser *chooser, const char *uri)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_select_uri$descriptor() {
        return gtk_file_chooser_select_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_select_uri(GtkFileChooser *chooser, const char *uri)
     * }
     */
    public static MethodHandle gtk_file_chooser_select_uri$handle() {
        return gtk_file_chooser_select_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_select_uri(GtkFileChooser *chooser, const char *uri)
     * }
     */
    public static int gtk_file_chooser_select_uri(MemorySegment chooser, MemorySegment uri) {
        var mh$ = gtk_file_chooser_select_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_select_uri", chooser, uri);
            }
            return (int)mh$.invokeExact(chooser, uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_unselect_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_unselect_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_uri(GtkFileChooser *chooser, const char *uri)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_unselect_uri$descriptor() {
        return gtk_file_chooser_unselect_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_uri(GtkFileChooser *chooser, const char *uri)
     * }
     */
    public static MethodHandle gtk_file_chooser_unselect_uri$handle() {
        return gtk_file_chooser_unselect_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_uri(GtkFileChooser *chooser, const char *uri)
     * }
     */
    public static void gtk_file_chooser_unselect_uri(MemorySegment chooser, MemorySegment uri) {
        var mh$ = gtk_file_chooser_unselect_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_unselect_uri", chooser, uri);
            }
            mh$.invokeExact(chooser, uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_get_uris(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_uris$descriptor() {
        return gtk_file_chooser_get_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_get_uris(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_uris$handle() {
        return gtk_file_chooser_get_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_get_uris(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_uris(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_uris", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_current_folder_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_current_folder_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_current_folder_uri(GtkFileChooser *chooser, const gchar *uri)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_current_folder_uri$descriptor() {
        return gtk_file_chooser_set_current_folder_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_current_folder_uri(GtkFileChooser *chooser, const gchar *uri)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_current_folder_uri$handle() {
        return gtk_file_chooser_set_current_folder_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_current_folder_uri(GtkFileChooser *chooser, const gchar *uri)
     * }
     */
    public static int gtk_file_chooser_set_current_folder_uri(MemorySegment chooser, MemorySegment uri) {
        var mh$ = gtk_file_chooser_set_current_folder_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_current_folder_uri", chooser, uri);
            }
            return (int)mh$.invokeExact(chooser, uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_current_folder_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_current_folder_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_current_folder_uri(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_current_folder_uri$descriptor() {
        return gtk_file_chooser_get_current_folder_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_current_folder_uri(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_current_folder_uri$handle() {
        return gtk_file_chooser_get_current_folder_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_file_chooser_get_current_folder_uri(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_current_folder_uri(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_current_folder_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_current_folder_uri", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *gtk_file_chooser_get_file(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_file$descriptor() {
        return gtk_file_chooser_get_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *gtk_file_chooser_get_file(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_file$handle() {
        return gtk_file_chooser_get_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *gtk_file_chooser_get_file(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_file(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_file", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_file(GtkFileChooser *chooser, GFile *file, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_file$descriptor() {
        return gtk_file_chooser_set_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_file(GtkFileChooser *chooser, GFile *file, GError **error)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_file$handle() {
        return gtk_file_chooser_set_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_file(GtkFileChooser *chooser, GFile *file, GError **error)
     * }
     */
    public static int gtk_file_chooser_set_file(MemorySegment chooser, MemorySegment file, MemorySegment error) {
        var mh$ = gtk_file_chooser_set_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_file", chooser, file, error);
            }
            return (int)mh$.invokeExact(chooser, file, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_select_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_select_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_select_file(GtkFileChooser *chooser, GFile *file, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_select_file$descriptor() {
        return gtk_file_chooser_select_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_select_file(GtkFileChooser *chooser, GFile *file, GError **error)
     * }
     */
    public static MethodHandle gtk_file_chooser_select_file$handle() {
        return gtk_file_chooser_select_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_select_file(GtkFileChooser *chooser, GFile *file, GError **error)
     * }
     */
    public static int gtk_file_chooser_select_file(MemorySegment chooser, MemorySegment file, MemorySegment error) {
        var mh$ = gtk_file_chooser_select_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_select_file", chooser, file, error);
            }
            return (int)mh$.invokeExact(chooser, file, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_unselect_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_unselect_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_file(GtkFileChooser *chooser, GFile *file)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_unselect_file$descriptor() {
        return gtk_file_chooser_unselect_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_file(GtkFileChooser *chooser, GFile *file)
     * }
     */
    public static MethodHandle gtk_file_chooser_unselect_file$handle() {
        return gtk_file_chooser_unselect_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_unselect_file(GtkFileChooser *chooser, GFile *file)
     * }
     */
    public static void gtk_file_chooser_unselect_file(MemorySegment chooser, MemorySegment file) {
        var mh$ = gtk_file_chooser_unselect_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_unselect_file", chooser, file);
            }
            mh$.invokeExact(chooser, file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_files {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_files"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_get_files(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_files$descriptor() {
        return gtk_file_chooser_get_files.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_get_files(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_files$handle() {
        return gtk_file_chooser_get_files.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_get_files(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_files(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_files.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_files", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_current_folder_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_current_folder_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_current_folder_file(GtkFileChooser *chooser, GFile *file, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_current_folder_file$descriptor() {
        return gtk_file_chooser_set_current_folder_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_current_folder_file(GtkFileChooser *chooser, GFile *file, GError **error)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_current_folder_file$handle() {
        return gtk_file_chooser_set_current_folder_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_set_current_folder_file(GtkFileChooser *chooser, GFile *file, GError **error)
     * }
     */
    public static int gtk_file_chooser_set_current_folder_file(MemorySegment chooser, MemorySegment file, MemorySegment error) {
        var mh$ = gtk_file_chooser_set_current_folder_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_current_folder_file", chooser, file, error);
            }
            return (int)mh$.invokeExact(chooser, file, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_current_folder_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_current_folder_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *gtk_file_chooser_get_current_folder_file(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_current_folder_file$descriptor() {
        return gtk_file_chooser_get_current_folder_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *gtk_file_chooser_get_current_folder_file(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_current_folder_file$handle() {
        return gtk_file_chooser_get_current_folder_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *gtk_file_chooser_get_current_folder_file(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_current_folder_file(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_current_folder_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_current_folder_file", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_preview_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_preview_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_preview_widget(GtkFileChooser *chooser, GtkWidget *preview_widget)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_preview_widget$descriptor() {
        return gtk_file_chooser_set_preview_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_preview_widget(GtkFileChooser *chooser, GtkWidget *preview_widget)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_preview_widget$handle() {
        return gtk_file_chooser_set_preview_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_preview_widget(GtkFileChooser *chooser, GtkWidget *preview_widget)
     * }
     */
    public static void gtk_file_chooser_set_preview_widget(MemorySegment chooser, MemorySegment preview_widget) {
        var mh$ = gtk_file_chooser_set_preview_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_preview_widget", chooser, preview_widget);
            }
            mh$.invokeExact(chooser, preview_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_preview_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_preview_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_get_preview_widget(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_preview_widget$descriptor() {
        return gtk_file_chooser_get_preview_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_get_preview_widget(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_preview_widget$handle() {
        return gtk_file_chooser_get_preview_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_get_preview_widget(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_preview_widget(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_preview_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_preview_widget", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_preview_widget_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_preview_widget_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_preview_widget_active(GtkFileChooser *chooser, gboolean active)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_preview_widget_active$descriptor() {
        return gtk_file_chooser_set_preview_widget_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_preview_widget_active(GtkFileChooser *chooser, gboolean active)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_preview_widget_active$handle() {
        return gtk_file_chooser_set_preview_widget_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_preview_widget_active(GtkFileChooser *chooser, gboolean active)
     * }
     */
    public static void gtk_file_chooser_set_preview_widget_active(MemorySegment chooser, int active) {
        var mh$ = gtk_file_chooser_set_preview_widget_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_preview_widget_active", chooser, active);
            }
            mh$.invokeExact(chooser, active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_preview_widget_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_preview_widget_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_preview_widget_active(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_preview_widget_active$descriptor() {
        return gtk_file_chooser_get_preview_widget_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_preview_widget_active(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_preview_widget_active$handle() {
        return gtk_file_chooser_get_preview_widget_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_preview_widget_active(GtkFileChooser *chooser)
     * }
     */
    public static int gtk_file_chooser_get_preview_widget_active(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_preview_widget_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_preview_widget_active", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_use_preview_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_use_preview_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_use_preview_label(GtkFileChooser *chooser, gboolean use_label)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_use_preview_label$descriptor() {
        return gtk_file_chooser_set_use_preview_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_use_preview_label(GtkFileChooser *chooser, gboolean use_label)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_use_preview_label$handle() {
        return gtk_file_chooser_set_use_preview_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_use_preview_label(GtkFileChooser *chooser, gboolean use_label)
     * }
     */
    public static void gtk_file_chooser_set_use_preview_label(MemorySegment chooser, int use_label) {
        var mh$ = gtk_file_chooser_set_use_preview_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_use_preview_label", chooser, use_label);
            }
            mh$.invokeExact(chooser, use_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_use_preview_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_use_preview_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_use_preview_label(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_use_preview_label$descriptor() {
        return gtk_file_chooser_get_use_preview_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_use_preview_label(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_use_preview_label$handle() {
        return gtk_file_chooser_get_use_preview_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_get_use_preview_label(GtkFileChooser *chooser)
     * }
     */
    public static int gtk_file_chooser_get_use_preview_label(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_use_preview_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_use_preview_label", chooser);
            }
            return (int)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_preview_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_preview_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gtk_file_chooser_get_preview_filename(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_preview_filename$descriptor() {
        return gtk_file_chooser_get_preview_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gtk_file_chooser_get_preview_filename(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_preview_filename$handle() {
        return gtk_file_chooser_get_preview_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gtk_file_chooser_get_preview_filename(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_preview_filename(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_preview_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_preview_filename", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_preview_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_preview_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gtk_file_chooser_get_preview_uri(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_preview_uri$descriptor() {
        return gtk_file_chooser_get_preview_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gtk_file_chooser_get_preview_uri(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_preview_uri$handle() {
        return gtk_file_chooser_get_preview_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gtk_file_chooser_get_preview_uri(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_preview_uri(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_preview_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_preview_uri", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_preview_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_preview_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFile *gtk_file_chooser_get_preview_file(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_preview_file$descriptor() {
        return gtk_file_chooser_get_preview_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFile *gtk_file_chooser_get_preview_file(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_preview_file$handle() {
        return gtk_file_chooser_get_preview_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFile *gtk_file_chooser_get_preview_file(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_preview_file(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_preview_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_preview_file", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_extra_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_extra_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_extra_widget(GtkFileChooser *chooser, GtkWidget *extra_widget)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_extra_widget$descriptor() {
        return gtk_file_chooser_set_extra_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_extra_widget(GtkFileChooser *chooser, GtkWidget *extra_widget)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_extra_widget$handle() {
        return gtk_file_chooser_set_extra_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_extra_widget(GtkFileChooser *chooser, GtkWidget *extra_widget)
     * }
     */
    public static void gtk_file_chooser_set_extra_widget(MemorySegment chooser, MemorySegment extra_widget) {
        var mh$ = gtk_file_chooser_set_extra_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_extra_widget", chooser, extra_widget);
            }
            mh$.invokeExact(chooser, extra_widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_extra_widget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_extra_widget"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_get_extra_widget(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_extra_widget$descriptor() {
        return gtk_file_chooser_get_extra_widget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_get_extra_widget(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_extra_widget$handle() {
        return gtk_file_chooser_get_extra_widget.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_get_extra_widget(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_extra_widget(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_extra_widget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_extra_widget", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_add_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_add_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_add_filter(GtkFileChooser *chooser, GtkFileFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_add_filter$descriptor() {
        return gtk_file_chooser_add_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_add_filter(GtkFileChooser *chooser, GtkFileFilter *filter)
     * }
     */
    public static MethodHandle gtk_file_chooser_add_filter$handle() {
        return gtk_file_chooser_add_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_add_filter(GtkFileChooser *chooser, GtkFileFilter *filter)
     * }
     */
    public static void gtk_file_chooser_add_filter(MemorySegment chooser, MemorySegment filter) {
        var mh$ = gtk_file_chooser_add_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_add_filter", chooser, filter);
            }
            mh$.invokeExact(chooser, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_remove_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_remove_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_remove_filter(GtkFileChooser *chooser, GtkFileFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_remove_filter$descriptor() {
        return gtk_file_chooser_remove_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_remove_filter(GtkFileChooser *chooser, GtkFileFilter *filter)
     * }
     */
    public static MethodHandle gtk_file_chooser_remove_filter$handle() {
        return gtk_file_chooser_remove_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_remove_filter(GtkFileChooser *chooser, GtkFileFilter *filter)
     * }
     */
    public static void gtk_file_chooser_remove_filter(MemorySegment chooser, MemorySegment filter) {
        var mh$ = gtk_file_chooser_remove_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_remove_filter", chooser, filter);
            }
            mh$.invokeExact(chooser, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_list_filters {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_list_filters"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_list_filters(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_list_filters$descriptor() {
        return gtk_file_chooser_list_filters.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_list_filters(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_list_filters$handle() {
        return gtk_file_chooser_list_filters.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_list_filters(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_list_filters(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_list_filters.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_list_filters", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_filter(GtkFileChooser *chooser, GtkFileFilter *filter)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_filter$descriptor() {
        return gtk_file_chooser_set_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_filter(GtkFileChooser *chooser, GtkFileFilter *filter)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_filter$handle() {
        return gtk_file_chooser_set_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_filter(GtkFileChooser *chooser, GtkFileFilter *filter)
     * }
     */
    public static void gtk_file_chooser_set_filter(MemorySegment chooser, MemorySegment filter) {
        var mh$ = gtk_file_chooser_set_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_filter", chooser, filter);
            }
            mh$.invokeExact(chooser, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkFileFilter *gtk_file_chooser_get_filter(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_filter$descriptor() {
        return gtk_file_chooser_get_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkFileFilter *gtk_file_chooser_get_filter(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_filter$handle() {
        return gtk_file_chooser_get_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkFileFilter *gtk_file_chooser_get_filter(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_filter(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_get_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_filter", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_add_shortcut_folder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_add_shortcut_folder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_add_shortcut_folder(GtkFileChooser *chooser, const char *folder, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_add_shortcut_folder$descriptor() {
        return gtk_file_chooser_add_shortcut_folder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_add_shortcut_folder(GtkFileChooser *chooser, const char *folder, GError **error)
     * }
     */
    public static MethodHandle gtk_file_chooser_add_shortcut_folder$handle() {
        return gtk_file_chooser_add_shortcut_folder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_add_shortcut_folder(GtkFileChooser *chooser, const char *folder, GError **error)
     * }
     */
    public static int gtk_file_chooser_add_shortcut_folder(MemorySegment chooser, MemorySegment folder, MemorySegment error) {
        var mh$ = gtk_file_chooser_add_shortcut_folder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_add_shortcut_folder", chooser, folder, error);
            }
            return (int)mh$.invokeExact(chooser, folder, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_remove_shortcut_folder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_remove_shortcut_folder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_remove_shortcut_folder(GtkFileChooser *chooser, const char *folder, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_remove_shortcut_folder$descriptor() {
        return gtk_file_chooser_remove_shortcut_folder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_remove_shortcut_folder(GtkFileChooser *chooser, const char *folder, GError **error)
     * }
     */
    public static MethodHandle gtk_file_chooser_remove_shortcut_folder$handle() {
        return gtk_file_chooser_remove_shortcut_folder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_remove_shortcut_folder(GtkFileChooser *chooser, const char *folder, GError **error)
     * }
     */
    public static int gtk_file_chooser_remove_shortcut_folder(MemorySegment chooser, MemorySegment folder, MemorySegment error) {
        var mh$ = gtk_file_chooser_remove_shortcut_folder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_remove_shortcut_folder", chooser, folder, error);
            }
            return (int)mh$.invokeExact(chooser, folder, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_list_shortcut_folders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_list_shortcut_folders"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_list_shortcut_folders(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_list_shortcut_folders$descriptor() {
        return gtk_file_chooser_list_shortcut_folders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_list_shortcut_folders(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_list_shortcut_folders$handle() {
        return gtk_file_chooser_list_shortcut_folders.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_list_shortcut_folders(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_list_shortcut_folders(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_list_shortcut_folders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_list_shortcut_folders", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_add_shortcut_folder_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_add_shortcut_folder_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_add_shortcut_folder_uri(GtkFileChooser *chooser, const char *uri, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_add_shortcut_folder_uri$descriptor() {
        return gtk_file_chooser_add_shortcut_folder_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_add_shortcut_folder_uri(GtkFileChooser *chooser, const char *uri, GError **error)
     * }
     */
    public static MethodHandle gtk_file_chooser_add_shortcut_folder_uri$handle() {
        return gtk_file_chooser_add_shortcut_folder_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_add_shortcut_folder_uri(GtkFileChooser *chooser, const char *uri, GError **error)
     * }
     */
    public static int gtk_file_chooser_add_shortcut_folder_uri(MemorySegment chooser, MemorySegment uri, MemorySegment error) {
        var mh$ = gtk_file_chooser_add_shortcut_folder_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_add_shortcut_folder_uri", chooser, uri, error);
            }
            return (int)mh$.invokeExact(chooser, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_remove_shortcut_folder_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_remove_shortcut_folder_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_remove_shortcut_folder_uri(GtkFileChooser *chooser, const char *uri, GError **error)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_remove_shortcut_folder_uri$descriptor() {
        return gtk_file_chooser_remove_shortcut_folder_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_remove_shortcut_folder_uri(GtkFileChooser *chooser, const char *uri, GError **error)
     * }
     */
    public static MethodHandle gtk_file_chooser_remove_shortcut_folder_uri$handle() {
        return gtk_file_chooser_remove_shortcut_folder_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_remove_shortcut_folder_uri(GtkFileChooser *chooser, const char *uri, GError **error)
     * }
     */
    public static int gtk_file_chooser_remove_shortcut_folder_uri(MemorySegment chooser, MemorySegment uri, MemorySegment error) {
        var mh$ = gtk_file_chooser_remove_shortcut_folder_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_remove_shortcut_folder_uri", chooser, uri, error);
            }
            return (int)mh$.invokeExact(chooser, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_list_shortcut_folder_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_list_shortcut_folder_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_list_shortcut_folder_uris(GtkFileChooser *chooser)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_list_shortcut_folder_uris$descriptor() {
        return gtk_file_chooser_list_shortcut_folder_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_list_shortcut_folder_uris(GtkFileChooser *chooser)
     * }
     */
    public static MethodHandle gtk_file_chooser_list_shortcut_folder_uris$handle() {
        return gtk_file_chooser_list_shortcut_folder_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_file_chooser_list_shortcut_folder_uris(GtkFileChooser *chooser)
     * }
     */
    public static MemorySegment gtk_file_chooser_list_shortcut_folder_uris(MemorySegment chooser) {
        var mh$ = gtk_file_chooser_list_shortcut_folder_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_list_shortcut_folder_uris", chooser);
            }
            return (MemorySegment)mh$.invokeExact(chooser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_add_choice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_add_choice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_add_choice(GtkFileChooser *chooser, const char *id, const char *label, const char **options, const char **option_labels)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_add_choice$descriptor() {
        return gtk_file_chooser_add_choice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_add_choice(GtkFileChooser *chooser, const char *id, const char *label, const char **options, const char **option_labels)
     * }
     */
    public static MethodHandle gtk_file_chooser_add_choice$handle() {
        return gtk_file_chooser_add_choice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_add_choice(GtkFileChooser *chooser, const char *id, const char *label, const char **options, const char **option_labels)
     * }
     */
    public static void gtk_file_chooser_add_choice(MemorySegment chooser, MemorySegment id, MemorySegment label, MemorySegment options, MemorySegment option_labels) {
        var mh$ = gtk_file_chooser_add_choice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_add_choice", chooser, id, label, options, option_labels);
            }
            mh$.invokeExact(chooser, id, label, options, option_labels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_remove_choice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_remove_choice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_remove_choice(GtkFileChooser *chooser, const char *id)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_remove_choice$descriptor() {
        return gtk_file_chooser_remove_choice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_remove_choice(GtkFileChooser *chooser, const char *id)
     * }
     */
    public static MethodHandle gtk_file_chooser_remove_choice$handle() {
        return gtk_file_chooser_remove_choice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_remove_choice(GtkFileChooser *chooser, const char *id)
     * }
     */
    public static void gtk_file_chooser_remove_choice(MemorySegment chooser, MemorySegment id) {
        var mh$ = gtk_file_chooser_remove_choice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_remove_choice", chooser, id);
            }
            mh$.invokeExact(chooser, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_set_choice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_set_choice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_choice(GtkFileChooser *chooser, const char *id, const char *option)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_set_choice$descriptor() {
        return gtk_file_chooser_set_choice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_choice(GtkFileChooser *chooser, const char *id, const char *option)
     * }
     */
    public static MethodHandle gtk_file_chooser_set_choice$handle() {
        return gtk_file_chooser_set_choice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_set_choice(GtkFileChooser *chooser, const char *id, const char *option)
     * }
     */
    public static void gtk_file_chooser_set_choice(MemorySegment chooser, MemorySegment id, MemorySegment option) {
        var mh$ = gtk_file_chooser_set_choice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_set_choice", chooser, id, option);
            }
            mh$.invokeExact(chooser, id, option);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_get_choice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_get_choice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *gtk_file_chooser_get_choice(GtkFileChooser *chooser, const char *id)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_get_choice$descriptor() {
        return gtk_file_chooser_get_choice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *gtk_file_chooser_get_choice(GtkFileChooser *chooser, const char *id)
     * }
     */
    public static MethodHandle gtk_file_chooser_get_choice$handle() {
        return gtk_file_chooser_get_choice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *gtk_file_chooser_get_choice(GtkFileChooser *chooser, const char *id)
     * }
     */
    public static MemorySegment gtk_file_chooser_get_choice(MemorySegment chooser, MemorySegment id) {
        var mh$ = gtk_file_chooser_get_choice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_get_choice", chooser, id);
            }
            return (MemorySegment)mh$.invokeExact(chooser, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_button_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_button_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_button_get_type()
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_button_get_type$descriptor() {
        return gtk_file_chooser_button_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_button_get_type()
     * }
     */
    public static MethodHandle gtk_file_chooser_button_get_type$handle() {
        return gtk_file_chooser_button_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_button_get_type()
     * }
     */
    public static long gtk_file_chooser_button_get_type() {
        var mh$ = gtk_file_chooser_button_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_button_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_button_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_button_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_button_new(const gchar *title, GtkFileChooserAction action)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_button_new$descriptor() {
        return gtk_file_chooser_button_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_button_new(const gchar *title, GtkFileChooserAction action)
     * }
     */
    public static MethodHandle gtk_file_chooser_button_new$handle() {
        return gtk_file_chooser_button_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_button_new(const gchar *title, GtkFileChooserAction action)
     * }
     */
    public static MemorySegment gtk_file_chooser_button_new(MemorySegment title, int action) {
        var mh$ = gtk_file_chooser_button_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_button_new", title, action);
            }
            return (MemorySegment)mh$.invokeExact(title, action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_button_new_with_dialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_button_new_with_dialog"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_button_new_with_dialog(GtkWidget *dialog)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_button_new_with_dialog$descriptor() {
        return gtk_file_chooser_button_new_with_dialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_button_new_with_dialog(GtkWidget *dialog)
     * }
     */
    public static MethodHandle gtk_file_chooser_button_new_with_dialog$handle() {
        return gtk_file_chooser_button_new_with_dialog.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_button_new_with_dialog(GtkWidget *dialog)
     * }
     */
    public static MemorySegment gtk_file_chooser_button_new_with_dialog(MemorySegment dialog) {
        var mh$ = gtk_file_chooser_button_new_with_dialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_button_new_with_dialog", dialog);
            }
            return (MemorySegment)mh$.invokeExact(dialog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_button_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_button_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_file_chooser_button_get_title(GtkFileChooserButton *button)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_button_get_title$descriptor() {
        return gtk_file_chooser_button_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_file_chooser_button_get_title(GtkFileChooserButton *button)
     * }
     */
    public static MethodHandle gtk_file_chooser_button_get_title$handle() {
        return gtk_file_chooser_button_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_file_chooser_button_get_title(GtkFileChooserButton *button)
     * }
     */
    public static MemorySegment gtk_file_chooser_button_get_title(MemorySegment button) {
        var mh$ = gtk_file_chooser_button_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_button_get_title", button);
            }
            return (MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_button_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_button_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_button_set_title(GtkFileChooserButton *button, const gchar *title)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_button_set_title$descriptor() {
        return gtk_file_chooser_button_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_button_set_title(GtkFileChooserButton *button, const gchar *title)
     * }
     */
    public static MethodHandle gtk_file_chooser_button_set_title$handle() {
        return gtk_file_chooser_button_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_button_set_title(GtkFileChooserButton *button, const gchar *title)
     * }
     */
    public static void gtk_file_chooser_button_set_title(MemorySegment button, MemorySegment title) {
        var mh$ = gtk_file_chooser_button_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_button_set_title", button, title);
            }
            mh$.invokeExact(button, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_button_get_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_button_get_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_file_chooser_button_get_width_chars(GtkFileChooserButton *button)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_button_get_width_chars$descriptor() {
        return gtk_file_chooser_button_get_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_file_chooser_button_get_width_chars(GtkFileChooserButton *button)
     * }
     */
    public static MethodHandle gtk_file_chooser_button_get_width_chars$handle() {
        return gtk_file_chooser_button_get_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_file_chooser_button_get_width_chars(GtkFileChooserButton *button)
     * }
     */
    public static int gtk_file_chooser_button_get_width_chars(MemorySegment button) {
        var mh$ = gtk_file_chooser_button_get_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_button_get_width_chars", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_button_set_width_chars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_button_set_width_chars"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_button_set_width_chars(GtkFileChooserButton *button, gint n_chars)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_button_set_width_chars$descriptor() {
        return gtk_file_chooser_button_set_width_chars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_button_set_width_chars(GtkFileChooserButton *button, gint n_chars)
     * }
     */
    public static MethodHandle gtk_file_chooser_button_set_width_chars$handle() {
        return gtk_file_chooser_button_set_width_chars.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_button_set_width_chars(GtkFileChooserButton *button, gint n_chars)
     * }
     */
    public static void gtk_file_chooser_button_set_width_chars(MemorySegment button, int n_chars) {
        var mh$ = gtk_file_chooser_button_set_width_chars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_button_set_width_chars", button, n_chars);
            }
            mh$.invokeExact(button, n_chars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_button_get_focus_on_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_button_get_focus_on_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_button_get_focus_on_click(GtkFileChooserButton *button)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_button_get_focus_on_click$descriptor() {
        return gtk_file_chooser_button_get_focus_on_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_button_get_focus_on_click(GtkFileChooserButton *button)
     * }
     */
    public static MethodHandle gtk_file_chooser_button_get_focus_on_click$handle() {
        return gtk_file_chooser_button_get_focus_on_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_file_chooser_button_get_focus_on_click(GtkFileChooserButton *button)
     * }
     */
    public static int gtk_file_chooser_button_get_focus_on_click(MemorySegment button) {
        var mh$ = gtk_file_chooser_button_get_focus_on_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_button_get_focus_on_click", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_button_set_focus_on_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_button_set_focus_on_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_button_set_focus_on_click(GtkFileChooserButton *button, gboolean focus_on_click)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_button_set_focus_on_click$descriptor() {
        return gtk_file_chooser_button_set_focus_on_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_button_set_focus_on_click(GtkFileChooserButton *button, gboolean focus_on_click)
     * }
     */
    public static MethodHandle gtk_file_chooser_button_set_focus_on_click$handle() {
        return gtk_file_chooser_button_set_focus_on_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_button_set_focus_on_click(GtkFileChooserButton *button, gboolean focus_on_click)
     * }
     */
    public static void gtk_file_chooser_button_set_focus_on_click(MemorySegment button, int focus_on_click) {
        var mh$ = gtk_file_chooser_button_set_focus_on_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_button_set_focus_on_click", button, focus_on_click);
            }
            mh$.invokeExact(button, focus_on_click);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_dialog_get_type$descriptor() {
        return gtk_file_chooser_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_file_chooser_dialog_get_type$handle() {
        return gtk_file_chooser_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_dialog_get_type()
     * }
     */
    public static long gtk_file_chooser_dialog_get_type() {
        var mh$ = gtk_file_chooser_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_dialog_new(const gchar *title, GtkWindow *parent, GtkFileChooserAction action, const gchar *first_button_text, ...)
     * }
     */
    public static class gtk_file_chooser_dialog_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_file_chooser_dialog_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_file_chooser_dialog_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_file_chooser_dialog_new(const gchar *title, GtkWindow *parent, GtkFileChooserAction action, const gchar *first_button_text, ...)
         * }
         */
        public static gtk_file_chooser_dialog_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_file_chooser_dialog_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment title, MemorySegment parent, int action, MemorySegment first_button_text, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_file_chooser_dialog_new", title, parent, action, first_button_text, x4);
                }
                return (MemorySegment)spreader.invokeExact(title, parent, action, first_button_text, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_native_dialog_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_native_dialog_get_type()
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_get_type$descriptor() {
        return gtk_native_dialog_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_native_dialog_get_type()
     * }
     */
    public static MethodHandle gtk_native_dialog_get_type$handle() {
        return gtk_native_dialog_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_native_dialog_get_type()
     * }
     */
    public static long gtk_native_dialog_get_type() {
        var mh$ = gtk_native_dialog_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkNativeDialog *GtkNativeDialog_autoptr
     * }
     */
    public static final AddressLayout GtkNativeDialog_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkNativeDialog_listautoptr
     * }
     */
    public static final AddressLayout GtkNativeDialog_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkNativeDialog_slistautoptr
     * }
     */
    public static final AddressLayout GtkNativeDialog_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkNativeDialog_queueautoptr
     * }
     */
    public static final AddressLayout GtkNativeDialog_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkNativeDialogClass *GtkNativeDialogClass_autoptr
     * }
     */
    public static final AddressLayout GtkNativeDialogClass_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkNativeDialogClass_listautoptr
     * }
     */
    public static final AddressLayout GtkNativeDialogClass_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkNativeDialogClass_slistautoptr
     * }
     */
    public static final AddressLayout GtkNativeDialogClass_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkNativeDialogClass_queueautoptr
     * }
     */
    public static final AddressLayout GtkNativeDialogClass_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_native_dialog_show {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_show"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_show(GtkNativeDialog *self)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_show$descriptor() {
        return gtk_native_dialog_show.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_show(GtkNativeDialog *self)
     * }
     */
    public static MethodHandle gtk_native_dialog_show$handle() {
        return gtk_native_dialog_show.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_native_dialog_show(GtkNativeDialog *self)
     * }
     */
    public static void gtk_native_dialog_show(MemorySegment self) {
        var mh$ = gtk_native_dialog_show.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_show", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_native_dialog_hide {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_hide"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_hide(GtkNativeDialog *self)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_hide$descriptor() {
        return gtk_native_dialog_hide.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_hide(GtkNativeDialog *self)
     * }
     */
    public static MethodHandle gtk_native_dialog_hide$handle() {
        return gtk_native_dialog_hide.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_native_dialog_hide(GtkNativeDialog *self)
     * }
     */
    public static void gtk_native_dialog_hide(MemorySegment self) {
        var mh$ = gtk_native_dialog_hide.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_hide", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_native_dialog_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_destroy(GtkNativeDialog *self)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_destroy$descriptor() {
        return gtk_native_dialog_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_destroy(GtkNativeDialog *self)
     * }
     */
    public static MethodHandle gtk_native_dialog_destroy$handle() {
        return gtk_native_dialog_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_native_dialog_destroy(GtkNativeDialog *self)
     * }
     */
    public static void gtk_native_dialog_destroy(MemorySegment self) {
        var mh$ = gtk_native_dialog_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_native_dialog_get_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_get_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_native_dialog_get_visible(GtkNativeDialog *self)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_get_visible$descriptor() {
        return gtk_native_dialog_get_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_native_dialog_get_visible(GtkNativeDialog *self)
     * }
     */
    public static MethodHandle gtk_native_dialog_get_visible$handle() {
        return gtk_native_dialog_get_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_native_dialog_get_visible(GtkNativeDialog *self)
     * }
     */
    public static int gtk_native_dialog_get_visible(MemorySegment self) {
        var mh$ = gtk_native_dialog_get_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_get_visible", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_native_dialog_set_modal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_set_modal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_set_modal(GtkNativeDialog *self, gboolean modal)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_set_modal$descriptor() {
        return gtk_native_dialog_set_modal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_set_modal(GtkNativeDialog *self, gboolean modal)
     * }
     */
    public static MethodHandle gtk_native_dialog_set_modal$handle() {
        return gtk_native_dialog_set_modal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_native_dialog_set_modal(GtkNativeDialog *self, gboolean modal)
     * }
     */
    public static void gtk_native_dialog_set_modal(MemorySegment self, int modal) {
        var mh$ = gtk_native_dialog_set_modal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_set_modal", self, modal);
            }
            mh$.invokeExact(self, modal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_native_dialog_get_modal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_get_modal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_native_dialog_get_modal(GtkNativeDialog *self)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_get_modal$descriptor() {
        return gtk_native_dialog_get_modal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_native_dialog_get_modal(GtkNativeDialog *self)
     * }
     */
    public static MethodHandle gtk_native_dialog_get_modal$handle() {
        return gtk_native_dialog_get_modal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_native_dialog_get_modal(GtkNativeDialog *self)
     * }
     */
    public static int gtk_native_dialog_get_modal(MemorySegment self) {
        var mh$ = gtk_native_dialog_get_modal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_get_modal", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_native_dialog_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_set_title(GtkNativeDialog *self, const char *title)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_set_title$descriptor() {
        return gtk_native_dialog_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_set_title(GtkNativeDialog *self, const char *title)
     * }
     */
    public static MethodHandle gtk_native_dialog_set_title$handle() {
        return gtk_native_dialog_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_native_dialog_set_title(GtkNativeDialog *self, const char *title)
     * }
     */
    public static void gtk_native_dialog_set_title(MemorySegment self, MemorySegment title) {
        var mh$ = gtk_native_dialog_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_set_title", self, title);
            }
            mh$.invokeExact(self, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_native_dialog_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *gtk_native_dialog_get_title(GtkNativeDialog *self)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_get_title$descriptor() {
        return gtk_native_dialog_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *gtk_native_dialog_get_title(GtkNativeDialog *self)
     * }
     */
    public static MethodHandle gtk_native_dialog_get_title$handle() {
        return gtk_native_dialog_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *gtk_native_dialog_get_title(GtkNativeDialog *self)
     * }
     */
    public static MemorySegment gtk_native_dialog_get_title(MemorySegment self) {
        var mh$ = gtk_native_dialog_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_get_title", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_native_dialog_set_transient_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_set_transient_for"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_set_transient_for(GtkNativeDialog *self, GtkWindow *parent)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_set_transient_for$descriptor() {
        return gtk_native_dialog_set_transient_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_native_dialog_set_transient_for(GtkNativeDialog *self, GtkWindow *parent)
     * }
     */
    public static MethodHandle gtk_native_dialog_set_transient_for$handle() {
        return gtk_native_dialog_set_transient_for.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_native_dialog_set_transient_for(GtkNativeDialog *self, GtkWindow *parent)
     * }
     */
    public static void gtk_native_dialog_set_transient_for(MemorySegment self, MemorySegment parent) {
        var mh$ = gtk_native_dialog_set_transient_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_set_transient_for", self, parent);
            }
            mh$.invokeExact(self, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_native_dialog_get_transient_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_get_transient_for"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_native_dialog_get_transient_for(GtkNativeDialog *self)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_get_transient_for$descriptor() {
        return gtk_native_dialog_get_transient_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_native_dialog_get_transient_for(GtkNativeDialog *self)
     * }
     */
    public static MethodHandle gtk_native_dialog_get_transient_for$handle() {
        return gtk_native_dialog_get_transient_for.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWindow *gtk_native_dialog_get_transient_for(GtkNativeDialog *self)
     * }
     */
    public static MemorySegment gtk_native_dialog_get_transient_for(MemorySegment self) {
        var mh$ = gtk_native_dialog_get_transient_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_get_transient_for", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_native_dialog_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_native_dialog_run"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_native_dialog_run(GtkNativeDialog *self)
     * }
     */
    public static FunctionDescriptor gtk_native_dialog_run$descriptor() {
        return gtk_native_dialog_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_native_dialog_run(GtkNativeDialog *self)
     * }
     */
    public static MethodHandle gtk_native_dialog_run$handle() {
        return gtk_native_dialog_run.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_native_dialog_run(GtkNativeDialog *self)
     * }
     */
    public static int gtk_native_dialog_run(MemorySegment self) {
        var mh$ = gtk_native_dialog_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_native_dialog_run", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_native_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_native_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_native_get_type()
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_native_get_type$descriptor() {
        return gtk_file_chooser_native_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_native_get_type()
     * }
     */
    public static MethodHandle gtk_file_chooser_native_get_type$handle() {
        return gtk_file_chooser_native_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_native_get_type()
     * }
     */
    public static long gtk_file_chooser_native_get_type() {
        var mh$ = gtk_file_chooser_native_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_native_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkFileChooserNative *GtkFileChooserNative_autoptr
     * }
     */
    public static final AddressLayout GtkFileChooserNative_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFileChooserNative_listautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserNative_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFileChooserNative_slistautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserNative_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFileChooserNative_queueautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserNative_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkFileChooserNativeClass *GtkFileChooserNativeClass_autoptr
     * }
     */
    public static final AddressLayout GtkFileChooserNativeClass_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkFileChooserNativeClass_listautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserNativeClass_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkFileChooserNativeClass_slistautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserNativeClass_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkFileChooserNativeClass_queueautoptr
     * }
     */
    public static final AddressLayout GtkFileChooserNativeClass_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_file_chooser_native_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_native_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkFileChooserNative *gtk_file_chooser_native_new(const gchar *title, GtkWindow *parent, GtkFileChooserAction action, const gchar *accept_label, const gchar *cancel_label)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_native_new$descriptor() {
        return gtk_file_chooser_native_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkFileChooserNative *gtk_file_chooser_native_new(const gchar *title, GtkWindow *parent, GtkFileChooserAction action, const gchar *accept_label, const gchar *cancel_label)
     * }
     */
    public static MethodHandle gtk_file_chooser_native_new$handle() {
        return gtk_file_chooser_native_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkFileChooserNative *gtk_file_chooser_native_new(const gchar *title, GtkWindow *parent, GtkFileChooserAction action, const gchar *accept_label, const gchar *cancel_label)
     * }
     */
    public static MemorySegment gtk_file_chooser_native_new(MemorySegment title, MemorySegment parent, int action, MemorySegment accept_label, MemorySegment cancel_label) {
        var mh$ = gtk_file_chooser_native_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_native_new", title, parent, action, accept_label, cancel_label);
            }
            return (MemorySegment)mh$.invokeExact(title, parent, action, accept_label, cancel_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_native_get_accept_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_native_get_accept_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *gtk_file_chooser_native_get_accept_label(GtkFileChooserNative *self)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_native_get_accept_label$descriptor() {
        return gtk_file_chooser_native_get_accept_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *gtk_file_chooser_native_get_accept_label(GtkFileChooserNative *self)
     * }
     */
    public static MethodHandle gtk_file_chooser_native_get_accept_label$handle() {
        return gtk_file_chooser_native_get_accept_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *gtk_file_chooser_native_get_accept_label(GtkFileChooserNative *self)
     * }
     */
    public static MemorySegment gtk_file_chooser_native_get_accept_label(MemorySegment self) {
        var mh$ = gtk_file_chooser_native_get_accept_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_native_get_accept_label", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_native_set_accept_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_native_set_accept_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_native_set_accept_label(GtkFileChooserNative *self, const char *accept_label)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_native_set_accept_label$descriptor() {
        return gtk_file_chooser_native_set_accept_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_native_set_accept_label(GtkFileChooserNative *self, const char *accept_label)
     * }
     */
    public static MethodHandle gtk_file_chooser_native_set_accept_label$handle() {
        return gtk_file_chooser_native_set_accept_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_native_set_accept_label(GtkFileChooserNative *self, const char *accept_label)
     * }
     */
    public static void gtk_file_chooser_native_set_accept_label(MemorySegment self, MemorySegment accept_label) {
        var mh$ = gtk_file_chooser_native_set_accept_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_native_set_accept_label", self, accept_label);
            }
            mh$.invokeExact(self, accept_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_native_get_cancel_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_native_get_cancel_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *gtk_file_chooser_native_get_cancel_label(GtkFileChooserNative *self)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_native_get_cancel_label$descriptor() {
        return gtk_file_chooser_native_get_cancel_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *gtk_file_chooser_native_get_cancel_label(GtkFileChooserNative *self)
     * }
     */
    public static MethodHandle gtk_file_chooser_native_get_cancel_label$handle() {
        return gtk_file_chooser_native_get_cancel_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *gtk_file_chooser_native_get_cancel_label(GtkFileChooserNative *self)
     * }
     */
    public static MemorySegment gtk_file_chooser_native_get_cancel_label(MemorySegment self) {
        var mh$ = gtk_file_chooser_native_get_cancel_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_native_get_cancel_label", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_native_set_cancel_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_native_set_cancel_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_native_set_cancel_label(GtkFileChooserNative *self, const char *cancel_label)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_native_set_cancel_label$descriptor() {
        return gtk_file_chooser_native_set_cancel_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_file_chooser_native_set_cancel_label(GtkFileChooserNative *self, const char *cancel_label)
     * }
     */
    public static MethodHandle gtk_file_chooser_native_set_cancel_label$handle() {
        return gtk_file_chooser_native_set_cancel_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_file_chooser_native_set_cancel_label(GtkFileChooserNative *self, const char *cancel_label)
     * }
     */
    public static void gtk_file_chooser_native_set_cancel_label(MemorySegment self, MemorySegment cancel_label) {
        var mh$ = gtk_file_chooser_native_set_cancel_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_native_set_cancel_label", self, cancel_label);
            }
            mh$.invokeExact(self, cancel_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_widget_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_widget_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_widget_get_type()
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_widget_get_type$descriptor() {
        return gtk_file_chooser_widget_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_widget_get_type()
     * }
     */
    public static MethodHandle gtk_file_chooser_widget_get_type$handle() {
        return gtk_file_chooser_widget_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_file_chooser_widget_get_type()
     * }
     */
    public static long gtk_file_chooser_widget_get_type() {
        var mh$ = gtk_file_chooser_widget_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_widget_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_file_chooser_widget_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_file_chooser_widget_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_widget_new(GtkFileChooserAction action)
     * }
     */
    public static FunctionDescriptor gtk_file_chooser_widget_new$descriptor() {
        return gtk_file_chooser_widget_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_widget_new(GtkFileChooserAction action)
     * }
     */
    public static MethodHandle gtk_file_chooser_widget_new$handle() {
        return gtk_file_chooser_widget_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_file_chooser_widget_new(GtkFileChooserAction action)
     * }
     */
    public static MemorySegment gtk_file_chooser_widget_new(int action) {
        var mh$ = gtk_file_chooser_widget_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_file_chooser_widget_new", action);
            }
            return (MemorySegment)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_child_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_child_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_flow_box_child_get_type()
     * }
     */
    public static FunctionDescriptor gtk_flow_box_child_get_type$descriptor() {
        return gtk_flow_box_child_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_flow_box_child_get_type()
     * }
     */
    public static MethodHandle gtk_flow_box_child_get_type$handle() {
        return gtk_flow_box_child_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_flow_box_child_get_type()
     * }
     */
    public static long gtk_flow_box_child_get_type() {
        var mh$ = gtk_flow_box_child_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_child_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_child_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_child_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_flow_box_child_new()
     * }
     */
    public static FunctionDescriptor gtk_flow_box_child_new$descriptor() {
        return gtk_flow_box_child_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_flow_box_child_new()
     * }
     */
    public static MethodHandle gtk_flow_box_child_new$handle() {
        return gtk_flow_box_child_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_flow_box_child_new()
     * }
     */
    public static MemorySegment gtk_flow_box_child_new() {
        var mh$ = gtk_flow_box_child_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_child_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_child_get_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_child_get_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_flow_box_child_get_index(GtkFlowBoxChild *child)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_child_get_index$descriptor() {
        return gtk_flow_box_child_get_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_flow_box_child_get_index(GtkFlowBoxChild *child)
     * }
     */
    public static MethodHandle gtk_flow_box_child_get_index$handle() {
        return gtk_flow_box_child_get_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_flow_box_child_get_index(GtkFlowBoxChild *child)
     * }
     */
    public static int gtk_flow_box_child_get_index(MemorySegment child) {
        var mh$ = gtk_flow_box_child_get_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_child_get_index", child);
            }
            return (int)mh$.invokeExact(child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_child_is_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_child_is_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_flow_box_child_is_selected(GtkFlowBoxChild *child)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_child_is_selected$descriptor() {
        return gtk_flow_box_child_is_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_flow_box_child_is_selected(GtkFlowBoxChild *child)
     * }
     */
    public static MethodHandle gtk_flow_box_child_is_selected$handle() {
        return gtk_flow_box_child_is_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_flow_box_child_is_selected(GtkFlowBoxChild *child)
     * }
     */
    public static int gtk_flow_box_child_is_selected(MemorySegment child) {
        var mh$ = gtk_flow_box_child_is_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_child_is_selected", child);
            }
            return (int)mh$.invokeExact(child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_child_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_child_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_child_changed(GtkFlowBoxChild *child)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_child_changed$descriptor() {
        return gtk_flow_box_child_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_child_changed(GtkFlowBoxChild *child)
     * }
     */
    public static MethodHandle gtk_flow_box_child_changed$handle() {
        return gtk_flow_box_child_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_child_changed(GtkFlowBoxChild *child)
     * }
     */
    public static void gtk_flow_box_child_changed(MemorySegment child) {
        var mh$ = gtk_flow_box_child_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_child_changed", child);
            }
            mh$.invokeExact(child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_flow_box_get_type()
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_type$descriptor() {
        return gtk_flow_box_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_flow_box_get_type()
     * }
     */
    public static MethodHandle gtk_flow_box_get_type$handle() {
        return gtk_flow_box_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_flow_box_get_type()
     * }
     */
    public static long gtk_flow_box_get_type() {
        var mh$ = gtk_flow_box_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_flow_box_new()
     * }
     */
    public static FunctionDescriptor gtk_flow_box_new$descriptor() {
        return gtk_flow_box_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_flow_box_new()
     * }
     */
    public static MethodHandle gtk_flow_box_new$handle() {
        return gtk_flow_box_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_flow_box_new()
     * }
     */
    public static MemorySegment gtk_flow_box_new() {
        var mh$ = gtk_flow_box_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_bind_model {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_bind_model"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_bind_model(GtkFlowBox *box, GListModel *model, GtkFlowBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_bind_model$descriptor() {
        return gtk_flow_box_bind_model.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_bind_model(GtkFlowBox *box, GListModel *model, GtkFlowBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static MethodHandle gtk_flow_box_bind_model$handle() {
        return gtk_flow_box_bind_model.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_bind_model(GtkFlowBox *box, GListModel *model, GtkFlowBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func)
     * }
     */
    public static void gtk_flow_box_bind_model(MemorySegment box, MemorySegment model, MemorySegment create_widget_func, MemorySegment user_data, MemorySegment user_data_free_func) {
        var mh$ = gtk_flow_box_bind_model.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_bind_model", box, model, create_widget_func, user_data, user_data_free_func);
            }
            mh$.invokeExact(box, model, create_widget_func, user_data, user_data_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_homogeneous(GtkFlowBox *box, gboolean homogeneous)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_homogeneous$descriptor() {
        return gtk_flow_box_set_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_homogeneous(GtkFlowBox *box, gboolean homogeneous)
     * }
     */
    public static MethodHandle gtk_flow_box_set_homogeneous$handle() {
        return gtk_flow_box_set_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_homogeneous(GtkFlowBox *box, gboolean homogeneous)
     * }
     */
    public static void gtk_flow_box_set_homogeneous(MemorySegment box, int homogeneous) {
        var mh$ = gtk_flow_box_set_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_homogeneous", box, homogeneous);
            }
            mh$.invokeExact(box, homogeneous);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_homogeneous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_homogeneous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_flow_box_get_homogeneous(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_homogeneous$descriptor() {
        return gtk_flow_box_get_homogeneous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_flow_box_get_homogeneous(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_get_homogeneous$handle() {
        return gtk_flow_box_get_homogeneous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_flow_box_get_homogeneous(GtkFlowBox *box)
     * }
     */
    public static int gtk_flow_box_get_homogeneous(MemorySegment box) {
        var mh$ = gtk_flow_box_get_homogeneous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_homogeneous", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_row_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_row_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_row_spacing(GtkFlowBox *box, guint spacing)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_row_spacing$descriptor() {
        return gtk_flow_box_set_row_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_row_spacing(GtkFlowBox *box, guint spacing)
     * }
     */
    public static MethodHandle gtk_flow_box_set_row_spacing$handle() {
        return gtk_flow_box_set_row_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_row_spacing(GtkFlowBox *box, guint spacing)
     * }
     */
    public static void gtk_flow_box_set_row_spacing(MemorySegment box, int spacing) {
        var mh$ = gtk_flow_box_set_row_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_row_spacing", box, spacing);
            }
            mh$.invokeExact(box, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_row_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_row_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_row_spacing(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_row_spacing$descriptor() {
        return gtk_flow_box_get_row_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_row_spacing(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_get_row_spacing$handle() {
        return gtk_flow_box_get_row_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_row_spacing(GtkFlowBox *box)
     * }
     */
    public static int gtk_flow_box_get_row_spacing(MemorySegment box) {
        var mh$ = gtk_flow_box_get_row_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_row_spacing", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_column_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_column_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_column_spacing(GtkFlowBox *box, guint spacing)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_column_spacing$descriptor() {
        return gtk_flow_box_set_column_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_column_spacing(GtkFlowBox *box, guint spacing)
     * }
     */
    public static MethodHandle gtk_flow_box_set_column_spacing$handle() {
        return gtk_flow_box_set_column_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_column_spacing(GtkFlowBox *box, guint spacing)
     * }
     */
    public static void gtk_flow_box_set_column_spacing(MemorySegment box, int spacing) {
        var mh$ = gtk_flow_box_set_column_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_column_spacing", box, spacing);
            }
            mh$.invokeExact(box, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_column_spacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_column_spacing"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_column_spacing(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_column_spacing$descriptor() {
        return gtk_flow_box_get_column_spacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_column_spacing(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_get_column_spacing$handle() {
        return gtk_flow_box_get_column_spacing.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_column_spacing(GtkFlowBox *box)
     * }
     */
    public static int gtk_flow_box_get_column_spacing(MemorySegment box) {
        var mh$ = gtk_flow_box_get_column_spacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_column_spacing", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_min_children_per_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_min_children_per_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_min_children_per_line(GtkFlowBox *box, guint n_children)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_min_children_per_line$descriptor() {
        return gtk_flow_box_set_min_children_per_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_min_children_per_line(GtkFlowBox *box, guint n_children)
     * }
     */
    public static MethodHandle gtk_flow_box_set_min_children_per_line$handle() {
        return gtk_flow_box_set_min_children_per_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_min_children_per_line(GtkFlowBox *box, guint n_children)
     * }
     */
    public static void gtk_flow_box_set_min_children_per_line(MemorySegment box, int n_children) {
        var mh$ = gtk_flow_box_set_min_children_per_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_min_children_per_line", box, n_children);
            }
            mh$.invokeExact(box, n_children);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_min_children_per_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_min_children_per_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_min_children_per_line(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_min_children_per_line$descriptor() {
        return gtk_flow_box_get_min_children_per_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_min_children_per_line(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_get_min_children_per_line$handle() {
        return gtk_flow_box_get_min_children_per_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_min_children_per_line(GtkFlowBox *box)
     * }
     */
    public static int gtk_flow_box_get_min_children_per_line(MemorySegment box) {
        var mh$ = gtk_flow_box_get_min_children_per_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_min_children_per_line", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_max_children_per_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_max_children_per_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_max_children_per_line(GtkFlowBox *box, guint n_children)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_max_children_per_line$descriptor() {
        return gtk_flow_box_set_max_children_per_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_max_children_per_line(GtkFlowBox *box, guint n_children)
     * }
     */
    public static MethodHandle gtk_flow_box_set_max_children_per_line$handle() {
        return gtk_flow_box_set_max_children_per_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_max_children_per_line(GtkFlowBox *box, guint n_children)
     * }
     */
    public static void gtk_flow_box_set_max_children_per_line(MemorySegment box, int n_children) {
        var mh$ = gtk_flow_box_set_max_children_per_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_max_children_per_line", box, n_children);
            }
            mh$.invokeExact(box, n_children);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_max_children_per_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_max_children_per_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_max_children_per_line(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_max_children_per_line$descriptor() {
        return gtk_flow_box_get_max_children_per_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_max_children_per_line(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_get_max_children_per_line$handle() {
        return gtk_flow_box_get_max_children_per_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_flow_box_get_max_children_per_line(GtkFlowBox *box)
     * }
     */
    public static int gtk_flow_box_get_max_children_per_line(MemorySegment box) {
        var mh$ = gtk_flow_box_get_max_children_per_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_max_children_per_line", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_activate_on_single_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_activate_on_single_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_activate_on_single_click(GtkFlowBox *box, gboolean single)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_activate_on_single_click$descriptor() {
        return gtk_flow_box_set_activate_on_single_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_activate_on_single_click(GtkFlowBox *box, gboolean single)
     * }
     */
    public static MethodHandle gtk_flow_box_set_activate_on_single_click$handle() {
        return gtk_flow_box_set_activate_on_single_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_activate_on_single_click(GtkFlowBox *box, gboolean single)
     * }
     */
    public static void gtk_flow_box_set_activate_on_single_click(MemorySegment box, int single) {
        var mh$ = gtk_flow_box_set_activate_on_single_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_activate_on_single_click", box, single);
            }
            mh$.invokeExact(box, single);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_activate_on_single_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_activate_on_single_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_flow_box_get_activate_on_single_click(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_activate_on_single_click$descriptor() {
        return gtk_flow_box_get_activate_on_single_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_flow_box_get_activate_on_single_click(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_get_activate_on_single_click$handle() {
        return gtk_flow_box_get_activate_on_single_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_flow_box_get_activate_on_single_click(GtkFlowBox *box)
     * }
     */
    public static int gtk_flow_box_get_activate_on_single_click(MemorySegment box) {
        var mh$ = gtk_flow_box_get_activate_on_single_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_activate_on_single_click", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_insert(GtkFlowBox *box, GtkWidget *widget, gint position)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_insert$descriptor() {
        return gtk_flow_box_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_insert(GtkFlowBox *box, GtkWidget *widget, gint position)
     * }
     */
    public static MethodHandle gtk_flow_box_insert$handle() {
        return gtk_flow_box_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_insert(GtkFlowBox *box, GtkWidget *widget, gint position)
     * }
     */
    public static void gtk_flow_box_insert(MemorySegment box, MemorySegment widget, int position) {
        var mh$ = gtk_flow_box_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_insert", box, widget, position);
            }
            mh$.invokeExact(box, widget, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_child_at_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_child_at_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkFlowBoxChild *gtk_flow_box_get_child_at_index(GtkFlowBox *box, gint idx)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_child_at_index$descriptor() {
        return gtk_flow_box_get_child_at_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkFlowBoxChild *gtk_flow_box_get_child_at_index(GtkFlowBox *box, gint idx)
     * }
     */
    public static MethodHandle gtk_flow_box_get_child_at_index$handle() {
        return gtk_flow_box_get_child_at_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkFlowBoxChild *gtk_flow_box_get_child_at_index(GtkFlowBox *box, gint idx)
     * }
     */
    public static MemorySegment gtk_flow_box_get_child_at_index(MemorySegment box, int idx) {
        var mh$ = gtk_flow_box_get_child_at_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_child_at_index", box, idx);
            }
            return (MemorySegment)mh$.invokeExact(box, idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_child_at_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_child_at_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkFlowBoxChild *gtk_flow_box_get_child_at_pos(GtkFlowBox *box, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_child_at_pos$descriptor() {
        return gtk_flow_box_get_child_at_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkFlowBoxChild *gtk_flow_box_get_child_at_pos(GtkFlowBox *box, gint x, gint y)
     * }
     */
    public static MethodHandle gtk_flow_box_get_child_at_pos$handle() {
        return gtk_flow_box_get_child_at_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkFlowBoxChild *gtk_flow_box_get_child_at_pos(GtkFlowBox *box, gint x, gint y)
     * }
     */
    public static MemorySegment gtk_flow_box_get_child_at_pos(MemorySegment box, int x, int y) {
        var mh$ = gtk_flow_box_get_child_at_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_child_at_pos", box, x, y);
            }
            return (MemorySegment)mh$.invokeExact(box, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_selected_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_selected_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_selected_foreach(GtkFlowBox *box, GtkFlowBoxForeachFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_selected_foreach$descriptor() {
        return gtk_flow_box_selected_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_selected_foreach(GtkFlowBox *box, GtkFlowBoxForeachFunc func, gpointer data)
     * }
     */
    public static MethodHandle gtk_flow_box_selected_foreach$handle() {
        return gtk_flow_box_selected_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_selected_foreach(GtkFlowBox *box, GtkFlowBoxForeachFunc func, gpointer data)
     * }
     */
    public static void gtk_flow_box_selected_foreach(MemorySegment box, MemorySegment func, MemorySegment data) {
        var mh$ = gtk_flow_box_selected_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_selected_foreach", box, func, data);
            }
            mh$.invokeExact(box, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_selected_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_selected_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_flow_box_get_selected_children(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_selected_children$descriptor() {
        return gtk_flow_box_get_selected_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_flow_box_get_selected_children(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_get_selected_children$handle() {
        return gtk_flow_box_get_selected_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_flow_box_get_selected_children(GtkFlowBox *box)
     * }
     */
    public static MemorySegment gtk_flow_box_get_selected_children(MemorySegment box) {
        var mh$ = gtk_flow_box_get_selected_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_selected_children", box);
            }
            return (MemorySegment)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_select_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_select_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_select_child(GtkFlowBox *box, GtkFlowBoxChild *child)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_select_child$descriptor() {
        return gtk_flow_box_select_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_select_child(GtkFlowBox *box, GtkFlowBoxChild *child)
     * }
     */
    public static MethodHandle gtk_flow_box_select_child$handle() {
        return gtk_flow_box_select_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_select_child(GtkFlowBox *box, GtkFlowBoxChild *child)
     * }
     */
    public static void gtk_flow_box_select_child(MemorySegment box, MemorySegment child) {
        var mh$ = gtk_flow_box_select_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_select_child", box, child);
            }
            mh$.invokeExact(box, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_unselect_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_unselect_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_unselect_child(GtkFlowBox *box, GtkFlowBoxChild *child)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_unselect_child$descriptor() {
        return gtk_flow_box_unselect_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_unselect_child(GtkFlowBox *box, GtkFlowBoxChild *child)
     * }
     */
    public static MethodHandle gtk_flow_box_unselect_child$handle() {
        return gtk_flow_box_unselect_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_unselect_child(GtkFlowBox *box, GtkFlowBoxChild *child)
     * }
     */
    public static void gtk_flow_box_unselect_child(MemorySegment box, MemorySegment child) {
        var mh$ = gtk_flow_box_unselect_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_unselect_child", box, child);
            }
            mh$.invokeExact(box, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_select_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_select_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_select_all(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_select_all$descriptor() {
        return gtk_flow_box_select_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_select_all(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_select_all$handle() {
        return gtk_flow_box_select_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_select_all(GtkFlowBox *box)
     * }
     */
    public static void gtk_flow_box_select_all(MemorySegment box) {
        var mh$ = gtk_flow_box_select_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_select_all", box);
            }
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_unselect_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_unselect_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_unselect_all(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_unselect_all$descriptor() {
        return gtk_flow_box_unselect_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_unselect_all(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_unselect_all$handle() {
        return gtk_flow_box_unselect_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_unselect_all(GtkFlowBox *box)
     * }
     */
    public static void gtk_flow_box_unselect_all(MemorySegment box) {
        var mh$ = gtk_flow_box_unselect_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_unselect_all", box);
            }
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_selection_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_selection_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_selection_mode(GtkFlowBox *box, GtkSelectionMode mode)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_selection_mode$descriptor() {
        return gtk_flow_box_set_selection_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_selection_mode(GtkFlowBox *box, GtkSelectionMode mode)
     * }
     */
    public static MethodHandle gtk_flow_box_set_selection_mode$handle() {
        return gtk_flow_box_set_selection_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_selection_mode(GtkFlowBox *box, GtkSelectionMode mode)
     * }
     */
    public static void gtk_flow_box_set_selection_mode(MemorySegment box, int mode) {
        var mh$ = gtk_flow_box_set_selection_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_selection_mode", box, mode);
            }
            mh$.invokeExact(box, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_get_selection_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_get_selection_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_flow_box_get_selection_mode(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_get_selection_mode$descriptor() {
        return gtk_flow_box_get_selection_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_flow_box_get_selection_mode(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_get_selection_mode$handle() {
        return gtk_flow_box_get_selection_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSelectionMode gtk_flow_box_get_selection_mode(GtkFlowBox *box)
     * }
     */
    public static int gtk_flow_box_get_selection_mode(MemorySegment box) {
        var mh$ = gtk_flow_box_get_selection_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_get_selection_mode", box);
            }
            return (int)mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_hadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_hadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_hadjustment(GtkFlowBox *box, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_hadjustment$descriptor() {
        return gtk_flow_box_set_hadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_hadjustment(GtkFlowBox *box, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_flow_box_set_hadjustment$handle() {
        return gtk_flow_box_set_hadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_hadjustment(GtkFlowBox *box, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_flow_box_set_hadjustment(MemorySegment box, MemorySegment adjustment) {
        var mh$ = gtk_flow_box_set_hadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_hadjustment", box, adjustment);
            }
            mh$.invokeExact(box, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_vadjustment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_vadjustment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_vadjustment(GtkFlowBox *box, GtkAdjustment *adjustment)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_vadjustment$descriptor() {
        return gtk_flow_box_set_vadjustment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_vadjustment(GtkFlowBox *box, GtkAdjustment *adjustment)
     * }
     */
    public static MethodHandle gtk_flow_box_set_vadjustment$handle() {
        return gtk_flow_box_set_vadjustment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_vadjustment(GtkFlowBox *box, GtkAdjustment *adjustment)
     * }
     */
    public static void gtk_flow_box_set_vadjustment(MemorySegment box, MemorySegment adjustment) {
        var mh$ = gtk_flow_box_set_vadjustment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_vadjustment", box, adjustment);
            }
            mh$.invokeExact(box, adjustment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_filter_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_filter_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_filter_func(GtkFlowBox *box, GtkFlowBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_filter_func$descriptor() {
        return gtk_flow_box_set_filter_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_filter_func(GtkFlowBox *box, GtkFlowBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_flow_box_set_filter_func$handle() {
        return gtk_flow_box_set_filter_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_filter_func(GtkFlowBox *box, GtkFlowBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_flow_box_set_filter_func(MemorySegment box, MemorySegment filter_func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_flow_box_set_filter_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_filter_func", box, filter_func, user_data, destroy);
            }
            mh$.invokeExact(box, filter_func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_invalidate_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_invalidate_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_invalidate_filter(GtkFlowBox *box)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_invalidate_filter$descriptor() {
        return gtk_flow_box_invalidate_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_invalidate_filter(GtkFlowBox *box)
     * }
     */
    public static MethodHandle gtk_flow_box_invalidate_filter$handle() {
        return gtk_flow_box_invalidate_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_invalidate_filter(GtkFlowBox *box)
     * }
     */
    public static void gtk_flow_box_invalidate_filter(MemorySegment box) {
        var mh$ = gtk_flow_box_invalidate_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_invalidate_filter", box);
            }
            mh$.invokeExact(box);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_flow_box_set_sort_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_flow_box_set_sort_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_sort_func(GtkFlowBox *box, GtkFlowBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor gtk_flow_box_set_sort_func$descriptor() {
        return gtk_flow_box_set_sort_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_sort_func(GtkFlowBox *box, GtkFlowBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle gtk_flow_box_set_sort_func$handle() {
        return gtk_flow_box_set_sort_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_flow_box_set_sort_func(GtkFlowBox *box, GtkFlowBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static void gtk_flow_box_set_sort_func(MemorySegment box, MemorySegment sort_func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = gtk_flow_box_set_sort_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_flow_box_set_sort_func", box, sort_func, user_data, destroy);
            }
            mh$.invokeExact(box, sort_func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

