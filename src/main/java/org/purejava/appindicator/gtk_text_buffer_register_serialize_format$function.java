// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * unsigned char* (*gtk_text_buffer_register_serialize_format$function)(struct _GtkTextBuffer*,struct _GtkTextBuffer*,struct _GtkTextIter*,struct _GtkTextIter*,unsigned long*,void*);
 * }
 */
public interface gtk_text_buffer_register_serialize_format$function {

    java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment register_buffer, java.lang.foreign.MemorySegment content_buffer, java.lang.foreign.MemorySegment start, java.lang.foreign.MemorySegment end, java.lang.foreign.MemorySegment length, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(gtk_text_buffer_register_serialize_format$function fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$3141.const$1, fi, constants$334.const$2, scope);
    }
    static gtk_text_buffer_register_serialize_format$function ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _register_buffer, java.lang.foreign.MemorySegment _content_buffer, java.lang.foreign.MemorySegment _start, java.lang.foreign.MemorySegment _end, java.lang.foreign.MemorySegment _length, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                return (java.lang.foreign.MemorySegment)constants$3140.const$3.invokeExact(symbol, _register_buffer, _content_buffer, _start, _end, _length, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


