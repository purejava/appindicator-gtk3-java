// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GdkWindowClass {
 *     struct _GObjectClass parent_class;
 *     struct _GdkWindow* (*pick_embedded_child)(struct _GdkWindow*,double,double);
 *     void (*to_embedder)(struct _GdkWindow*,double,double,double*,double*);
 *     void (*from_embedder)(struct _GdkWindow*,double,double,double*,double*);
 *     struct _cairo_surface* (*create_surface)(struct _GdkWindow*,int,int);
 *     void (*_gdk_reserved1)();
 *     void (*_gdk_reserved2)();
 *     void (*_gdk_reserved3)();
 *     void (*_gdk_reserved4)();
 *     void (*_gdk_reserved5)();
 *     void (*_gdk_reserved6)();
 *     void (*_gdk_reserved7)();
 *     void (*_gdk_reserved8)();
 * };
 * }
 */
public class _GdkWindowClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1820.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * struct _GdkWindow* (*pick_embedded_child)(struct _GdkWindow*,double,double);
     * }
     */
    public interface pick_embedded_child {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, double _x1, double _x2);
        static MemorySegment allocate(pick_embedded_child fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1821.const$1, fi, constants$1821.const$0, scope);
        }
        static pick_embedded_child ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, double __x1, double __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$1821.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pick_embedded_child$VH() {
        return constants$1821.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GdkWindow* (*pick_embedded_child)(struct _GdkWindow*,double,double);
     * }
     */
    public static MemorySegment pick_embedded_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1821.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GdkWindow* (*pick_embedded_child)(struct _GdkWindow*,double,double);
     * }
     */
    public static void pick_embedded_child$set(MemorySegment seg, MemorySegment x) {
        constants$1821.const$3.set(seg, x);
    }
    public static MemorySegment pick_embedded_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1821.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pick_embedded_child$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1821.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static pick_embedded_child pick_embedded_child(MemorySegment segment, Arena scope) {
        return pick_embedded_child.ofAddress(pick_embedded_child$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*to_embedder)(struct _GdkWindow*,double,double,double*,double*);
     * }
     */
    public interface to_embedder {

        void apply(java.lang.foreign.MemorySegment _x0, double _x1, double _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(to_embedder fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1821.const$5, fi, constants$1821.const$4, scope);
        }
        static to_embedder ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, double __x1, double __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$1822.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle to_embedder$VH() {
        return constants$1822.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*to_embedder)(struct _GdkWindow*,double,double,double*,double*);
     * }
     */
    public static MemorySegment to_embedder$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1822.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*to_embedder)(struct _GdkWindow*,double,double,double*,double*);
     * }
     */
    public static void to_embedder$set(MemorySegment seg, MemorySegment x) {
        constants$1822.const$1.set(seg, x);
    }
    public static MemorySegment to_embedder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1822.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void to_embedder$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1822.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static to_embedder to_embedder(MemorySegment segment, Arena scope) {
        return to_embedder.ofAddress(to_embedder$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*from_embedder)(struct _GdkWindow*,double,double,double*,double*);
     * }
     */
    public interface from_embedder {

        void apply(java.lang.foreign.MemorySegment _x0, double _x1, double _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(from_embedder fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1822.const$2, fi, constants$1821.const$4, scope);
        }
        static from_embedder ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, double __x1, double __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$1822.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle from_embedder$VH() {
        return constants$1822.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*from_embedder)(struct _GdkWindow*,double,double,double*,double*);
     * }
     */
    public static MemorySegment from_embedder$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1822.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*from_embedder)(struct _GdkWindow*,double,double,double*,double*);
     * }
     */
    public static void from_embedder$set(MemorySegment seg, MemorySegment x) {
        constants$1822.const$3.set(seg, x);
    }
    public static MemorySegment from_embedder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1822.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void from_embedder$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1822.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static from_embedder from_embedder(MemorySegment segment, Arena scope) {
        return from_embedder.ofAddress(from_embedder$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _cairo_surface* (*create_surface)(struct _GdkWindow*,int,int);
     * }
     */
    public interface create_surface {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(create_surface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1822.const$4, fi, constants$33.const$5, scope);
        }
        static create_surface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$1822.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_surface$VH() {
        return constants$1823.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _cairo_surface* (*create_surface)(struct _GdkWindow*,int,int);
     * }
     */
    public static MemorySegment create_surface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1823.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _cairo_surface* (*create_surface)(struct _GdkWindow*,int,int);
     * }
     */
    public static void create_surface$set(MemorySegment seg, MemorySegment x) {
        constants$1823.const$0.set(seg, x);
    }
    public static MemorySegment create_surface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1823.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void create_surface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1823.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_surface create_surface(MemorySegment segment, Arena scope) {
        return create_surface.ofAddress(create_surface$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gdk_reserved1)();
     * }
     */
    public interface _gdk_reserved1 {

        void apply();
        static MemorySegment allocate(_gdk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1823.const$1, fi, constants$7.const$5, scope);
        }
        static _gdk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gdk_reserved1$VH() {
        return constants$1823.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gdk_reserved1)();
     * }
     */
    public static MemorySegment _gdk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1823.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gdk_reserved1)();
     * }
     */
    public static void _gdk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$1823.const$2.set(seg, x);
    }
    public static MemorySegment _gdk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1823.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gdk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1823.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gdk_reserved1 _gdk_reserved1(MemorySegment segment, Arena scope) {
        return _gdk_reserved1.ofAddress(_gdk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gdk_reserved2)();
     * }
     */
    public interface _gdk_reserved2 {

        void apply();
        static MemorySegment allocate(_gdk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1823.const$3, fi, constants$7.const$5, scope);
        }
        static _gdk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gdk_reserved2$VH() {
        return constants$1823.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gdk_reserved2)();
     * }
     */
    public static MemorySegment _gdk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1823.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gdk_reserved2)();
     * }
     */
    public static void _gdk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$1823.const$4.set(seg, x);
    }
    public static MemorySegment _gdk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1823.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gdk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1823.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gdk_reserved2 _gdk_reserved2(MemorySegment segment, Arena scope) {
        return _gdk_reserved2.ofAddress(_gdk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gdk_reserved3)();
     * }
     */
    public interface _gdk_reserved3 {

        void apply();
        static MemorySegment allocate(_gdk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1823.const$5, fi, constants$7.const$5, scope);
        }
        static _gdk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gdk_reserved3$VH() {
        return constants$1824.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gdk_reserved3)();
     * }
     */
    public static MemorySegment _gdk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1824.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gdk_reserved3)();
     * }
     */
    public static void _gdk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$1824.const$0.set(seg, x);
    }
    public static MemorySegment _gdk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1824.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gdk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1824.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gdk_reserved3 _gdk_reserved3(MemorySegment segment, Arena scope) {
        return _gdk_reserved3.ofAddress(_gdk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gdk_reserved4)();
     * }
     */
    public interface _gdk_reserved4 {

        void apply();
        static MemorySegment allocate(_gdk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1824.const$1, fi, constants$7.const$5, scope);
        }
        static _gdk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gdk_reserved4$VH() {
        return constants$1824.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gdk_reserved4)();
     * }
     */
    public static MemorySegment _gdk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1824.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gdk_reserved4)();
     * }
     */
    public static void _gdk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$1824.const$2.set(seg, x);
    }
    public static MemorySegment _gdk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1824.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gdk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1824.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gdk_reserved4 _gdk_reserved4(MemorySegment segment, Arena scope) {
        return _gdk_reserved4.ofAddress(_gdk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gdk_reserved5)();
     * }
     */
    public interface _gdk_reserved5 {

        void apply();
        static MemorySegment allocate(_gdk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1824.const$3, fi, constants$7.const$5, scope);
        }
        static _gdk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gdk_reserved5$VH() {
        return constants$1824.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gdk_reserved5)();
     * }
     */
    public static MemorySegment _gdk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1824.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gdk_reserved5)();
     * }
     */
    public static void _gdk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$1824.const$4.set(seg, x);
    }
    public static MemorySegment _gdk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1824.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gdk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1824.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gdk_reserved5 _gdk_reserved5(MemorySegment segment, Arena scope) {
        return _gdk_reserved5.ofAddress(_gdk_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gdk_reserved6)();
     * }
     */
    public interface _gdk_reserved6 {

        void apply();
        static MemorySegment allocate(_gdk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1824.const$5, fi, constants$7.const$5, scope);
        }
        static _gdk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gdk_reserved6$VH() {
        return constants$1825.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gdk_reserved6)();
     * }
     */
    public static MemorySegment _gdk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1825.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gdk_reserved6)();
     * }
     */
    public static void _gdk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$1825.const$0.set(seg, x);
    }
    public static MemorySegment _gdk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1825.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gdk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1825.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gdk_reserved6 _gdk_reserved6(MemorySegment segment, Arena scope) {
        return _gdk_reserved6.ofAddress(_gdk_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gdk_reserved7)();
     * }
     */
    public interface _gdk_reserved7 {

        void apply();
        static MemorySegment allocate(_gdk_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1825.const$1, fi, constants$7.const$5, scope);
        }
        static _gdk_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gdk_reserved7$VH() {
        return constants$1825.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gdk_reserved7)();
     * }
     */
    public static MemorySegment _gdk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1825.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gdk_reserved7)();
     * }
     */
    public static void _gdk_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$1825.const$2.set(seg, x);
    }
    public static MemorySegment _gdk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1825.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gdk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1825.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gdk_reserved7 _gdk_reserved7(MemorySegment segment, Arena scope) {
        return _gdk_reserved7.ofAddress(_gdk_reserved7$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gdk_reserved8)();
     * }
     */
    public interface _gdk_reserved8 {

        void apply();
        static MemorySegment allocate(_gdk_reserved8 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1825.const$3, fi, constants$7.const$5, scope);
        }
        static _gdk_reserved8 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gdk_reserved8$VH() {
        return constants$1825.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gdk_reserved8)();
     * }
     */
    public static MemorySegment _gdk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1825.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gdk_reserved8)();
     * }
     */
    public static void _gdk_reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$1825.const$4.set(seg, x);
    }
    public static MemorySegment _gdk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1825.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gdk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1825.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gdk_reserved8 _gdk_reserved8(MemorySegment segment, Arena scope) {
        return _gdk_reserved8.ofAddress(_gdk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


