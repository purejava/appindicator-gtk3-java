// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GFlagsValue {
 *     guint value;
 *     const gchar *value_name;
 *     const gchar *value_nick;
 * }
 * }
 */
public class _GFlagsValue {

    _GFlagsValue() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_INT.withName("value"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_POINTER.withName("value_name"),
        app_indicator_h.C_POINTER.withName("value_nick")
    ).withName("_GFlagsValue");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt value$LAYOUT = (OfInt)$LAYOUT.select(groupElement("value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint value
     * }
     */
    public static final OfInt value$layout() {
        return value$LAYOUT;
    }

    private static final long value$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint value
     * }
     */
    public static final long value$offset() {
        return value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint value
     * }
     */
    public static int value(MemorySegment struct) {
        return struct.get(value$LAYOUT, value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint value
     * }
     */
    public static void value(MemorySegment struct, int fieldValue) {
        struct.set(value$LAYOUT, value$OFFSET, fieldValue);
    }

    private static final AddressLayout value_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("value_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar *value_name
     * }
     */
    public static final AddressLayout value_name$layout() {
        return value_name$LAYOUT;
    }

    private static final long value_name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar *value_name
     * }
     */
    public static final long value_name$offset() {
        return value_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar *value_name
     * }
     */
    public static MemorySegment value_name(MemorySegment struct) {
        return struct.get(value_name$LAYOUT, value_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar *value_name
     * }
     */
    public static void value_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(value_name$LAYOUT, value_name$OFFSET, fieldValue);
    }

    private static final AddressLayout value_nick$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("value_nick"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar *value_nick
     * }
     */
    public static final AddressLayout value_nick$layout() {
        return value_nick$LAYOUT;
    }

    private static final long value_nick$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar *value_nick
     * }
     */
    public static final long value_nick$offset() {
        return value_nick$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar *value_nick
     * }
     */
    public static MemorySegment value_nick(MemorySegment struct) {
        return struct.get(value_nick$LAYOUT, value_nick$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar *value_nick
     * }
     */
    public static void value_nick(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(value_nick$LAYOUT, value_nick$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

