// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _AtkSocketClass {
 *     AtkObjectClass parent_class;
 *     void (*embed)(AtkSocket*,const gchar*);
 * };
 * }
 */
public class _AtkSocketClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent"),
            Constants$root.C_POINTER$LAYOUT.withName("get_name"),
            Constants$root.C_POINTER$LAYOUT.withName("get_description"),
            Constants$root.C_POINTER$LAYOUT.withName("get_parent"),
            Constants$root.C_POINTER$LAYOUT.withName("get_n_children"),
            Constants$root.C_POINTER$LAYOUT.withName("ref_child"),
            Constants$root.C_POINTER$LAYOUT.withName("get_index_in_parent"),
            Constants$root.C_POINTER$LAYOUT.withName("ref_relation_set"),
            Constants$root.C_POINTER$LAYOUT.withName("get_role"),
            Constants$root.C_POINTER$LAYOUT.withName("get_layer"),
            Constants$root.C_POINTER$LAYOUT.withName("get_mdi_zorder"),
            Constants$root.C_POINTER$LAYOUT.withName("ref_state_set"),
            Constants$root.C_POINTER$LAYOUT.withName("set_name"),
            Constants$root.C_POINTER$LAYOUT.withName("set_description"),
            Constants$root.C_POINTER$LAYOUT.withName("set_parent"),
            Constants$root.C_POINTER$LAYOUT.withName("set_role"),
            Constants$root.C_POINTER$LAYOUT.withName("connect_property_change_handler"),
            Constants$root.C_POINTER$LAYOUT.withName("remove_property_change_handler"),
            Constants$root.C_POINTER$LAYOUT.withName("initialize"),
            Constants$root.C_POINTER$LAYOUT.withName("children_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("focus_event"),
            Constants$root.C_POINTER$LAYOUT.withName("property_change"),
            Constants$root.C_POINTER$LAYOUT.withName("state_change"),
            Constants$root.C_POINTER$LAYOUT.withName("visible_data_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("active_descendant_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("get_attributes"),
            Constants$root.C_POINTER$LAYOUT.withName("get_object_locale"),
            Constants$root.C_POINTER$LAYOUT.withName("pad1")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("embed")
    ).withName("_AtkSocketClass");
    public static MemoryLayout $LAYOUT() {
        return _AtkSocketClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 352);
    }
    static final FunctionDescriptor embed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor embed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle embed_UP$MH = RuntimeHelper.upcallHandle(embed.class, "apply", _AtkSocketClass.embed_UP$FUNC);
    static final FunctionDescriptor embed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle embed_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkSocketClass.embed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*embed)(AtkSocket*,const gchar*);
     * }
     */
    public interface embed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(embed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkSocketClass.embed_UP$MH, fi, _AtkSocketClass.embed$FUNC, scope);
        }
        static embed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _AtkSocketClass.embed_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle embed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("embed"));
    public static VarHandle embed$VH() {
        return _AtkSocketClass.embed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*embed)(AtkSocket*,const gchar*);
     * }
     */
    public static MemorySegment embed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkSocketClass.embed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*embed)(AtkSocket*,const gchar*);
     * }
     */
    public static void embed$set(MemorySegment seg, MemorySegment x) {
        _AtkSocketClass.embed$VH.set(seg, x);
    }
    public static MemorySegment embed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkSocketClass.embed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void embed$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkSocketClass.embed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static embed embed(MemorySegment segment, SegmentScope scope) {
        return embed.ofAddress(embed$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


