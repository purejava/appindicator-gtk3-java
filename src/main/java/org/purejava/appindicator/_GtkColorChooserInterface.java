// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;

/**
 * {@snippet lang=c :
 * struct _GtkColorChooserInterface {
 *     GTypeInterface base_interface;
 *     void (*get_rgba)(GtkColorChooser *, GdkRGBA *);
 *     void (*set_rgba)(GtkColorChooser *, const GdkRGBA *);
 *     void (*add_palette)(GtkColorChooser *, GtkOrientation, gint, gint, GdkRGBA *);
 *     void (*color_activated)(GtkColorChooser *, const GdkRGBA *);
 *     gpointer padding[12];
 * }
 * }
 */
public class _GtkColorChooserInterface {

    _GtkColorChooserInterface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInterface.layout().withName("base_interface"),
        app_indicator_h.C_POINTER.withName("get_rgba"),
        app_indicator_h.C_POINTER.withName("set_rgba"),
        app_indicator_h.C_POINTER.withName("add_palette"),
        app_indicator_h.C_POINTER.withName("color_activated"),
        MemoryLayout.sequenceLayout(12, app_indicator_h.C_POINTER).withName("padding")
    ).withName("_GtkColorChooserInterface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout base_interface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("base_interface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInterface base_interface
     * }
     */
    public static final GroupLayout base_interface$layout() {
        return base_interface$LAYOUT;
    }

    private static final long base_interface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInterface base_interface
     * }
     */
    public static final long base_interface$offset() {
        return base_interface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInterface base_interface
     * }
     */
    public static MemorySegment base_interface(MemorySegment struct) {
        return struct.asSlice(base_interface$OFFSET, base_interface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInterface base_interface
     * }
     */
    public static void base_interface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, base_interface$OFFSET, base_interface$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*get_rgba)(GtkColorChooser *, GdkRGBA *)
     * }
     */
    public class get_rgba {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_rgba.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_rgba.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_rgba$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_rgba"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_rgba)(GtkColorChooser *, GdkRGBA *)
     * }
     */
    public static final AddressLayout get_rgba$layout() {
        return get_rgba$LAYOUT;
    }

    private static final long get_rgba$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_rgba)(GtkColorChooser *, GdkRGBA *)
     * }
     */
    public static final long get_rgba$offset() {
        return get_rgba$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_rgba)(GtkColorChooser *, GdkRGBA *)
     * }
     */
    public static MemorySegment get_rgba(MemorySegment struct) {
        return struct.get(get_rgba$LAYOUT, get_rgba$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_rgba)(GtkColorChooser *, GdkRGBA *)
     * }
     */
    public static void get_rgba(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_rgba$LAYOUT, get_rgba$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_rgba)(GtkColorChooser *, const GdkRGBA *)
     * }
     */
    public class set_rgba {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(set_rgba.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_rgba.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_rgba$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_rgba"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_rgba)(GtkColorChooser *, const GdkRGBA *)
     * }
     */
    public static final AddressLayout set_rgba$layout() {
        return set_rgba$LAYOUT;
    }

    private static final long set_rgba$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_rgba)(GtkColorChooser *, const GdkRGBA *)
     * }
     */
    public static final long set_rgba$offset() {
        return set_rgba$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_rgba)(GtkColorChooser *, const GdkRGBA *)
     * }
     */
    public static MemorySegment set_rgba(MemorySegment struct) {
        return struct.get(set_rgba$LAYOUT, set_rgba$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_rgba)(GtkColorChooser *, const GdkRGBA *)
     * }
     */
    public static void set_rgba(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_rgba$LAYOUT, set_rgba$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*add_palette)(GtkColorChooser *, GtkOrientation, gint, gint, GdkRGBA *)
     * }
     */
    public class add_palette {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, int _x2, int _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(add_palette.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(add_palette.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, int _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout add_palette$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("add_palette"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*add_palette)(GtkColorChooser *, GtkOrientation, gint, gint, GdkRGBA *)
     * }
     */
    public static final AddressLayout add_palette$layout() {
        return add_palette$LAYOUT;
    }

    private static final long add_palette$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*add_palette)(GtkColorChooser *, GtkOrientation, gint, gint, GdkRGBA *)
     * }
     */
    public static final long add_palette$offset() {
        return add_palette$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*add_palette)(GtkColorChooser *, GtkOrientation, gint, gint, GdkRGBA *)
     * }
     */
    public static MemorySegment add_palette(MemorySegment struct) {
        return struct.get(add_palette$LAYOUT, add_palette$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*add_palette)(GtkColorChooser *, GtkOrientation, gint, gint, GdkRGBA *)
     * }
     */
    public static void add_palette(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(add_palette$LAYOUT, add_palette$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*color_activated)(GtkColorChooser *, const GdkRGBA *)
     * }
     */
    public class color_activated {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(color_activated.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(color_activated.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout color_activated$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("color_activated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*color_activated)(GtkColorChooser *, const GdkRGBA *)
     * }
     */
    public static final AddressLayout color_activated$layout() {
        return color_activated$LAYOUT;
    }

    private static final long color_activated$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*color_activated)(GtkColorChooser *, const GdkRGBA *)
     * }
     */
    public static final long color_activated$offset() {
        return color_activated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*color_activated)(GtkColorChooser *, const GdkRGBA *)
     * }
     */
    public static MemorySegment color_activated(MemorySegment struct) {
        return struct.get(color_activated$LAYOUT, color_activated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*color_activated)(GtkColorChooser *, const GdkRGBA *)
     * }
     */
    public static void color_activated(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(color_activated$LAYOUT, color_activated$OFFSET, fieldValue);
    }

    private static final SequenceLayout padding$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("padding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gpointer padding[12]
     * }
     */
    public static final SequenceLayout padding$layout() {
        return padding$LAYOUT;
    }

    private static final long padding$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gpointer padding[12]
     * }
     */
    public static final long padding$offset() {
        return padding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gpointer padding[12]
     * }
     */
    public static MemorySegment padding(MemorySegment struct) {
        return struct.asSlice(padding$OFFSET, padding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gpointer padding[12]
     * }
     */
    public static void padding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, padding$OFFSET, padding$LAYOUT.byteSize());
    }

    private static long[] padding$DIMS = { 12 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * gpointer padding[12]
     * }
     */
    public static long[] padding$dimensions() {
        return padding$DIMS;
    }
    private static final VarHandle padding$ELEM_HANDLE = padding$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * gpointer padding[12]
     * }
     */
    public static MemorySegment padding(MemorySegment struct, long index0) {
        return (MemorySegment)padding$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * gpointer padding[12]
     * }
     */
    public static void padding(MemorySegment struct, long index0, MemorySegment fieldValue) {
        padding$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

