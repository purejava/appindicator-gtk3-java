// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkTextTagTableClass {
 *     struct _GObjectClass parent_class;
 *     void (*tag_changed)(struct _GtkTextTagTable*,struct _GtkTextTag*,int);
 *     void (*tag_added)(struct _GtkTextTagTable*,struct _GtkTextTag*);
 *     void (*tag_removed)(struct _GtkTextTagTable*,struct _GtkTextTag*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkTextTagTableClass {

    public static MemoryLayout $LAYOUT() {
        return constants$3116.const$4;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*tag_changed)(struct _GtkTextTagTable*,struct _GtkTextTag*,int);
     * }
     */
    public interface tag_changed {

        void apply(java.lang.foreign.MemorySegment screen, java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(tag_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3116.const$5, fi, constants$164.const$5, scope);
        }
        static tag_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _screen, java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, _screen, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle tag_changed$VH() {
        return constants$3117.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*tag_changed)(struct _GtkTextTagTable*,struct _GtkTextTag*,int);
     * }
     */
    public static MemorySegment tag_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3117.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*tag_changed)(struct _GtkTextTagTable*,struct _GtkTextTag*,int);
     * }
     */
    public static void tag_changed$set(MemorySegment seg, MemorySegment x) {
        constants$3117.const$0.set(seg, x);
    }
    public static MemorySegment tag_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3117.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void tag_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3117.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static tag_changed tag_changed(MemorySegment segment, Arena scope) {
        return tag_changed.ofAddress(tag_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*tag_added)(struct _GtkTextTagTable*,struct _GtkTextTag*);
     * }
     */
    public interface tag_added {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(tag_added fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3117.const$1, fi, constants$13.const$4, scope);
        }
        static tag_added ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle tag_added$VH() {
        return constants$3117.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*tag_added)(struct _GtkTextTagTable*,struct _GtkTextTag*);
     * }
     */
    public static MemorySegment tag_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3117.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*tag_added)(struct _GtkTextTagTable*,struct _GtkTextTag*);
     * }
     */
    public static void tag_added$set(MemorySegment seg, MemorySegment x) {
        constants$3117.const$2.set(seg, x);
    }
    public static MemorySegment tag_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3117.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void tag_added$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3117.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static tag_added tag_added(MemorySegment segment, Arena scope) {
        return tag_added.ofAddress(tag_added$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*tag_removed)(struct _GtkTextTagTable*,struct _GtkTextTag*);
     * }
     */
    public interface tag_removed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(tag_removed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3117.const$3, fi, constants$13.const$4, scope);
        }
        static tag_removed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle tag_removed$VH() {
        return constants$3117.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*tag_removed)(struct _GtkTextTagTable*,struct _GtkTextTag*);
     * }
     */
    public static MemorySegment tag_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3117.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*tag_removed)(struct _GtkTextTagTable*,struct _GtkTextTag*);
     * }
     */
    public static void tag_removed$set(MemorySegment seg, MemorySegment x) {
        constants$3117.const$4.set(seg, x);
    }
    public static MemorySegment tag_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3117.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void tag_removed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3117.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static tag_removed tag_removed(MemorySegment segment, Arena scope) {
        return tag_removed.ofAddress(tag_removed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3117.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$3118.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3118.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$3118.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3118.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3118.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3118.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$3118.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3118.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$3118.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3118.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3118.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3118.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$3118.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3118.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$3118.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3118.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3118.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3118.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$3119.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3119.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$3119.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3119.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3119.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


