// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _AtkValueIface {
 *     struct _GTypeInterface parent;
 *     void (*get_current_value)(struct _AtkValue*,struct _GValue*);
 *     void (*get_maximum_value)(struct _AtkValue*,struct _GValue*);
 *     void (*get_minimum_value)(struct _AtkValue*,struct _GValue*);
 *     int (*set_current_value)(struct _AtkValue*,struct _GValue*);
 *     void (*get_minimum_increment)(struct _AtkValue*,struct _GValue*);
 *     void (*get_value_and_text)(struct _AtkValue*,double*,char**);
 *     struct _AtkRange* (*get_range)(struct _AtkValue*);
 *     double (*get_increment)(struct _AtkValue*);
 *     struct _GSList* (*get_sub_ranges)(struct _AtkValue*);
 *     void (*set_value)(struct _AtkValue*,double);
 * };
 * }
 */
public class _AtkValueIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2088.const$3;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*get_current_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public interface get_current_value {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_current_value fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2088.const$4, fi, constants$13.const$4, scope);
        }
        static get_current_value ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_current_value$VH() {
        return constants$2088.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_current_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public static MemorySegment get_current_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2088.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_current_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public static void get_current_value$set(MemorySegment seg, MemorySegment x) {
        constants$2088.const$5.set(seg, x);
    }
    public static MemorySegment get_current_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2088.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_current_value$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2088.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_current_value get_current_value(MemorySegment segment, Arena scope) {
        return get_current_value.ofAddress(get_current_value$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_maximum_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public interface get_maximum_value {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_maximum_value fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2089.const$0, fi, constants$13.const$4, scope);
        }
        static get_maximum_value ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_maximum_value$VH() {
        return constants$2089.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_maximum_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public static MemorySegment get_maximum_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2089.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_maximum_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public static void get_maximum_value$set(MemorySegment seg, MemorySegment x) {
        constants$2089.const$1.set(seg, x);
    }
    public static MemorySegment get_maximum_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2089.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_maximum_value$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2089.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_maximum_value get_maximum_value(MemorySegment segment, Arena scope) {
        return get_maximum_value.ofAddress(get_maximum_value$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_minimum_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public interface get_minimum_value {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_minimum_value fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2089.const$2, fi, constants$13.const$4, scope);
        }
        static get_minimum_value ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_minimum_value$VH() {
        return constants$2089.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_minimum_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public static MemorySegment get_minimum_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2089.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_minimum_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public static void get_minimum_value$set(MemorySegment seg, MemorySegment x) {
        constants$2089.const$3.set(seg, x);
    }
    public static MemorySegment get_minimum_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2089.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_minimum_value$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2089.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_minimum_value get_minimum_value(MemorySegment segment, Arena scope) {
        return get_minimum_value.ofAddress(get_minimum_value$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_current_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public interface set_current_value {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_current_value fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2089.const$4, fi, constants$9.const$0, scope);
        }
        static set_current_value ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_current_value$VH() {
        return constants$2089.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_current_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public static MemorySegment set_current_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2089.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_current_value)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public static void set_current_value$set(MemorySegment seg, MemorySegment x) {
        constants$2089.const$5.set(seg, x);
    }
    public static MemorySegment set_current_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2089.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void set_current_value$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2089.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_current_value set_current_value(MemorySegment segment, Arena scope) {
        return set_current_value.ofAddress(set_current_value$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_minimum_increment)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public interface get_minimum_increment {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_minimum_increment fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2090.const$0, fi, constants$13.const$4, scope);
        }
        static get_minimum_increment ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_minimum_increment$VH() {
        return constants$2090.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_minimum_increment)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public static MemorySegment get_minimum_increment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_minimum_increment)(struct _AtkValue*,struct _GValue*);
     * }
     */
    public static void get_minimum_increment$set(MemorySegment seg, MemorySegment x) {
        constants$2090.const$1.set(seg, x);
    }
    public static MemorySegment get_minimum_increment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_minimum_increment$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2090.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_minimum_increment get_minimum_increment(MemorySegment segment, Arena scope) {
        return get_minimum_increment.ofAddress(get_minimum_increment$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_value_and_text)(struct _AtkValue*,double*,char**);
     * }
     */
    public interface get_value_and_text {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_value_and_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2090.const$2, fi, constants$14.const$3, scope);
        }
        static get_value_and_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_value_and_text$VH() {
        return constants$2090.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_value_and_text)(struct _AtkValue*,double*,char**);
     * }
     */
    public static MemorySegment get_value_and_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_value_and_text)(struct _AtkValue*,double*,char**);
     * }
     */
    public static void get_value_and_text$set(MemorySegment seg, MemorySegment x) {
        constants$2090.const$3.set(seg, x);
    }
    public static MemorySegment get_value_and_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_value_and_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2090.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_value_and_text get_value_and_text(MemorySegment segment, Arena scope) {
        return get_value_and_text.ofAddress(get_value_and_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkRange* (*get_range)(struct _AtkValue*);
     * }
     */
    public interface get_range {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_range fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2090.const$4, fi, constants$5.const$2, scope);
        }
        static get_range ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_range$VH() {
        return constants$2090.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkRange* (*get_range)(struct _AtkValue*);
     * }
     */
    public static MemorySegment get_range$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkRange* (*get_range)(struct _AtkValue*);
     * }
     */
    public static void get_range$set(MemorySegment seg, MemorySegment x) {
        constants$2090.const$5.set(seg, x);
    }
    public static MemorySegment get_range$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_range$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2090.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_range get_range(MemorySegment segment, Arena scope) {
        return get_range.ofAddress(get_range$get(segment), scope);
    }
    /**
     * {@snippet :
 * double (*get_increment)(struct _AtkValue*);
     * }
     */
    public interface get_increment {

        double apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_increment fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2091.const$0, fi, constants$67.const$0, scope);
        }
        static get_increment ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (double)constants$2000.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_increment$VH() {
        return constants$2091.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*get_increment)(struct _AtkValue*);
     * }
     */
    public static MemorySegment get_increment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2091.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*get_increment)(struct _AtkValue*);
     * }
     */
    public static void get_increment$set(MemorySegment seg, MemorySegment x) {
        constants$2091.const$1.set(seg, x);
    }
    public static MemorySegment get_increment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2091.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_increment$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2091.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_increment get_increment(MemorySegment segment, Arena scope) {
        return get_increment.ofAddress(get_increment$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GSList* (*get_sub_ranges)(struct _AtkValue*);
     * }
     */
    public interface get_sub_ranges {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_sub_ranges fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2091.const$2, fi, constants$5.const$2, scope);
        }
        static get_sub_ranges ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_sub_ranges$VH() {
        return constants$2091.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GSList* (*get_sub_ranges)(struct _AtkValue*);
     * }
     */
    public static MemorySegment get_sub_ranges$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2091.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GSList* (*get_sub_ranges)(struct _AtkValue*);
     * }
     */
    public static void get_sub_ranges$set(MemorySegment seg, MemorySegment x) {
        constants$2091.const$3.set(seg, x);
    }
    public static MemorySegment get_sub_ranges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2091.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_sub_ranges$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2091.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_sub_ranges get_sub_ranges(MemorySegment segment, Arena scope) {
        return get_sub_ranges.ofAddress(get_sub_ranges$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_value)(struct _AtkValue*,double);
     * }
     */
    public interface set_value {

        void apply(java.lang.foreign.MemorySegment _x0, double _x1);
        static MemorySegment allocate(set_value fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2091.const$4, fi, constants$689.const$5, scope);
        }
        static set_value ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, double __x1) -> {
                try {
                    constants$2091.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_value$VH() {
        return constants$2092.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_value)(struct _AtkValue*,double);
     * }
     */
    public static MemorySegment set_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2092.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_value)(struct _AtkValue*,double);
     * }
     */
    public static void set_value$set(MemorySegment seg, MemorySegment x) {
        constants$2092.const$0.set(seg, x);
    }
    public static MemorySegment set_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2092.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void set_value$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2092.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_value set_value(MemorySegment segment, Arena scope) {
        return set_value.ofAddress(set_value$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


