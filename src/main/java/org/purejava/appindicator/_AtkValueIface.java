// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _AtkValueIface {
 *     GTypeInterface parent;
 *     void (*get_current_value)(AtkValue*,GValue*);
 *     void (*get_maximum_value)(AtkValue*,GValue*);
 *     void (*get_minimum_value)(AtkValue*,GValue*);
 *     gboolean (*set_current_value)(AtkValue*,const GValue*);
 *     void (*get_minimum_increment)(AtkValue*,GValue*);
 *     void (*get_value_and_text)(AtkValue*,gdouble*,gchar**);
 *     AtkRange* (*get_range)(AtkValue*);
 *     gdouble (*get_increment)(AtkValue*);
 *     GSList* (*get_sub_ranges)(AtkValue*);
 *     void (*set_value)(AtkValue*,const gdouble);
 * };
 * }
 */
public class _AtkValueIface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_current_value"),
        Constants$root.C_POINTER$LAYOUT.withName("get_maximum_value"),
        Constants$root.C_POINTER$LAYOUT.withName("get_minimum_value"),
        Constants$root.C_POINTER$LAYOUT.withName("set_current_value"),
        Constants$root.C_POINTER$LAYOUT.withName("get_minimum_increment"),
        Constants$root.C_POINTER$LAYOUT.withName("get_value_and_text"),
        Constants$root.C_POINTER$LAYOUT.withName("get_range"),
        Constants$root.C_POINTER$LAYOUT.withName("get_increment"),
        Constants$root.C_POINTER$LAYOUT.withName("get_sub_ranges"),
        Constants$root.C_POINTER$LAYOUT.withName("set_value")
    ).withName("_AtkValueIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkValueIface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_current_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_current_value_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_current_value_UP$MH = RuntimeHelper.upcallHandle(get_current_value.class, "apply", _AtkValueIface.get_current_value_UP$FUNC);
    static final FunctionDescriptor get_current_value_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_current_value_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_current_value_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_current_value)(AtkValue*,GValue*);
     * }
     */
    public interface get_current_value {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_current_value fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkValueIface.get_current_value_UP$MH, fi, _AtkValueIface.get_current_value$FUNC, scope);
        }
        static get_current_value ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _AtkValueIface.get_current_value_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_current_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_current_value"));
    public static VarHandle get_current_value$VH() {
        return _AtkValueIface.get_current_value$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_current_value)(AtkValue*,GValue*);
     * }
     */
    public static MemorySegment get_current_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_current_value$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_current_value)(AtkValue*,GValue*);
     * }
     */
    public static void get_current_value$set(MemorySegment seg, MemorySegment x) {
        _AtkValueIface.get_current_value$VH.set(seg, x);
    }
    public static MemorySegment get_current_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_current_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_current_value$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkValueIface.get_current_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_current_value get_current_value(MemorySegment segment, SegmentScope scope) {
        return get_current_value.ofAddress(get_current_value$get(segment), scope);
    }
    static final FunctionDescriptor get_maximum_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_maximum_value_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_maximum_value_UP$MH = RuntimeHelper.upcallHandle(get_maximum_value.class, "apply", _AtkValueIface.get_maximum_value_UP$FUNC);
    static final FunctionDescriptor get_maximum_value_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_maximum_value_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_maximum_value_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_maximum_value)(AtkValue*,GValue*);
     * }
     */
    public interface get_maximum_value {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_maximum_value fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkValueIface.get_maximum_value_UP$MH, fi, _AtkValueIface.get_maximum_value$FUNC, scope);
        }
        static get_maximum_value ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _AtkValueIface.get_maximum_value_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_maximum_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_maximum_value"));
    public static VarHandle get_maximum_value$VH() {
        return _AtkValueIface.get_maximum_value$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_maximum_value)(AtkValue*,GValue*);
     * }
     */
    public static MemorySegment get_maximum_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_maximum_value$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_maximum_value)(AtkValue*,GValue*);
     * }
     */
    public static void get_maximum_value$set(MemorySegment seg, MemorySegment x) {
        _AtkValueIface.get_maximum_value$VH.set(seg, x);
    }
    public static MemorySegment get_maximum_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_maximum_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_maximum_value$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkValueIface.get_maximum_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_maximum_value get_maximum_value(MemorySegment segment, SegmentScope scope) {
        return get_maximum_value.ofAddress(get_maximum_value$get(segment), scope);
    }
    static final FunctionDescriptor get_minimum_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_minimum_value_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_minimum_value_UP$MH = RuntimeHelper.upcallHandle(get_minimum_value.class, "apply", _AtkValueIface.get_minimum_value_UP$FUNC);
    static final FunctionDescriptor get_minimum_value_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_minimum_value_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_minimum_value_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_minimum_value)(AtkValue*,GValue*);
     * }
     */
    public interface get_minimum_value {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_minimum_value fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkValueIface.get_minimum_value_UP$MH, fi, _AtkValueIface.get_minimum_value$FUNC, scope);
        }
        static get_minimum_value ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _AtkValueIface.get_minimum_value_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_minimum_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_minimum_value"));
    public static VarHandle get_minimum_value$VH() {
        return _AtkValueIface.get_minimum_value$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_minimum_value)(AtkValue*,GValue*);
     * }
     */
    public static MemorySegment get_minimum_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_minimum_value$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_minimum_value)(AtkValue*,GValue*);
     * }
     */
    public static void get_minimum_value$set(MemorySegment seg, MemorySegment x) {
        _AtkValueIface.get_minimum_value$VH.set(seg, x);
    }
    public static MemorySegment get_minimum_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_minimum_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_minimum_value$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkValueIface.get_minimum_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_minimum_value get_minimum_value(MemorySegment segment, SegmentScope scope) {
        return get_minimum_value.ofAddress(get_minimum_value$get(segment), scope);
    }
    static final FunctionDescriptor set_current_value$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_current_value_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_current_value_UP$MH = RuntimeHelper.upcallHandle(set_current_value.class, "apply", _AtkValueIface.set_current_value_UP$FUNC);
    static final FunctionDescriptor set_current_value_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_current_value_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.set_current_value_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*set_current_value)(AtkValue*,const GValue*);
     * }
     */
    public interface set_current_value {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(set_current_value fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkValueIface.set_current_value_UP$MH, fi, _AtkValueIface.set_current_value$FUNC, scope);
        }
        static set_current_value ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)_AtkValueIface.set_current_value_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_current_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_current_value"));
    public static VarHandle set_current_value$VH() {
        return _AtkValueIface.set_current_value$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*set_current_value)(AtkValue*,const GValue*);
     * }
     */
    public static MemorySegment set_current_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.set_current_value$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*set_current_value)(AtkValue*,const GValue*);
     * }
     */
    public static void set_current_value$set(MemorySegment seg, MemorySegment x) {
        _AtkValueIface.set_current_value$VH.set(seg, x);
    }
    public static MemorySegment set_current_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.set_current_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_current_value$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkValueIface.set_current_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_current_value set_current_value(MemorySegment segment, SegmentScope scope) {
        return set_current_value.ofAddress(set_current_value$get(segment), scope);
    }
    static final FunctionDescriptor get_minimum_increment$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_minimum_increment_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_minimum_increment_UP$MH = RuntimeHelper.upcallHandle(get_minimum_increment.class, "apply", _AtkValueIface.get_minimum_increment_UP$FUNC);
    static final FunctionDescriptor get_minimum_increment_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_minimum_increment_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_minimum_increment_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_minimum_increment)(AtkValue*,GValue*);
     * }
     */
    public interface get_minimum_increment {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_minimum_increment fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkValueIface.get_minimum_increment_UP$MH, fi, _AtkValueIface.get_minimum_increment$FUNC, scope);
        }
        static get_minimum_increment ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _AtkValueIface.get_minimum_increment_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_minimum_increment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_minimum_increment"));
    public static VarHandle get_minimum_increment$VH() {
        return _AtkValueIface.get_minimum_increment$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_minimum_increment)(AtkValue*,GValue*);
     * }
     */
    public static MemorySegment get_minimum_increment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_minimum_increment$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_minimum_increment)(AtkValue*,GValue*);
     * }
     */
    public static void get_minimum_increment$set(MemorySegment seg, MemorySegment x) {
        _AtkValueIface.get_minimum_increment$VH.set(seg, x);
    }
    public static MemorySegment get_minimum_increment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_minimum_increment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_minimum_increment$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkValueIface.get_minimum_increment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_minimum_increment get_minimum_increment(MemorySegment segment, SegmentScope scope) {
        return get_minimum_increment.ofAddress(get_minimum_increment$get(segment), scope);
    }
    static final FunctionDescriptor get_value_and_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_value_and_text_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_value_and_text_UP$MH = RuntimeHelper.upcallHandle(get_value_and_text.class, "apply", _AtkValueIface.get_value_and_text_UP$FUNC);
    static final FunctionDescriptor get_value_and_text_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_value_and_text_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_value_and_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_value_and_text)(AtkValue*,gdouble*,gchar**);
     * }
     */
    public interface get_value_and_text {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_value_and_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkValueIface.get_value_and_text_UP$MH, fi, _AtkValueIface.get_value_and_text$FUNC, scope);
        }
        static get_value_and_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _AtkValueIface.get_value_and_text_DOWN$MH.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_value_and_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_value_and_text"));
    public static VarHandle get_value_and_text$VH() {
        return _AtkValueIface.get_value_and_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_value_and_text)(AtkValue*,gdouble*,gchar**);
     * }
     */
    public static MemorySegment get_value_and_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_value_and_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_value_and_text)(AtkValue*,gdouble*,gchar**);
     * }
     */
    public static void get_value_and_text$set(MemorySegment seg, MemorySegment x) {
        _AtkValueIface.get_value_and_text$VH.set(seg, x);
    }
    public static MemorySegment get_value_and_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_value_and_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_value_and_text$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkValueIface.get_value_and_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_value_and_text get_value_and_text(MemorySegment segment, SegmentScope scope) {
        return get_value_and_text.ofAddress(get_value_and_text$get(segment), scope);
    }
    static final FunctionDescriptor get_range$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_range_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_range_UP$MH = RuntimeHelper.upcallHandle(get_range.class, "apply", _AtkValueIface.get_range_UP$FUNC);
    static final FunctionDescriptor get_range_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_range_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_range_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkRange* (*get_range)(AtkValue*);
     * }
     */
    public interface get_range {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_range fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkValueIface.get_range_UP$MH, fi, _AtkValueIface.get_range$FUNC, scope);
        }
        static get_range ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkValueIface.get_range_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_range$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_range"));
    public static VarHandle get_range$VH() {
        return _AtkValueIface.get_range$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkRange* (*get_range)(AtkValue*);
     * }
     */
    public static MemorySegment get_range$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_range$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkRange* (*get_range)(AtkValue*);
     * }
     */
    public static void get_range$set(MemorySegment seg, MemorySegment x) {
        _AtkValueIface.get_range$VH.set(seg, x);
    }
    public static MemorySegment get_range$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_range$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_range$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkValueIface.get_range$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_range get_range(MemorySegment segment, SegmentScope scope) {
        return get_range.ofAddress(get_range$get(segment), scope);
    }
    static final FunctionDescriptor get_increment$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_increment_UP$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_increment_UP$MH = RuntimeHelper.upcallHandle(get_increment.class, "apply", _AtkValueIface.get_increment_UP$FUNC);
    static final FunctionDescriptor get_increment_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_increment_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_increment_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gdouble (*get_increment)(AtkValue*);
     * }
     */
    public interface get_increment {

        double apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_increment fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkValueIface.get_increment_UP$MH, fi, _AtkValueIface.get_increment$FUNC, scope);
        }
        static get_increment ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (double)_AtkValueIface.get_increment_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_increment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_increment"));
    public static VarHandle get_increment$VH() {
        return _AtkValueIface.get_increment$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gdouble (*get_increment)(AtkValue*);
     * }
     */
    public static MemorySegment get_increment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_increment$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gdouble (*get_increment)(AtkValue*);
     * }
     */
    public static void get_increment$set(MemorySegment seg, MemorySegment x) {
        _AtkValueIface.get_increment$VH.set(seg, x);
    }
    public static MemorySegment get_increment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_increment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_increment$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkValueIface.get_increment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_increment get_increment(MemorySegment segment, SegmentScope scope) {
        return get_increment.ofAddress(get_increment$get(segment), scope);
    }
    static final FunctionDescriptor get_sub_ranges$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_sub_ranges_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_sub_ranges_UP$MH = RuntimeHelper.upcallHandle(get_sub_ranges.class, "apply", _AtkValueIface.get_sub_ranges_UP$FUNC);
    static final FunctionDescriptor get_sub_ranges_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_sub_ranges_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_sub_ranges_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GSList* (*get_sub_ranges)(AtkValue*);
     * }
     */
    public interface get_sub_ranges {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_sub_ranges fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkValueIface.get_sub_ranges_UP$MH, fi, _AtkValueIface.get_sub_ranges$FUNC, scope);
        }
        static get_sub_ranges ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkValueIface.get_sub_ranges_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_sub_ranges$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_sub_ranges"));
    public static VarHandle get_sub_ranges$VH() {
        return _AtkValueIface.get_sub_ranges$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GSList* (*get_sub_ranges)(AtkValue*);
     * }
     */
    public static MemorySegment get_sub_ranges$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_sub_ranges$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GSList* (*get_sub_ranges)(AtkValue*);
     * }
     */
    public static void get_sub_ranges$set(MemorySegment seg, MemorySegment x) {
        _AtkValueIface.get_sub_ranges$VH.set(seg, x);
    }
    public static MemorySegment get_sub_ranges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.get_sub_ranges$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_sub_ranges$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkValueIface.get_sub_ranges$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_sub_ranges get_sub_ranges(MemorySegment segment, SegmentScope scope) {
        return get_sub_ranges.ofAddress(get_sub_ranges$get(segment), scope);
    }
    static final FunctionDescriptor set_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final FunctionDescriptor set_value_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle set_value_UP$MH = RuntimeHelper.upcallHandle(set_value.class, "apply", _AtkValueIface.set_value_UP$FUNC);
    static final FunctionDescriptor set_value_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle set_value_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.set_value_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_value)(AtkValue*,const gdouble);
     * }
     */
    public interface set_value {

        void apply(java.lang.foreign.MemorySegment _x0, double _x1);
        static MemorySegment allocate(set_value fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkValueIface.set_value_UP$MH, fi, _AtkValueIface.set_value$FUNC, scope);
        }
        static set_value ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, double __x1) -> {
                try {
                    _AtkValueIface.set_value_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_value"));
    public static VarHandle set_value$VH() {
        return _AtkValueIface.set_value$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_value)(AtkValue*,const gdouble);
     * }
     */
    public static MemorySegment set_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.set_value$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_value)(AtkValue*,const gdouble);
     * }
     */
    public static void set_value$set(MemorySegment seg, MemorySegment x) {
        _AtkValueIface.set_value$VH.set(seg, x);
    }
    public static MemorySegment set_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkValueIface.set_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_value$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkValueIface.set_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_value set_value(MemorySegment segment, SegmentScope scope) {
        return set_value.ofAddress(set_value$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


