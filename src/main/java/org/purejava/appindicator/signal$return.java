// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * void (*signal$return)(int);
 * }
 */
public interface signal$return {

    void apply(int _x0);
    static MemorySegment allocate(signal$return fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$123.const$3, fi, constants$80.const$1, scope);
    }
    static signal$return ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int __x0) -> {
            try {
                constants$122.const$4.invokeExact(symbol, __x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


