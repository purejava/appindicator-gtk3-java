// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkCellRendererClass {
 *     GInitiallyUnownedClass parent_class;
 *     GtkSizeRequestMode (*get_request_mode)(GtkCellRenderer *);
 *     void (*get_preferred_width)(GtkCellRenderer *, GtkWidget *, gint *, gint *);
 *     void (*get_preferred_height_for_width)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *);
 *     void (*get_preferred_height)(GtkCellRenderer *, GtkWidget *, gint *, gint *);
 *     void (*get_preferred_width_for_height)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *);
 *     void (*get_aligned_area)(GtkCellRenderer *, GtkWidget *, GtkCellRendererState, const GdkRectangle *, GdkRectangle *);
 *     void (*get_size)(GtkCellRenderer *, GtkWidget *, const GdkRectangle *, gint *, gint *, gint *, gint *);
 *     void (*render)(GtkCellRenderer *, cairo_t *, GtkWidget *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState);
 *     gboolean (*activate)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState);
 *     GtkCellEditable *(*start_editing)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState);
 *     void (*editing_canceled)(GtkCellRenderer *);
 *     void (*editing_started)(GtkCellRenderer *, GtkCellEditable *, const gchar *);
 *     GtkCellRendererClassPrivate *priv;
 *     void (*_gtk_reserved2)(void);
 *     void (*_gtk_reserved3)(void);
 *     void (*_gtk_reserved4)(void);
 * }
 * }
 */
public class _GtkCellRendererClass {

    _GtkCellRendererClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("get_request_mode"),
        app_indicator_h.C_POINTER.withName("get_preferred_width"),
        app_indicator_h.C_POINTER.withName("get_preferred_height_for_width"),
        app_indicator_h.C_POINTER.withName("get_preferred_height"),
        app_indicator_h.C_POINTER.withName("get_preferred_width_for_height"),
        app_indicator_h.C_POINTER.withName("get_aligned_area"),
        app_indicator_h.C_POINTER.withName("get_size"),
        app_indicator_h.C_POINTER.withName("render"),
        app_indicator_h.C_POINTER.withName("activate"),
        app_indicator_h.C_POINTER.withName("start_editing"),
        app_indicator_h.C_POINTER.withName("editing_canceled"),
        app_indicator_h.C_POINTER.withName("editing_started"),
        app_indicator_h.C_POINTER.withName("priv"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved2"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved3"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved4")
    ).withName("_GtkCellRendererClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GInitiallyUnownedClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GInitiallyUnownedClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GInitiallyUnownedClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GInitiallyUnownedClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * GtkSizeRequestMode (*get_request_mode)(GtkCellRenderer *)
     * }
     */
    public class get_request_mode {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_request_mode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_request_mode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_request_mode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_request_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkSizeRequestMode (*get_request_mode)(GtkCellRenderer *)
     * }
     */
    public static final AddressLayout get_request_mode$layout() {
        return get_request_mode$LAYOUT;
    }

    private static final long get_request_mode$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkSizeRequestMode (*get_request_mode)(GtkCellRenderer *)
     * }
     */
    public static final long get_request_mode$offset() {
        return get_request_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkSizeRequestMode (*get_request_mode)(GtkCellRenderer *)
     * }
     */
    public static MemorySegment get_request_mode(MemorySegment struct) {
        return struct.get(get_request_mode$LAYOUT, get_request_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkSizeRequestMode (*get_request_mode)(GtkCellRenderer *)
     * }
     */
    public static void get_request_mode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_request_mode$LAYOUT, get_request_mode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_preferred_width)(GtkCellRenderer *, GtkWidget *, gint *, gint *)
     * }
     */
    public class get_preferred_width {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_preferred_width.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_preferred_width.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_preferred_width$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_preferred_width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_preferred_width)(GtkCellRenderer *, GtkWidget *, gint *, gint *)
     * }
     */
    public static final AddressLayout get_preferred_width$layout() {
        return get_preferred_width$LAYOUT;
    }

    private static final long get_preferred_width$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_preferred_width)(GtkCellRenderer *, GtkWidget *, gint *, gint *)
     * }
     */
    public static final long get_preferred_width$offset() {
        return get_preferred_width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_preferred_width)(GtkCellRenderer *, GtkWidget *, gint *, gint *)
     * }
     */
    public static MemorySegment get_preferred_width(MemorySegment struct) {
        return struct.get(get_preferred_width$LAYOUT, get_preferred_width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_preferred_width)(GtkCellRenderer *, GtkWidget *, gint *, gint *)
     * }
     */
    public static void get_preferred_width(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_preferred_width$LAYOUT, get_preferred_width$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_preferred_height_for_width)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *)
     * }
     */
    public class get_preferred_height_for_width {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_preferred_height_for_width.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_preferred_height_for_width.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_preferred_height_for_width$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_preferred_height_for_width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_preferred_height_for_width)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *)
     * }
     */
    public static final AddressLayout get_preferred_height_for_width$layout() {
        return get_preferred_height_for_width$LAYOUT;
    }

    private static final long get_preferred_height_for_width$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_preferred_height_for_width)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *)
     * }
     */
    public static final long get_preferred_height_for_width$offset() {
        return get_preferred_height_for_width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_preferred_height_for_width)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *)
     * }
     */
    public static MemorySegment get_preferred_height_for_width(MemorySegment struct) {
        return struct.get(get_preferred_height_for_width$LAYOUT, get_preferred_height_for_width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_preferred_height_for_width)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *)
     * }
     */
    public static void get_preferred_height_for_width(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_preferred_height_for_width$LAYOUT, get_preferred_height_for_width$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_preferred_height)(GtkCellRenderer *, GtkWidget *, gint *, gint *)
     * }
     */
    public class get_preferred_height {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_preferred_height.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_preferred_height.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_preferred_height$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_preferred_height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_preferred_height)(GtkCellRenderer *, GtkWidget *, gint *, gint *)
     * }
     */
    public static final AddressLayout get_preferred_height$layout() {
        return get_preferred_height$LAYOUT;
    }

    private static final long get_preferred_height$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_preferred_height)(GtkCellRenderer *, GtkWidget *, gint *, gint *)
     * }
     */
    public static final long get_preferred_height$offset() {
        return get_preferred_height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_preferred_height)(GtkCellRenderer *, GtkWidget *, gint *, gint *)
     * }
     */
    public static MemorySegment get_preferred_height(MemorySegment struct) {
        return struct.get(get_preferred_height$LAYOUT, get_preferred_height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_preferred_height)(GtkCellRenderer *, GtkWidget *, gint *, gint *)
     * }
     */
    public static void get_preferred_height(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_preferred_height$LAYOUT, get_preferred_height$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_preferred_width_for_height)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *)
     * }
     */
    public class get_preferred_width_for_height {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_preferred_width_for_height.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_preferred_width_for_height.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_preferred_width_for_height$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_preferred_width_for_height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_preferred_width_for_height)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *)
     * }
     */
    public static final AddressLayout get_preferred_width_for_height$layout() {
        return get_preferred_width_for_height$LAYOUT;
    }

    private static final long get_preferred_width_for_height$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_preferred_width_for_height)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *)
     * }
     */
    public static final long get_preferred_width_for_height$offset() {
        return get_preferred_width_for_height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_preferred_width_for_height)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *)
     * }
     */
    public static MemorySegment get_preferred_width_for_height(MemorySegment struct) {
        return struct.get(get_preferred_width_for_height$LAYOUT, get_preferred_width_for_height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_preferred_width_for_height)(GtkCellRenderer *, GtkWidget *, gint, gint *, gint *)
     * }
     */
    public static void get_preferred_width_for_height(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_preferred_width_for_height$LAYOUT, get_preferred_width_for_height$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_aligned_area)(GtkCellRenderer *, GtkWidget *, GtkCellRendererState, const GdkRectangle *, GdkRectangle *)
     * }
     */
    public class get_aligned_area {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_aligned_area.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_aligned_area.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_aligned_area$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_aligned_area"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_aligned_area)(GtkCellRenderer *, GtkWidget *, GtkCellRendererState, const GdkRectangle *, GdkRectangle *)
     * }
     */
    public static final AddressLayout get_aligned_area$layout() {
        return get_aligned_area$LAYOUT;
    }

    private static final long get_aligned_area$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_aligned_area)(GtkCellRenderer *, GtkWidget *, GtkCellRendererState, const GdkRectangle *, GdkRectangle *)
     * }
     */
    public static final long get_aligned_area$offset() {
        return get_aligned_area$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_aligned_area)(GtkCellRenderer *, GtkWidget *, GtkCellRendererState, const GdkRectangle *, GdkRectangle *)
     * }
     */
    public static MemorySegment get_aligned_area(MemorySegment struct) {
        return struct.get(get_aligned_area$LAYOUT, get_aligned_area$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_aligned_area)(GtkCellRenderer *, GtkWidget *, GtkCellRendererState, const GdkRectangle *, GdkRectangle *)
     * }
     */
    public static void get_aligned_area(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_aligned_area$LAYOUT, get_aligned_area$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*get_size)(GtkCellRenderer *, GtkWidget *, const GdkRectangle *, gint *, gint *, gint *, gint *)
     * }
     */
    public class get_size {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_size.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_size.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*get_size)(GtkCellRenderer *, GtkWidget *, const GdkRectangle *, gint *, gint *, gint *, gint *)
     * }
     */
    public static final AddressLayout get_size$layout() {
        return get_size$LAYOUT;
    }

    private static final long get_size$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*get_size)(GtkCellRenderer *, GtkWidget *, const GdkRectangle *, gint *, gint *, gint *, gint *)
     * }
     */
    public static final long get_size$offset() {
        return get_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*get_size)(GtkCellRenderer *, GtkWidget *, const GdkRectangle *, gint *, gint *, gint *, gint *)
     * }
     */
    public static MemorySegment get_size(MemorySegment struct) {
        return struct.get(get_size$LAYOUT, get_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*get_size)(GtkCellRenderer *, GtkWidget *, const GdkRectangle *, gint *, gint *, gint *, gint *)
     * }
     */
    public static void get_size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_size$LAYOUT, get_size$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*render)(GtkCellRenderer *, cairo_t *, GtkWidget *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public class render {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, int _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(render.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(render.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, int _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout render$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("render"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*render)(GtkCellRenderer *, cairo_t *, GtkWidget *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static final AddressLayout render$layout() {
        return render$LAYOUT;
    }

    private static final long render$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*render)(GtkCellRenderer *, cairo_t *, GtkWidget *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static final long render$offset() {
        return render$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*render)(GtkCellRenderer *, cairo_t *, GtkWidget *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static MemorySegment render(MemorySegment struct) {
        return struct.get(render$LAYOUT, render$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*render)(GtkCellRenderer *, cairo_t *, GtkWidget *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static void render(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(render$LAYOUT, render$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*activate)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public class activate {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, int _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(activate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(activate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, int _x6) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout activate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("activate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*activate)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static final AddressLayout activate$layout() {
        return activate$LAYOUT;
    }

    private static final long activate$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*activate)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static final long activate$offset() {
        return activate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*activate)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static MemorySegment activate(MemorySegment struct) {
        return struct.get(activate$LAYOUT, activate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*activate)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static void activate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(activate$LAYOUT, activate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GtkCellEditable *(*start_editing)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public class start_editing {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, int _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(start_editing.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(start_editing.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5, int _x6) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout start_editing$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("start_editing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkCellEditable *(*start_editing)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static final AddressLayout start_editing$layout() {
        return start_editing$LAYOUT;
    }

    private static final long start_editing$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkCellEditable *(*start_editing)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static final long start_editing$offset() {
        return start_editing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkCellEditable *(*start_editing)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static MemorySegment start_editing(MemorySegment struct) {
        return struct.get(start_editing$LAYOUT, start_editing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkCellEditable *(*start_editing)(GtkCellRenderer *, GdkEvent *, GtkWidget *, const gchar *, const GdkRectangle *, const GdkRectangle *, GtkCellRendererState)
     * }
     */
    public static void start_editing(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(start_editing$LAYOUT, start_editing$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*editing_canceled)(GtkCellRenderer *)
     * }
     */
    public class editing_canceled {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(editing_canceled.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(editing_canceled.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout editing_canceled$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("editing_canceled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*editing_canceled)(GtkCellRenderer *)
     * }
     */
    public static final AddressLayout editing_canceled$layout() {
        return editing_canceled$LAYOUT;
    }

    private static final long editing_canceled$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*editing_canceled)(GtkCellRenderer *)
     * }
     */
    public static final long editing_canceled$offset() {
        return editing_canceled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*editing_canceled)(GtkCellRenderer *)
     * }
     */
    public static MemorySegment editing_canceled(MemorySegment struct) {
        return struct.get(editing_canceled$LAYOUT, editing_canceled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*editing_canceled)(GtkCellRenderer *)
     * }
     */
    public static void editing_canceled(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(editing_canceled$LAYOUT, editing_canceled$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*editing_started)(GtkCellRenderer *, GtkCellEditable *, const gchar *)
     * }
     */
    public class editing_started {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(editing_started.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(editing_started.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout editing_started$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("editing_started"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*editing_started)(GtkCellRenderer *, GtkCellEditable *, const gchar *)
     * }
     */
    public static final AddressLayout editing_started$layout() {
        return editing_started$LAYOUT;
    }

    private static final long editing_started$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*editing_started)(GtkCellRenderer *, GtkCellEditable *, const gchar *)
     * }
     */
    public static final long editing_started$offset() {
        return editing_started$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*editing_started)(GtkCellRenderer *, GtkCellEditable *, const gchar *)
     * }
     */
    public static MemorySegment editing_started(MemorySegment struct) {
        return struct.get(editing_started$LAYOUT, editing_started$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*editing_started)(GtkCellRenderer *, GtkCellEditable *, const gchar *)
     * }
     */
    public static void editing_started(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(editing_started$LAYOUT, editing_started$OFFSET, fieldValue);
    }

    private static final AddressLayout priv$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("priv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkCellRendererClassPrivate *priv
     * }
     */
    public static final AddressLayout priv$layout() {
        return priv$LAYOUT;
    }

    private static final long priv$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkCellRendererClassPrivate *priv
     * }
     */
    public static final long priv$offset() {
        return priv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkCellRendererClassPrivate *priv
     * }
     */
    public static MemorySegment priv(MemorySegment struct) {
        return struct.get(priv$LAYOUT, priv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkCellRendererClassPrivate *priv
     * }
     */
    public static void priv(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(priv$LAYOUT, priv$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public class _gtk_reserved2 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved2$layout() {
        return _gtk_reserved2$LAYOUT;
    }

    private static final long _gtk_reserved2$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static final long _gtk_reserved2$offset() {
        return _gtk_reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static MemorySegment _gtk_reserved2(MemorySegment struct) {
        return struct.get(_gtk_reserved2$LAYOUT, _gtk_reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static void _gtk_reserved2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved2$LAYOUT, _gtk_reserved2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public class _gtk_reserved3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved3$layout() {
        return _gtk_reserved3$LAYOUT;
    }

    private static final long _gtk_reserved3$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static final long _gtk_reserved3$offset() {
        return _gtk_reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static MemorySegment _gtk_reserved3(MemorySegment struct) {
        return struct.get(_gtk_reserved3$LAYOUT, _gtk_reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static void _gtk_reserved3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved3$LAYOUT, _gtk_reserved3$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public class _gtk_reserved4 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved4.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved4.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved4$layout() {
        return _gtk_reserved4$LAYOUT;
    }

    private static final long _gtk_reserved4$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static final long _gtk_reserved4$offset() {
        return _gtk_reserved4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static MemorySegment _gtk_reserved4(MemorySegment struct) {
        return struct.get(_gtk_reserved4$LAYOUT, _gtk_reserved4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static void _gtk_reserved4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved4$LAYOUT, _gtk_reserved4$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

