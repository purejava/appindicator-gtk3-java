// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _GtkCellAreaClass {
 *     GInitiallyUnownedClass parent_class;
 *     void (*add)(GtkCellArea*,GtkCellRenderer*);
 *     void (*remove)(GtkCellArea*,GtkCellRenderer*);
 *     void (*foreach)(GtkCellArea*,GtkCellCallback,gpointer);
 *     void (*foreach_alloc)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,const GdkRectangle*,const GdkRectangle*,GtkCellAllocCallback,gpointer);
 *     gint (*event)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,GdkEvent*,const GdkRectangle*,GtkCellRendererState);
 *     void (*render)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,cairo_t*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState,gboolean);
 *     void (*apply_attributes)(GtkCellArea*,GtkTreeModel*,GtkTreeIter*,gboolean,gboolean);
 *     GtkCellAreaContext* (*create_context)(GtkCellArea*);
 *     GtkCellAreaContext* (*copy_context)(GtkCellArea*,GtkCellAreaContext*);
 *     GtkSizeRequestMode (*get_request_mode)(GtkCellArea*);
 *     void (*get_preferred_width)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint*,gint*);
 *     void (*get_preferred_height_for_width)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint,gint*,gint*);
 *     void (*get_preferred_height)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint*,gint*);
 *     void (*get_preferred_width_for_height)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint,gint*,gint*);
 *     void (*set_cell_property)(GtkCellArea*,GtkCellRenderer*,guint,const GValue*,GParamSpec*);
 *     void (*get_cell_property)(GtkCellArea*,GtkCellRenderer*,guint,GValue*,GParamSpec*);
 *     gboolean (*focus)(GtkCellArea*,GtkDirectionType);
 *     gboolean (*is_activatable)(GtkCellArea*);
 *     gboolean (*activate)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,const GdkRectangle*,GtkCellRendererState,gboolean);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 * };
 * }
 */
public class _GtkCellAreaClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("add"),
        Constants$root.C_POINTER$LAYOUT.withName("remove"),
        Constants$root.C_POINTER$LAYOUT.withName("foreach"),
        Constants$root.C_POINTER$LAYOUT.withName("foreach_alloc"),
        Constants$root.C_POINTER$LAYOUT.withName("event"),
        Constants$root.C_POINTER$LAYOUT.withName("render"),
        Constants$root.C_POINTER$LAYOUT.withName("apply_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("create_context"),
        Constants$root.C_POINTER$LAYOUT.withName("copy_context"),
        Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_for_width"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width_for_height"),
        Constants$root.C_POINTER$LAYOUT.withName("set_cell_property"),
        Constants$root.C_POINTER$LAYOUT.withName("get_cell_property"),
        Constants$root.C_POINTER$LAYOUT.withName("focus"),
        Constants$root.C_POINTER$LAYOUT.withName("is_activatable"),
        Constants$root.C_POINTER$LAYOUT.withName("activate"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved8")
    ).withName("_GtkCellAreaClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkCellAreaClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor add$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor add_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_UP$MH = RuntimeHelper.upcallHandle(add.class, "apply", _GtkCellAreaClass.add_UP$FUNC);
    static final FunctionDescriptor add_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.add_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*add)(GtkCellArea*,GtkCellRenderer*);
     * }
     */
    public interface add {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(add fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.add_UP$MH, fi, _GtkCellAreaClass.add$FUNC, scope);
        }
        static add ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkCellAreaClass.add_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add"));
    public static VarHandle add$VH() {
        return _GtkCellAreaClass.add$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*add)(GtkCellArea*,GtkCellRenderer*);
     * }
     */
    public static MemorySegment add$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.add$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*add)(GtkCellArea*,GtkCellRenderer*);
     * }
     */
    public static void add$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.add$VH.set(seg, x);
    }
    public static MemorySegment add$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.add$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.add$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add add(MemorySegment segment, SegmentScope scope) {
        return add.ofAddress(add$get(segment), scope);
    }
    static final FunctionDescriptor remove$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor remove_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle remove_UP$MH = RuntimeHelper.upcallHandle(remove.class, "apply", _GtkCellAreaClass.remove_UP$FUNC);
    static final FunctionDescriptor remove_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle remove_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.remove_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*remove)(GtkCellArea*,GtkCellRenderer*);
     * }
     */
    public interface remove {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(remove fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.remove_UP$MH, fi, _GtkCellAreaClass.remove$FUNC, scope);
        }
        static remove ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkCellAreaClass.remove_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove"));
    public static VarHandle remove$VH() {
        return _GtkCellAreaClass.remove$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*remove)(GtkCellArea*,GtkCellRenderer*);
     * }
     */
    public static MemorySegment remove$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.remove$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*remove)(GtkCellArea*,GtkCellRenderer*);
     * }
     */
    public static void remove$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.remove$VH.set(seg, x);
    }
    public static MemorySegment remove$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.remove$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.remove$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove remove(MemorySegment segment, SegmentScope scope) {
        return remove.ofAddress(remove$get(segment), scope);
    }
    static final FunctionDescriptor foreach$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor foreach_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle foreach_UP$MH = RuntimeHelper.upcallHandle(foreach.class, "apply", _GtkCellAreaClass.foreach_UP$FUNC);
    static final FunctionDescriptor foreach_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle foreach_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.foreach_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*foreach)(GtkCellArea*,GtkCellCallback,gpointer);
     * }
     */
    public interface foreach {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(foreach fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.foreach_UP$MH, fi, _GtkCellAreaClass.foreach$FUNC, scope);
        }
        static foreach ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    _GtkCellAreaClass.foreach_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle foreach$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("foreach"));
    public static VarHandle foreach$VH() {
        return _GtkCellAreaClass.foreach$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*foreach)(GtkCellArea*,GtkCellCallback,gpointer);
     * }
     */
    public static MemorySegment foreach$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.foreach$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*foreach)(GtkCellArea*,GtkCellCallback,gpointer);
     * }
     */
    public static void foreach$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.foreach$VH.set(seg, x);
    }
    public static MemorySegment foreach$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.foreach$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void foreach$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.foreach$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static foreach foreach(MemorySegment segment, SegmentScope scope) {
        return foreach.ofAddress(foreach$get(segment), scope);
    }
    static final FunctionDescriptor foreach_alloc$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor foreach_alloc_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle foreach_alloc_UP$MH = RuntimeHelper.upcallHandle(foreach_alloc.class, "apply", _GtkCellAreaClass.foreach_alloc_UP$FUNC);
    static final FunctionDescriptor foreach_alloc_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle foreach_alloc_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.foreach_alloc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*foreach_alloc)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,const GdkRectangle*,const GdkRectangle*,GtkCellAllocCallback,gpointer);
     * }
     */
    public interface foreach_alloc {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(foreach_alloc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.foreach_alloc_UP$MH, fi, _GtkCellAreaClass.foreach_alloc$FUNC, scope);
        }
        static foreach_alloc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    _GtkCellAreaClass.foreach_alloc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle foreach_alloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("foreach_alloc"));
    public static VarHandle foreach_alloc$VH() {
        return _GtkCellAreaClass.foreach_alloc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*foreach_alloc)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,const GdkRectangle*,const GdkRectangle*,GtkCellAllocCallback,gpointer);
     * }
     */
    public static MemorySegment foreach_alloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.foreach_alloc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*foreach_alloc)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,const GdkRectangle*,const GdkRectangle*,GtkCellAllocCallback,gpointer);
     * }
     */
    public static void foreach_alloc$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.foreach_alloc$VH.set(seg, x);
    }
    public static MemorySegment foreach_alloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.foreach_alloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void foreach_alloc$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.foreach_alloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static foreach_alloc foreach_alloc(MemorySegment segment, SegmentScope scope) {
        return foreach_alloc.ofAddress(foreach_alloc$get(segment), scope);
    }
    static final FunctionDescriptor event$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor event_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle event_UP$MH = RuntimeHelper.upcallHandle(event.class, "apply", _GtkCellAreaClass.event_UP$FUNC);
    static final FunctionDescriptor event_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle event_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.event_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*event)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,GdkEvent*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public interface event {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(event fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.event_UP$MH, fi, _GtkCellAreaClass.event$FUNC, scope);
        }
        static event ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    return (int)_GtkCellAreaClass.event_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle event$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("event"));
    public static VarHandle event$VH() {
        return _GtkCellAreaClass.event$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*event)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,GdkEvent*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public static MemorySegment event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.event$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*event)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,GdkEvent*,const GdkRectangle*,GtkCellRendererState);
     * }
     */
    public static void event$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.event$VH.set(seg, x);
    }
    public static MemorySegment event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void event$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static event event(MemorySegment segment, SegmentScope scope) {
        return event.ofAddress(event$get(segment), scope);
    }
    static final FunctionDescriptor render$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor render_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle render_UP$MH = RuntimeHelper.upcallHandle(render.class, "apply", _GtkCellAreaClass.render_UP$FUNC);
    static final FunctionDescriptor render_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle render_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.render_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*render)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,cairo_t*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState,gboolean);
     * }
     */
    public interface render {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7);
        static MemorySegment allocate(render fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.render_UP$MH, fi, _GtkCellAreaClass.render$FUNC, scope);
        }
        static render ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7) -> {
                try {
                    _GtkCellAreaClass.render_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render"));
    public static VarHandle render$VH() {
        return _GtkCellAreaClass.render$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*render)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,cairo_t*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState,gboolean);
     * }
     */
    public static MemorySegment render$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.render$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*render)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,cairo_t*,const GdkRectangle*,const GdkRectangle*,GtkCellRendererState,gboolean);
     * }
     */
    public static void render$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.render$VH.set(seg, x);
    }
    public static MemorySegment render$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.render$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.render$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render render(MemorySegment segment, SegmentScope scope) {
        return render.ofAddress(render$get(segment), scope);
    }
    static final FunctionDescriptor apply_attributes$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor apply_attributes_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle apply_attributes_UP$MH = RuntimeHelper.upcallHandle(apply_attributes.class, "apply", _GtkCellAreaClass.apply_attributes_UP$FUNC);
    static final FunctionDescriptor apply_attributes_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle apply_attributes_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.apply_attributes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*apply_attributes)(GtkCellArea*,GtkTreeModel*,GtkTreeIter*,gboolean,gboolean);
     * }
     */
    public interface apply_attributes {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4);
        static MemorySegment allocate(apply_attributes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.apply_attributes_UP$MH, fi, _GtkCellAreaClass.apply_attributes$FUNC, scope);
        }
        static apply_attributes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4) -> {
                try {
                    _GtkCellAreaClass.apply_attributes_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle apply_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("apply_attributes"));
    public static VarHandle apply_attributes$VH() {
        return _GtkCellAreaClass.apply_attributes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*apply_attributes)(GtkCellArea*,GtkTreeModel*,GtkTreeIter*,gboolean,gboolean);
     * }
     */
    public static MemorySegment apply_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.apply_attributes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*apply_attributes)(GtkCellArea*,GtkTreeModel*,GtkTreeIter*,gboolean,gboolean);
     * }
     */
    public static void apply_attributes$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.apply_attributes$VH.set(seg, x);
    }
    public static MemorySegment apply_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.apply_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void apply_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.apply_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static apply_attributes apply_attributes(MemorySegment segment, SegmentScope scope) {
        return apply_attributes.ofAddress(apply_attributes$get(segment), scope);
    }
    static final FunctionDescriptor create_context$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor create_context_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_context_UP$MH = RuntimeHelper.upcallHandle(create_context.class, "apply", _GtkCellAreaClass.create_context_UP$FUNC);
    static final FunctionDescriptor create_context_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_context_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.create_context_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GtkCellAreaContext* (*create_context)(GtkCellArea*);
     * }
     */
    public interface create_context {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(create_context fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.create_context_UP$MH, fi, _GtkCellAreaClass.create_context$FUNC, scope);
        }
        static create_context ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.create_context_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_context$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_context"));
    public static VarHandle create_context$VH() {
        return _GtkCellAreaClass.create_context$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkCellAreaContext* (*create_context)(GtkCellArea*);
     * }
     */
    public static MemorySegment create_context$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.create_context$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkCellAreaContext* (*create_context)(GtkCellArea*);
     * }
     */
    public static void create_context$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.create_context$VH.set(seg, x);
    }
    public static MemorySegment create_context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.create_context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_context$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.create_context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_context create_context(MemorySegment segment, SegmentScope scope) {
        return create_context.ofAddress(create_context$get(segment), scope);
    }
    static final FunctionDescriptor copy_context$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor copy_context_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle copy_context_UP$MH = RuntimeHelper.upcallHandle(copy_context.class, "apply", _GtkCellAreaClass.copy_context_UP$FUNC);
    static final FunctionDescriptor copy_context_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle copy_context_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.copy_context_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GtkCellAreaContext* (*copy_context)(GtkCellArea*,GtkCellAreaContext*);
     * }
     */
    public interface copy_context {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(copy_context fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.copy_context_UP$MH, fi, _GtkCellAreaClass.copy_context$FUNC, scope);
        }
        static copy_context ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.copy_context_DOWN$MH.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle copy_context$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("copy_context"));
    public static VarHandle copy_context$VH() {
        return _GtkCellAreaClass.copy_context$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkCellAreaContext* (*copy_context)(GtkCellArea*,GtkCellAreaContext*);
     * }
     */
    public static MemorySegment copy_context$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.copy_context$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkCellAreaContext* (*copy_context)(GtkCellArea*,GtkCellAreaContext*);
     * }
     */
    public static void copy_context$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.copy_context$VH.set(seg, x);
    }
    public static MemorySegment copy_context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.copy_context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_context$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.copy_context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_context copy_context(MemorySegment segment, SegmentScope scope) {
        return copy_context.ofAddress(copy_context$get(segment), scope);
    }
    static final FunctionDescriptor get_request_mode$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_request_mode_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_request_mode_UP$MH = RuntimeHelper.upcallHandle(get_request_mode.class, "apply", _GtkCellAreaClass.get_request_mode_UP$FUNC);
    static final FunctionDescriptor get_request_mode_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_request_mode_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_request_mode_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GtkSizeRequestMode (*get_request_mode)(GtkCellArea*);
     * }
     */
    public interface get_request_mode {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_request_mode fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.get_request_mode_UP$MH, fi, _GtkCellAreaClass.get_request_mode$FUNC, scope);
        }
        static get_request_mode ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GtkCellAreaClass.get_request_mode_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_request_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_request_mode"));
    public static VarHandle get_request_mode$VH() {
        return _GtkCellAreaClass.get_request_mode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GtkSizeRequestMode (*get_request_mode)(GtkCellArea*);
     * }
     */
    public static MemorySegment get_request_mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_request_mode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GtkSizeRequestMode (*get_request_mode)(GtkCellArea*);
     * }
     */
    public static void get_request_mode$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.get_request_mode$VH.set(seg, x);
    }
    public static MemorySegment get_request_mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_request_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_request_mode$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.get_request_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_request_mode get_request_mode(MemorySegment segment, SegmentScope scope) {
        return get_request_mode.ofAddress(get_request_mode$get(segment), scope);
    }
    static final FunctionDescriptor get_preferred_width$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_preferred_width_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width_UP$MH = RuntimeHelper.upcallHandle(get_preferred_width.class, "apply", _GtkCellAreaClass.get_preferred_width_UP$FUNC);
    static final FunctionDescriptor get_preferred_width_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_preferred_width_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_preferred_width)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint*,gint*);
     * }
     */
    public interface get_preferred_width {

        void apply(java.lang.foreign.MemorySegment cell_layout, java.lang.foreign.MemorySegment cell, java.lang.foreign.MemorySegment tree_model, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_preferred_width fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.get_preferred_width_UP$MH, fi, _GtkCellAreaClass.get_preferred_width$FUNC, scope);
        }
        static get_preferred_width ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _cell_layout, java.lang.foreign.MemorySegment _cell, java.lang.foreign.MemorySegment _tree_model, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkCellAreaClass.get_preferred_width_DOWN$MH.invokeExact(symbol, _cell_layout, _cell, _tree_model, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_width"));
    public static VarHandle get_preferred_width$VH() {
        return _GtkCellAreaClass.get_preferred_width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_width)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint*,gint*);
     * }
     */
    public static MemorySegment get_preferred_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_preferred_width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_width)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint*,gint*);
     * }
     */
    public static void get_preferred_width$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.get_preferred_width$VH.set(seg, x);
    }
    public static MemorySegment get_preferred_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_preferred_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.get_preferred_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width get_preferred_width(MemorySegment segment, SegmentScope scope) {
        return get_preferred_width.ofAddress(get_preferred_width$get(segment), scope);
    }
    static final FunctionDescriptor get_preferred_height_for_width$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_preferred_height_for_width_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height_for_width_UP$MH = RuntimeHelper.upcallHandle(get_preferred_height_for_width.class, "apply", _GtkCellAreaClass.get_preferred_height_for_width_UP$FUNC);
    static final FunctionDescriptor get_preferred_height_for_width_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height_for_width_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_preferred_height_for_width_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_preferred_height_for_width)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint,gint*,gint*);
     * }
     */
    public interface get_preferred_height_for_width {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(get_preferred_height_for_width fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.get_preferred_height_for_width_UP$MH, fi, _GtkCellAreaClass.get_preferred_height_for_width$FUNC, scope);
        }
        static get_preferred_height_for_width ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    _GtkCellAreaClass.get_preferred_height_for_width_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_height_for_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_height_for_width"));
    public static VarHandle get_preferred_height_for_width$VH() {
        return _GtkCellAreaClass.get_preferred_height_for_width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_height_for_width)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint,gint*,gint*);
     * }
     */
    public static MemorySegment get_preferred_height_for_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_preferred_height_for_width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_height_for_width)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint,gint*,gint*);
     * }
     */
    public static void get_preferred_height_for_width$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.get_preferred_height_for_width$VH.set(seg, x);
    }
    public static MemorySegment get_preferred_height_for_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_preferred_height_for_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height_for_width$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.get_preferred_height_for_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height_for_width get_preferred_height_for_width(MemorySegment segment, SegmentScope scope) {
        return get_preferred_height_for_width.ofAddress(get_preferred_height_for_width$get(segment), scope);
    }
    static final FunctionDescriptor get_preferred_height$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_preferred_height_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height_UP$MH = RuntimeHelper.upcallHandle(get_preferred_height.class, "apply", _GtkCellAreaClass.get_preferred_height_UP$FUNC);
    static final FunctionDescriptor get_preferred_height_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_height_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_preferred_height_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_preferred_height)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint*,gint*);
     * }
     */
    public interface get_preferred_height {

        void apply(java.lang.foreign.MemorySegment cell_layout, java.lang.foreign.MemorySegment cell, java.lang.foreign.MemorySegment tree_model, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_preferred_height fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.get_preferred_height_UP$MH, fi, _GtkCellAreaClass.get_preferred_height$FUNC, scope);
        }
        static get_preferred_height ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _cell_layout, java.lang.foreign.MemorySegment _cell, java.lang.foreign.MemorySegment _tree_model, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkCellAreaClass.get_preferred_height_DOWN$MH.invokeExact(symbol, _cell_layout, _cell, _tree_model, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_height"));
    public static VarHandle get_preferred_height$VH() {
        return _GtkCellAreaClass.get_preferred_height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_height)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint*,gint*);
     * }
     */
    public static MemorySegment get_preferred_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_preferred_height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_height)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint*,gint*);
     * }
     */
    public static void get_preferred_height$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.get_preferred_height$VH.set(seg, x);
    }
    public static MemorySegment get_preferred_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_preferred_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.get_preferred_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height get_preferred_height(MemorySegment segment, SegmentScope scope) {
        return get_preferred_height.ofAddress(get_preferred_height$get(segment), scope);
    }
    static final FunctionDescriptor get_preferred_width_for_height$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_preferred_width_for_height_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width_for_height_UP$MH = RuntimeHelper.upcallHandle(get_preferred_width_for_height.class, "apply", _GtkCellAreaClass.get_preferred_width_for_height_UP$FUNC);
    static final FunctionDescriptor get_preferred_width_for_height_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preferred_width_for_height_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_preferred_width_for_height_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_preferred_width_for_height)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint,gint*,gint*);
     * }
     */
    public interface get_preferred_width_for_height {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(get_preferred_width_for_height fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.get_preferred_width_for_height_UP$MH, fi, _GtkCellAreaClass.get_preferred_width_for_height$FUNC, scope);
        }
        static get_preferred_width_for_height ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    _GtkCellAreaClass.get_preferred_width_for_height_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preferred_width_for_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preferred_width_for_height"));
    public static VarHandle get_preferred_width_for_height$VH() {
        return _GtkCellAreaClass.get_preferred_width_for_height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_width_for_height)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint,gint*,gint*);
     * }
     */
    public static MemorySegment get_preferred_width_for_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_preferred_width_for_height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_width_for_height)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,gint,gint*,gint*);
     * }
     */
    public static void get_preferred_width_for_height$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.get_preferred_width_for_height$VH.set(seg, x);
    }
    public static MemorySegment get_preferred_width_for_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_preferred_width_for_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width_for_height$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.get_preferred_width_for_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width_for_height get_preferred_width_for_height(MemorySegment segment, SegmentScope scope) {
        return get_preferred_width_for_height.ofAddress(get_preferred_width_for_height$get(segment), scope);
    }
    static final FunctionDescriptor set_cell_property$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_cell_property_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_cell_property_UP$MH = RuntimeHelper.upcallHandle(set_cell_property.class, "apply", _GtkCellAreaClass.set_cell_property_UP$FUNC);
    static final FunctionDescriptor set_cell_property_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_cell_property_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.set_cell_property_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_cell_property)(GtkCellArea*,GtkCellRenderer*,guint,const GValue*,GParamSpec*);
     * }
     */
    public interface set_cell_property {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(set_cell_property fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.set_cell_property_UP$MH, fi, _GtkCellAreaClass.set_cell_property$FUNC, scope);
        }
        static set_cell_property ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    _GtkCellAreaClass.set_cell_property_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_cell_property$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_cell_property"));
    public static VarHandle set_cell_property$VH() {
        return _GtkCellAreaClass.set_cell_property$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_cell_property)(GtkCellArea*,GtkCellRenderer*,guint,const GValue*,GParamSpec*);
     * }
     */
    public static MemorySegment set_cell_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.set_cell_property$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_cell_property)(GtkCellArea*,GtkCellRenderer*,guint,const GValue*,GParamSpec*);
     * }
     */
    public static void set_cell_property$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.set_cell_property$VH.set(seg, x);
    }
    public static MemorySegment set_cell_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.set_cell_property$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_cell_property$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.set_cell_property$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_cell_property set_cell_property(MemorySegment segment, SegmentScope scope) {
        return set_cell_property.ofAddress(set_cell_property$get(segment), scope);
    }
    static final FunctionDescriptor get_cell_property$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_cell_property_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_cell_property_UP$MH = RuntimeHelper.upcallHandle(get_cell_property.class, "apply", _GtkCellAreaClass.get_cell_property_UP$FUNC);
    static final FunctionDescriptor get_cell_property_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_cell_property_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.get_cell_property_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_cell_property)(GtkCellArea*,GtkCellRenderer*,guint,GValue*,GParamSpec*);
     * }
     */
    public interface get_cell_property {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(get_cell_property fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.get_cell_property_UP$MH, fi, _GtkCellAreaClass.get_cell_property$FUNC, scope);
        }
        static get_cell_property ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    _GtkCellAreaClass.get_cell_property_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_cell_property$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_cell_property"));
    public static VarHandle get_cell_property$VH() {
        return _GtkCellAreaClass.get_cell_property$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_cell_property)(GtkCellArea*,GtkCellRenderer*,guint,GValue*,GParamSpec*);
     * }
     */
    public static MemorySegment get_cell_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_cell_property$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_cell_property)(GtkCellArea*,GtkCellRenderer*,guint,GValue*,GParamSpec*);
     * }
     */
    public static void get_cell_property$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.get_cell_property$VH.set(seg, x);
    }
    public static MemorySegment get_cell_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.get_cell_property$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_cell_property$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.get_cell_property$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_cell_property get_cell_property(MemorySegment segment, SegmentScope scope) {
        return get_cell_property.ofAddress(get_cell_property$get(segment), scope);
    }
    static final FunctionDescriptor focus$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor focus_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle focus_UP$MH = RuntimeHelper.upcallHandle(focus.class, "apply", _GtkCellAreaClass.focus_UP$FUNC);
    static final FunctionDescriptor focus_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle focus_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.focus_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*focus)(GtkCellArea*,GtkDirectionType);
     * }
     */
    public interface focus {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(focus fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.focus_UP$MH, fi, _GtkCellAreaClass.focus$FUNC, scope);
        }
        static focus ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_GtkCellAreaClass.focus_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle focus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("focus"));
    public static VarHandle focus$VH() {
        return _GtkCellAreaClass.focus$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*focus)(GtkCellArea*,GtkDirectionType);
     * }
     */
    public static MemorySegment focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.focus$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*focus)(GtkCellArea*,GtkDirectionType);
     * }
     */
    public static void focus$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.focus$VH.set(seg, x);
    }
    public static MemorySegment focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.focus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void focus$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.focus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus focus(MemorySegment segment, SegmentScope scope) {
        return focus.ofAddress(focus$get(segment), scope);
    }
    static final FunctionDescriptor is_activatable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor is_activatable_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_activatable_UP$MH = RuntimeHelper.upcallHandle(is_activatable.class, "apply", _GtkCellAreaClass.is_activatable_UP$FUNC);
    static final FunctionDescriptor is_activatable_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_activatable_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.is_activatable_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*is_activatable)(GtkCellArea*);
     * }
     */
    public interface is_activatable {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(is_activatable fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.is_activatable_UP$MH, fi, _GtkCellAreaClass.is_activatable$FUNC, scope);
        }
        static is_activatable ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GtkCellAreaClass.is_activatable_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_activatable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_activatable"));
    public static VarHandle is_activatable$VH() {
        return _GtkCellAreaClass.is_activatable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*is_activatable)(GtkCellArea*);
     * }
     */
    public static MemorySegment is_activatable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.is_activatable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*is_activatable)(GtkCellArea*);
     * }
     */
    public static void is_activatable$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.is_activatable$VH.set(seg, x);
    }
    public static MemorySegment is_activatable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.is_activatable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_activatable$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.is_activatable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_activatable is_activatable(MemorySegment segment, SegmentScope scope) {
        return is_activatable.ofAddress(is_activatable$get(segment), scope);
    }
    static final FunctionDescriptor activate$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor activate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle activate_UP$MH = RuntimeHelper.upcallHandle(activate.class, "apply", _GtkCellAreaClass.activate_UP$FUNC);
    static final FunctionDescriptor activate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle activate_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass.activate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*activate)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,const GdkRectangle*,GtkCellRendererState,gboolean);
     * }
     */
    public interface activate {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5);
        static MemorySegment allocate(activate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass.activate_UP$MH, fi, _GtkCellAreaClass.activate$FUNC, scope);
        }
        static activate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5) -> {
                try {
                    return (int)_GtkCellAreaClass.activate_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate"));
    public static VarHandle activate$VH() {
        return _GtkCellAreaClass.activate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*activate)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,const GdkRectangle*,GtkCellRendererState,gboolean);
     * }
     */
    public static MemorySegment activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.activate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*activate)(GtkCellArea*,GtkCellAreaContext*,GtkWidget*,const GdkRectangle*,GtkCellRendererState,gboolean);
     * }
     */
    public static void activate$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass.activate$VH.set(seg, x);
    }
    public static MemorySegment activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass.activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass.activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate(MemorySegment segment, SegmentScope scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved1_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved1.class, "apply", _GtkCellAreaClass._gtk_reserved1_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved1_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass._gtk_reserved1_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass._gtk_reserved1_UP$MH, fi, _GtkCellAreaClass._gtk_reserved1$FUNC, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkCellAreaClass._gtk_reserved1_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkCellAreaClass._gtk_reserved1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved2_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved2.class, "apply", _GtkCellAreaClass._gtk_reserved2_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved2_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass._gtk_reserved2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass._gtk_reserved2_UP$MH, fi, _GtkCellAreaClass._gtk_reserved2$FUNC, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkCellAreaClass._gtk_reserved2_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkCellAreaClass._gtk_reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved3_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved3.class, "apply", _GtkCellAreaClass._gtk_reserved3_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved3_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass._gtk_reserved3_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass._gtk_reserved3_UP$MH, fi, _GtkCellAreaClass._gtk_reserved3$FUNC, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkCellAreaClass._gtk_reserved3_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkCellAreaClass._gtk_reserved3$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved3$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved4_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved4.class, "apply", _GtkCellAreaClass._gtk_reserved4_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved4_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass._gtk_reserved4_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass._gtk_reserved4_UP$MH, fi, _GtkCellAreaClass._gtk_reserved4$FUNC, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkCellAreaClass._gtk_reserved4_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkCellAreaClass._gtk_reserved4$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved4$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved5_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved5.class, "apply", _GtkCellAreaClass._gtk_reserved5_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved5_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass._gtk_reserved5_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass._gtk_reserved5_UP$MH, fi, _GtkCellAreaClass._gtk_reserved5$FUNC, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkCellAreaClass._gtk_reserved5_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved5"));
    public static VarHandle _gtk_reserved5$VH() {
        return _GtkCellAreaClass._gtk_reserved5$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved5$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved5$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved6_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved6.class, "apply", _GtkCellAreaClass._gtk_reserved6_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved6_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass._gtk_reserved6_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass._gtk_reserved6_UP$MH, fi, _GtkCellAreaClass._gtk_reserved6$FUNC, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkCellAreaClass._gtk_reserved6_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved6"));
    public static VarHandle _gtk_reserved6$VH() {
        return _GtkCellAreaClass._gtk_reserved6$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved6$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved6$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved7$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved7_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved7_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved7.class, "apply", _GtkCellAreaClass._gtk_reserved7_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved7_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved7_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass._gtk_reserved7_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass._gtk_reserved7_UP$MH, fi, _GtkCellAreaClass._gtk_reserved7$FUNC, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkCellAreaClass._gtk_reserved7_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved7$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved7"));
    public static VarHandle _gtk_reserved7$VH() {
        return _GtkCellAreaClass._gtk_reserved7$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved7$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved7$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved7$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved7$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved8$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved8_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved8_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved8.class, "apply", _GtkCellAreaClass._gtk_reserved8_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved8_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved8_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkCellAreaClass._gtk_reserved8_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkCellAreaClass._gtk_reserved8_UP$MH, fi, _GtkCellAreaClass._gtk_reserved8$FUNC, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkCellAreaClass._gtk_reserved8_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved8$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved8"));
    public static VarHandle _gtk_reserved8$VH() {
        return _GtkCellAreaClass._gtk_reserved8$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved8$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved8$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkCellAreaClass._gtk_reserved8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkCellAreaClass._gtk_reserved8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


