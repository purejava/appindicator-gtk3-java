// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkTableRowCol {
 *     unsigned short requisition;
 *     unsigned short allocation;
 *     unsigned short spacing;
 *      *     unsigned int need_expand;
 *     unsigned int need_shrink;
 *     unsigned int expand;
 *     unsigned int shrink;
 *     unsigned int empty;
 * };
 * }
 */
public class _GtkTableRowCol {

    public static MemoryLayout $LAYOUT() {
        return constants$3378.const$3;
    }
    public static VarHandle requisition$VH() {
        return constants$3378.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short requisition;
     * }
     */
    public static short requisition$get(MemorySegment seg) {
        return (short)constants$3378.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short requisition;
     * }
     */
    public static void requisition$set(MemorySegment seg, short x) {
        constants$3378.const$4.set(seg, x);
    }
    public static short requisition$get(MemorySegment seg, long index) {
        return (short)constants$3378.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void requisition$set(MemorySegment seg, long index, short x) {
        constants$3378.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle allocation$VH() {
        return constants$3378.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short allocation;
     * }
     */
    public static short allocation$get(MemorySegment seg) {
        return (short)constants$3378.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short allocation;
     * }
     */
    public static void allocation$set(MemorySegment seg, short x) {
        constants$3378.const$5.set(seg, x);
    }
    public static short allocation$get(MemorySegment seg, long index) {
        return (short)constants$3378.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void allocation$set(MemorySegment seg, long index, short x) {
        constants$3378.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle spacing$VH() {
        return constants$3379.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short spacing;
     * }
     */
    public static short spacing$get(MemorySegment seg) {
        return (short)constants$3379.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short spacing;
     * }
     */
    public static void spacing$set(MemorySegment seg, short x) {
        constants$3379.const$0.set(seg, x);
    }
    public static short spacing$get(MemorySegment seg, long index) {
        return (short)constants$3379.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void spacing$set(MemorySegment seg, long index, short x) {
        constants$3379.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


