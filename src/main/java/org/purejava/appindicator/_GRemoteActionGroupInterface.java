// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GRemoteActionGroupInterface {
 *     struct _GTypeInterface g_iface;
 *     void (*activate_action_full)(struct _GRemoteActionGroup*,char*,struct _GVariant*,struct _GVariant*);
 *     void (*change_action_state_full)(struct _GRemoteActionGroup*,char*,struct _GVariant*,struct _GVariant*);
 * };
 * }
 */
public class _GRemoteActionGroupInterface {

    public static MemoryLayout $LAYOUT() {
        return constants$1229.const$0;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*activate_action_full)(struct _GRemoteActionGroup*,char*,struct _GVariant*,struct _GVariant*);
     * }
     */
    public interface activate_action_full {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(activate_action_full fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1229.const$1, fi, constants$42.const$1, scope);
        }
        static activate_action_full ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$259.const$4.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle activate_action_full$VH() {
        return constants$1229.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*activate_action_full)(struct _GRemoteActionGroup*,char*,struct _GVariant*,struct _GVariant*);
     * }
     */
    public static MemorySegment activate_action_full$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1229.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*activate_action_full)(struct _GRemoteActionGroup*,char*,struct _GVariant*,struct _GVariant*);
     * }
     */
    public static void activate_action_full$set(MemorySegment seg, MemorySegment x) {
        constants$1229.const$2.set(seg, x);
    }
    public static MemorySegment activate_action_full$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1229.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void activate_action_full$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1229.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate_action_full activate_action_full(MemorySegment segment, Arena scope) {
        return activate_action_full.ofAddress(activate_action_full$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*change_action_state_full)(struct _GRemoteActionGroup*,char*,struct _GVariant*,struct _GVariant*);
     * }
     */
    public interface change_action_state_full {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(change_action_state_full fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1229.const$3, fi, constants$42.const$1, scope);
        }
        static change_action_state_full ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$259.const$4.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle change_action_state_full$VH() {
        return constants$1229.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*change_action_state_full)(struct _GRemoteActionGroup*,char*,struct _GVariant*,struct _GVariant*);
     * }
     */
    public static MemorySegment change_action_state_full$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1229.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*change_action_state_full)(struct _GRemoteActionGroup*,char*,struct _GVariant*,struct _GVariant*);
     * }
     */
    public static void change_action_state_full$set(MemorySegment seg, MemorySegment x) {
        constants$1229.const$4.set(seg, x);
    }
    public static MemorySegment change_action_state_full$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1229.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void change_action_state_full$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1229.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static change_action_state_full change_action_state_full(MemorySegment segment, Arena scope) {
        return change_action_state_full.ofAddress(change_action_state_full$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


