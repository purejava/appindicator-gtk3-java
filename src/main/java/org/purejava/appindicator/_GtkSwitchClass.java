// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkSwitchClass {
 *     GtkWidgetClass parent_class;
 *     void (*activate)(GtkSwitch *);
 *     gboolean (*state_set)(GtkSwitch *, gboolean);
 *     void (*_switch_padding_1)(void);
 *     void (*_switch_padding_2)(void);
 *     void (*_switch_padding_3)(void);
 *     void (*_switch_padding_4)(void);
 *     void (*_switch_padding_5)(void);
 * }
 * }
 */
public class _GtkSwitchClass {

    _GtkSwitchClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GtkWidgetClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("activate"),
        app_indicator_h.C_POINTER.withName("state_set"),
        app_indicator_h.C_POINTER.withName("_switch_padding_1"),
        app_indicator_h.C_POINTER.withName("_switch_padding_2"),
        app_indicator_h.C_POINTER.withName("_switch_padding_3"),
        app_indicator_h.C_POINTER.withName("_switch_padding_4"),
        app_indicator_h.C_POINTER.withName("_switch_padding_5")
    ).withName("_GtkSwitchClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkWidgetClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkWidgetClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkWidgetClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkWidgetClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*activate)(GtkSwitch *)
     * }
     */
    public class activate {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(activate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(activate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout activate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("activate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*activate)(GtkSwitch *)
     * }
     */
    public static final AddressLayout activate$layout() {
        return activate$LAYOUT;
    }

    private static final long activate$OFFSET = 824;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*activate)(GtkSwitch *)
     * }
     */
    public static final long activate$offset() {
        return activate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*activate)(GtkSwitch *)
     * }
     */
    public static MemorySegment activate(MemorySegment struct) {
        return struct.get(activate$LAYOUT, activate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*activate)(GtkSwitch *)
     * }
     */
    public static void activate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(activate$LAYOUT, activate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*state_set)(GtkSwitch *, gboolean)
     * }
     */
    public class state_set {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(state_set.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(state_set.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout state_set$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("state_set"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*state_set)(GtkSwitch *, gboolean)
     * }
     */
    public static final AddressLayout state_set$layout() {
        return state_set$LAYOUT;
    }

    private static final long state_set$OFFSET = 832;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*state_set)(GtkSwitch *, gboolean)
     * }
     */
    public static final long state_set$offset() {
        return state_set$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*state_set)(GtkSwitch *, gboolean)
     * }
     */
    public static MemorySegment state_set(MemorySegment struct) {
        return struct.get(state_set$LAYOUT, state_set$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*state_set)(GtkSwitch *, gboolean)
     * }
     */
    public static void state_set(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(state_set$LAYOUT, state_set$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_switch_padding_1)(void)
     * }
     */
    public class _switch_padding_1 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_switch_padding_1.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_switch_padding_1.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _switch_padding_1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_switch_padding_1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_switch_padding_1)(void)
     * }
     */
    public static final AddressLayout _switch_padding_1$layout() {
        return _switch_padding_1$LAYOUT;
    }

    private static final long _switch_padding_1$OFFSET = 840;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_switch_padding_1)(void)
     * }
     */
    public static final long _switch_padding_1$offset() {
        return _switch_padding_1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_switch_padding_1)(void)
     * }
     */
    public static MemorySegment _switch_padding_1(MemorySegment struct) {
        return struct.get(_switch_padding_1$LAYOUT, _switch_padding_1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_switch_padding_1)(void)
     * }
     */
    public static void _switch_padding_1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_switch_padding_1$LAYOUT, _switch_padding_1$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_switch_padding_2)(void)
     * }
     */
    public class _switch_padding_2 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_switch_padding_2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_switch_padding_2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _switch_padding_2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_switch_padding_2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_switch_padding_2)(void)
     * }
     */
    public static final AddressLayout _switch_padding_2$layout() {
        return _switch_padding_2$LAYOUT;
    }

    private static final long _switch_padding_2$OFFSET = 848;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_switch_padding_2)(void)
     * }
     */
    public static final long _switch_padding_2$offset() {
        return _switch_padding_2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_switch_padding_2)(void)
     * }
     */
    public static MemorySegment _switch_padding_2(MemorySegment struct) {
        return struct.get(_switch_padding_2$LAYOUT, _switch_padding_2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_switch_padding_2)(void)
     * }
     */
    public static void _switch_padding_2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_switch_padding_2$LAYOUT, _switch_padding_2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_switch_padding_3)(void)
     * }
     */
    public class _switch_padding_3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_switch_padding_3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_switch_padding_3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _switch_padding_3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_switch_padding_3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_switch_padding_3)(void)
     * }
     */
    public static final AddressLayout _switch_padding_3$layout() {
        return _switch_padding_3$LAYOUT;
    }

    private static final long _switch_padding_3$OFFSET = 856;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_switch_padding_3)(void)
     * }
     */
    public static final long _switch_padding_3$offset() {
        return _switch_padding_3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_switch_padding_3)(void)
     * }
     */
    public static MemorySegment _switch_padding_3(MemorySegment struct) {
        return struct.get(_switch_padding_3$LAYOUT, _switch_padding_3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_switch_padding_3)(void)
     * }
     */
    public static void _switch_padding_3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_switch_padding_3$LAYOUT, _switch_padding_3$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_switch_padding_4)(void)
     * }
     */
    public class _switch_padding_4 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_switch_padding_4.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_switch_padding_4.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _switch_padding_4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_switch_padding_4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_switch_padding_4)(void)
     * }
     */
    public static final AddressLayout _switch_padding_4$layout() {
        return _switch_padding_4$LAYOUT;
    }

    private static final long _switch_padding_4$OFFSET = 864;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_switch_padding_4)(void)
     * }
     */
    public static final long _switch_padding_4$offset() {
        return _switch_padding_4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_switch_padding_4)(void)
     * }
     */
    public static MemorySegment _switch_padding_4(MemorySegment struct) {
        return struct.get(_switch_padding_4$LAYOUT, _switch_padding_4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_switch_padding_4)(void)
     * }
     */
    public static void _switch_padding_4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_switch_padding_4$LAYOUT, _switch_padding_4$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_switch_padding_5)(void)
     * }
     */
    public class _switch_padding_5 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_switch_padding_5.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_switch_padding_5.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _switch_padding_5$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_switch_padding_5"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_switch_padding_5)(void)
     * }
     */
    public static final AddressLayout _switch_padding_5$layout() {
        return _switch_padding_5$LAYOUT;
    }

    private static final long _switch_padding_5$OFFSET = 872;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_switch_padding_5)(void)
     * }
     */
    public static final long _switch_padding_5$offset() {
        return _switch_padding_5$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_switch_padding_5)(void)
     * }
     */
    public static MemorySegment _switch_padding_5(MemorySegment struct) {
        return struct.get(_switch_padding_5$LAYOUT, _switch_padding_5$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_switch_padding_5)(void)
     * }
     */
    public static void _switch_padding_5(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_switch_padding_5$LAYOUT, _switch_padding_5$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

