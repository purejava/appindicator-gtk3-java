// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GOutputStreamClass {
 *     struct _GObjectClass parent_class;
 *     long (*write_fn)(struct _GOutputStream*,void*,unsigned long,struct _GCancellable*,struct _GError**);
 *     long (*splice)(struct _GOutputStream*,struct _GInputStream*,enum GOutputStreamSpliceFlags,struct _GCancellable*,struct _GError**);
 *     int (*flush)(struct _GOutputStream*,struct _GCancellable*,struct _GError**);
 *     int (*close_fn)(struct _GOutputStream*,struct _GCancellable*,struct _GError**);
 *     void (*write_async)(struct _GOutputStream*,void*,unsigned long,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     long (*write_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
 *     void (*splice_async)(struct _GOutputStream*,struct _GInputStream*,enum GOutputStreamSpliceFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     long (*splice_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
 *     void (*flush_async)(struct _GOutputStream*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*flush_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
 *     void (*close_async)(struct _GOutputStream*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*close_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
 *     int (*writev_fn)(struct _GOutputStream*,struct _GOutputVector*,unsigned long,unsigned long*,struct _GCancellable*,struct _GError**);
 *     void (*writev_async)(struct _GOutputStream*,struct _GOutputVector*,unsigned long,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*writev_finish)(struct _GOutputStream*,struct _GAsyncResult*,unsigned long*,struct _GError**);
 *     void (*_g_reserved4)();
 *     void (*_g_reserved5)();
 *     void (*_g_reserved6)();
 *     void (*_g_reserved7)();
 *     void (*_g_reserved8)();
 * };
 * }
 */
public class _GOutputStreamClass {

    public static MemoryLayout $LAYOUT() {
        return constants$778.const$0;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * long (*write_fn)(struct _GOutputStream*,void*,unsigned long,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface write_fn {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(write_fn fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$778.const$1, fi, constants$759.const$4, scope);
        }
        static write_fn ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (long)constants$760.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write_fn$VH() {
        return constants$778.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*write_fn)(struct _GOutputStream*,void*,unsigned long,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment write_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$778.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*write_fn)(struct _GOutputStream*,void*,unsigned long,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void write_fn$set(MemorySegment seg, MemorySegment x) {
        constants$778.const$2.set(seg, x);
    }
    public static MemorySegment write_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$778.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void write_fn$set(MemorySegment seg, long index, MemorySegment x) {
        constants$778.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_fn write_fn(MemorySegment segment, Arena scope) {
        return write_fn.ofAddress(write_fn$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*splice)(struct _GOutputStream*,struct _GInputStream*,enum GOutputStreamSpliceFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface splice {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(splice fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$778.const$4, fi, constants$778.const$3, scope);
        }
        static splice ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (long)constants$778.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle splice$VH() {
        return constants$779.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*splice)(struct _GOutputStream*,struct _GInputStream*,enum GOutputStreamSpliceFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment splice$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$779.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*splice)(struct _GOutputStream*,struct _GInputStream*,enum GOutputStreamSpliceFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void splice$set(MemorySegment seg, MemorySegment x) {
        constants$779.const$0.set(seg, x);
    }
    public static MemorySegment splice$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$779.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void splice$set(MemorySegment seg, long index, MemorySegment x) {
        constants$779.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static splice splice(MemorySegment segment, Arena scope) {
        return splice.ofAddress(splice$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*flush)(struct _GOutputStream*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface flush {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(flush fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$779.const$1, fi, constants$12.const$2, scope);
        }
        static flush ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle flush$VH() {
        return constants$779.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*flush)(struct _GOutputStream*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment flush$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$779.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*flush)(struct _GOutputStream*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void flush$set(MemorySegment seg, MemorySegment x) {
        constants$779.const$2.set(seg, x);
    }
    public static MemorySegment flush$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$779.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void flush$set(MemorySegment seg, long index, MemorySegment x) {
        constants$779.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static flush flush(MemorySegment segment, Arena scope) {
        return flush.ofAddress(flush$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*close_fn)(struct _GOutputStream*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface close_fn {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(close_fn fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$779.const$3, fi, constants$12.const$2, scope);
        }
        static close_fn ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle close_fn$VH() {
        return constants$779.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*close_fn)(struct _GOutputStream*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment close_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$779.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*close_fn)(struct _GOutputStream*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void close_fn$set(MemorySegment seg, MemorySegment x) {
        constants$779.const$4.set(seg, x);
    }
    public static MemorySegment close_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$779.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void close_fn$set(MemorySegment seg, long index, MemorySegment x) {
        constants$779.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static close_fn close_fn(MemorySegment segment, Arena scope) {
        return close_fn.ofAddress(close_fn$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*write_async)(struct _GOutputStream*,void*,unsigned long,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface write_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(write_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$779.const$5, fi, constants$761.const$1, scope);
        }
        static write_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    constants$761.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write_async$VH() {
        return constants$780.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*write_async)(struct _GOutputStream*,void*,unsigned long,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment write_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$780.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*write_async)(struct _GOutputStream*,void*,unsigned long,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void write_async$set(MemorySegment seg, MemorySegment x) {
        constants$780.const$0.set(seg, x);
    }
    public static MemorySegment write_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$780.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void write_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$780.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_async write_async(MemorySegment segment, Arena scope) {
        return write_async.ofAddress(write_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*write_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface write_finish {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(write_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$780.const$1, fi, constants$166.const$0, scope);
        }
        static write_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (long)constants$762.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write_finish$VH() {
        return constants$780.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*write_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment write_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$780.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*write_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void write_finish$set(MemorySegment seg, MemorySegment x) {
        constants$780.const$2.set(seg, x);
    }
    public static MemorySegment write_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$780.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void write_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$780.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_finish write_finish(MemorySegment segment, Arena scope) {
        return write_finish.ofAddress(write_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*splice_async)(struct _GOutputStream*,struct _GInputStream*,enum GOutputStreamSpliceFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface splice_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(splice_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$780.const$4, fi, constants$780.const$3, scope);
        }
        static splice_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    constants$780.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle splice_async$VH() {
        return constants$781.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*splice_async)(struct _GOutputStream*,struct _GInputStream*,enum GOutputStreamSpliceFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment splice_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$781.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*splice_async)(struct _GOutputStream*,struct _GInputStream*,enum GOutputStreamSpliceFlags,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void splice_async$set(MemorySegment seg, MemorySegment x) {
        constants$781.const$0.set(seg, x);
    }
    public static MemorySegment splice_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$781.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void splice_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$781.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static splice_async splice_async(MemorySegment segment, Arena scope) {
        return splice_async.ofAddress(splice_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*splice_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface splice_finish {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(splice_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$781.const$1, fi, constants$166.const$0, scope);
        }
        static splice_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (long)constants$762.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle splice_finish$VH() {
        return constants$781.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*splice_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment splice_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$781.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*splice_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void splice_finish$set(MemorySegment seg, MemorySegment x) {
        constants$781.const$2.set(seg, x);
    }
    public static MemorySegment splice_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$781.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void splice_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$781.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static splice_finish splice_finish(MemorySegment segment, Arena scope) {
        return splice_finish.ofAddress(splice_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*flush_async)(struct _GOutputStream*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface flush_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(flush_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$781.const$3, fi, constants$281.const$5, scope);
        }
        static flush_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$754.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle flush_async$VH() {
        return constants$781.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*flush_async)(struct _GOutputStream*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment flush_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$781.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*flush_async)(struct _GOutputStream*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void flush_async$set(MemorySegment seg, MemorySegment x) {
        constants$781.const$4.set(seg, x);
    }
    public static MemorySegment flush_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$781.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void flush_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$781.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static flush_async flush_async(MemorySegment segment, Arena scope) {
        return flush_async.ofAddress(flush_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*flush_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface flush_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(flush_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$781.const$5, fi, constants$12.const$2, scope);
        }
        static flush_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle flush_finish$VH() {
        return constants$782.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*flush_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment flush_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$782.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*flush_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void flush_finish$set(MemorySegment seg, MemorySegment x) {
        constants$782.const$0.set(seg, x);
    }
    public static MemorySegment flush_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$782.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void flush_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$782.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static flush_finish flush_finish(MemorySegment segment, Arena scope) {
        return flush_finish.ofAddress(flush_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*close_async)(struct _GOutputStream*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface close_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(close_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$782.const$1, fi, constants$281.const$5, scope);
        }
        static close_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$754.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle close_async$VH() {
        return constants$782.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*close_async)(struct _GOutputStream*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment close_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$782.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*close_async)(struct _GOutputStream*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void close_async$set(MemorySegment seg, MemorySegment x) {
        constants$782.const$2.set(seg, x);
    }
    public static MemorySegment close_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$782.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void close_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$782.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static close_async close_async(MemorySegment segment, Arena scope) {
        return close_async.ofAddress(close_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*close_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface close_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(close_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$782.const$3, fi, constants$12.const$2, scope);
        }
        static close_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle close_finish$VH() {
        return constants$782.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*close_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment close_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$782.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*close_finish)(struct _GOutputStream*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void close_finish$set(MemorySegment seg, MemorySegment x) {
        constants$782.const$4.set(seg, x);
    }
    public static MemorySegment close_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$782.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void close_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$782.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static close_finish close_finish(MemorySegment segment, Arena scope) {
        return close_finish.ofAddress(close_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*writev_fn)(struct _GOutputStream*,struct _GOutputVector*,unsigned long,unsigned long*,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface writev_fn {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(writev_fn fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$782.const$5, fi, constants$766.const$0, scope);
        }
        static writev_fn ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$783.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle writev_fn$VH() {
        return constants$783.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*writev_fn)(struct _GOutputStream*,struct _GOutputVector*,unsigned long,unsigned long*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment writev_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$783.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*writev_fn)(struct _GOutputStream*,struct _GOutputVector*,unsigned long,unsigned long*,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void writev_fn$set(MemorySegment seg, MemorySegment x) {
        constants$783.const$1.set(seg, x);
    }
    public static MemorySegment writev_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$783.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void writev_fn$set(MemorySegment seg, long index, MemorySegment x) {
        constants$783.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static writev_fn writev_fn(MemorySegment segment, Arena scope) {
        return writev_fn.ofAddress(writev_fn$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*writev_async)(struct _GOutputStream*,struct _GOutputVector*,unsigned long,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface writev_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(writev_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$783.const$2, fi, constants$761.const$1, scope);
        }
        static writev_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    constants$761.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle writev_async$VH() {
        return constants$783.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*writev_async)(struct _GOutputStream*,struct _GOutputVector*,unsigned long,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment writev_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$783.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*writev_async)(struct _GOutputStream*,struct _GOutputVector*,unsigned long,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void writev_async$set(MemorySegment seg, MemorySegment x) {
        constants$783.const$3.set(seg, x);
    }
    public static MemorySegment writev_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$783.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void writev_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$783.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static writev_async writev_async(MemorySegment segment, Arena scope) {
        return writev_async.ofAddress(writev_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*writev_finish)(struct _GOutputStream*,struct _GAsyncResult*,unsigned long*,struct _GError**);
     * }
     */
    public interface writev_finish {

        int apply(java.lang.foreign.MemorySegment completion, java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(writev_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$783.const$4, fi, constants$34.const$5, scope);
        }
        static writev_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _completion, java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$382.const$0.invokeExact(symbol, _completion, _key, _iter, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle writev_finish$VH() {
        return constants$783.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*writev_finish)(struct _GOutputStream*,struct _GAsyncResult*,unsigned long*,struct _GError**);
     * }
     */
    public static MemorySegment writev_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$783.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*writev_finish)(struct _GOutputStream*,struct _GAsyncResult*,unsigned long*,struct _GError**);
     * }
     */
    public static void writev_finish$set(MemorySegment seg, MemorySegment x) {
        constants$783.const$5.set(seg, x);
    }
    public static MemorySegment writev_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$783.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void writev_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$783.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static writev_finish writev_finish(MemorySegment segment, Arena scope) {
        return writev_finish.ofAddress(writev_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved4)();
     * }
     */
    public interface _g_reserved4 {

        void apply();
        static MemorySegment allocate(_g_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$784.const$0, fi, constants$7.const$5, scope);
        }
        static _g_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved4$VH() {
        return constants$784.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static MemorySegment _g_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$784.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static void _g_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$784.const$1.set(seg, x);
    }
    public static MemorySegment _g_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$784.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$784.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved4 _g_reserved4(MemorySegment segment, Arena scope) {
        return _g_reserved4.ofAddress(_g_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved5)();
     * }
     */
    public interface _g_reserved5 {

        void apply();
        static MemorySegment allocate(_g_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$784.const$2, fi, constants$7.const$5, scope);
        }
        static _g_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved5$VH() {
        return constants$784.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static MemorySegment _g_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$784.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static void _g_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$784.const$3.set(seg, x);
    }
    public static MemorySegment _g_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$784.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$784.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved5 _g_reserved5(MemorySegment segment, Arena scope) {
        return _g_reserved5.ofAddress(_g_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved6)();
     * }
     */
    public interface _g_reserved6 {

        void apply();
        static MemorySegment allocate(_g_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$784.const$4, fi, constants$7.const$5, scope);
        }
        static _g_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved6$VH() {
        return constants$784.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved6)();
     * }
     */
    public static MemorySegment _g_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$784.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved6)();
     * }
     */
    public static void _g_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$784.const$5.set(seg, x);
    }
    public static MemorySegment _g_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$784.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$784.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved6 _g_reserved6(MemorySegment segment, Arena scope) {
        return _g_reserved6.ofAddress(_g_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved7)();
     * }
     */
    public interface _g_reserved7 {

        void apply();
        static MemorySegment allocate(_g_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$785.const$0, fi, constants$7.const$5, scope);
        }
        static _g_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved7$VH() {
        return constants$785.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved7)();
     * }
     */
    public static MemorySegment _g_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$785.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved7)();
     * }
     */
    public static void _g_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$785.const$1.set(seg, x);
    }
    public static MemorySegment _g_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$785.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$785.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved7 _g_reserved7(MemorySegment segment, Arena scope) {
        return _g_reserved7.ofAddress(_g_reserved7$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved8)();
     * }
     */
    public interface _g_reserved8 {

        void apply();
        static MemorySegment allocate(_g_reserved8 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$785.const$2, fi, constants$7.const$5, scope);
        }
        static _g_reserved8 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved8$VH() {
        return constants$785.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved8)();
     * }
     */
    public static MemorySegment _g_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$785.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved8)();
     * }
     */
    public static void _g_reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$785.const$3.set(seg, x);
    }
    public static MemorySegment _g_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$785.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$785.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved8 _g_reserved8(MemorySegment segment, Arena scope) {
        return _g_reserved8.ofAddress(_g_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


