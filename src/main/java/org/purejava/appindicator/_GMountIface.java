// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GMountIface {
 *     GTypeInterface g_iface;
 *     void (*changed)(GMount *);
 *     void (*unmounted)(GMount *);
 *     GFile *(*get_root)(GMount *);
 *     char *(*get_name)(GMount *);
 *     GIcon *(*get_icon)(GMount *);
 *     char *(*get_uuid)(GMount *);
 *     GVolume *(*get_volume)(GMount *);
 *     GDrive *(*get_drive)(GMount *);
 *     gboolean (*can_unmount)(GMount *);
 *     gboolean (*can_eject)(GMount *);
 *     void (*unmount)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer);
 *     gboolean (*unmount_finish)(GMount *, GAsyncResult *, GError **);
 *     void (*eject)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer);
 *     gboolean (*eject_finish)(GMount *, GAsyncResult *, GError **);
 *     void (*remount)(GMount *, GMountMountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer);
 *     gboolean (*remount_finish)(GMount *, GAsyncResult *, GError **);
 *     void (*guess_content_type)(GMount *, gboolean, GCancellable *, GAsyncReadyCallback, gpointer);
 *     gchar **(*guess_content_type_finish)(GMount *, GAsyncResult *, GError **);
 *     gchar **(*guess_content_type_sync)(GMount *, gboolean, GCancellable *, GError **);
 *     void (*pre_unmount)(GMount *);
 *     void (*unmount_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer);
 *     gboolean (*unmount_with_operation_finish)(GMount *, GAsyncResult *, GError **);
 *     void (*eject_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer);
 *     gboolean (*eject_with_operation_finish)(GMount *, GAsyncResult *, GError **);
 *     GFile *(*get_default_location)(GMount *);
 *     const gchar *(*get_sort_key)(GMount *);
 *     GIcon *(*get_symbolic_icon)(GMount *);
 * }
 * }
 */
public class _GMountIface {

    _GMountIface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInterface.layout().withName("g_iface"),
        app_indicator_h.C_POINTER.withName("changed"),
        app_indicator_h.C_POINTER.withName("unmounted"),
        app_indicator_h.C_POINTER.withName("get_root"),
        app_indicator_h.C_POINTER.withName("get_name"),
        app_indicator_h.C_POINTER.withName("get_icon"),
        app_indicator_h.C_POINTER.withName("get_uuid"),
        app_indicator_h.C_POINTER.withName("get_volume"),
        app_indicator_h.C_POINTER.withName("get_drive"),
        app_indicator_h.C_POINTER.withName("can_unmount"),
        app_indicator_h.C_POINTER.withName("can_eject"),
        app_indicator_h.C_POINTER.withName("unmount"),
        app_indicator_h.C_POINTER.withName("unmount_finish"),
        app_indicator_h.C_POINTER.withName("eject"),
        app_indicator_h.C_POINTER.withName("eject_finish"),
        app_indicator_h.C_POINTER.withName("remount"),
        app_indicator_h.C_POINTER.withName("remount_finish"),
        app_indicator_h.C_POINTER.withName("guess_content_type"),
        app_indicator_h.C_POINTER.withName("guess_content_type_finish"),
        app_indicator_h.C_POINTER.withName("guess_content_type_sync"),
        app_indicator_h.C_POINTER.withName("pre_unmount"),
        app_indicator_h.C_POINTER.withName("unmount_with_operation"),
        app_indicator_h.C_POINTER.withName("unmount_with_operation_finish"),
        app_indicator_h.C_POINTER.withName("eject_with_operation"),
        app_indicator_h.C_POINTER.withName("eject_with_operation_finish"),
        app_indicator_h.C_POINTER.withName("get_default_location"),
        app_indicator_h.C_POINTER.withName("get_sort_key"),
        app_indicator_h.C_POINTER.withName("get_symbolic_icon")
    ).withName("_GMountIface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout g_iface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("g_iface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final GroupLayout g_iface$layout() {
        return g_iface$LAYOUT;
    }

    private static final long g_iface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static final long g_iface$offset() {
        return g_iface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static MemorySegment g_iface(MemorySegment struct) {
        return struct.asSlice(g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInterface g_iface
     * }
     */
    public static void g_iface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, g_iface$OFFSET, g_iface$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*changed)(GMount *)
     * }
     */
    public class changed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(changed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(changed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout changed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("changed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*changed)(GMount *)
     * }
     */
    public static final AddressLayout changed$layout() {
        return changed$LAYOUT;
    }

    private static final long changed$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*changed)(GMount *)
     * }
     */
    public static final long changed$offset() {
        return changed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*changed)(GMount *)
     * }
     */
    public static MemorySegment changed(MemorySegment struct) {
        return struct.get(changed$LAYOUT, changed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*changed)(GMount *)
     * }
     */
    public static void changed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(changed$LAYOUT, changed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*unmounted)(GMount *)
     * }
     */
    public class unmounted {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(unmounted.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(unmounted.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout unmounted$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unmounted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*unmounted)(GMount *)
     * }
     */
    public static final AddressLayout unmounted$layout() {
        return unmounted$LAYOUT;
    }

    private static final long unmounted$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*unmounted)(GMount *)
     * }
     */
    public static final long unmounted$offset() {
        return unmounted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*unmounted)(GMount *)
     * }
     */
    public static MemorySegment unmounted(MemorySegment struct) {
        return struct.get(unmounted$LAYOUT, unmounted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*unmounted)(GMount *)
     * }
     */
    public static void unmounted(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unmounted$LAYOUT, unmounted$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GFile *(*get_root)(GMount *)
     * }
     */
    public class get_root {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_root.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_root.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_root$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_root"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GFile *(*get_root)(GMount *)
     * }
     */
    public static final AddressLayout get_root$layout() {
        return get_root$LAYOUT;
    }

    private static final long get_root$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GFile *(*get_root)(GMount *)
     * }
     */
    public static final long get_root$offset() {
        return get_root$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GFile *(*get_root)(GMount *)
     * }
     */
    public static MemorySegment get_root(MemorySegment struct) {
        return struct.get(get_root$LAYOUT, get_root$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GFile *(*get_root)(GMount *)
     * }
     */
    public static void get_root(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_root$LAYOUT, get_root$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * char *(*get_name)(GMount *)
     * }
     */
    public class get_name {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_name.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_name.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *(*get_name)(GMount *)
     * }
     */
    public static final AddressLayout get_name$layout() {
        return get_name$LAYOUT;
    }

    private static final long get_name$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *(*get_name)(GMount *)
     * }
     */
    public static final long get_name$offset() {
        return get_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *(*get_name)(GMount *)
     * }
     */
    public static MemorySegment get_name(MemorySegment struct) {
        return struct.get(get_name$LAYOUT, get_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *(*get_name)(GMount *)
     * }
     */
    public static void get_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_name$LAYOUT, get_name$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GIcon *(*get_icon)(GMount *)
     * }
     */
    public class get_icon {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_icon.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_icon.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_icon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_icon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GIcon *(*get_icon)(GMount *)
     * }
     */
    public static final AddressLayout get_icon$layout() {
        return get_icon$LAYOUT;
    }

    private static final long get_icon$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GIcon *(*get_icon)(GMount *)
     * }
     */
    public static final long get_icon$offset() {
        return get_icon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GIcon *(*get_icon)(GMount *)
     * }
     */
    public static MemorySegment get_icon(MemorySegment struct) {
        return struct.get(get_icon$LAYOUT, get_icon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GIcon *(*get_icon)(GMount *)
     * }
     */
    public static void get_icon(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_icon$LAYOUT, get_icon$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * char *(*get_uuid)(GMount *)
     * }
     */
    public class get_uuid {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_uuid.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_uuid.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_uuid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_uuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *(*get_uuid)(GMount *)
     * }
     */
    public static final AddressLayout get_uuid$layout() {
        return get_uuid$LAYOUT;
    }

    private static final long get_uuid$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *(*get_uuid)(GMount *)
     * }
     */
    public static final long get_uuid$offset() {
        return get_uuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *(*get_uuid)(GMount *)
     * }
     */
    public static MemorySegment get_uuid(MemorySegment struct) {
        return struct.get(get_uuid$LAYOUT, get_uuid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *(*get_uuid)(GMount *)
     * }
     */
    public static void get_uuid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_uuid$LAYOUT, get_uuid$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GVolume *(*get_volume)(GMount *)
     * }
     */
    public class get_volume {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_volume.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_volume.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_volume$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_volume"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GVolume *(*get_volume)(GMount *)
     * }
     */
    public static final AddressLayout get_volume$layout() {
        return get_volume$LAYOUT;
    }

    private static final long get_volume$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GVolume *(*get_volume)(GMount *)
     * }
     */
    public static final long get_volume$offset() {
        return get_volume$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GVolume *(*get_volume)(GMount *)
     * }
     */
    public static MemorySegment get_volume(MemorySegment struct) {
        return struct.get(get_volume$LAYOUT, get_volume$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GVolume *(*get_volume)(GMount *)
     * }
     */
    public static void get_volume(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_volume$LAYOUT, get_volume$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GDrive *(*get_drive)(GMount *)
     * }
     */
    public class get_drive {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_drive.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_drive.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_drive$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_drive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GDrive *(*get_drive)(GMount *)
     * }
     */
    public static final AddressLayout get_drive$layout() {
        return get_drive$LAYOUT;
    }

    private static final long get_drive$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GDrive *(*get_drive)(GMount *)
     * }
     */
    public static final long get_drive$offset() {
        return get_drive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GDrive *(*get_drive)(GMount *)
     * }
     */
    public static MemorySegment get_drive(MemorySegment struct) {
        return struct.get(get_drive$LAYOUT, get_drive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GDrive *(*get_drive)(GMount *)
     * }
     */
    public static void get_drive(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_drive$LAYOUT, get_drive$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*can_unmount)(GMount *)
     * }
     */
    public class can_unmount {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(can_unmount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(can_unmount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout can_unmount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("can_unmount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*can_unmount)(GMount *)
     * }
     */
    public static final AddressLayout can_unmount$layout() {
        return can_unmount$LAYOUT;
    }

    private static final long can_unmount$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*can_unmount)(GMount *)
     * }
     */
    public static final long can_unmount$offset() {
        return can_unmount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*can_unmount)(GMount *)
     * }
     */
    public static MemorySegment can_unmount(MemorySegment struct) {
        return struct.get(can_unmount$LAYOUT, can_unmount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*can_unmount)(GMount *)
     * }
     */
    public static void can_unmount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(can_unmount$LAYOUT, can_unmount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*can_eject)(GMount *)
     * }
     */
    public class can_eject {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(can_eject.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(can_eject.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout can_eject$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("can_eject"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*can_eject)(GMount *)
     * }
     */
    public static final AddressLayout can_eject$layout() {
        return can_eject$LAYOUT;
    }

    private static final long can_eject$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*can_eject)(GMount *)
     * }
     */
    public static final long can_eject$offset() {
        return can_eject$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*can_eject)(GMount *)
     * }
     */
    public static MemorySegment can_eject(MemorySegment struct) {
        return struct.get(can_eject$LAYOUT, can_eject$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*can_eject)(GMount *)
     * }
     */
    public static void can_eject(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(can_eject$LAYOUT, can_eject$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*unmount)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class unmount {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(unmount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(unmount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout unmount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unmount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*unmount)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout unmount$layout() {
        return unmount$LAYOUT;
    }

    private static final long unmount$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*unmount)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long unmount$offset() {
        return unmount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*unmount)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment unmount(MemorySegment struct) {
        return struct.get(unmount$LAYOUT, unmount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*unmount)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void unmount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unmount$LAYOUT, unmount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*unmount_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public class unmount_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(unmount_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(unmount_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout unmount_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unmount_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*unmount_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout unmount_finish$layout() {
        return unmount_finish$LAYOUT;
    }

    private static final long unmount_finish$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*unmount_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final long unmount_finish$offset() {
        return unmount_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*unmount_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment unmount_finish(MemorySegment struct) {
        return struct.get(unmount_finish$LAYOUT, unmount_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*unmount_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static void unmount_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unmount_finish$LAYOUT, unmount_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*eject)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class eject {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(eject.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(eject.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout eject$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("eject"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*eject)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout eject$layout() {
        return eject$LAYOUT;
    }

    private static final long eject$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*eject)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long eject$offset() {
        return eject$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*eject)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment eject(MemorySegment struct) {
        return struct.get(eject$LAYOUT, eject$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*eject)(GMount *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void eject(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(eject$LAYOUT, eject$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*eject_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public class eject_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(eject_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(eject_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout eject_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("eject_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*eject_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout eject_finish$layout() {
        return eject_finish$LAYOUT;
    }

    private static final long eject_finish$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*eject_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final long eject_finish$offset() {
        return eject_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*eject_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment eject_finish(MemorySegment struct) {
        return struct.get(eject_finish$LAYOUT, eject_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*eject_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static void eject_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(eject_finish$LAYOUT, eject_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*remount)(GMount *, GMountMountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class remount {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(remount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(remount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout remount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("remount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*remount)(GMount *, GMountMountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout remount$layout() {
        return remount$LAYOUT;
    }

    private static final long remount$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*remount)(GMount *, GMountMountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long remount$offset() {
        return remount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*remount)(GMount *, GMountMountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment remount(MemorySegment struct) {
        return struct.get(remount$LAYOUT, remount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*remount)(GMount *, GMountMountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void remount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(remount$LAYOUT, remount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*remount_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public class remount_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(remount_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(remount_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout remount_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("remount_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*remount_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout remount_finish$layout() {
        return remount_finish$LAYOUT;
    }

    private static final long remount_finish$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*remount_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final long remount_finish$offset() {
        return remount_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*remount_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment remount_finish(MemorySegment struct) {
        return struct.get(remount_finish$LAYOUT, remount_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*remount_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static void remount_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(remount_finish$LAYOUT, remount_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*guess_content_type)(GMount *, gboolean, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class guess_content_type {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(guess_content_type.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(guess_content_type.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout guess_content_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("guess_content_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*guess_content_type)(GMount *, gboolean, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout guess_content_type$layout() {
        return guess_content_type$LAYOUT;
    }

    private static final long guess_content_type$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*guess_content_type)(GMount *, gboolean, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long guess_content_type$offset() {
        return guess_content_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*guess_content_type)(GMount *, gboolean, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment guess_content_type(MemorySegment struct) {
        return struct.get(guess_content_type$LAYOUT, guess_content_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*guess_content_type)(GMount *, gboolean, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void guess_content_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(guess_content_type$LAYOUT, guess_content_type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gchar **(*guess_content_type_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public class guess_content_type_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(guess_content_type_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(guess_content_type_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout guess_content_type_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("guess_content_type_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar **(*guess_content_type_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout guess_content_type_finish$layout() {
        return guess_content_type_finish$LAYOUT;
    }

    private static final long guess_content_type_finish$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar **(*guess_content_type_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final long guess_content_type_finish$offset() {
        return guess_content_type_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar **(*guess_content_type_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment guess_content_type_finish(MemorySegment struct) {
        return struct.get(guess_content_type_finish$LAYOUT, guess_content_type_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar **(*guess_content_type_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static void guess_content_type_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(guess_content_type_finish$LAYOUT, guess_content_type_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gchar **(*guess_content_type_sync)(GMount *, gboolean, GCancellable *, GError **)
     * }
     */
    public class guess_content_type_sync {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(guess_content_type_sync.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(guess_content_type_sync.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout guess_content_type_sync$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("guess_content_type_sync"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar **(*guess_content_type_sync)(GMount *, gboolean, GCancellable *, GError **)
     * }
     */
    public static final AddressLayout guess_content_type_sync$layout() {
        return guess_content_type_sync$LAYOUT;
    }

    private static final long guess_content_type_sync$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar **(*guess_content_type_sync)(GMount *, gboolean, GCancellable *, GError **)
     * }
     */
    public static final long guess_content_type_sync$offset() {
        return guess_content_type_sync$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar **(*guess_content_type_sync)(GMount *, gboolean, GCancellable *, GError **)
     * }
     */
    public static MemorySegment guess_content_type_sync(MemorySegment struct) {
        return struct.get(guess_content_type_sync$LAYOUT, guess_content_type_sync$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar **(*guess_content_type_sync)(GMount *, gboolean, GCancellable *, GError **)
     * }
     */
    public static void guess_content_type_sync(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(guess_content_type_sync$LAYOUT, guess_content_type_sync$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*pre_unmount)(GMount *)
     * }
     */
    public class pre_unmount {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(pre_unmount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pre_unmount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pre_unmount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pre_unmount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pre_unmount)(GMount *)
     * }
     */
    public static final AddressLayout pre_unmount$layout() {
        return pre_unmount$LAYOUT;
    }

    private static final long pre_unmount$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pre_unmount)(GMount *)
     * }
     */
    public static final long pre_unmount$offset() {
        return pre_unmount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pre_unmount)(GMount *)
     * }
     */
    public static MemorySegment pre_unmount(MemorySegment struct) {
        return struct.get(pre_unmount$LAYOUT, pre_unmount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pre_unmount)(GMount *)
     * }
     */
    public static void pre_unmount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pre_unmount$LAYOUT, pre_unmount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*unmount_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class unmount_with_operation {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(unmount_with_operation.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(unmount_with_operation.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout unmount_with_operation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unmount_with_operation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*unmount_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout unmount_with_operation$layout() {
        return unmount_with_operation$LAYOUT;
    }

    private static final long unmount_with_operation$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*unmount_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long unmount_with_operation$offset() {
        return unmount_with_operation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*unmount_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment unmount_with_operation(MemorySegment struct) {
        return struct.get(unmount_with_operation$LAYOUT, unmount_with_operation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*unmount_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void unmount_with_operation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unmount_with_operation$LAYOUT, unmount_with_operation$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*unmount_with_operation_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public class unmount_with_operation_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(unmount_with_operation_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(unmount_with_operation_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout unmount_with_operation_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unmount_with_operation_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*unmount_with_operation_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout unmount_with_operation_finish$layout() {
        return unmount_with_operation_finish$LAYOUT;
    }

    private static final long unmount_with_operation_finish$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*unmount_with_operation_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final long unmount_with_operation_finish$offset() {
        return unmount_with_operation_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*unmount_with_operation_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment unmount_with_operation_finish(MemorySegment struct) {
        return struct.get(unmount_with_operation_finish$LAYOUT, unmount_with_operation_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*unmount_with_operation_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static void unmount_with_operation_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unmount_with_operation_finish$LAYOUT, unmount_with_operation_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*eject_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class eject_with_operation {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(eject_with_operation.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(eject_with_operation.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout eject_with_operation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("eject_with_operation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*eject_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout eject_with_operation$layout() {
        return eject_with_operation$LAYOUT;
    }

    private static final long eject_with_operation$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*eject_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long eject_with_operation$offset() {
        return eject_with_operation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*eject_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment eject_with_operation(MemorySegment struct) {
        return struct.get(eject_with_operation$LAYOUT, eject_with_operation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*eject_with_operation)(GMount *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void eject_with_operation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(eject_with_operation$LAYOUT, eject_with_operation$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*eject_with_operation_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public class eject_with_operation_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(eject_with_operation_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(eject_with_operation_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout eject_with_operation_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("eject_with_operation_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*eject_with_operation_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout eject_with_operation_finish$layout() {
        return eject_with_operation_finish$LAYOUT;
    }

    private static final long eject_with_operation_finish$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*eject_with_operation_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static final long eject_with_operation_finish$offset() {
        return eject_with_operation_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*eject_with_operation_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment eject_with_operation_finish(MemorySegment struct) {
        return struct.get(eject_with_operation_finish$LAYOUT, eject_with_operation_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*eject_with_operation_finish)(GMount *, GAsyncResult *, GError **)
     * }
     */
    public static void eject_with_operation_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(eject_with_operation_finish$LAYOUT, eject_with_operation_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GFile *(*get_default_location)(GMount *)
     * }
     */
    public class get_default_location {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_default_location.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_default_location.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_default_location$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_default_location"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GFile *(*get_default_location)(GMount *)
     * }
     */
    public static final AddressLayout get_default_location$layout() {
        return get_default_location$LAYOUT;
    }

    private static final long get_default_location$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GFile *(*get_default_location)(GMount *)
     * }
     */
    public static final long get_default_location$offset() {
        return get_default_location$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GFile *(*get_default_location)(GMount *)
     * }
     */
    public static MemorySegment get_default_location(MemorySegment struct) {
        return struct.get(get_default_location$LAYOUT, get_default_location$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GFile *(*get_default_location)(GMount *)
     * }
     */
    public static void get_default_location(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_default_location$LAYOUT, get_default_location$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * const gchar *(*get_sort_key)(GMount *)
     * }
     */
    public class get_sort_key {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_sort_key.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_sort_key.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_sort_key$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_sort_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar *(*get_sort_key)(GMount *)
     * }
     */
    public static final AddressLayout get_sort_key$layout() {
        return get_sort_key$LAYOUT;
    }

    private static final long get_sort_key$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar *(*get_sort_key)(GMount *)
     * }
     */
    public static final long get_sort_key$offset() {
        return get_sort_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar *(*get_sort_key)(GMount *)
     * }
     */
    public static MemorySegment get_sort_key(MemorySegment struct) {
        return struct.get(get_sort_key$LAYOUT, get_sort_key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar *(*get_sort_key)(GMount *)
     * }
     */
    public static void get_sort_key(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_sort_key$LAYOUT, get_sort_key$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GIcon *(*get_symbolic_icon)(GMount *)
     * }
     */
    public class get_symbolic_icon {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_symbolic_icon.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_symbolic_icon.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_symbolic_icon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_symbolic_icon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GIcon *(*get_symbolic_icon)(GMount *)
     * }
     */
    public static final AddressLayout get_symbolic_icon$layout() {
        return get_symbolic_icon$LAYOUT;
    }

    private static final long get_symbolic_icon$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GIcon *(*get_symbolic_icon)(GMount *)
     * }
     */
    public static final long get_symbolic_icon$offset() {
        return get_symbolic_icon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GIcon *(*get_symbolic_icon)(GMount *)
     * }
     */
    public static MemorySegment get_symbolic_icon(MemorySegment struct) {
        return struct.get(get_symbolic_icon$LAYOUT, get_symbolic_icon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GIcon *(*get_symbolic_icon)(GMount *)
     * }
     */
    public static void get_symbolic_icon(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_symbolic_icon$LAYOUT, get_symbolic_icon$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

