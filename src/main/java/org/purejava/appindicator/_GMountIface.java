// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GMountIface {
 *     struct _GTypeInterface g_iface;
 *     void (*changed)(struct _GMount*);
 *     void (*unmounted)(struct _GMount*);
 *     struct _GFile* (*get_root)(struct _GMount*);
 *     char* (*get_name)(struct _GMount*);
 *     struct _GIcon* (*get_icon)(struct _GMount*);
 *     char* (*get_uuid)(struct _GMount*);
 *     struct _GVolume* (*get_volume)(struct _GMount*);
 *     struct _GDrive* (*get_drive)(struct _GMount*);
 *     int (*can_unmount)(struct _GMount*);
 *     int (*can_eject)(struct _GMount*);
 *     void (*unmount)(struct _GMount*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*unmount_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
 *     void (*eject)(struct _GMount*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*eject_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
 *     void (*remount)(struct _GMount*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*remount_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
 *     void (*guess_content_type)(struct _GMount*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     char** (*guess_content_type_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
 *     char** (*guess_content_type_sync)(struct _GMount*,int,struct _GCancellable*,struct _GError**);
 *     void (*pre_unmount)(struct _GMount*);
 *     void (*unmount_with_operation)(struct _GMount*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*unmount_with_operation_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
 *     void (*eject_with_operation)(struct _GMount*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*eject_with_operation_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
 *     struct _GFile* (*get_default_location)(struct _GMount*);
 *     char* (*get_sort_key)(struct _GMount*);
 *     struct _GIcon* (*get_symbolic_icon)(struct _GMount*);
 * };
 * }
 */
public class _GMountIface {

    public static MemoryLayout $LAYOUT() {
        return constants$1159.const$1;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*changed)(struct _GMount*);
     * }
     */
    public interface changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1159.const$2, fi, constants$13.const$1, scope);
        }
        static changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle changed$VH() {
        return constants$1159.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*changed)(struct _GMount*);
     * }
     */
    public static MemorySegment changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1159.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*changed)(struct _GMount*);
     * }
     */
    public static void changed$set(MemorySegment seg, MemorySegment x) {
        constants$1159.const$3.set(seg, x);
    }
    public static MemorySegment changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1159.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1159.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed(MemorySegment segment, Arena scope) {
        return changed.ofAddress(changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unmounted)(struct _GMount*);
     * }
     */
    public interface unmounted {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(unmounted fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1159.const$4, fi, constants$13.const$1, scope);
        }
        static unmounted ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmounted$VH() {
        return constants$1159.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unmounted)(struct _GMount*);
     * }
     */
    public static MemorySegment unmounted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1159.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unmounted)(struct _GMount*);
     * }
     */
    public static void unmounted$set(MemorySegment seg, MemorySegment x) {
        constants$1159.const$5.set(seg, x);
    }
    public static MemorySegment unmounted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1159.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void unmounted$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1159.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmounted unmounted(MemorySegment segment, Arena scope) {
        return unmounted.ofAddress(unmounted$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*get_root)(struct _GMount*);
     * }
     */
    public interface get_root {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_root fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1160.const$0, fi, constants$5.const$2, scope);
        }
        static get_root ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_root$VH() {
        return constants$1160.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*get_root)(struct _GMount*);
     * }
     */
    public static MemorySegment get_root$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1160.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*get_root)(struct _GMount*);
     * }
     */
    public static void get_root$set(MemorySegment seg, MemorySegment x) {
        constants$1160.const$1.set(seg, x);
    }
    public static MemorySegment get_root$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1160.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_root$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1160.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_root get_root(MemorySegment segment, Arena scope) {
        return get_root.ofAddress(get_root$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_name)(struct _GMount*);
     * }
     */
    public interface get_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1160.const$2, fi, constants$5.const$2, scope);
        }
        static get_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_name$VH() {
        return constants$1160.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_name)(struct _GMount*);
     * }
     */
    public static MemorySegment get_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1160.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_name)(struct _GMount*);
     * }
     */
    public static void get_name$set(MemorySegment seg, MemorySegment x) {
        constants$1160.const$3.set(seg, x);
    }
    public static MemorySegment get_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1160.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1160.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name(MemorySegment segment, Arena scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GIcon* (*get_icon)(struct _GMount*);
     * }
     */
    public interface get_icon {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_icon fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1160.const$4, fi, constants$5.const$2, scope);
        }
        static get_icon ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_icon$VH() {
        return constants$1160.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GIcon* (*get_icon)(struct _GMount*);
     * }
     */
    public static MemorySegment get_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1160.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GIcon* (*get_icon)(struct _GMount*);
     * }
     */
    public static void get_icon$set(MemorySegment seg, MemorySegment x) {
        constants$1160.const$5.set(seg, x);
    }
    public static MemorySegment get_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1160.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_icon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1160.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_icon get_icon(MemorySegment segment, Arena scope) {
        return get_icon.ofAddress(get_icon$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_uuid)(struct _GMount*);
     * }
     */
    public interface get_uuid {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_uuid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1161.const$0, fi, constants$5.const$2, scope);
        }
        static get_uuid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_uuid$VH() {
        return constants$1161.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_uuid)(struct _GMount*);
     * }
     */
    public static MemorySegment get_uuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1161.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_uuid)(struct _GMount*);
     * }
     */
    public static void get_uuid$set(MemorySegment seg, MemorySegment x) {
        constants$1161.const$1.set(seg, x);
    }
    public static MemorySegment get_uuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1161.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uuid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1161.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uuid get_uuid(MemorySegment segment, Arena scope) {
        return get_uuid.ofAddress(get_uuid$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GVolume* (*get_volume)(struct _GMount*);
     * }
     */
    public interface get_volume {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_volume fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1161.const$2, fi, constants$5.const$2, scope);
        }
        static get_volume ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_volume$VH() {
        return constants$1161.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GVolume* (*get_volume)(struct _GMount*);
     * }
     */
    public static MemorySegment get_volume$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1161.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GVolume* (*get_volume)(struct _GMount*);
     * }
     */
    public static void get_volume$set(MemorySegment seg, MemorySegment x) {
        constants$1161.const$3.set(seg, x);
    }
    public static MemorySegment get_volume$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1161.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_volume$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1161.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_volume get_volume(MemorySegment segment, Arena scope) {
        return get_volume.ofAddress(get_volume$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GDrive* (*get_drive)(struct _GMount*);
     * }
     */
    public interface get_drive {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_drive fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1161.const$4, fi, constants$5.const$2, scope);
        }
        static get_drive ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_drive$VH() {
        return constants$1161.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GDrive* (*get_drive)(struct _GMount*);
     * }
     */
    public static MemorySegment get_drive$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1161.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GDrive* (*get_drive)(struct _GMount*);
     * }
     */
    public static void get_drive$set(MemorySegment seg, MemorySegment x) {
        constants$1161.const$5.set(seg, x);
    }
    public static MemorySegment get_drive$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1161.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_drive$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1161.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_drive get_drive(MemorySegment segment, Arena scope) {
        return get_drive.ofAddress(get_drive$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_unmount)(struct _GMount*);
     * }
     */
    public interface can_unmount {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(can_unmount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1162.const$0, fi, constants$10.const$5, scope);
        }
        static can_unmount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_unmount$VH() {
        return constants$1162.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_unmount)(struct _GMount*);
     * }
     */
    public static MemorySegment can_unmount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1162.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_unmount)(struct _GMount*);
     * }
     */
    public static void can_unmount$set(MemorySegment seg, MemorySegment x) {
        constants$1162.const$1.set(seg, x);
    }
    public static MemorySegment can_unmount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1162.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void can_unmount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1162.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_unmount can_unmount(MemorySegment segment, Arena scope) {
        return can_unmount.ofAddress(can_unmount$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_eject)(struct _GMount*);
     * }
     */
    public interface can_eject {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(can_eject fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1162.const$2, fi, constants$10.const$5, scope);
        }
        static can_eject ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_eject$VH() {
        return constants$1162.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_eject)(struct _GMount*);
     * }
     */
    public static MemorySegment can_eject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1162.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_eject)(struct _GMount*);
     * }
     */
    public static void can_eject$set(MemorySegment seg, MemorySegment x) {
        constants$1162.const$3.set(seg, x);
    }
    public static MemorySegment can_eject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1162.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void can_eject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1162.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_eject can_eject(MemorySegment segment, Arena scope) {
        return can_eject.ofAddress(can_eject$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unmount)(struct _GMount*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface unmount {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(unmount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1162.const$4, fi, constants$281.const$5, scope);
        }
        static unmount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$754.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmount$VH() {
        return constants$1162.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unmount)(struct _GMount*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment unmount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1162.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unmount)(struct _GMount*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void unmount$set(MemorySegment seg, MemorySegment x) {
        constants$1162.const$5.set(seg, x);
    }
    public static MemorySegment unmount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1162.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1162.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount unmount(MemorySegment segment, Arena scope) {
        return unmount.ofAddress(unmount$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*unmount_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface unmount_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(unmount_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1163.const$0, fi, constants$12.const$2, scope);
        }
        static unmount_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmount_finish$VH() {
        return constants$1163.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*unmount_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment unmount_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1163.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*unmount_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void unmount_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1163.const$1.set(seg, x);
    }
    public static MemorySegment unmount_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1163.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1163.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount_finish unmount_finish(MemorySegment segment, Arena scope) {
        return unmount_finish.ofAddress(unmount_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*eject)(struct _GMount*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface eject {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(eject fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1163.const$2, fi, constants$281.const$5, scope);
        }
        static eject ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$754.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject$VH() {
        return constants$1163.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*eject)(struct _GMount*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment eject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1163.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*eject)(struct _GMount*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void eject$set(MemorySegment seg, MemorySegment x) {
        constants$1163.const$3.set(seg, x);
    }
    public static MemorySegment eject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1163.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void eject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1163.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject eject(MemorySegment segment, Arena scope) {
        return eject.ofAddress(eject$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*eject_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface eject_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(eject_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1163.const$4, fi, constants$12.const$2, scope);
        }
        static eject_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject_finish$VH() {
        return constants$1163.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*eject_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment eject_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1163.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*eject_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void eject_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1163.const$5.set(seg, x);
    }
    public static MemorySegment eject_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1163.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1163.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_finish eject_finish(MemorySegment segment, Arena scope) {
        return eject_finish.ofAddress(eject_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*remount)(struct _GMount*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface remount {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(remount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1164.const$0, fi, constants$380.const$0, scope);
        }
        static remount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$945.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remount$VH() {
        return constants$1164.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*remount)(struct _GMount*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment remount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1164.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*remount)(struct _GMount*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void remount$set(MemorySegment seg, MemorySegment x) {
        constants$1164.const$1.set(seg, x);
    }
    public static MemorySegment remount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1164.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void remount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1164.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static remount remount(MemorySegment segment, Arena scope) {
        return remount.ofAddress(remount$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*remount_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface remount_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(remount_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1164.const$2, fi, constants$12.const$2, scope);
        }
        static remount_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remount_finish$VH() {
        return constants$1164.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*remount_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment remount_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1164.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*remount_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void remount_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1164.const$3.set(seg, x);
    }
    public static MemorySegment remount_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1164.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void remount_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1164.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static remount_finish remount_finish(MemorySegment segment, Arena scope) {
        return remount_finish.ofAddress(remount_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*guess_content_type)(struct _GMount*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface guess_content_type {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(guess_content_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1164.const$4, fi, constants$281.const$5, scope);
        }
        static guess_content_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$754.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle guess_content_type$VH() {
        return constants$1164.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*guess_content_type)(struct _GMount*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment guess_content_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1164.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*guess_content_type)(struct _GMount*,int,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void guess_content_type$set(MemorySegment seg, MemorySegment x) {
        constants$1164.const$5.set(seg, x);
    }
    public static MemorySegment guess_content_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1164.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void guess_content_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1164.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static guess_content_type guess_content_type(MemorySegment segment, Arena scope) {
        return guess_content_type.ofAddress(guess_content_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * char** (*guess_content_type_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface guess_content_type_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(guess_content_type_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1165.const$0, fi, constants$23.const$0, scope);
        }
        static guess_content_type_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$732.const$0.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle guess_content_type_finish$VH() {
        return constants$1165.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** (*guess_content_type_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment guess_content_type_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1165.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** (*guess_content_type_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void guess_content_type_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1165.const$1.set(seg, x);
    }
    public static MemorySegment guess_content_type_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1165.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void guess_content_type_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1165.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static guess_content_type_finish guess_content_type_finish(MemorySegment segment, Arena scope) {
        return guess_content_type_finish.ofAddress(guess_content_type_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * char** (*guess_content_type_sync)(struct _GMount*,int,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface guess_content_type_sync {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(guess_content_type_sync fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1165.const$2, fi, constants$180.const$0, scope);
        }
        static guess_content_type_sync ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$987.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle guess_content_type_sync$VH() {
        return constants$1165.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** (*guess_content_type_sync)(struct _GMount*,int,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment guess_content_type_sync$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1165.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** (*guess_content_type_sync)(struct _GMount*,int,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void guess_content_type_sync$set(MemorySegment seg, MemorySegment x) {
        constants$1165.const$3.set(seg, x);
    }
    public static MemorySegment guess_content_type_sync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1165.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void guess_content_type_sync$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1165.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static guess_content_type_sync guess_content_type_sync(MemorySegment segment, Arena scope) {
        return guess_content_type_sync.ofAddress(guess_content_type_sync$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*pre_unmount)(struct _GMount*);
     * }
     */
    public interface pre_unmount {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(pre_unmount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1165.const$4, fi, constants$13.const$1, scope);
        }
        static pre_unmount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pre_unmount$VH() {
        return constants$1165.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pre_unmount)(struct _GMount*);
     * }
     */
    public static MemorySegment pre_unmount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1165.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pre_unmount)(struct _GMount*);
     * }
     */
    public static void pre_unmount$set(MemorySegment seg, MemorySegment x) {
        constants$1165.const$5.set(seg, x);
    }
    public static MemorySegment pre_unmount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1165.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_unmount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1165.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static pre_unmount pre_unmount(MemorySegment segment, Arena scope) {
        return pre_unmount.ofAddress(pre_unmount$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unmount_with_operation)(struct _GMount*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface unmount_with_operation {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(unmount_with_operation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1166.const$0, fi, constants$380.const$0, scope);
        }
        static unmount_with_operation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$945.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmount_with_operation$VH() {
        return constants$1166.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unmount_with_operation)(struct _GMount*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment unmount_with_operation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1166.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unmount_with_operation)(struct _GMount*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void unmount_with_operation$set(MemorySegment seg, MemorySegment x) {
        constants$1166.const$1.set(seg, x);
    }
    public static MemorySegment unmount_with_operation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1166.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount_with_operation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1166.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount_with_operation unmount_with_operation(MemorySegment segment, Arena scope) {
        return unmount_with_operation.ofAddress(unmount_with_operation$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*unmount_with_operation_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface unmount_with_operation_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(unmount_with_operation_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1166.const$2, fi, constants$12.const$2, scope);
        }
        static unmount_with_operation_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmount_with_operation_finish$VH() {
        return constants$1166.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*unmount_with_operation_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment unmount_with_operation_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1166.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*unmount_with_operation_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void unmount_with_operation_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1166.const$3.set(seg, x);
    }
    public static MemorySegment unmount_with_operation_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1166.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount_with_operation_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1166.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount_with_operation_finish unmount_with_operation_finish(MemorySegment segment, Arena scope) {
        return unmount_with_operation_finish.ofAddress(unmount_with_operation_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*eject_with_operation)(struct _GMount*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface eject_with_operation {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(eject_with_operation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1166.const$4, fi, constants$380.const$0, scope);
        }
        static eject_with_operation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$945.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject_with_operation$VH() {
        return constants$1166.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*eject_with_operation)(struct _GMount*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment eject_with_operation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1166.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*eject_with_operation)(struct _GMount*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void eject_with_operation$set(MemorySegment seg, MemorySegment x) {
        constants$1166.const$5.set(seg, x);
    }
    public static MemorySegment eject_with_operation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1166.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_with_operation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1166.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_with_operation eject_with_operation(MemorySegment segment, Arena scope) {
        return eject_with_operation.ofAddress(eject_with_operation$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*eject_with_operation_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface eject_with_operation_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(eject_with_operation_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1167.const$0, fi, constants$12.const$2, scope);
        }
        static eject_with_operation_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject_with_operation_finish$VH() {
        return constants$1167.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*eject_with_operation_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment eject_with_operation_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1167.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*eject_with_operation_finish)(struct _GMount*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void eject_with_operation_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1167.const$1.set(seg, x);
    }
    public static MemorySegment eject_with_operation_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1167.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_with_operation_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1167.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_with_operation_finish eject_with_operation_finish(MemorySegment segment, Arena scope) {
        return eject_with_operation_finish.ofAddress(eject_with_operation_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*get_default_location)(struct _GMount*);
     * }
     */
    public interface get_default_location {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_default_location fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1167.const$2, fi, constants$5.const$2, scope);
        }
        static get_default_location ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_default_location$VH() {
        return constants$1167.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*get_default_location)(struct _GMount*);
     * }
     */
    public static MemorySegment get_default_location$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1167.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*get_default_location)(struct _GMount*);
     * }
     */
    public static void get_default_location$set(MemorySegment seg, MemorySegment x) {
        constants$1167.const$3.set(seg, x);
    }
    public static MemorySegment get_default_location$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1167.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_default_location$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1167.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_default_location get_default_location(MemorySegment segment, Arena scope) {
        return get_default_location.ofAddress(get_default_location$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_sort_key)(struct _GMount*);
     * }
     */
    public interface get_sort_key {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_sort_key fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1167.const$4, fi, constants$5.const$2, scope);
        }
        static get_sort_key ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_sort_key$VH() {
        return constants$1167.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_sort_key)(struct _GMount*);
     * }
     */
    public static MemorySegment get_sort_key$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1167.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_sort_key)(struct _GMount*);
     * }
     */
    public static void get_sort_key$set(MemorySegment seg, MemorySegment x) {
        constants$1167.const$5.set(seg, x);
    }
    public static MemorySegment get_sort_key$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1167.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_sort_key$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1167.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_sort_key get_sort_key(MemorySegment segment, Arena scope) {
        return get_sort_key.ofAddress(get_sort_key$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GIcon* (*get_symbolic_icon)(struct _GMount*);
     * }
     */
    public interface get_symbolic_icon {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_symbolic_icon fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1168.const$0, fi, constants$5.const$2, scope);
        }
        static get_symbolic_icon ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_symbolic_icon$VH() {
        return constants$1168.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GIcon* (*get_symbolic_icon)(struct _GMount*);
     * }
     */
    public static MemorySegment get_symbolic_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1168.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GIcon* (*get_symbolic_icon)(struct _GMount*);
     * }
     */
    public static void get_symbolic_icon$set(MemorySegment seg, MemorySegment x) {
        constants$1168.const$1.set(seg, x);
    }
    public static MemorySegment get_symbolic_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1168.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_symbolic_icon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1168.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_symbolic_icon get_symbolic_icon(MemorySegment segment, Arena scope) {
        return get_symbolic_icon.ofAddress(get_symbolic_icon$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


