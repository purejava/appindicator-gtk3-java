// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkPanedClass {
 *     struct _GtkContainerClass parent_class;
 *     int (*cycle_child_focus)(struct _GtkPaned*,int);
 *     int (*toggle_handle_focus)(struct _GtkPaned*);
 *     int (*move_handle)(struct _GtkPaned*,enum GtkScrollType);
 *     int (*cycle_handle_focus)(struct _GtkPaned*,int);
 *     int (*accept_position)(struct _GtkPaned*);
 *     int (*cancel_position)(struct _GtkPaned*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkPanedClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2937.const$3;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 976);
    }
    /**
     * {@snippet :
 * int (*cycle_child_focus)(struct _GtkPaned*,int);
     * }
     */
    public interface cycle_child_focus {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(cycle_child_focus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2937.const$4, fi, constants$11.const$4, scope);
        }
        static cycle_child_focus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cycle_child_focus$VH() {
        return constants$2937.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*cycle_child_focus)(struct _GtkPaned*,int);
     * }
     */
    public static MemorySegment cycle_child_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2937.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*cycle_child_focus)(struct _GtkPaned*,int);
     * }
     */
    public static void cycle_child_focus$set(MemorySegment seg, MemorySegment x) {
        constants$2937.const$5.set(seg, x);
    }
    public static MemorySegment cycle_child_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2937.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cycle_child_focus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2937.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static cycle_child_focus cycle_child_focus(MemorySegment segment, Arena scope) {
        return cycle_child_focus.ofAddress(cycle_child_focus$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*toggle_handle_focus)(struct _GtkPaned*);
     * }
     */
    public interface toggle_handle_focus {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(toggle_handle_focus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2938.const$0, fi, constants$10.const$5, scope);
        }
        static toggle_handle_focus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle toggle_handle_focus$VH() {
        return constants$2938.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*toggle_handle_focus)(struct _GtkPaned*);
     * }
     */
    public static MemorySegment toggle_handle_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2938.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*toggle_handle_focus)(struct _GtkPaned*);
     * }
     */
    public static void toggle_handle_focus$set(MemorySegment seg, MemorySegment x) {
        constants$2938.const$1.set(seg, x);
    }
    public static MemorySegment toggle_handle_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2938.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_handle_focus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2938.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_handle_focus toggle_handle_focus(MemorySegment segment, Arena scope) {
        return toggle_handle_focus.ofAddress(toggle_handle_focus$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*move_handle)(struct _GtkPaned*,enum GtkScrollType);
     * }
     */
    public interface move_handle {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(move_handle fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2938.const$2, fi, constants$11.const$4, scope);
        }
        static move_handle ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_handle$VH() {
        return constants$2938.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*move_handle)(struct _GtkPaned*,enum GtkScrollType);
     * }
     */
    public static MemorySegment move_handle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2938.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*move_handle)(struct _GtkPaned*,enum GtkScrollType);
     * }
     */
    public static void move_handle$set(MemorySegment seg, MemorySegment x) {
        constants$2938.const$3.set(seg, x);
    }
    public static MemorySegment move_handle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2938.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void move_handle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2938.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_handle move_handle(MemorySegment segment, Arena scope) {
        return move_handle.ofAddress(move_handle$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*cycle_handle_focus)(struct _GtkPaned*,int);
     * }
     */
    public interface cycle_handle_focus {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(cycle_handle_focus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2938.const$4, fi, constants$11.const$4, scope);
        }
        static cycle_handle_focus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cycle_handle_focus$VH() {
        return constants$2938.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*cycle_handle_focus)(struct _GtkPaned*,int);
     * }
     */
    public static MemorySegment cycle_handle_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2938.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*cycle_handle_focus)(struct _GtkPaned*,int);
     * }
     */
    public static void cycle_handle_focus$set(MemorySegment seg, MemorySegment x) {
        constants$2938.const$5.set(seg, x);
    }
    public static MemorySegment cycle_handle_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2938.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cycle_handle_focus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2938.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static cycle_handle_focus cycle_handle_focus(MemorySegment segment, Arena scope) {
        return cycle_handle_focus.ofAddress(cycle_handle_focus$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*accept_position)(struct _GtkPaned*);
     * }
     */
    public interface accept_position {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(accept_position fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2939.const$0, fi, constants$10.const$5, scope);
        }
        static accept_position ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle accept_position$VH() {
        return constants$2939.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*accept_position)(struct _GtkPaned*);
     * }
     */
    public static MemorySegment accept_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2939.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*accept_position)(struct _GtkPaned*);
     * }
     */
    public static void accept_position$set(MemorySegment seg, MemorySegment x) {
        constants$2939.const$1.set(seg, x);
    }
    public static MemorySegment accept_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2939.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void accept_position$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2939.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static accept_position accept_position(MemorySegment segment, Arena scope) {
        return accept_position.ofAddress(accept_position$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*cancel_position)(struct _GtkPaned*);
     * }
     */
    public interface cancel_position {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(cancel_position fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2939.const$2, fi, constants$10.const$5, scope);
        }
        static cancel_position ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cancel_position$VH() {
        return constants$2939.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*cancel_position)(struct _GtkPaned*);
     * }
     */
    public static MemorySegment cancel_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2939.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*cancel_position)(struct _GtkPaned*);
     * }
     */
    public static void cancel_position$set(MemorySegment seg, MemorySegment x) {
        constants$2939.const$3.set(seg, x);
    }
    public static MemorySegment cancel_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2939.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cancel_position$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2939.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static cancel_position cancel_position(MemorySegment segment, Arena scope) {
        return cancel_position.ofAddress(cancel_position$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2939.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2939.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2939.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2939.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2939.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2939.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2940.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2940.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2940.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2940.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2940.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2940.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2940.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2940.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2940.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2940.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2940.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2940.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2940.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2940.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2940.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2940.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2940.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2940.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


