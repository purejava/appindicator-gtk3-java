// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct zt_context {
 *     struct _aarch64_ctx head;
 *     __u16 nregs;
 *     __u16 __reserved[3];
 * }
 * }
 */
public class zt_context {

    zt_context() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _aarch64_ctx.layout().withName("head"),
        app_indicator_h.C_SHORT.withName("nregs"),
        MemoryLayout.sequenceLayout(3, app_indicator_h.C_SHORT).withName("__reserved")
    ).withName("zt_context");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout head$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("head"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _aarch64_ctx head
     * }
     */
    public static final GroupLayout head$layout() {
        return head$LAYOUT;
    }

    private static final long head$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _aarch64_ctx head
     * }
     */
    public static final long head$offset() {
        return head$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _aarch64_ctx head
     * }
     */
    public static MemorySegment head(MemorySegment struct) {
        return struct.asSlice(head$OFFSET, head$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _aarch64_ctx head
     * }
     */
    public static void head(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, head$OFFSET, head$LAYOUT.byteSize());
    }

    private static final OfShort nregs$LAYOUT = (OfShort)$LAYOUT.select(groupElement("nregs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 nregs
     * }
     */
    public static final OfShort nregs$layout() {
        return nregs$LAYOUT;
    }

    private static final long nregs$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 nregs
     * }
     */
    public static final long nregs$offset() {
        return nregs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 nregs
     * }
     */
    public static short nregs(MemorySegment struct) {
        return struct.get(nregs$LAYOUT, nregs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 nregs
     * }
     */
    public static void nregs(MemorySegment struct, short fieldValue) {
        struct.set(nregs$LAYOUT, nregs$OFFSET, fieldValue);
    }

    private static final SequenceLayout __reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("__reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __u16 __reserved[3]
     * }
     */
    public static final SequenceLayout __reserved$layout() {
        return __reserved$LAYOUT;
    }

    private static final long __reserved$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __u16 __reserved[3]
     * }
     */
    public static final long __reserved$offset() {
        return __reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __u16 __reserved[3]
     * }
     */
    public static MemorySegment __reserved(MemorySegment struct) {
        return struct.asSlice(__reserved$OFFSET, __reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __u16 __reserved[3]
     * }
     */
    public static void __reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, __reserved$OFFSET, __reserved$LAYOUT.byteSize());
    }

    private static long[] __reserved$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * __u16 __reserved[3]
     * }
     */
    public static long[] __reserved$dimensions() {
        return __reserved$DIMS;
    }
    private static final VarHandle __reserved$ELEM_HANDLE = __reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * __u16 __reserved[3]
     * }
     */
    public static short __reserved(MemorySegment struct, long index0) {
        return (short)__reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * __u16 __reserved[3]
     * }
     */
    public static void __reserved(MemorySegment struct, long index0, short fieldValue) {
        __reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

