// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PangoFontMapClass {
 *     struct _GObjectClass parent_class;
 *     struct _PangoFont* (*load_font)(struct _PangoFontMap*,struct _PangoContext*,struct _PangoFontDescription*);
 *     void (*list_families)(struct _PangoFontMap*,struct _PangoFontFamily***,int*);
 *     struct _PangoFontset* (*load_fontset)(struct _PangoFontMap*,struct _PangoContext*,struct _PangoFontDescription*,struct _PangoLanguage*);
 *     char* shape_engine_type;
 *     unsigned int (*get_serial)(struct _PangoFontMap*);
 *     void (*changed)(struct _PangoFontMap*);
 *     struct _PangoFontFamily* (*get_family)(struct _PangoFontMap*,char*);
 *     struct _PangoFontFace* (*get_face)(struct _PangoFontMap*,struct _PangoFont*);
 * };
 * }
 */
public class _PangoFontMapClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1590.const$0;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * struct _PangoFont* (*load_font)(struct _PangoFontMap*,struct _PangoContext*,struct _PangoFontDescription*);
     * }
     */
    public interface load_font {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(load_font fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1590.const$1, fi, constants$23.const$0, scope);
        }
        static load_font ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$732.const$0.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle load_font$VH() {
        return constants$1590.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFont* (*load_font)(struct _PangoFontMap*,struct _PangoContext*,struct _PangoFontDescription*);
     * }
     */
    public static MemorySegment load_font$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1590.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFont* (*load_font)(struct _PangoFontMap*,struct _PangoContext*,struct _PangoFontDescription*);
     * }
     */
    public static void load_font$set(MemorySegment seg, MemorySegment x) {
        constants$1590.const$2.set(seg, x);
    }
    public static MemorySegment load_font$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1590.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void load_font$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1590.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static load_font load_font(MemorySegment segment, Arena scope) {
        return load_font.ofAddress(load_font$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*list_families)(struct _PangoFontMap*,struct _PangoFontFamily***,int*);
     * }
     */
    public interface list_families {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(list_families fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1590.const$3, fi, constants$14.const$3, scope);
        }
        static list_families ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle list_families$VH() {
        return constants$1590.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*list_families)(struct _PangoFontMap*,struct _PangoFontFamily***,int*);
     * }
     */
    public static MemorySegment list_families$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1590.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*list_families)(struct _PangoFontMap*,struct _PangoFontFamily***,int*);
     * }
     */
    public static void list_families$set(MemorySegment seg, MemorySegment x) {
        constants$1590.const$4.set(seg, x);
    }
    public static MemorySegment list_families$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1590.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void list_families$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1590.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static list_families list_families(MemorySegment segment, Arena scope) {
        return list_families.ofAddress(list_families$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _PangoFontset* (*load_fontset)(struct _PangoFontMap*,struct _PangoContext*,struct _PangoFontDescription*,struct _PangoLanguage*);
     * }
     */
    public interface load_fontset {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment pattern, java.lang.foreign.MemorySegment callback_data, java.lang.foreign.MemorySegment target, java.lang.foreign.MemorySegment extents);
        static MemorySegment allocate(load_fontset fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1590.const$5, fi, constants$39.const$1, scope);
        }
        static load_fontset ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _pattern, java.lang.foreign.MemorySegment _callback_data, java.lang.foreign.MemorySegment _target, java.lang.foreign.MemorySegment _extents) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$865.const$5.invokeExact(symbol, _pattern, _callback_data, _target, _extents);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle load_fontset$VH() {
        return constants$1591.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontset* (*load_fontset)(struct _PangoFontMap*,struct _PangoContext*,struct _PangoFontDescription*,struct _PangoLanguage*);
     * }
     */
    public static MemorySegment load_fontset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1591.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontset* (*load_fontset)(struct _PangoFontMap*,struct _PangoContext*,struct _PangoFontDescription*,struct _PangoLanguage*);
     * }
     */
    public static void load_fontset$set(MemorySegment seg, MemorySegment x) {
        constants$1591.const$0.set(seg, x);
    }
    public static MemorySegment load_fontset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1591.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void load_fontset$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1591.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static load_fontset load_fontset(MemorySegment segment, Arena scope) {
        return load_fontset.ofAddress(load_fontset$get(segment), scope);
    }
    public static VarHandle shape_engine_type$VH() {
        return constants$1591.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* shape_engine_type;
     * }
     */
    public static MemorySegment shape_engine_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1591.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* shape_engine_type;
     * }
     */
    public static void shape_engine_type$set(MemorySegment seg, MemorySegment x) {
        constants$1591.const$1.set(seg, x);
    }
    public static MemorySegment shape_engine_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1591.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void shape_engine_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1591.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * unsigned int (*get_serial)(struct _PangoFontMap*);
     * }
     */
    public interface get_serial {

        int apply(java.lang.foreign.MemorySegment key);
        static MemorySegment allocate(get_serial fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1591.const$2, fi, constants$10.const$5, scope);
        }
        static get_serial ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _key);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_serial$VH() {
        return constants$1591.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int (*get_serial)(struct _PangoFontMap*);
     * }
     */
    public static MemorySegment get_serial$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1591.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int (*get_serial)(struct _PangoFontMap*);
     * }
     */
    public static void get_serial$set(MemorySegment seg, MemorySegment x) {
        constants$1591.const$3.set(seg, x);
    }
    public static MemorySegment get_serial$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1591.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_serial$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1591.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_serial get_serial(MemorySegment segment, Arena scope) {
        return get_serial.ofAddress(get_serial$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*changed)(struct _PangoFontMap*);
     * }
     */
    public interface changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1591.const$4, fi, constants$13.const$1, scope);
        }
        static changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle changed$VH() {
        return constants$1591.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*changed)(struct _PangoFontMap*);
     * }
     */
    public static MemorySegment changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1591.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*changed)(struct _PangoFontMap*);
     * }
     */
    public static void changed$set(MemorySegment seg, MemorySegment x) {
        constants$1591.const$5.set(seg, x);
    }
    public static MemorySegment changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1591.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1591.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed(MemorySegment segment, Arena scope) {
        return changed.ofAddress(changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _PangoFontFamily* (*get_family)(struct _PangoFontMap*,char*);
     * }
     */
    public interface get_family {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_family fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1592.const$0, fi, constants$5.const$5, scope);
        }
        static get_family ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_family$VH() {
        return constants$1592.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontFamily* (*get_family)(struct _PangoFontMap*,char*);
     * }
     */
    public static MemorySegment get_family$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1592.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontFamily* (*get_family)(struct _PangoFontMap*,char*);
     * }
     */
    public static void get_family$set(MemorySegment seg, MemorySegment x) {
        constants$1592.const$1.set(seg, x);
    }
    public static MemorySegment get_family$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1592.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_family$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1592.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_family get_family(MemorySegment segment, Arena scope) {
        return get_family.ofAddress(get_family$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _PangoFontFace* (*get_face)(struct _PangoFontMap*,struct _PangoFont*);
     * }
     */
    public interface get_face {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_face fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1592.const$2, fi, constants$5.const$5, scope);
        }
        static get_face ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_face$VH() {
        return constants$1592.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontFace* (*get_face)(struct _PangoFontMap*,struct _PangoFont*);
     * }
     */
    public static MemorySegment get_face$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1592.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontFace* (*get_face)(struct _PangoFontMap*,struct _PangoFont*);
     * }
     */
    public static void get_face$set(MemorySegment seg, MemorySegment x) {
        constants$1592.const$3.set(seg, x);
    }
    public static MemorySegment get_face$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1592.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_face$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1592.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_face get_face(MemorySegment segment, Arena scope) {
        return get_face.ofAddress(get_face$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


