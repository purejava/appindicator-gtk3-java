// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GVolumeIface {
 *     struct _GTypeInterface g_iface;
 *     void (*changed)(struct _GVolume*);
 *     void (*removed)(struct _GVolume*);
 *     char* (*get_name)(struct _GVolume*);
 *     struct _GIcon* (*get_icon)(struct _GVolume*);
 *     char* (*get_uuid)(struct _GVolume*);
 *     struct _GDrive* (*get_drive)(struct _GVolume*);
 *     struct _GMount* (*get_mount)(struct _GVolume*);
 *     int (*can_mount)(struct _GVolume*);
 *     int (*can_eject)(struct _GVolume*);
 *     void (*mount_fn)(struct _GVolume*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*mount_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
 *     void (*eject)(struct _GVolume*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*eject_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
 *     char* (*get_identifier)(struct _GVolume*,char*);
 *     char** (*enumerate_identifiers)(struct _GVolume*);
 *     int (*should_automount)(struct _GVolume*);
 *     struct _GFile* (*get_activation_root)(struct _GVolume*);
 *     void (*eject_with_operation)(struct _GVolume*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     int (*eject_with_operation_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
 *     char* (*get_sort_key)(struct _GVolume*);
 *     struct _GIcon* (*get_symbolic_icon)(struct _GVolume*);
 * };
 * }
 */
public class _GVolumeIface {

    public static MemoryLayout $LAYOUT() {
        return constants$1401.const$0;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*changed)(struct _GVolume*);
     * }
     */
    public interface changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1401.const$1, fi, constants$13.const$1, scope);
        }
        static changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle changed$VH() {
        return constants$1401.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*changed)(struct _GVolume*);
     * }
     */
    public static MemorySegment changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1401.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*changed)(struct _GVolume*);
     * }
     */
    public static void changed$set(MemorySegment seg, MemorySegment x) {
        constants$1401.const$2.set(seg, x);
    }
    public static MemorySegment changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1401.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1401.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed(MemorySegment segment, Arena scope) {
        return changed.ofAddress(changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*removed)(struct _GVolume*);
     * }
     */
    public interface removed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(removed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1401.const$3, fi, constants$13.const$1, scope);
        }
        static removed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle removed$VH() {
        return constants$1401.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*removed)(struct _GVolume*);
     * }
     */
    public static MemorySegment removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1401.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*removed)(struct _GVolume*);
     * }
     */
    public static void removed$set(MemorySegment seg, MemorySegment x) {
        constants$1401.const$4.set(seg, x);
    }
    public static MemorySegment removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1401.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void removed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1401.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static removed removed(MemorySegment segment, Arena scope) {
        return removed.ofAddress(removed$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_name)(struct _GVolume*);
     * }
     */
    public interface get_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1401.const$5, fi, constants$5.const$2, scope);
        }
        static get_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_name$VH() {
        return constants$1402.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_name)(struct _GVolume*);
     * }
     */
    public static MemorySegment get_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_name)(struct _GVolume*);
     * }
     */
    public static void get_name$set(MemorySegment seg, MemorySegment x) {
        constants$1402.const$0.set(seg, x);
    }
    public static MemorySegment get_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1402.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name(MemorySegment segment, Arena scope) {
        return get_name.ofAddress(get_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GIcon* (*get_icon)(struct _GVolume*);
     * }
     */
    public interface get_icon {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_icon fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1402.const$1, fi, constants$5.const$2, scope);
        }
        static get_icon ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_icon$VH() {
        return constants$1402.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GIcon* (*get_icon)(struct _GVolume*);
     * }
     */
    public static MemorySegment get_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GIcon* (*get_icon)(struct _GVolume*);
     * }
     */
    public static void get_icon$set(MemorySegment seg, MemorySegment x) {
        constants$1402.const$2.set(seg, x);
    }
    public static MemorySegment get_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_icon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1402.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_icon get_icon(MemorySegment segment, Arena scope) {
        return get_icon.ofAddress(get_icon$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_uuid)(struct _GVolume*);
     * }
     */
    public interface get_uuid {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_uuid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1402.const$3, fi, constants$5.const$2, scope);
        }
        static get_uuid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_uuid$VH() {
        return constants$1402.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_uuid)(struct _GVolume*);
     * }
     */
    public static MemorySegment get_uuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_uuid)(struct _GVolume*);
     * }
     */
    public static void get_uuid$set(MemorySegment seg, MemorySegment x) {
        constants$1402.const$4.set(seg, x);
    }
    public static MemorySegment get_uuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uuid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1402.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uuid get_uuid(MemorySegment segment, Arena scope) {
        return get_uuid.ofAddress(get_uuid$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GDrive* (*get_drive)(struct _GVolume*);
     * }
     */
    public interface get_drive {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_drive fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1402.const$5, fi, constants$5.const$2, scope);
        }
        static get_drive ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_drive$VH() {
        return constants$1403.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GDrive* (*get_drive)(struct _GVolume*);
     * }
     */
    public static MemorySegment get_drive$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1403.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GDrive* (*get_drive)(struct _GVolume*);
     * }
     */
    public static void get_drive$set(MemorySegment seg, MemorySegment x) {
        constants$1403.const$0.set(seg, x);
    }
    public static MemorySegment get_drive$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1403.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_drive$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1403.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_drive get_drive(MemorySegment segment, Arena scope) {
        return get_drive.ofAddress(get_drive$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GMount* (*get_mount)(struct _GVolume*);
     * }
     */
    public interface get_mount {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_mount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1403.const$1, fi, constants$5.const$2, scope);
        }
        static get_mount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_mount$VH() {
        return constants$1403.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GMount* (*get_mount)(struct _GVolume*);
     * }
     */
    public static MemorySegment get_mount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1403.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GMount* (*get_mount)(struct _GVolume*);
     * }
     */
    public static void get_mount$set(MemorySegment seg, MemorySegment x) {
        constants$1403.const$2.set(seg, x);
    }
    public static MemorySegment get_mount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1403.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1403.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mount get_mount(MemorySegment segment, Arena scope) {
        return get_mount.ofAddress(get_mount$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_mount)(struct _GVolume*);
     * }
     */
    public interface can_mount {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(can_mount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1403.const$3, fi, constants$10.const$5, scope);
        }
        static can_mount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_mount$VH() {
        return constants$1403.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_mount)(struct _GVolume*);
     * }
     */
    public static MemorySegment can_mount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1403.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_mount)(struct _GVolume*);
     * }
     */
    public static void can_mount$set(MemorySegment seg, MemorySegment x) {
        constants$1403.const$4.set(seg, x);
    }
    public static MemorySegment can_mount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1403.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void can_mount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1403.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_mount can_mount(MemorySegment segment, Arena scope) {
        return can_mount.ofAddress(can_mount$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_eject)(struct _GVolume*);
     * }
     */
    public interface can_eject {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(can_eject fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1403.const$5, fi, constants$10.const$5, scope);
        }
        static can_eject ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_eject$VH() {
        return constants$1404.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_eject)(struct _GVolume*);
     * }
     */
    public static MemorySegment can_eject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1404.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_eject)(struct _GVolume*);
     * }
     */
    public static void can_eject$set(MemorySegment seg, MemorySegment x) {
        constants$1404.const$0.set(seg, x);
    }
    public static MemorySegment can_eject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1404.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void can_eject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1404.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_eject can_eject(MemorySegment segment, Arena scope) {
        return can_eject.ofAddress(can_eject$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*mount_fn)(struct _GVolume*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface mount_fn {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(mount_fn fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1404.const$1, fi, constants$380.const$0, scope);
        }
        static mount_fn ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$945.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mount_fn$VH() {
        return constants$1404.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*mount_fn)(struct _GVolume*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment mount_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1404.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*mount_fn)(struct _GVolume*,enum GMountMountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void mount_fn$set(MemorySegment seg, MemorySegment x) {
        constants$1404.const$2.set(seg, x);
    }
    public static MemorySegment mount_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1404.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_fn$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1404.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_fn mount_fn(MemorySegment segment, Arena scope) {
        return mount_fn.ofAddress(mount_fn$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*mount_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface mount_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(mount_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1404.const$3, fi, constants$12.const$2, scope);
        }
        static mount_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mount_finish$VH() {
        return constants$1404.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*mount_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment mount_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1404.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*mount_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void mount_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1404.const$4.set(seg, x);
    }
    public static MemorySegment mount_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1404.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1404.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_finish mount_finish(MemorySegment segment, Arena scope) {
        return mount_finish.ofAddress(mount_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*eject)(struct _GVolume*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface eject {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(eject fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1404.const$5, fi, constants$281.const$5, scope);
        }
        static eject ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$754.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject$VH() {
        return constants$1405.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*eject)(struct _GVolume*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment eject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1405.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*eject)(struct _GVolume*,enum GMountUnmountFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void eject$set(MemorySegment seg, MemorySegment x) {
        constants$1405.const$0.set(seg, x);
    }
    public static MemorySegment eject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1405.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void eject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1405.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject eject(MemorySegment segment, Arena scope) {
        return eject.ofAddress(eject$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*eject_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface eject_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(eject_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1405.const$1, fi, constants$12.const$2, scope);
        }
        static eject_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject_finish$VH() {
        return constants$1405.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*eject_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment eject_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1405.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*eject_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void eject_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1405.const$2.set(seg, x);
    }
    public static MemorySegment eject_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1405.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1405.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_finish eject_finish(MemorySegment segment, Arena scope) {
        return eject_finish.ofAddress(eject_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_identifier)(struct _GVolume*,char*);
     * }
     */
    public interface get_identifier {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_identifier fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1405.const$3, fi, constants$5.const$5, scope);
        }
        static get_identifier ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_identifier$VH() {
        return constants$1405.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_identifier)(struct _GVolume*,char*);
     * }
     */
    public static MemorySegment get_identifier$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1405.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_identifier)(struct _GVolume*,char*);
     * }
     */
    public static void get_identifier$set(MemorySegment seg, MemorySegment x) {
        constants$1405.const$4.set(seg, x);
    }
    public static MemorySegment get_identifier$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1405.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_identifier$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1405.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_identifier get_identifier(MemorySegment segment, Arena scope) {
        return get_identifier.ofAddress(get_identifier$get(segment), scope);
    }
    /**
     * {@snippet :
 * char** (*enumerate_identifiers)(struct _GVolume*);
     * }
     */
    public interface enumerate_identifiers {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(enumerate_identifiers fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1405.const$5, fi, constants$5.const$2, scope);
        }
        static enumerate_identifiers ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle enumerate_identifiers$VH() {
        return constants$1406.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** (*enumerate_identifiers)(struct _GVolume*);
     * }
     */
    public static MemorySegment enumerate_identifiers$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1406.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** (*enumerate_identifiers)(struct _GVolume*);
     * }
     */
    public static void enumerate_identifiers$set(MemorySegment seg, MemorySegment x) {
        constants$1406.const$0.set(seg, x);
    }
    public static MemorySegment enumerate_identifiers$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1406.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void enumerate_identifiers$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1406.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static enumerate_identifiers enumerate_identifiers(MemorySegment segment, Arena scope) {
        return enumerate_identifiers.ofAddress(enumerate_identifiers$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*should_automount)(struct _GVolume*);
     * }
     */
    public interface should_automount {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(should_automount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1406.const$1, fi, constants$10.const$5, scope);
        }
        static should_automount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle should_automount$VH() {
        return constants$1406.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*should_automount)(struct _GVolume*);
     * }
     */
    public static MemorySegment should_automount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1406.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*should_automount)(struct _GVolume*);
     * }
     */
    public static void should_automount$set(MemorySegment seg, MemorySegment x) {
        constants$1406.const$2.set(seg, x);
    }
    public static MemorySegment should_automount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1406.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void should_automount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1406.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static should_automount should_automount(MemorySegment segment, Arena scope) {
        return should_automount.ofAddress(should_automount$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*get_activation_root)(struct _GVolume*);
     * }
     */
    public interface get_activation_root {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_activation_root fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1406.const$3, fi, constants$5.const$2, scope);
        }
        static get_activation_root ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_activation_root$VH() {
        return constants$1406.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*get_activation_root)(struct _GVolume*);
     * }
     */
    public static MemorySegment get_activation_root$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1406.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*get_activation_root)(struct _GVolume*);
     * }
     */
    public static void get_activation_root$set(MemorySegment seg, MemorySegment x) {
        constants$1406.const$4.set(seg, x);
    }
    public static MemorySegment get_activation_root$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1406.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_activation_root$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1406.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_activation_root get_activation_root(MemorySegment segment, Arena scope) {
        return get_activation_root.ofAddress(get_activation_root$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*eject_with_operation)(struct _GVolume*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface eject_with_operation {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(eject_with_operation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1406.const$5, fi, constants$380.const$0, scope);
        }
        static eject_with_operation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$945.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject_with_operation$VH() {
        return constants$1407.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*eject_with_operation)(struct _GVolume*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment eject_with_operation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1407.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*eject_with_operation)(struct _GVolume*,enum GMountUnmountFlags,struct _GMountOperation*,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void eject_with_operation$set(MemorySegment seg, MemorySegment x) {
        constants$1407.const$0.set(seg, x);
    }
    public static MemorySegment eject_with_operation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1407.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_with_operation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1407.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_with_operation eject_with_operation(MemorySegment segment, Arena scope) {
        return eject_with_operation.ofAddress(eject_with_operation$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*eject_with_operation_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface eject_with_operation_finish {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(eject_with_operation_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1407.const$1, fi, constants$12.const$2, scope);
        }
        static eject_with_operation_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle eject_with_operation_finish$VH() {
        return constants$1407.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*eject_with_operation_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment eject_with_operation_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1407.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*eject_with_operation_finish)(struct _GVolume*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void eject_with_operation_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1407.const$2.set(seg, x);
    }
    public static MemorySegment eject_with_operation_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1407.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_with_operation_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1407.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_with_operation_finish eject_with_operation_finish(MemorySegment segment, Arena scope) {
        return eject_with_operation_finish.ofAddress(eject_with_operation_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_sort_key)(struct _GVolume*);
     * }
     */
    public interface get_sort_key {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_sort_key fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1407.const$3, fi, constants$5.const$2, scope);
        }
        static get_sort_key ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_sort_key$VH() {
        return constants$1407.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_sort_key)(struct _GVolume*);
     * }
     */
    public static MemorySegment get_sort_key$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1407.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_sort_key)(struct _GVolume*);
     * }
     */
    public static void get_sort_key$set(MemorySegment seg, MemorySegment x) {
        constants$1407.const$4.set(seg, x);
    }
    public static MemorySegment get_sort_key$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1407.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_sort_key$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1407.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_sort_key get_sort_key(MemorySegment segment, Arena scope) {
        return get_sort_key.ofAddress(get_sort_key$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GIcon* (*get_symbolic_icon)(struct _GVolume*);
     * }
     */
    public interface get_symbolic_icon {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_symbolic_icon fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1407.const$5, fi, constants$5.const$2, scope);
        }
        static get_symbolic_icon ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_symbolic_icon$VH() {
        return constants$1408.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GIcon* (*get_symbolic_icon)(struct _GVolume*);
     * }
     */
    public static MemorySegment get_symbolic_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1408.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GIcon* (*get_symbolic_icon)(struct _GVolume*);
     * }
     */
    public static void get_symbolic_icon$set(MemorySegment seg, MemorySegment x) {
        constants$1408.const$0.set(seg, x);
    }
    public static MemorySegment get_symbolic_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1408.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_symbolic_icon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1408.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_symbolic_icon get_symbolic_icon(MemorySegment segment, Arena scope) {
        return get_symbolic_icon.ofAddress(get_symbolic_icon$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


