// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GSeekableIface {
 *     struct _GTypeInterface g_iface;
 *     long (*tell)(struct _GSeekable*);
 *     int (*can_seek)(struct _GSeekable*);
 *     int (*seek)(struct _GSeekable*,long,enum GSeekType,struct _GCancellable*,struct _GError**);
 *     int (*can_truncate)(struct _GSeekable*);
 *     int (*truncate_fn)(struct _GSeekable*,long,struct _GCancellable*,struct _GError**);
 * };
 * }
 */
public class _GSeekableIface {

    public static MemoryLayout $LAYOUT() {
        return constants$1248.const$5;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * long (*tell)(struct _GSeekable*);
     * }
     */
    public interface tell {

        long apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(tell fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1249.const$0, fi, constants$4.const$0, scope);
        }
        static tell ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (long)constants$1068.const$5.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle tell$VH() {
        return constants$1249.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*tell)(struct _GSeekable*);
     * }
     */
    public static MemorySegment tell$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1249.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*tell)(struct _GSeekable*);
     * }
     */
    public static void tell$set(MemorySegment seg, MemorySegment x) {
        constants$1249.const$1.set(seg, x);
    }
    public static MemorySegment tell$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1249.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tell$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1249.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static tell tell(MemorySegment segment, Arena scope) {
        return tell.ofAddress(tell$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_seek)(struct _GSeekable*);
     * }
     */
    public interface can_seek {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(can_seek fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1249.const$2, fi, constants$10.const$5, scope);
        }
        static can_seek ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_seek$VH() {
        return constants$1249.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_seek)(struct _GSeekable*);
     * }
     */
    public static MemorySegment can_seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1249.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_seek)(struct _GSeekable*);
     * }
     */
    public static void can_seek$set(MemorySegment seg, MemorySegment x) {
        constants$1249.const$3.set(seg, x);
    }
    public static MemorySegment can_seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1249.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void can_seek$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1249.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_seek can_seek(MemorySegment segment, Arena scope) {
        return can_seek.ofAddress(can_seek$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*seek)(struct _GSeekable*,long,enum GSeekType,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface seek {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(seek fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1249.const$4, fi, constants$1069.const$3, scope);
        }
        static seek ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$1069.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle seek$VH() {
        return constants$1249.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*seek)(struct _GSeekable*,long,enum GSeekType,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1249.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*seek)(struct _GSeekable*,long,enum GSeekType,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void seek$set(MemorySegment seg, MemorySegment x) {
        constants$1249.const$5.set(seg, x);
    }
    public static MemorySegment seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1249.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void seek$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1249.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static seek seek(MemorySegment segment, Arena scope) {
        return seek.ofAddress(seek$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_truncate)(struct _GSeekable*);
     * }
     */
    public interface can_truncate {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(can_truncate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1250.const$0, fi, constants$10.const$5, scope);
        }
        static can_truncate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_truncate$VH() {
        return constants$1250.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_truncate)(struct _GSeekable*);
     * }
     */
    public static MemorySegment can_truncate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1250.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_truncate)(struct _GSeekable*);
     * }
     */
    public static void can_truncate$set(MemorySegment seg, MemorySegment x) {
        constants$1250.const$1.set(seg, x);
    }
    public static MemorySegment can_truncate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1250.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void can_truncate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1250.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_truncate can_truncate(MemorySegment segment, Arena scope) {
        return can_truncate.ofAddress(can_truncate$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*truncate_fn)(struct _GSeekable*,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface truncate_fn {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(truncate_fn fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1250.const$2, fi, constants$394.const$4, scope);
        }
        static truncate_fn ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, long __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$1084.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle truncate_fn$VH() {
        return constants$1250.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*truncate_fn)(struct _GSeekable*,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment truncate_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1250.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*truncate_fn)(struct _GSeekable*,long,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void truncate_fn$set(MemorySegment seg, MemorySegment x) {
        constants$1250.const$3.set(seg, x);
    }
    public static MemorySegment truncate_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1250.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void truncate_fn$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1250.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static truncate_fn truncate_fn(MemorySegment segment, Arena scope) {
        return truncate_fn.ofAddress(truncate_fn$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


