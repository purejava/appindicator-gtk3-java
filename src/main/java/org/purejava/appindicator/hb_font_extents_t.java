// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct hb_font_extents_t {
 *     int ascender;
 *     int descender;
 *     int line_gap;
 *     int reserved9;
 *     int reserved8;
 *     int reserved7;
 *     int reserved6;
 *     int reserved5;
 *     int reserved4;
 *     int reserved3;
 *     int reserved2;
 *     int reserved1;
 * };
 * }
 */
public class hb_font_extents_t {

    public static MemoryLayout $LAYOUT() {
        return constants$1479.const$0;
    }
    public static VarHandle ascender$VH() {
        return constants$1479.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ascender;
     * }
     */
    public static int ascender$get(MemorySegment seg) {
        return (int)constants$1479.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ascender;
     * }
     */
    public static void ascender$set(MemorySegment seg, int x) {
        constants$1479.const$1.set(seg, x);
    }
    public static int ascender$get(MemorySegment seg, long index) {
        return (int)constants$1479.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ascender$set(MemorySegment seg, long index, int x) {
        constants$1479.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descender$VH() {
        return constants$1479.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int descender;
     * }
     */
    public static int descender$get(MemorySegment seg) {
        return (int)constants$1479.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int descender;
     * }
     */
    public static void descender$set(MemorySegment seg, int x) {
        constants$1479.const$2.set(seg, x);
    }
    public static int descender$get(MemorySegment seg, long index) {
        return (int)constants$1479.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void descender$set(MemorySegment seg, long index, int x) {
        constants$1479.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle line_gap$VH() {
        return constants$1479.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int line_gap;
     * }
     */
    public static int line_gap$get(MemorySegment seg) {
        return (int)constants$1479.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int line_gap;
     * }
     */
    public static void line_gap$set(MemorySegment seg, int x) {
        constants$1479.const$3.set(seg, x);
    }
    public static int line_gap$get(MemorySegment seg, long index) {
        return (int)constants$1479.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void line_gap$set(MemorySegment seg, long index, int x) {
        constants$1479.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved9$VH() {
        return constants$1479.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int reserved9;
     * }
     */
    public static int reserved9$get(MemorySegment seg) {
        return (int)constants$1479.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int reserved9;
     * }
     */
    public static void reserved9$set(MemorySegment seg, int x) {
        constants$1479.const$4.set(seg, x);
    }
    public static int reserved9$get(MemorySegment seg, long index) {
        return (int)constants$1479.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved9$set(MemorySegment seg, long index, int x) {
        constants$1479.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved8$VH() {
        return constants$1479.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int reserved8;
     * }
     */
    public static int reserved8$get(MemorySegment seg) {
        return (int)constants$1479.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int reserved8;
     * }
     */
    public static void reserved8$set(MemorySegment seg, int x) {
        constants$1479.const$5.set(seg, x);
    }
    public static int reserved8$get(MemorySegment seg, long index) {
        return (int)constants$1479.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved8$set(MemorySegment seg, long index, int x) {
        constants$1479.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved7$VH() {
        return constants$1480.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int reserved7;
     * }
     */
    public static int reserved7$get(MemorySegment seg) {
        return (int)constants$1480.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int reserved7;
     * }
     */
    public static void reserved7$set(MemorySegment seg, int x) {
        constants$1480.const$0.set(seg, x);
    }
    public static int reserved7$get(MemorySegment seg, long index) {
        return (int)constants$1480.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved7$set(MemorySegment seg, long index, int x) {
        constants$1480.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved6$VH() {
        return constants$1480.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int reserved6;
     * }
     */
    public static int reserved6$get(MemorySegment seg) {
        return (int)constants$1480.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int reserved6;
     * }
     */
    public static void reserved6$set(MemorySegment seg, int x) {
        constants$1480.const$1.set(seg, x);
    }
    public static int reserved6$get(MemorySegment seg, long index) {
        return (int)constants$1480.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved6$set(MemorySegment seg, long index, int x) {
        constants$1480.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved5$VH() {
        return constants$1480.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int reserved5;
     * }
     */
    public static int reserved5$get(MemorySegment seg) {
        return (int)constants$1480.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int reserved5;
     * }
     */
    public static void reserved5$set(MemorySegment seg, int x) {
        constants$1480.const$2.set(seg, x);
    }
    public static int reserved5$get(MemorySegment seg, long index) {
        return (int)constants$1480.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved5$set(MemorySegment seg, long index, int x) {
        constants$1480.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved4$VH() {
        return constants$1480.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int reserved4;
     * }
     */
    public static int reserved4$get(MemorySegment seg) {
        return (int)constants$1480.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int reserved4;
     * }
     */
    public static void reserved4$set(MemorySegment seg, int x) {
        constants$1480.const$3.set(seg, x);
    }
    public static int reserved4$get(MemorySegment seg, long index) {
        return (int)constants$1480.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved4$set(MemorySegment seg, long index, int x) {
        constants$1480.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved3$VH() {
        return constants$1480.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int reserved3;
     * }
     */
    public static int reserved3$get(MemorySegment seg) {
        return (int)constants$1480.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int reserved3;
     * }
     */
    public static void reserved3$set(MemorySegment seg, int x) {
        constants$1480.const$4.set(seg, x);
    }
    public static int reserved3$get(MemorySegment seg, long index) {
        return (int)constants$1480.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved3$set(MemorySegment seg, long index, int x) {
        constants$1480.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved2$VH() {
        return constants$1480.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int reserved2;
     * }
     */
    public static int reserved2$get(MemorySegment seg) {
        return (int)constants$1480.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int reserved2;
     * }
     */
    public static void reserved2$set(MemorySegment seg, int x) {
        constants$1480.const$5.set(seg, x);
    }
    public static int reserved2$get(MemorySegment seg, long index) {
        return (int)constants$1480.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved2$set(MemorySegment seg, long index, int x) {
        constants$1480.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved1$VH() {
        return constants$1481.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int reserved1;
     * }
     */
    public static int reserved1$get(MemorySegment seg) {
        return (int)constants$1481.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int reserved1;
     * }
     */
    public static void reserved1$set(MemorySegment seg, int x) {
        constants$1481.const$0.set(seg, x);
    }
    public static int reserved1$get(MemorySegment seg, long index) {
        return (int)constants$1481.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved1$set(MemorySegment seg, long index, int x) {
        constants$1481.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


