// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GPermissionClass {
 *     GObjectClass parent_class;
 *     gboolean (*acquire)(GPermission *, GCancellable *, GError **);
 *     void (*acquire_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer);
 *     gboolean (*acquire_finish)(GPermission *, GAsyncResult *, GError **);
 *     gboolean (*release)(GPermission *, GCancellable *, GError **);
 *     void (*release_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer);
 *     gboolean (*release_finish)(GPermission *, GAsyncResult *, GError **);
 *     gpointer reserved[16];
 * }
 * }
 */
public class _GPermissionClass {

    _GPermissionClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("acquire"),
        app_indicator_h.C_POINTER.withName("acquire_async"),
        app_indicator_h.C_POINTER.withName("acquire_finish"),
        app_indicator_h.C_POINTER.withName("release"),
        app_indicator_h.C_POINTER.withName("release_async"),
        app_indicator_h.C_POINTER.withName("release_finish"),
        MemoryLayout.sequenceLayout(16, app_indicator_h.C_POINTER).withName("reserved")
    ).withName("_GPermissionClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * gboolean (*acquire)(GPermission *, GCancellable *, GError **)
     * }
     */
    public class acquire {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(acquire.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(acquire.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout acquire$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("acquire"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*acquire)(GPermission *, GCancellable *, GError **)
     * }
     */
    public static final AddressLayout acquire$layout() {
        return acquire$LAYOUT;
    }

    private static final long acquire$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*acquire)(GPermission *, GCancellable *, GError **)
     * }
     */
    public static final long acquire$offset() {
        return acquire$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*acquire)(GPermission *, GCancellable *, GError **)
     * }
     */
    public static MemorySegment acquire(MemorySegment struct) {
        return struct.get(acquire$LAYOUT, acquire$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*acquire)(GPermission *, GCancellable *, GError **)
     * }
     */
    public static void acquire(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(acquire$LAYOUT, acquire$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*acquire_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class acquire_async {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(acquire_async.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(acquire_async.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout acquire_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("acquire_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*acquire_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout acquire_async$layout() {
        return acquire_async$LAYOUT;
    }

    private static final long acquire_async$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*acquire_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long acquire_async$offset() {
        return acquire_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*acquire_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment acquire_async(MemorySegment struct) {
        return struct.get(acquire_async$LAYOUT, acquire_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*acquire_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void acquire_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(acquire_async$LAYOUT, acquire_async$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*acquire_finish)(GPermission *, GAsyncResult *, GError **)
     * }
     */
    public class acquire_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(acquire_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(acquire_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout acquire_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("acquire_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*acquire_finish)(GPermission *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout acquire_finish$layout() {
        return acquire_finish$LAYOUT;
    }

    private static final long acquire_finish$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*acquire_finish)(GPermission *, GAsyncResult *, GError **)
     * }
     */
    public static final long acquire_finish$offset() {
        return acquire_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*acquire_finish)(GPermission *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment acquire_finish(MemorySegment struct) {
        return struct.get(acquire_finish$LAYOUT, acquire_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*acquire_finish)(GPermission *, GAsyncResult *, GError **)
     * }
     */
    public static void acquire_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(acquire_finish$LAYOUT, acquire_finish$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*release)(GPermission *, GCancellable *, GError **)
     * }
     */
    public class release {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*release)(GPermission *, GCancellable *, GError **)
     * }
     */
    public static final AddressLayout release$layout() {
        return release$LAYOUT;
    }

    private static final long release$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*release)(GPermission *, GCancellable *, GError **)
     * }
     */
    public static final long release$offset() {
        return release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*release)(GPermission *, GCancellable *, GError **)
     * }
     */
    public static MemorySegment release(MemorySegment struct) {
        return struct.get(release$LAYOUT, release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*release)(GPermission *, GCancellable *, GError **)
     * }
     */
    public static void release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(release$LAYOUT, release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*release_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public class release_async {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(release_async.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(release_async.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout release_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("release_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*release_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final AddressLayout release_async$layout() {
        return release_async$LAYOUT;
    }

    private static final long release_async$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*release_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static final long release_async$offset() {
        return release_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*release_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static MemorySegment release_async(MemorySegment struct) {
        return struct.get(release_async$LAYOUT, release_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*release_async)(GPermission *, GCancellable *, GAsyncReadyCallback, gpointer)
     * }
     */
    public static void release_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(release_async$LAYOUT, release_async$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*release_finish)(GPermission *, GAsyncResult *, GError **)
     * }
     */
    public class release_finish {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(release_finish.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(release_finish.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout release_finish$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("release_finish"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*release_finish)(GPermission *, GAsyncResult *, GError **)
     * }
     */
    public static final AddressLayout release_finish$layout() {
        return release_finish$LAYOUT;
    }

    private static final long release_finish$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*release_finish)(GPermission *, GAsyncResult *, GError **)
     * }
     */
    public static final long release_finish$offset() {
        return release_finish$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*release_finish)(GPermission *, GAsyncResult *, GError **)
     * }
     */
    public static MemorySegment release_finish(MemorySegment struct) {
        return struct.get(release_finish$LAYOUT, release_finish$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*release_finish)(GPermission *, GAsyncResult *, GError **)
     * }
     */
    public static void release_finish(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(release_finish$LAYOUT, release_finish$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gpointer reserved[16]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gpointer reserved[16]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gpointer reserved[16]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gpointer reserved[16]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * gpointer reserved[16]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * gpointer reserved[16]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct, long index0) {
        return (MemorySegment)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * gpointer reserved[16]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, MemorySegment fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

