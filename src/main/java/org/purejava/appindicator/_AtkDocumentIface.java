// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _AtkDocumentIface {
 *     struct _GTypeInterface parent;
 *     char* (*get_document_type)(struct _AtkDocument*);
 *     void* (*get_document)(struct _AtkDocument*);
 *     char* (*get_document_locale)(struct _AtkDocument*);
 *     struct _GSList* (*get_document_attributes)(struct _AtkDocument*);
 *     char* (*get_document_attribute_value)(struct _AtkDocument*,char*);
 *     int (*set_document_attribute)(struct _AtkDocument*,char*,char*);
 *     int (*get_current_page_number)(struct _AtkDocument*);
 *     int (*get_page_count)(struct _AtkDocument*);
 * };
 * }
 */
public class _AtkDocumentIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2009.const$2;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * char* (*get_document_type)(struct _AtkDocument*);
     * }
     */
    public interface get_document_type {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_document_type fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2009.const$3, fi, constants$5.const$2, scope);
        }
        static get_document_type ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_document_type$VH() {
        return constants$2009.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_document_type)(struct _AtkDocument*);
     * }
     */
    public static MemorySegment get_document_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2009.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_document_type)(struct _AtkDocument*);
     * }
     */
    public static void get_document_type$set(MemorySegment seg, MemorySegment x) {
        constants$2009.const$4.set(seg, x);
    }
    public static MemorySegment get_document_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2009.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_document_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2009.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_document_type get_document_type(MemorySegment segment, Arena scope) {
        return get_document_type.ofAddress(get_document_type$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*get_document)(struct _AtkDocument*);
     * }
     */
    public interface get_document {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_document fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2009.const$5, fi, constants$5.const$2, scope);
        }
        static get_document ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_document$VH() {
        return constants$2010.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*get_document)(struct _AtkDocument*);
     * }
     */
    public static MemorySegment get_document$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2010.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*get_document)(struct _AtkDocument*);
     * }
     */
    public static void get_document$set(MemorySegment seg, MemorySegment x) {
        constants$2010.const$0.set(seg, x);
    }
    public static MemorySegment get_document$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2010.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_document$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2010.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_document get_document(MemorySegment segment, Arena scope) {
        return get_document.ofAddress(get_document$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_document_locale)(struct _AtkDocument*);
     * }
     */
    public interface get_document_locale {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_document_locale fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2010.const$1, fi, constants$5.const$2, scope);
        }
        static get_document_locale ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_document_locale$VH() {
        return constants$2010.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_document_locale)(struct _AtkDocument*);
     * }
     */
    public static MemorySegment get_document_locale$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2010.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_document_locale)(struct _AtkDocument*);
     * }
     */
    public static void get_document_locale$set(MemorySegment seg, MemorySegment x) {
        constants$2010.const$2.set(seg, x);
    }
    public static MemorySegment get_document_locale$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2010.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_document_locale$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2010.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_document_locale get_document_locale(MemorySegment segment, Arena scope) {
        return get_document_locale.ofAddress(get_document_locale$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GSList* (*get_document_attributes)(struct _AtkDocument*);
     * }
     */
    public interface get_document_attributes {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_document_attributes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2010.const$3, fi, constants$5.const$2, scope);
        }
        static get_document_attributes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_document_attributes$VH() {
        return constants$2010.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GSList* (*get_document_attributes)(struct _AtkDocument*);
     * }
     */
    public static MemorySegment get_document_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2010.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GSList* (*get_document_attributes)(struct _AtkDocument*);
     * }
     */
    public static void get_document_attributes$set(MemorySegment seg, MemorySegment x) {
        constants$2010.const$4.set(seg, x);
    }
    public static MemorySegment get_document_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2010.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_document_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2010.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_document_attributes get_document_attributes(MemorySegment segment, Arena scope) {
        return get_document_attributes.ofAddress(get_document_attributes$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_document_attribute_value)(struct _AtkDocument*,char*);
     * }
     */
    public interface get_document_attribute_value {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_document_attribute_value fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2010.const$5, fi, constants$5.const$5, scope);
        }
        static get_document_attribute_value ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_document_attribute_value$VH() {
        return constants$2011.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_document_attribute_value)(struct _AtkDocument*,char*);
     * }
     */
    public static MemorySegment get_document_attribute_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_document_attribute_value)(struct _AtkDocument*,char*);
     * }
     */
    public static void get_document_attribute_value$set(MemorySegment seg, MemorySegment x) {
        constants$2011.const$0.set(seg, x);
    }
    public static MemorySegment get_document_attribute_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_document_attribute_value$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2011.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_document_attribute_value get_document_attribute_value(MemorySegment segment, Arena scope) {
        return get_document_attribute_value.ofAddress(get_document_attribute_value$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*set_document_attribute)(struct _AtkDocument*,char*,char*);
     * }
     */
    public interface set_document_attribute {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_document_attribute fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2011.const$1, fi, constants$12.const$2, scope);
        }
        static set_document_attribute ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_document_attribute$VH() {
        return constants$2011.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_document_attribute)(struct _AtkDocument*,char*,char*);
     * }
     */
    public static MemorySegment set_document_attribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_document_attribute)(struct _AtkDocument*,char*,char*);
     * }
     */
    public static void set_document_attribute$set(MemorySegment seg, MemorySegment x) {
        constants$2011.const$2.set(seg, x);
    }
    public static MemorySegment set_document_attribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void set_document_attribute$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2011.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_document_attribute set_document_attribute(MemorySegment segment, Arena scope) {
        return set_document_attribute.ofAddress(set_document_attribute$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_current_page_number)(struct _AtkDocument*);
     * }
     */
    public interface get_current_page_number {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_current_page_number fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2011.const$3, fi, constants$10.const$5, scope);
        }
        static get_current_page_number ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_current_page_number$VH() {
        return constants$2011.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_current_page_number)(struct _AtkDocument*);
     * }
     */
    public static MemorySegment get_current_page_number$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_current_page_number)(struct _AtkDocument*);
     * }
     */
    public static void get_current_page_number$set(MemorySegment seg, MemorySegment x) {
        constants$2011.const$4.set(seg, x);
    }
    public static MemorySegment get_current_page_number$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2011.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_current_page_number$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2011.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_current_page_number get_current_page_number(MemorySegment segment, Arena scope) {
        return get_current_page_number.ofAddress(get_current_page_number$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_page_count)(struct _AtkDocument*);
     * }
     */
    public interface get_page_count {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_page_count fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2011.const$5, fi, constants$10.const$5, scope);
        }
        static get_page_count ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_page_count$VH() {
        return constants$2012.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_page_count)(struct _AtkDocument*);
     * }
     */
    public static MemorySegment get_page_count$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2012.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_page_count)(struct _AtkDocument*);
     * }
     */
    public static void get_page_count$set(MemorySegment seg, MemorySegment x) {
        constants$2012.const$0.set(seg, x);
    }
    public static MemorySegment get_page_count$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2012.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_page_count$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2012.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_page_count get_page_count(MemorySegment segment, Arena scope) {
        return get_page_count.ofAddress(get_page_count$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


