// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct ucontext_t {
 *     unsigned long uc_flags;
 *     struct ucontext_t* uc_link;
 *     struct stack_t uc_stack;
 *     struct __sigset_t uc_sigmask;
 *     struct mcontext_t uc_mcontext;
 * };
 * }
 */
public class ucontext_t {

    public static MemoryLayout $LAYOUT() {
        return constants$143.const$4;
    }
    public static VarHandle uc_flags$VH() {
        return constants$143.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long uc_flags;
     * }
     */
    public static long uc_flags$get(MemorySegment seg) {
        return (long)constants$143.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long uc_flags;
     * }
     */
    public static void uc_flags$set(MemorySegment seg, long x) {
        constants$143.const$5.set(seg, x);
    }
    public static long uc_flags$get(MemorySegment seg, long index) {
        return (long)constants$143.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void uc_flags$set(MemorySegment seg, long index, long x) {
        constants$143.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle uc_link$VH() {
        return constants$144.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct ucontext_t* uc_link;
     * }
     */
    public static MemorySegment uc_link$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$144.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct ucontext_t* uc_link;
     * }
     */
    public static void uc_link$set(MemorySegment seg, MemorySegment x) {
        constants$144.const$0.set(seg, x);
    }
    public static MemorySegment uc_link$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$144.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void uc_link$set(MemorySegment seg, long index, MemorySegment x) {
        constants$144.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment uc_stack$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    public static MemorySegment uc_sigmask$slice(MemorySegment seg) {
        return seg.asSlice(40, 128);
    }
    public static MemorySegment uc_mcontext$slice(MemorySegment seg) {
        return seg.asSlice(176, 4384);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


