// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct elf_prstatus {
 *     struct elf_siginfo pr_info;
 *     short pr_cursig;
 *     unsigned long pr_sigpend;
 *     unsigned long pr_sighold;
 *     int pr_pid;
 *     int pr_ppid;
 *     int pr_pgrp;
 *     int pr_sid;
 *     struct timeval pr_utime;
 *     struct timeval pr_stime;
 *     struct timeval pr_cutime;
 *     struct timeval pr_cstime;
 *     unsigned long pr_reg[34];
 *     int pr_fpvalid;
 * };
 * }
 */
public class elf_prstatus {

    public static MemoryLayout $LAYOUT() {
        return constants$139.const$2;
    }
    public static MemorySegment pr_info$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static VarHandle pr_cursig$VH() {
        return constants$139.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short pr_cursig;
     * }
     */
    public static short pr_cursig$get(MemorySegment seg) {
        return (short)constants$139.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short pr_cursig;
     * }
     */
    public static void pr_cursig$set(MemorySegment seg, short x) {
        constants$139.const$3.set(seg, x);
    }
    public static short pr_cursig$get(MemorySegment seg, long index) {
        return (short)constants$139.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pr_cursig$set(MemorySegment seg, long index, short x) {
        constants$139.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pr_sigpend$VH() {
        return constants$139.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long pr_sigpend;
     * }
     */
    public static long pr_sigpend$get(MemorySegment seg) {
        return (long)constants$139.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long pr_sigpend;
     * }
     */
    public static void pr_sigpend$set(MemorySegment seg, long x) {
        constants$139.const$4.set(seg, x);
    }
    public static long pr_sigpend$get(MemorySegment seg, long index) {
        return (long)constants$139.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pr_sigpend$set(MemorySegment seg, long index, long x) {
        constants$139.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pr_sighold$VH() {
        return constants$139.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long pr_sighold;
     * }
     */
    public static long pr_sighold$get(MemorySegment seg) {
        return (long)constants$139.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long pr_sighold;
     * }
     */
    public static void pr_sighold$set(MemorySegment seg, long x) {
        constants$139.const$5.set(seg, x);
    }
    public static long pr_sighold$get(MemorySegment seg, long index) {
        return (long)constants$139.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pr_sighold$set(MemorySegment seg, long index, long x) {
        constants$139.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pr_pid$VH() {
        return constants$140.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pr_pid;
     * }
     */
    public static int pr_pid$get(MemorySegment seg) {
        return (int)constants$140.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pr_pid;
     * }
     */
    public static void pr_pid$set(MemorySegment seg, int x) {
        constants$140.const$0.set(seg, x);
    }
    public static int pr_pid$get(MemorySegment seg, long index) {
        return (int)constants$140.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pr_pid$set(MemorySegment seg, long index, int x) {
        constants$140.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pr_ppid$VH() {
        return constants$140.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pr_ppid;
     * }
     */
    public static int pr_ppid$get(MemorySegment seg) {
        return (int)constants$140.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pr_ppid;
     * }
     */
    public static void pr_ppid$set(MemorySegment seg, int x) {
        constants$140.const$1.set(seg, x);
    }
    public static int pr_ppid$get(MemorySegment seg, long index) {
        return (int)constants$140.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pr_ppid$set(MemorySegment seg, long index, int x) {
        constants$140.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pr_pgrp$VH() {
        return constants$140.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pr_pgrp;
     * }
     */
    public static int pr_pgrp$get(MemorySegment seg) {
        return (int)constants$140.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pr_pgrp;
     * }
     */
    public static void pr_pgrp$set(MemorySegment seg, int x) {
        constants$140.const$2.set(seg, x);
    }
    public static int pr_pgrp$get(MemorySegment seg, long index) {
        return (int)constants$140.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pr_pgrp$set(MemorySegment seg, long index, int x) {
        constants$140.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pr_sid$VH() {
        return constants$140.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pr_sid;
     * }
     */
    public static int pr_sid$get(MemorySegment seg) {
        return (int)constants$140.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pr_sid;
     * }
     */
    public static void pr_sid$set(MemorySegment seg, int x) {
        constants$140.const$3.set(seg, x);
    }
    public static int pr_sid$get(MemorySegment seg, long index) {
        return (int)constants$140.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pr_sid$set(MemorySegment seg, long index, int x) {
        constants$140.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pr_utime$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static MemorySegment pr_stime$slice(MemorySegment seg) {
        return seg.asSlice(64, 16);
    }
    public static MemorySegment pr_cutime$slice(MemorySegment seg) {
        return seg.asSlice(80, 16);
    }
    public static MemorySegment pr_cstime$slice(MemorySegment seg) {
        return seg.asSlice(96, 16);
    }
    public static MemorySegment pr_reg$slice(MemorySegment seg) {
        return seg.asSlice(112, 272);
    }
    public static VarHandle pr_fpvalid$VH() {
        return constants$140.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pr_fpvalid;
     * }
     */
    public static int pr_fpvalid$get(MemorySegment seg) {
        return (int)constants$140.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pr_fpvalid;
     * }
     */
    public static void pr_fpvalid$set(MemorySegment seg, int x) {
        constants$140.const$4.set(seg, x);
    }
    public static int pr_fpvalid$get(MemorySegment seg, long index) {
        return (int)constants$140.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pr_fpvalid$set(MemorySegment seg, long index, int x) {
        constants$140.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


