// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkAppChooserWidgetClass {
 *     struct _GtkBoxClass parent_class;
 *     void (*application_selected)(struct _GtkAppChooserWidget*,struct _GAppInfo*);
 *     void (*application_activated)(struct _GtkAppChooserWidget*,struct _GAppInfo*);
 *     void (*populate_popup)(struct _GtkAppChooserWidget*,struct _GtkMenu*,struct _GAppInfo*);
 *     void* padding[16];
 * };
 * }
 */
public class _GtkAppChooserWidgetClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2288.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 1008);
    }
    /**
     * {@snippet :
 * void (*application_selected)(struct _GtkAppChooserWidget*,struct _GAppInfo*);
     * }
     */
    public interface application_selected {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(application_selected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2289.const$0, fi, constants$13.const$4, scope);
        }
        static application_selected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle application_selected$VH() {
        return constants$2289.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*application_selected)(struct _GtkAppChooserWidget*,struct _GAppInfo*);
     * }
     */
    public static MemorySegment application_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*application_selected)(struct _GtkAppChooserWidget*,struct _GAppInfo*);
     * }
     */
    public static void application_selected$set(MemorySegment seg, MemorySegment x) {
        constants$2289.const$1.set(seg, x);
    }
    public static MemorySegment application_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void application_selected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2289.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static application_selected application_selected(MemorySegment segment, Arena scope) {
        return application_selected.ofAddress(application_selected$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*application_activated)(struct _GtkAppChooserWidget*,struct _GAppInfo*);
     * }
     */
    public interface application_activated {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(application_activated fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2289.const$2, fi, constants$13.const$4, scope);
        }
        static application_activated ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle application_activated$VH() {
        return constants$2289.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*application_activated)(struct _GtkAppChooserWidget*,struct _GAppInfo*);
     * }
     */
    public static MemorySegment application_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*application_activated)(struct _GtkAppChooserWidget*,struct _GAppInfo*);
     * }
     */
    public static void application_activated$set(MemorySegment seg, MemorySegment x) {
        constants$2289.const$3.set(seg, x);
    }
    public static MemorySegment application_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void application_activated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2289.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static application_activated application_activated(MemorySegment segment, Arena scope) {
        return application_activated.ofAddress(application_activated$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*populate_popup)(struct _GtkAppChooserWidget*,struct _GtkMenu*,struct _GAppInfo*);
     * }
     */
    public interface populate_popup {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(populate_popup fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2289.const$4, fi, constants$14.const$3, scope);
        }
        static populate_popup ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle populate_popup$VH() {
        return constants$2289.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*populate_popup)(struct _GtkAppChooserWidget*,struct _GtkMenu*,struct _GAppInfo*);
     * }
     */
    public static MemorySegment populate_popup$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*populate_popup)(struct _GtkAppChooserWidget*,struct _GtkMenu*,struct _GAppInfo*);
     * }
     */
    public static void populate_popup$set(MemorySegment seg, MemorySegment x) {
        constants$2289.const$5.set(seg, x);
    }
    public static MemorySegment populate_popup$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2289.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void populate_popup$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2289.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static populate_popup populate_popup(MemorySegment segment, Arena scope) {
        return populate_popup.ofAddress(populate_popup$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(1032, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


