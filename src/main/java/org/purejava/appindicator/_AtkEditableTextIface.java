// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _AtkEditableTextIface {
 *     GTypeInterface parent_interface;
 *     gboolean (*set_run_attributes)(AtkEditableText *, AtkAttributeSet *, gint, gint);
 *     void (*set_text_contents)(AtkEditableText *, const gchar *);
 *     void (*insert_text)(AtkEditableText *, const gchar *, gint, gint *);
 *     void (*copy_text)(AtkEditableText *, gint, gint);
 *     void (*cut_text)(AtkEditableText *, gint, gint);
 *     void (*delete_text)(AtkEditableText *, gint, gint);
 *     void (*paste_text)(AtkEditableText *, gint);
 * }
 * }
 */
public class _AtkEditableTextIface {

    _AtkEditableTextIface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GTypeInterface.layout().withName("parent_interface"),
        app_indicator_h.C_POINTER.withName("set_run_attributes"),
        app_indicator_h.C_POINTER.withName("set_text_contents"),
        app_indicator_h.C_POINTER.withName("insert_text"),
        app_indicator_h.C_POINTER.withName("copy_text"),
        app_indicator_h.C_POINTER.withName("cut_text"),
        app_indicator_h.C_POINTER.withName("delete_text"),
        app_indicator_h.C_POINTER.withName("paste_text")
    ).withName("_AtkEditableTextIface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_interface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_interface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GTypeInterface parent_interface
     * }
     */
    public static final GroupLayout parent_interface$layout() {
        return parent_interface$LAYOUT;
    }

    private static final long parent_interface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GTypeInterface parent_interface
     * }
     */
    public static final long parent_interface$offset() {
        return parent_interface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GTypeInterface parent_interface
     * }
     */
    public static MemorySegment parent_interface(MemorySegment struct) {
        return struct.asSlice(parent_interface$OFFSET, parent_interface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GTypeInterface parent_interface
     * }
     */
    public static void parent_interface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_interface$OFFSET, parent_interface$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * gboolean (*set_run_attributes)(AtkEditableText *, AtkAttributeSet *, gint, gint)
     * }
     */
    public class set_run_attributes {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(set_run_attributes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_run_attributes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_run_attributes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_run_attributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*set_run_attributes)(AtkEditableText *, AtkAttributeSet *, gint, gint)
     * }
     */
    public static final AddressLayout set_run_attributes$layout() {
        return set_run_attributes$LAYOUT;
    }

    private static final long set_run_attributes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*set_run_attributes)(AtkEditableText *, AtkAttributeSet *, gint, gint)
     * }
     */
    public static final long set_run_attributes$offset() {
        return set_run_attributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*set_run_attributes)(AtkEditableText *, AtkAttributeSet *, gint, gint)
     * }
     */
    public static MemorySegment set_run_attributes(MemorySegment struct) {
        return struct.get(set_run_attributes$LAYOUT, set_run_attributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*set_run_attributes)(AtkEditableText *, AtkAttributeSet *, gint, gint)
     * }
     */
    public static void set_run_attributes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_run_attributes$LAYOUT, set_run_attributes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*set_text_contents)(AtkEditableText *, const gchar *)
     * }
     */
    public class set_text_contents {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(set_text_contents.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(set_text_contents.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout set_text_contents$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("set_text_contents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*set_text_contents)(AtkEditableText *, const gchar *)
     * }
     */
    public static final AddressLayout set_text_contents$layout() {
        return set_text_contents$LAYOUT;
    }

    private static final long set_text_contents$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*set_text_contents)(AtkEditableText *, const gchar *)
     * }
     */
    public static final long set_text_contents$offset() {
        return set_text_contents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*set_text_contents)(AtkEditableText *, const gchar *)
     * }
     */
    public static MemorySegment set_text_contents(MemorySegment struct) {
        return struct.get(set_text_contents$LAYOUT, set_text_contents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*set_text_contents)(AtkEditableText *, const gchar *)
     * }
     */
    public static void set_text_contents(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(set_text_contents$LAYOUT, set_text_contents$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*insert_text)(AtkEditableText *, const gchar *, gint, gint *)
     * }
     */
    public class insert_text {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(insert_text.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(insert_text.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout insert_text$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("insert_text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*insert_text)(AtkEditableText *, const gchar *, gint, gint *)
     * }
     */
    public static final AddressLayout insert_text$layout() {
        return insert_text$LAYOUT;
    }

    private static final long insert_text$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*insert_text)(AtkEditableText *, const gchar *, gint, gint *)
     * }
     */
    public static final long insert_text$offset() {
        return insert_text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*insert_text)(AtkEditableText *, const gchar *, gint, gint *)
     * }
     */
    public static MemorySegment insert_text(MemorySegment struct) {
        return struct.get(insert_text$LAYOUT, insert_text$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*insert_text)(AtkEditableText *, const gchar *, gint, gint *)
     * }
     */
    public static void insert_text(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(insert_text$LAYOUT, insert_text$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*copy_text)(AtkEditableText *, gint, gint)
     * }
     */
    public class copy_text {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(copy_text.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(copy_text.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout copy_text$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("copy_text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*copy_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static final AddressLayout copy_text$layout() {
        return copy_text$LAYOUT;
    }

    private static final long copy_text$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*copy_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static final long copy_text$offset() {
        return copy_text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*copy_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static MemorySegment copy_text(MemorySegment struct) {
        return struct.get(copy_text$LAYOUT, copy_text$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*copy_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static void copy_text(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(copy_text$LAYOUT, copy_text$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*cut_text)(AtkEditableText *, gint, gint)
     * }
     */
    public class cut_text {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(cut_text.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(cut_text.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout cut_text$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cut_text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*cut_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static final AddressLayout cut_text$layout() {
        return cut_text$LAYOUT;
    }

    private static final long cut_text$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*cut_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static final long cut_text$offset() {
        return cut_text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*cut_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static MemorySegment cut_text(MemorySegment struct) {
        return struct.get(cut_text$LAYOUT, cut_text$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*cut_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static void cut_text(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cut_text$LAYOUT, cut_text$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*delete_text)(AtkEditableText *, gint, gint)
     * }
     */
    public class delete_text {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(delete_text.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(delete_text.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout delete_text$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("delete_text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*delete_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static final AddressLayout delete_text$layout() {
        return delete_text$LAYOUT;
    }

    private static final long delete_text$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*delete_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static final long delete_text$offset() {
        return delete_text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*delete_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static MemorySegment delete_text(MemorySegment struct) {
        return struct.get(delete_text$LAYOUT, delete_text$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*delete_text)(AtkEditableText *, gint, gint)
     * }
     */
    public static void delete_text(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(delete_text$LAYOUT, delete_text$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*paste_text)(AtkEditableText *, gint)
     * }
     */
    public class paste_text {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(paste_text.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(paste_text.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout paste_text$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("paste_text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*paste_text)(AtkEditableText *, gint)
     * }
     */
    public static final AddressLayout paste_text$layout() {
        return paste_text$LAYOUT;
    }

    private static final long paste_text$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*paste_text)(AtkEditableText *, gint)
     * }
     */
    public static final long paste_text$offset() {
        return paste_text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*paste_text)(AtkEditableText *, gint)
     * }
     */
    public static MemorySegment paste_text(MemorySegment struct) {
        return struct.get(paste_text$LAYOUT, paste_text$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*paste_text)(AtkEditableText *, gint)
     * }
     */
    public static void paste_text(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(paste_text$LAYOUT, paste_text$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

