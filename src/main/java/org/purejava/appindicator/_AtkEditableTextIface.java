// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _AtkEditableTextIface {
 *     struct _GTypeInterface parent_interface;
 *     int (*set_run_attributes)(struct _AtkEditableText*,struct _GSList*,int,int);
 *     void (*set_text_contents)(struct _AtkEditableText*,char*);
 *     void (*insert_text)(struct _AtkEditableText*,char*,int,int*);
 *     void (*copy_text)(struct _AtkEditableText*,int,int);
 *     void (*cut_text)(struct _AtkEditableText*,int,int);
 *     void (*delete_text)(struct _AtkEditableText*,int,int);
 *     void (*paste_text)(struct _AtkEditableText*,int);
 * };
 * }
 */
public class _AtkEditableTextIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2024.const$4;
    }
    public static MemorySegment parent_interface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * int (*set_run_attributes)(struct _AtkEditableText*,struct _GSList*,int,int);
     * }
     */
    public interface set_run_attributes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(set_run_attributes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2024.const$5, fi, constants$414.const$4, scope);
        }
        static set_run_attributes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$1950.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_run_attributes$VH() {
        return constants$2025.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*set_run_attributes)(struct _AtkEditableText*,struct _GSList*,int,int);
     * }
     */
    public static MemorySegment set_run_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2025.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*set_run_attributes)(struct _AtkEditableText*,struct _GSList*,int,int);
     * }
     */
    public static void set_run_attributes$set(MemorySegment seg, MemorySegment x) {
        constants$2025.const$0.set(seg, x);
    }
    public static MemorySegment set_run_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2025.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void set_run_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2025.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_run_attributes set_run_attributes(MemorySegment segment, Arena scope) {
        return set_run_attributes.ofAddress(set_run_attributes$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_text_contents)(struct _AtkEditableText*,char*);
     * }
     */
    public interface set_text_contents {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_text_contents fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2025.const$1, fi, constants$13.const$4, scope);
        }
        static set_text_contents ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_text_contents$VH() {
        return constants$2025.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_text_contents)(struct _AtkEditableText*,char*);
     * }
     */
    public static MemorySegment set_text_contents$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2025.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_text_contents)(struct _AtkEditableText*,char*);
     * }
     */
    public static void set_text_contents$set(MemorySegment seg, MemorySegment x) {
        constants$2025.const$2.set(seg, x);
    }
    public static MemorySegment set_text_contents$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2025.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void set_text_contents$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2025.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_text_contents set_text_contents(MemorySegment segment, Arena scope) {
        return set_text_contents.ofAddress(set_text_contents$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*insert_text)(struct _AtkEditableText*,char*,int,int*);
     * }
     */
    public interface insert_text {

        void apply(java.lang.foreign.MemorySegment clipboard, java.lang.foreign.MemorySegment atoms, int n_atoms, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(insert_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2025.const$3, fi, constants$464.const$4, scope);
        }
        static insert_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _clipboard, java.lang.foreign.MemorySegment _atoms, int _n_atoms, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$737.const$4.invokeExact(symbol, _clipboard, _atoms, _n_atoms, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insert_text$VH() {
        return constants$2025.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*insert_text)(struct _AtkEditableText*,char*,int,int*);
     * }
     */
    public static MemorySegment insert_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2025.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*insert_text)(struct _AtkEditableText*,char*,int,int*);
     * }
     */
    public static void insert_text$set(MemorySegment seg, MemorySegment x) {
        constants$2025.const$4.set(seg, x);
    }
    public static MemorySegment insert_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2025.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2025.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_text insert_text(MemorySegment segment, Arena scope) {
        return insert_text.ofAddress(insert_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*copy_text)(struct _AtkEditableText*,int,int);
     * }
     */
    public interface copy_text {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(copy_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2025.const$5, fi, constants$467.const$3, scope);
        }
        static copy_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1901.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle copy_text$VH() {
        return constants$2026.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*copy_text)(struct _AtkEditableText*,int,int);
     * }
     */
    public static MemorySegment copy_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2026.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*copy_text)(struct _AtkEditableText*,int,int);
     * }
     */
    public static void copy_text$set(MemorySegment seg, MemorySegment x) {
        constants$2026.const$0.set(seg, x);
    }
    public static MemorySegment copy_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2026.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2026.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_text copy_text(MemorySegment segment, Arena scope) {
        return copy_text.ofAddress(copy_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*cut_text)(struct _AtkEditableText*,int,int);
     * }
     */
    public interface cut_text {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(cut_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2026.const$1, fi, constants$467.const$3, scope);
        }
        static cut_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1901.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cut_text$VH() {
        return constants$2026.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*cut_text)(struct _AtkEditableText*,int,int);
     * }
     */
    public static MemorySegment cut_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2026.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*cut_text)(struct _AtkEditableText*,int,int);
     * }
     */
    public static void cut_text$set(MemorySegment seg, MemorySegment x) {
        constants$2026.const$2.set(seg, x);
    }
    public static MemorySegment cut_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2026.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void cut_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2026.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static cut_text cut_text(MemorySegment segment, Arena scope) {
        return cut_text.ofAddress(cut_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*delete_text)(struct _AtkEditableText*,int,int);
     * }
     */
    public interface delete_text {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(delete_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2026.const$3, fi, constants$467.const$3, scope);
        }
        static delete_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1901.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle delete_text$VH() {
        return constants$2026.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*delete_text)(struct _AtkEditableText*,int,int);
     * }
     */
    public static MemorySegment delete_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2026.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*delete_text)(struct _AtkEditableText*,int,int);
     * }
     */
    public static void delete_text$set(MemorySegment seg, MemorySegment x) {
        constants$2026.const$4.set(seg, x);
    }
    public static MemorySegment delete_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2026.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2026.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_text delete_text(MemorySegment segment, Arena scope) {
        return delete_text.ofAddress(delete_text$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*paste_text)(struct _AtkEditableText*,int);
     * }
     */
    public interface paste_text {

        void apply(java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(paste_text fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2026.const$5, fi, constants$40.const$2, scope);
        }
        static paste_text ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle paste_text$VH() {
        return constants$2027.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*paste_text)(struct _AtkEditableText*,int);
     * }
     */
    public static MemorySegment paste_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2027.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*paste_text)(struct _AtkEditableText*,int);
     * }
     */
    public static void paste_text$set(MemorySegment seg, MemorySegment x) {
        constants$2027.const$0.set(seg, x);
    }
    public static MemorySegment paste_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2027.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void paste_text$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2027.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static paste_text paste_text(MemorySegment segment, Arena scope) {
        return paste_text.ofAddress(paste_text$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


