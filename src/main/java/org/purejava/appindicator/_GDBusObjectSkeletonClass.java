// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GDBusObjectSkeletonClass {
 *     struct _GObjectClass parent_class;
 *     int (*authorize_method)(struct _GDBusObjectSkeleton*,struct _GDBusInterfaceSkeleton*,struct _GDBusMethodInvocation*);
 *     void* padding[8];
 * };
 * }
 */
public class _GDBusObjectSkeletonClass {

    public static MemoryLayout $LAYOUT() {
        return constants$924.const$1;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * int (*authorize_method)(struct _GDBusObjectSkeleton*,struct _GDBusInterfaceSkeleton*,struct _GDBusMethodInvocation*);
     * }
     */
    public interface authorize_method {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(authorize_method fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$924.const$2, fi, constants$12.const$2, scope);
        }
        static authorize_method ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle authorize_method$VH() {
        return constants$924.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*authorize_method)(struct _GDBusObjectSkeleton*,struct _GDBusInterfaceSkeleton*,struct _GDBusMethodInvocation*);
     * }
     */
    public static MemorySegment authorize_method$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$924.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*authorize_method)(struct _GDBusObjectSkeleton*,struct _GDBusInterfaceSkeleton*,struct _GDBusMethodInvocation*);
     * }
     */
    public static void authorize_method$set(MemorySegment seg, MemorySegment x) {
        constants$924.const$3.set(seg, x);
    }
    public static MemorySegment authorize_method$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$924.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void authorize_method$set(MemorySegment seg, long index, MemorySegment x) {
        constants$924.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static authorize_method authorize_method(MemorySegment segment, Arena scope) {
        return authorize_method.ofAddress(authorize_method$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(144, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


