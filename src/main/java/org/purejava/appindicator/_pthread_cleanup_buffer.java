// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _pthread_cleanup_buffer {
 *     void (*__routine)(void*);
 *     void* __arg;
 *     int __canceltype;
 *     struct _pthread_cleanup_buffer* __prev;
 * };
 * }
 */
public class _pthread_cleanup_buffer {

    public static MemoryLayout $LAYOUT() {
        return constants$515.const$3;
    }
    /**
     * {@snippet :
 * void (*__routine)(void*);
     * }
     */
    public interface __routine {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(__routine fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$515.const$4, fi, constants$13.const$1, scope);
        }
        static __routine ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle __routine$VH() {
        return constants$515.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*__routine)(void*);
     * }
     */
    public static MemorySegment __routine$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$515.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*__routine)(void*);
     * }
     */
    public static void __routine$set(MemorySegment seg, MemorySegment x) {
        constants$515.const$5.set(seg, x);
    }
    public static MemorySegment __routine$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$515.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void __routine$set(MemorySegment seg, long index, MemorySegment x) {
        constants$515.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static __routine __routine(MemorySegment segment, Arena scope) {
        return __routine.ofAddress(__routine$get(segment), scope);
    }
    public static VarHandle __arg$VH() {
        return constants$516.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* __arg;
     * }
     */
    public static MemorySegment __arg$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$516.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* __arg;
     * }
     */
    public static void __arg$set(MemorySegment seg, MemorySegment x) {
        constants$516.const$0.set(seg, x);
    }
    public static MemorySegment __arg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$516.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void __arg$set(MemorySegment seg, long index, MemorySegment x) {
        constants$516.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle __canceltype$VH() {
        return constants$516.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int __canceltype;
     * }
     */
    public static int __canceltype$get(MemorySegment seg) {
        return (int)constants$516.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int __canceltype;
     * }
     */
    public static void __canceltype$set(MemorySegment seg, int x) {
        constants$516.const$1.set(seg, x);
    }
    public static int __canceltype$get(MemorySegment seg, long index) {
        return (int)constants$516.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void __canceltype$set(MemorySegment seg, long index, int x) {
        constants$516.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle __prev$VH() {
        return constants$516.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _pthread_cleanup_buffer* __prev;
     * }
     */
    public static MemorySegment __prev$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$516.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _pthread_cleanup_buffer* __prev;
     * }
     */
    public static void __prev$set(MemorySegment seg, MemorySegment x) {
        constants$516.const$2.set(seg, x);
    }
    public static MemorySegment __prev$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$516.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void __prev$set(MemorySegment seg, long index, MemorySegment x) {
        constants$516.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


