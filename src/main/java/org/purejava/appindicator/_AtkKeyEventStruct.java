// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _AtkKeyEventStruct {
 *     int type;
 *     unsigned int state;
 *     unsigned int keyval;
 *     int length;
 *     char* string;
 *     unsigned short keycode;
 *     unsigned int timestamp;
 * };
 * }
 */
public class _AtkKeyEventStruct {

    public static MemoryLayout $LAYOUT() {
        return constants$1986.const$2;
    }
    public static VarHandle type$VH() {
        return constants$1986.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$1986.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$1986.const$3.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$1986.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$1986.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle state$VH() {
        return constants$1986.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int state;
     * }
     */
    public static int state$get(MemorySegment seg) {
        return (int)constants$1986.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int state;
     * }
     */
    public static void state$set(MemorySegment seg, int x) {
        constants$1986.const$4.set(seg, x);
    }
    public static int state$get(MemorySegment seg, long index) {
        return (int)constants$1986.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void state$set(MemorySegment seg, long index, int x) {
        constants$1986.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle keyval$VH() {
        return constants$1986.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int keyval;
     * }
     */
    public static int keyval$get(MemorySegment seg) {
        return (int)constants$1986.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int keyval;
     * }
     */
    public static void keyval$set(MemorySegment seg, int x) {
        constants$1986.const$5.set(seg, x);
    }
    public static int keyval$get(MemorySegment seg, long index) {
        return (int)constants$1986.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void keyval$set(MemorySegment seg, long index, int x) {
        constants$1986.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle length$VH() {
        return constants$1987.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int length;
     * }
     */
    public static int length$get(MemorySegment seg) {
        return (int)constants$1987.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int length;
     * }
     */
    public static void length$set(MemorySegment seg, int x) {
        constants$1987.const$0.set(seg, x);
    }
    public static int length$get(MemorySegment seg, long index) {
        return (int)constants$1987.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, int x) {
        constants$1987.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle string$VH() {
        return constants$1987.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* string;
     * }
     */
    public static MemorySegment string$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1987.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* string;
     * }
     */
    public static void string$set(MemorySegment seg, MemorySegment x) {
        constants$1987.const$1.set(seg, x);
    }
    public static MemorySegment string$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1987.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void string$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1987.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle keycode$VH() {
        return constants$1987.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short keycode;
     * }
     */
    public static short keycode$get(MemorySegment seg) {
        return (short)constants$1987.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short keycode;
     * }
     */
    public static void keycode$set(MemorySegment seg, short x) {
        constants$1987.const$2.set(seg, x);
    }
    public static short keycode$get(MemorySegment seg, long index) {
        return (short)constants$1987.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void keycode$set(MemorySegment seg, long index, short x) {
        constants$1987.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle timestamp$VH() {
        return constants$1987.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int timestamp;
     * }
     */
    public static int timestamp$get(MemorySegment seg) {
        return (int)constants$1987.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int timestamp;
     * }
     */
    public static void timestamp$set(MemorySegment seg, int x) {
        constants$1987.const$3.set(seg, x);
    }
    public static int timestamp$get(MemorySegment seg, long index) {
        return (int)constants$1987.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void timestamp$set(MemorySegment seg, long index, int x) {
        constants$1987.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


