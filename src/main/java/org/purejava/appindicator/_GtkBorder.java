// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _GtkBorder {
 *     gint16 left;
 *     gint16 right;
 *     gint16 top;
 *     gint16 bottom;
 * };
 * }
 */
public class _GtkBorder {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("left"),
        Constants$root.C_SHORT$LAYOUT.withName("right"),
        Constants$root.C_SHORT$LAYOUT.withName("top"),
        Constants$root.C_SHORT$LAYOUT.withName("bottom")
    ).withName("_GtkBorder");
    public static MemoryLayout $LAYOUT() {
        return _GtkBorder.$struct$LAYOUT;
    }
    static final VarHandle left$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("left"));
    public static VarHandle left$VH() {
        return _GtkBorder.left$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint16 left;
     * }
     */
    public static short left$get(MemorySegment seg) {
        return (short)_GtkBorder.left$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint16 left;
     * }
     */
    public static void left$set(MemorySegment seg, short x) {
        _GtkBorder.left$VH.set(seg, x);
    }
    public static short left$get(MemorySegment seg, long index) {
        return (short)_GtkBorder.left$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void left$set(MemorySegment seg, long index, short x) {
        _GtkBorder.left$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle right$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("right"));
    public static VarHandle right$VH() {
        return _GtkBorder.right$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint16 right;
     * }
     */
    public static short right$get(MemorySegment seg) {
        return (short)_GtkBorder.right$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint16 right;
     * }
     */
    public static void right$set(MemorySegment seg, short x) {
        _GtkBorder.right$VH.set(seg, x);
    }
    public static short right$get(MemorySegment seg, long index) {
        return (short)_GtkBorder.right$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void right$set(MemorySegment seg, long index, short x) {
        _GtkBorder.right$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle top$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("top"));
    public static VarHandle top$VH() {
        return _GtkBorder.top$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint16 top;
     * }
     */
    public static short top$get(MemorySegment seg) {
        return (short)_GtkBorder.top$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint16 top;
     * }
     */
    public static void top$set(MemorySegment seg, short x) {
        _GtkBorder.top$VH.set(seg, x);
    }
    public static short top$get(MemorySegment seg, long index) {
        return (short)_GtkBorder.top$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void top$set(MemorySegment seg, long index, short x) {
        _GtkBorder.top$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bottom$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bottom"));
    public static VarHandle bottom$VH() {
        return _GtkBorder.bottom$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint16 bottom;
     * }
     */
    public static short bottom$get(MemorySegment seg) {
        return (short)_GtkBorder.bottom$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint16 bottom;
     * }
     */
    public static void bottom$set(MemorySegment seg, short x) {
        _GtkBorder.bottom$VH.set(seg, x);
    }
    public static short bottom$get(MemorySegment seg, long index) {
        return (short)_GtkBorder.bottom$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bottom$set(MemorySegment seg, long index, short x) {
        _GtkBorder.bottom$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


