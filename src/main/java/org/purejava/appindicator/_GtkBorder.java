// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkBorder {
 *     short left;
 *     short right;
 *     short top;
 *     short bottom;
 * };
 * }
 */
public class _GtkBorder {

    public static MemoryLayout $LAYOUT() {
        return constants$1958.const$4;
    }
    public static VarHandle left$VH() {
        return constants$1958.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short left;
     * }
     */
    public static short left$get(MemorySegment seg) {
        return (short)constants$1958.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short left;
     * }
     */
    public static void left$set(MemorySegment seg, short x) {
        constants$1958.const$5.set(seg, x);
    }
    public static short left$get(MemorySegment seg, long index) {
        return (short)constants$1958.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void left$set(MemorySegment seg, long index, short x) {
        constants$1958.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle right$VH() {
        return constants$1959.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short right;
     * }
     */
    public static short right$get(MemorySegment seg) {
        return (short)constants$1959.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short right;
     * }
     */
    public static void right$set(MemorySegment seg, short x) {
        constants$1959.const$0.set(seg, x);
    }
    public static short right$get(MemorySegment seg, long index) {
        return (short)constants$1959.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void right$set(MemorySegment seg, long index, short x) {
        constants$1959.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle top$VH() {
        return constants$1959.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short top;
     * }
     */
    public static short top$get(MemorySegment seg) {
        return (short)constants$1959.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short top;
     * }
     */
    public static void top$set(MemorySegment seg, short x) {
        constants$1959.const$1.set(seg, x);
    }
    public static short top$get(MemorySegment seg, long index) {
        return (short)constants$1959.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void top$set(MemorySegment seg, long index, short x) {
        constants$1959.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bottom$VH() {
        return constants$1959.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short bottom;
     * }
     */
    public static short bottom$get(MemorySegment seg) {
        return (short)constants$1959.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short bottom;
     * }
     */
    public static void bottom$set(MemorySegment seg, short x) {
        constants$1959.const$2.set(seg, x);
    }
    public static short bottom$get(MemorySegment seg, long index) {
        return (short)constants$1959.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bottom$set(MemorySegment seg, long index, short x) {
        constants$1959.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


