// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfShort;

/**
 * {@snippet lang=c :
 * struct _GtkBorder {
 *     gint16 left;
 *     gint16 right;
 *     gint16 top;
 *     gint16 bottom;
 * }
 * }
 */
public class _GtkBorder {

    _GtkBorder() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_SHORT.withName("left"),
        app_indicator_h.C_SHORT.withName("right"),
        app_indicator_h.C_SHORT.withName("top"),
        app_indicator_h.C_SHORT.withName("bottom")
    ).withName("_GtkBorder");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort left$LAYOUT = (OfShort)$LAYOUT.select(groupElement("left"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint16 left
     * }
     */
    public static final OfShort left$layout() {
        return left$LAYOUT;
    }

    private static final long left$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint16 left
     * }
     */
    public static final long left$offset() {
        return left$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint16 left
     * }
     */
    public static short left(MemorySegment struct) {
        return struct.get(left$LAYOUT, left$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint16 left
     * }
     */
    public static void left(MemorySegment struct, short fieldValue) {
        struct.set(left$LAYOUT, left$OFFSET, fieldValue);
    }

    private static final OfShort right$LAYOUT = (OfShort)$LAYOUT.select(groupElement("right"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint16 right
     * }
     */
    public static final OfShort right$layout() {
        return right$LAYOUT;
    }

    private static final long right$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint16 right
     * }
     */
    public static final long right$offset() {
        return right$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint16 right
     * }
     */
    public static short right(MemorySegment struct) {
        return struct.get(right$LAYOUT, right$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint16 right
     * }
     */
    public static void right(MemorySegment struct, short fieldValue) {
        struct.set(right$LAYOUT, right$OFFSET, fieldValue);
    }

    private static final OfShort top$LAYOUT = (OfShort)$LAYOUT.select(groupElement("top"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint16 top
     * }
     */
    public static final OfShort top$layout() {
        return top$LAYOUT;
    }

    private static final long top$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint16 top
     * }
     */
    public static final long top$offset() {
        return top$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint16 top
     * }
     */
    public static short top(MemorySegment struct) {
        return struct.get(top$LAYOUT, top$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint16 top
     * }
     */
    public static void top(MemorySegment struct, short fieldValue) {
        struct.set(top$LAYOUT, top$OFFSET, fieldValue);
    }

    private static final OfShort bottom$LAYOUT = (OfShort)$LAYOUT.select(groupElement("bottom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint16 bottom
     * }
     */
    public static final OfShort bottom$layout() {
        return bottom$LAYOUT;
    }

    private static final long bottom$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint16 bottom
     * }
     */
    public static final long bottom$offset() {
        return bottom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint16 bottom
     * }
     */
    public static short bottom(MemorySegment struct) {
        return struct.get(bottom$LAYOUT, bottom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint16 bottom
     * }
     */
    public static void bottom(MemorySegment struct, short fieldValue) {
        struct.set(bottom$LAYOUT, bottom$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

